// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "DocumentFragment",
			pos:  position{line: 21, col: 1, offset: 424},
			expr: &actionExpr{
				pos: position{line: 22, col: 5, offset: 448},
				run: (*parser).callonDocumentFragment1,
				expr: &seqExpr{
					pos: position{line: 22, col: 5, offset: 448},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 22, col: 5, offset: 448},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 22, col: 16, offset: 459},
								expr: &ruleRefExpr{
									pos:  position{line: 22, col: 17, offset: 460},
									name: "BlockAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 23, col: 5, offset: 482},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 24, col: 9, offset: 500},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1055, col: 5, offset: 33693},
										run: (*parser).callonDocumentFragment8,
										expr: &seqExpr{
											pos: position{line: 1055, col: 5, offset: 33693},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 1055, col: 5, offset: 33693},
													run: (*parser).callonDocumentFragment10,
												},
												&labeledExpr{
													pos:   position{line: 1058, col: 5, offset: 33751},
													label: "frontmatter",
													expr: &actionExpr{
														pos: position{line: 1064, col: 20, offset: 33908},
														run: (*parser).callonDocumentFragment12,
														expr: &seqExpr{
															pos: position{line: 1064, col: 20, offset: 33908},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 1068, col: 30, offset: 34080},
																	val:        "---",
																	ignoreCase: false,
																	want:       "\"---\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 1068, col: 36, offset: 34086},
																	expr: &choiceExpr{
																		pos: position{line: 2878, col: 10, offset: 95044},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2878, col: 10, offset: 95044},
																				val:        " ",
																				ignoreCase: false,
																				want:       "\" \"",
																			},
																			&actionExpr{
																				pos: position{line: 2878, col: 16, offset: 95050},
																				run: (*parser).callonDocumentFragment18,
																				expr: &litMatcher{
																					pos:        position{line: 2878, col: 16, offset: 95050},
																					val:        "\t",
																					ignoreCase: false,
																					want:       "\"\\t\"",
																				},
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2893, col: 8, offset: 95335},
																	alternatives: []interface{}{
																		&notExpr{
																			pos: position{line: 2890, col: 8, offset: 95285},
																			expr: &anyMatcher{
																				line: 2890, col: 9, offset: 95286,
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2886, col: 12, offset: 95178},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2886, col: 19, offset: 95185},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&actionExpr{
																			pos: position{line: 2886, col: 28, offset: 95194},
																			run: (*parser).callonDocumentFragment25,
																			expr: &litMatcher{
																				pos:        position{line: 2886, col: 28, offset: 95194},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1064, col: 45, offset: 33933},
																	label: "content",
																	expr: &zeroOrOneExpr{
																		pos: position{line: 1064, col: 53, offset: 33941},
																		expr: &actionExpr{
																			pos: position{line: 1070, col: 27, offset: 34124},
																			run: (*parser).callonDocumentFragment29,
																			expr: &zeroOrMoreExpr{
																				pos: position{line: 1070, col: 27, offset: 34124},
																				expr: &oneOrMoreExpr{
																					pos: position{line: 1070, col: 28, offset: 34125},
																					expr: &seqExpr{
																						pos: position{line: 1070, col: 29, offset: 34126},
																						exprs: []interface{}{
																							&notExpr{
																								pos: position{line: 1070, col: 29, offset: 34126},
																								expr: &seqExpr{
																									pos: position{line: 1068, col: 30, offset: 34080},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 1068, col: 30, offset: 34080},
																											val:        "---",
																											ignoreCase: false,
																											want:       "\"---\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 1068, col: 36, offset: 34086},
																											expr: &choiceExpr{
																												pos: position{line: 2878, col: 10, offset: 95044},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2878, col: 10, offset: 95044},
																														val:        " ",
																														ignoreCase: false,
																														want:       "\" \"",
																													},
																													&actionExpr{
																														pos: position{line: 2878, col: 16, offset: 95050},
																														run: (*parser).callonDocumentFragment39,
																														expr: &litMatcher{
																															pos:        position{line: 2878, col: 16, offset: 95050},
																															val:        "\t",
																															ignoreCase: false,
																															want:       "\"\\t\"",
																														},
																													},
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2893, col: 8, offset: 95335},
																											alternatives: []interface{}{
																												&notExpr{
																													pos: position{line: 2890, col: 8, offset: 95285},
																													expr: &anyMatcher{
																														line: 2890, col: 9, offset: 95286,
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 2886, col: 12, offset: 95178},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2886, col: 19, offset: 95185},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&actionExpr{
																													pos: position{line: 2886, col: 28, offset: 95194},
																													run: (*parser).callonDocumentFragment46,
																													expr: &litMatcher{
																														pos:        position{line: 2886, col: 28, offset: 95194},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&anyMatcher{
																								line: 1070, col: 55, offset: 34152,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 1068, col: 30, offset: 34080},
																	val:        "---",
																	ignoreCase: false,
																	want:       "\"---\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 1068, col: 36, offset: 34086},
																	expr: &choiceExpr{
																		pos: position{line: 2878, col: 10, offset: 95044},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2878, col: 10, offset: 95044},
																				val:        " ",
																				ignoreCase: false,
																				want:       "\" \"",
																			},
																			&actionExpr{
																				pos: position{line: 2878, col: 16, offset: 95050},
																				run: (*parser).callonDocumentFragment53,
																				expr: &litMatcher{
																					pos:        position{line: 2878, col: 16, offset: 95050},
																					val:        "\t",
																					ignoreCase: false,
																					want:       "\"\\t\"",
																				},
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2893, col: 8, offset: 95335},
																	alternatives: []interface{}{
																		&notExpr{
																			pos: position{line: 2890, col: 8, offset: 95285},
																			expr: &anyMatcher{
																				line: 2890, col: 9, offset: 95286,
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2886, col: 12, offset: 95178},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2886, col: 19, offset: 95185},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&actionExpr{
																			pos: position{line: 2886, col: 28, offset: 95194},
																			run: (*parser).callonDocumentFragment60,
																			expr: &litMatcher{
																				pos:        position{line: 2886, col: 28, offset: 95194},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 835, col: 5, offset: 26265},
										run: (*parser).callonDocumentFragment62,
										expr: &seqExpr{
											pos: position{line: 835, col: 5, offset: 26265},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 835, col: 5, offset: 26265},
													run: (*parser).callonDocumentFragment64,
												},
												&zeroOrMoreExpr{
													pos: position{line: 838, col: 5, offset: 26326},
													expr: &actionExpr{
														pos: position{line: 482, col: 14, offset: 15644},
														run: (*parser).callonDocumentFragment66,
														expr: &seqExpr{
															pos: position{line: 482, col: 14, offset: 15644},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 482, col: 14, offset: 15644},
																	expr: &notExpr{
																		pos: position{line: 2890, col: 8, offset: 95285},
																		expr: &anyMatcher{
																			line: 2890, col: 9, offset: 95286,
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 482, col: 19, offset: 15649},
																	expr: &choiceExpr{
																		pos: position{line: 2878, col: 10, offset: 95044},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2878, col: 10, offset: 95044},
																				val:        " ",
																				ignoreCase: false,
																				want:       "\" \"",
																			},
																			&actionExpr{
																				pos: position{line: 2878, col: 16, offset: 95050},
																				run: (*parser).callonDocumentFragment74,
																				expr: &litMatcher{
																					pos:        position{line: 2878, col: 16, offset: 95050},
																					val:        "\t",
																					ignoreCase: false,
																					want:       "\"\\t\"",
																				},
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2893, col: 8, offset: 95335},
																	alternatives: []interface{}{
																		&notExpr{
																			pos: position{line: 2890, col: 8, offset: 95285},
																			expr: &anyMatcher{
																				line: 2890, col: 9, offset: 95286,
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2886, col: 12, offset: 95178},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2886, col: 19, offset: 95185},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&actionExpr{
																			pos: position{line: 2886, col: 28, offset: 95194},
																			run: (*parser).callonDocumentFragment81,
																			expr: &litMatcher{
																				pos:        position{line: 2886, col: 28, offset: 95194},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 839, col: 5, offset: 26376},
													label: "title",
													expr: &actionExpr{
														pos: position{line: 853, col: 5, offset: 26909},
														run: (*parser).callonDocumentFragment84,
														expr: &seqExpr{
															pos: position{line: 853, col: 5, offset: 26909},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 853, col: 5, offset: 26909},
																	val:        "=",
																	ignoreCase: false,
																	want:       "\"=\"",
																},
																&actionExpr{
																	pos: position{line: 2882, col: 11, offset: 95109},
																	run: (*parser).callonDocumentFragment87,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2882, col: 11, offset: 95109},
																		expr: &charClassMatcher{
																			pos:        position{line: 2882, col: 12, offset: 95110},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 853, col: 16, offset: 26920},
																	label: "title",
																	expr: &actionExpr{
																		pos: position{line: 2368, col: 20, offset: 79760},
																		run: (*parser).callonDocumentFragment91,
																		expr: &zeroOrMoreExpr{
																			pos: position{line: 2368, col: 20, offset: 79760},
																			expr: &charClassMatcher{
																				pos:        position{line: 2368, col: 20, offset: 79760},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2893, col: 8, offset: 95335},
																	alternatives: []interface{}{
																		&notExpr{
																			pos: position{line: 2890, col: 8, offset: 95285},
																			expr: &anyMatcher{
																				line: 2890, col: 9, offset: 95286,
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2886, col: 12, offset: 95178},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2886, col: 19, offset: 95185},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&actionExpr{
																			pos: position{line: 2886, col: 28, offset: 95194},
																			run: (*parser).callonDocumentFragment99,
																			expr: &litMatcher{
																				pos:        position{line: 2886, col: 28, offset: 95194},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 840, col: 5, offset: 26400},
													label: "info",
													expr: &zeroOrOneExpr{
														pos: position{line: 840, col: 10, offset: 26405},
														expr: &actionExpr{
															pos: position{line: 858, col: 5, offset: 27017},
															run: (*parser).callonDocumentFragment103,
															expr: &seqExpr{
																pos: position{line: 858, col: 5, offset: 27017},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 858, col: 5, offset: 27017},
																		expr: &actionExpr{
																			pos: position{line: 482, col: 14, offset: 15644},
																			run: (*parser).callonDocumentFragment106,
																			expr: &seqExpr{
																				pos: position{line: 482, col: 14, offset: 15644},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 482, col: 14, offset: 15644},
																						expr: &notExpr{
																							pos: position{line: 2890, col: 8, offset: 95285},
																							expr: &anyMatcher{
																								line: 2890, col: 9, offset: 95286,
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 482, col: 19, offset: 15649},
																						expr: &choiceExpr{
																							pos: position{line: 2878, col: 10, offset: 95044},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2878, col: 10, offset: 95044},
																									val:        " ",
																									ignoreCase: false,
																									want:       "\" \"",
																								},
																								&actionExpr{
																									pos: position{line: 2878, col: 16, offset: 95050},
																									run: (*parser).callonDocumentFragment114,
																									expr: &litMatcher{
																										pos:        position{line: 2878, col: 16, offset: 95050},
																										val:        "\t",
																										ignoreCase: false,
																										want:       "\"\\t\"",
																									},
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2893, col: 8, offset: 95335},
																						alternatives: []interface{}{
																							&notExpr{
																								pos: position{line: 2890, col: 8, offset: 95285},
																								expr: &anyMatcher{
																									line: 2890, col: 9, offset: 95286,
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 2886, col: 12, offset: 95178},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2886, col: 19, offset: 95185},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&actionExpr{
																								pos: position{line: 2886, col: 28, offset: 95194},
																								run: (*parser).callonDocumentFragment121,
																								expr: &litMatcher{
																									pos:        position{line: 2886, col: 28, offset: 95194},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 859, col: 5, offset: 27032},
																		expr: &choiceExpr{
																			pos: position{line: 859, col: 6, offset: 27033},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2604, col: 22, offset: 86659},
																					run: (*parser).callonDocumentFragment125,
																					expr: &seqExpr{
																						pos: position{line: 2604, col: 22, offset: 86659},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2609, col: 31, offset: 86880},
																								val:        "//",
																								ignoreCase: false,
																								want:       "\"//\"",
																							},
																							&notExpr{
																								pos: position{line: 2609, col: 36, offset: 86885},
																								expr: &litMatcher{
																									pos:        position{line: 2609, col: 37, offset: 86886},
																									val:        "//",
																									ignoreCase: false,
																									want:       "\"//\"",
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 2604, col: 49, offset: 86686},
																								label: "content",
																								expr: &actionExpr{
																									pos: position{line: 2611, col: 29, offset: 86921},
																									run: (*parser).callonDocumentFragment131,
																									expr: &zeroOrMoreExpr{
																										pos: position{line: 2611, col: 29, offset: 86921},
																										expr: &charClassMatcher{
																											pos:        position{line: 2611, col: 29, offset: 86921},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2893, col: 8, offset: 95335},
																								alternatives: []interface{}{
																									&notExpr{
																										pos: position{line: 2890, col: 8, offset: 95285},
																										expr: &anyMatcher{
																											line: 2890, col: 9, offset: 95286,
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2886, col: 12, offset: 95178},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2886, col: 19, offset: 95185},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&actionExpr{
																										pos: position{line: 2886, col: 28, offset: 95194},
																										run: (*parser).callonDocumentFragment139,
																										expr: &litMatcher{
																											pos:        position{line: 2886, col: 28, offset: 95194},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 569, col: 5, offset: 18198},
																					run: (*parser).callonDocumentFragment141,
																					expr: &seqExpr{
																						pos: position{line: 569, col: 5, offset: 18198},
																						exprs: []interface{}{
																							&andCodeExpr{
																								pos: position{line: 569, col: 5, offset: 18198},
																								run: (*parser).callonDocumentFragment143,
																							},
																							&litMatcher{
																								pos:        position{line: 541, col: 26, offset: 17536},
																								val:        "////",
																								ignoreCase: false,
																								want:       "\"////\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 541, col: 33, offset: 17543},
																								expr: &choiceExpr{
																									pos: position{line: 2878, col: 10, offset: 95044},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2878, col: 10, offset: 95044},
																											val:        " ",
																											ignoreCase: false,
																											want:       "\" \"",
																										},
																										&actionExpr{
																											pos: position{line: 2878, col: 16, offset: 95050},
																											run: (*parser).callonDocumentFragment148,
																											expr: &litMatcher{
																												pos:        position{line: 2878, col: 16, offset: 95050},
																												val:        "\t",
																												ignoreCase: false,
																												want:       "\"\\t\"",
																											},
																										},
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2893, col: 8, offset: 95335},
																								alternatives: []interface{}{
																									&notExpr{
																										pos: position{line: 2890, col: 8, offset: 95285},
																										expr: &anyMatcher{
																											line: 2890, col: 9, offset: 95286,
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2886, col: 12, offset: 95178},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2886, col: 19, offset: 95185},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&actionExpr{
																										pos: position{line: 2886, col: 28, offset: 95194},
																										run: (*parser).callonDocumentFragment155,
																										expr: &litMatcher{
																											pos:        position{line: 2886, col: 28, offset: 95194},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&andCodeExpr{
																								pos: position{line: 574, col: 5, offset: 18381},
																								run: (*parser).callonDocumentFragment157,
																							},
																							&labeledExpr{
																								pos:   position{line: 579, col: 5, offset: 18582},
																								label: "content",
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 590, col: 5, offset: 18906},
																									expr: &actionExpr{
																										pos: position{line: 590, col: 6, offset: 18907},
																										run: (*parser).callonDocumentFragment160,
																										expr: &seqExpr{
																											pos: position{line: 590, col: 6, offset: 18907},
																											exprs: []interface{}{
																												&notExpr{
																													pos: position{line: 590, col: 6, offset: 18907},
																													expr: &choiceExpr{
																														pos: position{line: 587, col: 29, offset: 18849},
																														alternatives: []interface{}{
																															&seqExpr{
																																pos: position{line: 541, col: 26, offset: 17536},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 541, col: 26, offset: 17536},
																																		val:        "////",
																																		ignoreCase: false,
																																		want:       "\"////\"",
																																	},
																																	&zeroOrMoreExpr{
																																		pos: position{line: 541, col: 33, offset: 17543},
																																		expr: &choiceExpr{
																																			pos: position{line: 2878, col: 10, offset: 95044},
																																			alternatives: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 2878, col: 10, offset: 95044},
																																					val:        " ",
																																					ignoreCase: false,
																																					want:       "\" \"",
																																				},
																																				&actionExpr{
																																					pos: position{line: 2878, col: 16, offset: 95050},
																																					run: (*parser).callonDocumentFragment169,
																																					expr: &litMatcher{
																																						pos:        position{line: 2878, col: 16, offset: 95050},
																																						val:        "\t",
																																						ignoreCase: false,
																																						want:       "\"\\t\"",
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&choiceExpr{
																																		pos: position{line: 2893, col: 8, offset: 95335},
																																		alternatives: []interface{}{
																																			&notExpr{
																																				pos: position{line: 2890, col: 8, offset: 95285},
																																				expr: &anyMatcher{
																																					line: 2890, col: 9, offset: 95286,
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 2886, col: 12, offset: 95178},
																																				val:        "\n",
																																				ignoreCase: false,
																																				want:       "\"\\n\"",
																																			},
																																			&litMatcher{
																																				pos:        position{line: 2886, col: 19, offset: 95185},
																																				val:        "\r\n",
																																				ignoreCase: false,
																																				want:       "\"\\r\\n\"",
																																			},
																																			&actionExpr{
																																				pos: position{line: 2886, col: 28, offset: 95194},
																																				run: (*parser).callonDocumentFragment176,
																																				expr: &litMatcher{
																																					pos:        position{line: 2886, col: 28, offset: 95194},
																																					val:        "\r",
																																					ignoreCase: false,
																																					want:       "\"\\r\"",
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 2890, col: 8, offset: 95285},
																																expr: &anyMatcher{
																																	line: 2890, col: 9, offset: 95286,
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 591, col: 5, offset: 18937},
																													label: "line",
																													expr: &actionExpr{
																														pos: position{line: 558, col: 5, offset: 17893},
																														run: (*parser).callonDocumentFragment181,
																														expr: &seqExpr{
																															pos: position{line: 558, col: 5, offset: 17893},
																															exprs: []interface{}{
																																&notExpr{
																																	pos: position{line: 558, col: 5, offset: 17893},
																																	expr: &notExpr{
																																		pos: position{line: 2890, col: 8, offset: 95285},
																																		expr: &anyMatcher{
																																			line: 2890, col: 9, offset: 95286,
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 559, col: 5, offset: 17966},
																																	label: "content",
																																	expr: &actionExpr{
																																		pos: position{line: 559, col: 14, offset: 17975},
																																		run: (*parser).callonDocumentFragment187,
																																		expr: &zeroOrMoreExpr{
																																			pos: position{line: 559, col: 14, offset: 17975},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 559, col: 14, offset: 17975},
																																				val:        "[^\\r\\n]",
																																				chars:      []rune{'\r', '\n'},
																																				ignoreCase: false,
																																				inverted:   true,
																																			},
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2893, col: 8, offset: 95335},
																																	alternatives: []interface{}{
																																		&notExpr{
																																			pos: position{line: 2890, col: 8, offset: 95285},
																																			expr: &anyMatcher{
																																				line: 2890, col: 9, offset: 95286,
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2886, col: 12, offset: 95178},
																																			val:        "\n",
																																			ignoreCase: false,
																																			want:       "\"\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2886, col: 19, offset: 95185},
																																			val:        "\r\n",
																																			ignoreCase: false,
																																			want:       "\"\\r\\n\"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 2886, col: 28, offset: 95194},
																																			run: (*parser).callonDocumentFragment195,
																																			expr: &litMatcher{
																																				pos:        position{line: 2886, col: 28, offset: 95194},
																																				val:        "\r",
																																				ignoreCase: false,
																																				want:       "\"\\r\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 580, col: 5, offset: 18616},
																								expr: &choiceExpr{
																									pos: position{line: 587, col: 29, offset: 18849},
																									alternatives: []interface{}{
																										&seqExpr{
																											pos: position{line: 541, col: 26, offset: 17536},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 541, col: 26, offset: 17536},
																													val:        "////",
																													ignoreCase: false,
																													want:       "\"////\"",
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 541, col: 33, offset: 17543},
																													expr: &choiceExpr{
																														pos: position{line: 2878, col: 10, offset: 95044},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2878, col: 10, offset: 95044},
																																val:        " ",
																																ignoreCase: false,
																																want:       "\" \"",
																															},
																															&actionExpr{
																																pos: position{line: 2878, col: 16, offset: 95050},
																																run: (*parser).callonDocumentFragment204,
																																expr: &litMatcher{
																																	pos:        position{line: 2878, col: 16, offset: 95050},
																																	val:        "\t",
																																	ignoreCase: false,
																																	want:       "\"\\t\"",
																																},
																															},
																														},
																													},
																												},
																												&choiceExpr{
																													pos: position{line: 2893, col: 8, offset: 95335},
																													alternatives: []interface{}{
																														&notExpr{
																															pos: position{line: 2890, col: 8, offset: 95285},
																															expr: &anyMatcher{
																																line: 2890, col: 9, offset: 95286,
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 2886, col: 12, offset: 95178},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 2886, col: 19, offset: 95185},
																															val:        "\r\n",
																															ignoreCase: false,
																															want:       "\"\\r\\n\"",
																														},
																														&actionExpr{
																															pos: position{line: 2886, col: 28, offset: 95194},
																															run: (*parser).callonDocumentFragment211,
																															expr: &litMatcher{
																																pos:        position{line: 2886, col: 28, offset: 95194},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2890, col: 8, offset: 95285},
																											expr: &anyMatcher{
																												line: 2890, col: 9, offset: 95286,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 860, col: 5, offset: 27107},
																		label: "authors",
																		expr: &actionExpr{
																			pos: position{line: 866, col: 20, offset: 27357},
																			run: (*parser).callonDocumentFragment216,
																			expr: &seqExpr{
																				pos: position{line: 866, col: 20, offset: 27357},
																				exprs: []interface{}{
																					&zeroOrMoreExpr{
																						pos: position{line: 866, col: 20, offset: 27357},
																						expr: &choiceExpr{
																							pos: position{line: 2878, col: 10, offset: 95044},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2878, col: 10, offset: 95044},
																									val:        " ",
																									ignoreCase: false,
																									want:       "\" \"",
																								},
																								&actionExpr{
																									pos: position{line: 2878, col: 16, offset: 95050},
																									run: (*parser).callonDocumentFragment221,
																									expr: &litMatcher{
																										pos:        position{line: 2878, col: 16, offset: 95050},
																										val:        "\t",
																										ignoreCase: false,
																										want:       "\"\\t\"",
																									},
																								},
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 866, col: 27, offset: 27364},
																						label: "authors",
																						expr: &choiceExpr{
																							pos: position{line: 866, col: 36, offset: 27373},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 870, col: 30, offset: 27493},
																									run: (*parser).callonDocumentFragment225,
																									expr: &seqExpr{
																										pos: position{line: 870, col: 30, offset: 27493},
																										exprs: []interface{}{
																											&notExpr{
																												pos: position{line: 870, col: 30, offset: 27493},
																												expr: &litMatcher{
																													pos:        position{line: 870, col: 31, offset: 27494},
																													val:        ":",
																													ignoreCase: false,
																													want:       "\":\"",
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 870, col: 35, offset: 27498},
																												label: "authors",
																												expr: &oneOrMoreExpr{
																													pos: position{line: 870, col: 44, offset: 27507},
																													expr: &actionExpr{
																														pos: position{line: 879, col: 5, offset: 27739},
																														run: (*parser).callonDocumentFragment231,
																														expr: &seqExpr{
																															pos: position{line: 879, col: 5, offset: 27739},
																															exprs: []interface{}{
																																&labeledExpr{
																																	pos:   position{line: 879, col: 5, offset: 27739},
																																	label: "fullName",
																																	expr: &zeroOrOneExpr{
																																		pos: position{line: 879, col: 14, offset: 27748},
																																		expr: &actionExpr{
																																			pos: position{line: 890, col: 5, offset: 28128},
																																			run: (*parser).callonDocumentFragment235,
																																			expr: &seqExpr{
																																				pos: position{line: 890, col: 5, offset: 28128},
																																				exprs: []interface{}{
																																					&labeledExpr{
																																						pos:   position{line: 890, col: 5, offset: 28128},
																																						label: "part1",
																																						expr: &actionExpr{
																																							pos: position{line: 890, col: 12, offset: 28135},
																																							run: (*parser).callonDocumentFragment238,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 890, col: 12, offset: 28135},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 890, col: 12, offset: 28135},
																																									val:        "[^<;\\r\\n ]",
																																									chars:      []rune{'<', ';', '\r', '\n', ' '},
																																									ignoreCase: false,
																																									inverted:   true,
																																								},
																																							},
																																						},
																																					},
																																					&zeroOrMoreExpr{
																																						pos: position{line: 893, col: 5, offset: 28215},
																																						expr: &choiceExpr{
																																							pos: position{line: 2878, col: 10, offset: 95044},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 2878, col: 10, offset: 95044},
																																									val:        " ",
																																									ignoreCase: false,
																																									want:       "\" \"",
																																								},
																																								&actionExpr{
																																									pos: position{line: 2878, col: 16, offset: 95050},
																																									run: (*parser).callonDocumentFragment244,
																																									expr: &litMatcher{
																																										pos:        position{line: 2878, col: 16, offset: 95050},
																																										val:        "\t",
																																										ignoreCase: false,
																																										want:       "\"\\t\"",
																																									},
																																								},
																																							},
																																						},
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 894, col: 5, offset: 28226},
																																						label: "part2",
																																						expr: &zeroOrOneExpr{
																																							pos: position{line: 894, col: 11, offset: 28232},
																																							expr: &actionExpr{
																																								pos: position{line: 894, col: 12, offset: 28233},
																																								run: (*parser).callonDocumentFragment248,
																																								expr: &oneOrMoreExpr{
																																									pos: position{line: 894, col: 12, offset: 28233},
																																									expr: &charClassMatcher{
																																										pos:        position{line: 894, col: 12, offset: 28233},
																																										val:        "[^<;\\r\\n ]",
																																										chars:      []rune{'<', ';', '\r', '\n', ' '},
																																										ignoreCase: false,
																																										inverted:   true,
																																									},
																																								},
																																							},
																																						},
																																					},
																																					&zeroOrMoreExpr{
																																						pos: position{line: 897, col: 5, offset: 28314},
																																						expr: &choiceExpr{
																																							pos: position{line: 2878, col: 10, offset: 95044},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 2878, col: 10, offset: 95044},
																																									val:        " ",
																																									ignoreCase: false,
																																									want:       "\" \"",
																																								},
																																								&actionExpr{
																																									pos: position{line: 2878, col: 16, offset: 95050},
																																									run: (*parser).callonDocumentFragment254,
																																									expr: &litMatcher{
																																										pos:        position{line: 2878, col: 16, offset: 95050},
																																										val:        "\t",
																																										ignoreCase: false,
																																										want:       "\"\\t\"",
																																									},
																																								},
																																							},
																																						},
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 898, col: 5, offset: 28325},
																																						label: "part3",
																																						expr: &zeroOrOneExpr{
																																							pos: position{line: 898, col: 11, offset: 28331},
																																							expr: &actionExpr{
																																								pos: position{line: 898, col: 12, offset: 28332},
																																								run: (*parser).callonDocumentFragment258,
																																								expr: &oneOrMoreExpr{
																																									pos: position{line: 898, col: 12, offset: 28332},
																																									expr: &charClassMatcher{
																																										pos:        position{line: 898, col: 12, offset: 28332},
																																										val:        "[^<;\\r\\n]",
																																										chars:      []rune{'<', ';', '\r', '\n'},
																																										ignoreCase: false,
																																										inverted:   true,
																																									},
																																								},
																																							},
																																						},
																																					},
																																					&zeroOrMoreExpr{
																																						pos: position{line: 901, col: 5, offset: 28411},
																																						expr: &choiceExpr{
																																							pos: position{line: 2878, col: 10, offset: 95044},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 2878, col: 10, offset: 95044},
																																									val:        " ",
																																									ignoreCase: false,
																																									want:       "\" \"",
																																								},
																																								&actionExpr{
																																									pos: position{line: 2878, col: 16, offset: 95050},
																																									run: (*parser).callonDocumentFragment264,
																																									expr: &litMatcher{
																																										pos:        position{line: 2878, col: 16, offset: 95050},
																																										val:        "\t",
																																										ignoreCase: false,
																																										want:       "\"\\t\"",
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 879, col: 40, offset: 27774},
																																	label: "email",
																																	expr: &zeroOrOneExpr{
																																		pos: position{line: 879, col: 46, offset: 27780},
																																		expr: &actionExpr{
																																			pos: position{line: 907, col: 5, offset: 28533},
																																			run: (*parser).callonDocumentFragment268,
																																			expr: &seqExpr{
																																				pos: position{line: 907, col: 5, offset: 28533},
																																				exprs: []interface{}{
																																					&notExpr{
																																						pos: position{line: 907, col: 5, offset: 28533},
																																						expr: &notExpr{
																																							pos: position{line: 2890, col: 8, offset: 95285},
																																							expr: &anyMatcher{
																																								line: 2890, col: 9, offset: 95286,
																																							},
																																						},
																																					},
																																					&litMatcher{
																																						pos:        position{line: 908, col: 5, offset: 28543},
																																						val:        "<",
																																						ignoreCase: false,
																																						want:       "\"<\"",
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 909, col: 5, offset: 28552},
																																						label: "email",
																																						expr: &actionExpr{
																																							pos: position{line: 909, col: 12, offset: 28559},
																																							run: (*parser).callonDocumentFragment275,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 909, col: 13, offset: 28560},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 909, col: 13, offset: 28560},
																																									val:        "[^>\\r\\n]",
																																									chars:      []rune{'>', '\r', '\n'},
																																									ignoreCase: false,
																																									inverted:   true,
																																								},
																																							},
																																						},
																																					},
																																					&litMatcher{
																																						pos:        position{line: 912, col: 5, offset: 28620},
																																						val:        ">",
																																						ignoreCase: false,
																																						want:       "\">\"",
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 879, col: 69, offset: 27803},
																																	expr: &choiceExpr{
																																		pos: position{line: 2878, col: 10, offset: 95044},
																																		alternatives: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2878, col: 10, offset: 95044},
																																				val:        " ",
																																				ignoreCase: false,
																																				want:       "\" \"",
																																			},
																																			&actionExpr{
																																				pos: position{line: 2878, col: 16, offset: 95050},
																																				run: (*parser).callonDocumentFragment282,
																																				expr: &litMatcher{
																																					pos:        position{line: 2878, col: 16, offset: 95050},
																																					val:        "\t",
																																					ignoreCase: false,
																																					want:       "\"\\t\"",
																																				},
																																			},
																																		},
																																	},
																																},
																																&zeroOrOneExpr{
																																	pos: position{line: 879, col: 76, offset: 27810},
																																	expr: &litMatcher{
																																		pos:        position{line: 879, col: 76, offset: 27810},
																																		val:        ";",
																																		ignoreCase: false,
																																		want:       "\";\"",
																																	},
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 879, col: 81, offset: 27815},
																																	expr: &choiceExpr{
																																		pos: position{line: 2878, col: 10, offset: 95044},
																																		alternatives: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2878, col: 10, offset: 95044},
																																				val:        " ",
																																				ignoreCase: false,
																																				want:       "\" \"",
																																			},
																																			&actionExpr{
																																				pos: position{line: 2878, col: 16, offset: 95050},
																																				run: (*parser).callonDocumentFragment289,
																																				expr: &litMatcher{
																																					pos:        position{line: 2878, col: 16, offset: 95050},
																																					val:        "\t",
																																					ignoreCase: false,
																																					want:       "\"\\t\"",
																																				},
																																			},
																																		},
																																	},
																																},
																																&andCodeExpr{
																																	pos: position{line: 880, col: 5, offset: 27827},
																																	run: (*parser).callonDocumentFragment291,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 874, col: 33, offset: 27625},
																									run: (*parser).callonDocumentFragment292,
																									expr: &seqExpr{
																										pos: position{line: 874, col: 33, offset: 27625},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 874, col: 33, offset: 27625},
																												val:        ":author:",
																												ignoreCase: false,
																												want:       "\":author:\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 874, col: 44, offset: 27636},
																												expr: &choiceExpr{
																													pos: position{line: 2878, col: 10, offset: 95044},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2878, col: 10, offset: 95044},
																															val:        " ",
																															ignoreCase: false,
																															want:       "\" \"",
																														},
																														&actionExpr{
																															pos: position{line: 2878, col: 16, offset: 95050},
																															run: (*parser).callonDocumentFragment298,
																															expr: &litMatcher{
																																pos:        position{line: 2878, col: 16, offset: 95050},
																																val:        "\t",
																																ignoreCase: false,
																																want:       "\"\\t\"",
																															},
																														},
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 874, col: 51, offset: 27643},
																												label: "author",
																												expr: &actionExpr{
																													pos: position{line: 879, col: 5, offset: 27739},
																													run: (*parser).callonDocumentFragment301,
																													expr: &seqExpr{
																														pos: position{line: 879, col: 5, offset: 27739},
																														exprs: []interface{}{
																															&labeledExpr{
																																pos:   position{line: 879, col: 5, offset: 27739},
																																label: "fullName",
																																expr: &zeroOrOneExpr{
																																	pos: position{line: 879, col: 14, offset: 27748},
																																	expr: &actionExpr{
																																		pos: position{line: 890, col: 5, offset: 28128},
																																		run: (*parser).callonDocumentFragment305,
																																		expr: &seqExpr{
																																			pos: position{line: 890, col: 5, offset: 28128},
																																			exprs: []interface{}{
																																				&labeledExpr{
																																					pos:   position{line: 890, col: 5, offset: 28128},
																																					label: "part1",
																																					expr: &actionExpr{
																																						pos: position{line: 890, col: 12, offset: 28135},
																																						run: (*parser).callonDocumentFragment308,
																																						expr: &oneOrMoreExpr{
																																							pos: position{line: 890, col: 12, offset: 28135},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 890, col: 12, offset: 28135},
																																								val:        "[^<;\\r\\n ]",
																																								chars:      []rune{'<', ';', '\r', '\n', ' '},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																						},
																																					},
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 893, col: 5, offset: 28215},
																																					expr: &choiceExpr{
																																						pos: position{line: 2878, col: 10, offset: 95044},
																																						alternatives: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 2878, col: 10, offset: 95044},
																																								val:        " ",
																																								ignoreCase: false,
																																								want:       "\" \"",
																																							},
																																							&actionExpr{
																																								pos: position{line: 2878, col: 16, offset: 95050},
																																								run: (*parser).callonDocumentFragment314,
																																								expr: &litMatcher{
																																									pos:        position{line: 2878, col: 16, offset: 95050},
																																									val:        "\t",
																																									ignoreCase: false,
																																									want:       "\"\\t\"",
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 894, col: 5, offset: 28226},
																																					label: "part2",
																																					expr: &zeroOrOneExpr{
																																						pos: position{line: 894, col: 11, offset: 28232},
																																						expr: &actionExpr{
																																							pos: position{line: 894, col: 12, offset: 28233},
																																							run: (*parser).callonDocumentFragment318,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 894, col: 12, offset: 28233},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 894, col: 12, offset: 28233},
																																									val:        "[^<;\\r\\n ]",
																																									chars:      []rune{'<', ';', '\r', '\n', ' '},
																																									ignoreCase: false,
																																									inverted:   true,
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 897, col: 5, offset: 28314},
																																					expr: &choiceExpr{
																																						pos: position{line: 2878, col: 10, offset: 95044},
																																						alternatives: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 2878, col: 10, offset: 95044},
																																								val:        " ",
																																								ignoreCase: false,
																																								want:       "\" \"",
																																							},
																																							&actionExpr{
																																								pos: position{line: 2878, col: 16, offset: 95050},
																																								run: (*parser).callonDocumentFragment324,
																																								expr: &litMatcher{
																																									pos:        position{line: 2878, col: 16, offset: 95050},
																																									val:        "\t",
																																									ignoreCase: false,
																																									want:       "\"\\t\"",
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 898, col: 5, offset: 28325},
																																					label: "part3",
																																					expr: &zeroOrOneExpr{
																																						pos: position{line: 898, col: 11, offset: 28331},
																																						expr: &actionExpr{
																																							pos: position{line: 898, col: 12, offset: 28332},
																																							run: (*parser).callonDocumentFragment328,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 898, col: 12, offset: 28332},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 898, col: 12, offset: 28332},
																																									val:        "[^<;\\r\\n]",
																																									chars:      []rune{'<', ';', '\r', '\n'},
																																									ignoreCase: false,
																																									inverted:   true,
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 901, col: 5, offset: 28411},
																																					expr: &choiceExpr{
																																						pos: position{line: 2878, col: 10, offset: 95044},
																																						alternatives: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 2878, col: 10, offset: 95044},
																																								val:        " ",
																																								ignoreCase: false,
																																								want:       "\" \"",
																																							},
																																							&actionExpr{
																																								pos: position{line: 2878, col: 16, offset: 95050},
																																								run: (*parser).callonDocumentFragment334,
																																								expr: &litMatcher{
																																									pos:        position{line: 2878, col: 16, offset: 95050},
																																									val:        "\t",
																																									ignoreCase: false,
																																									want:       "\"\\t\"",
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 879, col: 40, offset: 27774},
																																label: "email",
																																expr: &zeroOrOneExpr{
																																	pos: position{line: 879, col: 46, offset: 27780},
																																	expr: &actionExpr{
																																		pos: position{line: 907, col: 5, offset: 28533},
																																		run: (*parser).callonDocumentFragment338,
																																		expr: &seqExpr{
																																			pos: position{line: 907, col: 5, offset: 28533},
																																			exprs: []interface{}{
																																				&notExpr{
																																					pos: position{line: 907, col: 5, offset: 28533},
																																					expr: &notExpr{
																																						pos: position{line: 2890, col: 8, offset: 95285},
																																						expr: &anyMatcher{
																																							line: 2890, col: 9, offset: 95286,
																																						},
																																					},
																																				},
																																				&litMatcher{
																																					pos:        position{line: 908, col: 5, offset: 28543},
																																					val:        "<",
																																					ignoreCase: false,
																																					want:       "\"<\"",
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 909, col: 5, offset: 28552},
																																					label: "email",
																																					expr: &actionExpr{
																																						pos: position{line: 909, col: 12, offset: 28559},
																																						run: (*parser).callonDocumentFragment345,
																																						expr: &oneOrMoreExpr{
																																							pos: position{line: 909, col: 13, offset: 28560},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 909, col: 13, offset: 28560},
																																								val:        "[^>\\r\\n]",
																																								chars:      []rune{'>', '\r', '\n'},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																						},
																																					},
																																				},
																																				&litMatcher{
																																					pos:        position{line: 912, col: 5, offset: 28620},
																																					val:        ">",
																																					ignoreCase: false,
																																					want:       "\">\"",
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 879, col: 69, offset: 27803},
																																expr: &choiceExpr{
																																	pos: position{line: 2878, col: 10, offset: 95044},
																																	alternatives: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2878, col: 10, offset: 95044},
																																			val:        " ",
																																			ignoreCase: false,
																																			want:       "\" \"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 2878, col: 16, offset: 95050},
																																			run: (*parser).callonDocumentFragment352,
																																			expr: &litMatcher{
																																				pos:        position{line: 2878, col: 16, offset: 95050},
																																				val:        "\t",
																																				ignoreCase: false,
																																				want:       "\"\\t\"",
																																			},
																																		},
																																	},
																																},
																															},
																															&zeroOrOneExpr{
																																pos: position{line: 879, col: 76, offset: 27810},
																																expr: &litMatcher{
																																	pos:        position{line: 879, col: 76, offset: 27810},
																																	val:        ";",
																																	ignoreCase: false,
																																	want:       "\";\"",
																																},
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 879, col: 81, offset: 27815},
																																expr: &choiceExpr{
																																	pos: position{line: 2878, col: 10, offset: 95044},
																																	alternatives: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2878, col: 10, offset: 95044},
																																			val:        " ",
																																			ignoreCase: false,
																																			want:       "\" \"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 2878, col: 16, offset: 95050},
																																			run: (*parser).callonDocumentFragment359,
																																			expr: &litMatcher{
																																				pos:        position{line: 2878, col: 16, offset: 95050},
																																				val:        "\t",
																																				ignoreCase: false,
																																				want:       "\"\\t\"",
																																			},
																																		},
																																	},
																																},
																															},
																															&andCodeExpr{
																																pos: position{line: 880, col: 5, offset: 27827},
																																run: (*parser).callonDocumentFragment361,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2893, col: 8, offset: 95335},
																						alternatives: []interface{}{
																							&notExpr{
																								pos: position{line: 2890, col: 8, offset: 95285},
																								expr: &anyMatcher{
																									line: 2890, col: 9, offset: 95286,
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 2886, col: 12, offset: 95178},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2886, col: 19, offset: 95185},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&actionExpr{
																								pos: position{line: 2886, col: 28, offset: 95194},
																								run: (*parser).callonDocumentFragment367,
																								expr: &litMatcher{
																									pos:        position{line: 2886, col: 28, offset: 95194},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 861, col: 5, offset: 27138},
																		expr: &choiceExpr{
																			pos: position{line: 861, col: 6, offset: 27139},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2604, col: 22, offset: 86659},
																					run: (*parser).callonDocumentFragment371,
																					expr: &seqExpr{
																						pos: position{line: 2604, col: 22, offset: 86659},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2609, col: 31, offset: 86880},
																								val:        "//",
																								ignoreCase: false,
																								want:       "\"//\"",
																							},
																							&notExpr{
																								pos: position{line: 2609, col: 36, offset: 86885},
																								expr: &litMatcher{
																									pos:        position{line: 2609, col: 37, offset: 86886},
																									val:        "//",
																									ignoreCase: false,
																									want:       "\"//\"",
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 2604, col: 49, offset: 86686},
																								label: "content",
																								expr: &actionExpr{
																									pos: position{line: 2611, col: 29, offset: 86921},
																									run: (*parser).callonDocumentFragment377,
																									expr: &zeroOrMoreExpr{
																										pos: position{line: 2611, col: 29, offset: 86921},
																										expr: &charClassMatcher{
																											pos:        position{line: 2611, col: 29, offset: 86921},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2893, col: 8, offset: 95335},
																								alternatives: []interface{}{
																									&notExpr{
																										pos: position{line: 2890, col: 8, offset: 95285},
																										expr: &anyMatcher{
																											line: 2890, col: 9, offset: 95286,
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2886, col: 12, offset: 95178},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2886, col: 19, offset: 95185},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&actionExpr{
																										pos: position{line: 2886, col: 28, offset: 95194},
																										run: (*parser).callonDocumentFragment385,
																										expr: &litMatcher{
																											pos:        position{line: 2886, col: 28, offset: 95194},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 569, col: 5, offset: 18198},
																					run: (*parser).callonDocumentFragment387,
																					expr: &seqExpr{
																						pos: position{line: 569, col: 5, offset: 18198},
																						exprs: []interface{}{
																							&andCodeExpr{
																								pos: position{line: 569, col: 5, offset: 18198},
																								run: (*parser).callonDocumentFragment389,
																							},
																							&litMatcher{
																								pos:        position{line: 541, col: 26, offset: 17536},
																								val:        "////",
																								ignoreCase: false,
																								want:       "\"////\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 541, col: 33, offset: 17543},
																								expr: &choiceExpr{
																									pos: position{line: 2878, col: 10, offset: 95044},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2878, col: 10, offset: 95044},
																											val:        " ",
																											ignoreCase: false,
																											want:       "\" \"",
																										},
																										&actionExpr{
																											pos: position{line: 2878, col: 16, offset: 95050},
																											run: (*parser).callonDocumentFragment394,
																											expr: &litMatcher{
																												pos:        position{line: 2878, col: 16, offset: 95050},
																												val:        "\t",
																												ignoreCase: false,
																												want:       "\"\\t\"",
																											},
																										},
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2893, col: 8, offset: 95335},
																								alternatives: []interface{}{
																									&notExpr{
																										pos: position{line: 2890, col: 8, offset: 95285},
																										expr: &anyMatcher{
																											line: 2890, col: 9, offset: 95286,
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2886, col: 12, offset: 95178},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2886, col: 19, offset: 95185},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&actionExpr{
																										pos: position{line: 2886, col: 28, offset: 95194},
																										run: (*parser).callonDocumentFragment401,
																										expr: &litMatcher{
																											pos:        position{line: 2886, col: 28, offset: 95194},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&andCodeExpr{
																								pos: position{line: 574, col: 5, offset: 18381},
																								run: (*parser).callonDocumentFragment403,
																							},
																							&labeledExpr{
																								pos:   position{line: 579, col: 5, offset: 18582},
																								label: "content",
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 590, col: 5, offset: 18906},
																									expr: &actionExpr{
																										pos: position{line: 590, col: 6, offset: 18907},
																										run: (*parser).callonDocumentFragment406,
																										expr: &seqExpr{
																											pos: position{line: 590, col: 6, offset: 18907},
																											exprs: []interface{}{
																												&notExpr{
																													pos: position{line: 590, col: 6, offset: 18907},
																													expr: &choiceExpr{
																														pos: position{line: 587, col: 29, offset: 18849},
																														alternatives: []interface{}{
																															&seqExpr{
																																pos: position{line: 541, col: 26, offset: 17536},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 541, col: 26, offset: 17536},
																																		val:        "////",
																																		ignoreCase: false,
																																		want:       "\"////\"",
																																	},
																																	&zeroOrMoreExpr{
																																		pos: position{line: 541, col: 33, offset: 17543},
																																		expr: &choiceExpr{
																																			pos: position{line: 2878, col: 10, offset: 95044},
																																			alternatives: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 2878, col: 10, offset: 95044},
																																					val:        " ",
																																					ignoreCase: false,
																																					want:       "\" \"",
																																				},
																																				&actionExpr{
																																					pos: position{line: 2878, col: 16, offset: 95050},
																																					run: (*parser).callonDocumentFragment415,
																																					expr: &litMatcher{
																																						pos:        position{line: 2878, col: 16, offset: 95050},
																																						val:        "\t",
																																						ignoreCase: false,
																																						want:       "\"\\t\"",
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&choiceExpr{
																																		pos: position{line: 2893, col: 8, offset: 95335},
																																		alternatives: []interface{}{
																																			&notExpr{
																																				pos: position{line: 2890, col: 8, offset: 95285},
																																				expr: &anyMatcher{
																																					line: 2890, col: 9, offset: 95286,
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 2886, col: 12, offset: 95178},
																																				val:        "\n",
																																				ignoreCase: false,
																																				want:       "\"\\n\"",
																																			},
																																			&litMatcher{
																																				pos:        position{line: 2886, col: 19, offset: 95185},
																																				val:        "\r\n",
																																				ignoreCase: false,
																																				want:       "\"\\r\\n\"",
																																			},
																																			&actionExpr{
																																				pos: position{line: 2886, col: 28, offset: 95194},
																																				run: (*parser).callonDocumentFragment422,
																																				expr: &litMatcher{
																																					pos:        position{line: 2886, col: 28, offset: 95194},
																																					val:        "\r",
																																					ignoreCase: false,
																																					want:       "\"\\r\"",
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 2890, col: 8, offset: 95285},
																																expr: &anyMatcher{
																																	line: 2890, col: 9, offset: 95286,
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 591, col: 5, offset: 18937},
																													label: "line",
																													expr: &actionExpr{
																														pos: position{line: 558, col: 5, offset: 17893},
																														run: (*parser).callonDocumentFragment427,
																														expr: &seqExpr{
																															pos: position{line: 558, col: 5, offset: 17893},
																															exprs: []interface{}{
																																&notExpr{
																																	pos: position{line: 558, col: 5, offset: 17893},
																																	expr: &notExpr{
																																		pos: position{line: 2890, col: 8, offset: 95285},
																																		expr: &anyMatcher{
																																			line: 2890, col: 9, offset: 95286,
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 559, col: 5, offset: 17966},
																																	label: "content",
																																	expr: &actionExpr{
																																		pos: position{line: 559, col: 14, offset: 17975},
																																		run: (*parser).callonDocumentFragment433,
																																		expr: &zeroOrMoreExpr{
																																			pos: position{line: 559, col: 14, offset: 17975},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 559, col: 14, offset: 17975},
																																				val:        "[^\\r\\n]",
																																				chars:      []rune{'\r', '\n'},
																																				ignoreCase: false,
																																				inverted:   true,
																																			},
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2893, col: 8, offset: 95335},
																																	alternatives: []interface{}{
																																		&notExpr{
																																			pos: position{line: 2890, col: 8, offset: 95285},
																																			expr: &anyMatcher{
																																				line: 2890, col: 9, offset: 95286,
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2886, col: 12, offset: 95178},
																																			val:        "\n",
																																			ignoreCase: false,
																																			want:       "\"\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2886, col: 19, offset: 95185},
																																			val:        "\r\n",
																																			ignoreCase: false,
																																			want:       "\"\\r\\n\"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 2886, col: 28, offset: 95194},
																																			run: (*parser).callonDocumentFragment441,
																																			expr: &litMatcher{
																																				pos:        position{line: 2886, col: 28, offset: 95194},
																																				val:        "\r",
																																				ignoreCase: false,
																																				want:       "\"\\r\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 580, col: 5, offset: 18616},
																								expr: &choiceExpr{
																									pos: position{line: 587, col: 29, offset: 18849},
																									alternatives: []interface{}{
																										&seqExpr{
																											pos: position{line: 541, col: 26, offset: 17536},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 541, col: 26, offset: 17536},
																													val:        "////",
																													ignoreCase: false,
																													want:       "\"////\"",
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 541, col: 33, offset: 17543},
																													expr: &choiceExpr{
																														pos: position{line: 2878, col: 10, offset: 95044},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2878, col: 10, offset: 95044},
																																val:        " ",
																																ignoreCase: false,
																																want:       "\" \"",
																															},
																															&actionExpr{
																																pos: position{line: 2878, col: 16, offset: 95050},
																																run: (*parser).callonDocumentFragment450,
																																expr: &litMatcher{
																																	pos:        position{line: 2878, col: 16, offset: 95050},
																																	val:        "\t",
																																	ignoreCase: false,
																																	want:       "\"\\t\"",
																																},
																															},
																														},
																													},
																												},
																												&choiceExpr{
																													pos: position{line: 2893, col: 8, offset: 95335},
																													alternatives: []interface{}{
																														&notExpr{
																															pos: position{line: 2890, col: 8, offset: 95285},
																															expr: &anyMatcher{
																																line: 2890, col: 9, offset: 95286,
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 2886, col: 12, offset: 95178},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 2886, col: 19, offset: 95185},
																															val:        "\r\n",
																															ignoreCase: false,
																															want:       "\"\\r\\n\"",
																														},
																														&actionExpr{
																															pos: position{line: 2886, col: 28, offset: 95194},
																															run: (*parser).callonDocumentFragment457,
																															expr: &litMatcher{
																																pos:        position{line: 2886, col: 28, offset: 95194},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2890, col: 8, offset: 95285},
																											expr: &anyMatcher{
																												line: 2890, col: 9, offset: 95286,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 862, col: 5, offset: 27213},
																		label: "revision",
																		expr: &zeroOrOneExpr{
																			pos: position{line: 862, col: 14, offset: 27222},
																			expr: &actionExpr{
																				pos: position{line: 918, col: 21, offset: 28809},
																				run: (*parser).callonDocumentFragment463,
																				expr: &seqExpr{
																					pos: position{line: 918, col: 21, offset: 28809},
																					exprs: []interface{}{
																						&zeroOrMoreExpr{
																							pos: position{line: 918, col: 21, offset: 28809},
																							expr: &choiceExpr{
																								pos: position{line: 2878, col: 10, offset: 95044},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2878, col: 10, offset: 95044},
																										val:        " ",
																										ignoreCase: false,
																										want:       "\" \"",
																									},
																									&actionExpr{
																										pos: position{line: 2878, col: 16, offset: 95050},
																										run: (*parser).callonDocumentFragment468,
																										expr: &litMatcher{
																											pos:        position{line: 2878, col: 16, offset: 95050},
																											val:        "\t",
																											ignoreCase: false,
																											want:       "\"\\t\"",
																										},
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 918, col: 28, offset: 28816},
																							expr: &litMatcher{
																								pos:        position{line: 918, col: 29, offset: 28817},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 918, col: 33, offset: 28821},
																							label: "revision",
																							expr: &choiceExpr{
																								pos: position{line: 919, col: 9, offset: 28840},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 919, col: 10, offset: 28841},
																										run: (*parser).callonDocumentFragment474,
																										expr: &seqExpr{
																											pos: position{line: 919, col: 10, offset: 28841},
																											exprs: []interface{}{
																												&labeledExpr{
																													pos:   position{line: 919, col: 10, offset: 28841},
																													label: "revnumber",
																													expr: &choiceExpr{
																														pos: position{line: 928, col: 27, offset: 29358},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 928, col: 27, offset: 29358},
																																run: (*parser).callonDocumentFragment478,
																																expr: &seqExpr{
																																	pos: position{line: 928, col: 27, offset: 29358},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 928, col: 27, offset: 29358},
																																			val:        "v",
																																			ignoreCase: true,
																																			want:       "\"v\"i",
																																		},
																																		&actionExpr{
																																			pos: position{line: 2870, col: 10, offset: 94910},
																																			run: (*parser).callonDocumentFragment481,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2870, col: 10, offset: 94910},
																																				val:        "[0-9]",
																																				ranges:     []rune{'0', '9'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																		&oneOrMoreExpr{
																																			pos: position{line: 928, col: 39, offset: 29370},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 928, col: 39, offset: 29370},
																																				val:        "[^:,\\r\\n]",
																																				chars:      []rune{':', ',', '\r', '\n'},
																																				ignoreCase: false,
																																				inverted:   true,
																																			},
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 930, col: 5, offset: 29418},
																																run: (*parser).callonDocumentFragment485,
																																expr: &seqExpr{
																																	pos: position{line: 930, col: 5, offset: 29418},
																																	exprs: []interface{}{
																																		&zeroOrOneExpr{
																																			pos: position{line: 930, col: 5, offset: 29418},
																																			expr: &litMatcher{
																																				pos:        position{line: 930, col: 5, offset: 29418},
																																				val:        "v",
																																				ignoreCase: true,
																																				want:       "\"v\"i",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 2870, col: 10, offset: 94910},
																																			run: (*parser).callonDocumentFragment489,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2870, col: 10, offset: 94910},
																																				val:        "[0-9]",
																																				ranges:     []rune{'0', '9'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																		&oneOrMoreExpr{
																																			pos: position{line: 930, col: 18, offset: 29431},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 930, col: 18, offset: 29431},
																																				val:        "[^:,\\r\\n]",
																																				chars:      []rune{':', ',', '\r', '\n'},
																																				ignoreCase: false,
																																				inverted:   true,
																																			},
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 930, col: 29, offset: 29442},
																																			expr: &choiceExpr{
																																				pos: position{line: 2878, col: 10, offset: 95044},
																																				alternatives: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 2878, col: 10, offset: 95044},
																																						val:        " ",
																																						ignoreCase: false,
																																						want:       "\" \"",
																																					},
																																					&actionExpr{
																																						pos: position{line: 2878, col: 16, offset: 95050},
																																						run: (*parser).callonDocumentFragment496,
																																						expr: &litMatcher{
																																							pos:        position{line: 2878, col: 16, offset: 95050},
																																							val:        "\t",
																																							ignoreCase: false,
																																							want:       "\"\\t\"",
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&andExpr{
																																			pos: position{line: 930, col: 36, offset: 29449},
																																			expr: &litMatcher{
																																				pos:        position{line: 930, col: 37, offset: 29450},
																																				val:        ",",
																																				ignoreCase: false,
																																				want:       "\",\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 919, col: 45, offset: 28876},
																													expr: &litMatcher{
																														pos:        position{line: 919, col: 45, offset: 28876},
																														val:        ",",
																														ignoreCase: false,
																														want:       "\",\"",
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 919, col: 50, offset: 28881},
																													label: "revdate",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 919, col: 58, offset: 28889},
																														expr: &actionExpr{
																															pos: position{line: 934, col: 25, offset: 29514},
																															run: (*parser).callonDocumentFragment504,
																															expr: &oneOrMoreExpr{
																																pos: position{line: 934, col: 25, offset: 29514},
																																expr: &charClassMatcher{
																																	pos:        position{line: 934, col: 25, offset: 29514},
																																	val:        "[^:\\r\\n]",
																																	chars:      []rune{':', '\r', '\n'},
																																	ignoreCase: false,
																																	inverted:   true,
																																},
																															},
																														},
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 919, col: 82, offset: 28913},
																													expr: &litMatcher{
																														pos:        position{line: 919, col: 82, offset: 28913},
																														val:        ":",
																														ignoreCase: false,
																														want:       "\":\"",
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 919, col: 87, offset: 28918},
																													label: "revremark",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 919, col: 97, offset: 28928},
																														expr: &actionExpr{
																															pos: position{line: 938, col: 27, offset: 29586},
																															run: (*parser).callonDocumentFragment511,
																															expr: &oneOrMoreExpr{
																																pos: position{line: 938, col: 27, offset: 29586},
																																expr: &charClassMatcher{
																																	pos:        position{line: 938, col: 27, offset: 29586},
																																	val:        "[^\\r\\n]",
																																	chars:      []rune{'\r', '\n'},
																																	ignoreCase: false,
																																	inverted:   true,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 921, col: 15, offset: 29046},
																										run: (*parser).callonDocumentFragment514,
																										expr: &seqExpr{
																											pos: position{line: 921, col: 15, offset: 29046},
																											exprs: []interface{}{
																												&labeledExpr{
																													pos:   position{line: 921, col: 15, offset: 29046},
																													label: "revdate",
																													expr: &actionExpr{
																														pos: position{line: 934, col: 25, offset: 29514},
																														run: (*parser).callonDocumentFragment517,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 934, col: 25, offset: 29514},
																															expr: &charClassMatcher{
																																pos:        position{line: 934, col: 25, offset: 29514},
																																val:        "[^:\\r\\n]",
																																chars:      []rune{':', '\r', '\n'},
																																ignoreCase: false,
																																inverted:   true,
																															},
																														},
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 921, col: 46, offset: 29077},
																													expr: &litMatcher{
																														pos:        position{line: 921, col: 46, offset: 29077},
																														val:        ":",
																														ignoreCase: false,
																														want:       "\":\"",
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 921, col: 51, offset: 29082},
																													label: "revremark",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 921, col: 61, offset: 29092},
																														expr: &actionExpr{
																															pos: position{line: 938, col: 27, offset: 29586},
																															run: (*parser).callonDocumentFragment524,
																															expr: &oneOrMoreExpr{
																																pos: position{line: 938, col: 27, offset: 29586},
																																expr: &charClassMatcher{
																																	pos:        position{line: 938, col: 27, offset: 29586},
																																	val:        "[^\\r\\n]",
																																	chars:      []rune{'\r', '\n'},
																																	ignoreCase: false,
																																	inverted:   true,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2893, col: 8, offset: 95335},
																							alternatives: []interface{}{
																								&notExpr{
																									pos: position{line: 2890, col: 8, offset: 95285},
																									expr: &anyMatcher{
																										line: 2890, col: 9, offset: 95286,
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2886, col: 12, offset: 95178},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2886, col: 19, offset: 95185},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&actionExpr{
																									pos: position{line: 2886, col: 28, offset: 95194},
																									run: (*parser).callonDocumentFragment532,
																									expr: &litMatcher{
																										pos:        position{line: 2886, col: 28, offset: 95194},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 841, col: 5, offset: 26430},
													label: "extraAttrs",
													expr: &zeroOrMoreExpr{
														pos: position{line: 841, col: 16, offset: 26441},
														expr: &choiceExpr{
															pos: position{line: 841, col: 17, offset: 26442},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 108, col: 5, offset: 3008},
																	run: (*parser).callonDocumentFragment537,
																	expr: &seqExpr{
																		pos: position{line: 108, col: 5, offset: 3008},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 108, col: 5, offset: 3008},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 108, col: 9, offset: 3012},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 118, col: 18, offset: 3399},
																					run: (*parser).callonDocumentFragment541,
																					expr: &seqExpr{
																						pos: position{line: 118, col: 18, offset: 3399},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 118, col: 18, offset: 3399},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 118, col: 28, offset: 3409},
																								expr: &charClassMatcher{
																									pos:        position{line: 118, col: 29, offset: 3410},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 108, col: 30, offset: 3033},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 109, col: 5, offset: 3042},
																				label: "value",
																				expr: &zeroOrOneExpr{
																					pos: position{line: 109, col: 11, offset: 3048},
																					expr: &actionExpr{
																						pos: position{line: 123, col: 5, offset: 3500},
																						run: (*parser).callonDocumentFragment549,
																						expr: &seqExpr{
																							pos: position{line: 123, col: 5, offset: 3500},
																							exprs: []interface{}{
																								&actionExpr{
																									pos: position{line: 2882, col: 11, offset: 95109},
																									run: (*parser).callonDocumentFragment551,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 2882, col: 11, offset: 95109},
																										expr: &charClassMatcher{
																											pos:        position{line: 2882, col: 12, offset: 95110},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&labeledExpr{
																									pos:   position{line: 123, col: 12, offset: 3507},
																									label: "elements",
																									expr: &zeroOrMoreExpr{
																										pos: position{line: 123, col: 21, offset: 3516},
																										expr: &actionExpr{
																											pos: position{line: 127, col: 37, offset: 3675},
																											run: (*parser).callonDocumentFragment556,
																											expr: &seqExpr{
																												pos: position{line: 127, col: 37, offset: 3675},
																												exprs: []interface{}{
																													&notExpr{
																														pos: position{line: 127, col: 37, offset: 3675},
																														expr: &choiceExpr{
																															pos: position{line: 2893, col: 8, offset: 95335},
																															alternatives: []interface{}{
																																&notExpr{
																																	pos: position{line: 2890, col: 8, offset: 95285},
																																	expr: &anyMatcher{
																																		line: 2890, col: 9, offset: 95286,
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 2886, col: 12, offset: 95178},
																																	val:        "\n",
																																	ignoreCase: false,
																																	want:       "\"\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2886, col: 19, offset: 95185},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&actionExpr{
																																	pos: position{line: 2886, col: 28, offset: 95194},
																																	run: (*parser).callonDocumentFragment564,
																																	expr: &litMatcher{
																																		pos:        position{line: 2886, col: 28, offset: 95194},
																																		val:        "\r",
																																		ignoreCase: false,
																																		want:       "\"\\r\"",
																																	},
																																},
																															},
																														},
																													},
																													&labeledExpr{
																														pos:   position{line: 128, col: 5, offset: 3685},
																														label: "element",
																														expr: &choiceExpr{
																															pos: position{line: 129, col: 9, offset: 3703},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 129, col: 10, offset: 3704},
																																	run: (*parser).callonDocumentFragment568,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 129, col: 10, offset: 3704},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 129, col: 10, offset: 3704},
																																			val:        "[^\\r\\n{]",
																																			chars:      []rune{'\r', '\n', '{'},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 449, col: 5, offset: 14443},
																																	run: (*parser).callonDocumentFragment571,
																																	expr: &seqExpr{
																																		pos: position{line: 449, col: 5, offset: 14443},
																																		exprs: []interface{}{
																																			&andCodeExpr{
																																				pos: position{line: 449, col: 5, offset: 14443},
																																				run: (*parser).callonDocumentFragment573,
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 452, col: 5, offset: 14507},
																																				label: "element",
																																				expr: &choiceExpr{
																																					pos: position{line: 452, col: 14, offset: 14516},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 463, col: 25, offset: 14978},
																																							run: (*parser).callonDocumentFragment576,
																																							expr: &seqExpr{
																																								pos: position{line: 463, col: 25, offset: 14978},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 463, col: 25, offset: 14978},
																																										val:        "{counter:",
																																										ignoreCase: false,
																																										want:       "\"{counter:\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 463, col: 37, offset: 14990},
																																										label: "name",
																																										expr: &actionExpr{
																																											pos: position{line: 118, col: 18, offset: 3399},
																																											run: (*parser).callonDocumentFragment580,
																																											expr: &seqExpr{
																																												pos: position{line: 118, col: 18, offset: 3399},
																																												exprs: []interface{}{
																																													&charClassMatcher{
																																														pos:        position{line: 118, col: 18, offset: 3399},
																																														val:        "[_0-9\\pL]",
																																														chars:      []rune{'_'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																													&zeroOrMoreExpr{
																																														pos: position{line: 118, col: 28, offset: 3409},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 118, col: 29, offset: 3410},
																																															val:        "[-0-9\\pL]",
																																															chars:      []rune{'-'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 463, col: 56, offset: 15009},
																																										label: "start",
																																										expr: &zeroOrOneExpr{
																																											pos: position{line: 463, col: 62, offset: 15015},
																																											expr: &actionExpr{
																																												pos: position{line: 471, col: 17, offset: 15278},
																																												run: (*parser).callonDocumentFragment587,
																																												expr: &seqExpr{
																																													pos: position{line: 471, col: 17, offset: 15278},
																																													exprs: []interface{}{
																																														&litMatcher{
																																															pos:        position{line: 471, col: 17, offset: 15278},
																																															val:        ":",
																																															ignoreCase: false,
																																															want:       "\":\"",
																																														},
																																														&labeledExpr{
																																															pos:   position{line: 471, col: 21, offset: 15282},
																																															label: "start",
																																															expr: &choiceExpr{
																																																pos: position{line: 471, col: 28, offset: 15289},
																																																alternatives: []interface{}{
																																																	&actionExpr{
																																																		pos: position{line: 471, col: 28, offset: 15289},
																																																		run: (*parser).callonDocumentFragment592,
																																																		expr: &charClassMatcher{
																																																			pos:        position{line: 471, col: 28, offset: 15289},
																																																			val:        "[A-Za-z]",
																																																			ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																			ignoreCase: false,
																																																			inverted:   false,
																																																		},
																																																	},
																																																	&actionExpr{
																																																		pos: position{line: 473, col: 9, offset: 15343},
																																																		run: (*parser).callonDocumentFragment594,
																																																		expr: &oneOrMoreExpr{
																																																			pos: position{line: 473, col: 9, offset: 15343},
																																																			expr: &charClassMatcher{
																																																				pos:        position{line: 473, col: 9, offset: 15343},
																																																				val:        "[0-9]",
																																																				ranges:     []rune{'0', '9'},
																																																				ignoreCase: false,
																																																				inverted:   false,
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 463, col: 78, offset: 15031},
																																										val:        "}",
																																										ignoreCase: false,
																																										want:       "\"}\"",
																																									},
																																								},
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 467, col: 25, offset: 15133},
																																							run: (*parser).callonDocumentFragment598,
																																							expr: &seqExpr{
																																								pos: position{line: 467, col: 25, offset: 15133},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 467, col: 25, offset: 15133},
																																										val:        "{counter2:",
																																										ignoreCase: false,
																																										want:       "\"{counter2:\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 467, col: 38, offset: 15146},
																																										label: "name",
																																										expr: &actionExpr{
																																											pos: position{line: 118, col: 18, offset: 3399},
																																											run: (*parser).callonDocumentFragment602,
																																											expr: &seqExpr{
																																												pos: position{line: 118, col: 18, offset: 3399},
																																												exprs: []interface{}{
																																													&charClassMatcher{
																																														pos:        position{line: 118, col: 18, offset: 3399},
																																														val:        "[_0-9\\pL]",
																																														chars:      []rune{'_'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																													&zeroOrMoreExpr{
																																														pos: position{line: 118, col: 28, offset: 3409},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 118, col: 29, offset: 3410},
																																															val:        "[-0-9\\pL]",
																																															chars:      []rune{'-'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 467, col: 57, offset: 15165},
																																										label: "start",
																																										expr: &zeroOrOneExpr{
																																											pos: position{line: 467, col: 63, offset: 15171},
																																											expr: &actionExpr{
																																												pos: position{line: 471, col: 17, offset: 15278},
																																												run: (*parser).callonDocumentFragment609,
																																												expr: &seqExpr{
																																													pos: position{line: 471, col: 17, offset: 15278},
																																													exprs: []interface{}{
																																														&litMatcher{
																																															pos:        position{line: 471, col: 17, offset: 15278},
																																															val:        ":",
																																															ignoreCase: false,
																																															want:       "\":\"",
																																														},
																																														&labeledExpr{
																																															pos:   position{line: 471, col: 21, offset: 15282},
																																															label: "start",
																																															expr: &choiceExpr{
																																																pos: position{line: 471, col: 28, offset: 15289},
																																																alternatives: []interface{}{
																																																	&actionExpr{
																																																		pos: position{line: 471, col: 28, offset: 15289},
																																																		run: (*parser).callonDocumentFragment614,
																																																		expr: &charClassMatcher{
																																																			pos:        position{line: 471, col: 28, offset: 15289},
																																																			val:        "[A-Za-z]",
																																																			ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																			ignoreCase: false,
																																																			inverted:   false,
																																																		},
																																																	},
																																																	&actionExpr{
																																																		pos: position{line: 473, col: 9, offset: 15343},
																																																		run: (*parser).callonDocumentFragment616,
																																																		expr: &oneOrMoreExpr{
																																																			pos: position{line: 473, col: 9, offset: 15343},
																																																			expr: &charClassMatcher{
																																																				pos:        position{line: 473, col: 9, offset: 15343},
																																																				val:        "[0-9]",
																																																				ranges:     []rune{'0', '9'},
																																																				ignoreCase: false,
																																																				inverted:   false,
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 467, col: 79, offset: 15187},
																																										val:        "}",
																																										ignoreCase: false,
																																										want:       "\"}\"",
																																									},
																																								},
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 456, col: 31, offset: 14633},
																																							run: (*parser).callonDocumentFragment620,
																																							expr: &seqExpr{
																																								pos: position{line: 456, col: 31, offset: 14633},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 456, col: 31, offset: 14633},
																																										val:        "{",
																																										ignoreCase: false,
																																										want:       "\"{\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 456, col: 35, offset: 14637},
																																										label: "name",
																																										expr: &actionExpr{
																																											pos: position{line: 118, col: 18, offset: 3399},
																																											run: (*parser).callonDocumentFragment624,
																																											expr: &seqExpr{
																																												pos: position{line: 118, col: 18, offset: 3399},
																																												exprs: []interface{}{
																																													&charClassMatcher{
																																														pos:        position{line: 118, col: 18, offset: 3399},
																																														val:        "[_0-9\\pL]",
																																														chars:      []rune{'_'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																													&zeroOrMoreExpr{
																																														pos: position{line: 118, col: 28, offset: 3409},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 118, col: 29, offset: 3410},
																																															val:        "[-0-9\\pL]",
																																															chars:      []rune{'-'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 456, col: 54, offset: 14656},
																																										val:        "}",
																																										ignoreCase: false,
																																										want:       "\"}\"",
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 133, col: 12, offset: 3832},
																																	run: (*parser).callonDocumentFragment630,
																																	expr: &litMatcher{
																																		pos:        position{line: 133, col: 12, offset: 3832},
																																		val:        "{",
																																		ignoreCase: false,
																																		want:       "\"{\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2893, col: 8, offset: 95335},
																				alternatives: []interface{}{
																					&notExpr{
																						pos: position{line: 2890, col: 8, offset: 95285},
																						expr: &anyMatcher{
																							line: 2890, col: 9, offset: 95286,
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 2886, col: 12, offset: 95178},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2886, col: 19, offset: 95185},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&actionExpr{
																						pos: position{line: 2886, col: 28, offset: 95194},
																						run: (*parser).callonDocumentFragment637,
																						expr: &litMatcher{
																							pos:        position{line: 2886, col: 28, offset: 95194},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 140, col: 19, offset: 3987},
																	run: (*parser).callonDocumentFragment639,
																	expr: &seqExpr{
																		pos: position{line: 140, col: 19, offset: 3987},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 140, col: 19, offset: 3987},
																				val:        ":!",
																				ignoreCase: false,
																				want:       "\":!\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 140, col: 24, offset: 3992},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 118, col: 18, offset: 3399},
																					run: (*parser).callonDocumentFragment643,
																					expr: &seqExpr{
																						pos: position{line: 118, col: 18, offset: 3399},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 118, col: 18, offset: 3399},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 118, col: 28, offset: 3409},
																								expr: &charClassMatcher{
																									pos:        position{line: 118, col: 29, offset: 3410},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 140, col: 45, offset: 4013},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 140, col: 49, offset: 4017},
																				expr: &choiceExpr{
																					pos: position{line: 2878, col: 10, offset: 95044},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2878, col: 10, offset: 95044},
																							val:        " ",
																							ignoreCase: false,
																							want:       "\" \"",
																						},
																						&actionExpr{
																							pos: position{line: 2878, col: 16, offset: 95050},
																							run: (*parser).callonDocumentFragment652,
																							expr: &litMatcher{
																								pos:        position{line: 2878, col: 16, offset: 95050},
																								val:        "\t",
																								ignoreCase: false,
																								want:       "\"\\t\"",
																							},
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2893, col: 8, offset: 95335},
																				alternatives: []interface{}{
																					&notExpr{
																						pos: position{line: 2890, col: 8, offset: 95285},
																						expr: &anyMatcher{
																							line: 2890, col: 9, offset: 95286,
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 2886, col: 12, offset: 95178},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2886, col: 19, offset: 95185},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&actionExpr{
																						pos: position{line: 2886, col: 28, offset: 95194},
																						run: (*parser).callonDocumentFragment659,
																						expr: &litMatcher{
																							pos:        position{line: 2886, col: 28, offset: 95194},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 142, col: 5, offset: 4084},
																	run: (*parser).callonDocumentFragment661,
																	expr: &seqExpr{
																		pos: position{line: 142, col: 5, offset: 4084},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 142, col: 5, offset: 4084},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 142, col: 9, offset: 4088},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 118, col: 18, offset: 3399},
																					run: (*parser).callonDocumentFragment665,
																					expr: &seqExpr{
																						pos: position{line: 118, col: 18, offset: 3399},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 118, col: 18, offset: 3399},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 118, col: 28, offset: 3409},
																								expr: &charClassMatcher{
																									pos:        position{line: 118, col: 29, offset: 3410},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 142, col: 30, offset: 4109},
																				val:        "!:",
																				ignoreCase: false,
																				want:       "\"!:\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 142, col: 35, offset: 4114},
																				expr: &choiceExpr{
																					pos: position{line: 2878, col: 10, offset: 95044},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2878, col: 10, offset: 95044},
																							val:        " ",
																							ignoreCase: false,
																							want:       "\" \"",
																						},
																						&actionExpr{
																							pos: position{line: 2878, col: 16, offset: 95050},
																							run: (*parser).callonDocumentFragment674,
																							expr: &litMatcher{
																								pos:        position{line: 2878, col: 16, offset: 95050},
																								val:        "\t",
																								ignoreCase: false,
																								want:       "\"\\t\"",
																							},
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2893, col: 8, offset: 95335},
																				alternatives: []interface{}{
																					&notExpr{
																						pos: position{line: 2890, col: 8, offset: 95285},
																						expr: &anyMatcher{
																							line: 2890, col: 9, offset: 95286,
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 2886, col: 12, offset: 95178},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2886, col: 19, offset: 95185},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&actionExpr{
																						pos: position{line: 2886, col: 28, offset: 95194},
																						run: (*parser).callonDocumentFragment681,
																						expr: &litMatcher{
																							pos:        position{line: 2886, col: 28, offset: 95194},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 482, col: 14, offset: 15644},
										run: (*parser).callonDocumentFragment683,
										expr: &seqExpr{
											pos: position{line: 482, col: 14, offset: 15644},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 482, col: 14, offset: 15644},
													expr: &notExpr{
														pos: position{line: 2890, col: 8, offset: 95285},
														expr: &anyMatcher{
															line: 2890, col: 9, offset: 95286,
														},
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 482, col: 19, offset: 15649},
													expr: &choiceExpr{
														pos: position{line: 2878, col: 10, offset: 95044},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2878, col: 10, offset: 95044},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2878, col: 16, offset: 95050},
																run: (*parser).callonDocumentFragment691,
																expr: &litMatcher{
																	pos:        position{line: 2878, col: 16, offset: 95050},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2893, col: 8, offset: 95335},
													alternatives: []interface{}{
														&notExpr{
															pos: position{line: 2890, col: 8, offset: 95285},
															expr: &anyMatcher{
																line: 2890, col: 9, offset: 95286,
															},
														},
														&litMatcher{
															pos:        position{line: 2886, col: 12, offset: 95178},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2886, col: 19, offset: 95185},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&actionExpr{
															pos: position{line: 2886, col: 28, offset: 95194},
															run: (*parser).callonDocumentFragment698,
															expr: &litMatcher{
																pos:        position{line: 2886, col: 28, offset: 95194},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 108, col: 5, offset: 3008},
										run: (*parser).callonDocumentFragment700,
										expr: &seqExpr{
											pos: position{line: 108, col: 5, offset: 3008},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 108, col: 5, offset: 3008},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&labeledExpr{
													pos:   position{line: 108, col: 9, offset: 3012},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 118, col: 18, offset: 3399},
														run: (*parser).callonDocumentFragment704,
														expr: &seqExpr{
															pos: position{line: 118, col: 18, offset: 3399},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 118, col: 18, offset: 3399},
																	val:        "[_0-9\\pL]",
																	chars:      []rune{'_'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 118, col: 28, offset: 3409},
																	expr: &charClassMatcher{
																		pos:        position{line: 118, col: 29, offset: 3410},
																		val:        "[-0-9\\pL]",
																		chars:      []rune{'-'},
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 108, col: 30, offset: 3033},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&labeledExpr{
													pos:   position{line: 109, col: 5, offset: 3042},
													label: "value",
													expr: &zeroOrOneExpr{
														pos: position{line: 109, col: 11, offset: 3048},
														expr: &actionExpr{
															pos: position{line: 123, col: 5, offset: 3500},
															run: (*parser).callonDocumentFragment712,
															expr: &seqExpr{
																pos: position{line: 123, col: 5, offset: 3500},
																exprs: []interface{}{
																	&actionExpr{
																		pos: position{line: 2882, col: 11, offset: 95109},
																		run: (*parser).callonDocumentFragment714,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2882, col: 11, offset: 95109},
																			expr: &charClassMatcher{
																				pos:        position{line: 2882, col: 12, offset: 95110},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 123, col: 12, offset: 3507},
																		label: "elements",
																		expr: &zeroOrMoreExpr{
																			pos: position{line: 123, col: 21, offset: 3516},
																			expr: &actionExpr{
																				pos: position{line: 127, col: 37, offset: 3675},
																				run: (*parser).callonDocumentFragment719,
																				expr: &seqExpr{
																					pos: position{line: 127, col: 37, offset: 3675},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 127, col: 37, offset: 3675},
																							expr: &choiceExpr{
																								pos: position{line: 2893, col: 8, offset: 95335},
																								alternatives: []interface{}{
																									&notExpr{
																										pos: position{line: 2890, col: 8, offset: 95285},
																										expr: &anyMatcher{
																											line: 2890, col: 9, offset: 95286,
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2886, col: 12, offset: 95178},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2886, col: 19, offset: 95185},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&actionExpr{
																										pos: position{line: 2886, col: 28, offset: 95194},
																										run: (*parser).callonDocumentFragment727,
																										expr: &litMatcher{
																											pos:        position{line: 2886, col: 28, offset: 95194},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 128, col: 5, offset: 3685},
																							label: "element",
																							expr: &choiceExpr{
																								pos: position{line: 129, col: 9, offset: 3703},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 129, col: 10, offset: 3704},
																										run: (*parser).callonDocumentFragment731,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 129, col: 10, offset: 3704},
																											expr: &charClassMatcher{
																												pos:        position{line: 129, col: 10, offset: 3704},
																												val:        "[^\\r\\n{]",
																												chars:      []rune{'\r', '\n', '{'},
																												ignoreCase: false,
																												inverted:   true,
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 449, col: 5, offset: 14443},
																										run: (*parser).callonDocumentFragment734,
																										expr: &seqExpr{
																											pos: position{line: 449, col: 5, offset: 14443},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 449, col: 5, offset: 14443},
																													run: (*parser).callonDocumentFragment736,
																												},
																												&labeledExpr{
																													pos:   position{line: 452, col: 5, offset: 14507},
																													label: "element",
																													expr: &choiceExpr{
																														pos: position{line: 452, col: 14, offset: 14516},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 463, col: 25, offset: 14978},
																																run: (*parser).callonDocumentFragment739,
																																expr: &seqExpr{
																																	pos: position{line: 463, col: 25, offset: 14978},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 463, col: 25, offset: 14978},
																																			val:        "{counter:",
																																			ignoreCase: false,
																																			want:       "\"{counter:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 463, col: 37, offset: 14990},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 118, col: 18, offset: 3399},
																																				run: (*parser).callonDocumentFragment743,
																																				expr: &seqExpr{
																																					pos: position{line: 118, col: 18, offset: 3399},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 118, col: 18, offset: 3399},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 118, col: 28, offset: 3409},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 118, col: 29, offset: 3410},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 463, col: 56, offset: 15009},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 463, col: 62, offset: 15015},
																																				expr: &actionExpr{
																																					pos: position{line: 471, col: 17, offset: 15278},
																																					run: (*parser).callonDocumentFragment750,
																																					expr: &seqExpr{
																																						pos: position{line: 471, col: 17, offset: 15278},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 471, col: 17, offset: 15278},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 471, col: 21, offset: 15282},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 471, col: 28, offset: 15289},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 471, col: 28, offset: 15289},
																																											run: (*parser).callonDocumentFragment755,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 471, col: 28, offset: 15289},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 473, col: 9, offset: 15343},
																																											run: (*parser).callonDocumentFragment757,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 473, col: 9, offset: 15343},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 473, col: 9, offset: 15343},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 463, col: 78, offset: 15031},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 467, col: 25, offset: 15133},
																																run: (*parser).callonDocumentFragment761,
																																expr: &seqExpr{
																																	pos: position{line: 467, col: 25, offset: 15133},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 467, col: 25, offset: 15133},
																																			val:        "{counter2:",
																																			ignoreCase: false,
																																			want:       "\"{counter2:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 467, col: 38, offset: 15146},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 118, col: 18, offset: 3399},
																																				run: (*parser).callonDocumentFragment765,
																																				expr: &seqExpr{
																																					pos: position{line: 118, col: 18, offset: 3399},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 118, col: 18, offset: 3399},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 118, col: 28, offset: 3409},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 118, col: 29, offset: 3410},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 467, col: 57, offset: 15165},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 467, col: 63, offset: 15171},
																																				expr: &actionExpr{
																																					pos: position{line: 471, col: 17, offset: 15278},
																																					run: (*parser).callonDocumentFragment772,
																																					expr: &seqExpr{
																																						pos: position{line: 471, col: 17, offset: 15278},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 471, col: 17, offset: 15278},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 471, col: 21, offset: 15282},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 471, col: 28, offset: 15289},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 471, col: 28, offset: 15289},
																																											run: (*parser).callonDocumentFragment777,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 471, col: 28, offset: 15289},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 473, col: 9, offset: 15343},
																																											run: (*parser).callonDocumentFragment779,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 473, col: 9, offset: 15343},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 473, col: 9, offset: 15343},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 467, col: 79, offset: 15187},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 456, col: 31, offset: 14633},
																																run: (*parser).callonDocumentFragment783,
																																expr: &seqExpr{
																																	pos: position{line: 456, col: 31, offset: 14633},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 456, col: 31, offset: 14633},
																																			val:        "{",
																																			ignoreCase: false,
																																			want:       "\"{\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 456, col: 35, offset: 14637},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 118, col: 18, offset: 3399},
																																				run: (*parser).callonDocumentFragment787,
																																				expr: &seqExpr{
																																					pos: position{line: 118, col: 18, offset: 3399},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 118, col: 18, offset: 3399},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 118, col: 28, offset: 3409},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 118, col: 29, offset: 3410},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 456, col: 54, offset: 14656},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 133, col: 12, offset: 3832},
																										run: (*parser).callonDocumentFragment793,
																										expr: &litMatcher{
																											pos:        position{line: 133, col: 12, offset: 3832},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2893, col: 8, offset: 95335},
													alternatives: []interface{}{
														&notExpr{
															pos: position{line: 2890, col: 8, offset: 95285},
															expr: &anyMatcher{
																line: 2890, col: 9, offset: 95286,
															},
														},
														&litMatcher{
															pos:        position{line: 2886, col: 12, offset: 95178},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2886, col: 19, offset: 95185},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&actionExpr{
															pos: position{line: 2886, col: 28, offset: 95194},
															run: (*parser).callonDocumentFragment800,
															expr: &litMatcher{
																pos:        position{line: 2886, col: 28, offset: 95194},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 140, col: 19, offset: 3987},
										run: (*parser).callonDocumentFragment802,
										expr: &seqExpr{
											pos: position{line: 140, col: 19, offset: 3987},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 140, col: 19, offset: 3987},
													val:        ":!",
													ignoreCase: false,
													want:       "\":!\"",
												},
												&labeledExpr{
													pos:   position{line: 140, col: 24, offset: 3992},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 118, col: 18, offset: 3399},
														run: (*parser).callonDocumentFragment806,
														expr: &seqExpr{
															pos: position{line: 118, col: 18, offset: 3399},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 118, col: 18, offset: 3399},
																	val:        "[_0-9\\pL]",
																	chars:      []rune{'_'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 118, col: 28, offset: 3409},
																	expr: &charClassMatcher{
																		pos:        position{line: 118, col: 29, offset: 3410},
																		val:        "[-0-9\\pL]",
																		chars:      []rune{'-'},
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 140, col: 45, offset: 4013},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 140, col: 49, offset: 4017},
													expr: &choiceExpr{
														pos: position{line: 2878, col: 10, offset: 95044},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2878, col: 10, offset: 95044},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2878, col: 16, offset: 95050},
																run: (*parser).callonDocumentFragment815,
																expr: &litMatcher{
																	pos:        position{line: 2878, col: 16, offset: 95050},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2893, col: 8, offset: 95335},
													alternatives: []interface{}{
														&notExpr{
															pos: position{line: 2890, col: 8, offset: 95285},
															expr: &anyMatcher{
																line: 2890, col: 9, offset: 95286,
															},
														},
														&litMatcher{
															pos:        position{line: 2886, col: 12, offset: 95178},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2886, col: 19, offset: 95185},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&actionExpr{
															pos: position{line: 2886, col: 28, offset: 95194},
															run: (*parser).callonDocumentFragment822,
															expr: &litMatcher{
																pos:        position{line: 2886, col: 28, offset: 95194},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 142, col: 5, offset: 4084},
										run: (*parser).callonDocumentFragment824,
										expr: &seqExpr{
											pos: position{line: 142, col: 5, offset: 4084},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 142, col: 5, offset: 4084},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&labeledExpr{
													pos:   position{line: 142, col: 9, offset: 4088},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 118, col: 18, offset: 3399},
														run: (*parser).callonDocumentFragment828,
														expr: &seqExpr{
															pos: position{line: 118, col: 18, offset: 3399},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 118, col: 18, offset: 3399},
																	val:        "[_0-9\\pL]",
																	chars:      []rune{'_'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 118, col: 28, offset: 3409},
																	expr: &charClassMatcher{
																		pos:        position{line: 118, col: 29, offset: 3410},
																		val:        "[-0-9\\pL]",
																		chars:      []rune{'-'},
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 142, col: 30, offset: 4109},
													val:        "!:",
													ignoreCase: false,
													want:       "\"!:\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 142, col: 35, offset: 4114},
													expr: &choiceExpr{
														pos: position{line: 2878, col: 10, offset: 95044},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2878, col: 10, offset: 95044},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2878, col: 16, offset: 95050},
																run: (*parser).callonDocumentFragment837,
																expr: &litMatcher{
																	pos:        position{line: 2878, col: 16, offset: 95050},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2893, col: 8, offset: 95335},
													alternatives: []interface{}{
														&notExpr{
															pos: position{line: 2890, col: 8, offset: 95285},
															expr: &anyMatcher{
																line: 2890, col: 9, offset: 95286,
															},
														},
														&litMatcher{
															pos:        position{line: 2886, col: 12, offset: 95178},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2886, col: 19, offset: 95185},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&actionExpr{
															pos: position{line: 2886, col: 28, offset: 95194},
															run: (*parser).callonDocumentFragment844,
															expr: &litMatcher{
																pos:        position{line: 2886, col: 28, offset: 95194},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 29, col: 11, offset: 623},
										name: "DelimitedBlock",
									},
									&actionExpr{
										pos: position{line: 2353, col: 5, offset: 79294},
										run: (*parser).callonDocumentFragment847,
										expr: &seqExpr{
											pos: position{line: 2353, col: 5, offset: 79294},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2353, col: 5, offset: 79294},
													run: (*parser).callonDocumentFragment849,
												},
												&labeledExpr{
													pos:   position{line: 2356, col: 5, offset: 79357},
													label: "level",
													expr: &actionExpr{
														pos: position{line: 2356, col: 12, offset: 79364},
														run: (*parser).callonDocumentFragment851,
														expr: &oneOrMoreExpr{
															pos: position{line: 2356, col: 12, offset: 79364},
															expr: &litMatcher{
																pos:        position{line: 2356, col: 13, offset: 79365},
																val:        "=",
																ignoreCase: false,
																want:       "\"=\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 2360, col: 5, offset: 79473},
													run: (*parser).callonDocumentFragment854,
												},
												&actionExpr{
													pos: position{line: 2882, col: 11, offset: 95109},
													run: (*parser).callonDocumentFragment855,
													expr: &oneOrMoreExpr{
														pos: position{line: 2882, col: 11, offset: 95109},
														expr: &charClassMatcher{
															pos:        position{line: 2882, col: 12, offset: 95110},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2364, col: 12, offset: 79632},
													label: "title",
													expr: &actionExpr{
														pos: position{line: 2368, col: 20, offset: 79760},
														run: (*parser).callonDocumentFragment859,
														expr: &zeroOrMoreExpr{
															pos: position{line: 2368, col: 20, offset: 79760},
															expr: &charClassMatcher{
																pos:        position{line: 2368, col: 20, offset: 79760},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2893, col: 8, offset: 95335},
													alternatives: []interface{}{
														&notExpr{
															pos: position{line: 2890, col: 8, offset: 95285},
															expr: &anyMatcher{
																line: 2890, col: 9, offset: 95286,
															},
														},
														&litMatcher{
															pos:        position{line: 2886, col: 12, offset: 95178},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2886, col: 19, offset: 95185},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&actionExpr{
															pos: position{line: 2886, col: 28, offset: 95194},
															run: (*parser).callonDocumentFragment867,
															expr: &litMatcher{
																pos:        position{line: 2886, col: 28, offset: 95194},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2755, col: 18, offset: 91083},
										run: (*parser).callonDocumentFragment869,
										expr: &seqExpr{
											pos: position{line: 2755, col: 18, offset: 91083},
											exprs: []interface{}{
												&choiceExpr{
													pos: position{line: 2755, col: 19, offset: 91084},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2755, col: 19, offset: 91084},
															val:        "***",
															ignoreCase: false,
															want:       "\"***\"",
														},
														&litMatcher{
															pos:        position{line: 2755, col: 27, offset: 91092},
															val:        "* * *",
															ignoreCase: false,
															want:       "\"* * *\"",
														},
														&litMatcher{
															pos:        position{line: 2755, col: 37, offset: 91102},
															val:        "---",
															ignoreCase: false,
															want:       "\"---\"",
														},
														&litMatcher{
															pos:        position{line: 2755, col: 45, offset: 91110},
															val:        "- - -",
															ignoreCase: false,
															want:       "\"- - -\"",
														},
														&litMatcher{
															pos:        position{line: 2755, col: 55, offset: 91120},
															val:        "___",
															ignoreCase: false,
															want:       "\"___\"",
														},
														&litMatcher{
															pos:        position{line: 2755, col: 63, offset: 91128},
															val:        "_ _ _",
															ignoreCase: false,
															want:       "\"_ _ _\"",
														},
													},
												},
												&notExpr{
													pos: position{line: 2890, col: 8, offset: 95285},
													expr: &anyMatcher{
														line: 2890, col: 9, offset: 95286,
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 32, col: 11, offset: 795},
										name: "ListElements",
									},
									&ruleRefExpr{
										pos:  position{line: 33, col: 11, offset: 818},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 34, col: 11, offset: 839},
										name: "FileInclusion",
									},
									&actionExpr{
										pos: position{line: 2654, col: 5, offset: 88215},
										run: (*parser).callonDocumentFragment883,
										expr: &seqExpr{
											pos: position{line: 2654, col: 5, offset: 88215},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2661, col: 19, offset: 88391},
													val:        "|===",
													ignoreCase: false,
													want:       "\"|===\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 2661, col: 26, offset: 88398},
													expr: &choiceExpr{
														pos: position{line: 2878, col: 10, offset: 95044},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2878, col: 10, offset: 95044},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2878, col: 16, offset: 95050},
																run: (*parser).callonDocumentFragment889,
																expr: &litMatcher{
																	pos:        position{line: 2878, col: 16, offset: 95050},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2893, col: 8, offset: 95335},
													alternatives: []interface{}{
														&notExpr{
															pos: position{line: 2890, col: 8, offset: 95285},
															expr: &anyMatcher{
																line: 2890, col: 9, offset: 95286,
															},
														},
														&litMatcher{
															pos:        position{line: 2886, col: 12, offset: 95178},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2886, col: 19, offset: 95185},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&actionExpr{
															pos: position{line: 2886, col: 28, offset: 95194},
															run: (*parser).callonDocumentFragment896,
															expr: &litMatcher{
																pos:        position{line: 2886, col: 28, offset: 95194},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2655, col: 5, offset: 88239},
													label: "header",
													expr: &zeroOrOneExpr{
														pos: position{line: 2655, col: 12, offset: 88246},
														expr: &actionExpr{
															pos: position{line: 2669, col: 5, offset: 88558},
															run: (*parser).callonDocumentFragment900,
															expr: &seqExpr{
																pos: position{line: 2669, col: 5, offset: 88558},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 2669, col: 5, offset: 88558},
																		label: "cells",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2669, col: 11, offset: 88564},
																			expr: &actionExpr{
																				pos: position{line: 2675, col: 5, offset: 88681},
																				run: (*parser).callonDocumentFragment904,
																				expr: &seqExpr{
																					pos: position{line: 2675, col: 5, offset: 88681},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2675, col: 5, offset: 88681},
																							val:        "|",
																							ignoreCase: false,
																							want:       "\"|\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 2675, col: 9, offset: 88685},
																							expr: &choiceExpr{
																								pos: position{line: 2878, col: 10, offset: 95044},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2878, col: 10, offset: 95044},
																										val:        " ",
																										ignoreCase: false,
																										want:       "\" \"",
																									},
																									&actionExpr{
																										pos: position{line: 2878, col: 16, offset: 95050},
																										run: (*parser).callonDocumentFragment910,
																										expr: &litMatcher{
																											pos:        position{line: 2878, col: 16, offset: 95050},
																											val:        "\t",
																											ignoreCase: false,
																											want:       "\"\\t\"",
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 2676, col: 5, offset: 88697},
																							label: "content",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 2676, col: 14, offset: 88706},
																								expr: &actionExpr{
																									pos: position{line: 2708, col: 5, offset: 89494},
																									run: (*parser).callonDocumentFragment914,
																									expr: &labeledExpr{
																										pos:   position{line: 2708, col: 5, offset: 89494},
																										label: "content",
																										expr: &actionExpr{
																											pos: position{line: 2708, col: 14, offset: 89503},
																											run: (*parser).callonDocumentFragment916,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 2708, col: 14, offset: 89503},
																												expr: &charClassMatcher{
																													pos:        position{line: 2708, col: 14, offset: 89503},
																													val:        "[^\\r\\n|]",
																													chars:      []rune{'\r', '\n', '|'},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2893, col: 8, offset: 95335},
																		alternatives: []interface{}{
																			&notExpr{
																				pos: position{line: 2890, col: 8, offset: 95285},
																				expr: &anyMatcher{
																					line: 2890, col: 9, offset: 95286,
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2886, col: 12, offset: 95178},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																			&litMatcher{
																				pos:        position{line: 2886, col: 19, offset: 95185},
																				val:        "\r\n",
																				ignoreCase: false,
																				want:       "\"\\r\\n\"",
																			},
																			&actionExpr{
																				pos: position{line: 2886, col: 28, offset: 95194},
																				run: (*parser).callonDocumentFragment924,
																				expr: &litMatcher{
																					pos:        position{line: 2886, col: 28, offset: 95194},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&oneOrMoreExpr{
																		pos: position{line: 2670, col: 5, offset: 88586},
																		expr: &actionExpr{
																			pos: position{line: 482, col: 14, offset: 15644},
																			run: (*parser).callonDocumentFragment927,
																			expr: &seqExpr{
																				pos: position{line: 482, col: 14, offset: 15644},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 482, col: 14, offset: 15644},
																						expr: &notExpr{
																							pos: position{line: 2890, col: 8, offset: 95285},
																							expr: &anyMatcher{
																								line: 2890, col: 9, offset: 95286,
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 482, col: 19, offset: 15649},
																						expr: &choiceExpr{
																							pos: position{line: 2878, col: 10, offset: 95044},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2878, col: 10, offset: 95044},
																									val:        " ",
																									ignoreCase: false,
																									want:       "\" \"",
																								},
																								&actionExpr{
																									pos: position{line: 2878, col: 16, offset: 95050},
																									run: (*parser).callonDocumentFragment935,
																									expr: &litMatcher{
																										pos:        position{line: 2878, col: 16, offset: 95050},
																										val:        "\t",
																										ignoreCase: false,
																										want:       "\"\\t\"",
																									},
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2893, col: 8, offset: 95335},
																						alternatives: []interface{}{
																							&notExpr{
																								pos: position{line: 2890, col: 8, offset: 95285},
																								expr: &anyMatcher{
																									line: 2890, col: 9, offset: 95286,
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 2886, col: 12, offset: 95178},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2886, col: 19, offset: 95185},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&actionExpr{
																								pos: position{line: 2886, col: 28, offset: 95194},
																								run: (*parser).callonDocumentFragment942,
																								expr: &litMatcher{
																									pos:        position{line: 2886, col: 28, offset: 95194},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2656, col: 5, offset: 88265},
													label: "rows",
													expr: &zeroOrMoreExpr{
														pos: position{line: 2656, col: 10, offset: 88270},
														expr: &choiceExpr{
															pos: position{line: 2680, col: 13, offset: 88803},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 2690, col: 5, offset: 89022},
																	run: (*parser).callonDocumentFragment947,
																	expr: &seqExpr{
																		pos: position{line: 2690, col: 5, offset: 89022},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 2690, col: 5, offset: 89022},
																				expr: &choiceExpr{
																					pos: position{line: 2665, col: 22, offset: 88471},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 2661, col: 19, offset: 88391},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2661, col: 19, offset: 88391},
																									val:        "|===",
																									ignoreCase: false,
																									want:       "\"|===\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2661, col: 26, offset: 88398},
																									expr: &choiceExpr{
																										pos: position{line: 2878, col: 10, offset: 95044},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2878, col: 10, offset: 95044},
																												val:        " ",
																												ignoreCase: false,
																												want:       "\" \"",
																											},
																											&actionExpr{
																												pos: position{line: 2878, col: 16, offset: 95050},
																												run: (*parser).callonDocumentFragment956,
																												expr: &litMatcher{
																													pos:        position{line: 2878, col: 16, offset: 95050},
																													val:        "\t",
																													ignoreCase: false,
																													want:       "\"\\t\"",
																												},
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2893, col: 8, offset: 95335},
																									alternatives: []interface{}{
																										&notExpr{
																											pos: position{line: 2890, col: 8, offset: 95285},
																											expr: &anyMatcher{
																												line: 2890, col: 9, offset: 95286,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 2886, col: 12, offset: 95178},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2886, col: 19, offset: 95185},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&actionExpr{
																											pos: position{line: 2886, col: 28, offset: 95194},
																											run: (*parser).callonDocumentFragment963,
																											expr: &litMatcher{
																												pos:        position{line: 2886, col: 28, offset: 95194},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2890, col: 8, offset: 95285},
																							expr: &anyMatcher{
																								line: 2890, col: 9, offset: 95286,
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 2691, col: 5, offset: 89045},
																				label: "cells",
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2691, col: 11, offset: 89051},
																					expr: &actionExpr{
																						pos: position{line: 2691, col: 12, offset: 89052},
																						run: (*parser).callonDocumentFragment969,
																						expr: &seqExpr{
																							pos: position{line: 2691, col: 12, offset: 89052},
																							exprs: []interface{}{
																								&labeledExpr{
																									pos:   position{line: 2691, col: 12, offset: 89052},
																									label: "cell",
																									expr: &actionExpr{
																										pos: position{line: 2700, col: 5, offset: 89293},
																										run: (*parser).callonDocumentFragment972,
																										expr: &seqExpr{
																											pos: position{line: 2700, col: 5, offset: 89293},
																											exprs: []interface{}{
																												&notExpr{
																													pos: position{line: 2700, col: 5, offset: 89293},
																													expr: &choiceExpr{
																														pos: position{line: 2665, col: 22, offset: 88471},
																														alternatives: []interface{}{
																															&seqExpr{
																																pos: position{line: 2661, col: 19, offset: 88391},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 2661, col: 19, offset: 88391},
																																		val:        "|===",
																																		ignoreCase: false,
																																		want:       "\"|===\"",
																																	},
																																	&zeroOrMoreExpr{
																																		pos: position{line: 2661, col: 26, offset: 88398},
																																		expr: &choiceExpr{
																																			pos: position{line: 2878, col: 10, offset: 95044},
																																			alternatives: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 2878, col: 10, offset: 95044},
																																					val:        " ",
																																					ignoreCase: false,
																																					want:       "\" \"",
																																				},
																																				&actionExpr{
																																					pos: position{line: 2878, col: 16, offset: 95050},
																																					run: (*parser).callonDocumentFragment981,
																																					expr: &litMatcher{
																																						pos:        position{line: 2878, col: 16, offset: 95050},
																																						val:        "\t",
																																						ignoreCase: false,
																																						want:       "\"\\t\"",
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&choiceExpr{
																																		pos: position{line: 2893, col: 8, offset: 95335},
																																		alternatives: []interface{}{
																																			&notExpr{
																																				pos: position{line: 2890, col: 8, offset: 95285},
																																				expr: &anyMatcher{
																																					line: 2890, col: 9, offset: 95286,
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 2886, col: 12, offset: 95178},
																																				val:        "\n",
																																				ignoreCase: false,
																																				want:       "\"\\n\"",
																																			},
																																			&litMatcher{
																																				pos:        position{line: 2886, col: 19, offset: 95185},
																																				val:        "\r\n",
																																				ignoreCase: false,
																																				want:       "\"\\r\\n\"",
																																			},
																																			&actionExpr{
																																				pos: position{line: 2886, col: 28, offset: 95194},
																																				run: (*parser).callonDocumentFragment988,
																																				expr: &litMatcher{
																																					pos:        position{line: 2886, col: 28, offset: 95194},
																																					val:        "\r",
																																					ignoreCase: false,
																																					want:       "\"\\r\"",
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 2890, col: 8, offset: 95285},
																																expr: &anyMatcher{
																																	line: 2890, col: 9, offset: 95286,
																																},
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2701, col: 5, offset: 89316},
																													expr: &actionExpr{
																														pos: position{line: 482, col: 14, offset: 15644},
																														run: (*parser).callonDocumentFragment993,
																														expr: &seqExpr{
																															pos: position{line: 482, col: 14, offset: 15644},
																															exprs: []interface{}{
																																&notExpr{
																																	pos: position{line: 482, col: 14, offset: 15644},
																																	expr: &notExpr{
																																		pos: position{line: 2890, col: 8, offset: 95285},
																																		expr: &anyMatcher{
																																			line: 2890, col: 9, offset: 95286,
																																		},
																																	},
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 482, col: 19, offset: 15649},
																																	expr: &choiceExpr{
																																		pos: position{line: 2878, col: 10, offset: 95044},
																																		alternatives: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2878, col: 10, offset: 95044},
																																				val:        " ",
																																				ignoreCase: false,
																																				want:       "\" \"",
																																			},
																																			&actionExpr{
																																				pos: position{line: 2878, col: 16, offset: 95050},
																																				run: (*parser).callonDocumentFragment1001,
																																				expr: &litMatcher{
																																					pos:        position{line: 2878, col: 16, offset: 95050},
																																					val:        "\t",
																																					ignoreCase: false,
																																					want:       "\"\\t\"",
																																				},
																																			},
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2893, col: 8, offset: 95335},
																																	alternatives: []interface{}{
																																		&notExpr{
																																			pos: position{line: 2890, col: 8, offset: 95285},
																																			expr: &anyMatcher{
																																				line: 2890, col: 9, offset: 95286,
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2886, col: 12, offset: 95178},
																																			val:        "\n",
																																			ignoreCase: false,
																																			want:       "\"\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2886, col: 19, offset: 95185},
																																			val:        "\r\n",
																																			ignoreCase: false,
																																			want:       "\"\\r\\n\"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 2886, col: 28, offset: 95194},
																																			run: (*parser).callonDocumentFragment1008,
																																			expr: &litMatcher{
																																				pos:        position{line: 2886, col: 28, offset: 95194},
																																				val:        "\r",
																																				ignoreCase: false,
																																				want:       "\"\\r\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 2702, col: 5, offset: 89331},
																													val:        "|",
																													ignoreCase: false,
																													want:       "\"|\"",
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 2702, col: 9, offset: 89335},
																													expr: &choiceExpr{
																														pos: position{line: 2878, col: 10, offset: 95044},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2878, col: 10, offset: 95044},
																																val:        " ",
																																ignoreCase: false,
																																want:       "\" \"",
																															},
																															&actionExpr{
																																pos: position{line: 2878, col: 16, offset: 95050},
																																run: (*parser).callonDocumentFragment1014,
																																expr: &litMatcher{
																																	pos:        position{line: 2878, col: 16, offset: 95050},
																																	val:        "\t",
																																	ignoreCase: false,
																																	want:       "\"\\t\"",
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 2702, col: 16, offset: 89342},
																													label: "content",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 2702, col: 25, offset: 89351},
																														expr: &actionExpr{
																															pos: position{line: 2708, col: 5, offset: 89494},
																															run: (*parser).callonDocumentFragment1018,
																															expr: &labeledExpr{
																																pos:   position{line: 2708, col: 5, offset: 89494},
																																label: "content",
																																expr: &actionExpr{
																																	pos: position{line: 2708, col: 14, offset: 89503},
																																	run: (*parser).callonDocumentFragment1020,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 2708, col: 14, offset: 89503},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2708, col: 14, offset: 89503},
																																			val:        "[^\\r\\n|]",
																																			chars:      []rune{'\r', '\n', '|'},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2893, col: 8, offset: 95335},
																									alternatives: []interface{}{
																										&notExpr{
																											pos: position{line: 2890, col: 8, offset: 95285},
																											expr: &anyMatcher{
																												line: 2890, col: 9, offset: 95286,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 2886, col: 12, offset: 95178},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2886, col: 19, offset: 95185},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&actionExpr{
																											pos: position{line: 2886, col: 28, offset: 95194},
																											run: (*parser).callonDocumentFragment1028,
																											expr: &litMatcher{
																												pos:        position{line: 2886, col: 28, offset: 95194},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2694, col: 6, offset: 89114},
																				alternatives: []interface{}{
																					&oneOrMoreExpr{
																						pos: position{line: 2694, col: 6, offset: 89114},
																						expr: &actionExpr{
																							pos: position{line: 482, col: 14, offset: 15644},
																							run: (*parser).callonDocumentFragment1032,
																							expr: &seqExpr{
																								pos: position{line: 482, col: 14, offset: 15644},
																								exprs: []interface{}{
																									&notExpr{
																										pos: position{line: 482, col: 14, offset: 15644},
																										expr: &notExpr{
																											pos: position{line: 2890, col: 8, offset: 95285},
																											expr: &anyMatcher{
																												line: 2890, col: 9, offset: 95286,
																											},
																										},
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 482, col: 19, offset: 15649},
																										expr: &choiceExpr{
																											pos: position{line: 2878, col: 10, offset: 95044},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2878, col: 10, offset: 95044},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2878, col: 16, offset: 95050},
																													run: (*parser).callonDocumentFragment1040,
																													expr: &litMatcher{
																														pos:        position{line: 2878, col: 16, offset: 95050},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2893, col: 8, offset: 95335},
																										alternatives: []interface{}{
																											&notExpr{
																												pos: position{line: 2890, col: 8, offset: 95285},
																												expr: &anyMatcher{
																													line: 2890, col: 9, offset: 95286,
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 2886, col: 12, offset: 95178},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2886, col: 19, offset: 95185},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&actionExpr{
																												pos: position{line: 2886, col: 28, offset: 95194},
																												run: (*parser).callonDocumentFragment1047,
																												expr: &litMatcher{
																													pos:        position{line: 2886, col: 28, offset: 95194},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&andExpr{
																						pos: position{line: 2694, col: 19, offset: 89127},
																						expr: &choiceExpr{
																							pos: position{line: 2665, col: 22, offset: 88471},
																							alternatives: []interface{}{
																								&seqExpr{
																									pos: position{line: 2661, col: 19, offset: 88391},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2661, col: 19, offset: 88391},
																											val:        "|===",
																											ignoreCase: false,
																											want:       "\"|===\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 2661, col: 26, offset: 88398},
																											expr: &choiceExpr{
																												pos: position{line: 2878, col: 10, offset: 95044},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2878, col: 10, offset: 95044},
																														val:        " ",
																														ignoreCase: false,
																														want:       "\" \"",
																													},
																													&actionExpr{
																														pos: position{line: 2878, col: 16, offset: 95050},
																														run: (*parser).callonDocumentFragment1056,
																														expr: &litMatcher{
																															pos:        position{line: 2878, col: 16, offset: 95050},
																															val:        "\t",
																															ignoreCase: false,
																															want:       "\"\\t\"",
																														},
																													},
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2893, col: 8, offset: 95335},
																											alternatives: []interface{}{
																												&notExpr{
																													pos: position{line: 2890, col: 8, offset: 95285},
																													expr: &anyMatcher{
																														line: 2890, col: 9, offset: 95286,
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 2886, col: 12, offset: 95178},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2886, col: 19, offset: 95185},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&actionExpr{
																													pos: position{line: 2886, col: 28, offset: 95194},
																													run: (*parser).callonDocumentFragment1063,
																													expr: &litMatcher{
																														pos:        position{line: 2886, col: 28, offset: 95194},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2890, col: 8, offset: 95285},
																									expr: &anyMatcher{
																										line: 2890, col: 9, offset: 95286,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2683, col: 5, offset: 88870},
																	run: (*parser).callonDocumentFragment1067,
																	expr: &seqExpr{
																		pos: position{line: 2683, col: 5, offset: 88870},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 2683, col: 5, offset: 88870},
																				expr: &choiceExpr{
																					pos: position{line: 2665, col: 22, offset: 88471},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 2661, col: 19, offset: 88391},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2661, col: 19, offset: 88391},
																									val:        "|===",
																									ignoreCase: false,
																									want:       "\"|===\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2661, col: 26, offset: 88398},
																									expr: &choiceExpr{
																										pos: position{line: 2878, col: 10, offset: 95044},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2878, col: 10, offset: 95044},
																												val:        " ",
																												ignoreCase: false,
																												want:       "\" \"",
																											},
																											&actionExpr{
																												pos: position{line: 2878, col: 16, offset: 95050},
																												run: (*parser).callonDocumentFragment1076,
																												expr: &litMatcher{
																													pos:        position{line: 2878, col: 16, offset: 95050},
																													val:        "\t",
																													ignoreCase: false,
																													want:       "\"\\t\"",
																												},
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2893, col: 8, offset: 95335},
																									alternatives: []interface{}{
																										&notExpr{
																											pos: position{line: 2890, col: 8, offset: 95285},
																											expr: &anyMatcher{
																												line: 2890, col: 9, offset: 95286,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 2886, col: 12, offset: 95178},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2886, col: 19, offset: 95185},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&actionExpr{
																											pos: position{line: 2886, col: 28, offset: 95194},
																											run: (*parser).callonDocumentFragment1083,
																											expr: &litMatcher{
																												pos:        position{line: 2886, col: 28, offset: 95194},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2890, col: 8, offset: 95285},
																							expr: &anyMatcher{
																								line: 2890, col: 9, offset: 95286,
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 2684, col: 5, offset: 88893},
																				label: "cells",
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2684, col: 11, offset: 88899},
																					expr: &actionExpr{
																						pos: position{line: 2700, col: 5, offset: 89293},
																						run: (*parser).callonDocumentFragment1089,
																						expr: &seqExpr{
																							pos: position{line: 2700, col: 5, offset: 89293},
																							exprs: []interface{}{
																								&notExpr{
																									pos: position{line: 2700, col: 5, offset: 89293},
																									expr: &choiceExpr{
																										pos: position{line: 2665, col: 22, offset: 88471},
																										alternatives: []interface{}{
																											&seqExpr{
																												pos: position{line: 2661, col: 19, offset: 88391},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2661, col: 19, offset: 88391},
																														val:        "|===",
																														ignoreCase: false,
																														want:       "\"|===\"",
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 2661, col: 26, offset: 88398},
																														expr: &choiceExpr{
																															pos: position{line: 2878, col: 10, offset: 95044},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 2878, col: 10, offset: 95044},
																																	val:        " ",
																																	ignoreCase: false,
																																	want:       "\" \"",
																																},
																																&actionExpr{
																																	pos: position{line: 2878, col: 16, offset: 95050},
																																	run: (*parser).callonDocumentFragment1098,
																																	expr: &litMatcher{
																																		pos:        position{line: 2878, col: 16, offset: 95050},
																																		val:        "\t",
																																		ignoreCase: false,
																																		want:       "\"\\t\"",
																																	},
																																},
																															},
																														},
																													},
																													&choiceExpr{
																														pos: position{line: 2893, col: 8, offset: 95335},
																														alternatives: []interface{}{
																															&notExpr{
																																pos: position{line: 2890, col: 8, offset: 95285},
																																expr: &anyMatcher{
																																	line: 2890, col: 9, offset: 95286,
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 2886, col: 12, offset: 95178},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2886, col: 19, offset: 95185},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&actionExpr{
																																pos: position{line: 2886, col: 28, offset: 95194},
																																run: (*parser).callonDocumentFragment1105,
																																expr: &litMatcher{
																																	pos:        position{line: 2886, col: 28, offset: 95194},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 2890, col: 8, offset: 95285},
																												expr: &anyMatcher{
																													line: 2890, col: 9, offset: 95286,
																												},
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2701, col: 5, offset: 89316},
																									expr: &actionExpr{
																										pos: position{line: 482, col: 14, offset: 15644},
																										run: (*parser).callonDocumentFragment1110,
																										expr: &seqExpr{
																											pos: position{line: 482, col: 14, offset: 15644},
																											exprs: []interface{}{
																												&notExpr{
																													pos: position{line: 482, col: 14, offset: 15644},
																													expr: &notExpr{
																														pos: position{line: 2890, col: 8, offset: 95285},
																														expr: &anyMatcher{
																															line: 2890, col: 9, offset: 95286,
																														},
																													},
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 482, col: 19, offset: 15649},
																													expr: &choiceExpr{
																														pos: position{line: 2878, col: 10, offset: 95044},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2878, col: 10, offset: 95044},
																																val:        " ",
																																ignoreCase: false,
																																want:       "\" \"",
																															},
																															&actionExpr{
																																pos: position{line: 2878, col: 16, offset: 95050},
																																run: (*parser).callonDocumentFragment1118,
																																expr: &litMatcher{
																																	pos:        position{line: 2878, col: 16, offset: 95050},
																																	val:        "\t",
																																	ignoreCase: false,
																																	want:       "\"\\t\"",
																																},
																															},
																														},
																													},
																												},
																												&choiceExpr{
																													pos: position{line: 2893, col: 8, offset: 95335},
																													alternatives: []interface{}{
																														&notExpr{
																															pos: position{line: 2890, col: 8, offset: 95285},
																															expr: &anyMatcher{
																																line: 2890, col: 9, offset: 95286,
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 2886, col: 12, offset: 95178},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 2886, col: 19, offset: 95185},
																															val:        "\r\n",
																															ignoreCase: false,
																															want:       "\"\\r\\n\"",
																														},
																														&actionExpr{
																															pos: position{line: 2886, col: 28, offset: 95194},
																															run: (*parser).callonDocumentFragment1125,
																															expr: &litMatcher{
																																pos:        position{line: 2886, col: 28, offset: 95194},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2702, col: 5, offset: 89331},
																									val:        "|",
																									ignoreCase: false,
																									want:       "\"|\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2702, col: 9, offset: 89335},
																									expr: &choiceExpr{
																										pos: position{line: 2878, col: 10, offset: 95044},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2878, col: 10, offset: 95044},
																												val:        " ",
																												ignoreCase: false,
																												want:       "\" \"",
																											},
																											&actionExpr{
																												pos: position{line: 2878, col: 16, offset: 95050},
																												run: (*parser).callonDocumentFragment1131,
																												expr: &litMatcher{
																													pos:        position{line: 2878, col: 16, offset: 95050},
																													val:        "\t",
																													ignoreCase: false,
																													want:       "\"\\t\"",
																												},
																											},
																										},
																									},
																								},
																								&labeledExpr{
																									pos:   position{line: 2702, col: 16, offset: 89342},
																									label: "content",
																									expr: &zeroOrOneExpr{
																										pos: position{line: 2702, col: 25, offset: 89351},
																										expr: &actionExpr{
																											pos: position{line: 2708, col: 5, offset: 89494},
																											run: (*parser).callonDocumentFragment1135,
																											expr: &labeledExpr{
																												pos:   position{line: 2708, col: 5, offset: 89494},
																												label: "content",
																												expr: &actionExpr{
																													pos: position{line: 2708, col: 14, offset: 89503},
																													run: (*parser).callonDocumentFragment1137,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 2708, col: 14, offset: 89503},
																														expr: &charClassMatcher{
																															pos:        position{line: 2708, col: 14, offset: 89503},
																															val:        "[^\\r\\n|]",
																															chars:      []rune{'\r', '\n', '|'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2893, col: 8, offset: 95335},
																				alternatives: []interface{}{
																					&notExpr{
																						pos: position{line: 2890, col: 8, offset: 95285},
																						expr: &anyMatcher{
																							line: 2890, col: 9, offset: 95286,
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 2886, col: 12, offset: 95178},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2886, col: 19, offset: 95185},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&actionExpr{
																						pos: position{line: 2886, col: 28, offset: 95194},
																						run: (*parser).callonDocumentFragment1145,
																						expr: &litMatcher{
																							pos:        position{line: 2886, col: 28, offset: 95194},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2685, col: 5, offset: 88920},
																				expr: &actionExpr{
																					pos: position{line: 482, col: 14, offset: 15644},
																					run: (*parser).callonDocumentFragment1148,
																					expr: &seqExpr{
																						pos: position{line: 482, col: 14, offset: 15644},
																						exprs: []interface{}{
																							&notExpr{
																								pos: position{line: 482, col: 14, offset: 15644},
																								expr: &notExpr{
																									pos: position{line: 2890, col: 8, offset: 95285},
																									expr: &anyMatcher{
																										line: 2890, col: 9, offset: 95286,
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 482, col: 19, offset: 15649},
																								expr: &choiceExpr{
																									pos: position{line: 2878, col: 10, offset: 95044},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2878, col: 10, offset: 95044},
																											val:        " ",
																											ignoreCase: false,
																											want:       "\" \"",
																										},
																										&actionExpr{
																											pos: position{line: 2878, col: 16, offset: 95050},
																											run: (*parser).callonDocumentFragment1156,
																											expr: &litMatcher{
																												pos:        position{line: 2878, col: 16, offset: 95050},
																												val:        "\t",
																												ignoreCase: false,
																												want:       "\"\\t\"",
																											},
																										},
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2893, col: 8, offset: 95335},
																								alternatives: []interface{}{
																									&notExpr{
																										pos: position{line: 2890, col: 8, offset: 95285},
																										expr: &anyMatcher{
																											line: 2890, col: 9, offset: 95286,
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2886, col: 12, offset: 95178},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2886, col: 19, offset: 95185},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&actionExpr{
																										pos: position{line: 2886, col: 28, offset: 95194},
																										run: (*parser).callonDocumentFragment1163,
																										expr: &litMatcher{
																											pos:        position{line: 2886, col: 28, offset: 95194},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2665, col: 22, offset: 88471},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 2661, col: 19, offset: 88391},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2661, col: 19, offset: 88391},
																	val:        "|===",
																	ignoreCase: false,
																	want:       "\"|===\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 2661, col: 26, offset: 88398},
																	expr: &choiceExpr{
																		pos: position{line: 2878, col: 10, offset: 95044},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2878, col: 10, offset: 95044},
																				val:        " ",
																				ignoreCase: false,
																				want:       "\" \"",
																			},
																			&actionExpr{
																				pos: position{line: 2878, col: 16, offset: 95050},
																				run: (*parser).callonDocumentFragment1171,
																				expr: &litMatcher{
																					pos:        position{line: 2878, col: 16, offset: 95050},
																					val:        "\t",
																					ignoreCase: false,
																					want:       "\"\\t\"",
																				},
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2893, col: 8, offset: 95335},
																	alternatives: []interface{}{
																		&notExpr{
																			pos: position{line: 2890, col: 8, offset: 95285},
																			expr: &anyMatcher{
																				line: 2890, col: 9, offset: 95286,
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2886, col: 12, offset: 95178},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2886, col: 19, offset: 95185},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&actionExpr{
																			pos: position{line: 2886, col: 28, offset: 95194},
																			run: (*parser).callonDocumentFragment1178,
																			expr: &litMatcher{
																				pos:        position{line: 2886, col: 28, offset: 95194},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2890, col: 8, offset: 95285},
															expr: &anyMatcher{
																line: 2890, col: 9, offset: 95286,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2604, col: 22, offset: 86659},
										run: (*parser).callonDocumentFragment1182,
										expr: &seqExpr{
											pos: position{line: 2604, col: 22, offset: 86659},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2609, col: 31, offset: 86880},
													val:        "//",
													ignoreCase: false,
													want:       "\"//\"",
												},
												&notExpr{
													pos: position{line: 2609, col: 36, offset: 86885},
													expr: &litMatcher{
														pos:        position{line: 2609, col: 37, offset: 86886},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 2604, col: 49, offset: 86686},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 2611, col: 29, offset: 86921},
														run: (*parser).callonDocumentFragment1188,
														expr: &zeroOrMoreExpr{
															pos: position{line: 2611, col: 29, offset: 86921},
															expr: &charClassMatcher{
																pos:        position{line: 2611, col: 29, offset: 86921},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2893, col: 8, offset: 95335},
													alternatives: []interface{}{
														&notExpr{
															pos: position{line: 2890, col: 8, offset: 95285},
															expr: &anyMatcher{
																line: 2890, col: 9, offset: 95286,
															},
														},
														&litMatcher{
															pos:        position{line: 2886, col: 12, offset: 95178},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2886, col: 19, offset: 95185},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&actionExpr{
															pos: position{line: 2886, col: 28, offset: 95194},
															run: (*parser).callonDocumentFragment1196,
															expr: &litMatcher{
																pos:        position{line: 2886, col: 28, offset: 95194},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1593, col: 5, offset: 52905},
										run: (*parser).callonDocumentFragment1198,
										expr: &seqExpr{
											pos: position{line: 1593, col: 5, offset: 52905},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1593, col: 5, offset: 52905},
													label: "kind",
													expr: &choiceExpr{
														pos: position{line: 92, col: 19, offset: 2545},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 92, col: 19, offset: 2545},
																run: (*parser).callonDocumentFragment1202,
																expr: &litMatcher{
																	pos:        position{line: 92, col: 19, offset: 2545},
																	val:        "TIP",
																	ignoreCase: false,
																	want:       "\"TIP\"",
																},
															},
															&actionExpr{
																pos: position{line: 94, col: 5, offset: 2583},
																run: (*parser).callonDocumentFragment1204,
																expr: &litMatcher{
																	pos:        position{line: 94, col: 5, offset: 2583},
																	val:        "NOTE",
																	ignoreCase: false,
																	want:       "\"NOTE\"",
																},
															},
															&actionExpr{
																pos: position{line: 96, col: 5, offset: 2623},
																run: (*parser).callonDocumentFragment1206,
																expr: &litMatcher{
																	pos:        position{line: 96, col: 5, offset: 2623},
																	val:        "IMPORTANT",
																	ignoreCase: false,
																	want:       "\"IMPORTANT\"",
																},
															},
															&actionExpr{
																pos: position{line: 98, col: 5, offset: 2673},
																run: (*parser).callonDocumentFragment1208,
																expr: &litMatcher{
																	pos:        position{line: 98, col: 5, offset: 2673},
																	val:        "WARNING",
																	ignoreCase: false,
																	want:       "\"WARNING\"",
																},
															},
															&actionExpr{
																pos: position{line: 100, col: 5, offset: 2719},
																run: (*parser).callonDocumentFragment1210,
																expr: &litMatcher{
																	pos:        position{line: 100, col: 5, offset: 2719},
																	val:        "CAUTION",
																	ignoreCase: false,
																	want:       "\"CAUTION\"",
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1593, col: 27, offset: 52927},
													val:        ": ",
													ignoreCase: false,
													want:       "\": \"",
												},
												&labeledExpr{
													pos:   position{line: 1594, col: 5, offset: 52937},
													label: "firstLine",
													expr: &actionExpr{
														pos: position{line: 1605, col: 5, offset: 53281},
														run: (*parser).callonDocumentFragment1214,
														expr: &seqExpr{
															pos: position{line: 1605, col: 5, offset: 53281},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1605, col: 5, offset: 53281},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 1605, col: 14, offset: 53290},
																		run: (*parser).callonDocumentFragment1217,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1605, col: 14, offset: 53290},
																			expr: &charClassMatcher{
																				pos:        position{line: 1605, col: 14, offset: 53290},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&andCodeExpr{
																	pos: position{line: 1608, col: 5, offset: 53347},
																	run: (*parser).callonDocumentFragment1220,
																},
																&choiceExpr{
																	pos: position{line: 2893, col: 8, offset: 95335},
																	alternatives: []interface{}{
																		&notExpr{
																			pos: position{line: 2890, col: 8, offset: 95285},
																			expr: &anyMatcher{
																				line: 2890, col: 9, offset: 95286,
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2886, col: 12, offset: 95178},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2886, col: 19, offset: 95185},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&actionExpr{
																			pos: position{line: 2886, col: 28, offset: 95194},
																			run: (*parser).callonDocumentFragment1226,
																			expr: &litMatcher{
																				pos:        position{line: 2886, col: 28, offset: 95194},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1595, col: 5, offset: 52971},
													label: "otherLines",
													expr: &zeroOrMoreExpr{
														pos: position{line: 1595, col: 16, offset: 52982},
														expr: &actionExpr{
															pos: position{line: 1596, col: 9, offset: 52992},
															run: (*parser).callonDocumentFragment1230,
															expr: &seqExpr{
																pos: position{line: 1596, col: 9, offset: 52992},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1596, col: 9, offset: 52992},
																		expr: &seqExpr{
																			pos: position{line: 1343, col: 34, offset: 44869},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 1343, col: 34, offset: 44869},
																					val:        "+",
																					ignoreCase: false,
																					want:       "\"+\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 1343, col: 38, offset: 44873},
																					expr: &choiceExpr{
																						pos: position{line: 2878, col: 10, offset: 95044},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2878, col: 10, offset: 95044},
																								val:        " ",
																								ignoreCase: false,
																								want:       "\" \"",
																							},
																							&actionExpr{
																								pos: position{line: 2878, col: 16, offset: 95050},
																								run: (*parser).callonDocumentFragment1238,
																								expr: &litMatcher{
																									pos:        position{line: 2878, col: 16, offset: 95050},
																									val:        "\t",
																									ignoreCase: false,
																									want:       "\"\\t\"",
																								},
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2886, col: 12, offset: 95178},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2886, col: 12, offset: 95178},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2886, col: 19, offset: 95185},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&actionExpr{
																							pos: position{line: 2886, col: 28, offset: 95194},
																							run: (*parser).callonDocumentFragment1243,
																							expr: &litMatcher{
																								pos:        position{line: 2886, col: 28, offset: 95194},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1597, col: 9, offset: 53031},
																		label: "line",
																		expr: &choiceExpr{
																			pos: position{line: 1597, col: 15, offset: 53037},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2604, col: 22, offset: 86659},
																					run: (*parser).callonDocumentFragment1247,
																					expr: &seqExpr{
																						pos: position{line: 2604, col: 22, offset: 86659},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2609, col: 31, offset: 86880},
																								val:        "//",
																								ignoreCase: false,
																								want:       "\"//\"",
																							},
																							&notExpr{
																								pos: position{line: 2609, col: 36, offset: 86885},
																								expr: &litMatcher{
																									pos:        position{line: 2609, col: 37, offset: 86886},
																									val:        "//",
																									ignoreCase: false,
																									want:       "\"//\"",
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 2604, col: 49, offset: 86686},
																								label: "content",
																								expr: &actionExpr{
																									pos: position{line: 2611, col: 29, offset: 86921},
																									run: (*parser).callonDocumentFragment1253,
																									expr: &zeroOrMoreExpr{
																										pos: position{line: 2611, col: 29, offset: 86921},
																										expr: &charClassMatcher{
																											pos:        position{line: 2611, col: 29, offset: 86921},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2893, col: 8, offset: 95335},
																								alternatives: []interface{}{
																									&notExpr{
																										pos: position{line: 2890, col: 8, offset: 95285},
																										expr: &anyMatcher{
																											line: 2890, col: 9, offset: 95286,
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2886, col: 12, offset: 95178},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2886, col: 19, offset: 95185},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&actionExpr{
																										pos: position{line: 2886, col: 28, offset: 95194},
																										run: (*parser).callonDocumentFragment1261,
																										expr: &litMatcher{
																											pos:        position{line: 2886, col: 28, offset: 95194},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1605, col: 5, offset: 53281},
																					run: (*parser).callonDocumentFragment1263,
																					expr: &seqExpr{
																						pos: position{line: 1605, col: 5, offset: 53281},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 1605, col: 5, offset: 53281},
																								label: "content",
																								expr: &actionExpr{
																									pos: position{line: 1605, col: 14, offset: 53290},
																									run: (*parser).callonDocumentFragment1266,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1605, col: 14, offset: 53290},
																										expr: &charClassMatcher{
																											pos:        position{line: 1605, col: 14, offset: 53290},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&andCodeExpr{
																								pos: position{line: 1608, col: 5, offset: 53347},
																								run: (*parser).callonDocumentFragment1269,
																							},
																							&choiceExpr{
																								pos: position{line: 2893, col: 8, offset: 95335},
																								alternatives: []interface{}{
																									&notExpr{
																										pos: position{line: 2890, col: 8, offset: 95285},
																										expr: &anyMatcher{
																											line: 2890, col: 9, offset: 95286,
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2886, col: 12, offset: 95178},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2886, col: 19, offset: 95185},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&actionExpr{
																										pos: position{line: 2886, col: 28, offset: 95194},
																										run: (*parser).callonDocumentFragment1275,
																										expr: &litMatcher{
																											pos:        position{line: 2886, col: 28, offset: 95194},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1616, col: 5, offset: 53511},
										run: (*parser).callonDocumentFragment1277,
										expr: &seqExpr{
											pos: position{line: 1616, col: 5, offset: 53511},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1616, col: 5, offset: 53511},
													label: "firstLine",
													expr: &actionExpr{
														pos: position{line: 1623, col: 5, offset: 53796},
														run: (*parser).callonDocumentFragment1280,
														expr: &seqExpr{
															pos: position{line: 1623, col: 5, offset: 53796},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1623, col: 5, offset: 53796},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 1623, col: 14, offset: 53805},
																		run: (*parser).callonDocumentFragment1283,
																		expr: &seqExpr{
																			pos: position{line: 1623, col: 14, offset: 53805},
																			exprs: []interface{}{
																				&actionExpr{
																					pos: position{line: 2882, col: 11, offset: 95109},
																					run: (*parser).callonDocumentFragment1285,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2882, col: 11, offset: 95109},
																						expr: &charClassMatcher{
																							pos:        position{line: 2882, col: 12, offset: 95110},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&oneOrMoreExpr{
																					pos: position{line: 1623, col: 21, offset: 53812},
																					expr: &charClassMatcher{
																						pos:        position{line: 1623, col: 21, offset: 53812},
																						val:        "[^\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																	},
																},
																&andCodeExpr{
																	pos: position{line: 1626, col: 5, offset: 53869},
																	run: (*parser).callonDocumentFragment1290,
																},
																&choiceExpr{
																	pos: position{line: 2893, col: 8, offset: 95335},
																	alternatives: []interface{}{
																		&notExpr{
																			pos: position{line: 2890, col: 8, offset: 95285},
																			expr: &anyMatcher{
																				line: 2890, col: 9, offset: 95286,
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2886, col: 12, offset: 95178},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2886, col: 19, offset: 95185},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&actionExpr{
																			pos: position{line: 2886, col: 28, offset: 95194},
																			run: (*parser).callonDocumentFragment1296,
																			expr: &litMatcher{
																				pos:        position{line: 2886, col: 28, offset: 95194},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1617, col: 5, offset: 53552},
													label: "otherLines",
													expr: &zeroOrMoreExpr{
														pos: position{line: 1617, col: 16, offset: 53563},
														expr: &choiceExpr{
															pos: position{line: 1617, col: 17, offset: 53564},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 2604, col: 22, offset: 86659},
																	run: (*parser).callonDocumentFragment1301,
																	expr: &seqExpr{
																		pos: position{line: 2604, col: 22, offset: 86659},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2609, col: 31, offset: 86880},
																				val:        "//",
																				ignoreCase: false,
																				want:       "\"//\"",
																			},
																			&notExpr{
																				pos: position{line: 2609, col: 36, offset: 86885},
																				expr: &litMatcher{
																					pos:        position{line: 2609, col: 37, offset: 86886},
																					val:        "//",
																					ignoreCase: false,
																					want:       "\"//\"",
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 2604, col: 49, offset: 86686},
																				label: "content",
																				expr: &actionExpr{
																					pos: position{line: 2611, col: 29, offset: 86921},
																					run: (*parser).callonDocumentFragment1307,
																					expr: &zeroOrMoreExpr{
																						pos: position{line: 2611, col: 29, offset: 86921},
																						expr: &charClassMatcher{
																							pos:        position{line: 2611, col: 29, offset: 86921},
																							val:        "[^\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2893, col: 8, offset: 95335},
																				alternatives: []interface{}{
																					&notExpr{
																						pos: position{line: 2890, col: 8, offset: 95285},
																						expr: &anyMatcher{
																							line: 2890, col: 9, offset: 95286,
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 2886, col: 12, offset: 95178},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2886, col: 19, offset: 95185},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&actionExpr{
																						pos: position{line: 2886, col: 28, offset: 95194},
																						run: (*parser).callonDocumentFragment1315,
																						expr: &litMatcher{
																							pos:        position{line: 2886, col: 28, offset: 95194},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 1605, col: 5, offset: 53281},
																	run: (*parser).callonDocumentFragment1317,
																	expr: &seqExpr{
																		pos: position{line: 1605, col: 5, offset: 53281},
																		exprs: []interface{}{
																			&labeledExpr{
																				pos:   position{line: 1605, col: 5, offset: 53281},
																				label: "content",
																				expr: &actionExpr{
																					pos: position{line: 1605, col: 14, offset: 53290},
																					run: (*parser).callonDocumentFragment1320,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 1605, col: 14, offset: 53290},
																						expr: &charClassMatcher{
																							pos:        position{line: 1605, col: 14, offset: 53290},
																							val:        "[^\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																			},
																			&andCodeExpr{
																				pos: position{line: 1608, col: 5, offset: 53347},
																				run: (*parser).callonDocumentFragment1323,
																			},
																			&choiceExpr{
																				pos: position{line: 2893, col: 8, offset: 95335},
																				alternatives: []interface{}{
																					&notExpr{
																						pos: position{line: 2890, col: 8, offset: 95285},
																						expr: &anyMatcher{
																							line: 2890, col: 9, offset: 95286,
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 2886, col: 12, offset: 95178},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2886, col: 19, offset: 95185},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&actionExpr{
																						pos: position{line: 2886, col: 28, offset: 95194},
																						run: (*parser).callonDocumentFragment1329,
																						expr: &litMatcher{
																							pos:        position{line: 2886, col: 28, offset: 95194},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 39, col: 11, offset: 964},
										name: "UserMacroBlock",
									},
									&actionExpr{
										pos: position{line: 1580, col: 5, offset: 52535},
										run: (*parser).callonDocumentFragment1332,
										expr: &seqExpr{
											pos: position{line: 1580, col: 5, offset: 52535},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1580, col: 5, offset: 52535},
													label: "firstLine",
													expr: &actionExpr{
														pos: position{line: 1605, col: 5, offset: 53281},
														run: (*parser).callonDocumentFragment1335,
														expr: &seqExpr{
															pos: position{line: 1605, col: 5, offset: 53281},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1605, col: 5, offset: 53281},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 1605, col: 14, offset: 53290},
																		run: (*parser).callonDocumentFragment1338,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1605, col: 14, offset: 53290},
																			expr: &charClassMatcher{
																				pos:        position{line: 1605, col: 14, offset: 53290},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&andCodeExpr{
																	pos: position{line: 1608, col: 5, offset: 53347},
																	run: (*parser).callonDocumentFragment1341,
																},
																&choiceExpr{
																	pos: position{line: 2893, col: 8, offset: 95335},
																	alternatives: []interface{}{
																		&notExpr{
																			pos: position{line: 2890, col: 8, offset: 95285},
																			expr: &anyMatcher{
																				line: 2890, col: 9, offset: 95286,
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2886, col: 12, offset: 95178},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2886, col: 19, offset: 95185},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&actionExpr{
																			pos: position{line: 2886, col: 28, offset: 95194},
																			run: (*parser).callonDocumentFragment1347,
																			expr: &litMatcher{
																				pos:        position{line: 2886, col: 28, offset: 95194},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1581, col: 5, offset: 52569},
													label: "otherLines",
													expr: &zeroOrMoreExpr{
														pos: position{line: 1581, col: 16, offset: 52580},
														expr: &actionExpr{
															pos: position{line: 1582, col: 9, offset: 52590},
															run: (*parser).callonDocumentFragment1351,
															expr: &seqExpr{
																pos: position{line: 1582, col: 9, offset: 52590},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1582, col: 9, offset: 52590},
																		expr: &notExpr{
																			pos: position{line: 2890, col: 8, offset: 95285},
																			expr: &anyMatcher{
																				line: 2890, col: 9, offset: 95286,
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 1583, col: 9, offset: 52603},
																		expr: &seqExpr{
																			pos: position{line: 1343, col: 34, offset: 44869},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 1343, col: 34, offset: 44869},
																					val:        "+",
																					ignoreCase: false,
																					want:       "\"+\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 1343, col: 38, offset: 44873},
																					expr: &choiceExpr{
																						pos: position{line: 2878, col: 10, offset: 95044},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2878, col: 10, offset: 95044},
																								val:        " ",
																								ignoreCase: false,
																								want:       "\" \"",
																							},
																							&actionExpr{
																								pos: position{line: 2878, col: 16, offset: 95050},
																								run: (*parser).callonDocumentFragment1362,
																								expr: &litMatcher{
																									pos:        position{line: 2878, col: 16, offset: 95050},
																									val:        "\t",
																									ignoreCase: false,
																									want:       "\"\\t\"",
																								},
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2886, col: 12, offset: 95178},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2886, col: 12, offset: 95178},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2886, col: 19, offset: 95185},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&actionExpr{
																							pos: position{line: 2886, col: 28, offset: 95194},
																							run: (*parser).callonDocumentFragment1367,
																							expr: &litMatcher{
																								pos:        position{line: 2886, col: 28, offset: 95194},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1584, col: 9, offset: 52642},
																		label: "line",
																		expr: &choiceExpr{
																			pos: position{line: 1584, col: 15, offset: 52648},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2604, col: 22, offset: 86659},
																					run: (*parser).callonDocumentFragment1371,
																					expr: &seqExpr{
																						pos: position{line: 2604, col: 22, offset: 86659},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2609, col: 31, offset: 86880},
																								val:        "//",
																								ignoreCase: false,
																								want:       "\"//\"",
																							},
																							&notExpr{
																								pos: position{line: 2609, col: 36, offset: 86885},
																								expr: &litMatcher{
																									pos:        position{line: 2609, col: 37, offset: 86886},
																									val:        "//",
																									ignoreCase: false,
																									want:       "\"//\"",
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 2604, col: 49, offset: 86686},
																								label: "content",
																								expr: &actionExpr{
																									pos: position{line: 2611, col: 29, offset: 86921},
																									run: (*parser).callonDocumentFragment1377,
																									expr: &zeroOrMoreExpr{
																										pos: position{line: 2611, col: 29, offset: 86921},
																										expr: &charClassMatcher{
																											pos:        position{line: 2611, col: 29, offset: 86921},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2893, col: 8, offset: 95335},
																								alternatives: []interface{}{
																									&notExpr{
																										pos: position{line: 2890, col: 8, offset: 95285},
																										expr: &anyMatcher{
																											line: 2890, col: 9, offset: 95286,
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2886, col: 12, offset: 95178},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2886, col: 19, offset: 95185},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&actionExpr{
																										pos: position{line: 2886, col: 28, offset: 95194},
																										run: (*parser).callonDocumentFragment1385,
																										expr: &litMatcher{
																											pos:        position{line: 2886, col: 28, offset: 95194},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1605, col: 5, offset: 53281},
																					run: (*parser).callonDocumentFragment1387,
																					expr: &seqExpr{
																						pos: position{line: 1605, col: 5, offset: 53281},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 1605, col: 5, offset: 53281},
																								label: "content",
																								expr: &actionExpr{
																									pos: position{line: 1605, col: 14, offset: 53290},
																									run: (*parser).callonDocumentFragment1390,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1605, col: 14, offset: 53290},
																										expr: &charClassMatcher{
																											pos:        position{line: 1605, col: 14, offset: 53290},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&andCodeExpr{
																								pos: position{line: 1608, col: 5, offset: 53347},
																								run: (*parser).callonDocumentFragment1393,
																							},
																							&choiceExpr{
																								pos: position{line: 2893, col: 8, offset: 95335},
																								alternatives: []interface{}{
																									&notExpr{
																										pos: position{line: 2890, col: 8, offset: 95285},
																										expr: &anyMatcher{
																											line: 2890, col: 9, offset: 95286,
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2886, col: 12, offset: 95178},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2886, col: 19, offset: 95185},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&actionExpr{
																										pos: position{line: 2886, col: 28, offset: 95194},
																										run: (*parser).callonDocumentFragment1399,
																										expr: &litMatcher{
																											pos:        position{line: 2886, col: 28, offset: 95194},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentFragmentWithinVerbatimBlock",
			pos:  position{line: 51, col: 1, offset: 1366},
			expr: &actionExpr{
				pos: position{line: 52, col: 5, offset: 1409},
				run: (*parser).callonDocumentFragmentWithinVerbatimBlock1,
				expr: &seqExpr{
					pos: position{line: 52, col: 5, offset: 1409},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 52, col: 5, offset: 1409},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 52, col: 14, offset: 1418},
								expr: &choiceExpr{
									pos: position{line: 53, col: 9, offset: 1428},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 53, col: 9, offset: 1428},
											name: "FileInclusion",
										},
										&actionExpr{
											pos: position{line: 60, col: 5, offset: 1525},
											run: (*parser).callonDocumentFragmentWithinVerbatimBlock7,
											expr: &seqExpr{
												pos: position{line: 60, col: 5, offset: 1525},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 60, col: 5, offset: 1525},
														expr: &notExpr{
															pos: position{line: 2890, col: 8, offset: 95285},
															expr: &anyMatcher{
																line: 2890, col: 9, offset: 95286,
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 61, col: 5, offset: 1534},
														label: "content",
														expr: &actionExpr{
															pos: position{line: 61, col: 14, offset: 1543},
															run: (*parser).callonDocumentFragmentWithinVerbatimBlock13,
															expr: &zeroOrMoreExpr{
																pos: position{line: 61, col: 14, offset: 1543},
																expr: &charClassMatcher{
																	pos:        position{line: 61, col: 14, offset: 1543},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2893, col: 8, offset: 95335},
														alternatives: []interface{}{
															&notExpr{
																pos: position{line: 2890, col: 8, offset: 95285},
																expr: &anyMatcher{
																	line: 2890, col: 9, offset: 95286,
																},
															},
															&litMatcher{
																pos:        position{line: 2886, col: 12, offset: 95178},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2886, col: 19, offset: 95185},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&actionExpr{
																pos: position{line: 2886, col: 28, offset: 95194},
																run: (*parser).callonDocumentFragmentWithinVerbatimBlock21,
																expr: &litMatcher{
																	pos:        position{line: 2886, col: 28, offset: 95194},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2890, col: 8, offset: 95285},
							expr: &anyMatcher{
								line: 2890, col: 9, offset: 95286,
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlockElements",
			pos:  position{line: 70, col: 1, offset: 1734},
			expr: &actionExpr{
				pos: position{line: 71, col: 5, offset: 1765},
				run: (*parser).callonDelimitedBlockElements1,
				expr: &seqExpr{
					pos: position{line: 71, col: 5, offset: 1765},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 71, col: 5, offset: 1765},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 71, col: 14, offset: 1774},
								expr: &choiceExpr{
									pos: position{line: 72, col: 9, offset: 1784},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 947, col: 23, offset: 29896},
											run: (*parser).callonDelimitedBlockElements6,
											expr: &seqExpr{
												pos: position{line: 947, col: 23, offset: 29896},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 945, col: 32, offset: 29864},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
													&labeledExpr{
														pos:   position{line: 947, col: 51, offset: 29924},
														label: "ref",
														expr: &actionExpr{
															pos: position{line: 947, col: 56, offset: 29929},
															run: (*parser).callonDelimitedBlockElements10,
															expr: &oneOrMoreExpr{
																pos: position{line: 947, col: 56, offset: 29929},
																expr: &charClassMatcher{
																	pos:        position{line: 947, col: 56, offset: 29929},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 945, col: 32, offset: 29864},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 73, col: 11, offset: 1846},
											name: "DocumentFragment",
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2890, col: 8, offset: 95285},
							expr: &anyMatcher{
								line: 2890, col: 9, offset: 95286,
							},
						},
					},
				},
			},
		},
		{
			name: "BlockAttributes",
			pos:  position{line: 149, col: 1, offset: 4389},
			expr: &actionExpr{
				pos: position{line: 150, col: 5, offset: 4412},
				run: (*parser).callonBlockAttributes1,
				expr: &labeledExpr{
					pos:   position{line: 150, col: 5, offset: 4412},
					label: "attributes",
					expr: &oneOrMoreExpr{
						pos: position{line: 150, col: 16, offset: 4423},
						expr: &choiceExpr{
							pos: position{line: 152, col: 9, offset: 4490},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 152, col: 10, offset: 4491},
									run: (*parser).callonBlockAttributes5,
									expr: &seqExpr{
										pos: position{line: 152, col: 10, offset: 4491},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 152, col: 10, offset: 4491},
												label: "anchor",
												expr: &actionExpr{
													pos: position{line: 184, col: 4, offset: 5334},
													run: (*parser).callonBlockAttributes8,
													expr: &seqExpr{
														pos: position{line: 184, col: 4, offset: 5334},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 184, col: 4, offset: 5334},
																val:        "[[",
																ignoreCase: false,
																want:       "\"[[\"",
															},
															&labeledExpr{
																pos:   position{line: 185, col: 5, offset: 5344},
																label: "id",
																expr: &actionExpr{
																	pos: position{line: 186, col: 9, offset: 5357},
																	run: (*parser).callonBlockAttributes12,
																	expr: &labeledExpr{
																		pos:   position{line: 186, col: 9, offset: 5357},
																		label: "elements",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 186, col: 18, offset: 5366},
																			expr: &choiceExpr{
																				pos: position{line: 187, col: 13, offset: 5380},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 187, col: 14, offset: 5381},
																						run: (*parser).callonBlockAttributes16,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 187, col: 14, offset: 5381},
																							expr: &charClassMatcher{
																								pos:        position{line: 187, col: 14, offset: 5381},
																								val:        "[^=\\r\\n�{]]",
																								chars:      []rune{'=', '\r', '\n', '�', '{', ']'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 947, col: 23, offset: 29896},
																						run: (*parser).callonBlockAttributes19,
																						expr: &seqExpr{
																							pos: position{line: 947, col: 23, offset: 29896},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 945, col: 32, offset: 29864},
																									val:        "�",
																									ignoreCase: false,
																									want:       "\"�\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 947, col: 51, offset: 29924},
																									label: "ref",
																									expr: &actionExpr{
																										pos: position{line: 947, col: 56, offset: 29929},
																										run: (*parser).callonBlockAttributes23,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 947, col: 56, offset: 29929},
																											expr: &charClassMatcher{
																												pos:        position{line: 947, col: 56, offset: 29929},
																												val:        "[0-9]",
																												ranges:     []rune{'0', '9'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 945, col: 32, offset: 29864},
																									val:        "�",
																									ignoreCase: false,
																									want:       "\"�\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 449, col: 5, offset: 14443},
																						run: (*parser).callonBlockAttributes27,
																						expr: &seqExpr{
																							pos: position{line: 449, col: 5, offset: 14443},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 449, col: 5, offset: 14443},
																									run: (*parser).callonBlockAttributes29,
																								},
																								&labeledExpr{
																									pos:   position{line: 452, col: 5, offset: 14507},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 452, col: 14, offset: 14516},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 463, col: 25, offset: 14978},
																												run: (*parser).callonBlockAttributes32,
																												expr: &seqExpr{
																													pos: position{line: 463, col: 25, offset: 14978},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 463, col: 25, offset: 14978},
																															val:        "{counter:",
																															ignoreCase: false,
																															want:       "\"{counter:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 463, col: 37, offset: 14990},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 118, col: 18, offset: 3399},
																																run: (*parser).callonBlockAttributes36,
																																expr: &seqExpr{
																																	pos: position{line: 118, col: 18, offset: 3399},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 118, col: 18, offset: 3399},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 118, col: 28, offset: 3409},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 118, col: 29, offset: 3410},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 463, col: 56, offset: 15009},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 463, col: 62, offset: 15015},
																																expr: &actionExpr{
																																	pos: position{line: 471, col: 17, offset: 15278},
																																	run: (*parser).callonBlockAttributes43,
																																	expr: &seqExpr{
																																		pos: position{line: 471, col: 17, offset: 15278},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 471, col: 17, offset: 15278},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 471, col: 21, offset: 15282},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 471, col: 28, offset: 15289},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 471, col: 28, offset: 15289},
																																							run: (*parser).callonBlockAttributes48,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 471, col: 28, offset: 15289},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 473, col: 9, offset: 15343},
																																							run: (*parser).callonBlockAttributes50,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 473, col: 9, offset: 15343},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 473, col: 9, offset: 15343},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 463, col: 78, offset: 15031},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 467, col: 25, offset: 15133},
																												run: (*parser).callonBlockAttributes54,
																												expr: &seqExpr{
																													pos: position{line: 467, col: 25, offset: 15133},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 467, col: 25, offset: 15133},
																															val:        "{counter2:",
																															ignoreCase: false,
																															want:       "\"{counter2:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 467, col: 38, offset: 15146},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 118, col: 18, offset: 3399},
																																run: (*parser).callonBlockAttributes58,
																																expr: &seqExpr{
																																	pos: position{line: 118, col: 18, offset: 3399},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 118, col: 18, offset: 3399},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 118, col: 28, offset: 3409},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 118, col: 29, offset: 3410},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 467, col: 57, offset: 15165},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 467, col: 63, offset: 15171},
																																expr: &actionExpr{
																																	pos: position{line: 471, col: 17, offset: 15278},
																																	run: (*parser).callonBlockAttributes65,
																																	expr: &seqExpr{
																																		pos: position{line: 471, col: 17, offset: 15278},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 471, col: 17, offset: 15278},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 471, col: 21, offset: 15282},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 471, col: 28, offset: 15289},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 471, col: 28, offset: 15289},
																																							run: (*parser).callonBlockAttributes70,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 471, col: 28, offset: 15289},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 473, col: 9, offset: 15343},
																																							run: (*parser).callonBlockAttributes72,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 473, col: 9, offset: 15343},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 473, col: 9, offset: 15343},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 467, col: 79, offset: 15187},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 456, col: 31, offset: 14633},
																												run: (*parser).callonBlockAttributes76,
																												expr: &seqExpr{
																													pos: position{line: 456, col: 31, offset: 14633},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 456, col: 31, offset: 14633},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 456, col: 35, offset: 14637},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 118, col: 18, offset: 3399},
																																run: (*parser).callonBlockAttributes80,
																																expr: &seqExpr{
																																	pos: position{line: 118, col: 18, offset: 3399},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 118, col: 18, offset: 3399},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 118, col: 28, offset: 3409},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 118, col: 29, offset: 3410},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 456, col: 54, offset: 14656},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 192, col: 16, offset: 5617},
																						run: (*parser).callonBlockAttributes86,
																						expr: &litMatcher{
																							pos:        position{line: 192, col: 16, offset: 5617},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 198, col: 5, offset: 5803},
																val:        "]]",
																ignoreCase: false,
																want:       "\"]]\"",
															},
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 152, col: 35, offset: 4516},
												expr: &choiceExpr{
													pos: position{line: 2878, col: 10, offset: 95044},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2878, col: 10, offset: 95044},
															val:        " ",
															ignoreCase: false,
															want:       "\" \"",
														},
														&actionExpr{
															pos: position{line: 2878, col: 16, offset: 95050},
															run: (*parser).callonBlockAttributes92,
															expr: &litMatcher{
																pos:        position{line: 2878, col: 16, offset: 95050},
																val:        "\t",
																ignoreCase: false,
																want:       "\"\\t\"",
															},
														},
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2893, col: 8, offset: 95335},
												alternatives: []interface{}{
													&notExpr{
														pos: position{line: 2890, col: 8, offset: 95285},
														expr: &anyMatcher{
															line: 2890, col: 9, offset: 95286,
														},
													},
													&litMatcher{
														pos:        position{line: 2886, col: 12, offset: 95178},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
													&litMatcher{
														pos:        position{line: 2886, col: 19, offset: 95185},
														val:        "\r\n",
														ignoreCase: false,
														want:       "\"\\r\\n\"",
													},
													&actionExpr{
														pos: position{line: 2886, col: 28, offset: 95194},
														run: (*parser).callonBlockAttributes99,
														expr: &litMatcher{
															pos:        position{line: 2886, col: 28, offset: 95194},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 156, col: 12, offset: 4637},
									run: (*parser).callonBlockAttributes101,
									expr: &seqExpr{
										pos: position{line: 156, col: 12, offset: 4637},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 156, col: 12, offset: 4637},
												label: "title",
												expr: &actionExpr{
													pos: position{line: 203, col: 19, offset: 5922},
													run: (*parser).callonBlockAttributes104,
													expr: &seqExpr{
														pos: position{line: 203, col: 19, offset: 5922},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 203, col: 19, offset: 5922},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
															&labeledExpr{
																pos:   position{line: 203, col: 23, offset: 5926},
																label: "title",
																expr: &actionExpr{
																	pos: position{line: 204, col: 5, offset: 5938},
																	run: (*parser).callonBlockAttributes108,
																	expr: &seqExpr{
																		pos: position{line: 204, col: 5, offset: 5938},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 204, col: 5, offset: 5938},
																				expr: &charClassMatcher{
																					pos:        position{line: 204, col: 6, offset: 5939},
																					val:        "[. ]",
																					chars:      []rune{'.', ' '},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 205, col: 5, offset: 6051},
																				label: "elements",
																				expr: &oneOrMoreExpr{
																					pos: position{line: 205, col: 14, offset: 6060},
																					expr: &choiceExpr{
																						pos: position{line: 206, col: 9, offset: 6070},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 206, col: 10, offset: 6071},
																								run: (*parser).callonBlockAttributes115,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 206, col: 10, offset: 6071},
																									expr: &charClassMatcher{
																										pos:        position{line: 206, col: 10, offset: 6071},
																										val:        "[^\\r\\n�{]",
																										chars:      []rune{'\r', '\n', '�', '{'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 947, col: 23, offset: 29896},
																								run: (*parser).callonBlockAttributes118,
																								expr: &seqExpr{
																									pos: position{line: 947, col: 23, offset: 29896},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 945, col: 32, offset: 29864},
																											val:        "�",
																											ignoreCase: false,
																											want:       "\"�\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 947, col: 51, offset: 29924},
																											label: "ref",
																											expr: &actionExpr{
																												pos: position{line: 947, col: 56, offset: 29929},
																												run: (*parser).callonBlockAttributes122,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 947, col: 56, offset: 29929},
																													expr: &charClassMatcher{
																														pos:        position{line: 947, col: 56, offset: 29929},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 945, col: 32, offset: 29864},
																											val:        "�",
																											ignoreCase: false,
																											want:       "\"�\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 449, col: 5, offset: 14443},
																								run: (*parser).callonBlockAttributes126,
																								expr: &seqExpr{
																									pos: position{line: 449, col: 5, offset: 14443},
																									exprs: []interface{}{
																										&andCodeExpr{
																											pos: position{line: 449, col: 5, offset: 14443},
																											run: (*parser).callonBlockAttributes128,
																										},
																										&labeledExpr{
																											pos:   position{line: 452, col: 5, offset: 14507},
																											label: "element",
																											expr: &choiceExpr{
																												pos: position{line: 452, col: 14, offset: 14516},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 463, col: 25, offset: 14978},
																														run: (*parser).callonBlockAttributes131,
																														expr: &seqExpr{
																															pos: position{line: 463, col: 25, offset: 14978},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 463, col: 25, offset: 14978},
																																	val:        "{counter:",
																																	ignoreCase: false,
																																	want:       "\"{counter:\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 463, col: 37, offset: 14990},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 118, col: 18, offset: 3399},
																																		run: (*parser).callonBlockAttributes135,
																																		expr: &seqExpr{
																																			pos: position{line: 118, col: 18, offset: 3399},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 118, col: 18, offset: 3399},
																																					val:        "[_0-9\\pL]",
																																					chars:      []rune{'_'},
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 118, col: 28, offset: 3409},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 118, col: 29, offset: 3410},
																																						val:        "[-0-9\\pL]",
																																						chars:      []rune{'-'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 463, col: 56, offset: 15009},
																																	label: "start",
																																	expr: &zeroOrOneExpr{
																																		pos: position{line: 463, col: 62, offset: 15015},
																																		expr: &actionExpr{
																																			pos: position{line: 471, col: 17, offset: 15278},
																																			run: (*parser).callonBlockAttributes142,
																																			expr: &seqExpr{
																																				pos: position{line: 471, col: 17, offset: 15278},
																																				exprs: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 471, col: 17, offset: 15278},
																																						val:        ":",
																																						ignoreCase: false,
																																						want:       "\":\"",
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 471, col: 21, offset: 15282},
																																						label: "start",
																																						expr: &choiceExpr{
																																							pos: position{line: 471, col: 28, offset: 15289},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 471, col: 28, offset: 15289},
																																									run: (*parser).callonBlockAttributes147,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 471, col: 28, offset: 15289},
																																										val:        "[A-Za-z]",
																																										ranges:     []rune{'A', 'Z', 'a', 'z'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 473, col: 9, offset: 15343},
																																									run: (*parser).callonBlockAttributes149,
																																									expr: &oneOrMoreExpr{
																																										pos: position{line: 473, col: 9, offset: 15343},
																																										expr: &charClassMatcher{
																																											pos:        position{line: 473, col: 9, offset: 15343},
																																											val:        "[0-9]",
																																											ranges:     []rune{'0', '9'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 463, col: 78, offset: 15031},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 467, col: 25, offset: 15133},
																														run: (*parser).callonBlockAttributes153,
																														expr: &seqExpr{
																															pos: position{line: 467, col: 25, offset: 15133},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 467, col: 25, offset: 15133},
																																	val:        "{counter2:",
																																	ignoreCase: false,
																																	want:       "\"{counter2:\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 467, col: 38, offset: 15146},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 118, col: 18, offset: 3399},
																																		run: (*parser).callonBlockAttributes157,
																																		expr: &seqExpr{
																																			pos: position{line: 118, col: 18, offset: 3399},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 118, col: 18, offset: 3399},
																																					val:        "[_0-9\\pL]",
																																					chars:      []rune{'_'},
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 118, col: 28, offset: 3409},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 118, col: 29, offset: 3410},
																																						val:        "[-0-9\\pL]",
																																						chars:      []rune{'-'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 467, col: 57, offset: 15165},
																																	label: "start",
																																	expr: &zeroOrOneExpr{
																																		pos: position{line: 467, col: 63, offset: 15171},
																																		expr: &actionExpr{
																																			pos: position{line: 471, col: 17, offset: 15278},
																																			run: (*parser).callonBlockAttributes164,
																																			expr: &seqExpr{
																																				pos: position{line: 471, col: 17, offset: 15278},
																																				exprs: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 471, col: 17, offset: 15278},
																																						val:        ":",
																																						ignoreCase: false,
																																						want:       "\":\"",
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 471, col: 21, offset: 15282},
																																						label: "start",
																																						expr: &choiceExpr{
																																							pos: position{line: 471, col: 28, offset: 15289},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 471, col: 28, offset: 15289},
																																									run: (*parser).callonBlockAttributes169,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 471, col: 28, offset: 15289},
																																										val:        "[A-Za-z]",
																																										ranges:     []rune{'A', 'Z', 'a', 'z'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 473, col: 9, offset: 15343},
																																									run: (*parser).callonBlockAttributes171,
																																									expr: &oneOrMoreExpr{
																																										pos: position{line: 473, col: 9, offset: 15343},
																																										expr: &charClassMatcher{
																																											pos:        position{line: 473, col: 9, offset: 15343},
																																											val:        "[0-9]",
																																											ranges:     []rune{'0', '9'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 467, col: 79, offset: 15187},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 456, col: 31, offset: 14633},
																														run: (*parser).callonBlockAttributes175,
																														expr: &seqExpr{
																															pos: position{line: 456, col: 31, offset: 14633},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 456, col: 31, offset: 14633},
																																	val:        "{",
																																	ignoreCase: false,
																																	want:       "\"{\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 456, col: 35, offset: 14637},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 118, col: 18, offset: 3399},
																																		run: (*parser).callonBlockAttributes179,
																																		expr: &seqExpr{
																																			pos: position{line: 118, col: 18, offset: 3399},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 118, col: 18, offset: 3399},
																																					val:        "[_0-9\\pL]",
																																					chars:      []rune{'_'},
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 118, col: 28, offset: 3409},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 118, col: 29, offset: 3410},
																																						val:        "[-0-9\\pL]",
																																						chars:      []rune{'-'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 456, col: 54, offset: 14656},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 211, col: 12, offset: 6230},
																								run: (*parser).callonBlockAttributes185,
																								expr: &litMatcher{
																									pos:        position{line: 211, col: 12, offset: 6230},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 156, col: 35, offset: 4660},
												expr: &choiceExpr{
													pos: position{line: 2878, col: 10, offset: 95044},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2878, col: 10, offset: 95044},
															val:        " ",
															ignoreCase: false,
															want:       "\" \"",
														},
														&actionExpr{
															pos: position{line: 2878, col: 16, offset: 95050},
															run: (*parser).callonBlockAttributes190,
															expr: &litMatcher{
																pos:        position{line: 2878, col: 16, offset: 95050},
																val:        "\t",
																ignoreCase: false,
																want:       "\"\\t\"",
															},
														},
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2893, col: 8, offset: 95335},
												alternatives: []interface{}{
													&notExpr{
														pos: position{line: 2890, col: 8, offset: 95285},
														expr: &anyMatcher{
															line: 2890, col: 9, offset: 95286,
														},
													},
													&litMatcher{
														pos:        position{line: 2886, col: 12, offset: 95178},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
													&litMatcher{
														pos:        position{line: 2886, col: 19, offset: 95185},
														val:        "\r\n",
														ignoreCase: false,
														want:       "\"\\r\\n\"",
													},
													&actionExpr{
														pos: position{line: 2886, col: 28, offset: 95194},
														run: (*parser).callonBlockAttributes197,
														expr: &litMatcher{
															pos:        position{line: 2886, col: 28, offset: 95194},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 160, col: 12, offset: 4751},
									run: (*parser).callonBlockAttributes199,
									expr: &seqExpr{
										pos: position{line: 160, col: 12, offset: 4751},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 160, col: 12, offset: 4751},
												label: "attributes",
												expr: &ruleRefExpr{
													pos:  position{line: 160, col: 24, offset: 4763},
													name: "LongHandAttributes",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 160, col: 44, offset: 4783},
												expr: &choiceExpr{
													pos: position{line: 2878, col: 10, offset: 95044},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2878, col: 10, offset: 95044},
															val:        " ",
															ignoreCase: false,
															want:       "\" \"",
														},
														&actionExpr{
															pos: position{line: 2878, col: 16, offset: 95050},
															run: (*parser).callonBlockAttributes206,
															expr: &litMatcher{
																pos:        position{line: 2878, col: 16, offset: 95050},
																val:        "\t",
																ignoreCase: false,
																want:       "\"\\t\"",
															},
														},
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2893, col: 8, offset: 95335},
												alternatives: []interface{}{
													&notExpr{
														pos: position{line: 2890, col: 8, offset: 95285},
														expr: &anyMatcher{
															line: 2890, col: 9, offset: 95286,
														},
													},
													&litMatcher{
														pos:        position{line: 2886, col: 12, offset: 95178},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
													&litMatcher{
														pos:        position{line: 2886, col: 19, offset: 95185},
														val:        "\r\n",
														ignoreCase: false,
														want:       "\"\\r\\n\"",
													},
													&actionExpr{
														pos: position{line: 2886, col: 28, offset: 95194},
														run: (*parser).callonBlockAttributes213,
														expr: &litMatcher{
															pos:        position{line: 2886, col: 28, offset: 95194},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 168, col: 1, offset: 4968},
			expr: &actionExpr{
				pos: position{line: 169, col: 5, offset: 4992},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 169, col: 5, offset: 4992},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 169, col: 5, offset: 4992},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 170, col: 5, offset: 5000},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 170, col: 16, offset: 5011},
								expr: &actionExpr{
									pos: position{line: 171, col: 9, offset: 5021},
									run: (*parser).callonInlineAttributes6,
									expr: &seqExpr{
										pos: position{line: 172, col: 13, offset: 5035},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 172, col: 13, offset: 5035},
												expr: &litMatcher{
													pos:        position{line: 172, col: 14, offset: 5036},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
											},
											&labeledExpr{
												pos:   position{line: 173, col: 13, offset: 5068},
												label: "attribute",
												expr: &choiceExpr{
													pos: position{line: 173, col: 24, offset: 5079},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 173, col: 24, offset: 5079},
															name: "PositionalAttribute",
														},
														&ruleRefExpr{
															pos:  position{line: 173, col: 46, offset: 5101},
															name: "NamedAttribute",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 178, col: 5, offset: 5184},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "LongHandAttributes",
			pos:  position{line: 222, col: 1, offset: 6630},
			expr: &actionExpr{
				pos: position{line: 223, col: 5, offset: 6656},
				run: (*parser).callonLongHandAttributes1,
				expr: &seqExpr{
					pos: position{line: 223, col: 5, offset: 6656},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 223, col: 5, offset: 6656},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&notExpr{
							pos: position{line: 223, col: 9, offset: 6660},
							expr: &litMatcher{
								pos:        position{line: 223, col: 10, offset: 6661},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 225, col: 5, offset: 6831},
							label: "firstPositionalAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 225, col: 31, offset: 6857},
								expr: &actionExpr{
									pos: position{line: 241, col: 5, offset: 7512},
									run: (*parser).callonLongHandAttributes8,
									expr: &seqExpr{
										pos: position{line: 241, col: 5, offset: 7512},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 241, col: 5, offset: 7512},
												label: "main",
												expr: &zeroOrOneExpr{
													pos: position{line: 241, col: 10, offset: 7517},
													expr: &actionExpr{
														pos: position{line: 273, col: 23, offset: 8327},
														run: (*parser).callonLongHandAttributes12,
														expr: &labeledExpr{
															pos:   position{line: 273, col: 23, offset: 8327},
															label: "value",
															expr: &choiceExpr{
																pos: position{line: 289, col: 5, offset: 8806},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 344, col: 5, offset: 10767},
																		run: (*parser).callonLongHandAttributes15,
																		expr: &seqExpr{
																			pos: position{line: 344, col: 5, offset: 10767},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 344, col: 5, offset: 10767},
																					val:        "'",
																					ignoreCase: false,
																					want:       "\"'\"",
																				},
																				&notExpr{
																					pos: position{line: 344, col: 9, offset: 10771},
																					expr: &litMatcher{
																						pos:        position{line: 344, col: 10, offset: 10772},
																						val:        "`",
																						ignoreCase: false,
																						want:       "\"`\"",
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 345, col: 5, offset: 10851},
																					label: "content",
																					expr: &actionExpr{
																						pos: position{line: 356, col: 5, offset: 11114},
																						run: (*parser).callonLongHandAttributes21,
																						expr: &labeledExpr{
																							pos:   position{line: 356, col: 5, offset: 11114},
																							label: "elements",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 356, col: 14, offset: 11123},
																								expr: &choiceExpr{
																									pos: position{line: 357, col: 9, offset: 11133},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2801, col: 14, offset: 92593},
																											run: (*parser).callonLongHandAttributes25,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 2801, col: 14, offset: 92593},
																												expr: &charClassMatcher{
																													pos:        position{line: 2801, col: 14, offset: 92593},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 2878, col: 10, offset: 95044},
																											val:        " ",
																											ignoreCase: false,
																											want:       "\" \"",
																										},
																										&actionExpr{
																											pos: position{line: 2878, col: 16, offset: 95050},
																											run: (*parser).callonLongHandAttributes29,
																											expr: &litMatcher{
																												pos:        position{line: 2878, col: 16, offset: 95050},
																												val:        "\t",
																												ignoreCase: false,
																												want:       "\"\\t\"",
																											},
																										},
																										&actionExpr{
																											pos: position{line: 449, col: 5, offset: 14443},
																											run: (*parser).callonLongHandAttributes31,
																											expr: &seqExpr{
																												pos: position{line: 449, col: 5, offset: 14443},
																												exprs: []interface{}{
																													&andCodeExpr{
																														pos: position{line: 449, col: 5, offset: 14443},
																														run: (*parser).callonLongHandAttributes33,
																													},
																													&labeledExpr{
																														pos:   position{line: 452, col: 5, offset: 14507},
																														label: "element",
																														expr: &choiceExpr{
																															pos: position{line: 452, col: 14, offset: 14516},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 463, col: 25, offset: 14978},
																																	run: (*parser).callonLongHandAttributes36,
																																	expr: &seqExpr{
																																		pos: position{line: 463, col: 25, offset: 14978},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 463, col: 25, offset: 14978},
																																				val:        "{counter:",
																																				ignoreCase: false,
																																				want:       "\"{counter:\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 463, col: 37, offset: 14990},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 118, col: 18, offset: 3399},
																																					run: (*parser).callonLongHandAttributes40,
																																					expr: &seqExpr{
																																						pos: position{line: 118, col: 18, offset: 3399},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 118, col: 18, offset: 3399},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 118, col: 28, offset: 3409},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 118, col: 29, offset: 3410},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 463, col: 56, offset: 15009},
																																				label: "start",
																																				expr: &zeroOrOneExpr{
																																					pos: position{line: 463, col: 62, offset: 15015},
																																					expr: &actionExpr{
																																						pos: position{line: 471, col: 17, offset: 15278},
																																						run: (*parser).callonLongHandAttributes47,
																																						expr: &seqExpr{
																																							pos: position{line: 471, col: 17, offset: 15278},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 471, col: 17, offset: 15278},
																																									val:        ":",
																																									ignoreCase: false,
																																									want:       "\":\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 471, col: 21, offset: 15282},
																																									label: "start",
																																									expr: &choiceExpr{
																																										pos: position{line: 471, col: 28, offset: 15289},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 471, col: 28, offset: 15289},
																																												run: (*parser).callonLongHandAttributes52,
																																												expr: &charClassMatcher{
																																													pos:        position{line: 471, col: 28, offset: 15289},
																																													val:        "[A-Za-z]",
																																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 473, col: 9, offset: 15343},
																																												run: (*parser).callonLongHandAttributes54,
																																												expr: &oneOrMoreExpr{
																																													pos: position{line: 473, col: 9, offset: 15343},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 473, col: 9, offset: 15343},
																																														val:        "[0-9]",
																																														ranges:     []rune{'0', '9'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 463, col: 78, offset: 15031},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 467, col: 25, offset: 15133},
																																	run: (*parser).callonLongHandAttributes58,
																																	expr: &seqExpr{
																																		pos: position{line: 467, col: 25, offset: 15133},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 467, col: 25, offset: 15133},
																																				val:        "{counter2:",
																																				ignoreCase: false,
																																				want:       "\"{counter2:\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 467, col: 38, offset: 15146},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 118, col: 18, offset: 3399},
																																					run: (*parser).callonLongHandAttributes62,
																																					expr: &seqExpr{
																																						pos: position{line: 118, col: 18, offset: 3399},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 118, col: 18, offset: 3399},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 118, col: 28, offset: 3409},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 118, col: 29, offset: 3410},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 467, col: 57, offset: 15165},
																																				label: "start",
																																				expr: &zeroOrOneExpr{
																																					pos: position{line: 467, col: 63, offset: 15171},
																																					expr: &actionExpr{
																																						pos: position{line: 471, col: 17, offset: 15278},
																																						run: (*parser).callonLongHandAttributes69,
																																						expr: &seqExpr{
																																							pos: position{line: 471, col: 17, offset: 15278},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 471, col: 17, offset: 15278},
																																									val:        ":",
																																									ignoreCase: false,
																																									want:       "\":\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 471, col: 21, offset: 15282},
																																									label: "start",
																																									expr: &choiceExpr{
																																										pos: position{line: 471, col: 28, offset: 15289},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 471, col: 28, offset: 15289},
																																												run: (*parser).callonLongHandAttributes74,
																																												expr: &charClassMatcher{
																																													pos:        position{line: 471, col: 28, offset: 15289},
																																													val:        "[A-Za-z]",
																																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 473, col: 9, offset: 15343},
																																												run: (*parser).callonLongHandAttributes76,
																																												expr: &oneOrMoreExpr{
																																													pos: position{line: 473, col: 9, offset: 15343},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 473, col: 9, offset: 15343},
																																														val:        "[0-9]",
																																														ranges:     []rune{'0', '9'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 467, col: 79, offset: 15187},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 456, col: 31, offset: 14633},
																																	run: (*parser).callonLongHandAttributes80,
																																	expr: &seqExpr{
																																		pos: position{line: 456, col: 31, offset: 14633},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 456, col: 31, offset: 14633},
																																				val:        "{",
																																				ignoreCase: false,
																																				want:       "\"{\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 456, col: 35, offset: 14637},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 118, col: 18, offset: 3399},
																																					run: (*parser).callonLongHandAttributes84,
																																					expr: &seqExpr{
																																						pos: position{line: 118, col: 18, offset: 3399},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 118, col: 18, offset: 3399},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 118, col: 28, offset: 3409},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 118, col: 29, offset: 3410},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 456, col: 54, offset: 14656},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 360, col: 12, offset: 11202},
																											run: (*parser).callonLongHandAttributes90,
																											expr: &litMatcher{
																												pos:        position{line: 360, col: 12, offset: 11202},
																												val:        "\\'",
																												ignoreCase: false,
																												want:       "\"\\\\'\"",
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 363, col: 13, offset: 11304},
																											val:        "'`",
																											ignoreCase: false,
																											want:       "\"'`\"",
																										},
																										&litMatcher{
																											pos:        position{line: 363, col: 20, offset: 11311},
																											val:        "`'",
																											ignoreCase: false,
																											want:       "\"`'\"",
																										},
																										&actionExpr{
																											pos: position{line: 363, col: 27, offset: 11318},
																											run: (*parser).callonLongHandAttributes94,
																											expr: &litMatcher{
																												pos:        position{line: 363, col: 27, offset: 11318},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																										},
																										&actionExpr{
																											pos: position{line: 366, col: 12, offset: 11478},
																											run: (*parser).callonLongHandAttributes96,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 366, col: 12, offset: 11478},
																												expr: &charClassMatcher{
																													pos:        position{line: 366, col: 12, offset: 11478},
																													val:        "[^\\r\\n\\\\\\ ]",
																													chars:      []rune{'\r', '\n', '\\', '\'', ' '},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 346, col: 5, offset: 10902},
																					val:        "'",
																					ignoreCase: false,
																					want:       "\"'\"",
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 374, col: 5, offset: 11713},
																		run: (*parser).callonLongHandAttributes100,
																		expr: &seqExpr{
																			pos: position{line: 374, col: 5, offset: 11713},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 374, col: 5, offset: 11713},
																					val:        "\"",
																					ignoreCase: false,
																					want:       "\"\\\"\"",
																				},
																				&notExpr{
																					pos: position{line: 374, col: 10, offset: 11718},
																					expr: &litMatcher{
																						pos:        position{line: 374, col: 11, offset: 11719},
																						val:        "`",
																						ignoreCase: false,
																						want:       "\"`\"",
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 375, col: 5, offset: 11798},
																					label: "content",
																					expr: &actionExpr{
																						pos: position{line: 385, col: 5, offset: 12078},
																						run: (*parser).callonLongHandAttributes106,
																						expr: &labeledExpr{
																							pos:   position{line: 385, col: 5, offset: 12078},
																							label: "elements",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 385, col: 14, offset: 12087},
																								expr: &choiceExpr{
																									pos: position{line: 386, col: 9, offset: 12097},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2801, col: 14, offset: 92593},
																											run: (*parser).callonLongHandAttributes110,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 2801, col: 14, offset: 92593},
																												expr: &charClassMatcher{
																													pos:        position{line: 2801, col: 14, offset: 92593},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 2878, col: 10, offset: 95044},
																											val:        " ",
																											ignoreCase: false,
																											want:       "\" \"",
																										},
																										&actionExpr{
																											pos: position{line: 2878, col: 16, offset: 95050},
																											run: (*parser).callonLongHandAttributes114,
																											expr: &litMatcher{
																												pos:        position{line: 2878, col: 16, offset: 95050},
																												val:        "\t",
																												ignoreCase: false,
																												want:       "\"\\t\"",
																											},
																										},
																										&actionExpr{
																											pos: position{line: 449, col: 5, offset: 14443},
																											run: (*parser).callonLongHandAttributes116,
																											expr: &seqExpr{
																												pos: position{line: 449, col: 5, offset: 14443},
																												exprs: []interface{}{
																													&andCodeExpr{
																														pos: position{line: 449, col: 5, offset: 14443},
																														run: (*parser).callonLongHandAttributes118,
																													},
																													&labeledExpr{
																														pos:   position{line: 452, col: 5, offset: 14507},
																														label: "element",
																														expr: &choiceExpr{
																															pos: position{line: 452, col: 14, offset: 14516},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 463, col: 25, offset: 14978},
																																	run: (*parser).callonLongHandAttributes121,
																																	expr: &seqExpr{
																																		pos: position{line: 463, col: 25, offset: 14978},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 463, col: 25, offset: 14978},
																																				val:        "{counter:",
																																				ignoreCase: false,
																																				want:       "\"{counter:\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 463, col: 37, offset: 14990},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 118, col: 18, offset: 3399},
																																					run: (*parser).callonLongHandAttributes125,
																																					expr: &seqExpr{
																																						pos: position{line: 118, col: 18, offset: 3399},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 118, col: 18, offset: 3399},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 118, col: 28, offset: 3409},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 118, col: 29, offset: 3410},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 463, col: 56, offset: 15009},
																																				label: "start",
																																				expr: &zeroOrOneExpr{
																																					pos: position{line: 463, col: 62, offset: 15015},
																																					expr: &actionExpr{
																																						pos: position{line: 471, col: 17, offset: 15278},
																																						run: (*parser).callonLongHandAttributes132,
																																						expr: &seqExpr{
																																							pos: position{line: 471, col: 17, offset: 15278},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 471, col: 17, offset: 15278},
																																									val:        ":",
																																									ignoreCase: false,
																																									want:       "\":\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 471, col: 21, offset: 15282},
																																									label: "start",
																																									expr: &choiceExpr{
																																										pos: position{line: 471, col: 28, offset: 15289},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 471, col: 28, offset: 15289},
																																												run: (*parser).callonLongHandAttributes137,
																																												expr: &charClassMatcher{
																																													pos:        position{line: 471, col: 28, offset: 15289},
																																													val:        "[A-Za-z]",
																																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 473, col: 9, offset: 15343},
																																												run: (*parser).callonLongHandAttributes139,
																																												expr: &oneOrMoreExpr{
																																													pos: position{line: 473, col: 9, offset: 15343},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 473, col: 9, offset: 15343},
																																														val:        "[0-9]",
																																														ranges:     []rune{'0', '9'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 463, col: 78, offset: 15031},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 467, col: 25, offset: 15133},
																																	run: (*parser).callonLongHandAttributes143,
																																	expr: &seqExpr{
																																		pos: position{line: 467, col: 25, offset: 15133},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 467, col: 25, offset: 15133},
																																				val:        "{counter2:",
																																				ignoreCase: false,
																																				want:       "\"{counter2:\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 467, col: 38, offset: 15146},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 118, col: 18, offset: 3399},
																																					run: (*parser).callonLongHandAttributes147,
																																					expr: &seqExpr{
																																						pos: position{line: 118, col: 18, offset: 3399},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 118, col: 18, offset: 3399},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 118, col: 28, offset: 3409},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 118, col: 29, offset: 3410},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 467, col: 57, offset: 15165},
																																				label: "start",
																																				expr: &zeroOrOneExpr{
																																					pos: position{line: 467, col: 63, offset: 15171},
																																					expr: &actionExpr{
																																						pos: position{line: 471, col: 17, offset: 15278},
																																						run: (*parser).callonLongHandAttributes154,
																																						expr: &seqExpr{
																																							pos: position{line: 471, col: 17, offset: 15278},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 471, col: 17, offset: 15278},
																																									val:        ":",
																																									ignoreCase: false,
																																									want:       "\":\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 471, col: 21, offset: 15282},
																																									label: "start",
																																									expr: &choiceExpr{
																																										pos: position{line: 471, col: 28, offset: 15289},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 471, col: 28, offset: 15289},
																																												run: (*parser).callonLongHandAttributes159,
																																												expr: &charClassMatcher{
																																													pos:        position{line: 471, col: 28, offset: 15289},
																																													val:        "[A-Za-z]",
																																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 473, col: 9, offset: 15343},
																																												run: (*parser).callonLongHandAttributes161,
																																												expr: &oneOrMoreExpr{
																																													pos: position{line: 473, col: 9, offset: 15343},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 473, col: 9, offset: 15343},
																																														val:        "[0-9]",
																																														ranges:     []rune{'0', '9'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 467, col: 79, offset: 15187},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 456, col: 31, offset: 14633},
																																	run: (*parser).callonLongHandAttributes165,
																																	expr: &seqExpr{
																																		pos: position{line: 456, col: 31, offset: 14633},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 456, col: 31, offset: 14633},
																																				val:        "{",
																																				ignoreCase: false,
																																				want:       "\"{\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 456, col: 35, offset: 14637},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 118, col: 18, offset: 3399},
																																					run: (*parser).callonLongHandAttributes169,
																																					expr: &seqExpr{
																																						pos: position{line: 118, col: 18, offset: 3399},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 118, col: 18, offset: 3399},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 118, col: 28, offset: 3409},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 118, col: 29, offset: 3410},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 456, col: 54, offset: 14656},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 389, col: 12, offset: 12166},
																											run: (*parser).callonLongHandAttributes175,
																											expr: &litMatcher{
																												pos:        position{line: 389, col: 12, offset: 12166},
																												val:        "\\\"",
																												ignoreCase: false,
																												want:       "\"\\\\\\\"\"",
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 392, col: 13, offset: 12268},
																											val:        "\"`",
																											ignoreCase: false,
																											want:       "\"\\\"`\"",
																										},
																										&litMatcher{
																											pos:        position{line: 392, col: 21, offset: 12276},
																											val:        "`\"",
																											ignoreCase: false,
																											want:       "\"`\\\"\"",
																										},
																										&litMatcher{
																											pos:        position{line: 392, col: 29, offset: 12284},
																											val:        "\\",
																											ignoreCase: false,
																											want:       "\"\\\\\"",
																										},
																										&actionExpr{
																											pos: position{line: 392, col: 35, offset: 12290},
																											run: (*parser).callonLongHandAttributes180,
																											expr: &litMatcher{
																												pos:        position{line: 392, col: 35, offset: 12290},
																												val:        "`",
																												ignoreCase: false,
																												want:       "\"`\"",
																											},
																										},
																										&actionExpr{
																											pos: position{line: 395, col: 12, offset: 12473},
																											run: (*parser).callonLongHandAttributes182,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 395, col: 12, offset: 12473},
																												expr: &charClassMatcher{
																													pos:        position{line: 395, col: 12, offset: 12473},
																													val:        "[^\\r\\n\\\\\"` ]",
																													chars:      []rune{'\r', '\n', '\\', '"', '`', ' '},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 376, col: 5, offset: 11849},
																					val:        "\"",
																					ignoreCase: false,
																					want:       "\"\\\"\"",
																				},
																				&andExpr{
																					pos: position{line: 376, col: 10, offset: 11854},
																					expr: &notExpr{
																						pos: position{line: 376, col: 12, offset: 11856},
																						expr: &seqExpr{
																							pos: position{line: 376, col: 14, offset: 11858},
																							exprs: []interface{}{
																								&zeroOrMoreExpr{
																									pos: position{line: 376, col: 14, offset: 11858},
																									expr: &choiceExpr{
																										pos: position{line: 2878, col: 10, offset: 95044},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2878, col: 10, offset: 95044},
																												val:        " ",
																												ignoreCase: false,
																												want:       "\" \"",
																											},
																											&actionExpr{
																												pos: position{line: 2878, col: 16, offset: 95050},
																												run: (*parser).callonLongHandAttributes192,
																												expr: &litMatcher{
																													pos:        position{line: 2878, col: 16, offset: 95050},
																													val:        "\t",
																													ignoreCase: false,
																													want:       "\"\\t\"",
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 376, col: 21, offset: 11865},
																									val:        "=",
																									ignoreCase: false,
																									want:       "\"=\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 291, col: 7, offset: 8880},
																		run: (*parser).callonLongHandAttributes195,
																		expr: &seqExpr{
																			pos: position{line: 291, col: 7, offset: 8880},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 291, col: 7, offset: 8880},
																					label: "elements",
																					expr: &oneOrMoreExpr{
																						pos: position{line: 291, col: 16, offset: 8889},
																						expr: &choiceExpr{
																							pos: position{line: 294, col: 9, offset: 9071},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 294, col: 10, offset: 9072},
																									run: (*parser).callonLongHandAttributes200,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 294, col: 10, offset: 9072},
																										expr: &charClassMatcher{
																											pos:        position{line: 294, col: 10, offset: 9072},
																											val:        "[^,=.%# \\r\\n�{]]",
																											chars:      []rune{',', '=', '.', '%', '#', ' ', '\r', '\n', '�', '{', ']'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 947, col: 23, offset: 29896},
																									run: (*parser).callonLongHandAttributes203,
																									expr: &seqExpr{
																										pos: position{line: 947, col: 23, offset: 29896},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 945, col: 32, offset: 29864},
																												val:        "�",
																												ignoreCase: false,
																												want:       "\"�\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 947, col: 51, offset: 29924},
																												label: "ref",
																												expr: &actionExpr{
																													pos: position{line: 947, col: 56, offset: 29929},
																													run: (*parser).callonLongHandAttributes207,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 947, col: 56, offset: 29929},
																														expr: &charClassMatcher{
																															pos:        position{line: 947, col: 56, offset: 29929},
																															val:        "[0-9]",
																															ranges:     []rune{'0', '9'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 945, col: 32, offset: 29864},
																												val:        "�",
																												ignoreCase: false,
																												want:       "\"�\"",
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 449, col: 5, offset: 14443},
																									run: (*parser).callonLongHandAttributes211,
																									expr: &seqExpr{
																										pos: position{line: 449, col: 5, offset: 14443},
																										exprs: []interface{}{
																											&andCodeExpr{
																												pos: position{line: 449, col: 5, offset: 14443},
																												run: (*parser).callonLongHandAttributes213,
																											},
																											&labeledExpr{
																												pos:   position{line: 452, col: 5, offset: 14507},
																												label: "element",
																												expr: &choiceExpr{
																													pos: position{line: 452, col: 14, offset: 14516},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 463, col: 25, offset: 14978},
																															run: (*parser).callonLongHandAttributes216,
																															expr: &seqExpr{
																																pos: position{line: 463, col: 25, offset: 14978},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 463, col: 25, offset: 14978},
																																		val:        "{counter:",
																																		ignoreCase: false,
																																		want:       "\"{counter:\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 463, col: 37, offset: 14990},
																																		label: "name",
																																		expr: &actionExpr{
																																			pos: position{line: 118, col: 18, offset: 3399},
																																			run: (*parser).callonLongHandAttributes220,
																																			expr: &seqExpr{
																																				pos: position{line: 118, col: 18, offset: 3399},
																																				exprs: []interface{}{
																																					&charClassMatcher{
																																						pos:        position{line: 118, col: 18, offset: 3399},
																																						val:        "[_0-9\\pL]",
																																						chars:      []rune{'_'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																					&zeroOrMoreExpr{
																																						pos: position{line: 118, col: 28, offset: 3409},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 118, col: 29, offset: 3410},
																																							val:        "[-0-9\\pL]",
																																							chars:      []rune{'-'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 463, col: 56, offset: 15009},
																																		label: "start",
																																		expr: &zeroOrOneExpr{
																																			pos: position{line: 463, col: 62, offset: 15015},
																																			expr: &actionExpr{
																																				pos: position{line: 471, col: 17, offset: 15278},
																																				run: (*parser).callonLongHandAttributes227,
																																				expr: &seqExpr{
																																					pos: position{line: 471, col: 17, offset: 15278},
																																					exprs: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 471, col: 17, offset: 15278},
																																							val:        ":",
																																							ignoreCase: false,
																																							want:       "\":\"",
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 471, col: 21, offset: 15282},
																																							label: "start",
																																							expr: &choiceExpr{
																																								pos: position{line: 471, col: 28, offset: 15289},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 471, col: 28, offset: 15289},
																																										run: (*parser).callonLongHandAttributes232,
																																										expr: &charClassMatcher{
																																											pos:        position{line: 471, col: 28, offset: 15289},
																																											val:        "[A-Za-z]",
																																											ranges:     []rune{'A', 'Z', 'a', 'z'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																									&actionExpr{
																																										pos: position{line: 473, col: 9, offset: 15343},
																																										run: (*parser).callonLongHandAttributes234,
																																										expr: &oneOrMoreExpr{
																																											pos: position{line: 473, col: 9, offset: 15343},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 473, col: 9, offset: 15343},
																																												val:        "[0-9]",
																																												ranges:     []rune{'0', '9'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 463, col: 78, offset: 15031},
																																		val:        "}",
																																		ignoreCase: false,
																																		want:       "\"}\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 467, col: 25, offset: 15133},
																															run: (*parser).callonLongHandAttributes238,
																															expr: &seqExpr{
																																pos: position{line: 467, col: 25, offset: 15133},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 467, col: 25, offset: 15133},
																																		val:        "{counter2:",
																																		ignoreCase: false,
																																		want:       "\"{counter2:\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 467, col: 38, offset: 15146},
																																		label: "name",
																																		expr: &actionExpr{
																																			pos: position{line: 118, col: 18, offset: 3399},
																																			run: (*parser).callonLongHandAttributes242,
																																			expr: &seqExpr{
																																				pos: position{line: 118, col: 18, offset: 3399},
																																				exprs: []interface{}{
																																					&charClassMatcher{
																																						pos:        position{line: 118, col: 18, offset: 3399},
																																						val:        "[_0-9\\pL]",
																																						chars:      []rune{'_'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																					&zeroOrMoreExpr{
																																						pos: position{line: 118, col: 28, offset: 3409},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 118, col: 29, offset: 3410},
																																							val:        "[-0-9\\pL]",
																																							chars:      []rune{'-'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 467, col: 57, offset: 15165},
																																		label: "start",
																																		expr: &zeroOrOneExpr{
																																			pos: position{line: 467, col: 63, offset: 15171},
																																			expr: &actionExpr{
																																				pos: position{line: 471, col: 17, offset: 15278},
																																				run: (*parser).callonLongHandAttributes249,
																																				expr: &seqExpr{
																																					pos: position{line: 471, col: 17, offset: 15278},
																																					exprs: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 471, col: 17, offset: 15278},
																																							val:        ":",
																																							ignoreCase: false,
																																							want:       "\":\"",
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 471, col: 21, offset: 15282},
																																							label: "start",
																																							expr: &choiceExpr{
																																								pos: position{line: 471, col: 28, offset: 15289},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 471, col: 28, offset: 15289},
																																										run: (*parser).callonLongHandAttributes254,
																																										expr: &charClassMatcher{
																																											pos:        position{line: 471, col: 28, offset: 15289},
																																											val:        "[A-Za-z]",
																																											ranges:     []rune{'A', 'Z', 'a', 'z'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																									&actionExpr{
																																										pos: position{line: 473, col: 9, offset: 15343},
																																										run: (*parser).callonLongHandAttributes256,
																																										expr: &oneOrMoreExpr{
																																											pos: position{line: 473, col: 9, offset: 15343},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 473, col: 9, offset: 15343},
																																												val:        "[0-9]",
																																												ranges:     []rune{'0', '9'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 467, col: 79, offset: 15187},
																																		val:        "}",
																																		ignoreCase: false,
																																		want:       "\"}\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 456, col: 31, offset: 14633},
																															run: (*parser).callonLongHandAttributes260,
																															expr: &seqExpr{
																																pos: position{line: 456, col: 31, offset: 14633},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 456, col: 31, offset: 14633},
																																		val:        "{",
																																		ignoreCase: false,
																																		want:       "\"{\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 456, col: 35, offset: 14637},
																																		label: "name",
																																		expr: &actionExpr{
																																			pos: position{line: 118, col: 18, offset: 3399},
																																			run: (*parser).callonLongHandAttributes264,
																																			expr: &seqExpr{
																																				pos: position{line: 118, col: 18, offset: 3399},
																																				exprs: []interface{}{
																																					&charClassMatcher{
																																						pos:        position{line: 118, col: 18, offset: 3399},
																																						val:        "[_0-9\\pL]",
																																						chars:      []rune{'_'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																					&zeroOrMoreExpr{
																																						pos: position{line: 118, col: 28, offset: 3409},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 118, col: 29, offset: 3410},
																																							val:        "[-0-9\\pL]",
																																							chars:      []rune{'-'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 456, col: 54, offset: 14656},
																																		val:        "}",
																																		ignoreCase: false,
																																		want:       "\"}\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 300, col: 12, offset: 9260},
																									run: (*parser).callonLongHandAttributes270,
																									expr: &litMatcher{
																										pos:        position{line: 300, col: 12, offset: 9260},
																										val:        "{",
																										ignoreCase: false,
																										want:       "\"{\"",
																									},
																								},
																							},
																						},
																					},
																				},
																				&andExpr{
																					pos: position{line: 303, col: 8, offset: 9343},
																					expr: &notExpr{
																						pos: position{line: 303, col: 10, offset: 9345},
																						expr: &seqExpr{
																							pos: position{line: 303, col: 12, offset: 9347},
																							exprs: []interface{}{
																								&zeroOrMoreExpr{
																									pos: position{line: 303, col: 12, offset: 9347},
																									expr: &choiceExpr{
																										pos: position{line: 2878, col: 10, offset: 95044},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2878, col: 10, offset: 95044},
																												val:        " ",
																												ignoreCase: false,
																												want:       "\" \"",
																											},
																											&actionExpr{
																												pos: position{line: 2878, col: 16, offset: 95050},
																												run: (*parser).callonLongHandAttributes278,
																												expr: &litMatcher{
																													pos:        position{line: 2878, col: 16, offset: 95050},
																													val:        "\t",
																													ignoreCase: false,
																													want:       "\"\\t\"",
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 303, col: 19, offset: 9354},
																									val:        "=",
																									ignoreCase: false,
																									want:       "\"=\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 244, col: 5, offset: 7557},
												label: "extras",
												expr: &zeroOrMoreExpr{
													pos: position{line: 244, col: 12, offset: 7564},
													expr: &actionExpr{
														pos: position{line: 245, col: 9, offset: 7575},
														run: (*parser).callonLongHandAttributes283,
														expr: &seqExpr{
															pos: position{line: 245, col: 9, offset: 7575},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 245, col: 9, offset: 7575},
																	expr: &litMatcher{
																		pos:        position{line: 245, col: 10, offset: 7576},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																},
																&notExpr{
																	pos: position{line: 245, col: 14, offset: 7580},
																	expr: &litMatcher{
																		pos:        position{line: 245, col: 15, offset: 7581},
																		val:        "]",
																		ignoreCase: false,
																		want:       "\"]\"",
																	},
																},
																&labeledExpr{
																	pos:   position{line: 246, col: 9, offset: 7593},
																	label: "extra",
																	expr: &choiceExpr{
																		pos: position{line: 247, col: 13, offset: 7613},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 269, col: 25, offset: 8223},
																				run: (*parser).callonLongHandAttributes291,
																				expr: &seqExpr{
																					pos: position{line: 269, col: 25, offset: 8223},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 269, col: 25, offset: 8223},
																							val:        "#",
																							ignoreCase: false,
																							want:       "\"#\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 269, col: 29, offset: 8227},
																							label: "id",
																							expr: &choiceExpr{
																								pos: position{line: 289, col: 5, offset: 8806},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 344, col: 5, offset: 10767},
																										run: (*parser).callonLongHandAttributes296,
																										expr: &seqExpr{
																											pos: position{line: 344, col: 5, offset: 10767},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 344, col: 5, offset: 10767},
																													val:        "'",
																													ignoreCase: false,
																													want:       "\"'\"",
																												},
																												&notExpr{
																													pos: position{line: 344, col: 9, offset: 10771},
																													expr: &litMatcher{
																														pos:        position{line: 344, col: 10, offset: 10772},
																														val:        "`",
																														ignoreCase: false,
																														want:       "\"`\"",
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 345, col: 5, offset: 10851},
																													label: "content",
																													expr: &actionExpr{
																														pos: position{line: 356, col: 5, offset: 11114},
																														run: (*parser).callonLongHandAttributes302,
																														expr: &labeledExpr{
																															pos:   position{line: 356, col: 5, offset: 11114},
																															label: "elements",
																															expr: &oneOrMoreExpr{
																																pos: position{line: 356, col: 14, offset: 11123},
																																expr: &choiceExpr{
																																	pos: position{line: 357, col: 9, offset: 11133},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2801, col: 14, offset: 92593},
																																			run: (*parser).callonLongHandAttributes306,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 2801, col: 14, offset: 92593},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2801, col: 14, offset: 92593},
																																					val:        "[0-9\\pL]",
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2878, col: 10, offset: 95044},
																																			val:        " ",
																																			ignoreCase: false,
																																			want:       "\" \"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 2878, col: 16, offset: 95050},
																																			run: (*parser).callonLongHandAttributes310,
																																			expr: &litMatcher{
																																				pos:        position{line: 2878, col: 16, offset: 95050},
																																				val:        "\t",
																																				ignoreCase: false,
																																				want:       "\"\\t\"",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 449, col: 5, offset: 14443},
																																			run: (*parser).callonLongHandAttributes312,
																																			expr: &seqExpr{
																																				pos: position{line: 449, col: 5, offset: 14443},
																																				exprs: []interface{}{
																																					&andCodeExpr{
																																						pos: position{line: 449, col: 5, offset: 14443},
																																						run: (*parser).callonLongHandAttributes314,
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 452, col: 5, offset: 14507},
																																						label: "element",
																																						expr: &choiceExpr{
																																							pos: position{line: 452, col: 14, offset: 14516},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 463, col: 25, offset: 14978},
																																									run: (*parser).callonLongHandAttributes317,
																																									expr: &seqExpr{
																																										pos: position{line: 463, col: 25, offset: 14978},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 463, col: 25, offset: 14978},
																																												val:        "{counter:",
																																												ignoreCase: false,
																																												want:       "\"{counter:\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 463, col: 37, offset: 14990},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 118, col: 18, offset: 3399},
																																													run: (*parser).callonLongHandAttributes321,
																																													expr: &seqExpr{
																																														pos: position{line: 118, col: 18, offset: 3399},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 118, col: 18, offset: 3399},
																																																val:        "[_0-9\\pL]",
																																																chars:      []rune{'_'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 118, col: 28, offset: 3409},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 118, col: 29, offset: 3410},
																																																	val:        "[-0-9\\pL]",
																																																	chars:      []rune{'-'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 463, col: 56, offset: 15009},
																																												label: "start",
																																												expr: &zeroOrOneExpr{
																																													pos: position{line: 463, col: 62, offset: 15015},
																																													expr: &actionExpr{
																																														pos: position{line: 471, col: 17, offset: 15278},
																																														run: (*parser).callonLongHandAttributes328,
																																														expr: &seqExpr{
																																															pos: position{line: 471, col: 17, offset: 15278},
																																															exprs: []interface{}{
																																																&litMatcher{
																																																	pos:        position{line: 471, col: 17, offset: 15278},
																																																	val:        ":",
																																																	ignoreCase: false,
																																																	want:       "\":\"",
																																																},
																																																&labeledExpr{
																																																	pos:   position{line: 471, col: 21, offset: 15282},
																																																	label: "start",
																																																	expr: &choiceExpr{
																																																		pos: position{line: 471, col: 28, offset: 15289},
																																																		alternatives: []interface{}{
																																																			&actionExpr{
																																																				pos: position{line: 471, col: 28, offset: 15289},
																																																				run: (*parser).callonLongHandAttributes333,
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 471, col: 28, offset: 15289},
																																																					val:        "[A-Za-z]",
																																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																			&actionExpr{
																																																				pos: position{line: 473, col: 9, offset: 15343},
																																																				run: (*parser).callonLongHandAttributes335,
																																																				expr: &oneOrMoreExpr{
																																																					pos: position{line: 473, col: 9, offset: 15343},
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 473, col: 9, offset: 15343},
																																																						val:        "[0-9]",
																																																						ranges:     []rune{'0', '9'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 463, col: 78, offset: 15031},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 467, col: 25, offset: 15133},
																																									run: (*parser).callonLongHandAttributes339,
																																									expr: &seqExpr{
																																										pos: position{line: 467, col: 25, offset: 15133},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 467, col: 25, offset: 15133},
																																												val:        "{counter2:",
																																												ignoreCase: false,
																																												want:       "\"{counter2:\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 467, col: 38, offset: 15146},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 118, col: 18, offset: 3399},
																																													run: (*parser).callonLongHandAttributes343,
																																													expr: &seqExpr{
																																														pos: position{line: 118, col: 18, offset: 3399},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 118, col: 18, offset: 3399},
																																																val:        "[_0-9\\pL]",
																																																chars:      []rune{'_'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 118, col: 28, offset: 3409},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 118, col: 29, offset: 3410},
																																																	val:        "[-0-9\\pL]",
																																																	chars:      []rune{'-'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 467, col: 57, offset: 15165},
																																												label: "start",
																																												expr: &zeroOrOneExpr{
																																													pos: position{line: 467, col: 63, offset: 15171},
																																													expr: &actionExpr{
																																														pos: position{line: 471, col: 17, offset: 15278},
																																														run: (*parser).callonLongHandAttributes350,
																																														expr: &seqExpr{
																																															pos: position{line: 471, col: 17, offset: 15278},
																																															exprs: []interface{}{
																																																&litMatcher{
																																																	pos:        position{line: 471, col: 17, offset: 15278},
																																																	val:        ":",
																																																	ignoreCase: false,
																																																	want:       "\":\"",
																																																},
																																																&labeledExpr{
																																																	pos:   position{line: 471, col: 21, offset: 15282},
																																																	label: "start",
																																																	expr: &choiceExpr{
																																																		pos: position{line: 471, col: 28, offset: 15289},
																																																		alternatives: []interface{}{
																																																			&actionExpr{
																																																				pos: position{line: 471, col: 28, offset: 15289},
																																																				run: (*parser).callonLongHandAttributes355,
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 471, col: 28, offset: 15289},
																																																					val:        "[A-Za-z]",
																																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																			&actionExpr{
																																																				pos: position{line: 473, col: 9, offset: 15343},
																																																				run: (*parser).callonLongHandAttributes357,
																																																				expr: &oneOrMoreExpr{
																																																					pos: position{line: 473, col: 9, offset: 15343},
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 473, col: 9, offset: 15343},
																																																						val:        "[0-9]",
																																																						ranges:     []rune{'0', '9'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 467, col: 79, offset: 15187},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 456, col: 31, offset: 14633},
																																									run: (*parser).callonLongHandAttributes361,
																																									expr: &seqExpr{
																																										pos: position{line: 456, col: 31, offset: 14633},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 456, col: 31, offset: 14633},
																																												val:        "{",
																																												ignoreCase: false,
																																												want:       "\"{\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 456, col: 35, offset: 14637},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 118, col: 18, offset: 3399},
																																													run: (*parser).callonLongHandAttributes365,
																																													expr: &seqExpr{
																																														pos: position{line: 118, col: 18, offset: 3399},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 118, col: 18, offset: 3399},
																																																val:        "[_0-9\\pL]",
																																																chars:      []rune{'_'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 118, col: 28, offset: 3409},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 118, col: 29, offset: 3410},
																																																	val:        "[-0-9\\pL]",
																																																	chars:      []rune{'-'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 456, col: 54, offset: 14656},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 360, col: 12, offset: 11202},
																																			run: (*parser).callonLongHandAttributes371,
																																			expr: &litMatcher{
																																				pos:        position{line: 360, col: 12, offset: 11202},
																																				val:        "\\'",
																																				ignoreCase: false,
																																				want:       "\"\\\\'\"",
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 363, col: 13, offset: 11304},
																																			val:        "'`",
																																			ignoreCase: false,
																																			want:       "\"'`\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 363, col: 20, offset: 11311},
																																			val:        "`'",
																																			ignoreCase: false,
																																			want:       "\"`'\"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 363, col: 27, offset: 11318},
																																			run: (*parser).callonLongHandAttributes375,
																																			expr: &litMatcher{
																																				pos:        position{line: 363, col: 27, offset: 11318},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 366, col: 12, offset: 11478},
																																			run: (*parser).callonLongHandAttributes377,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 366, col: 12, offset: 11478},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 366, col: 12, offset: 11478},
																																					val:        "[^\\r\\n\\\\\\ ]",
																																					chars:      []rune{'\r', '\n', '\\', '\'', ' '},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 346, col: 5, offset: 10902},
																													val:        "'",
																													ignoreCase: false,
																													want:       "\"'\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 374, col: 5, offset: 11713},
																										run: (*parser).callonLongHandAttributes381,
																										expr: &seqExpr{
																											pos: position{line: 374, col: 5, offset: 11713},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 374, col: 5, offset: 11713},
																													val:        "\"",
																													ignoreCase: false,
																													want:       "\"\\\"\"",
																												},
																												&notExpr{
																													pos: position{line: 374, col: 10, offset: 11718},
																													expr: &litMatcher{
																														pos:        position{line: 374, col: 11, offset: 11719},
																														val:        "`",
																														ignoreCase: false,
																														want:       "\"`\"",
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 375, col: 5, offset: 11798},
																													label: "content",
																													expr: &actionExpr{
																														pos: position{line: 385, col: 5, offset: 12078},
																														run: (*parser).callonLongHandAttributes387,
																														expr: &labeledExpr{
																															pos:   position{line: 385, col: 5, offset: 12078},
																															label: "elements",
																															expr: &oneOrMoreExpr{
																																pos: position{line: 385, col: 14, offset: 12087},
																																expr: &choiceExpr{
																																	pos: position{line: 386, col: 9, offset: 12097},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2801, col: 14, offset: 92593},
																																			run: (*parser).callonLongHandAttributes391,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 2801, col: 14, offset: 92593},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2801, col: 14, offset: 92593},
																																					val:        "[0-9\\pL]",
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2878, col: 10, offset: 95044},
																																			val:        " ",
																																			ignoreCase: false,
																																			want:       "\" \"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 2878, col: 16, offset: 95050},
																																			run: (*parser).callonLongHandAttributes395,
																																			expr: &litMatcher{
																																				pos:        position{line: 2878, col: 16, offset: 95050},
																																				val:        "\t",
																																				ignoreCase: false,
																																				want:       "\"\\t\"",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 449, col: 5, offset: 14443},
																																			run: (*parser).callonLongHandAttributes397,
																																			expr: &seqExpr{
																																				pos: position{line: 449, col: 5, offset: 14443},
																																				exprs: []interface{}{
																																					&andCodeExpr{
																																						pos: position{line: 449, col: 5, offset: 14443},
																																						run: (*parser).callonLongHandAttributes399,
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 452, col: 5, offset: 14507},
																																						label: "element",
																																						expr: &choiceExpr{
																																							pos: position{line: 452, col: 14, offset: 14516},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 463, col: 25, offset: 14978},
																																									run: (*parser).callonLongHandAttributes402,
																																									expr: &seqExpr{
																																										pos: position{line: 463, col: 25, offset: 14978},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 463, col: 25, offset: 14978},
																																												val:        "{counter:",
																																												ignoreCase: false,
																																												want:       "\"{counter:\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 463, col: 37, offset: 14990},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 118, col: 18, offset: 3399},
																																													run: (*parser).callonLongHandAttributes406,
																																													expr: &seqExpr{
																																														pos: position{line: 118, col: 18, offset: 3399},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 118, col: 18, offset: 3399},
																																																val:        "[_0-9\\pL]",
																																																chars:      []rune{'_'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 118, col: 28, offset: 3409},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 118, col: 29, offset: 3410},
																																																	val:        "[-0-9\\pL]",
																																																	chars:      []rune{'-'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 463, col: 56, offset: 15009},
																																												label: "start",
																																												expr: &zeroOrOneExpr{
																																													pos: position{line: 463, col: 62, offset: 15015},
																																													expr: &actionExpr{
																																														pos: position{line: 471, col: 17, offset: 15278},
																																														run: (*parser).callonLongHandAttributes413,
																																														expr: &seqExpr{
																																															pos: position{line: 471, col: 17, offset: 15278},
																																															exprs: []interface{}{
																																																&litMatcher{
																																																	pos:        position{line: 471, col: 17, offset: 15278},
																																																	val:        ":",
																																																	ignoreCase: false,
																																																	want:       "\":\"",
																																																},
																																																&labeledExpr{
																																																	pos:   position{line: 471, col: 21, offset: 15282},
																																																	label: "start",
																																																	expr: &choiceExpr{
																																																		pos: position{line: 471, col: 28, offset: 15289},
																																																		alternatives: []interface{}{
																																																			&actionExpr{
																																																				pos: position{line: 471, col: 28, offset: 15289},
																																																				run: (*parser).callonLongHandAttributes418,
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 471, col: 28, offset: 15289},
																																																					val:        "[A-Za-z]",
																																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																			&actionExpr{
																																																				pos: position{line: 473, col: 9, offset: 15343},
																																																				run: (*parser).callonLongHandAttributes420,
																																																				expr: &oneOrMoreExpr{
																																																					pos: position{line: 473, col: 9, offset: 15343},
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 473, col: 9, offset: 15343},
																																																						val:        "[0-9]",
																																																						ranges:     []rune{'0', '9'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 463, col: 78, offset: 15031},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 467, col: 25, offset: 15133},
																																									run: (*parser).callonLongHandAttributes424,
																																									expr: &seqExpr{
																																										pos: position{line: 467, col: 25, offset: 15133},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 467, col: 25, offset: 15133},
																																												val:        "{counter2:",
																																												ignoreCase: false,
																																												want:       "\"{counter2:\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 467, col: 38, offset: 15146},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 118, col: 18, offset: 3399},
																																													run: (*parser).callonLongHandAttributes428,
																																													expr: &seqExpr{
																																														pos: position{line: 118, col: 18, offset: 3399},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 118, col: 18, offset: 3399},
																																																val:        "[_0-9\\pL]",
																																																chars:      []rune{'_'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 118, col: 28, offset: 3409},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 118, col: 29, offset: 3410},
																																																	val:        "[-0-9\\pL]",
																																																	chars:      []rune{'-'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 467, col: 57, offset: 15165},
																																												label: "start",
																																												expr: &zeroOrOneExpr{
																																													pos: position{line: 467, col: 63, offset: 15171},
																																													expr: &actionExpr{
																																														pos: position{line: 471, col: 17, offset: 15278},
																																														run: (*parser).callonLongHandAttributes435,
																																														expr: &seqExpr{
																																															pos: position{line: 471, col: 17, offset: 15278},
																																															exprs: []interface{}{
																																																&litMatcher{
																																																	pos:        position{line: 471, col: 17, offset: 15278},
																																																	val:        ":",
																																																	ignoreCase: false,
																																																	want:       "\":\"",
																																																},
																																																&labeledExpr{
																																																	pos:   position{line: 471, col: 21, offset: 15282},
																																																	label: "start",
																																																	expr: &choiceExpr{
																																																		pos: position{line: 471, col: 28, offset: 15289},
																																																		alternatives: []interface{}{
																																																			&actionExpr{
																																																				pos: position{line: 471, col: 28, offset: 15289},
																																																				run: (*parser).callonLongHandAttributes440,
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 471, col: 28, offset: 15289},
																																																					val:        "[A-Za-z]",
																																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																			&actionExpr{
																																																				pos: position{line: 473, col: 9, offset: 15343},
																																																				run: (*parser).callonLongHandAttributes442,
																																																				expr: &oneOrMoreExpr{
																																																					pos: position{line: 473, col: 9, offset: 15343},
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 473, col: 9, offset: 15343},
																																																						val:        "[0-9]",
																																																						ranges:     []rune{'0', '9'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 467, col: 79, offset: 15187},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 456, col: 31, offset: 14633},
																																									run: (*parser).callonLongHandAttributes446,
																																									expr: &seqExpr{
																																										pos: position{line: 456, col: 31, offset: 14633},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 456, col: 31, offset: 14633},
																																												val:        "{",
																																												ignoreCase: false,
																																												want:       "\"{\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 456, col: 35, offset: 14637},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 118, col: 18, offset: 3399},
																																													run: (*parser).callonLongHandAttributes450,
																																													expr: &seqExpr{
																																														pos: position{line: 118, col: 18, offset: 3399},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 118, col: 18, offset: 3399},
																																																val:        "[_0-9\\pL]",
																																																chars:      []rune{'_'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 118, col: 28, offset: 3409},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 118, col: 29, offset: 3410},
																																																	val:        "[-0-9\\pL]",
																																																	chars:      []rune{'-'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 456, col: 54, offset: 14656},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 389, col: 12, offset: 12166},
																																			run: (*parser).callonLongHandAttributes456,
																																			expr: &litMatcher{
																																				pos:        position{line: 389, col: 12, offset: 12166},
																																				val:        "\\\"",
																																				ignoreCase: false,
																																				want:       "\"\\\\\\\"\"",
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 392, col: 13, offset: 12268},
																																			val:        "\"`",
																																			ignoreCase: false,
																																			want:       "\"\\\"`\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 392, col: 21, offset: 12276},
																																			val:        "`\"",
																																			ignoreCase: false,
																																			want:       "\"`\\\"\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 392, col: 29, offset: 12284},
																																			val:        "\\",
																																			ignoreCase: false,
																																			want:       "\"\\\\\"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 392, col: 35, offset: 12290},
																																			run: (*parser).callonLongHandAttributes461,
																																			expr: &litMatcher{
																																				pos:        position{line: 392, col: 35, offset: 12290},
																																				val:        "`",
																																				ignoreCase: false,
																																				want:       "\"`\"",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 395, col: 12, offset: 12473},
																																			run: (*parser).callonLongHandAttributes463,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 395, col: 12, offset: 12473},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 395, col: 12, offset: 12473},
																																					val:        "[^\\r\\n\\\\\"` ]",
																																					chars:      []rune{'\r', '\n', '\\', '"', '`', ' '},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 376, col: 5, offset: 11849},
																													val:        "\"",
																													ignoreCase: false,
																													want:       "\"\\\"\"",
																												},
																												&andExpr{
																													pos: position{line: 376, col: 10, offset: 11854},
																													expr: &notExpr{
																														pos: position{line: 376, col: 12, offset: 11856},
																														expr: &seqExpr{
																															pos: position{line: 376, col: 14, offset: 11858},
																															exprs: []interface{}{
																																&zeroOrMoreExpr{
																																	pos: position{line: 376, col: 14, offset: 11858},
																																	expr: &choiceExpr{
																																		pos: position{line: 2878, col: 10, offset: 95044},
																																		alternatives: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2878, col: 10, offset: 95044},
																																				val:        " ",
																																				ignoreCase: false,
																																				want:       "\" \"",
																																			},
																																			&actionExpr{
																																				pos: position{line: 2878, col: 16, offset: 95050},
																																				run: (*parser).callonLongHandAttributes473,
																																				expr: &litMatcher{
																																					pos:        position{line: 2878, col: 16, offset: 95050},
																																					val:        "\t",
																																					ignoreCase: false,
																																					want:       "\"\\t\"",
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 376, col: 21, offset: 11865},
																																	val:        "=",
																																	ignoreCase: false,
																																	want:       "\"=\"",
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 291, col: 7, offset: 8880},
																										run: (*parser).callonLongHandAttributes476,
																										expr: &seqExpr{
																											pos: position{line: 291, col: 7, offset: 8880},
																											exprs: []interface{}{
																												&labeledExpr{
																													pos:   position{line: 291, col: 7, offset: 8880},
																													label: "elements",
																													expr: &oneOrMoreExpr{
																														pos: position{line: 291, col: 16, offset: 8889},
																														expr: &choiceExpr{
																															pos: position{line: 294, col: 9, offset: 9071},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 294, col: 10, offset: 9072},
																																	run: (*parser).callonLongHandAttributes481,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 294, col: 10, offset: 9072},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 294, col: 10, offset: 9072},
																																			val:        "[^,=.%# \\r\\n�{]]",
																																			chars:      []rune{',', '=', '.', '%', '#', ' ', '\r', '\n', '�', '{', ']'},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 947, col: 23, offset: 29896},
																																	run: (*parser).callonLongHandAttributes484,
																																	expr: &seqExpr{
																																		pos: position{line: 947, col: 23, offset: 29896},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 945, col: 32, offset: 29864},
																																				val:        "�",
																																				ignoreCase: false,
																																				want:       "\"�\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 947, col: 51, offset: 29924},
																																				label: "ref",
																																				expr: &actionExpr{
																																					pos: position{line: 947, col: 56, offset: 29929},
																																					run: (*parser).callonLongHandAttributes488,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 947, col: 56, offset: 29929},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 947, col: 56, offset: 29929},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 945, col: 32, offset: 29864},
																																				val:        "�",
																																				ignoreCase: false,
																																				want:       "\"�\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 449, col: 5, offset: 14443},
																																	run: (*parser).callonLongHandAttributes492,
																																	expr: &seqExpr{
																																		pos: position{line: 449, col: 5, offset: 14443},
																																		exprs: []interface{}{
																																			&andCodeExpr{
																																				pos: position{line: 449, col: 5, offset: 14443},
																																				run: (*parser).callonLongHandAttributes494,
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 452, col: 5, offset: 14507},
																																				label: "element",
																																				expr: &choiceExpr{
																																					pos: position{line: 452, col: 14, offset: 14516},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 463, col: 25, offset: 14978},
																																							run: (*parser).callonLongHandAttributes497,
																																							expr: &seqExpr{
																																								pos: position{line: 463, col: 25, offset: 14978},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 463, col: 25, offset: 14978},
																																										val:        "{counter:",
																																										ignoreCase: false,
																																										want:       "\"{counter:\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 463, col: 37, offset: 14990},
																																										label: "name",
																																										expr: &actionExpr{
																																											pos: position{line: 118, col: 18, offset: 3399},
																																											run: (*parser).callonLongHandAttributes501,
																																											expr: &seqExpr{
																																												pos: position{line: 118, col: 18, offset: 3399},
																																												exprs: []interface{}{
																																													&charClassMatcher{
																																														pos:        position{line: 118, col: 18, offset: 3399},
																																														val:        "[_0-9\\pL]",
																																														chars:      []rune{'_'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																													&zeroOrMoreExpr{
																																														pos: position{line: 118, col: 28, offset: 3409},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 118, col: 29, offset: 3410},
																																															val:        "[-0-9\\pL]",
																																															chars:      []rune{'-'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 463, col: 56, offset: 15009},
																																										label: "start",
																																										expr: &zeroOrOneExpr{
																																											pos: position{line: 463, col: 62, offset: 15015},
																																											expr: &actionExpr{
																																												pos: position{line: 471, col: 17, offset: 15278},
																																												run: (*parser).callonLongHandAttributes508,
																																												expr: &seqExpr{
																																													pos: position{line: 471, col: 17, offset: 15278},
																																													exprs: []interface{}{
																																														&litMatcher{
																																															pos:        position{line: 471, col: 17, offset: 15278},
																																															val:        ":",
																																															ignoreCase: false,
																																															want:       "\":\"",
																																														},
																																														&labeledExpr{
																																															pos:   position{line: 471, col: 21, offset: 15282},
																																															label: "start",
																																															expr: &choiceExpr{
																																																pos: position{line: 471, col: 28, offset: 15289},
																																																alternatives: []interface{}{
																																																	&actionExpr{
																																																		pos: position{line: 471, col: 28, offset: 15289},
																																																		run: (*parser).callonLongHandAttributes513,
																																																		expr: &charClassMatcher{
																																																			pos:        position{line: 471, col: 28, offset: 15289},
																																																			val:        "[A-Za-z]",
																																																			ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																			ignoreCase: false,
																																																			inverted:   false,
																																																		},
																																																	},
																																																	&actionExpr{
																																																		pos: position{line: 473, col: 9, offset: 15343},
																																																		run: (*parser).callonLongHandAttributes515,
																																																		expr: &oneOrMoreExpr{
																																																			pos: position{line: 473, col: 9, offset: 15343},
																																																			expr: &charClassMatcher{
																																																				pos:        position{line: 473, col: 9, offset: 15343},
																																																				val:        "[0-9]",
																																																				ranges:     []rune{'0', '9'},
																																																				ignoreCase: false,
																																																				inverted:   false,
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 463, col: 78, offset: 15031},
																																										val:        "}",
																																										ignoreCase: false,
																																										want:       "\"}\"",
																																									},
																																								},
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 467, col: 25, offset: 15133},
																																							run: (*parser).callonLongHandAttributes519,
																																							expr: &seqExpr{
																																								pos: position{line: 467, col: 25, offset: 15133},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 467, col: 25, offset: 15133},
																																										val:        "{counter2:",
																																										ignoreCase: false,
																																										want:       "\"{counter2:\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 467, col: 38, offset: 15146},
																																										label: "name",
																																										expr: &actionExpr{
																																											pos: position{line: 118, col: 18, offset: 3399},
																																											run: (*parser).callonLongHandAttributes523,
																																											expr: &seqExpr{
																																												pos: position{line: 118, col: 18, offset: 3399},
																																												exprs: []interface{}{
																																													&charClassMatcher{
																																														pos:        position{line: 118, col: 18, offset: 3399},
																																														val:        "[_0-9\\pL]",
																																														chars:      []rune{'_'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																													&zeroOrMoreExpr{
																																														pos: position{line: 118, col: 28, offset: 3409},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 118, col: 29, offset: 3410},
																																															val:        "[-0-9\\pL]",
																																															chars:      []rune{'-'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 467, col: 57, offset: 15165},
																																										label: "start",
																																										expr: &zeroOrOneExpr{
																																											pos: position{line: 467, col: 63, offset: 15171},
																																											expr: &actionExpr{
																																												pos: position{line: 471, col: 17, offset: 15278},
																																												run: (*parser).callonLongHandAttributes530,
																																												expr: &seqExpr{
																																													pos: position{line: 471, col: 17, offset: 15278},
																																													exprs: []interface{}{
																																														&litMatcher{
																																															pos:        position{line: 471, col: 17, offset: 15278},
																																															val:        ":",
																																															ignoreCase: false,
																																															want:       "\":\"",
																																														},
																																														&labeledExpr{
																																															pos:   position{line: 471, col: 21, offset: 15282},
																																															label: "start",
																																															expr: &choiceExpr{
																																																pos: position{line: 471, col: 28, offset: 15289},
																																																alternatives: []interface{}{
																																																	&actionExpr{
																																																		pos: position{line: 471, col: 28, offset: 15289},
																																																		run: (*parser).callonLongHandAttributes535,
																																																		expr: &charClassMatcher{
																																																			pos:        position{line: 471, col: 28, offset: 15289},
																																																			val:        "[A-Za-z]",
																																																			ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																			ignoreCase: false,
																																																			inverted:   false,
																																																		},
																																																	},
																																																	&actionExpr{
																																																		pos: position{line: 473, col: 9, offset: 15343},
																																																		run: (*parser).callonLongHandAttributes537,
																																																		expr: &oneOrMoreExpr{
																																																			pos: position{line: 473, col: 9, offset: 15343},
																																																			expr: &charClassMatcher{
																																																				pos:        position{line: 473, col: 9, offset: 15343},
																																																				val:        "[0-9]",
																																																				ranges:     []rune{'0', '9'},
																																																				ignoreCase: false,
																																																				inverted:   false,
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 467, col: 79, offset: 15187},
																																										val:        "}",
																																										ignoreCase: false,
																																										want:       "\"}\"",
																																									},
																																								},
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 456, col: 31, offset: 14633},
																																							run: (*parser).callonLongHandAttributes541,
																																							expr: &seqExpr{
																																								pos: position{line: 456, col: 31, offset: 14633},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 456, col: 31, offset: 14633},
																																										val:        "{",
																																										ignoreCase: false,
																																										want:       "\"{\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 456, col: 35, offset: 14637},
																																										label: "name",
																																										expr: &actionExpr{
																																											pos: position{line: 118, col: 18, offset: 3399},
																																											run: (*parser).callonLongHandAttributes545,
																																											expr: &seqExpr{
																																												pos: position{line: 118, col: 18, offset: 3399},
																																												exprs: []interface{}{
																																													&charClassMatcher{
																																														pos:        position{line: 118, col: 18, offset: 3399},
																																														val:        "[_0-9\\pL]",
																																														chars:      []rune{'_'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																													&zeroOrMoreExpr{
																																														pos: position{line: 118, col: 28, offset: 3409},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 118, col: 29, offset: 3410},
																																															val:        "[-0-9\\pL]",
																																															chars:      []rune{'-'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 456, col: 54, offset: 14656},
																																										val:        "}",
																																										ignoreCase: false,
																																										want:       "\"}\"",
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 300, col: 12, offset: 9260},
																																	run: (*parser).callonLongHandAttributes551,
																																	expr: &litMatcher{
																																		pos:        position{line: 300, col: 12, offset: 9260},
																																		val:        "{",
																																		ignoreCase: false,
																																		want:       "\"{\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																												&andExpr{
																													pos: position{line: 303, col: 8, offset: 9343},
																													expr: &notExpr{
																														pos: position{line: 303, col: 10, offset: 9345},
																														expr: &seqExpr{
																															pos: position{line: 303, col: 12, offset: 9347},
																															exprs: []interface{}{
																																&zeroOrMoreExpr{
																																	pos: position{line: 303, col: 12, offset: 9347},
																																	expr: &choiceExpr{
																																		pos: position{line: 2878, col: 10, offset: 95044},
																																		alternatives: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2878, col: 10, offset: 95044},
																																				val:        " ",
																																				ignoreCase: false,
																																				want:       "\" \"",
																																			},
																																			&actionExpr{
																																				pos: position{line: 2878, col: 16, offset: 95050},
																																				run: (*parser).callonLongHandAttributes559,
																																				expr: &litMatcher{
																																					pos:        position{line: 2878, col: 16, offset: 95050},
																																					val:        "\t",
																																					ignoreCase: false,
																																					want:       "\"\\t\"",
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 303, col: 19, offset: 9354},
																																	val:        "=",
																																	ignoreCase: false,
																																	want:       "\"=\"",
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 283, col: 29, offset: 8649},
																				run: (*parser).callonLongHandAttributes562,
																				expr: &seqExpr{
																					pos: position{line: 283, col: 29, offset: 8649},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 283, col: 29, offset: 8649},
																							val:        "%",
																							ignoreCase: false,
																							want:       "\"%\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 283, col: 33, offset: 8653},
																							label: "option",
																							expr: &choiceExpr{
																								pos: position{line: 289, col: 5, offset: 8806},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 344, col: 5, offset: 10767},
																										run: (*parser).callonLongHandAttributes567,
																										expr: &seqExpr{
																											pos: position{line: 344, col: 5, offset: 10767},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 344, col: 5, offset: 10767},
																													val:        "'",
																													ignoreCase: false,
																													want:       "\"'\"",
																												},
																												&notExpr{
																													pos: position{line: 344, col: 9, offset: 10771},
																													expr: &litMatcher{
																														pos:        position{line: 344, col: 10, offset: 10772},
																														val:        "`",
																														ignoreCase: false,
																														want:       "\"`\"",
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 345, col: 5, offset: 10851},
																													label: "content",
																													expr: &actionExpr{
																														pos: position{line: 356, col: 5, offset: 11114},
																														run: (*parser).callonLongHandAttributes573,
																														expr: &labeledExpr{
																															pos:   position{line: 356, col: 5, offset: 11114},
																															label: "elements",
																															expr: &oneOrMoreExpr{
																																pos: position{line: 356, col: 14, offset: 11123},
																																expr: &choiceExpr{
																																	pos: position{line: 357, col: 9, offset: 11133},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2801, col: 14, offset: 92593},
																																			run: (*parser).callonLongHandAttributes577,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 2801, col: 14, offset: 92593},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2801, col: 14, offset: 92593},
																																					val:        "[0-9\\pL]",
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2878, col: 10, offset: 95044},
																																			val:        " ",
																																			ignoreCase: false,
																																			want:       "\" \"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 2878, col: 16, offset: 95050},
																																			run: (*parser).callonLongHandAttributes581,
																																			expr: &litMatcher{
																																				pos:        position{line: 2878, col: 16, offset: 95050},
																																				val:        "\t",
																																				ignoreCase: false,
																																				want:       "\"\\t\"",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 449, col: 5, offset: 14443},
																																			run: (*parser).callonLongHandAttributes583,
																																			expr: &seqExpr{
																																				pos: position{line: 449, col: 5, offset: 14443},
																																				exprs: []interface{}{
																																					&andCodeExpr{
																																						pos: position{line: 449, col: 5, offset: 14443},
																																						run: (*parser).callonLongHandAttributes585,
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 452, col: 5, offset: 14507},
																																						label: "element",
																																						expr: &choiceExpr{
																																							pos: position{line: 452, col: 14, offset: 14516},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 463, col: 25, offset: 14978},
																																									run: (*parser).callonLongHandAttributes588,
																																									expr: &seqExpr{
																																										pos: position{line: 463, col: 25, offset: 14978},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 463, col: 25, offset: 14978},
																																												val:        "{counter:",
																																												ignoreCase: false,
																																												want:       "\"{counter:\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 463, col: 37, offset: 14990},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 118, col: 18, offset: 3399},
																																													run: (*parser).callonLongHandAttributes592,
																																													expr: &seqExpr{
																																														pos: position{line: 118, col: 18, offset: 3399},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 118, col: 18, offset: 3399},
																																																val:        "[_0-9\\pL]",
																																																chars:      []rune{'_'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 118, col: 28, offset: 3409},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 118, col: 29, offset: 3410},
																																																	val:        "[-0-9\\pL]",
																																																	chars:      []rune{'-'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 463, col: 56, offset: 15009},
																																												label: "start",
																																												expr: &zeroOrOneExpr{
																																													pos: position{line: 463, col: 62, offset: 15015},
																																													expr: &actionExpr{
																																														pos: position{line: 471, col: 17, offset: 15278},
																																														run: (*parser).callonLongHandAttributes599,
																																														expr: &seqExpr{
																																															pos: position{line: 471, col: 17, offset: 15278},
																																															exprs: []interface{}{
																																																&litMatcher{
																																																	pos:        position{line: 471, col: 17, offset: 15278},
																																																	val:        ":",
																																																	ignoreCase: false,
																																																	want:       "\":\"",
																																																},
																																																&labeledExpr{
																																																	pos:   position{line: 471, col: 21, offset: 15282},
																																																	label: "start",
																																																	expr: &choiceExpr{
																																																		pos: position{line: 471, col: 28, offset: 15289},
																																																		alternatives: []interface{}{
																																																			&actionExpr{
																																																				pos: position{line: 471, col: 28, offset: 15289},
																																																				run: (*parser).callonLongHandAttributes604,
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 471, col: 28, offset: 15289},
																																																					val:        "[A-Za-z]",
																																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																			&actionExpr{
																																																				pos: position{line: 473, col: 9, offset: 15343},
																																																				run: (*parser).callonLongHandAttributes606,
																																																				expr: &oneOrMoreExpr{
																																																					pos: position{line: 473, col: 9, offset: 15343},
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 473, col: 9, offset: 15343},
																																																						val:        "[0-9]",
																																																						ranges:     []rune{'0', '9'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 463, col: 78, offset: 15031},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 467, col: 25, offset: 15133},
																																									run: (*parser).callonLongHandAttributes610,
																																									expr: &seqExpr{
																																										pos: position{line: 467, col: 25, offset: 15133},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 467, col: 25, offset: 15133},
																																												val:        "{counter2:",
																																												ignoreCase: false,
																																												want:       "\"{counter2:\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 467, col: 38, offset: 15146},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 118, col: 18, offset: 3399},
																																													run: (*parser).callonLongHandAttributes614,
																																													expr: &seqExpr{
																																														pos: position{line: 118, col: 18, offset: 3399},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 118, col: 18, offset: 3399},
																																																val:        "[_0-9\\pL]",
																																																chars:      []rune{'_'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 118, col: 28, offset: 3409},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 118, col: 29, offset: 3410},
																																																	val:        "[-0-9\\pL]",
																																																	chars:      []rune{'-'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 467, col: 57, offset: 15165},
																																												label: "start",
																																												expr: &zeroOrOneExpr{
																																													pos: position{line: 467, col: 63, offset: 15171},
																																													expr: &actionExpr{
																																														pos: position{line: 471, col: 17, offset: 15278},
																																														run: (*parser).callonLongHandAttributes621,
																																														expr: &seqExpr{
																																															pos: position{line: 471, col: 17, offset: 15278},
																																															exprs: []interface{}{
																																																&litMatcher{
																																																	pos:        position{line: 471, col: 17, offset: 15278},
																																																	val:        ":",
																																																	ignoreCase: false,
																																																	want:       "\":\"",
																																																},
																																																&labeledExpr{
																																																	pos:   position{line: 471, col: 21, offset: 15282},
																																																	label: "start",
																																																	expr: &choiceExpr{
																																																		pos: position{line: 471, col: 28, offset: 15289},
																																																		alternatives: []interface{}{
																																																			&actionExpr{
																																																				pos: position{line: 471, col: 28, offset: 15289},
																																																				run: (*parser).callonLongHandAttributes626,
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 471, col: 28, offset: 15289},
																																																					val:        "[A-Za-z]",
																																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																			&actionExpr{
																																																				pos: position{line: 473, col: 9, offset: 15343},
																																																				run: (*parser).callonLongHandAttributes628,
																																																				expr: &oneOrMoreExpr{
																																																					pos: position{line: 473, col: 9, offset: 15343},
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 473, col: 9, offset: 15343},
																																																						val:        "[0-9]",
																																																						ranges:     []rune{'0', '9'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 467, col: 79, offset: 15187},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 456, col: 31, offset: 14633},
																																									run: (*parser).callonLongHandAttributes632,
																																									expr: &seqExpr{
																																										pos: position{line: 456, col: 31, offset: 14633},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 456, col: 31, offset: 14633},
																																												val:        "{",
																																												ignoreCase: false,
																																												want:       "\"{\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 456, col: 35, offset: 14637},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 118, col: 18, offset: 3399},
																																													run: (*parser).callonLongHandAttributes636,
																																													expr: &seqExpr{
																																														pos: position{line: 118, col: 18, offset: 3399},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 118, col: 18, offset: 3399},
																																																val:        "[_0-9\\pL]",
																																																chars:      []rune{'_'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 118, col: 28, offset: 3409},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 118, col: 29, offset: 3410},
																																																	val:        "[-0-9\\pL]",
																																																	chars:      []rune{'-'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 456, col: 54, offset: 14656},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 360, col: 12, offset: 11202},
																																			run: (*parser).callonLongHandAttributes642,
																																			expr: &litMatcher{
																																				pos:        position{line: 360, col: 12, offset: 11202},
																																				val:        "\\'",
																																				ignoreCase: false,
																																				want:       "\"\\\\'\"",
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 363, col: 13, offset: 11304},
																																			val:        "'`",
																																			ignoreCase: false,
																																			want:       "\"'`\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 363, col: 20, offset: 11311},
																																			val:        "`'",
																																			ignoreCase: false,
																																			want:       "\"`'\"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 363, col: 27, offset: 11318},
																																			run: (*parser).callonLongHandAttributes646,
																																			expr: &litMatcher{
																																				pos:        position{line: 363, col: 27, offset: 11318},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 366, col: 12, offset: 11478},
																																			run: (*parser).callonLongHandAttributes648,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 366, col: 12, offset: 11478},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 366, col: 12, offset: 11478},
																																					val:        "[^\\r\\n\\\\\\ ]",
																																					chars:      []rune{'\r', '\n', '\\', '\'', ' '},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 346, col: 5, offset: 10902},
																													val:        "'",
																													ignoreCase: false,
																													want:       "\"'\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 374, col: 5, offset: 11713},
																										run: (*parser).callonLongHandAttributes652,
																										expr: &seqExpr{
																											pos: position{line: 374, col: 5, offset: 11713},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 374, col: 5, offset: 11713},
																													val:        "\"",
																													ignoreCase: false,
																													want:       "\"\\\"\"",
																												},
																												&notExpr{
																													pos: position{line: 374, col: 10, offset: 11718},
																													expr: &litMatcher{
																														pos:        position{line: 374, col: 11, offset: 11719},
																														val:        "`",
																														ignoreCase: false,
																														want:       "\"`\"",
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 375, col: 5, offset: 11798},
																													label: "content",
																													expr: &actionExpr{
																														pos: position{line: 385, col: 5, offset: 12078},
																														run: (*parser).callonLongHandAttributes658,
																														expr: &labeledExpr{
																															pos:   position{line: 385, col: 5, offset: 12078},
																															label: "elements",
																															expr: &oneOrMoreExpr{
																																pos: position{line: 385, col: 14, offset: 12087},
																																expr: &choiceExpr{
																																	pos: position{line: 386, col: 9, offset: 12097},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2801, col: 14, offset: 92593},
																																			run: (*parser).callonLongHandAttributes662,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 2801, col: 14, offset: 92593},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2801, col: 14, offset: 92593},
																																					val:        "[0-9\\pL]",
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2878, col: 10, offset: 95044},
																																			val:        " ",
																																			ignoreCase: false,
																																			want:       "\" \"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 2878, col: 16, offset: 95050},
																																			run: (*parser).callonLongHandAttributes666,
																																			expr: &litMatcher{
																																				pos:        position{line: 2878, col: 16, offset: 95050},
																																				val:        "\t",
																																				ignoreCase: false,
																																				want:       "\"\\t\"",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 449, col: 5, offset: 14443},
																																			run: (*parser).callonLongHandAttributes668,
																																			expr: &seqExpr{
																																				pos: position{line: 449, col: 5, offset: 14443},
																																				exprs: []interface{}{
																																					&andCodeExpr{
																																						pos: position{line: 449, col: 5, offset: 14443},
																																						run: (*parser).callonLongHandAttributes670,
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 452, col: 5, offset: 14507},
																																						label: "element",
																																						expr: &choiceExpr{
																																							pos: position{line: 452, col: 14, offset: 14516},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 463, col: 25, offset: 14978},
																																									run: (*parser).callonLongHandAttributes673,
																																									expr: &seqExpr{
																																										pos: position{line: 463, col: 25, offset: 14978},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 463, col: 25, offset: 14978},
																																												val:        "{counter:",
																																												ignoreCase: false,
																																												want:       "\"{counter:\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 463, col: 37, offset: 14990},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 118, col: 18, offset: 3399},
																																													run: (*parser).callonLongHandAttributes677,
																																													expr: &seqExpr{
																																														pos: position{line: 118, col: 18, offset: 3399},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 118, col: 18, offset: 3399},
																																																val:        "[_0-9\\pL]",
																																																chars:      []rune{'_'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 118, col: 28, offset: 3409},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 118, col: 29, offset: 3410},
																																																	val:        "[-0-9\\pL]",
																																																	chars:      []rune{'-'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 463, col: 56, offset: 15009},
																																												label: "start",
																																												expr: &zeroOrOneExpr{
																																													pos: position{line: 463, col: 62, offset: 15015},
																																													expr: &actionExpr{
																																														pos: position{line: 471, col: 17, offset: 15278},
																																														run: (*parser).callonLongHandAttributes684,
																																														expr: &seqExpr{
																																															pos: position{line: 471, col: 17, offset: 15278},
																																															exprs: []interface{}{
																																																&litMatcher{
																																																	pos:        position{line: 471, col: 17, offset: 15278},
																																																	val:        ":",
																																																	ignoreCase: false,
																																																	want:       "\":\"",
																																																},
																																																&labeledExpr{
																																																	pos:   position{line: 471, col: 21, offset: 15282},
																																																	label: "start",
																																																	expr: &choiceExpr{
																																																		pos: position{line: 471, col: 28, offset: 15289},
																																																		alternatives: []interface{}{
																																																			&actionExpr{
																																																				pos: position{line: 471, col: 28, offset: 15289},
																																																				run: (*parser).callonLongHandAttributes689,
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 471, col: 28, offset: 15289},
																																																					val:        "[A-Za-z]",
																																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																			&actionExpr{
																																																				pos: position{line: 473, col: 9, offset: 15343},
																																																				run: (*parser).callonLongHandAttributes691,
																																																				expr: &oneOrMoreExpr{
																																																					pos: position{line: 473, col: 9, offset: 15343},
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 473, col: 9, offset: 15343},
																																																						val:        "[0-9]",
																																																						ranges:     []rune{'0', '9'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 463, col: 78, offset: 15031},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 467, col: 25, offset: 15133},
																																									run: (*parser).callonLongHandAttributes695,
																																									expr: &seqExpr{
																																										pos: position{line: 467, col: 25, offset: 15133},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 467, col: 25, offset: 15133},
																																												val:        "{counter2:",
																																												ignoreCase: false,
																																												want:       "\"{counter2:\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 467, col: 38, offset: 15146},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 118, col: 18, offset: 3399},
																																													run: (*parser).callonLongHandAttributes699,
																																													expr: &seqExpr{
																																														pos: position{line: 118, col: 18, offset: 3399},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 118, col: 18, offset: 3399},
																																																val:        "[_0-9\\pL]",
																																																chars:      []rune{'_'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 118, col: 28, offset: 3409},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 118, col: 29, offset: 3410},
																																																	val:        "[-0-9\\pL]",
																																																	chars:      []rune{'-'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 467, col: 57, offset: 15165},
																																												label: "start",
																																												expr: &zeroOrOneExpr{
																																													pos: position{line: 467, col: 63, offset: 15171},
																																													expr: &actionExpr{
																																														pos: position{line: 471, col: 17, offset: 15278},
																																														run: (*parser).callonLongHandAttributes706,
																																														expr: &seqExpr{
																																															pos: position{line: 471, col: 17, offset: 15278},
																																															exprs: []interface{}{
																																																&litMatcher{
																																																	pos:        position{line: 471, col: 17, offset: 15278},
																																																	val:        ":",
																																																	ignoreCase: false,
																																																	want:       "\":\"",
																																																},
																																																&labeledExpr{
																																																	pos:   position{line: 471, col: 21, offset: 15282},
																																																	label: "start",
																																																	expr: &choiceExpr{
																																																		pos: position{line: 471, col: 28, offset: 15289},
																																																		alternatives: []interface{}{
																																																			&actionExpr{
																																																				pos: position{line: 471, col: 28, offset: 15289},
																																																				run: (*parser).callonLongHandAttributes711,
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 471, col: 28, offset: 15289},
																																																					val:        "[A-Za-z]",
																																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																			&actionExpr{
																																																				pos: position{line: 473, col: 9, offset: 15343},
																																																				run: (*parser).callonLongHandAttributes713,
																																																				expr: &oneOrMoreExpr{
																																																					pos: position{line: 473, col: 9, offset: 15343},
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 473, col: 9, offset: 15343},
																																																						val:        "[0-9]",
																																																						ranges:     []rune{'0', '9'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 467, col: 79, offset: 15187},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 456, col: 31, offset: 14633},
																																									run: (*parser).callonLongHandAttributes717,
																																									expr: &seqExpr{
																																										pos: position{line: 456, col: 31, offset: 14633},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 456, col: 31, offset: 14633},
																																												val:        "{",
																																												ignoreCase: false,
																																												want:       "\"{\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 456, col: 35, offset: 14637},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 118, col: 18, offset: 3399},
																																													run: (*parser).callonLongHandAttributes721,
																																													expr: &seqExpr{
																																														pos: position{line: 118, col: 18, offset: 3399},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 118, col: 18, offset: 3399},
																																																val:        "[_0-9\\pL]",
																																																chars:      []rune{'_'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 118, col: 28, offset: 3409},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 118, col: 29, offset: 3410},
																																																	val:        "[-0-9\\pL]",
																																																	chars:      []rune{'-'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 456, col: 54, offset: 14656},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 389, col: 12, offset: 12166},
																																			run: (*parser).callonLongHandAttributes727,
																																			expr: &litMatcher{
																																				pos:        position{line: 389, col: 12, offset: 12166},
																																				val:        "\\\"",
																																				ignoreCase: false,
																																				want:       "\"\\\\\\\"\"",
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 392, col: 13, offset: 12268},
																																			val:        "\"`",
																																			ignoreCase: false,
																																			want:       "\"\\\"`\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 392, col: 21, offset: 12276},
																																			val:        "`\"",
																																			ignoreCase: false,
																																			want:       "\"`\\\"\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 392, col: 29, offset: 12284},
																																			val:        "\\",
																																			ignoreCase: false,
																																			want:       "\"\\\\\"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 392, col: 35, offset: 12290},
																																			run: (*parser).callonLongHandAttributes732,
																																			expr: &litMatcher{
																																				pos:        position{line: 392, col: 35, offset: 12290},
																																				val:        "`",
																																				ignoreCase: false,
																																				want:       "\"`\"",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 395, col: 12, offset: 12473},
																																			run: (*parser).callonLongHandAttributes734,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 395, col: 12, offset: 12473},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 395, col: 12, offset: 12473},
																																					val:        "[^\\r\\n\\\\\"` ]",
																																					chars:      []rune{'\r', '\n', '\\', '"', '`', ' '},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 376, col: 5, offset: 11849},
																													val:        "\"",
																													ignoreCase: false,
																													want:       "\"\\\"\"",
																												},
																												&andExpr{
																													pos: position{line: 376, col: 10, offset: 11854},
																													expr: &notExpr{
																														pos: position{line: 376, col: 12, offset: 11856},
																														expr: &seqExpr{
																															pos: position{line: 376, col: 14, offset: 11858},
																															exprs: []interface{}{
																																&zeroOrMoreExpr{
																																	pos: position{line: 376, col: 14, offset: 11858},
																																	expr: &choiceExpr{
																																		pos: position{line: 2878, col: 10, offset: 95044},
																																		alternatives: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2878, col: 10, offset: 95044},
																																				val:        " ",
																																				ignoreCase: false,
																																				want:       "\" \"",
																																			},
																																			&actionExpr{
																																				pos: position{line: 2878, col: 16, offset: 95050},
																																				run: (*parser).callonLongHandAttributes744,
																																				expr: &litMatcher{
																																					pos:        position{line: 2878, col: 16, offset: 95050},
																																					val:        "\t",
																																					ignoreCase: false,
																																					want:       "\"\\t\"",
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 376, col: 21, offset: 11865},
																																	val:        "=",
																																	ignoreCase: false,
																																	want:       "\"=\"",
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 291, col: 7, offset: 8880},
																										run: (*parser).callonLongHandAttributes747,
																										expr: &seqExpr{
																											pos: position{line: 291, col: 7, offset: 8880},
																											exprs: []interface{}{
																												&labeledExpr{
																													pos:   position{line: 291, col: 7, offset: 8880},
																													label: "elements",
																													expr: &oneOrMoreExpr{
																														pos: position{line: 291, col: 16, offset: 8889},
																														expr: &choiceExpr{
																															pos: position{line: 294, col: 9, offset: 9071},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 294, col: 10, offset: 9072},
																																	run: (*parser).callonLongHandAttributes752,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 294, col: 10, offset: 9072},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 294, col: 10, offset: 9072},
																																			val:        "[^,=.%# \\r\\n�{]]",
																																			chars:      []rune{',', '=', '.', '%', '#', ' ', '\r', '\n', '�', '{', ']'},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 947, col: 23, offset: 29896},
																																	run: (*parser).callonLongHandAttributes755,
																																	expr: &seqExpr{
																																		pos: position{line: 947, col: 23, offset: 29896},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 945, col: 32, offset: 29864},
																																				val:        "�",
																																				ignoreCase: false,
																																				want:       "\"�\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 947, col: 51, offset: 29924},
																																				label: "ref",
																																				expr: &actionExpr{
																																					pos: position{line: 947, col: 56, offset: 29929},
																																					run: (*parser).callonLongHandAttributes759,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 947, col: 56, offset: 29929},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 947, col: 56, offset: 29929},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 945, col: 32, offset: 29864},
																																				val:        "�",
																																				ignoreCase: false,
																																				want:       "\"�\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 449, col: 5, offset: 14443},
																																	run: (*parser).callonLongHandAttributes763,
																																	expr: &seqExpr{
																																		pos: position{line: 449, col: 5, offset: 14443},
																																		exprs: []interface{}{
																																			&andCodeExpr{
																																				pos: position{line: 449, col: 5, offset: 14443},
																																				run: (*parser).callonLongHandAttributes765,
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 452, col: 5, offset: 14507},
																																				label: "element",
																																				expr: &choiceExpr{
																																					pos: position{line: 452, col: 14, offset: 14516},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 463, col: 25, offset: 14978},
																																							run: (*parser).callonLongHandAttributes768,
																																							expr: &seqExpr{
																																								pos: position{line: 463, col: 25, offset: 14978},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 463, col: 25, offset: 14978},
																																										val:        "{counter:",
																																										ignoreCase: false,
																																										want:       "\"{counter:\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 463, col: 37, offset: 14990},
																																										label: "name",
																																										expr: &actionExpr{
																																											pos: position{line: 118, col: 18, offset: 3399},
																																											run: (*parser).callonLongHandAttributes772,
																																											expr: &seqExpr{
																																												pos: position{line: 118, col: 18, offset: 3399},
																																												exprs: []interface{}{
																																													&charClassMatcher{
																																														pos:        position{line: 118, col: 18, offset: 3399},
																																														val:        "[_0-9\\pL]",
																																														chars:      []rune{'_'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																													&zeroOrMoreExpr{
																																														pos: position{line: 118, col: 28, offset: 3409},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 118, col: 29, offset: 3410},
																																															val:        "[-0-9\\pL]",
																																															chars:      []rune{'-'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 463, col: 56, offset: 15009},
																																										label: "start",
																																										expr: &zeroOrOneExpr{
																																											pos: position{line: 463, col: 62, offset: 15015},
																																											expr: &actionExpr{
																																												pos: position{line: 471, col: 17, offset: 15278},
																																												run: (*parser).callonLongHandAttributes779,
																																												expr: &seqExpr{
																																													pos: position{line: 471, col: 17, offset: 15278},
																																													exprs: []interface{}{
																																														&litMatcher{
																																															pos:        position{line: 471, col: 17, offset: 15278},
																																															val:        ":",
																																															ignoreCase: false,
																																															want:       "\":\"",
																																														},
																																														&labeledExpr{
																																															pos:   position{line: 471, col: 21, offset: 15282},
																																															label: "start",
																																															expr: &choiceExpr{
																																																pos: position{line: 471, col: 28, offset: 15289},
																																																alternatives: []interface{}{
																																																	&actionExpr{
																																																		pos: position{line: 471, col: 28, offset: 15289},
																																																		run: (*parser).callonLongHandAttributes784,
																																																		expr: &charClassMatcher{
																																																			pos:        position{line: 471, col: 28, offset: 15289},
																																																			val:        "[A-Za-z]",
																																																			ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																			ignoreCase: false,
																																																			inverted:   false,
																																																		},
																																																	},
																																																	&actionExpr{
																																																		pos: position{line: 473, col: 9, offset: 15343},
																																																		run: (*parser).callonLongHandAttributes786,
																																																		expr: &oneOrMoreExpr{
																																																			pos: position{line: 473, col: 9, offset: 15343},
																																																			expr: &charClassMatcher{
																																																				pos:        position{line: 473, col: 9, offset: 15343},
																																																				val:        "[0-9]",
																																																				ranges:     []rune{'0', '9'},
																																																				ignoreCase: false,
																																																				inverted:   false,
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 463, col: 78, offset: 15031},
																																										val:        "}",
																																										ignoreCase: false,
																																										want:       "\"}\"",
																																									},
																																								},
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 467, col: 25, offset: 15133},
																																							run: (*parser).callonLongHandAttributes790,
																																							expr: &seqExpr{
																																								pos: position{line: 467, col: 25, offset: 15133},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 467, col: 25, offset: 15133},
																																										val:        "{counter2:",
																																										ignoreCase: false,
																																										want:       "\"{counter2:\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 467, col: 38, offset: 15146},
																																										label: "name",
																																										expr: &actionExpr{
																																											pos: position{line: 118, col: 18, offset: 3399},
																																											run: (*parser).callonLongHandAttributes794,
																																											expr: &seqExpr{
																																												pos: position{line: 118, col: 18, offset: 3399},
																																												exprs: []interface{}{
																																													&charClassMatcher{
																																														pos:        position{line: 118, col: 18, offset: 3399},
																																														val:        "[_0-9\\pL]",
																																														chars:      []rune{'_'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																													&zeroOrMoreExpr{
																																														pos: position{line: 118, col: 28, offset: 3409},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 118, col: 29, offset: 3410},
																																															val:        "[-0-9\\pL]",
																																															chars:      []rune{'-'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 467, col: 57, offset: 15165},
																																										label: "start",
																																										expr: &zeroOrOneExpr{
																																											pos: position{line: 467, col: 63, offset: 15171},
																																											expr: &actionExpr{
																																												pos: position{line: 471, col: 17, offset: 15278},
																																												run: (*parser).callonLongHandAttributes801,
																																												expr: &seqExpr{
																																													pos: position{line: 471, col: 17, offset: 15278},
																																													exprs: []interface{}{
																																														&litMatcher{
																																															pos:        position{line: 471, col: 17, offset: 15278},
																																															val:        ":",
																																															ignoreCase: false,
																																															want:       "\":\"",
																																														},
																																														&labeledExpr{
																																															pos:   position{line: 471, col: 21, offset: 15282},
																																															label: "start",
																																															expr: &choiceExpr{
																																																pos: position{line: 471, col: 28, offset: 15289},
																																																alternatives: []interface{}{
																																																	&actionExpr{
																																																		pos: position{line: 471, col: 28, offset: 15289},
																																																		run: (*parser).callonLongHandAttributes806,
																																																		expr: &charClassMatcher{
																																																			pos:        position{line: 471, col: 28, offset: 15289},
																																																			val:        "[A-Za-z]",
																																																			ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																			ignoreCase: false,
																																																			inverted:   false,
																																																		},
																																																	},
																																																	&actionExpr{
																																																		pos: position{line: 473, col: 9, offset: 15343},
																																																		run: (*parser).callonLongHandAttributes808,
																																																		expr: &oneOrMoreExpr{
																																																			pos: position{line: 473, col: 9, offset: 15343},
																																																			expr: &charClassMatcher{
																																																				pos:        position{line: 473, col: 9, offset: 15343},
																																																				val:        "[0-9]",
																																																				ranges:     []rune{'0', '9'},
																																																				ignoreCase: false,
																																																				inverted:   false,
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 467, col: 79, offset: 15187},
																																										val:        "}",
																																										ignoreCase: false,
																																										want:       "\"}\"",
																																									},
																																								},
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 456, col: 31, offset: 14633},
																																							run: (*parser).callonLongHandAttributes812,
																																							expr: &seqExpr{
																																								pos: position{line: 456, col: 31, offset: 14633},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 456, col: 31, offset: 14633},
																																										val:        "{",
																																										ignoreCase: false,
																																										want:       "\"{\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 456, col: 35, offset: 14637},
																																										label: "name",
																																										expr: &actionExpr{
																																											pos: position{line: 118, col: 18, offset: 3399},
																																											run: (*parser).callonLongHandAttributes816,
																																											expr: &seqExpr{
																																												pos: position{line: 118, col: 18, offset: 3399},
																																												exprs: []interface{}{
																																													&charClassMatcher{
																																														pos:        position{line: 118, col: 18, offset: 3399},
																																														val:        "[_0-9\\pL]",
																																														chars:      []rune{'_'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																													&zeroOrMoreExpr{
																																														pos: position{line: 118, col: 28, offset: 3409},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 118, col: 29, offset: 3410},
																																															val:        "[-0-9\\pL]",
																																															chars:      []rune{'-'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 456, col: 54, offset: 14656},
																																										val:        "}",
																																										ignoreCase: false,
																																										want:       "\"}\"",
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 300, col: 12, offset: 9260},
																																	run: (*parser).callonLongHandAttributes822,
																																	expr: &litMatcher{
																																		pos:        position{line: 300, col: 12, offset: 9260},
																																		val:        "{",
																																		ignoreCase: false,
																																		want:       "\"{\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																												&andExpr{
																													pos: position{line: 303, col: 8, offset: 9343},
																													expr: &notExpr{
																														pos: position{line: 303, col: 10, offset: 9345},
																														expr: &seqExpr{
																															pos: position{line: 303, col: 12, offset: 9347},
																															exprs: []interface{}{
																																&zeroOrMoreExpr{
																																	pos: position{line: 303, col: 12, offset: 9347},
																																	expr: &choiceExpr{
																																		pos: position{line: 2878, col: 10, offset: 95044},
																																		alternatives: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2878, col: 10, offset: 95044},
																																				val:        " ",
																																				ignoreCase: false,
																																				want:       "\" \"",
																																			},
																																			&actionExpr{
																																				pos: position{line: 2878, col: 16, offset: 95050},
																																				run: (*parser).callonLongHandAttributes830,
																																				expr: &litMatcher{
																																					pos:        position{line: 2878, col: 16, offset: 95050},
																																					val:        "\t",
																																					ignoreCase: false,
																																					want:       "\"\\t\"",
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 303, col: 19, offset: 9354},
																																	val:        "=",
																																	ignoreCase: false,
																																	want:       "\"=\"",
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 278, col: 30, offset: 8489},
																				run: (*parser).callonLongHandAttributes833,
																				expr: &seqExpr{
																					pos: position{line: 278, col: 30, offset: 8489},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 278, col: 30, offset: 8489},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 278, col: 34, offset: 8493},
																							label: "role",
																							expr: &choiceExpr{
																								pos: position{line: 289, col: 5, offset: 8806},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 344, col: 5, offset: 10767},
																										run: (*parser).callonLongHandAttributes838,
																										expr: &seqExpr{
																											pos: position{line: 344, col: 5, offset: 10767},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 344, col: 5, offset: 10767},
																													val:        "'",
																													ignoreCase: false,
																													want:       "\"'\"",
																												},
																												&notExpr{
																													pos: position{line: 344, col: 9, offset: 10771},
																													expr: &litMatcher{
																														pos:        position{line: 344, col: 10, offset: 10772},
																														val:        "`",
																														ignoreCase: false,
																														want:       "\"`\"",
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 345, col: 5, offset: 10851},
																													label: "content",
																													expr: &actionExpr{
																														pos: position{line: 356, col: 5, offset: 11114},
																														run: (*parser).callonLongHandAttributes844,
																														expr: &labeledExpr{
																															pos:   position{line: 356, col: 5, offset: 11114},
																															label: "elements",
																															expr: &oneOrMoreExpr{
																																pos: position{line: 356, col: 14, offset: 11123},
																																expr: &choiceExpr{
																																	pos: position{line: 357, col: 9, offset: 11133},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2801, col: 14, offset: 92593},
																																			run: (*parser).callonLongHandAttributes848,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 2801, col: 14, offset: 92593},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2801, col: 14, offset: 92593},
																																					val:        "[0-9\\pL]",
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2878, col: 10, offset: 95044},
																																			val:        " ",
																																			ignoreCase: false,
																																			want:       "\" \"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 2878, col: 16, offset: 95050},
																																			run: (*parser).callonLongHandAttributes852,
																																			expr: &litMatcher{
																																				pos:        position{line: 2878, col: 16, offset: 95050},
																																				val:        "\t",
																																				ignoreCase: false,
																																				want:       "\"\\t\"",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 449, col: 5, offset: 14443},
																																			run: (*parser).callonLongHandAttributes854,
																																			expr: &seqExpr{
																																				pos: position{line: 449, col: 5, offset: 14443},
																																				exprs: []interface{}{
																																					&andCodeExpr{
																																						pos: position{line: 449, col: 5, offset: 14443},
																																						run: (*parser).callonLongHandAttributes856,
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 452, col: 5, offset: 14507},
																																						label: "element",
																																						expr: &choiceExpr{
																																							pos: position{line: 452, col: 14, offset: 14516},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 463, col: 25, offset: 14978},
																																									run: (*parser).callonLongHandAttributes859,
																																									expr: &seqExpr{
																																										pos: position{line: 463, col: 25, offset: 14978},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 463, col: 25, offset: 14978},
																																												val:        "{counter:",
																																												ignoreCase: false,
																																												want:       "\"{counter:\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 463, col: 37, offset: 14990},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 118, col: 18, offset: 3399},
																																													run: (*parser).callonLongHandAttributes863,
																																													expr: &seqExpr{
																																														pos: position{line: 118, col: 18, offset: 3399},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 118, col: 18, offset: 3399},
																																																val:        "[_0-9\\pL]",
																																																chars:      []rune{'_'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 118, col: 28, offset: 3409},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 118, col: 29, offset: 3410},
																																																	val:        "[-0-9\\pL]",
																																																	chars:      []rune{'-'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 463, col: 56, offset: 15009},
																																												label: "start",
																																												expr: &zeroOrOneExpr{
																																													pos: position{line: 463, col: 62, offset: 15015},
																																													expr: &actionExpr{
																																														pos: position{line: 471, col: 17, offset: 15278},
																																														run: (*parser).callonLongHandAttributes870,
																																														expr: &seqExpr{
																																															pos: position{line: 471, col: 17, offset: 15278},
																																															exprs: []interface{}{
																																																&litMatcher{
																																																	pos:        position{line: 471, col: 17, offset: 15278},
																																																	val:        ":",
																																																	ignoreCase: false,
																																																	want:       "\":\"",
																																																},
																																																&labeledExpr{
																																																	pos:   position{line: 471, col: 21, offset: 15282},
																																																	label: "start",
																																																	expr: &choiceExpr{
																																																		pos: position{line: 471, col: 28, offset: 15289},
																																																		alternatives: []interface{}{
																																																			&actionExpr{
																																																				pos: position{line: 471, col: 28, offset: 15289},
																																																				run: (*parser).callonLongHandAttributes875,
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 471, col: 28, offset: 15289},
																																																					val:        "[A-Za-z]",
																																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																			&actionExpr{
																																																				pos: position{line: 473, col: 9, offset: 15343},
																																																				run: (*parser).callonLongHandAttributes877,
																																																				expr: &oneOrMoreExpr{
																																																					pos: position{line: 473, col: 9, offset: 15343},
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 473, col: 9, offset: 15343},
																																																						val:        "[0-9]",
																																																						ranges:     []rune{'0', '9'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 463, col: 78, offset: 15031},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 467, col: 25, offset: 15133},
																																									run: (*parser).callonLongHandAttributes881,
																																									expr: &seqExpr{
																																										pos: position{line: 467, col: 25, offset: 15133},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 467, col: 25, offset: 15133},
																																												val:        "{counter2:",
																																												ignoreCase: false,
																																												want:       "\"{counter2:\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 467, col: 38, offset: 15146},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 118, col: 18, offset: 3399},
																																													run: (*parser).callonLongHandAttributes885,
																																													expr: &seqExpr{
																																														pos: position{line: 118, col: 18, offset: 3399},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 118, col: 18, offset: 3399},
																																																val:        "[_0-9\\pL]",
																																																chars:      []rune{'_'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 118, col: 28, offset: 3409},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 118, col: 29, offset: 3410},
																																																	val:        "[-0-9\\pL]",
																																																	chars:      []rune{'-'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 467, col: 57, offset: 15165},
																																												label: "start",
																																												expr: &zeroOrOneExpr{
																																													pos: position{line: 467, col: 63, offset: 15171},
																																													expr: &actionExpr{
																																														pos: position{line: 471, col: 17, offset: 15278},
																																														run: (*parser).callonLongHandAttributes892,
																																														expr: &seqExpr{
																																															pos: position{line: 471, col: 17, offset: 15278},
																																															exprs: []interface{}{
																																																&litMatcher{
																																																	pos:        position{line: 471, col: 17, offset: 15278},
																																																	val:        ":",
																																																	ignoreCase: false,
																																																	want:       "\":\"",
																																																},
																																																&labeledExpr{
																																																	pos:   position{line: 471, col: 21, offset: 15282},
																																																	label: "start",
																																																	expr: &choiceExpr{
																																																		pos: position{line: 471, col: 28, offset: 15289},
																																																		alternatives: []interface{}{
																																																			&actionExpr{
																																																				pos: position{line: 471, col: 28, offset: 15289},
																																																				run: (*parser).callonLongHandAttributes897,
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 471, col: 28, offset: 15289},
																																																					val:        "[A-Za-z]",
																																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																			&actionExpr{
																																																				pos: position{line: 473, col: 9, offset: 15343},
																																																				run: (*parser).callonLongHandAttributes899,
																																																				expr: &oneOrMoreExpr{
																																																					pos: position{line: 473, col: 9, offset: 15343},
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 473, col: 9, offset: 15343},
																																																						val:        "[0-9]",
																																																						ranges:     []rune{'0', '9'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 467, col: 79, offset: 15187},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 456, col: 31, offset: 14633},
																																									run: (*parser).callonLongHandAttributes903,
																																									expr: &seqExpr{
																																										pos: position{line: 456, col: 31, offset: 14633},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 456, col: 31, offset: 14633},
																																												val:        "{",
																																												ignoreCase: false,
																																												want:       "\"{\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 456, col: 35, offset: 14637},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 118, col: 18, offset: 3399},
																																													run: (*parser).callonLongHandAttributes907,
																																													expr: &seqExpr{
																																														pos: position{line: 118, col: 18, offset: 3399},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 118, col: 18, offset: 3399},
																																																val:        "[_0-9\\pL]",
																																																chars:      []rune{'_'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 118, col: 28, offset: 3409},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 118, col: 29, offset: 3410},
																																																	val:        "[-0-9\\pL]",
																																																	chars:      []rune{'-'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 456, col: 54, offset: 14656},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 360, col: 12, offset: 11202},
																																			run: (*parser).callonLongHandAttributes913,
																																			expr: &litMatcher{
																																				pos:        position{line: 360, col: 12, offset: 11202},
																																				val:        "\\'",
																																				ignoreCase: false,
																																				want:       "\"\\\\'\"",
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 363, col: 13, offset: 11304},
																																			val:        "'`",
																																			ignoreCase: false,
																																			want:       "\"'`\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 363, col: 20, offset: 11311},
																																			val:        "`'",
																																			ignoreCase: false,
																																			want:       "\"`'\"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 363, col: 27, offset: 11318},
																																			run: (*parser).callonLongHandAttributes917,
																																			expr: &litMatcher{
																																				pos:        position{line: 363, col: 27, offset: 11318},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 366, col: 12, offset: 11478},
																																			run: (*parser).callonLongHandAttributes919,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 366, col: 12, offset: 11478},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 366, col: 12, offset: 11478},
																																					val:        "[^\\r\\n\\\\\\ ]",
																																					chars:      []rune{'\r', '\n', '\\', '\'', ' '},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 346, col: 5, offset: 10902},
																													val:        "'",
																													ignoreCase: false,
																													want:       "\"'\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 374, col: 5, offset: 11713},
																										run: (*parser).callonLongHandAttributes923,
																										expr: &seqExpr{
																											pos: position{line: 374, col: 5, offset: 11713},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 374, col: 5, offset: 11713},
																													val:        "\"",
																													ignoreCase: false,
																													want:       "\"\\\"\"",
																												},
																												&notExpr{
																													pos: position{line: 374, col: 10, offset: 11718},
																													expr: &litMatcher{
																														pos:        position{line: 374, col: 11, offset: 11719},
																														val:        "`",
																														ignoreCase: false,
																														want:       "\"`\"",
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 375, col: 5, offset: 11798},
																													label: "content",
																													expr: &actionExpr{
																														pos: position{line: 385, col: 5, offset: 12078},
																														run: (*parser).callonLongHandAttributes929,
																														expr: &labeledExpr{
																															pos:   position{line: 385, col: 5, offset: 12078},
																															label: "elements",
																															expr: &oneOrMoreExpr{
																																pos: position{line: 385, col: 14, offset: 12087},
																																expr: &choiceExpr{
																																	pos: position{line: 386, col: 9, offset: 12097},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2801, col: 14, offset: 92593},
																																			run: (*parser).callonLongHandAttributes933,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 2801, col: 14, offset: 92593},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2801, col: 14, offset: 92593},
																																					val:        "[0-9\\pL]",
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2878, col: 10, offset: 95044},
																																			val:        " ",
																																			ignoreCase: false,
																																			want:       "\" \"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 2878, col: 16, offset: 95050},
																																			run: (*parser).callonLongHandAttributes937,
																																			expr: &litMatcher{
																																				pos:        position{line: 2878, col: 16, offset: 95050},
																																				val:        "\t",
																																				ignoreCase: false,
																																				want:       "\"\\t\"",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 449, col: 5, offset: 14443},
																																			run: (*parser).callonLongHandAttributes939,
																																			expr: &seqExpr{
																																				pos: position{line: 449, col: 5, offset: 14443},
																																				exprs: []interface{}{
																																					&andCodeExpr{
																																						pos: position{line: 449, col: 5, offset: 14443},
																																						run: (*parser).callonLongHandAttributes941,
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 452, col: 5, offset: 14507},
																																						label: "element",
																																						expr: &choiceExpr{
																																							pos: position{line: 452, col: 14, offset: 14516},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 463, col: 25, offset: 14978},
																																									run: (*parser).callonLongHandAttributes944,
																																									expr: &seqExpr{
																																										pos: position{line: 463, col: 25, offset: 14978},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 463, col: 25, offset: 14978},
																																												val:        "{counter:",
																																												ignoreCase: false,
																																												want:       "\"{counter:\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 463, col: 37, offset: 14990},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 118, col: 18, offset: 3399},
																																													run: (*parser).callonLongHandAttributes948,
																																													expr: &seqExpr{
																																														pos: position{line: 118, col: 18, offset: 3399},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 118, col: 18, offset: 3399},
																																																val:        "[_0-9\\pL]",
																																																chars:      []rune{'_'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 118, col: 28, offset: 3409},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 118, col: 29, offset: 3410},
																																																	val:        "[-0-9\\pL]",
																																																	chars:      []rune{'-'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 463, col: 56, offset: 15009},
																																												label: "start",
																																												expr: &zeroOrOneExpr{
																																													pos: position{line: 463, col: 62, offset: 15015},
																																													expr: &actionExpr{
																																														pos: position{line: 471, col: 17, offset: 15278},
																																														run: (*parser).callonLongHandAttributes955,
																																														expr: &seqExpr{
																																															pos: position{line: 471, col: 17, offset: 15278},
																																															exprs: []interface{}{
																																																&litMatcher{
																																																	pos:        position{line: 471, col: 17, offset: 15278},
																																																	val:        ":",
																																																	ignoreCase: false,
																																																	want:       "\":\"",
																																																},
																																																&labeledExpr{
																																																	pos:   position{line: 471, col: 21, offset: 15282},
																																																	label: "start",
																																																	expr: &choiceExpr{
																																																		pos: position{line: 471, col: 28, offset: 15289},
																																																		alternatives: []interface{}{
																																																			&actionExpr{
																																																				pos: position{line: 471, col: 28, offset: 15289},
																																																				run: (*parser).callonLongHandAttributes960,
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 471, col: 28, offset: 15289},
																																																					val:        "[A-Za-z]",
																																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																			&actionExpr{
																																																				pos: position{line: 473, col: 9, offset: 15343},
																																																				run: (*parser).callonLongHandAttributes962,
																																																				expr: &oneOrMoreExpr{
																																																					pos: position{line: 473, col: 9, offset: 15343},
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 473, col: 9, offset: 15343},
																																																						val:        "[0-9]",
																																																						ranges:     []rune{'0', '9'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 463, col: 78, offset: 15031},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 467, col: 25, offset: 15133},
																																									run: (*parser).callonLongHandAttributes966,
																																									expr: &seqExpr{
																																										pos: position{line: 467, col: 25, offset: 15133},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 467, col: 25, offset: 15133},
																																												val:        "{counter2:",
																																												ignoreCase: false,
																																												want:       "\"{counter2:\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 467, col: 38, offset: 15146},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 118, col: 18, offset: 3399},
																																													run: (*parser).callonLongHandAttributes970,
																																													expr: &seqExpr{
																																														pos: position{line: 118, col: 18, offset: 3399},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 118, col: 18, offset: 3399},
																																																val:        "[_0-9\\pL]",
																																																chars:      []rune{'_'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 118, col: 28, offset: 3409},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 118, col: 29, offset: 3410},
																																																	val:        "[-0-9\\pL]",
																																																	chars:      []rune{'-'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 467, col: 57, offset: 15165},
																																												label: "start",
																																												expr: &zeroOrOneExpr{
																																													pos: position{line: 467, col: 63, offset: 15171},
																																													expr: &actionExpr{
																																														pos: position{line: 471, col: 17, offset: 15278},
																																														run: (*parser).callonLongHandAttributes977,
																																														expr: &seqExpr{
																																															pos: position{line: 471, col: 17, offset: 15278},
																																															exprs: []interface{}{
																																																&litMatcher{
																																																	pos:        position{line: 471, col: 17, offset: 15278},
																																																	val:        ":",
																																																	ignoreCase: false,
																																																	want:       "\":\"",
																																																},
																																																&labeledExpr{
																																																	pos:   position{line: 471, col: 21, offset: 15282},
																																																	label: "start",
																																																	expr: &choiceExpr{
																																																		pos: position{line: 471, col: 28, offset: 15289},
																																																		alternatives: []interface{}{
																																																			&actionExpr{
																																																				pos: position{line: 471, col: 28, offset: 15289},
																																																				run: (*parser).callonLongHandAttributes982,
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 471, col: 28, offset: 15289},
																																																					val:        "[A-Za-z]",
																																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																			&actionExpr{
																																																				pos: position{line: 473, col: 9, offset: 15343},
																																																				run: (*parser).callonLongHandAttributes984,
																																																				expr: &oneOrMoreExpr{
																																																					pos: position{line: 473, col: 9, offset: 15343},
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 473, col: 9, offset: 15343},
																																																						val:        "[0-9]",
																																																						ranges:     []rune{'0', '9'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 467, col: 79, offset: 15187},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 456, col: 31, offset: 14633},
																																									run: (*parser).callonLongHandAttributes988,
																																									expr: &seqExpr{
																																										pos: position{line: 456, col: 31, offset: 14633},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 456, col: 31, offset: 14633},
																																												val:        "{",
																																												ignoreCase: false,
																																												want:       "\"{\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 456, col: 35, offset: 14637},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 118, col: 18, offset: 3399},
																																													run: (*parser).callonLongHandAttributes992,
																																													expr: &seqExpr{
																																														pos: position{line: 118, col: 18, offset: 3399},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 118, col: 18, offset: 3399},
																																																val:        "[_0-9\\pL]",
																																																chars:      []rune{'_'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 118, col: 28, offset: 3409},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 118, col: 29, offset: 3410},
																																																	val:        "[-0-9\\pL]",
																																																	chars:      []rune{'-'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 456, col: 54, offset: 14656},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 389, col: 12, offset: 12166},
																																			run: (*parser).callonLongHandAttributes998,
																																			expr: &litMatcher{
																																				pos:        position{line: 389, col: 12, offset: 12166},
																																				val:        "\\\"",
																																				ignoreCase: false,
																																				want:       "\"\\\\\\\"\"",
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 392, col: 13, offset: 12268},
																																			val:        "\"`",
																																			ignoreCase: false,
																																			want:       "\"\\\"`\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 392, col: 21, offset: 12276},
																																			val:        "`\"",
																																			ignoreCase: false,
																																			want:       "\"`\\\"\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 392, col: 29, offset: 12284},
																																			val:        "\\",
																																			ignoreCase: false,
																																			want:       "\"\\\\\"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 392, col: 35, offset: 12290},
																																			run: (*parser).callonLongHandAttributes1003,
																																			expr: &litMatcher{
																																				pos:        position{line: 392, col: 35, offset: 12290},
																																				val:        "`",
																																				ignoreCase: false,
																																				want:       "\"`\"",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 395, col: 12, offset: 12473},
																																			run: (*parser).callonLongHandAttributes1005,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 395, col: 12, offset: 12473},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 395, col: 12, offset: 12473},
																																					val:        "[^\\r\\n\\\\\"` ]",
																																					chars:      []rune{'\r', '\n', '\\', '"', '`', ' '},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 376, col: 5, offset: 11849},
																													val:        "\"",
																													ignoreCase: false,
																													want:       "\"\\\"\"",
																												},
																												&andExpr{
																													pos: position{line: 376, col: 10, offset: 11854},
																													expr: &notExpr{
																														pos: position{line: 376, col: 12, offset: 11856},
																														expr: &seqExpr{
																															pos: position{line: 376, col: 14, offset: 11858},
																															exprs: []interface{}{
																																&zeroOrMoreExpr{
																																	pos: position{line: 376, col: 14, offset: 11858},
																																	expr: &choiceExpr{
																																		pos: position{line: 2878, col: 10, offset: 95044},
																																		alternatives: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2878, col: 10, offset: 95044},
																																				val:        " ",
																																				ignoreCase: false,
																																				want:       "\" \"",
																																			},
																																			&actionExpr{
																																				pos: position{line: 2878, col: 16, offset: 95050},
																																				run: (*parser).callonLongHandAttributes1015,
																																				expr: &litMatcher{
																																					pos:        position{line: 2878, col: 16, offset: 95050},
																																					val:        "\t",
																																					ignoreCase: false,
																																					want:       "\"\\t\"",
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 376, col: 21, offset: 11865},
																																	val:        "=",
																																	ignoreCase: false,
																																	want:       "\"=\"",
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 291, col: 7, offset: 8880},
																										run: (*parser).callonLongHandAttributes1018,
																										expr: &seqExpr{
																											pos: position{line: 291, col: 7, offset: 8880},
																											exprs: []interface{}{
																												&labeledExpr{
																													pos:   position{line: 291, col: 7, offset: 8880},
																													label: "elements",
																													expr: &oneOrMoreExpr{
																														pos: position{line: 291, col: 16, offset: 8889},
																														expr: &choiceExpr{
																															pos: position{line: 294, col: 9, offset: 9071},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 294, col: 10, offset: 9072},
																																	run: (*parser).callonLongHandAttributes1023,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 294, col: 10, offset: 9072},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 294, col: 10, offset: 9072},
																																			val:        "[^,=.%# \\r\\n�{]]",
																																			chars:      []rune{',', '=', '.', '%', '#', ' ', '\r', '\n', '�', '{', ']'},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 947, col: 23, offset: 29896},
																																	run: (*parser).callonLongHandAttributes1026,
																																	expr: &seqExpr{
																																		pos: position{line: 947, col: 23, offset: 29896},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 945, col: 32, offset: 29864},
																																				val:        "�",
																																				ignoreCase: false,
																																				want:       "\"�\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 947, col: 51, offset: 29924},
																																				label: "ref",
																																				expr: &actionExpr{
																																					pos: position{line: 947, col: 56, offset: 29929},
																																					run: (*parser).callonLongHandAttributes1030,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 947, col: 56, offset: 29929},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 947, col: 56, offset: 29929},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 945, col: 32, offset: 29864},
																																				val:        "�",
																																				ignoreCase: false,
																																				want:       "\"�\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 449, col: 5, offset: 14443},
																																	run: (*parser).callonLongHandAttributes1034,
																																	expr: &seqExpr{
																																		pos: position{line: 449, col: 5, offset: 14443},
																																		exprs: []interface{}{
																																			&andCodeExpr{
																																				pos: position{line: 449, col: 5, offset: 14443},
																																				run: (*parser).callonLongHandAttributes1036,
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 452, col: 5, offset: 14507},
																																				label: "element",
																																				expr: &choiceExpr{
																																					pos: position{line: 452, col: 14, offset: 14516},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 463, col: 25, offset: 14978},
																																							run: (*parser).callonLongHandAttributes1039,
																																							expr: &seqExpr{
																																								pos: position{line: 463, col: 25, offset: 14978},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 463, col: 25, offset: 14978},
																																										val:        "{counter:",
																																										ignoreCase: false,
																																										want:       "\"{counter:\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 463, col: 37, offset: 14990},
																																										label: "name",
																																										expr: &actionExpr{
																																											pos: position{line: 118, col: 18, offset: 3399},
																																											run: (*parser).callonLongHandAttributes1043,
																																											expr: &seqExpr{
																																												pos: position{line: 118, col: 18, offset: 3399},
																																												exprs: []interface{}{
																																													&charClassMatcher{
																																														pos:        position{line: 118, col: 18, offset: 3399},
																																														val:        "[_0-9\\pL]",
																																														chars:      []rune{'_'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																													&zeroOrMoreExpr{
																																														pos: position{line: 118, col: 28, offset: 3409},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 118, col: 29, offset: 3410},
																																															val:        "[-0-9\\pL]",
																																															chars:      []rune{'-'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 463, col: 56, offset: 15009},
																																										label: "start",
																																										expr: &zeroOrOneExpr{
																																											pos: position{line: 463, col: 62, offset: 15015},
																																											expr: &actionExpr{
																																												pos: position{line: 471, col: 17, offset: 15278},
																																												run: (*parser).callonLongHandAttributes1050,
																																												expr: &seqExpr{
																																													pos: position{line: 471, col: 17, offset: 15278},
																																													exprs: []interface{}{
																																														&litMatcher{
																																															pos:        position{line: 471, col: 17, offset: 15278},
																																															val:        ":",
																																															ignoreCase: false,
																																															want:       "\":\"",
																																														},
																																														&labeledExpr{
																																															pos:   position{line: 471, col: 21, offset: 15282},
																																															label: "start",
																																															expr: &choiceExpr{
																																																pos: position{line: 471, col: 28, offset: 15289},
																																																alternatives: []interface{}{
																																																	&actionExpr{
																																																		pos: position{line: 471, col: 28, offset: 15289},
																																																		run: (*parser).callonLongHandAttributes1055,
																																																		expr: &charClassMatcher{
																																																			pos:        position{line: 471, col: 28, offset: 15289},
																																																			val:        "[A-Za-z]",
																																																			ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																			ignoreCase: false,
																																																			inverted:   false,
																																																		},
																																																	},
																																																	&actionExpr{
																																																		pos: position{line: 473, col: 9, offset: 15343},
																																																		run: (*parser).callonLongHandAttributes1057,
																																																		expr: &oneOrMoreExpr{
																																																			pos: position{line: 473, col: 9, offset: 15343},
																																																			expr: &charClassMatcher{
																																																				pos:        position{line: 473, col: 9, offset: 15343},
																																																				val:        "[0-9]",
																																																				ranges:     []rune{'0', '9'},
																																																				ignoreCase: false,
																																																				inverted:   false,
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 463, col: 78, offset: 15031},
																																										val:        "}",
																																										ignoreCase: false,
																																										want:       "\"}\"",
																																									},
																																								},
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 467, col: 25, offset: 15133},
																																							run: (*parser).callonLongHandAttributes1061,
																																							expr: &seqExpr{
																																								pos: position{line: 467, col: 25, offset: 15133},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 467, col: 25, offset: 15133},
																																										val:        "{counter2:",
																																										ignoreCase: false,
																																										want:       "\"{counter2:\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 467, col: 38, offset: 15146},
																																										label: "name",
																																										expr: &actionExpr{
																																											pos: position{line: 118, col: 18, offset: 3399},
																																											run: (*parser).callonLongHandAttributes1065,
																																											expr: &seqExpr{
																																												pos: position{line: 118, col: 18, offset: 3399},
																																												exprs: []interface{}{
																																													&charClassMatcher{
																																														pos:        position{line: 118, col: 18, offset: 3399},
																																														val:        "[_0-9\\pL]",
																																														chars:      []rune{'_'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																													&zeroOrMoreExpr{
																																														pos: position{line: 118, col: 28, offset: 3409},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 118, col: 29, offset: 3410},
																																															val:        "[-0-9\\pL]",
																																															chars:      []rune{'-'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 467, col: 57, offset: 15165},
																																										label: "start",
																																										expr: &zeroOrOneExpr{
																																											pos: position{line: 467, col: 63, offset: 15171},
																																											expr: &actionExpr{
																																												pos: position{line: 471, col: 17, offset: 15278},
																																												run: (*parser).callonLongHandAttributes1072,
																																												expr: &seqExpr{
																																													pos: position{line: 471, col: 17, offset: 15278},
																																													exprs: []interface{}{
																																														&litMatcher{
																																															pos:        position{line: 471, col: 17, offset: 15278},
																																															val:        ":",
																																															ignoreCase: false,
																																															want:       "\":\"",
																																														},
																																														&labeledExpr{
																																															pos:   position{line: 471, col: 21, offset: 15282},
																																															label: "start",
																																															expr: &choiceExpr{
																																																pos: position{line: 471, col: 28, offset: 15289},
																																																alternatives: []interface{}{
																																																	&actionExpr{
																																																		pos: position{line: 471, col: 28, offset: 15289},
																																																		run: (*parser).callonLongHandAttributes1077,
																																																		expr: &charClassMatcher{
																																																			pos:        position{line: 471, col: 28, offset: 15289},
																																																			val:        "[A-Za-z]",
																																																			ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																			ignoreCase: false,
																																																			inverted:   false,
																																																		},
																																																	},
																																																	&actionExpr{
																																																		pos: position{line: 473, col: 9, offset: 15343},
																																																		run: (*parser).callonLongHandAttributes1079,
																																																		expr: &oneOrMoreExpr{
																																																			pos: position{line: 473, col: 9, offset: 15343},
																																																			expr: &charClassMatcher{
																																																				pos:        position{line: 473, col: 9, offset: 15343},
																																																				val:        "[0-9]",
																																																				ranges:     []rune{'0', '9'},
																																																				ignoreCase: false,
																																																				inverted:   false,
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 467, col: 79, offset: 15187},
																																										val:        "}",
																																										ignoreCase: false,
																																										want:       "\"}\"",
																																									},
																																								},
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 456, col: 31, offset: 14633},
																																							run: (*parser).callonLongHandAttributes1083,
																																							expr: &seqExpr{
																																								pos: position{line: 456, col: 31, offset: 14633},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 456, col: 31, offset: 14633},
																																										val:        "{",
																																										ignoreCase: false,
																																										want:       "\"{\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 456, col: 35, offset: 14637},
																																										label: "name",
																																										expr: &actionExpr{
																																											pos: position{line: 118, col: 18, offset: 3399},
																																											run: (*parser).callonLongHandAttributes1087,
																																											expr: &seqExpr{
																																												pos: position{line: 118, col: 18, offset: 3399},
																																												exprs: []interface{}{
																																													&charClassMatcher{
																																														pos:        position{line: 118, col: 18, offset: 3399},
																																														val:        "[_0-9\\pL]",
																																														chars:      []rune{'_'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																													&zeroOrMoreExpr{
																																														pos: position{line: 118, col: 28, offset: 3409},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 118, col: 29, offset: 3410},
																																															val:        "[-0-9\\pL]",
																																															chars:      []rune{'-'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 456, col: 54, offset: 14656},
																																										val:        "}",
																																										ignoreCase: false,
																																										want:       "\"}\"",
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 300, col: 12, offset: 9260},
																																	run: (*parser).callonLongHandAttributes1093,
																																	expr: &litMatcher{
																																		pos:        position{line: 300, col: 12, offset: 9260},
																																		val:        "{",
																																		ignoreCase: false,
																																		want:       "\"{\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																												&andExpr{
																													pos: position{line: 303, col: 8, offset: 9343},
																													expr: &notExpr{
																														pos: position{line: 303, col: 10, offset: 9345},
																														expr: &seqExpr{
																															pos: position{line: 303, col: 12, offset: 9347},
																															exprs: []interface{}{
																																&zeroOrMoreExpr{
																																	pos: position{line: 303, col: 12, offset: 9347},
																																	expr: &choiceExpr{
																																		pos: position{line: 2878, col: 10, offset: 95044},
																																		alternatives: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2878, col: 10, offset: 95044},
																																				val:        " ",
																																				ignoreCase: false,
																																				want:       "\" \"",
																																			},
																																			&actionExpr{
																																				pos: position{line: 2878, col: 16, offset: 95050},
																																				run: (*parser).callonLongHandAttributes1101,
																																				expr: &litMatcher{
																																					pos:        position{line: 2878, col: 16, offset: 95050},
																																					val:        "\t",
																																					ignoreCase: false,
																																					want:       "\"\\t\"",
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 303, col: 19, offset: 9354},
																																	val:        "=",
																																	ignoreCase: false,
																																	want:       "\"=\"",
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 252, col: 8, offset: 7764},
												expr: &seqExpr{
													pos: position{line: 252, col: 9, offset: 7765},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 252, col: 9, offset: 7765},
															val:        ",",
															ignoreCase: false,
															want:       "\",\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 252, col: 13, offset: 7769},
															expr: &choiceExpr{
																pos: position{line: 2878, col: 10, offset: 95044},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2878, col: 10, offset: 95044},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																	&actionExpr{
																		pos: position{line: 2878, col: 16, offset: 95050},
																		run: (*parser).callonLongHandAttributes1110,
																		expr: &litMatcher{
																			pos:        position{line: 2878, col: 16, offset: 95050},
																			val:        "\t",
																			ignoreCase: false,
																			want:       "\"\\t\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
											&andCodeExpr{
												pos: position{line: 253, col: 5, offset: 7783},
												run: (*parser).callonLongHandAttributes1112,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 226, col: 5, offset: 6890},
							label: "otherAttributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 226, col: 21, offset: 6906},
								expr: &choiceExpr{
									pos: position{line: 226, col: 22, offset: 6907},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 226, col: 22, offset: 6907},
											name: "PositionalAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 226, col: 44, offset: 6929},
											name: "NamedAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 227, col: 5, offset: 6950},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "PositionalAttribute",
			pos:  position{line: 307, col: 1, offset: 9431},
			expr: &choiceExpr{
				pos: position{line: 307, col: 24, offset: 9454},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 308, col: 5, offset: 9460},
						run: (*parser).callonPositionalAttribute2,
						expr: &seqExpr{
							pos: position{line: 308, col: 5, offset: 9460},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 308, col: 5, offset: 9460},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 308, col: 12, offset: 9467},
										name: "AttributeRawValue",
									},
								},
								&choiceExpr{
									pos: position{line: 308, col: 32, offset: 9487},
									alternatives: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 308, col: 32, offset: 9487},
											expr: &seqExpr{
												pos: position{line: 308, col: 33, offset: 9488},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 308, col: 33, offset: 9488},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 308, col: 37, offset: 9492},
														expr: &choiceExpr{
															pos: position{line: 2878, col: 10, offset: 95044},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2878, col: 10, offset: 95044},
																	val:        " ",
																	ignoreCase: false,
																	want:       "\" \"",
																},
																&actionExpr{
																	pos: position{line: 2878, col: 16, offset: 95050},
																	run: (*parser).callonPositionalAttribute13,
																	expr: &litMatcher{
																		pos:        position{line: 2878, col: 16, offset: 95050},
																		val:        "\t",
																		ignoreCase: false,
																		want:       "\"\\t\"",
																	},
																},
															},
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 308, col: 48, offset: 9503},
											expr: &litMatcher{
												pos:        position{line: 308, col: 49, offset: 9504},
												val:        "]",
												ignoreCase: false,
												want:       "\"]\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 313, col: 6, offset: 9741},
						run: (*parser).callonPositionalAttribute17,
						expr: &seqExpr{
							pos: position{line: 313, col: 6, offset: 9741},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 313, col: 6, offset: 9741},
									label: "value",
									expr: &seqExpr{
										pos: position{line: 313, col: 13, offset: 9748},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 313, col: 13, offset: 9748},
												expr: &choiceExpr{
													pos: position{line: 2878, col: 10, offset: 95044},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2878, col: 10, offset: 95044},
															val:        " ",
															ignoreCase: false,
															want:       "\" \"",
														},
														&actionExpr{
															pos: position{line: 2878, col: 16, offset: 95050},
															run: (*parser).callonPositionalAttribute24,
															expr: &litMatcher{
																pos:        position{line: 2878, col: 16, offset: 95050},
																val:        "\t",
																ignoreCase: false,
																want:       "\"\\t\"",
															},
														},
													},
												},
											},
											&choiceExpr{
												pos: position{line: 313, col: 21, offset: 9756},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 313, col: 22, offset: 9757},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 313, col: 22, offset: 9757},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 313, col: 26, offset: 9761},
																expr: &choiceExpr{
																	pos: position{line: 2878, col: 10, offset: 95044},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2878, col: 10, offset: 95044},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																		&actionExpr{
																			pos: position{line: 2878, col: 16, offset: 95050},
																			run: (*parser).callonPositionalAttribute32,
																			expr: &litMatcher{
																				pos:        position{line: 2878, col: 16, offset: 95050},
																				val:        "\t",
																				ignoreCase: false,
																				want:       "\"\\t\"",
																			},
																		},
																	},
																},
															},
														},
													},
													&andExpr{
														pos: position{line: 313, col: 36, offset: 9771},
														expr: &litMatcher{
															pos:        position{line: 313, col: 37, offset: 9772},
															val:        "]",
															ignoreCase: false,
															want:       "\"]\"",
														},
													},
												},
											},
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 314, col: 5, offset: 9782},
									run: (*parser).callonPositionalAttribute36,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttribute",
			pos:  position{line: 324, col: 1, offset: 10097},
			expr: &actionExpr{
				pos: position{line: 324, col: 19, offset: 10115},
				run: (*parser).callonNamedAttribute1,
				expr: &seqExpr{
					pos: position{line: 324, col: 19, offset: 10115},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 324, col: 19, offset: 10115},
							label: "key",
							expr: &actionExpr{
								pos: position{line: 329, col: 22, offset: 10426},
								run: (*parser).callonNamedAttribute4,
								expr: &seqExpr{
									pos: position{line: 329, col: 22, offset: 10426},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 329, col: 22, offset: 10426},
											expr: &choiceExpr{
												pos: position{line: 2878, col: 10, offset: 95044},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2878, col: 10, offset: 95044},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
													&actionExpr{
														pos: position{line: 2878, col: 16, offset: 95050},
														run: (*parser).callonNamedAttribute9,
														expr: &litMatcher{
															pos:        position{line: 2878, col: 16, offset: 95050},
															val:        "\t",
															ignoreCase: false,
															want:       "\"\\t\"",
														},
													},
												},
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 329, col: 29, offset: 10433},
											expr: &charClassMatcher{
												pos:        position{line: 329, col: 29, offset: 10433},
												val:        "[^\\r\\n=,]]",
												chars:      []rune{'\r', '\n', '=', ',', ']'},
												ignoreCase: false,
												inverted:   true,
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 329, col: 42, offset: 10446},
											expr: &choiceExpr{
												pos: position{line: 2878, col: 10, offset: 95044},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2878, col: 10, offset: 95044},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
													&actionExpr{
														pos: position{line: 2878, col: 16, offset: 95050},
														run: (*parser).callonNamedAttribute16,
														expr: &litMatcher{
															pos:        position{line: 2878, col: 16, offset: 95050},
															val:        "\t",
															ignoreCase: false,
															want:       "\"\\t\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 324, col: 43, offset: 10139},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 324, col: 47, offset: 10143},
							expr: &choiceExpr{
								pos: position{line: 2878, col: 10, offset: 95044},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 2878, col: 10, offset: 95044},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
									&actionExpr{
										pos: position{line: 2878, col: 16, offset: 95050},
										run: (*parser).callonNamedAttribute22,
										expr: &litMatcher{
											pos:        position{line: 2878, col: 16, offset: 95050},
											val:        "\t",
											ignoreCase: false,
											want:       "\"\\t\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 324, col: 54, offset: 10150},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 324, col: 61, offset: 10157},
								name: "AttributeRawValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 324, col: 80, offset: 10176},
							expr: &seqExpr{
								pos: position{line: 324, col: 81, offset: 10177},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 324, col: 81, offset: 10177},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 324, col: 85, offset: 10181},
										expr: &choiceExpr{
											pos: position{line: 2878, col: 10, offset: 95044},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 2878, col: 10, offset: 95044},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
												&actionExpr{
													pos: position{line: 2878, col: 16, offset: 95050},
													run: (*parser).callonNamedAttribute32,
													expr: &litMatcher{
														pos:        position{line: 2878, col: 16, offset: 95050},
														val:        "\t",
														ignoreCase: false,
														want:       "\"\\t\"",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeRawValue",
			pos:  position{line: 333, col: 1, offset: 10516},
			expr: &actionExpr{
				pos: position{line: 334, col: 5, offset: 10542},
				run: (*parser).callonAttributeRawValue1,
				expr: &seqExpr{
					pos: position{line: 334, col: 5, offset: 10542},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 334, col: 5, offset: 10542},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 335, col: 9, offset: 10558},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 344, col: 5, offset: 10767},
										run: (*parser).callonAttributeRawValue5,
										expr: &seqExpr{
											pos: position{line: 344, col: 5, offset: 10767},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 344, col: 5, offset: 10767},
													val:        "'",
													ignoreCase: false,
													want:       "\"'\"",
												},
												&notExpr{
													pos: position{line: 344, col: 9, offset: 10771},
													expr: &litMatcher{
														pos:        position{line: 344, col: 10, offset: 10772},
														val:        "`",
														ignoreCase: false,
														want:       "\"`\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 345, col: 5, offset: 10851},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 356, col: 5, offset: 11114},
														run: (*parser).callonAttributeRawValue11,
														expr: &labeledExpr{
															pos:   position{line: 356, col: 5, offset: 11114},
															label: "elements",
															expr: &oneOrMoreExpr{
																pos: position{line: 356, col: 14, offset: 11123},
																expr: &choiceExpr{
																	pos: position{line: 357, col: 9, offset: 11133},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2801, col: 14, offset: 92593},
																			run: (*parser).callonAttributeRawValue15,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2801, col: 14, offset: 92593},
																				expr: &charClassMatcher{
																					pos:        position{line: 2801, col: 14, offset: 92593},
																					val:        "[0-9\\pL]",
																					ranges:     []rune{'0', '9'},
																					classes:    []*unicode.RangeTable{rangeTable("L")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2878, col: 10, offset: 95044},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																		&actionExpr{
																			pos: position{line: 2878, col: 16, offset: 95050},
																			run: (*parser).callonAttributeRawValue19,
																			expr: &litMatcher{
																				pos:        position{line: 2878, col: 16, offset: 95050},
																				val:        "\t",
																				ignoreCase: false,
																				want:       "\"\\t\"",
																			},
																		},
																		&actionExpr{
																			pos: position{line: 449, col: 5, offset: 14443},
																			run: (*parser).callonAttributeRawValue21,
																			expr: &seqExpr{
																				pos: position{line: 449, col: 5, offset: 14443},
																				exprs: []interface{}{
																					&andCodeExpr{
																						pos: position{line: 449, col: 5, offset: 14443},
																						run: (*parser).callonAttributeRawValue23,
																					},
																					&labeledExpr{
																						pos:   position{line: 452, col: 5, offset: 14507},
																						label: "element",
																						expr: &choiceExpr{
																							pos: position{line: 452, col: 14, offset: 14516},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 463, col: 25, offset: 14978},
																									run: (*parser).callonAttributeRawValue26,
																									expr: &seqExpr{
																										pos: position{line: 463, col: 25, offset: 14978},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 463, col: 25, offset: 14978},
																												val:        "{counter:",
																												ignoreCase: false,
																												want:       "\"{counter:\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 463, col: 37, offset: 14990},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 118, col: 18, offset: 3399},
																													run: (*parser).callonAttributeRawValue30,
																													expr: &seqExpr{
																														pos: position{line: 118, col: 18, offset: 3399},
																														exprs: []interface{}{
																															&charClassMatcher{
																																pos:        position{line: 118, col: 18, offset: 3399},
																																val:        "[_0-9\\pL]",
																																chars:      []rune{'_'},
																																ranges:     []rune{'0', '9'},
																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 118, col: 28, offset: 3409},
																																expr: &charClassMatcher{
																																	pos:        position{line: 118, col: 29, offset: 3410},
																																	val:        "[-0-9\\pL]",
																																	chars:      []rune{'-'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 463, col: 56, offset: 15009},
																												label: "start",
																												expr: &zeroOrOneExpr{
																													pos: position{line: 463, col: 62, offset: 15015},
																													expr: &actionExpr{
																														pos: position{line: 471, col: 17, offset: 15278},
																														run: (*parser).callonAttributeRawValue37,
																														expr: &seqExpr{
																															pos: position{line: 471, col: 17, offset: 15278},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 471, col: 17, offset: 15278},
																																	val:        ":",
																																	ignoreCase: false,
																																	want:       "\":\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 471, col: 21, offset: 15282},
																																	label: "start",
																																	expr: &choiceExpr{
																																		pos: position{line: 471, col: 28, offset: 15289},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 471, col: 28, offset: 15289},
																																				run: (*parser).callonAttributeRawValue42,
																																				expr: &charClassMatcher{
																																					pos:        position{line: 471, col: 28, offset: 15289},
																																					val:        "[A-Za-z]",
																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 473, col: 9, offset: 15343},
																																				run: (*parser).callonAttributeRawValue44,
																																				expr: &oneOrMoreExpr{
																																					pos: position{line: 473, col: 9, offset: 15343},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 473, col: 9, offset: 15343},
																																						val:        "[0-9]",
																																						ranges:     []rune{'0', '9'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 463, col: 78, offset: 15031},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 467, col: 25, offset: 15133},
																									run: (*parser).callonAttributeRawValue48,
																									expr: &seqExpr{
																										pos: position{line: 467, col: 25, offset: 15133},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 467, col: 25, offset: 15133},
																												val:        "{counter2:",
																												ignoreCase: false,
																												want:       "\"{counter2:\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 467, col: 38, offset: 15146},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 118, col: 18, offset: 3399},
																													run: (*parser).callonAttributeRawValue52,
																													expr: &seqExpr{
																														pos: position{line: 118, col: 18, offset: 3399},
																														exprs: []interface{}{
																															&charClassMatcher{
																																pos:        position{line: 118, col: 18, offset: 3399},
																																val:        "[_0-9\\pL]",
																																chars:      []rune{'_'},
																																ranges:     []rune{'0', '9'},
																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 118, col: 28, offset: 3409},
																																expr: &charClassMatcher{
																																	pos:        position{line: 118, col: 29, offset: 3410},
																																	val:        "[-0-9\\pL]",
																																	chars:      []rune{'-'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 467, col: 57, offset: 15165},
																												label: "start",
																												expr: &zeroOrOneExpr{
																													pos: position{line: 467, col: 63, offset: 15171},
																													expr: &actionExpr{
																														pos: position{line: 471, col: 17, offset: 15278},
																														run: (*parser).callonAttributeRawValue59,
																														expr: &seqExpr{
																															pos: position{line: 471, col: 17, offset: 15278},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 471, col: 17, offset: 15278},
																																	val:        ":",
																																	ignoreCase: false,
																																	want:       "\":\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 471, col: 21, offset: 15282},
																																	label: "start",
																																	expr: &choiceExpr{
																																		pos: position{line: 471, col: 28, offset: 15289},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 471, col: 28, offset: 15289},
																																				run: (*parser).callonAttributeRawValue64,
																																				expr: &charClassMatcher{
																																					pos:        position{line: 471, col: 28, offset: 15289},
																																					val:        "[A-Za-z]",
																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 473, col: 9, offset: 15343},
																																				run: (*parser).callonAttributeRawValue66,
																																				expr: &oneOrMoreExpr{
																																					pos: position{line: 473, col: 9, offset: 15343},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 473, col: 9, offset: 15343},
																																						val:        "[0-9]",
																																						ranges:     []rune{'0', '9'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 467, col: 79, offset: 15187},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 456, col: 31, offset: 14633},
																									run: (*parser).callonAttributeRawValue70,
																									expr: &seqExpr{
																										pos: position{line: 456, col: 31, offset: 14633},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 456, col: 31, offset: 14633},
																												val:        "{",
																												ignoreCase: false,
																												want:       "\"{\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 456, col: 35, offset: 14637},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 118, col: 18, offset: 3399},
																													run: (*parser).callonAttributeRawValue74,
																													expr: &seqExpr{
																														pos: position{line: 118, col: 18, offset: 3399},
																														exprs: []interface{}{
																															&charClassMatcher{
																																pos:        position{line: 118, col: 18, offset: 3399},
																																val:        "[_0-9\\pL]",
																																chars:      []rune{'_'},
																																ranges:     []rune{'0', '9'},
																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 118, col: 28, offset: 3409},
																																expr: &charClassMatcher{
																																	pos:        position{line: 118, col: 29, offset: 3410},
																																	val:        "[-0-9\\pL]",
																																	chars:      []rune{'-'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 456, col: 54, offset: 14656},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 360, col: 12, offset: 11202},
																			run: (*parser).callonAttributeRawValue80,
																			expr: &litMatcher{
																				pos:        position{line: 360, col: 12, offset: 11202},
																				val:        "\\'",
																				ignoreCase: false,
																				want:       "\"\\\\'\"",
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 363, col: 13, offset: 11304},
																			val:        "'`",
																			ignoreCase: false,
																			want:       "\"'`\"",
																		},
																		&litMatcher{
																			pos:        position{line: 363, col: 20, offset: 11311},
																			val:        "`'",
																			ignoreCase: false,
																			want:       "\"`'\"",
																		},
																		&actionExpr{
																			pos: position{line: 363, col: 27, offset: 11318},
																			run: (*parser).callonAttributeRawValue84,
																			expr: &litMatcher{
																				pos:        position{line: 363, col: 27, offset: 11318},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																		},
																		&actionExpr{
																			pos: position{line: 366, col: 12, offset: 11478},
																			run: (*parser).callonAttributeRawValue86,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 366, col: 12, offset: 11478},
																				expr: &charClassMatcher{
																					pos:        position{line: 366, col: 12, offset: 11478},
																					val:        "[^\\r\\n\\\\\\ ]",
																					chars:      []rune{'\r', '\n', '\\', '\'', ' '},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 346, col: 5, offset: 10902},
													val:        "'",
													ignoreCase: false,
													want:       "\"'\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 374, col: 5, offset: 11713},
										run: (*parser).callonAttributeRawValue90,
										expr: &seqExpr{
											pos: position{line: 374, col: 5, offset: 11713},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 374, col: 5, offset: 11713},
													val:        "\"",
													ignoreCase: false,
													want:       "\"\\\"\"",
												},
												&notExpr{
													pos: position{line: 374, col: 10, offset: 11718},
													expr: &litMatcher{
														pos:        position{line: 374, col: 11, offset: 11719},
														val:        "`",
														ignoreCase: false,
														want:       "\"`\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 375, col: 5, offset: 11798},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 385, col: 5, offset: 12078},
														run: (*parser).callonAttributeRawValue96,
														expr: &labeledExpr{
															pos:   position{line: 385, col: 5, offset: 12078},
															label: "elements",
															expr: &oneOrMoreExpr{
																pos: position{line: 385, col: 14, offset: 12087},
																expr: &choiceExpr{
																	pos: position{line: 386, col: 9, offset: 12097},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2801, col: 14, offset: 92593},
																			run: (*parser).callonAttributeRawValue100,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2801, col: 14, offset: 92593},
																				expr: &charClassMatcher{
																					pos:        position{line: 2801, col: 14, offset: 92593},
																					val:        "[0-9\\pL]",
																					ranges:     []rune{'0', '9'},
																					classes:    []*unicode.RangeTable{rangeTable("L")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2878, col: 10, offset: 95044},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																		&actionExpr{
																			pos: position{line: 2878, col: 16, offset: 95050},
																			run: (*parser).callonAttributeRawValue104,
																			expr: &litMatcher{
																				pos:        position{line: 2878, col: 16, offset: 95050},
																				val:        "\t",
																				ignoreCase: false,
																				want:       "\"\\t\"",
																			},
																		},
																		&actionExpr{
																			pos: position{line: 449, col: 5, offset: 14443},
																			run: (*parser).callonAttributeRawValue106,
																			expr: &seqExpr{
																				pos: position{line: 449, col: 5, offset: 14443},
																				exprs: []interface{}{
																					&andCodeExpr{
																						pos: position{line: 449, col: 5, offset: 14443},
																						run: (*parser).callonAttributeRawValue108,
																					},
																					&labeledExpr{
																						pos:   position{line: 452, col: 5, offset: 14507},
																						label: "element",
																						expr: &choiceExpr{
																							pos: position{line: 452, col: 14, offset: 14516},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 463, col: 25, offset: 14978},
																									run: (*parser).callonAttributeRawValue111,
																									expr: &seqExpr{
																										pos: position{line: 463, col: 25, offset: 14978},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 463, col: 25, offset: 14978},
																												val:        "{counter:",
																												ignoreCase: false,
																												want:       "\"{counter:\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 463, col: 37, offset: 14990},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 118, col: 18, offset: 3399},
																													run: (*parser).callonAttributeRawValue115,
																													expr: &seqExpr{
																														pos: position{line: 118, col: 18, offset: 3399},
																														exprs: []interface{}{
																															&charClassMatcher{
																																pos:        position{line: 118, col: 18, offset: 3399},
																																val:        "[_0-9\\pL]",
																																chars:      []rune{'_'},
																																ranges:     []rune{'0', '9'},
																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 118, col: 28, offset: 3409},
																																expr: &charClassMatcher{
																																	pos:        position{line: 118, col: 29, offset: 3410},
																																	val:        "[-0-9\\pL]",
																																	chars:      []rune{'-'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 463, col: 56, offset: 15009},
																												label: "start",
																												expr: &zeroOrOneExpr{
																													pos: position{line: 463, col: 62, offset: 15015},
																													expr: &actionExpr{
																														pos: position{line: 471, col: 17, offset: 15278},
																														run: (*parser).callonAttributeRawValue122,
																														expr: &seqExpr{
																															pos: position{line: 471, col: 17, offset: 15278},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 471, col: 17, offset: 15278},
																																	val:        ":",
																																	ignoreCase: false,
																																	want:       "\":\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 471, col: 21, offset: 15282},
																																	label: "start",
																																	expr: &choiceExpr{
																																		pos: position{line: 471, col: 28, offset: 15289},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 471, col: 28, offset: 15289},
																																				run: (*parser).callonAttributeRawValue127,
																																				expr: &charClassMatcher{
																																					pos:        position{line: 471, col: 28, offset: 15289},
																																					val:        "[A-Za-z]",
																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 473, col: 9, offset: 15343},
																																				run: (*parser).callonAttributeRawValue129,
																																				expr: &oneOrMoreExpr{
																																					pos: position{line: 473, col: 9, offset: 15343},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 473, col: 9, offset: 15343},
																																						val:        "[0-9]",
																																						ranges:     []rune{'0', '9'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 463, col: 78, offset: 15031},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 467, col: 25, offset: 15133},
																									run: (*parser).callonAttributeRawValue133,
																									expr: &seqExpr{
																										pos: position{line: 467, col: 25, offset: 15133},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 467, col: 25, offset: 15133},
																												val:        "{counter2:",
																												ignoreCase: false,
																												want:       "\"{counter2:\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 467, col: 38, offset: 15146},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 118, col: 18, offset: 3399},
																													run: (*parser).callonAttributeRawValue137,
																													expr: &seqExpr{
																														pos: position{line: 118, col: 18, offset: 3399},
																														exprs: []interface{}{
																															&charClassMatcher{
																																pos:        position{line: 118, col: 18, offset: 3399},
																																val:        "[_0-9\\pL]",
																																chars:      []rune{'_'},
																																ranges:     []rune{'0', '9'},
																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 118, col: 28, offset: 3409},
																																expr: &charClassMatcher{
																																	pos:        position{line: 118, col: 29, offset: 3410},
																																	val:        "[-0-9\\pL]",
																																	chars:      []rune{'-'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 467, col: 57, offset: 15165},
																												label: "start",
																												expr: &zeroOrOneExpr{
																													pos: position{line: 467, col: 63, offset: 15171},
																													expr: &actionExpr{
																														pos: position{line: 471, col: 17, offset: 15278},
																														run: (*parser).callonAttributeRawValue144,
																														expr: &seqExpr{
																															pos: position{line: 471, col: 17, offset: 15278},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 471, col: 17, offset: 15278},
																																	val:        ":",
																																	ignoreCase: false,
																																	want:       "\":\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 471, col: 21, offset: 15282},
																																	label: "start",
																																	expr: &choiceExpr{
																																		pos: position{line: 471, col: 28, offset: 15289},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 471, col: 28, offset: 15289},
																																				run: (*parser).callonAttributeRawValue149,
																																				expr: &charClassMatcher{
																																					pos:        position{line: 471, col: 28, offset: 15289},
																																					val:        "[A-Za-z]",
																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 473, col: 9, offset: 15343},
																																				run: (*parser).callonAttributeRawValue151,
																																				expr: &oneOrMoreExpr{
																																					pos: position{line: 473, col: 9, offset: 15343},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 473, col: 9, offset: 15343},
																																						val:        "[0-9]",
																																						ranges:     []rune{'0', '9'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 467, col: 79, offset: 15187},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 456, col: 31, offset: 14633},
																									run: (*parser).callonAttributeRawValue155,
																									expr: &seqExpr{
																										pos: position{line: 456, col: 31, offset: 14633},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 456, col: 31, offset: 14633},
																												val:        "{",
																												ignoreCase: false,
																												want:       "\"{\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 456, col: 35, offset: 14637},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 118, col: 18, offset: 3399},
																													run: (*parser).callonAttributeRawValue159,
																													expr: &seqExpr{
																														pos: position{line: 118, col: 18, offset: 3399},
																														exprs: []interface{}{
																															&charClassMatcher{
																																pos:        position{line: 118, col: 18, offset: 3399},
																																val:        "[_0-9\\pL]",
																																chars:      []rune{'_'},
																																ranges:     []rune{'0', '9'},
																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 118, col: 28, offset: 3409},
																																expr: &charClassMatcher{
																																	pos:        position{line: 118, col: 29, offset: 3410},
																																	val:        "[-0-9\\pL]",
																																	chars:      []rune{'-'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 456, col: 54, offset: 14656},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 389, col: 12, offset: 12166},
																			run: (*parser).callonAttributeRawValue165,
																			expr: &litMatcher{
																				pos:        position{line: 389, col: 12, offset: 12166},
																				val:        "\\\"",
																				ignoreCase: false,
																				want:       "\"\\\\\\\"\"",
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 392, col: 13, offset: 12268},
																			val:        "\"`",
																			ignoreCase: false,
																			want:       "\"\\\"`\"",
																		},
																		&litMatcher{
																			pos:        position{line: 392, col: 21, offset: 12276},
																			val:        "`\"",
																			ignoreCase: false,
																			want:       "\"`\\\"\"",
																		},
																		&litMatcher{
																			pos:        position{line: 392, col: 29, offset: 12284},
																			val:        "\\",
																			ignoreCase: false,
																			want:       "\"\\\\\"",
																		},
																		&actionExpr{
																			pos: position{line: 392, col: 35, offset: 12290},
																			run: (*parser).callonAttributeRawValue170,
																			expr: &litMatcher{
																				pos:        position{line: 392, col: 35, offset: 12290},
																				val:        "`",
																				ignoreCase: false,
																				want:       "\"`\"",
																			},
																		},
																		&actionExpr{
																			pos: position{line: 395, col: 12, offset: 12473},
																			run: (*parser).callonAttributeRawValue172,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 395, col: 12, offset: 12473},
																				expr: &charClassMatcher{
																					pos:        position{line: 395, col: 12, offset: 12473},
																					val:        "[^\\r\\n\\\\\"` ]",
																					chars:      []rune{'\r', '\n', '\\', '"', '`', ' '},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 376, col: 5, offset: 11849},
													val:        "\"",
													ignoreCase: false,
													want:       "\"\\\"\"",
												},
												&andExpr{
													pos: position{line: 376, col: 10, offset: 11854},
													expr: &notExpr{
														pos: position{line: 376, col: 12, offset: 11856},
														expr: &seqExpr{
															pos: position{line: 376, col: 14, offset: 11858},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 376, col: 14, offset: 11858},
																	expr: &choiceExpr{
																		pos: position{line: 2878, col: 10, offset: 95044},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2878, col: 10, offset: 95044},
																				val:        " ",
																				ignoreCase: false,
																				want:       "\" \"",
																			},
																			&actionExpr{
																				pos: position{line: 2878, col: 16, offset: 95050},
																				run: (*parser).callonAttributeRawValue182,
																				expr: &litMatcher{
																					pos:        position{line: 2878, col: 16, offset: 95050},
																					val:        "\t",
																					ignoreCase: false,
																					want:       "\"\\t\"",
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 376, col: 21, offset: 11865},
																	val:        "=",
																	ignoreCase: false,
																	want:       "\"=\"",
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 337, col: 11, offset: 10640},
										name: "UnquotedAttributeRawValue",
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 339, col: 5, offset: 10677},
							expr: &notExpr{
								pos: position{line: 339, col: 7, offset: 10679},
								expr: &seqExpr{
									pos: position{line: 339, col: 9, offset: 10681},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 339, col: 9, offset: 10681},
											expr: &choiceExpr{
												pos: position{line: 2878, col: 10, offset: 95044},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2878, col: 10, offset: 95044},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
													&actionExpr{
														pos: position{line: 2878, col: 16, offset: 95050},
														run: (*parser).callonAttributeRawValue192,
														expr: &litMatcher{
															pos:        position{line: 2878, col: 16, offset: 95050},
															val:        "\t",
															ignoreCase: false,
															want:       "\"\\t\"",
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 339, col: 16, offset: 10688},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnquotedAttributeRawValue",
			pos:  position{line: 403, col: 1, offset: 12747},
			expr: &actionExpr{
				pos: position{line: 406, col: 5, offset: 12934},
				run: (*parser).callonUnquotedAttributeRawValue1,
				expr: &seqExpr{
					pos: position{line: 406, col: 5, offset: 12934},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 406, col: 5, offset: 12934},
							expr: &choiceExpr{
								pos: position{line: 2878, col: 10, offset: 95044},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 2878, col: 10, offset: 95044},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
									&actionExpr{
										pos: position{line: 2878, col: 16, offset: 95050},
										run: (*parser).callonUnquotedAttributeRawValue6,
										expr: &litMatcher{
											pos:        position{line: 2878, col: 16, offset: 95050},
											val:        "\t",
											ignoreCase: false,
											want:       "\"\\t\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 407, col: 5, offset: 13003},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 407, col: 14, offset: 13012},
								expr: &choiceExpr{
									pos: position{line: 408, col: 9, offset: 13022},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 408, col: 10, offset: 13023},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 408, col: 10, offset: 13023},
													val:        "[",
													ignoreCase: false,
													want:       "\"[\"",
												},
												&ruleRefExpr{
													pos:  position{line: 408, col: 14, offset: 13027},
													name: "UnquotedAttributeRawValue",
												},
												&litMatcher{
													pos:        position{line: 408, col: 40, offset: 13053},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
											},
										},
										&actionExpr{
											pos: position{line: 947, col: 23, offset: 29896},
											run: (*parser).callonUnquotedAttributeRawValue15,
											expr: &seqExpr{
												pos: position{line: 947, col: 23, offset: 29896},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 945, col: 32, offset: 29864},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
													&labeledExpr{
														pos:   position{line: 947, col: 51, offset: 29924},
														label: "ref",
														expr: &actionExpr{
															pos: position{line: 947, col: 56, offset: 29929},
															run: (*parser).callonUnquotedAttributeRawValue19,
															expr: &oneOrMoreExpr{
																pos: position{line: 947, col: 56, offset: 29929},
																expr: &charClassMatcher{
																	pos:        position{line: 947, col: 56, offset: 29929},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 945, col: 32, offset: 29864},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 449, col: 5, offset: 14443},
											run: (*parser).callonUnquotedAttributeRawValue23,
											expr: &seqExpr{
												pos: position{line: 449, col: 5, offset: 14443},
												exprs: []interface{}{
													&andCodeExpr{
														pos: position{line: 449, col: 5, offset: 14443},
														run: (*parser).callonUnquotedAttributeRawValue25,
													},
													&labeledExpr{
														pos:   position{line: 452, col: 5, offset: 14507},
														label: "element",
														expr: &choiceExpr{
															pos: position{line: 452, col: 14, offset: 14516},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 463, col: 25, offset: 14978},
																	run: (*parser).callonUnquotedAttributeRawValue28,
																	expr: &seqExpr{
																		pos: position{line: 463, col: 25, offset: 14978},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 463, col: 25, offset: 14978},
																				val:        "{counter:",
																				ignoreCase: false,
																				want:       "\"{counter:\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 463, col: 37, offset: 14990},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 118, col: 18, offset: 3399},
																					run: (*parser).callonUnquotedAttributeRawValue32,
																					expr: &seqExpr{
																						pos: position{line: 118, col: 18, offset: 3399},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 118, col: 18, offset: 3399},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 118, col: 28, offset: 3409},
																								expr: &charClassMatcher{
																									pos:        position{line: 118, col: 29, offset: 3410},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 463, col: 56, offset: 15009},
																				label: "start",
																				expr: &zeroOrOneExpr{
																					pos: position{line: 463, col: 62, offset: 15015},
																					expr: &actionExpr{
																						pos: position{line: 471, col: 17, offset: 15278},
																						run: (*parser).callonUnquotedAttributeRawValue39,
																						expr: &seqExpr{
																							pos: position{line: 471, col: 17, offset: 15278},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 471, col: 17, offset: 15278},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 471, col: 21, offset: 15282},
																									label: "start",
																									expr: &choiceExpr{
																										pos: position{line: 471, col: 28, offset: 15289},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 471, col: 28, offset: 15289},
																												run: (*parser).callonUnquotedAttributeRawValue44,
																												expr: &charClassMatcher{
																													pos:        position{line: 471, col: 28, offset: 15289},
																													val:        "[A-Za-z]",
																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 473, col: 9, offset: 15343},
																												run: (*parser).callonUnquotedAttributeRawValue46,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 473, col: 9, offset: 15343},
																													expr: &charClassMatcher{
																														pos:        position{line: 473, col: 9, offset: 15343},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 463, col: 78, offset: 15031},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 467, col: 25, offset: 15133},
																	run: (*parser).callonUnquotedAttributeRawValue50,
																	expr: &seqExpr{
																		pos: position{line: 467, col: 25, offset: 15133},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 467, col: 25, offset: 15133},
																				val:        "{counter2:",
																				ignoreCase: false,
																				want:       "\"{counter2:\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 467, col: 38, offset: 15146},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 118, col: 18, offset: 3399},
																					run: (*parser).callonUnquotedAttributeRawValue54,
																					expr: &seqExpr{
																						pos: position{line: 118, col: 18, offset: 3399},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 118, col: 18, offset: 3399},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 118, col: 28, offset: 3409},
																								expr: &charClassMatcher{
																									pos:        position{line: 118, col: 29, offset: 3410},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 467, col: 57, offset: 15165},
																				label: "start",
																				expr: &zeroOrOneExpr{
																					pos: position{line: 467, col: 63, offset: 15171},
																					expr: &actionExpr{
																						pos: position{line: 471, col: 17, offset: 15278},
																						run: (*parser).callonUnquotedAttributeRawValue61,
																						expr: &seqExpr{
																							pos: position{line: 471, col: 17, offset: 15278},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 471, col: 17, offset: 15278},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 471, col: 21, offset: 15282},
																									label: "start",
																									expr: &choiceExpr{
																										pos: position{line: 471, col: 28, offset: 15289},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 471, col: 28, offset: 15289},
																												run: (*parser).callonUnquotedAttributeRawValue66,
																												expr: &charClassMatcher{
																													pos:        position{line: 471, col: 28, offset: 15289},
																													val:        "[A-Za-z]",
																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 473, col: 9, offset: 15343},
																												run: (*parser).callonUnquotedAttributeRawValue68,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 473, col: 9, offset: 15343},
																													expr: &charClassMatcher{
																														pos:        position{line: 473, col: 9, offset: 15343},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 467, col: 79, offset: 15187},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 456, col: 31, offset: 14633},
																	run: (*parser).callonUnquotedAttributeRawValue72,
																	expr: &seqExpr{
																		pos: position{line: 456, col: 31, offset: 14633},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 456, col: 31, offset: 14633},
																				val:        "{",
																				ignoreCase: false,
																				want:       "\"{\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 456, col: 35, offset: 14637},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 118, col: 18, offset: 3399},
																					run: (*parser).callonUnquotedAttributeRawValue76,
																					expr: &seqExpr{
																						pos: position{line: 118, col: 18, offset: 3399},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 118, col: 18, offset: 3399},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 118, col: 28, offset: 3409},
																								expr: &charClassMatcher{
																									pos:        position{line: 118, col: 29, offset: 3410},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 456, col: 54, offset: 14656},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 411, col: 12, offset: 13161},
											run: (*parser).callonUnquotedAttributeRawValue82,
											expr: &oneOrMoreExpr{
												pos: position{line: 411, col: 12, offset: 13161},
												expr: &charClassMatcher{
													pos:        position{line: 411, col: 12, offset: 13161},
													val:        "[^=,\\r\\n�] ]",
													chars:      []rune{'=', ',', '\r', '\n', '�', ']', ' '},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&litMatcher{
											pos:        position{line: 2878, col: 10, offset: 95044},
											val:        " ",
											ignoreCase: false,
											want:       "\" \"",
										},
										&actionExpr{
											pos: position{line: 2878, col: 16, offset: 95050},
											run: (*parser).callonUnquotedAttributeRawValue86,
											expr: &litMatcher{
												pos:        position{line: 2878, col: 16, offset: 95050},
												val:        "\t",
												ignoreCase: false,
												want:       "\"\\t\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 489, col: 1, offset: 15903},
			expr: &choiceExpr{
				pos: position{line: 489, col: 19, offset: 15921},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 491, col: 27, offset: 15997},
						run: (*parser).callonCrossReference2,
						expr: &seqExpr{
							pos: position{line: 491, col: 27, offset: 15997},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 491, col: 27, offset: 15997},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 491, col: 32, offset: 16002},
									label: "id",
									expr: &actionExpr{
										pos: position{line: 2866, col: 7, offset: 94768},
										run: (*parser).callonCrossReference6,
										expr: &oneOrMoreExpr{
											pos: position{line: 2866, col: 7, offset: 94768},
											expr: &charClassMatcher{
												pos:        position{line: 2866, col: 7, offset: 94768},
												val:        "[^[]<>,]",
												chars:      []rune{'[', ']', '<', '>', ','},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 491, col: 40, offset: 16010},
									expr: &choiceExpr{
										pos: position{line: 2878, col: 10, offset: 95044},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2878, col: 10, offset: 95044},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
											&actionExpr{
												pos: position{line: 2878, col: 16, offset: 95050},
												run: (*parser).callonCrossReference12,
												expr: &litMatcher{
													pos:        position{line: 2878, col: 16, offset: 95050},
													val:        "\t",
													ignoreCase: false,
													want:       "\"\\t\"",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 491, col: 47, offset: 16017},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 491, col: 51, offset: 16021},
									label: "label",
									expr: &oneOrMoreExpr{
										pos: position{line: 501, col: 24, offset: 16434},
										expr: &choiceExpr{
											pos: position{line: 502, col: 5, offset: 16440},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 502, col: 6, offset: 16441},
													run: (*parser).callonCrossReference18,
													expr: &seqExpr{
														pos: position{line: 502, col: 6, offset: 16441},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 502, col: 6, offset: 16441},
																val:        "[0-9\\pL]",
																ranges:     []rune{'0', '9'},
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
															&oneOrMoreExpr{
																pos: position{line: 502, col: 14, offset: 16449},
																expr: &charClassMatcher{
																	pos:        position{line: 502, col: 14, offset: 16449},
																	val:        "[^\\r\\n{<>]",
																	chars:      []rune{'\r', '\n', '{', '<', '>'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 449, col: 5, offset: 14443},
													run: (*parser).callonCrossReference23,
													expr: &seqExpr{
														pos: position{line: 449, col: 5, offset: 14443},
														exprs: []interface{}{
															&andCodeExpr{
																pos: position{line: 449, col: 5, offset: 14443},
																run: (*parser).callonCrossReference25,
															},
															&labeledExpr{
																pos:   position{line: 452, col: 5, offset: 14507},
																label: "element",
																expr: &choiceExpr{
																	pos: position{line: 452, col: 14, offset: 14516},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 463, col: 25, offset: 14978},
																			run: (*parser).callonCrossReference28,
																			expr: &seqExpr{
																				pos: position{line: 463, col: 25, offset: 14978},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 463, col: 25, offset: 14978},
																						val:        "{counter:",
																						ignoreCase: false,
																						want:       "\"{counter:\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 463, col: 37, offset: 14990},
																						label: "name",
																						expr: &actionExpr{
																							pos: position{line: 118, col: 18, offset: 3399},
																							run: (*parser).callonCrossReference32,
																							expr: &seqExpr{
																								pos: position{line: 118, col: 18, offset: 3399},
																								exprs: []interface{}{
																									&charClassMatcher{
																										pos:        position{line: 118, col: 18, offset: 3399},
																										val:        "[_0-9\\pL]",
																										chars:      []rune{'_'},
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 118, col: 28, offset: 3409},
																										expr: &charClassMatcher{
																											pos:        position{line: 118, col: 29, offset: 3410},
																											val:        "[-0-9\\pL]",
																											chars:      []rune{'-'},
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 463, col: 56, offset: 15009},
																						label: "start",
																						expr: &zeroOrOneExpr{
																							pos: position{line: 463, col: 62, offset: 15015},
																							expr: &actionExpr{
																								pos: position{line: 471, col: 17, offset: 15278},
																								run: (*parser).callonCrossReference39,
																								expr: &seqExpr{
																									pos: position{line: 471, col: 17, offset: 15278},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 471, col: 17, offset: 15278},
																											val:        ":",
																											ignoreCase: false,
																											want:       "\":\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 471, col: 21, offset: 15282},
																											label: "start",
																											expr: &choiceExpr{
																												pos: position{line: 471, col: 28, offset: 15289},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 471, col: 28, offset: 15289},
																														run: (*parser).callonCrossReference44,
																														expr: &charClassMatcher{
																															pos:        position{line: 471, col: 28, offset: 15289},
																															val:        "[A-Za-z]",
																															ranges:     []rune{'A', 'Z', 'a', 'z'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&actionExpr{
																														pos: position{line: 473, col: 9, offset: 15343},
																														run: (*parser).callonCrossReference46,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 473, col: 9, offset: 15343},
																															expr: &charClassMatcher{
																																pos:        position{line: 473, col: 9, offset: 15343},
																																val:        "[0-9]",
																																ranges:     []rune{'0', '9'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 463, col: 78, offset: 15031},
																						val:        "}",
																						ignoreCase: false,
																						want:       "\"}\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 467, col: 25, offset: 15133},
																			run: (*parser).callonCrossReference50,
																			expr: &seqExpr{
																				pos: position{line: 467, col: 25, offset: 15133},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 467, col: 25, offset: 15133},
																						val:        "{counter2:",
																						ignoreCase: false,
																						want:       "\"{counter2:\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 467, col: 38, offset: 15146},
																						label: "name",
																						expr: &actionExpr{
																							pos: position{line: 118, col: 18, offset: 3399},
																							run: (*parser).callonCrossReference54,
																							expr: &seqExpr{
																								pos: position{line: 118, col: 18, offset: 3399},
																								exprs: []interface{}{
																									&charClassMatcher{
																										pos:        position{line: 118, col: 18, offset: 3399},
																										val:        "[_0-9\\pL]",
																										chars:      []rune{'_'},
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 118, col: 28, offset: 3409},
																										expr: &charClassMatcher{
																											pos:        position{line: 118, col: 29, offset: 3410},
																											val:        "[-0-9\\pL]",
																											chars:      []rune{'-'},
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 467, col: 57, offset: 15165},
																						label: "start",
																						expr: &zeroOrOneExpr{
																							pos: position{line: 467, col: 63, offset: 15171},
																							expr: &actionExpr{
																								pos: position{line: 471, col: 17, offset: 15278},
																								run: (*parser).callonCrossReference61,
																								expr: &seqExpr{
																									pos: position{line: 471, col: 17, offset: 15278},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 471, col: 17, offset: 15278},
																											val:        ":",
																											ignoreCase: false,
																											want:       "\":\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 471, col: 21, offset: 15282},
																											label: "start",
																											expr: &choiceExpr{
																												pos: position{line: 471, col: 28, offset: 15289},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 471, col: 28, offset: 15289},
																														run: (*parser).callonCrossReference66,
																														expr: &charClassMatcher{
																															pos:        position{line: 471, col: 28, offset: 15289},
																															val:        "[A-Za-z]",
																															ranges:     []rune{'A', 'Z', 'a', 'z'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&actionExpr{
																														pos: position{line: 473, col: 9, offset: 15343},
																														run: (*parser).callonCrossReference68,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 473, col: 9, offset: 15343},
																															expr: &charClassMatcher{
																																pos:        position{line: 473, col: 9, offset: 15343},
																																val:        "[0-9]",
																																ranges:     []rune{'0', '9'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 467, col: 79, offset: 15187},
																						val:        "}",
																						ignoreCase: false,
																						want:       "\"}\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 456, col: 31, offset: 14633},
																			run: (*parser).callonCrossReference72,
																			expr: &seqExpr{
																				pos: position{line: 456, col: 31, offset: 14633},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 456, col: 31, offset: 14633},
																						val:        "{",
																						ignoreCase: false,
																						want:       "\"{\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 456, col: 35, offset: 14637},
																						label: "name",
																						expr: &actionExpr{
																							pos: position{line: 118, col: 18, offset: 3399},
																							run: (*parser).callonCrossReference76,
																							expr: &seqExpr{
																								pos: position{line: 118, col: 18, offset: 3399},
																								exprs: []interface{}{
																									&charClassMatcher{
																										pos:        position{line: 118, col: 18, offset: 3399},
																										val:        "[_0-9\\pL]",
																										chars:      []rune{'_'},
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 118, col: 28, offset: 3409},
																										expr: &charClassMatcher{
																											pos:        position{line: 118, col: 29, offset: 3410},
																											val:        "[-0-9\\pL]",
																											chars:      []rune{'-'},
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 456, col: 54, offset: 14656},
																						val:        "}",
																						ignoreCase: false,
																						want:       "\"}\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 506, col: 8, offset: 16673},
													run: (*parser).callonCrossReference82,
													expr: &litMatcher{
														pos:        position{line: 506, col: 8, offset: 16673},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 491, col: 79, offset: 16049},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 493, col: 9, offset: 16122},
						run: (*parser).callonCrossReference85,
						expr: &seqExpr{
							pos: position{line: 493, col: 9, offset: 16122},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 493, col: 9, offset: 16122},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 493, col: 14, offset: 16127},
									label: "id",
									expr: &actionExpr{
										pos: position{line: 2866, col: 7, offset: 94768},
										run: (*parser).callonCrossReference89,
										expr: &oneOrMoreExpr{
											pos: position{line: 2866, col: 7, offset: 94768},
											expr: &charClassMatcher{
												pos:        position{line: 2866, col: 7, offset: 94768},
												val:        "[^[]<>,]",
												chars:      []rune{'[', ']', '<', '>', ','},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 493, col: 22, offset: 16135},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 489, col: 44, offset: 15946},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 497, col: 1, offset: 16206},
			expr: &actionExpr{
				pos: position{line: 497, col: 27, offset: 16232},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 497, col: 27, offset: 16232},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 497, col: 27, offset: 16232},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 497, col: 35, offset: 16240},
							label: "url",
							expr: &actionExpr{
								pos: position{line: 2839, col: 17, offset: 93911},
								run: (*parser).callonExternalCrossReference5,
								expr: &labeledExpr{
									pos:   position{line: 2839, col: 17, offset: 93911},
									label: "path",
									expr: &oneOrMoreExpr{
										pos: position{line: 2839, col: 22, offset: 93916},
										expr: &choiceExpr{
											pos: position{line: 2839, col: 23, offset: 93917},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 2851, col: 13, offset: 94316},
													run: (*parser).callonExternalCrossReference9,
													expr: &labeledExpr{
														pos:   position{line: 2851, col: 13, offset: 94316},
														label: "elements",
														expr: &oneOrMoreExpr{
															pos: position{line: 2851, col: 22, offset: 94325},
															expr: &choiceExpr{
																pos: position{line: 2852, col: 5, offset: 94331},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2852, col: 5, offset: 94331},
																		run: (*parser).callonExternalCrossReference13,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2852, col: 5, offset: 94331},
																			expr: &charClassMatcher{
																				pos:        position{line: 2852, col: 6, offset: 94332},
																				val:        "[^\\r\\n[]�&<>{ ]",
																				chars:      []rune{'\r', '\n', '[', ']', '�', '&', '<', '>', '{', ' '},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 449, col: 5, offset: 14443},
																		run: (*parser).callonExternalCrossReference16,
																		expr: &seqExpr{
																			pos: position{line: 449, col: 5, offset: 14443},
																			exprs: []interface{}{
																				&andCodeExpr{
																					pos: position{line: 449, col: 5, offset: 14443},
																					run: (*parser).callonExternalCrossReference18,
																				},
																				&labeledExpr{
																					pos:   position{line: 452, col: 5, offset: 14507},
																					label: "element",
																					expr: &choiceExpr{
																						pos: position{line: 452, col: 14, offset: 14516},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 463, col: 25, offset: 14978},
																								run: (*parser).callonExternalCrossReference21,
																								expr: &seqExpr{
																									pos: position{line: 463, col: 25, offset: 14978},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 463, col: 25, offset: 14978},
																											val:        "{counter:",
																											ignoreCase: false,
																											want:       "\"{counter:\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 463, col: 37, offset: 14990},
																											label: "name",
																											expr: &actionExpr{
																												pos: position{line: 118, col: 18, offset: 3399},
																												run: (*parser).callonExternalCrossReference25,
																												expr: &seqExpr{
																													pos: position{line: 118, col: 18, offset: 3399},
																													exprs: []interface{}{
																														&charClassMatcher{
																															pos:        position{line: 118, col: 18, offset: 3399},
																															val:        "[_0-9\\pL]",
																															chars:      []rune{'_'},
																															ranges:     []rune{'0', '9'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 118, col: 28, offset: 3409},
																															expr: &charClassMatcher{
																																pos:        position{line: 118, col: 29, offset: 3410},
																																val:        "[-0-9\\pL]",
																																chars:      []rune{'-'},
																																ranges:     []rune{'0', '9'},
																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																										&labeledExpr{
																											pos:   position{line: 463, col: 56, offset: 15009},
																											label: "start",
																											expr: &zeroOrOneExpr{
																												pos: position{line: 463, col: 62, offset: 15015},
																												expr: &actionExpr{
																													pos: position{line: 471, col: 17, offset: 15278},
																													run: (*parser).callonExternalCrossReference32,
																													expr: &seqExpr{
																														pos: position{line: 471, col: 17, offset: 15278},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 471, col: 17, offset: 15278},
																																val:        ":",
																																ignoreCase: false,
																																want:       "\":\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 471, col: 21, offset: 15282},
																																label: "start",
																																expr: &choiceExpr{
																																	pos: position{line: 471, col: 28, offset: 15289},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 471, col: 28, offset: 15289},
																																			run: (*parser).callonExternalCrossReference37,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 471, col: 28, offset: 15289},
																																				val:        "[A-Za-z]",
																																				ranges:     []rune{'A', 'Z', 'a', 'z'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 473, col: 9, offset: 15343},
																																			run: (*parser).callonExternalCrossReference39,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 473, col: 9, offset: 15343},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 473, col: 9, offset: 15343},
																																					val:        "[0-9]",
																																					ranges:     []rune{'0', '9'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 463, col: 78, offset: 15031},
																											val:        "}",
																											ignoreCase: false,
																											want:       "\"}\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 467, col: 25, offset: 15133},
																								run: (*parser).callonExternalCrossReference43,
																								expr: &seqExpr{
																									pos: position{line: 467, col: 25, offset: 15133},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 467, col: 25, offset: 15133},
																											val:        "{counter2:",
																											ignoreCase: false,
																											want:       "\"{counter2:\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 467, col: 38, offset: 15146},
																											label: "name",
																											expr: &actionExpr{
																												pos: position{line: 118, col: 18, offset: 3399},
																												run: (*parser).callonExternalCrossReference47,
																												expr: &seqExpr{
																													pos: position{line: 118, col: 18, offset: 3399},
																													exprs: []interface{}{
																														&charClassMatcher{
																															pos:        position{line: 118, col: 18, offset: 3399},
																															val:        "[_0-9\\pL]",
																															chars:      []rune{'_'},
																															ranges:     []rune{'0', '9'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 118, col: 28, offset: 3409},
																															expr: &charClassMatcher{
																																pos:        position{line: 118, col: 29, offset: 3410},
																																val:        "[-0-9\\pL]",
																																chars:      []rune{'-'},
																																ranges:     []rune{'0', '9'},
																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																										&labeledExpr{
																											pos:   position{line: 467, col: 57, offset: 15165},
																											label: "start",
																											expr: &zeroOrOneExpr{
																												pos: position{line: 467, col: 63, offset: 15171},
																												expr: &actionExpr{
																													pos: position{line: 471, col: 17, offset: 15278},
																													run: (*parser).callonExternalCrossReference54,
																													expr: &seqExpr{
																														pos: position{line: 471, col: 17, offset: 15278},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 471, col: 17, offset: 15278},
																																val:        ":",
																																ignoreCase: false,
																																want:       "\":\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 471, col: 21, offset: 15282},
																																label: "start",
																																expr: &choiceExpr{
																																	pos: position{line: 471, col: 28, offset: 15289},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 471, col: 28, offset: 15289},
																																			run: (*parser).callonExternalCrossReference59,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 471, col: 28, offset: 15289},
																																				val:        "[A-Za-z]",
																																				ranges:     []rune{'A', 'Z', 'a', 'z'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 473, col: 9, offset: 15343},
																																			run: (*parser).callonExternalCrossReference61,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 473, col: 9, offset: 15343},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 473, col: 9, offset: 15343},
																																					val:        "[0-9]",
																																					ranges:     []rune{'0', '9'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 467, col: 79, offset: 15187},
																											val:        "}",
																											ignoreCase: false,
																											want:       "\"}\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 456, col: 31, offset: 14633},
																								run: (*parser).callonExternalCrossReference65,
																								expr: &seqExpr{
																									pos: position{line: 456, col: 31, offset: 14633},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 456, col: 31, offset: 14633},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 456, col: 35, offset: 14637},
																											label: "name",
																											expr: &actionExpr{
																												pos: position{line: 118, col: 18, offset: 3399},
																												run: (*parser).callonExternalCrossReference69,
																												expr: &seqExpr{
																													pos: position{line: 118, col: 18, offset: 3399},
																													exprs: []interface{}{
																														&charClassMatcher{
																															pos:        position{line: 118, col: 18, offset: 3399},
																															val:        "[_0-9\\pL]",
																															chars:      []rune{'_'},
																															ranges:     []rune{'0', '9'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 118, col: 28, offset: 3409},
																															expr: &charClassMatcher{
																																pos:        position{line: 118, col: 29, offset: 3410},
																																val:        "[-0-9\\pL]",
																																chars:      []rune{'-'},
																																ranges:     []rune{'0', '9'},
																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 456, col: 54, offset: 14656},
																											val:        "}",
																											ignoreCase: false,
																											want:       "\"}\"",
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2587, col: 5, offset: 86026},
																		run: (*parser).callonExternalCrossReference75,
																		expr: &seqExpr{
																			pos: position{line: 2587, col: 5, offset: 86026},
																			exprs: []interface{}{
																				&andCodeExpr{
																					pos: position{line: 2587, col: 5, offset: 86026},
																					run: (*parser).callonExternalCrossReference77,
																				},
																				&labeledExpr{
																					pos:   position{line: 2590, col: 5, offset: 86097},
																					label: "element",
																					expr: &choiceExpr{
																						pos: position{line: 2592, col: 9, offset: 86195},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2592, col: 9, offset: 86195},
																								run: (*parser).callonExternalCrossReference80,
																								expr: &choiceExpr{
																									pos: position{line: 491, col: 27, offset: 15997},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 491, col: 27, offset: 15997},
																											run: (*parser).callonExternalCrossReference82,
																											expr: &seqExpr{
																												pos: position{line: 491, col: 27, offset: 15997},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 491, col: 27, offset: 15997},
																														val:        "<<",
																														ignoreCase: false,
																														want:       "\"<<\"",
																													},
																													&labeledExpr{
																														pos:   position{line: 491, col: 32, offset: 16002},
																														label: "id",
																														expr: &actionExpr{
																															pos: position{line: 2866, col: 7, offset: 94768},
																															run: (*parser).callonExternalCrossReference86,
																															expr: &oneOrMoreExpr{
																																pos: position{line: 2866, col: 7, offset: 94768},
																																expr: &charClassMatcher{
																																	pos:        position{line: 2866, col: 7, offset: 94768},
																																	val:        "[^[]<>,]",
																																	chars:      []rune{'[', ']', '<', '>', ','},
																																	ignoreCase: false,
																																	inverted:   true,
																																},
																															},
																														},
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 491, col: 40, offset: 16010},
																														expr: &choiceExpr{
																															pos: position{line: 2878, col: 10, offset: 95044},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 2878, col: 10, offset: 95044},
																																	val:        " ",
																																	ignoreCase: false,
																																	want:       "\" \"",
																																},
																																&actionExpr{
																																	pos: position{line: 2878, col: 16, offset: 95050},
																																	run: (*parser).callonExternalCrossReference92,
																																	expr: &litMatcher{
																																		pos:        position{line: 2878, col: 16, offset: 95050},
																																		val:        "\t",
																																		ignoreCase: false,
																																		want:       "\"\\t\"",
																																	},
																																},
																															},
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 491, col: 47, offset: 16017},
																														val:        ",",
																														ignoreCase: false,
																														want:       "\",\"",
																													},
																													&labeledExpr{
																														pos:   position{line: 491, col: 51, offset: 16021},
																														label: "label",
																														expr: &oneOrMoreExpr{
																															pos: position{line: 501, col: 24, offset: 16434},
																															expr: &choiceExpr{
																																pos: position{line: 502, col: 5, offset: 16440},
																																alternatives: []interface{}{
																																	&actionExpr{
																																		pos: position{line: 502, col: 6, offset: 16441},
																																		run: (*parser).callonExternalCrossReference98,
																																		expr: &seqExpr{
																																			pos: position{line: 502, col: 6, offset: 16441},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 502, col: 6, offset: 16441},
																																					val:        "[0-9\\pL]",
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&oneOrMoreExpr{
																																					pos: position{line: 502, col: 14, offset: 16449},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 502, col: 14, offset: 16449},
																																						val:        "[^\\r\\n{<>]",
																																						chars:      []rune{'\r', '\n', '{', '<', '>'},
																																						ignoreCase: false,
																																						inverted:   true,
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&actionExpr{
																																		pos: position{line: 449, col: 5, offset: 14443},
																																		run: (*parser).callonExternalCrossReference103,
																																		expr: &seqExpr{
																																			pos: position{line: 449, col: 5, offset: 14443},
																																			exprs: []interface{}{
																																				&andCodeExpr{
																																					pos: position{line: 449, col: 5, offset: 14443},
																																					run: (*parser).callonExternalCrossReference105,
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 452, col: 5, offset: 14507},
																																					label: "element",
																																					expr: &choiceExpr{
																																						pos: position{line: 452, col: 14, offset: 14516},
																																						alternatives: []interface{}{
																																							&actionExpr{
																																								pos: position{line: 463, col: 25, offset: 14978},
																																								run: (*parser).callonExternalCrossReference108,
																																								expr: &seqExpr{
																																									pos: position{line: 463, col: 25, offset: 14978},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 463, col: 25, offset: 14978},
																																											val:        "{counter:",
																																											ignoreCase: false,
																																											want:       "\"{counter:\"",
																																										},
																																										&labeledExpr{
																																											pos:   position{line: 463, col: 37, offset: 14990},
																																											label: "name",
																																											expr: &actionExpr{
																																												pos: position{line: 118, col: 18, offset: 3399},
																																												run: (*parser).callonExternalCrossReference112,
																																												expr: &seqExpr{
																																													pos: position{line: 118, col: 18, offset: 3399},
																																													exprs: []interface{}{
																																														&charClassMatcher{
																																															pos:        position{line: 118, col: 18, offset: 3399},
																																															val:        "[_0-9\\pL]",
																																															chars:      []rune{'_'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																														&zeroOrMoreExpr{
																																															pos: position{line: 118, col: 28, offset: 3409},
																																															expr: &charClassMatcher{
																																																pos:        position{line: 118, col: 29, offset: 3410},
																																																val:        "[-0-9\\pL]",
																																																chars:      []rune{'-'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																										&labeledExpr{
																																											pos:   position{line: 463, col: 56, offset: 15009},
																																											label: "start",
																																											expr: &zeroOrOneExpr{
																																												pos: position{line: 463, col: 62, offset: 15015},
																																												expr: &actionExpr{
																																													pos: position{line: 471, col: 17, offset: 15278},
																																													run: (*parser).callonExternalCrossReference119,
																																													expr: &seqExpr{
																																														pos: position{line: 471, col: 17, offset: 15278},
																																														exprs: []interface{}{
																																															&litMatcher{
																																																pos:        position{line: 471, col: 17, offset: 15278},
																																																val:        ":",
																																																ignoreCase: false,
																																																want:       "\":\"",
																																															},
																																															&labeledExpr{
																																																pos:   position{line: 471, col: 21, offset: 15282},
																																																label: "start",
																																																expr: &choiceExpr{
																																																	pos: position{line: 471, col: 28, offset: 15289},
																																																	alternatives: []interface{}{
																																																		&actionExpr{
																																																			pos: position{line: 471, col: 28, offset: 15289},
																																																			run: (*parser).callonExternalCrossReference124,
																																																			expr: &charClassMatcher{
																																																				pos:        position{line: 471, col: 28, offset: 15289},
																																																				val:        "[A-Za-z]",
																																																				ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																				ignoreCase: false,
																																																				inverted:   false,
																																																			},
																																																		},
																																																		&actionExpr{
																																																			pos: position{line: 473, col: 9, offset: 15343},
																																																			run: (*parser).callonExternalCrossReference126,
																																																			expr: &oneOrMoreExpr{
																																																				pos: position{line: 473, col: 9, offset: 15343},
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 473, col: 9, offset: 15343},
																																																					val:        "[0-9]",
																																																					ranges:     []rune{'0', '9'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																										&litMatcher{
																																											pos:        position{line: 463, col: 78, offset: 15031},
																																											val:        "}",
																																											ignoreCase: false,
																																											want:       "\"}\"",
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 467, col: 25, offset: 15133},
																																								run: (*parser).callonExternalCrossReference130,
																																								expr: &seqExpr{
																																									pos: position{line: 467, col: 25, offset: 15133},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 467, col: 25, offset: 15133},
																																											val:        "{counter2:",
																																											ignoreCase: false,
																																											want:       "\"{counter2:\"",
																																										},
																																										&labeledExpr{
																																											pos:   position{line: 467, col: 38, offset: 15146},
																																											label: "name",
																																											expr: &actionExpr{
																																												pos: position{line: 118, col: 18, offset: 3399},
																																												run: (*parser).callonExternalCrossReference134,
																																												expr: &seqExpr{
																																													pos: position{line: 118, col: 18, offset: 3399},
																																													exprs: []interface{}{
																																														&charClassMatcher{
																																															pos:        position{line: 118, col: 18, offset: 3399},
																																															val:        "[_0-9\\pL]",
																																															chars:      []rune{'_'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																														&zeroOrMoreExpr{
																																															pos: position{line: 118, col: 28, offset: 3409},
																																															expr: &charClassMatcher{
																																																pos:        position{line: 118, col: 29, offset: 3410},
																																																val:        "[-0-9\\pL]",
																																																chars:      []rune{'-'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																										&labeledExpr{
																																											pos:   position{line: 467, col: 57, offset: 15165},
																																											label: "start",
																																											expr: &zeroOrOneExpr{
																																												pos: position{line: 467, col: 63, offset: 15171},
																																												expr: &actionExpr{
																																													pos: position{line: 471, col: 17, offset: 15278},
																																													run: (*parser).callonExternalCrossReference141,
																																													expr: &seqExpr{
																																														pos: position{line: 471, col: 17, offset: 15278},
																																														exprs: []interface{}{
																																															&litMatcher{
																																																pos:        position{line: 471, col: 17, offset: 15278},
																																																val:        ":",
																																																ignoreCase: false,
																																																want:       "\":\"",
																																															},
																																															&labeledExpr{
																																																pos:   position{line: 471, col: 21, offset: 15282},
																																																label: "start",
																																																expr: &choiceExpr{
																																																	pos: position{line: 471, col: 28, offset: 15289},
																																																	alternatives: []interface{}{
																																																		&actionExpr{
																																																			pos: position{line: 471, col: 28, offset: 15289},
																																																			run: (*parser).callonExternalCrossReference146,
																																																			expr: &charClassMatcher{
																																																				pos:        position{line: 471, col: 28, offset: 15289},
																																																				val:        "[A-Za-z]",
																																																				ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																				ignoreCase: false,
																																																				inverted:   false,
																																																			},
																																																		},
																																																		&actionExpr{
																																																			pos: position{line: 473, col: 9, offset: 15343},
																																																			run: (*parser).callonExternalCrossReference148,
																																																			expr: &oneOrMoreExpr{
																																																				pos: position{line: 473, col: 9, offset: 15343},
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 473, col: 9, offset: 15343},
																																																					val:        "[0-9]",
																																																					ranges:     []rune{'0', '9'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																										&litMatcher{
																																											pos:        position{line: 467, col: 79, offset: 15187},
																																											val:        "}",
																																											ignoreCase: false,
																																											want:       "\"}\"",
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 456, col: 31, offset: 14633},
																																								run: (*parser).callonExternalCrossReference152,
																																								expr: &seqExpr{
																																									pos: position{line: 456, col: 31, offset: 14633},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 456, col: 31, offset: 14633},
																																											val:        "{",
																																											ignoreCase: false,
																																											want:       "\"{\"",
																																										},
																																										&labeledExpr{
																																											pos:   position{line: 456, col: 35, offset: 14637},
																																											label: "name",
																																											expr: &actionExpr{
																																												pos: position{line: 118, col: 18, offset: 3399},
																																												run: (*parser).callonExternalCrossReference156,
																																												expr: &seqExpr{
																																													pos: position{line: 118, col: 18, offset: 3399},
																																													exprs: []interface{}{
																																														&charClassMatcher{
																																															pos:        position{line: 118, col: 18, offset: 3399},
																																															val:        "[_0-9\\pL]",
																																															chars:      []rune{'_'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																														&zeroOrMoreExpr{
																																															pos: position{line: 118, col: 28, offset: 3409},
																																															expr: &charClassMatcher{
																																																pos:        position{line: 118, col: 29, offset: 3410},
																																																val:        "[-0-9\\pL]",
																																																chars:      []rune{'-'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																										&litMatcher{
																																											pos:        position{line: 456, col: 54, offset: 14656},
																																											val:        "}",
																																											ignoreCase: false,
																																											want:       "\"}\"",
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&actionExpr{
																																		pos: position{line: 506, col: 8, offset: 16673},
																																		run: (*parser).callonExternalCrossReference162,
																																		expr: &litMatcher{
																																			pos:        position{line: 506, col: 8, offset: 16673},
																																			val:        "{",
																																			ignoreCase: false,
																																			want:       "\"{\"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 491, col: 79, offset: 16049},
																														val:        ">>",
																														ignoreCase: false,
																														want:       "\">>\"",
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 493, col: 9, offset: 16122},
																											run: (*parser).callonExternalCrossReference165,
																											expr: &seqExpr{
																												pos: position{line: 493, col: 9, offset: 16122},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 493, col: 9, offset: 16122},
																														val:        "<<",
																														ignoreCase: false,
																														want:       "\"<<\"",
																													},
																													&labeledExpr{
																														pos:   position{line: 493, col: 14, offset: 16127},
																														label: "id",
																														expr: &actionExpr{
																															pos: position{line: 2866, col: 7, offset: 94768},
																															run: (*parser).callonExternalCrossReference169,
																															expr: &oneOrMoreExpr{
																																pos: position{line: 2866, col: 7, offset: 94768},
																																expr: &charClassMatcher{
																																	pos:        position{line: 2866, col: 7, offset: 94768},
																																	val:        "[^[]<>,]",
																																	chars:      []rune{'[', ']', '<', '>', ','},
																																	ignoreCase: false,
																																	inverted:   true,
																																},
																															},
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 493, col: 22, offset: 16135},
																														val:        ">>",
																														ignoreCase: false,
																														want:       "\">>\"",
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 2595, col: 11, offset: 86299},
																								run: (*parser).callonExternalCrossReference173,
																								expr: &charClassMatcher{
																									pos:        position{line: 2595, col: 12, offset: 86300},
																									val:        "[<>&]",
																									chars:      []rune{'<', '>', '&'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2858, col: 7, offset: 94556},
																		run: (*parser).callonExternalCrossReference175,
																		expr: &litMatcher{
																			pos:        position{line: 2858, col: 7, offset: 94556},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 947, col: 23, offset: 29896},
													run: (*parser).callonExternalCrossReference177,
													expr: &seqExpr{
														pos: position{line: 947, col: 23, offset: 29896},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 945, col: 32, offset: 29864},
																val:        "�",
																ignoreCase: false,
																want:       "\"�\"",
															},
															&labeledExpr{
																pos:   position{line: 947, col: 51, offset: 29924},
																label: "ref",
																expr: &actionExpr{
																	pos: position{line: 947, col: 56, offset: 29929},
																	run: (*parser).callonExternalCrossReference181,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 947, col: 56, offset: 29929},
																		expr: &charClassMatcher{
																			pos:        position{line: 947, col: 56, offset: 29929},
																			val:        "[0-9]",
																			ranges:     []rune{'0', '9'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 945, col: 32, offset: 29864},
																val:        "�",
																ignoreCase: false,
																want:       "\"�\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 497, col: 54, offset: 16259},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 497, col: 72, offset: 16277},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 515, col: 1, offset: 16948},
			expr: &choiceExpr{
				pos: position{line: 516, col: 5, offset: 16970},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 569, col: 5, offset: 18198},
						run: (*parser).callonDelimitedBlock2,
						expr: &seqExpr{
							pos: position{line: 569, col: 5, offset: 18198},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 569, col: 5, offset: 18198},
									run: (*parser).callonDelimitedBlock4,
								},
								&litMatcher{
									pos:        position{line: 541, col: 26, offset: 17536},
									val:        "////",
									ignoreCase: false,
									want:       "\"////\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 541, col: 33, offset: 17543},
									expr: &choiceExpr{
										pos: position{line: 2878, col: 10, offset: 95044},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2878, col: 10, offset: 95044},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
											&actionExpr{
												pos: position{line: 2878, col: 16, offset: 95050},
												run: (*parser).callonDelimitedBlock9,
												expr: &litMatcher{
													pos:        position{line: 2878, col: 16, offset: 95050},
													val:        "\t",
													ignoreCase: false,
													want:       "\"\\t\"",
												},
											},
										},
									},
								},
								&choiceExpr{
									pos: position{line: 2893, col: 8, offset: 95335},
									alternatives: []interface{}{
										&notExpr{
											pos: position{line: 2890, col: 8, offset: 95285},
											expr: &anyMatcher{
												line: 2890, col: 9, offset: 95286,
											},
										},
										&litMatcher{
											pos:        position{line: 2886, col: 12, offset: 95178},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
										&litMatcher{
											pos:        position{line: 2886, col: 19, offset: 95185},
											val:        "\r\n",
											ignoreCase: false,
											want:       "\"\\r\\n\"",
										},
										&actionExpr{
											pos: position{line: 2886, col: 28, offset: 95194},
											run: (*parser).callonDelimitedBlock16,
											expr: &litMatcher{
												pos:        position{line: 2886, col: 28, offset: 95194},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 574, col: 5, offset: 18381},
									run: (*parser).callonDelimitedBlock18,
								},
								&labeledExpr{
									pos:   position{line: 579, col: 5, offset: 18582},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 590, col: 5, offset: 18906},
										expr: &actionExpr{
											pos: position{line: 590, col: 6, offset: 18907},
											run: (*parser).callonDelimitedBlock21,
											expr: &seqExpr{
												pos: position{line: 590, col: 6, offset: 18907},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 590, col: 6, offset: 18907},
														expr: &choiceExpr{
															pos: position{line: 587, col: 29, offset: 18849},
															alternatives: []interface{}{
																&seqExpr{
																	pos: position{line: 541, col: 26, offset: 17536},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 541, col: 26, offset: 17536},
																			val:        "////",
																			ignoreCase: false,
																			want:       "\"////\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 541, col: 33, offset: 17543},
																			expr: &choiceExpr{
																				pos: position{line: 2878, col: 10, offset: 95044},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2878, col: 10, offset: 95044},
																						val:        " ",
																						ignoreCase: false,
																						want:       "\" \"",
																					},
																					&actionExpr{
																						pos: position{line: 2878, col: 16, offset: 95050},
																						run: (*parser).callonDelimitedBlock30,
																						expr: &litMatcher{
																							pos:        position{line: 2878, col: 16, offset: 95050},
																							val:        "\t",
																							ignoreCase: false,
																							want:       "\"\\t\"",
																						},
																					},
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2893, col: 8, offset: 95335},
																			alternatives: []interface{}{
																				&notExpr{
																					pos: position{line: 2890, col: 8, offset: 95285},
																					expr: &anyMatcher{
																						line: 2890, col: 9, offset: 95286,
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2886, col: 12, offset: 95178},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2886, col: 19, offset: 95185},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&actionExpr{
																					pos: position{line: 2886, col: 28, offset: 95194},
																					run: (*parser).callonDelimitedBlock37,
																					expr: &litMatcher{
																						pos:        position{line: 2886, col: 28, offset: 95194},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2890, col: 8, offset: 95285},
																	expr: &anyMatcher{
																		line: 2890, col: 9, offset: 95286,
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 591, col: 5, offset: 18937},
														label: "line",
														expr: &actionExpr{
															pos: position{line: 558, col: 5, offset: 17893},
															run: (*parser).callonDelimitedBlock42,
															expr: &seqExpr{
																pos: position{line: 558, col: 5, offset: 17893},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 558, col: 5, offset: 17893},
																		expr: &notExpr{
																			pos: position{line: 2890, col: 8, offset: 95285},
																			expr: &anyMatcher{
																				line: 2890, col: 9, offset: 95286,
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 559, col: 5, offset: 17966},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 559, col: 14, offset: 17975},
																			run: (*parser).callonDelimitedBlock48,
																			expr: &zeroOrMoreExpr{
																				pos: position{line: 559, col: 14, offset: 17975},
																				expr: &charClassMatcher{
																					pos:        position{line: 559, col: 14, offset: 17975},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2893, col: 8, offset: 95335},
																		alternatives: []interface{}{
																			&notExpr{
																				pos: position{line: 2890, col: 8, offset: 95285},
																				expr: &anyMatcher{
																					line: 2890, col: 9, offset: 95286,
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2886, col: 12, offset: 95178},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																			&litMatcher{
																				pos:        position{line: 2886, col: 19, offset: 95185},
																				val:        "\r\n",
																				ignoreCase: false,
																				want:       "\"\\r\\n\"",
																			},
																			&actionExpr{
																				pos: position{line: 2886, col: 28, offset: 95194},
																				run: (*parser).callonDelimitedBlock56,
																				expr: &litMatcher{
																					pos:        position{line: 2886, col: 28, offset: 95194},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 580, col: 5, offset: 18616},
									expr: &choiceExpr{
										pos: position{line: 587, col: 29, offset: 18849},
										alternatives: []interface{}{
											&seqExpr{
												pos: position{line: 541, col: 26, offset: 17536},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 541, col: 26, offset: 17536},
														val:        "////",
														ignoreCase: false,
														want:       "\"////\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 541, col: 33, offset: 17543},
														expr: &choiceExpr{
															pos: position{line: 2878, col: 10, offset: 95044},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2878, col: 10, offset: 95044},
																	val:        " ",
																	ignoreCase: false,
																	want:       "\" \"",
																},
																&actionExpr{
																	pos: position{line: 2878, col: 16, offset: 95050},
																	run: (*parser).callonDelimitedBlock65,
																	expr: &litMatcher{
																		pos:        position{line: 2878, col: 16, offset: 95050},
																		val:        "\t",
																		ignoreCase: false,
																		want:       "\"\\t\"",
																	},
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2893, col: 8, offset: 95335},
														alternatives: []interface{}{
															&notExpr{
																pos: position{line: 2890, col: 8, offset: 95285},
																expr: &anyMatcher{
																	line: 2890, col: 9, offset: 95286,
																},
															},
															&litMatcher{
																pos:        position{line: 2886, col: 12, offset: 95178},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2886, col: 19, offset: 95185},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&actionExpr{
																pos: position{line: 2886, col: 28, offset: 95194},
																run: (*parser).callonDelimitedBlock72,
																expr: &litMatcher{
																	pos:        position{line: 2886, col: 28, offset: 95194},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 2890, col: 8, offset: 95285},
												expr: &anyMatcher{
													line: 2890, col: 9, offset: 95286,
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 517, col: 7, offset: 16989},
						name: "ExampleBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 518, col: 7, offset: 17008},
						name: "FencedBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 519, col: 7, offset: 17026},
						name: "ListingBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 520, col: 7, offset: 17045},
						name: "LiteralBlock",
					},
					&actionExpr{
						pos: position{line: 719, col: 5, offset: 22728},
						run: (*parser).callonDelimitedBlock80,
						expr: &seqExpr{
							pos: position{line: 719, col: 5, offset: 22728},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 719, col: 5, offset: 22728},
									label: "firstLine",
									expr: &actionExpr{
										pos: position{line: 726, col: 5, offset: 22987},
										run: (*parser).callonDelimitedBlock83,
										expr: &seqExpr{
											pos: position{line: 726, col: 5, offset: 22987},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 726, col: 5, offset: 22987},
													expr: &actionExpr{
														pos: position{line: 482, col: 14, offset: 15644},
														run: (*parser).callonDelimitedBlock86,
														expr: &seqExpr{
															pos: position{line: 482, col: 14, offset: 15644},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 482, col: 14, offset: 15644},
																	expr: &notExpr{
																		pos: position{line: 2890, col: 8, offset: 95285},
																		expr: &anyMatcher{
																			line: 2890, col: 9, offset: 95286,
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 482, col: 19, offset: 15649},
																	expr: &choiceExpr{
																		pos: position{line: 2878, col: 10, offset: 95044},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2878, col: 10, offset: 95044},
																				val:        " ",
																				ignoreCase: false,
																				want:       "\" \"",
																			},
																			&actionExpr{
																				pos: position{line: 2878, col: 16, offset: 95050},
																				run: (*parser).callonDelimitedBlock94,
																				expr: &litMatcher{
																					pos:        position{line: 2878, col: 16, offset: 95050},
																					val:        "\t",
																					ignoreCase: false,
																					want:       "\"\\t\"",
																				},
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2893, col: 8, offset: 95335},
																	alternatives: []interface{}{
																		&notExpr{
																			pos: position{line: 2890, col: 8, offset: 95285},
																			expr: &anyMatcher{
																				line: 2890, col: 9, offset: 95286,
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2886, col: 12, offset: 95178},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2886, col: 19, offset: 95185},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&actionExpr{
																			pos: position{line: 2886, col: 28, offset: 95194},
																			run: (*parser).callonDelimitedBlock101,
																			expr: &litMatcher{
																				pos:        position{line: 2886, col: 28, offset: 95194},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 727, col: 5, offset: 23002},
													val:        "> ",
													ignoreCase: false,
													want:       "\"> \"",
												},
												&labeledExpr{
													pos:   position{line: 728, col: 5, offset: 23012},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 728, col: 14, offset: 23021},
														run: (*parser).callonDelimitedBlock105,
														expr: &oneOrMoreExpr{
															pos: position{line: 728, col: 15, offset: 23022},
															expr: &charClassMatcher{
																pos:        position{line: 728, col: 15, offset: 23022},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2893, col: 8, offset: 95335},
													alternatives: []interface{}{
														&notExpr{
															pos: position{line: 2890, col: 8, offset: 95285},
															expr: &anyMatcher{
																line: 2890, col: 9, offset: 95286,
															},
														},
														&litMatcher{
															pos:        position{line: 2886, col: 12, offset: 95178},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2886, col: 19, offset: 95185},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&actionExpr{
															pos: position{line: 2886, col: 28, offset: 95194},
															run: (*parser).callonDelimitedBlock113,
															expr: &litMatcher{
																pos:        position{line: 2886, col: 28, offset: 95194},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 720, col: 5, offset: 22765},
									label: "otherLines",
									expr: &zeroOrMoreExpr{
										pos: position{line: 720, col: 16, offset: 22776},
										expr: &choiceExpr{
											pos: position{line: 720, col: 17, offset: 22777},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 726, col: 5, offset: 22987},
													run: (*parser).callonDelimitedBlock118,
													expr: &seqExpr{
														pos: position{line: 726, col: 5, offset: 22987},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 726, col: 5, offset: 22987},
																expr: &actionExpr{
																	pos: position{line: 482, col: 14, offset: 15644},
																	run: (*parser).callonDelimitedBlock121,
																	expr: &seqExpr{
																		pos: position{line: 482, col: 14, offset: 15644},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 482, col: 14, offset: 15644},
																				expr: &notExpr{
																					pos: position{line: 2890, col: 8, offset: 95285},
																					expr: &anyMatcher{
																						line: 2890, col: 9, offset: 95286,
																					},
																				},
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 482, col: 19, offset: 15649},
																				expr: &choiceExpr{
																					pos: position{line: 2878, col: 10, offset: 95044},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2878, col: 10, offset: 95044},
																							val:        " ",
																							ignoreCase: false,
																							want:       "\" \"",
																						},
																						&actionExpr{
																							pos: position{line: 2878, col: 16, offset: 95050},
																							run: (*parser).callonDelimitedBlock129,
																							expr: &litMatcher{
																								pos:        position{line: 2878, col: 16, offset: 95050},
																								val:        "\t",
																								ignoreCase: false,
																								want:       "\"\\t\"",
																							},
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2893, col: 8, offset: 95335},
																				alternatives: []interface{}{
																					&notExpr{
																						pos: position{line: 2890, col: 8, offset: 95285},
																						expr: &anyMatcher{
																							line: 2890, col: 9, offset: 95286,
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 2886, col: 12, offset: 95178},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2886, col: 19, offset: 95185},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&actionExpr{
																						pos: position{line: 2886, col: 28, offset: 95194},
																						run: (*parser).callonDelimitedBlock136,
																						expr: &litMatcher{
																							pos:        position{line: 2886, col: 28, offset: 95194},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 727, col: 5, offset: 23002},
																val:        "> ",
																ignoreCase: false,
																want:       "\"> \"",
															},
															&labeledExpr{
																pos:   position{line: 728, col: 5, offset: 23012},
																label: "content",
																expr: &actionExpr{
																	pos: position{line: 728, col: 14, offset: 23021},
																	run: (*parser).callonDelimitedBlock140,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 728, col: 15, offset: 23022},
																		expr: &charClassMatcher{
																			pos:        position{line: 728, col: 15, offset: 23022},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2893, col: 8, offset: 95335},
																alternatives: []interface{}{
																	&notExpr{
																		pos: position{line: 2890, col: 8, offset: 95285},
																		expr: &anyMatcher{
																			line: 2890, col: 9, offset: 95286,
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2886, col: 12, offset: 95178},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2886, col: 19, offset: 95185},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&actionExpr{
																		pos: position{line: 2886, col: 28, offset: 95194},
																		run: (*parser).callonDelimitedBlock148,
																		expr: &litMatcher{
																			pos:        position{line: 2886, col: 28, offset: 95194},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 1605, col: 5, offset: 53281},
													run: (*parser).callonDelimitedBlock150,
													expr: &seqExpr{
														pos: position{line: 1605, col: 5, offset: 53281},
														exprs: []interface{}{
															&labeledExpr{
																pos:   position{line: 1605, col: 5, offset: 53281},
																label: "content",
																expr: &actionExpr{
																	pos: position{line: 1605, col: 14, offset: 53290},
																	run: (*parser).callonDelimitedBlock153,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 1605, col: 14, offset: 53290},
																		expr: &charClassMatcher{
																			pos:        position{line: 1605, col: 14, offset: 53290},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																},
															},
															&andCodeExpr{
																pos: position{line: 1608, col: 5, offset: 53347},
																run: (*parser).callonDelimitedBlock156,
															},
															&choiceExpr{
																pos: position{line: 2893, col: 8, offset: 95335},
																alternatives: []interface{}{
																	&notExpr{
																		pos: position{line: 2890, col: 8, offset: 95285},
																		expr: &anyMatcher{
																			line: 2890, col: 9, offset: 95286,
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2886, col: 12, offset: 95178},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2886, col: 19, offset: 95185},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&actionExpr{
																		pos: position{line: 2886, col: 28, offset: 95194},
																		run: (*parser).callonDelimitedBlock162,
																		expr: &litMatcher{
																			pos:        position{line: 2886, col: 28, offset: 95194},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 522, col: 7, offset: 17089},
						name: "PassthroughBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 523, col: 7, offset: 17112},
						name: "QuoteBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 524, col: 7, offset: 17129},
						name: "SidebarBlock",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 598, col: 1, offset: 19070},
			expr: &actionExpr{
				pos: position{line: 599, col: 5, offset: 19090},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 599, col: 5, offset: 19090},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 599, col: 5, offset: 19090},
							run: (*parser).callonExampleBlock3,
						},
						&litMatcher{
							pos:        position{line: 543, col: 26, offset: 17580},
							val:        "====",
							ignoreCase: false,
							want:       "\"====\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 543, col: 33, offset: 17587},
							expr: &choiceExpr{
								pos: position{line: 2878, col: 10, offset: 95044},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 2878, col: 10, offset: 95044},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
									&actionExpr{
										pos: position{line: 2878, col: 16, offset: 95050},
										run: (*parser).callonExampleBlock8,
										expr: &litMatcher{
											pos:        position{line: 2878, col: 16, offset: 95050},
											val:        "\t",
											ignoreCase: false,
											want:       "\"\\t\"",
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2893, col: 8, offset: 95335},
							alternatives: []interface{}{
								&notExpr{
									pos: position{line: 2890, col: 8, offset: 95285},
									expr: &anyMatcher{
										line: 2890, col: 9, offset: 95286,
									},
								},
								&litMatcher{
									pos:        position{line: 2886, col: 12, offset: 95178},
									val:        "\n",
									ignoreCase: false,
									want:       "\"\\n\"",
								},
								&litMatcher{
									pos:        position{line: 2886, col: 19, offset: 95185},
									val:        "\r\n",
									ignoreCase: false,
									want:       "\"\\r\\n\"",
								},
								&actionExpr{
									pos: position{line: 2886, col: 28, offset: 95194},
									run: (*parser).callonExampleBlock15,
									expr: &litMatcher{
										pos:        position{line: 2886, col: 28, offset: 95194},
										val:        "\r",
										ignoreCase: false,
										want:       "\"\\r\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 604, col: 5, offset: 19273},
							run: (*parser).callonExampleBlock17,
						},
						&labeledExpr{
							pos:   position{line: 609, col: 5, offset: 19474},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 609, col: 14, offset: 19483},
								name: "ExampleBlockContent",
							},
						},
						&choiceExpr{
							pos: position{line: 617, col: 29, offset: 19740},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 543, col: 26, offset: 17580},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 543, col: 26, offset: 17580},
											val:        "====",
											ignoreCase: false,
											want:       "\"====\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 543, col: 33, offset: 17587},
											expr: &choiceExpr{
												pos: position{line: 2878, col: 10, offset: 95044},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2878, col: 10, offset: 95044},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
													&actionExpr{
														pos: position{line: 2878, col: 16, offset: 95050},
														run: (*parser).callonExampleBlock26,
														expr: &litMatcher{
															pos:        position{line: 2878, col: 16, offset: 95050},
															val:        "\t",
															ignoreCase: false,
															want:       "\"\\t\"",
														},
													},
												},
											},
										},
										&choiceExpr{
											pos: position{line: 2893, col: 8, offset: 95335},
											alternatives: []interface{}{
												&notExpr{
													pos: position{line: 2890, col: 8, offset: 95285},
													expr: &anyMatcher{
														line: 2890, col: 9, offset: 95286,
													},
												},
												&litMatcher{
													pos:        position{line: 2886, col: 12, offset: 95178},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
												&litMatcher{
													pos:        position{line: 2886, col: 19, offset: 95185},
													val:        "\r\n",
													ignoreCase: false,
													want:       "\"\\r\\n\"",
												},
												&actionExpr{
													pos: position{line: 2886, col: 28, offset: 95194},
													run: (*parser).callonExampleBlock33,
													expr: &litMatcher{
														pos:        position{line: 2886, col: 28, offset: 95194},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2890, col: 8, offset: 95285},
									expr: &anyMatcher{
										line: 2890, col: 9, offset: 95286,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockContent",
			pos:  position{line: 619, col: 1, offset: 19769},
			expr: &zeroOrMoreExpr{
				pos: position{line: 620, col: 4, offset: 19796},
				expr: &actionExpr{
					pos: position{line: 620, col: 5, offset: 19797},
					run: (*parser).callonExampleBlockContent2,
					expr: &seqExpr{
						pos: position{line: 620, col: 5, offset: 19797},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 620, col: 5, offset: 19797},
								expr: &choiceExpr{
									pos: position{line: 617, col: 29, offset: 19740},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 543, col: 26, offset: 17580},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 543, col: 26, offset: 17580},
													val:        "====",
													ignoreCase: false,
													want:       "\"====\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 543, col: 33, offset: 17587},
													expr: &choiceExpr{
														pos: position{line: 2878, col: 10, offset: 95044},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2878, col: 10, offset: 95044},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2878, col: 16, offset: 95050},
																run: (*parser).callonExampleBlockContent11,
																expr: &litMatcher{
																	pos:        position{line: 2878, col: 16, offset: 95050},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2893, col: 8, offset: 95335},
													alternatives: []interface{}{
														&notExpr{
															pos: position{line: 2890, col: 8, offset: 95285},
															expr: &anyMatcher{
																line: 2890, col: 9, offset: 95286,
															},
														},
														&litMatcher{
															pos:        position{line: 2886, col: 12, offset: 95178},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2886, col: 19, offset: 95185},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&actionExpr{
															pos: position{line: 2886, col: 28, offset: 95194},
															run: (*parser).callonExampleBlockContent18,
															expr: &litMatcher{
																pos:        position{line: 2886, col: 28, offset: 95194},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
										&notExpr{
											pos: position{line: 2890, col: 8, offset: 95285},
											expr: &anyMatcher{
												line: 2890, col: 9, offset: 95286,
											},
										},
									},
								},
							},
							&labeledExpr{
								pos:   position{line: 621, col: 5, offset: 19827},
								label: "line",
								expr: &choiceExpr{
									pos: position{line: 621, col: 11, offset: 19833},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 621, col: 11, offset: 19833},
											name: "FileInclusion",
										},
										&actionExpr{
											pos: position{line: 558, col: 5, offset: 17893},
											run: (*parser).callonExampleBlockContent25,
											expr: &seqExpr{
												pos: position{line: 558, col: 5, offset: 17893},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 558, col: 5, offset: 17893},
														expr: &notExpr{
															pos: position{line: 2890, col: 8, offset: 95285},
															expr: &anyMatcher{
																line: 2890, col: 9, offset: 95286,
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 559, col: 5, offset: 17966},
														label: "content",
														expr: &actionExpr{
															pos: position{line: 559, col: 14, offset: 17975},
															run: (*parser).callonExampleBlockContent31,
															expr: &zeroOrMoreExpr{
																pos: position{line: 559, col: 14, offset: 17975},
																expr: &charClassMatcher{
																	pos:        position{line: 559, col: 14, offset: 17975},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2893, col: 8, offset: 95335},
														alternatives: []interface{}{
															&notExpr{
																pos: position{line: 2890, col: 8, offset: 95285},
																expr: &anyMatcher{
																	line: 2890, col: 9, offset: 95286,
																},
															},
															&litMatcher{
																pos:        position{line: 2886, col: 12, offset: 95178},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2886, col: 19, offset: 95185},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&actionExpr{
																pos: position{line: 2886, col: 28, offset: 95194},
																run: (*parser).callonExampleBlockContent39,
																expr: &litMatcher{
																	pos:        position{line: 2886, col: 28, offset: 95194},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 628, col: 1, offset: 19975},
			expr: &actionExpr{
				pos: position{line: 629, col: 5, offset: 19994},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 629, col: 5, offset: 19994},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 629, col: 5, offset: 19994},
							run: (*parser).callonFencedBlock3,
						},
						&litMatcher{
							pos:        position{line: 545, col: 25, offset: 17623},
							val:        "```",
							ignoreCase: false,
							want:       "\"```\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 545, col: 31, offset: 17629},
							expr: &choiceExpr{
								pos: position{line: 2878, col: 10, offset: 95044},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 2878, col: 10, offset: 95044},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
									&actionExpr{
										pos: position{line: 2878, col: 16, offset: 95050},
										run: (*parser).callonFencedBlock8,
										expr: &litMatcher{
											pos:        position{line: 2878, col: 16, offset: 95050},
											val:        "\t",
											ignoreCase: false,
											want:       "\"\\t\"",
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2893, col: 8, offset: 95335},
							alternatives: []interface{}{
								&notExpr{
									pos: position{line: 2890, col: 8, offset: 95285},
									expr: &anyMatcher{
										line: 2890, col: 9, offset: 95286,
									},
								},
								&litMatcher{
									pos:        position{line: 2886, col: 12, offset: 95178},
									val:        "\n",
									ignoreCase: false,
									want:       "\"\\n\"",
								},
								&litMatcher{
									pos:        position{line: 2886, col: 19, offset: 95185},
									val:        "\r\n",
									ignoreCase: false,
									want:       "\"\\r\\n\"",
								},
								&actionExpr{
									pos: position{line: 2886, col: 28, offset: 95194},
									run: (*parser).callonFencedBlock15,
									expr: &litMatcher{
										pos:        position{line: 2886, col: 28, offset: 95194},
										val:        "\r",
										ignoreCase: false,
										want:       "\"\\r\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 634, col: 5, offset: 20175},
							run: (*parser).callonFencedBlock17,
						},
						&labeledExpr{
							pos:   position{line: 639, col: 5, offset: 20375},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 639, col: 14, offset: 20384},
								name: "FencedBlockContent",
							},
						},
						&choiceExpr{
							pos: position{line: 647, col: 28, offset: 20640},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 545, col: 25, offset: 17623},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 545, col: 25, offset: 17623},
											val:        "```",
											ignoreCase: false,
											want:       "\"```\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 545, col: 31, offset: 17629},
											expr: &choiceExpr{
												pos: position{line: 2878, col: 10, offset: 95044},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2878, col: 10, offset: 95044},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
													&actionExpr{
														pos: position{line: 2878, col: 16, offset: 95050},
														run: (*parser).callonFencedBlock26,
														expr: &litMatcher{
															pos:        position{line: 2878, col: 16, offset: 95050},
															val:        "\t",
															ignoreCase: false,
															want:       "\"\\t\"",
														},
													},
												},
											},
										},
										&choiceExpr{
											pos: position{line: 2893, col: 8, offset: 95335},
											alternatives: []interface{}{
												&notExpr{
													pos: position{line: 2890, col: 8, offset: 95285},
													expr: &anyMatcher{
														line: 2890, col: 9, offset: 95286,
													},
												},
												&litMatcher{
													pos:        position{line: 2886, col: 12, offset: 95178},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
												&litMatcher{
													pos:        position{line: 2886, col: 19, offset: 95185},
													val:        "\r\n",
													ignoreCase: false,
													want:       "\"\\r\\n\"",
												},
												&actionExpr{
													pos: position{line: 2886, col: 28, offset: 95194},
													run: (*parser).callonFencedBlock33,
													expr: &litMatcher{
														pos:        position{line: 2886, col: 28, offset: 95194},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2890, col: 8, offset: 95285},
									expr: &anyMatcher{
										line: 2890, col: 9, offset: 95286,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockContent",
			pos:  position{line: 649, col: 1, offset: 20668},
			expr: &zeroOrMoreExpr{
				pos: position{line: 650, col: 5, offset: 20695},
				expr: &actionExpr{
					pos: position{line: 650, col: 6, offset: 20696},
					run: (*parser).callonFencedBlockContent2,
					expr: &seqExpr{
						pos: position{line: 650, col: 6, offset: 20696},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 650, col: 6, offset: 20696},
								expr: &choiceExpr{
									pos: position{line: 647, col: 28, offset: 20640},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 545, col: 25, offset: 17623},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 545, col: 25, offset: 17623},
													val:        "```",
													ignoreCase: false,
													want:       "\"```\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 545, col: 31, offset: 17629},
													expr: &choiceExpr{
														pos: position{line: 2878, col: 10, offset: 95044},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2878, col: 10, offset: 95044},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2878, col: 16, offset: 95050},
																run: (*parser).callonFencedBlockContent11,
																expr: &litMatcher{
																	pos:        position{line: 2878, col: 16, offset: 95050},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2893, col: 8, offset: 95335},
													alternatives: []interface{}{
														&notExpr{
															pos: position{line: 2890, col: 8, offset: 95285},
															expr: &anyMatcher{
																line: 2890, col: 9, offset: 95286,
															},
														},
														&litMatcher{
															pos:        position{line: 2886, col: 12, offset: 95178},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2886, col: 19, offset: 95185},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&actionExpr{
															pos: position{line: 2886, col: 28, offset: 95194},
															run: (*parser).callonFencedBlockContent18,
															expr: &litMatcher{
																pos:        position{line: 2886, col: 28, offset: 95194},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
										&notExpr{
											pos: position{line: 2890, col: 8, offset: 95285},
											expr: &anyMatcher{
												line: 2890, col: 9, offset: 95286,
											},
										},
									},
								},
							},
							&labeledExpr{
								pos:   position{line: 651, col: 5, offset: 20725},
								label: "line",
								expr: &choiceExpr{
									pos: position{line: 651, col: 11, offset: 20731},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 651, col: 11, offset: 20731},
											name: "FileInclusion",
										},
										&actionExpr{
											pos: position{line: 558, col: 5, offset: 17893},
											run: (*parser).callonFencedBlockContent25,
											expr: &seqExpr{
												pos: position{line: 558, col: 5, offset: 17893},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 558, col: 5, offset: 17893},
														expr: &notExpr{
															pos: position{line: 2890, col: 8, offset: 95285},
															expr: &anyMatcher{
																line: 2890, col: 9, offset: 95286,
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 559, col: 5, offset: 17966},
														label: "content",
														expr: &actionExpr{
															pos: position{line: 559, col: 14, offset: 17975},
															run: (*parser).callonFencedBlockContent31,
															expr: &zeroOrMoreExpr{
																pos: position{line: 559, col: 14, offset: 17975},
																expr: &charClassMatcher{
																	pos:        position{line: 559, col: 14, offset: 17975},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2893, col: 8, offset: 95335},
														alternatives: []interface{}{
															&notExpr{
																pos: position{line: 2890, col: 8, offset: 95285},
																expr: &anyMatcher{
																	line: 2890, col: 9, offset: 95286,
																},
															},
															&litMatcher{
																pos:        position{line: 2886, col: 12, offset: 95178},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2886, col: 19, offset: 95185},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&actionExpr{
																pos: position{line: 2886, col: 28, offset: 95194},
																run: (*parser).callonFencedBlockContent39,
																expr: &litMatcher{
																	pos:        position{line: 2886, col: 28, offset: 95194},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 658, col: 1, offset: 20874},
			expr: &actionExpr{
				pos: position{line: 659, col: 5, offset: 20894},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 659, col: 5, offset: 20894},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 659, col: 5, offset: 20894},
							run: (*parser).callonListingBlock3,
						},
						&litMatcher{
							pos:        position{line: 547, col: 26, offset: 17666},
							val:        "----",
							ignoreCase: false,
							want:       "\"----\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 547, col: 33, offset: 17673},
							expr: &choiceExpr{
								pos: position{line: 2878, col: 10, offset: 95044},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 2878, col: 10, offset: 95044},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
									&actionExpr{
										pos: position{line: 2878, col: 16, offset: 95050},
										run: (*parser).callonListingBlock8,
										expr: &litMatcher{
											pos:        position{line: 2878, col: 16, offset: 95050},
											val:        "\t",
											ignoreCase: false,
											want:       "\"\\t\"",
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2893, col: 8, offset: 95335},
							alternatives: []interface{}{
								&notExpr{
									pos: position{line: 2890, col: 8, offset: 95285},
									expr: &anyMatcher{
										line: 2890, col: 9, offset: 95286,
									},
								},
								&litMatcher{
									pos:        position{line: 2886, col: 12, offset: 95178},
									val:        "\n",
									ignoreCase: false,
									want:       "\"\\n\"",
								},
								&litMatcher{
									pos:        position{line: 2886, col: 19, offset: 95185},
									val:        "\r\n",
									ignoreCase: false,
									want:       "\"\\r\\n\"",
								},
								&actionExpr{
									pos: position{line: 2886, col: 28, offset: 95194},
									run: (*parser).callonListingBlock15,
									expr: &litMatcher{
										pos:        position{line: 2886, col: 28, offset: 95194},
										val:        "\r",
										ignoreCase: false,
										want:       "\"\\r\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 664, col: 5, offset: 21077},
							run: (*parser).callonListingBlock17,
						},
						&labeledExpr{
							pos:   position{line: 669, col: 5, offset: 21278},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 669, col: 14, offset: 21287},
								name: "ListingBlockContent",
							},
						},
						&choiceExpr{
							pos: position{line: 677, col: 29, offset: 21549},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 547, col: 26, offset: 17666},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 547, col: 26, offset: 17666},
											val:        "----",
											ignoreCase: false,
											want:       "\"----\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 547, col: 33, offset: 17673},
											expr: &choiceExpr{
												pos: position{line: 2878, col: 10, offset: 95044},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2878, col: 10, offset: 95044},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
													&actionExpr{
														pos: position{line: 2878, col: 16, offset: 95050},
														run: (*parser).callonListingBlock26,
														expr: &litMatcher{
															pos:        position{line: 2878, col: 16, offset: 95050},
															val:        "\t",
															ignoreCase: false,
															want:       "\"\\t\"",
														},
													},
												},
											},
										},
										&choiceExpr{
											pos: position{line: 2893, col: 8, offset: 95335},
											alternatives: []interface{}{
												&notExpr{
													pos: position{line: 2890, col: 8, offset: 95285},
													expr: &anyMatcher{
														line: 2890, col: 9, offset: 95286,
													},
												},
												&litMatcher{
													pos:        position{line: 2886, col: 12, offset: 95178},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
												&litMatcher{
													pos:        position{line: 2886, col: 19, offset: 95185},
													val:        "\r\n",
													ignoreCase: false,
													want:       "\"\\r\\n\"",
												},
												&actionExpr{
													pos: position{line: 2886, col: 28, offset: 95194},
													run: (*parser).callonListingBlock33,
													expr: &litMatcher{
														pos:        position{line: 2886, col: 28, offset: 95194},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2890, col: 8, offset: 95285},
									expr: &anyMatcher{
										line: 2890, col: 9, offset: 95286,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockContent",
			pos:  position{line: 679, col: 1, offset: 21578},
			expr: &zeroOrMoreExpr{
				pos: position{line: 680, col: 5, offset: 21606},
				expr: &actionExpr{
					pos: position{line: 680, col: 6, offset: 21607},
					run: (*parser).callonListingBlockContent2,
					expr: &seqExpr{
						pos: position{line: 680, col: 6, offset: 21607},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 680, col: 6, offset: 21607},
								expr: &choiceExpr{
									pos: position{line: 677, col: 29, offset: 21549},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 547, col: 26, offset: 17666},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 547, col: 26, offset: 17666},
													val:        "----",
													ignoreCase: false,
													want:       "\"----\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 547, col: 33, offset: 17673},
													expr: &choiceExpr{
														pos: position{line: 2878, col: 10, offset: 95044},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2878, col: 10, offset: 95044},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2878, col: 16, offset: 95050},
																run: (*parser).callonListingBlockContent11,
																expr: &litMatcher{
																	pos:        position{line: 2878, col: 16, offset: 95050},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2893, col: 8, offset: 95335},
													alternatives: []interface{}{
														&notExpr{
															pos: position{line: 2890, col: 8, offset: 95285},
															expr: &anyMatcher{
																line: 2890, col: 9, offset: 95286,
															},
														},
														&litMatcher{
															pos:        position{line: 2886, col: 12, offset: 95178},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2886, col: 19, offset: 95185},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&actionExpr{
															pos: position{line: 2886, col: 28, offset: 95194},
															run: (*parser).callonListingBlockContent18,
															expr: &litMatcher{
																pos:        position{line: 2886, col: 28, offset: 95194},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
										&notExpr{
											pos: position{line: 2890, col: 8, offset: 95285},
											expr: &anyMatcher{
												line: 2890, col: 9, offset: 95286,
											},
										},
									},
								},
							},
							&labeledExpr{
								pos:   position{line: 681, col: 5, offset: 21637},
								label: "line",
								expr: &choiceExpr{
									pos: position{line: 681, col: 11, offset: 21643},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 681, col: 11, offset: 21643},
											name: "FileInclusion",
										},
										&actionExpr{
											pos: position{line: 558, col: 5, offset: 17893},
											run: (*parser).callonListingBlockContent25,
											expr: &seqExpr{
												pos: position{line: 558, col: 5, offset: 17893},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 558, col: 5, offset: 17893},
														expr: &notExpr{
															pos: position{line: 2890, col: 8, offset: 95285},
															expr: &anyMatcher{
																line: 2890, col: 9, offset: 95286,
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 559, col: 5, offset: 17966},
														label: "content",
														expr: &actionExpr{
															pos: position{line: 559, col: 14, offset: 17975},
															run: (*parser).callonListingBlockContent31,
															expr: &zeroOrMoreExpr{
																pos: position{line: 559, col: 14, offset: 17975},
																expr: &charClassMatcher{
																	pos:        position{line: 559, col: 14, offset: 17975},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2893, col: 8, offset: 95335},
														alternatives: []interface{}{
															&notExpr{
																pos: position{line: 2890, col: 8, offset: 95285},
																expr: &anyMatcher{
																	line: 2890, col: 9, offset: 95286,
																},
															},
															&litMatcher{
																pos:        position{line: 2886, col: 12, offset: 95178},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2886, col: 19, offset: 95185},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&actionExpr{
																pos: position{line: 2886, col: 28, offset: 95194},
																run: (*parser).callonListingBlockContent39,
																expr: &litMatcher{
																	pos:        position{line: 2886, col: 28, offset: 95194},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 688, col: 1, offset: 21786},
			expr: &actionExpr{
				pos: position{line: 689, col: 5, offset: 21806},
				run: (*parser).callonLiteralBlock1,
				expr: &seqExpr{
					pos: position{line: 689, col: 5, offset: 21806},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 549, col: 26, offset: 17710},
							val:        "....",
							ignoreCase: false,
							want:       "\"....\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 549, col: 33, offset: 17717},
							expr: &choiceExpr{
								pos: position{line: 2878, col: 10, offset: 95044},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 2878, col: 10, offset: 95044},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
									&actionExpr{
										pos: position{line: 2878, col: 16, offset: 95050},
										run: (*parser).callonLiteralBlock7,
										expr: &litMatcher{
											pos:        position{line: 2878, col: 16, offset: 95050},
											val:        "\t",
											ignoreCase: false,
											want:       "\"\\t\"",
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2893, col: 8, offset: 95335},
							alternatives: []interface{}{
								&notExpr{
									pos: position{line: 2890, col: 8, offset: 95285},
									expr: &anyMatcher{
										line: 2890, col: 9, offset: 95286,
									},
								},
								&litMatcher{
									pos:        position{line: 2886, col: 12, offset: 95178},
									val:        "\n",
									ignoreCase: false,
									want:       "\"\\n\"",
								},
								&litMatcher{
									pos:        position{line: 2886, col: 19, offset: 95185},
									val:        "\r\n",
									ignoreCase: false,
									want:       "\"\\r\\n\"",
								},
								&actionExpr{
									pos: position{line: 2886, col: 28, offset: 95194},
									run: (*parser).callonLiteralBlock14,
									expr: &litMatcher{
										pos:        position{line: 2886, col: 28, offset: 95194},
										val:        "\r",
										ignoreCase: false,
										want:       "\"\\r\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 690, col: 5, offset: 21837},
							run: (*parser).callonLiteralBlock16,
						},
						&labeledExpr{
							pos:   position{line: 694, col: 5, offset: 21989},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 694, col: 14, offset: 21998},
								name: "LiteralBlockContent",
							},
						},
						&andCodeExpr{
							pos: position{line: 695, col: 5, offset: 22023},
							run: (*parser).callonLiteralBlock19,
						},
						&zeroOrOneExpr{
							pos: position{line: 700, col: 5, offset: 22224},
							expr: &choiceExpr{
								pos: position{line: 707, col: 29, offset: 22457},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 549, col: 26, offset: 17710},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 549, col: 26, offset: 17710},
												val:        "....",
												ignoreCase: false,
												want:       "\"....\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 549, col: 33, offset: 17717},
												expr: &choiceExpr{
													pos: position{line: 2878, col: 10, offset: 95044},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2878, col: 10, offset: 95044},
															val:        " ",
															ignoreCase: false,
															want:       "\" \"",
														},
														&actionExpr{
															pos: position{line: 2878, col: 16, offset: 95050},
															run: (*parser).callonLiteralBlock27,
															expr: &litMatcher{
																pos:        position{line: 2878, col: 16, offset: 95050},
																val:        "\t",
																ignoreCase: false,
																want:       "\"\\t\"",
															},
														},
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2893, col: 8, offset: 95335},
												alternatives: []interface{}{
													&notExpr{
														pos: position{line: 2890, col: 8, offset: 95285},
														expr: &anyMatcher{
															line: 2890, col: 9, offset: 95286,
														},
													},
													&litMatcher{
														pos:        position{line: 2886, col: 12, offset: 95178},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
													&litMatcher{
														pos:        position{line: 2886, col: 19, offset: 95185},
														val:        "\r\n",
														ignoreCase: false,
														want:       "\"\\r\\n\"",
													},
													&actionExpr{
														pos: position{line: 2886, col: 28, offset: 95194},
														run: (*parser).callonLiteralBlock34,
														expr: &litMatcher{
															pos:        position{line: 2886, col: 28, offset: 95194},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
										},
									},
									&notExpr{
										pos: position{line: 2890, col: 8, offset: 95285},
										expr: &anyMatcher{
											line: 2890, col: 9, offset: 95286,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlockContent",
			pos:  position{line: 709, col: 1, offset: 22486},
			expr: &zeroOrMoreExpr{
				pos: position{line: 710, col: 5, offset: 22514},
				expr: &actionExpr{
					pos: position{line: 710, col: 6, offset: 22515},
					run: (*parser).callonLiteralBlockContent2,
					expr: &seqExpr{
						pos: position{line: 710, col: 6, offset: 22515},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 710, col: 6, offset: 22515},
								expr: &choiceExpr{
									pos: position{line: 707, col: 29, offset: 22457},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 549, col: 26, offset: 17710},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 549, col: 26, offset: 17710},
													val:        "....",
													ignoreCase: false,
													want:       "\"....\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 549, col: 33, offset: 17717},
													expr: &choiceExpr{
														pos: position{line: 2878, col: 10, offset: 95044},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2878, col: 10, offset: 95044},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2878, col: 16, offset: 95050},
																run: (*parser).callonLiteralBlockContent11,
																expr: &litMatcher{
																	pos:        position{line: 2878, col: 16, offset: 95050},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2893, col: 8, offset: 95335},
													alternatives: []interface{}{
														&notExpr{
															pos: position{line: 2890, col: 8, offset: 95285},
															expr: &anyMatcher{
																line: 2890, col: 9, offset: 95286,
															},
														},
														&litMatcher{
															pos:        position{line: 2886, col: 12, offset: 95178},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2886, col: 19, offset: 95185},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&actionExpr{
															pos: position{line: 2886, col: 28, offset: 95194},
															run: (*parser).callonLiteralBlockContent18,
															expr: &litMatcher{
																pos:        position{line: 2886, col: 28, offset: 95194},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
										&notExpr{
											pos: position{line: 2890, col: 8, offset: 95285},
											expr: &anyMatcher{
												line: 2890, col: 9, offset: 95286,
											},
										},
									},
								},
							},
							&labeledExpr{
								pos:   position{line: 711, col: 5, offset: 22545},
								label: "line",
								expr: &choiceExpr{
									pos: position{line: 711, col: 11, offset: 22551},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 711, col: 11, offset: 22551},
											name: "FileInclusion",
										},
										&actionExpr{
											pos: position{line: 558, col: 5, offset: 17893},
											run: (*parser).callonLiteralBlockContent25,
											expr: &seqExpr{
												pos: position{line: 558, col: 5, offset: 17893},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 558, col: 5, offset: 17893},
														expr: &notExpr{
															pos: position{line: 2890, col: 8, offset: 95285},
															expr: &anyMatcher{
																line: 2890, col: 9, offset: 95286,
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 559, col: 5, offset: 17966},
														label: "content",
														expr: &actionExpr{
															pos: position{line: 559, col: 14, offset: 17975},
															run: (*parser).callonLiteralBlockContent31,
															expr: &zeroOrMoreExpr{
																pos: position{line: 559, col: 14, offset: 17975},
																expr: &charClassMatcher{
																	pos:        position{line: 559, col: 14, offset: 17975},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2893, col: 8, offset: 95335},
														alternatives: []interface{}{
															&notExpr{
																pos: position{line: 2890, col: 8, offset: 95285},
																expr: &anyMatcher{
																	line: 2890, col: 9, offset: 95286,
																},
															},
															&litMatcher{
																pos:        position{line: 2886, col: 12, offset: 95178},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2886, col: 19, offset: 95185},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&actionExpr{
																pos: position{line: 2886, col: 28, offset: 95194},
																run: (*parser).callonLiteralBlockContent39,
																expr: &litMatcher{
																	pos:        position{line: 2886, col: 28, offset: 95194},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteAttribution",
			pos:  position{line: 734, col: 1, offset: 23140},
			expr: &actionExpr{
				pos: position{line: 735, col: 5, offset: 23173},
				run: (*parser).callonMarkdownQuoteAttribution1,
				expr: &seqExpr{
					pos: position{line: 735, col: 5, offset: 23173},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 735, col: 5, offset: 23173},
							val:        "-- ",
							ignoreCase: false,
							want:       "\"-- \"",
						},
						&labeledExpr{
							pos:   position{line: 735, col: 11, offset: 23179},
							label: "author",
							expr: &actionExpr{
								pos: position{line: 735, col: 19, offset: 23187},
								run: (*parser).callonMarkdownQuoteAttribution5,
								expr: &oneOrMoreExpr{
									pos: position{line: 735, col: 20, offset: 23188},
									expr: &charClassMatcher{
										pos:        position{line: 735, col: 20, offset: 23188},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2893, col: 8, offset: 95335},
							alternatives: []interface{}{
								&notExpr{
									pos: position{line: 2890, col: 8, offset: 95285},
									expr: &anyMatcher{
										line: 2890, col: 9, offset: 95286,
									},
								},
								&litMatcher{
									pos:        position{line: 2886, col: 12, offset: 95178},
									val:        "\n",
									ignoreCase: false,
									want:       "\"\\n\"",
								},
								&litMatcher{
									pos:        position{line: 2886, col: 19, offset: 95185},
									val:        "\r\n",
									ignoreCase: false,
									want:       "\"\\r\\n\"",
								},
								&actionExpr{
									pos: position{line: 2886, col: 28, offset: 95194},
									run: (*parser).callonMarkdownQuoteAttribution13,
									expr: &litMatcher{
										pos:        position{line: 2886, col: 28, offset: 95194},
										val:        "\r",
										ignoreCase: false,
										want:       "\"\\r\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlock",
			pos:  position{line: 744, col: 1, offset: 23356},
			expr: &actionExpr{
				pos: position{line: 745, col: 5, offset: 23380},
				run: (*parser).callonPassthroughBlock1,
				expr: &seqExpr{
					pos: position{line: 745, col: 5, offset: 23380},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 745, col: 5, offset: 23380},
							run: (*parser).callonPassthroughBlock3,
						},
						&litMatcher{
							pos:        position{line: 551, col: 30, offset: 17758},
							val:        "++++",
							ignoreCase: false,
							want:       "\"++++\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 551, col: 37, offset: 17765},
							expr: &choiceExpr{
								pos: position{line: 2878, col: 10, offset: 95044},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 2878, col: 10, offset: 95044},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
									&actionExpr{
										pos: position{line: 2878, col: 16, offset: 95050},
										run: (*parser).callonPassthroughBlock8,
										expr: &litMatcher{
											pos:        position{line: 2878, col: 16, offset: 95050},
											val:        "\t",
											ignoreCase: false,
											want:       "\"\\t\"",
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2893, col: 8, offset: 95335},
							alternatives: []interface{}{
								&notExpr{
									pos: position{line: 2890, col: 8, offset: 95285},
									expr: &anyMatcher{
										line: 2890, col: 9, offset: 95286,
									},
								},
								&litMatcher{
									pos:        position{line: 2886, col: 12, offset: 95178},
									val:        "\n",
									ignoreCase: false,
									want:       "\"\\n\"",
								},
								&litMatcher{
									pos:        position{line: 2886, col: 19, offset: 95185},
									val:        "\r\n",
									ignoreCase: false,
									want:       "\"\\r\\n\"",
								},
								&actionExpr{
									pos: position{line: 2886, col: 28, offset: 95194},
									run: (*parser).callonPassthroughBlock15,
									expr: &litMatcher{
										pos:        position{line: 2886, col: 28, offset: 95194},
										val:        "\r",
										ignoreCase: false,
										want:       "\"\\r\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 750, col: 5, offset: 23571},
							run: (*parser).callonPassthroughBlock17,
						},
						&labeledExpr{
							pos:   position{line: 755, col: 5, offset: 23776},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 755, col: 14, offset: 23785},
								name: "PassthroughBlockContent",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 756, col: 5, offset: 23814},
							expr: &choiceExpr{
								pos: position{line: 763, col: 33, offset: 24067},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 551, col: 30, offset: 17758},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 551, col: 30, offset: 17758},
												val:        "++++",
												ignoreCase: false,
												want:       "\"++++\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 551, col: 37, offset: 17765},
												expr: &choiceExpr{
													pos: position{line: 2878, col: 10, offset: 95044},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2878, col: 10, offset: 95044},
															val:        " ",
															ignoreCase: false,
															want:       "\" \"",
														},
														&actionExpr{
															pos: position{line: 2878, col: 16, offset: 95050},
															run: (*parser).callonPassthroughBlock27,
															expr: &litMatcher{
																pos:        position{line: 2878, col: 16, offset: 95050},
																val:        "\t",
																ignoreCase: false,
																want:       "\"\\t\"",
															},
														},
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2893, col: 8, offset: 95335},
												alternatives: []interface{}{
													&notExpr{
														pos: position{line: 2890, col: 8, offset: 95285},
														expr: &anyMatcher{
															line: 2890, col: 9, offset: 95286,
														},
													},
													&litMatcher{
														pos:        position{line: 2886, col: 12, offset: 95178},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
													&litMatcher{
														pos:        position{line: 2886, col: 19, offset: 95185},
														val:        "\r\n",
														ignoreCase: false,
														want:       "\"\\r\\n\"",
													},
													&actionExpr{
														pos: position{line: 2886, col: 28, offset: 95194},
														run: (*parser).callonPassthroughBlock34,
														expr: &litMatcher{
															pos:        position{line: 2886, col: 28, offset: 95194},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
										},
									},
									&notExpr{
										pos: position{line: 2890, col: 8, offset: 95285},
										expr: &anyMatcher{
											line: 2890, col: 9, offset: 95286,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockContent",
			pos:  position{line: 765, col: 1, offset: 24100},
			expr: &zeroOrMoreExpr{
				pos: position{line: 766, col: 5, offset: 24132},
				expr: &actionExpr{
					pos: position{line: 766, col: 6, offset: 24133},
					run: (*parser).callonPassthroughBlockContent2,
					expr: &seqExpr{
						pos: position{line: 766, col: 6, offset: 24133},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 766, col: 6, offset: 24133},
								expr: &choiceExpr{
									pos: position{line: 763, col: 33, offset: 24067},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 551, col: 30, offset: 17758},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 551, col: 30, offset: 17758},
													val:        "++++",
													ignoreCase: false,
													want:       "\"++++\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 551, col: 37, offset: 17765},
													expr: &choiceExpr{
														pos: position{line: 2878, col: 10, offset: 95044},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2878, col: 10, offset: 95044},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2878, col: 16, offset: 95050},
																run: (*parser).callonPassthroughBlockContent11,
																expr: &litMatcher{
																	pos:        position{line: 2878, col: 16, offset: 95050},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2893, col: 8, offset: 95335},
													alternatives: []interface{}{
														&notExpr{
															pos: position{line: 2890, col: 8, offset: 95285},
															expr: &anyMatcher{
																line: 2890, col: 9, offset: 95286,
															},
														},
														&litMatcher{
															pos:        position{line: 2886, col: 12, offset: 95178},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2886, col: 19, offset: 95185},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&actionExpr{
															pos: position{line: 2886, col: 28, offset: 95194},
															run: (*parser).callonPassthroughBlockContent18,
															expr: &litMatcher{
																pos:        position{line: 2886, col: 28, offset: 95194},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
										&notExpr{
											pos: position{line: 2890, col: 8, offset: 95285},
											expr: &anyMatcher{
												line: 2890, col: 9, offset: 95286,
											},
										},
									},
								},
							},
							&labeledExpr{
								pos:   position{line: 767, col: 5, offset: 24167},
								label: "line",
								expr: &choiceExpr{
									pos: position{line: 767, col: 11, offset: 24173},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 767, col: 11, offset: 24173},
											name: "FileInclusion",
										},
										&actionExpr{
											pos: position{line: 558, col: 5, offset: 17893},
											run: (*parser).callonPassthroughBlockContent25,
											expr: &seqExpr{
												pos: position{line: 558, col: 5, offset: 17893},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 558, col: 5, offset: 17893},
														expr: &notExpr{
															pos: position{line: 2890, col: 8, offset: 95285},
															expr: &anyMatcher{
																line: 2890, col: 9, offset: 95286,
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 559, col: 5, offset: 17966},
														label: "content",
														expr: &actionExpr{
															pos: position{line: 559, col: 14, offset: 17975},
															run: (*parser).callonPassthroughBlockContent31,
															expr: &zeroOrMoreExpr{
																pos: position{line: 559, col: 14, offset: 17975},
																expr: &charClassMatcher{
																	pos:        position{line: 559, col: 14, offset: 17975},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2893, col: 8, offset: 95335},
														alternatives: []interface{}{
															&notExpr{
																pos: position{line: 2890, col: 8, offset: 95285},
																expr: &anyMatcher{
																	line: 2890, col: 9, offset: 95286,
																},
															},
															&litMatcher{
																pos:        position{line: 2886, col: 12, offset: 95178},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2886, col: 19, offset: 95185},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&actionExpr{
																pos: position{line: 2886, col: 28, offset: 95194},
																run: (*parser).callonPassthroughBlockContent39,
																expr: &litMatcher{
																	pos:        position{line: 2886, col: 28, offset: 95194},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 774, col: 1, offset: 24314},
			expr: &actionExpr{
				pos: position{line: 775, col: 5, offset: 24332},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 775, col: 5, offset: 24332},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 775, col: 5, offset: 24332},
							run: (*parser).callonQuoteBlock3,
						},
						&litMatcher{
							pos:        position{line: 553, col: 24, offset: 17800},
							val:        "____",
							ignoreCase: false,
							want:       "\"____\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 553, col: 31, offset: 17807},
							expr: &choiceExpr{
								pos: position{line: 2878, col: 10, offset: 95044},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 2878, col: 10, offset: 95044},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
									&actionExpr{
										pos: position{line: 2878, col: 16, offset: 95050},
										run: (*parser).callonQuoteBlock8,
										expr: &litMatcher{
											pos:        position{line: 2878, col: 16, offset: 95050},
											val:        "\t",
											ignoreCase: false,
											want:       "\"\\t\"",
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2893, col: 8, offset: 95335},
							alternatives: []interface{}{
								&notExpr{
									pos: position{line: 2890, col: 8, offset: 95285},
									expr: &anyMatcher{
										line: 2890, col: 9, offset: 95286,
									},
								},
								&litMatcher{
									pos:        position{line: 2886, col: 12, offset: 95178},
									val:        "\n",
									ignoreCase: false,
									want:       "\"\\n\"",
								},
								&litMatcher{
									pos:        position{line: 2886, col: 19, offset: 95185},
									val:        "\r\n",
									ignoreCase: false,
									want:       "\"\\r\\n\"",
								},
								&actionExpr{
									pos: position{line: 2886, col: 28, offset: 95194},
									run: (*parser).callonQuoteBlock15,
									expr: &litMatcher{
										pos:        position{line: 2886, col: 28, offset: 95194},
										val:        "\r",
										ignoreCase: false,
										want:       "\"\\r\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 780, col: 5, offset: 24511},
							run: (*parser).callonQuoteBlock17,
						},
						&labeledExpr{
							pos:   position{line: 785, col: 5, offset: 24710},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 785, col: 14, offset: 24719},
								name: "QuoteBlockContent",
							},
						},
						&choiceExpr{
							pos: position{line: 793, col: 27, offset: 24964},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 553, col: 24, offset: 17800},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 553, col: 24, offset: 17800},
											val:        "____",
											ignoreCase: false,
											want:       "\"____\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 553, col: 31, offset: 17807},
											expr: &choiceExpr{
												pos: position{line: 2878, col: 10, offset: 95044},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2878, col: 10, offset: 95044},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
													&actionExpr{
														pos: position{line: 2878, col: 16, offset: 95050},
														run: (*parser).callonQuoteBlock26,
														expr: &litMatcher{
															pos:        position{line: 2878, col: 16, offset: 95050},
															val:        "\t",
															ignoreCase: false,
															want:       "\"\\t\"",
														},
													},
												},
											},
										},
										&choiceExpr{
											pos: position{line: 2893, col: 8, offset: 95335},
											alternatives: []interface{}{
												&notExpr{
													pos: position{line: 2890, col: 8, offset: 95285},
													expr: &anyMatcher{
														line: 2890, col: 9, offset: 95286,
													},
												},
												&litMatcher{
													pos:        position{line: 2886, col: 12, offset: 95178},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
												&litMatcher{
													pos:        position{line: 2886, col: 19, offset: 95185},
													val:        "\r\n",
													ignoreCase: false,
													want:       "\"\\r\\n\"",
												},
												&actionExpr{
													pos: position{line: 2886, col: 28, offset: 95194},
													run: (*parser).callonQuoteBlock33,
													expr: &litMatcher{
														pos:        position{line: 2886, col: 28, offset: 95194},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2890, col: 8, offset: 95285},
									expr: &anyMatcher{
										line: 2890, col: 9, offset: 95286,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockContent",
			pos:  position{line: 795, col: 1, offset: 24991},
			expr: &zeroOrMoreExpr{
				pos: position{line: 796, col: 4, offset: 25016},
				expr: &actionExpr{
					pos: position{line: 796, col: 5, offset: 25017},
					run: (*parser).callonQuoteBlockContent2,
					expr: &seqExpr{
						pos: position{line: 796, col: 5, offset: 25017},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 796, col: 5, offset: 25017},
								expr: &choiceExpr{
									pos: position{line: 793, col: 27, offset: 24964},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 553, col: 24, offset: 17800},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 553, col: 24, offset: 17800},
													val:        "____",
													ignoreCase: false,
													want:       "\"____\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 553, col: 31, offset: 17807},
													expr: &choiceExpr{
														pos: position{line: 2878, col: 10, offset: 95044},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2878, col: 10, offset: 95044},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2878, col: 16, offset: 95050},
																run: (*parser).callonQuoteBlockContent11,
																expr: &litMatcher{
																	pos:        position{line: 2878, col: 16, offset: 95050},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2893, col: 8, offset: 95335},
													alternatives: []interface{}{
														&notExpr{
															pos: position{line: 2890, col: 8, offset: 95285},
															expr: &anyMatcher{
																line: 2890, col: 9, offset: 95286,
															},
														},
														&litMatcher{
															pos:        position{line: 2886, col: 12, offset: 95178},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2886, col: 19, offset: 95185},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&actionExpr{
															pos: position{line: 2886, col: 28, offset: 95194},
															run: (*parser).callonQuoteBlockContent18,
															expr: &litMatcher{
																pos:        position{line: 2886, col: 28, offset: 95194},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
										&notExpr{
											pos: position{line: 2890, col: 8, offset: 95285},
											expr: &anyMatcher{
												line: 2890, col: 9, offset: 95286,
											},
										},
									},
								},
							},
							&labeledExpr{
								pos:   position{line: 797, col: 5, offset: 25045},
								label: "line",
								expr: &choiceExpr{
									pos: position{line: 797, col: 11, offset: 25051},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 797, col: 11, offset: 25051},
											name: "FileInclusion",
										},
										&actionExpr{
											pos: position{line: 558, col: 5, offset: 17893},
											run: (*parser).callonQuoteBlockContent25,
											expr: &seqExpr{
												pos: position{line: 558, col: 5, offset: 17893},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 558, col: 5, offset: 17893},
														expr: &notExpr{
															pos: position{line: 2890, col: 8, offset: 95285},
															expr: &anyMatcher{
																line: 2890, col: 9, offset: 95286,
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 559, col: 5, offset: 17966},
														label: "content",
														expr: &actionExpr{
															pos: position{line: 559, col: 14, offset: 17975},
															run: (*parser).callonQuoteBlockContent31,
															expr: &zeroOrMoreExpr{
																pos: position{line: 559, col: 14, offset: 17975},
																expr: &charClassMatcher{
																	pos:        position{line: 559, col: 14, offset: 17975},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2893, col: 8, offset: 95335},
														alternatives: []interface{}{
															&notExpr{
																pos: position{line: 2890, col: 8, offset: 95285},
																expr: &anyMatcher{
																	line: 2890, col: 9, offset: 95286,
																},
															},
															&litMatcher{
																pos:        position{line: 2886, col: 12, offset: 95178},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2886, col: 19, offset: 95185},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&actionExpr{
																pos: position{line: 2886, col: 28, offset: 95194},
																run: (*parser).callonQuoteBlockContent39,
																expr: &litMatcher{
																	pos:        position{line: 2886, col: 28, offset: 95194},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 804, col: 1, offset: 25194},
			expr: &actionExpr{
				pos: position{line: 805, col: 5, offset: 25214},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 805, col: 5, offset: 25214},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 805, col: 5, offset: 25214},
							run: (*parser).callonSidebarBlock3,
						},
						&litMatcher{
							pos:        position{line: 555, col: 26, offset: 17844},
							val:        "****",
							ignoreCase: false,
							want:       "\"****\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 555, col: 33, offset: 17851},
							expr: &choiceExpr{
								pos: position{line: 2878, col: 10, offset: 95044},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 2878, col: 10, offset: 95044},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
									&actionExpr{
										pos: position{line: 2878, col: 16, offset: 95050},
										run: (*parser).callonSidebarBlock8,
										expr: &litMatcher{
											pos:        position{line: 2878, col: 16, offset: 95050},
											val:        "\t",
											ignoreCase: false,
											want:       "\"\\t\"",
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2893, col: 8, offset: 95335},
							alternatives: []interface{}{
								&notExpr{
									pos: position{line: 2890, col: 8, offset: 95285},
									expr: &anyMatcher{
										line: 2890, col: 9, offset: 95286,
									},
								},
								&litMatcher{
									pos:        position{line: 2886, col: 12, offset: 95178},
									val:        "\n",
									ignoreCase: false,
									want:       "\"\\n\"",
								},
								&litMatcher{
									pos:        position{line: 2886, col: 19, offset: 95185},
									val:        "\r\n",
									ignoreCase: false,
									want:       "\"\\r\\n\"",
								},
								&actionExpr{
									pos: position{line: 2886, col: 28, offset: 95194},
									run: (*parser).callonSidebarBlock15,
									expr: &litMatcher{
										pos:        position{line: 2886, col: 28, offset: 95194},
										val:        "\r",
										ignoreCase: false,
										want:       "\"\\r\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 810, col: 5, offset: 25397},
							run: (*parser).callonSidebarBlock17,
						},
						&labeledExpr{
							pos:   position{line: 815, col: 5, offset: 25598},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 815, col: 14, offset: 25607},
								name: "SidebarBlockContent",
							},
						},
						&choiceExpr{
							pos: position{line: 823, col: 29, offset: 25865},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 555, col: 26, offset: 17844},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 555, col: 26, offset: 17844},
											val:        "****",
											ignoreCase: false,
											want:       "\"****\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 555, col: 33, offset: 17851},
											expr: &choiceExpr{
												pos: position{line: 2878, col: 10, offset: 95044},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2878, col: 10, offset: 95044},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
													&actionExpr{
														pos: position{line: 2878, col: 16, offset: 95050},
														run: (*parser).callonSidebarBlock26,
														expr: &litMatcher{
															pos:        position{line: 2878, col: 16, offset: 95050},
															val:        "\t",
															ignoreCase: false,
															want:       "\"\\t\"",
														},
													},
												},
											},
										},
										&choiceExpr{
											pos: position{line: 2893, col: 8, offset: 95335},
											alternatives: []interface{}{
												&notExpr{
													pos: position{line: 2890, col: 8, offset: 95285},
													expr: &anyMatcher{
														line: 2890, col: 9, offset: 95286,
													},
												},
												&litMatcher{
													pos:        position{line: 2886, col: 12, offset: 95178},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
												&litMatcher{
													pos:        position{line: 2886, col: 19, offset: 95185},
													val:        "\r\n",
													ignoreCase: false,
													want:       "\"\\r\\n\"",
												},
												&actionExpr{
													pos: position{line: 2886, col: 28, offset: 95194},
													run: (*parser).callonSidebarBlock33,
													expr: &litMatcher{
														pos:        position{line: 2886, col: 28, offset: 95194},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2890, col: 8, offset: 95285},
									expr: &anyMatcher{
										line: 2890, col: 9, offset: 95286,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockContent",
			pos:  position{line: 825, col: 1, offset: 25895},
			expr: &zeroOrMoreExpr{
				pos: position{line: 826, col: 4, offset: 25922},
				expr: &actionExpr{
					pos: position{line: 826, col: 5, offset: 25923},
					run: (*parser).callonSidebarBlockContent2,
					expr: &seqExpr{
						pos: position{line: 826, col: 5, offset: 25923},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 826, col: 5, offset: 25923},
								expr: &choiceExpr{
									pos: position{line: 823, col: 29, offset: 25865},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 555, col: 26, offset: 17844},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 555, col: 26, offset: 17844},
													val:        "****",
													ignoreCase: false,
													want:       "\"****\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 555, col: 33, offset: 17851},
													expr: &choiceExpr{
														pos: position{line: 2878, col: 10, offset: 95044},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2878, col: 10, offset: 95044},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2878, col: 16, offset: 95050},
																run: (*parser).callonSidebarBlockContent11,
																expr: &litMatcher{
																	pos:        position{line: 2878, col: 16, offset: 95050},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2893, col: 8, offset: 95335},
													alternatives: []interface{}{
														&notExpr{
															pos: position{line: 2890, col: 8, offset: 95285},
															expr: &anyMatcher{
																line: 2890, col: 9, offset: 95286,
															},
														},
														&litMatcher{
															pos:        position{line: 2886, col: 12, offset: 95178},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2886, col: 19, offset: 95185},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&actionExpr{
															pos: position{line: 2886, col: 28, offset: 95194},
															run: (*parser).callonSidebarBlockContent18,
															expr: &litMatcher{
																pos:        position{line: 2886, col: 28, offset: 95194},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
										&notExpr{
											pos: position{line: 2890, col: 8, offset: 95285},
											expr: &anyMatcher{
												line: 2890, col: 9, offset: 95286,
											},
										},
									},
								},
							},
							&labeledExpr{
								pos:   position{line: 827, col: 5, offset: 25953},
								label: "line",
								expr: &choiceExpr{
									pos: position{line: 827, col: 11, offset: 25959},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 827, col: 11, offset: 25959},
											name: "FileInclusion",
										},
										&actionExpr{
											pos: position{line: 558, col: 5, offset: 17893},
											run: (*parser).callonSidebarBlockContent25,
											expr: &seqExpr{
												pos: position{line: 558, col: 5, offset: 17893},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 558, col: 5, offset: 17893},
														expr: &notExpr{
															pos: position{line: 2890, col: 8, offset: 95285},
															expr: &anyMatcher{
																line: 2890, col: 9, offset: 95286,
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 559, col: 5, offset: 17966},
														label: "content",
														expr: &actionExpr{
															pos: position{line: 559, col: 14, offset: 17975},
															run: (*parser).callonSidebarBlockContent31,
															expr: &zeroOrMoreExpr{
																pos: position{line: 559, col: 14, offset: 17975},
																expr: &charClassMatcher{
																	pos:        position{line: 559, col: 14, offset: 17975},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2893, col: 8, offset: 95335},
														alternatives: []interface{}{
															&notExpr{
																pos: position{line: 2890, col: 8, offset: 95285},
																expr: &anyMatcher{
																	line: 2890, col: 9, offset: 95286,
																},
															},
															&litMatcher{
																pos:        position{line: 2886, col: 12, offset: 95178},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2886, col: 19, offset: 95185},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&actionExpr{
																pos: position{line: 2886, col: 28, offset: 95194},
																run: (*parser).callonSidebarBlockContent39,
																expr: &litMatcher{
																	pos:        position{line: 2886, col: 28, offset: 95194},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 961, col: 1, offset: 30607},
			expr: &actionExpr{
				pos: position{line: 962, col: 5, offset: 30629},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 962, col: 5, offset: 30629},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 962, col: 5, offset: 30629},
							run: (*parser).callonFileInclusion3,
						},
						&stateCodeExpr{
							pos: position{line: 966, col: 5, offset: 30716},
							run: (*parser).callonFileInclusion4,
						},
						&labeledExpr{
							pos:   position{line: 971, col: 5, offset: 30883},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 972, col: 9, offset: 30898},
								run: (*parser).callonFileInclusion6,
								expr: &seqExpr{
									pos: position{line: 972, col: 9, offset: 30898},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 972, col: 9, offset: 30898},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 973, col: 9, offset: 30919},
											label: "path",
											expr: &actionExpr{
												pos: position{line: 2839, col: 17, offset: 93911},
												run: (*parser).callonFileInclusion10,
												expr: &labeledExpr{
													pos:   position{line: 2839, col: 17, offset: 93911},
													label: "path",
													expr: &oneOrMoreExpr{
														pos: position{line: 2839, col: 22, offset: 93916},
														expr: &choiceExpr{
															pos: position{line: 2839, col: 23, offset: 93917},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 2851, col: 13, offset: 94316},
																	run: (*parser).callonFileInclusion14,
																	expr: &labeledExpr{
																		pos:   position{line: 2851, col: 13, offset: 94316},
																		label: "elements",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2851, col: 22, offset: 94325},
																			expr: &choiceExpr{
																				pos: position{line: 2852, col: 5, offset: 94331},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2852, col: 5, offset: 94331},
																						run: (*parser).callonFileInclusion18,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 2852, col: 5, offset: 94331},
																							expr: &charClassMatcher{
																								pos:        position{line: 2852, col: 6, offset: 94332},
																								val:        "[^\\r\\n[]�&<>{ ]",
																								chars:      []rune{'\r', '\n', '[', ']', '�', '&', '<', '>', '{', ' '},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 449, col: 5, offset: 14443},
																						run: (*parser).callonFileInclusion21,
																						expr: &seqExpr{
																							pos: position{line: 449, col: 5, offset: 14443},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 449, col: 5, offset: 14443},
																									run: (*parser).callonFileInclusion23,
																								},
																								&labeledExpr{
																									pos:   position{line: 452, col: 5, offset: 14507},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 452, col: 14, offset: 14516},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 463, col: 25, offset: 14978},
																												run: (*parser).callonFileInclusion26,
																												expr: &seqExpr{
																													pos: position{line: 463, col: 25, offset: 14978},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 463, col: 25, offset: 14978},
																															val:        "{counter:",
																															ignoreCase: false,
																															want:       "\"{counter:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 463, col: 37, offset: 14990},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 118, col: 18, offset: 3399},
																																run: (*parser).callonFileInclusion30,
																																expr: &seqExpr{
																																	pos: position{line: 118, col: 18, offset: 3399},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 118, col: 18, offset: 3399},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 118, col: 28, offset: 3409},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 118, col: 29, offset: 3410},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 463, col: 56, offset: 15009},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 463, col: 62, offset: 15015},
																																expr: &actionExpr{
																																	pos: position{line: 471, col: 17, offset: 15278},
																																	run: (*parser).callonFileInclusion37,
																																	expr: &seqExpr{
																																		pos: position{line: 471, col: 17, offset: 15278},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 471, col: 17, offset: 15278},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 471, col: 21, offset: 15282},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 471, col: 28, offset: 15289},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 471, col: 28, offset: 15289},
																																							run: (*parser).callonFileInclusion42,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 471, col: 28, offset: 15289},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 473, col: 9, offset: 15343},
																																							run: (*parser).callonFileInclusion44,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 473, col: 9, offset: 15343},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 473, col: 9, offset: 15343},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 463, col: 78, offset: 15031},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 467, col: 25, offset: 15133},
																												run: (*parser).callonFileInclusion48,
																												expr: &seqExpr{
																													pos: position{line: 467, col: 25, offset: 15133},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 467, col: 25, offset: 15133},
																															val:        "{counter2:",
																															ignoreCase: false,
																															want:       "\"{counter2:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 467, col: 38, offset: 15146},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 118, col: 18, offset: 3399},
																																run: (*parser).callonFileInclusion52,
																																expr: &seqExpr{
																																	pos: position{line: 118, col: 18, offset: 3399},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 118, col: 18, offset: 3399},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 118, col: 28, offset: 3409},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 118, col: 29, offset: 3410},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 467, col: 57, offset: 15165},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 467, col: 63, offset: 15171},
																																expr: &actionExpr{
																																	pos: position{line: 471, col: 17, offset: 15278},
																																	run: (*parser).callonFileInclusion59,
																																	expr: &seqExpr{
																																		pos: position{line: 471, col: 17, offset: 15278},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 471, col: 17, offset: 15278},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 471, col: 21, offset: 15282},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 471, col: 28, offset: 15289},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 471, col: 28, offset: 15289},
																																							run: (*parser).callonFileInclusion64,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 471, col: 28, offset: 15289},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 473, col: 9, offset: 15343},
																																							run: (*parser).callonFileInclusion66,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 473, col: 9, offset: 15343},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 473, col: 9, offset: 15343},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 467, col: 79, offset: 15187},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 456, col: 31, offset: 14633},
																												run: (*parser).callonFileInclusion70,
																												expr: &seqExpr{
																													pos: position{line: 456, col: 31, offset: 14633},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 456, col: 31, offset: 14633},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 456, col: 35, offset: 14637},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 118, col: 18, offset: 3399},
																																run: (*parser).callonFileInclusion74,
																																expr: &seqExpr{
																																	pos: position{line: 118, col: 18, offset: 3399},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 118, col: 18, offset: 3399},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 118, col: 28, offset: 3409},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 118, col: 29, offset: 3410},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 456, col: 54, offset: 14656},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2587, col: 5, offset: 86026},
																						run: (*parser).callonFileInclusion80,
																						expr: &seqExpr{
																							pos: position{line: 2587, col: 5, offset: 86026},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 2587, col: 5, offset: 86026},
																									run: (*parser).callonFileInclusion82,
																								},
																								&labeledExpr{
																									pos:   position{line: 2590, col: 5, offset: 86097},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 2592, col: 9, offset: 86195},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 2592, col: 9, offset: 86195},
																												run: (*parser).callonFileInclusion85,
																												expr: &choiceExpr{
																													pos: position{line: 491, col: 27, offset: 15997},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 491, col: 27, offset: 15997},
																															run: (*parser).callonFileInclusion87,
																															expr: &seqExpr{
																																pos: position{line: 491, col: 27, offset: 15997},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 491, col: 27, offset: 15997},
																																		val:        "<<",
																																		ignoreCase: false,
																																		want:       "\"<<\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 491, col: 32, offset: 16002},
																																		label: "id",
																																		expr: &actionExpr{
																																			pos: position{line: 2866, col: 7, offset: 94768},
																																			run: (*parser).callonFileInclusion91,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 2866, col: 7, offset: 94768},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2866, col: 7, offset: 94768},
																																					val:        "[^[]<>,]",
																																					chars:      []rune{'[', ']', '<', '>', ','},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																	&zeroOrMoreExpr{
																																		pos: position{line: 491, col: 40, offset: 16010},
																																		expr: &choiceExpr{
																																			pos: position{line: 2878, col: 10, offset: 95044},
																																			alternatives: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 2878, col: 10, offset: 95044},
																																					val:        " ",
																																					ignoreCase: false,
																																					want:       "\" \"",
																																				},
																																				&actionExpr{
																																					pos: position{line: 2878, col: 16, offset: 95050},
																																					run: (*parser).callonFileInclusion97,
																																					expr: &litMatcher{
																																						pos:        position{line: 2878, col: 16, offset: 95050},
																																						val:        "\t",
																																						ignoreCase: false,
																																						want:       "\"\\t\"",
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 491, col: 47, offset: 16017},
																																		val:        ",",
																																		ignoreCase: false,
																																		want:       "\",\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 491, col: 51, offset: 16021},
																																		label: "label",
																																		expr: &oneOrMoreExpr{
																																			pos: position{line: 501, col: 24, offset: 16434},
																																			expr: &choiceExpr{
																																				pos: position{line: 502, col: 5, offset: 16440},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 502, col: 6, offset: 16441},
																																						run: (*parser).callonFileInclusion103,
																																						expr: &seqExpr{
																																							pos: position{line: 502, col: 6, offset: 16441},
																																							exprs: []interface{}{
																																								&charClassMatcher{
																																									pos:        position{line: 502, col: 6, offset: 16441},
																																									val:        "[0-9\\pL]",
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																								&oneOrMoreExpr{
																																									pos: position{line: 502, col: 14, offset: 16449},
																																									expr: &charClassMatcher{
																																										pos:        position{line: 502, col: 14, offset: 16449},
																																										val:        "[^\\r\\n{<>]",
																																										chars:      []rune{'\r', '\n', '{', '<', '>'},
																																										ignoreCase: false,
																																										inverted:   true,
																																									},
																																								},
																																							},
																																						},
																																					},
																																					&actionExpr{
																																						pos: position{line: 449, col: 5, offset: 14443},
																																						run: (*parser).callonFileInclusion108,
																																						expr: &seqExpr{
																																							pos: position{line: 449, col: 5, offset: 14443},
																																							exprs: []interface{}{
																																								&andCodeExpr{
																																									pos: position{line: 449, col: 5, offset: 14443},
																																									run: (*parser).callonFileInclusion110,
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 452, col: 5, offset: 14507},
																																									label: "element",
																																									expr: &choiceExpr{
																																										pos: position{line: 452, col: 14, offset: 14516},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 463, col: 25, offset: 14978},
																																												run: (*parser).callonFileInclusion113,
																																												expr: &seqExpr{
																																													pos: position{line: 463, col: 25, offset: 14978},
																																													exprs: []interface{}{
																																														&litMatcher{
																																															pos:        position{line: 463, col: 25, offset: 14978},
																																															val:        "{counter:",
																																															ignoreCase: false,
																																															want:       "\"{counter:\"",
																																														},
																																														&labeledExpr{
																																															pos:   position{line: 463, col: 37, offset: 14990},
																																															label: "name",
																																															expr: &actionExpr{
																																																pos: position{line: 118, col: 18, offset: 3399},
																																																run: (*parser).callonFileInclusion117,
																																																expr: &seqExpr{
																																																	pos: position{line: 118, col: 18, offset: 3399},
																																																	exprs: []interface{}{
																																																		&charClassMatcher{
																																																			pos:        position{line: 118, col: 18, offset: 3399},
																																																			val:        "[_0-9\\pL]",
																																																			chars:      []rune{'_'},
																																																			ranges:     []rune{'0', '9'},
																																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																																			ignoreCase: false,
																																																			inverted:   false,
																																																		},
																																																		&zeroOrMoreExpr{
																																																			pos: position{line: 118, col: 28, offset: 3409},
																																																			expr: &charClassMatcher{
																																																				pos:        position{line: 118, col: 29, offset: 3410},
																																																				val:        "[-0-9\\pL]",
																																																				chars:      []rune{'-'},
																																																				ranges:     []rune{'0', '9'},
																																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																																				ignoreCase: false,
																																																				inverted:   false,
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																														&labeledExpr{
																																															pos:   position{line: 463, col: 56, offset: 15009},
																																															label: "start",
																																															expr: &zeroOrOneExpr{
																																																pos: position{line: 463, col: 62, offset: 15015},
																																																expr: &actionExpr{
																																																	pos: position{line: 471, col: 17, offset: 15278},
																																																	run: (*parser).callonFileInclusion124,
																																																	expr: &seqExpr{
																																																		pos: position{line: 471, col: 17, offset: 15278},
																																																		exprs: []interface{}{
																																																			&litMatcher{
																																																				pos:        position{line: 471, col: 17, offset: 15278},
																																																				val:        ":",
																																																				ignoreCase: false,
																																																				want:       "\":\"",
																																																			},
																																																			&labeledExpr{
																																																				pos:   position{line: 471, col: 21, offset: 15282},
																																																				label: "start",
																																																				expr: &choiceExpr{
																																																					pos: position{line: 471, col: 28, offset: 15289},
																																																					alternatives: []interface{}{
																																																						&actionExpr{
																																																							pos: position{line: 471, col: 28, offset: 15289},
																																																							run: (*parser).callonFileInclusion129,
																																																							expr: &charClassMatcher{
																																																								pos:        position{line: 471, col: 28, offset: 15289},
																																																								val:        "[A-Za-z]",
																																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																								ignoreCase: false,
																																																								inverted:   false,
																																																							},
																																																						},
																																																						&actionExpr{
																																																							pos: position{line: 473, col: 9, offset: 15343},
																																																							run: (*parser).callonFileInclusion131,
																																																							expr: &oneOrMoreExpr{
																																																								pos: position{line: 473, col: 9, offset: 15343},
																																																								expr: &charClassMatcher{
																																																									pos:        position{line: 473, col: 9, offset: 15343},
																																																									val:        "[0-9]",
																																																									ranges:     []rune{'0', '9'},
																																																									ignoreCase: false,
																																																									inverted:   false,
																																																								},
																																																							},
																																																						},
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																														&litMatcher{
																																															pos:        position{line: 463, col: 78, offset: 15031},
																																															val:        "}",
																																															ignoreCase: false,
																																															want:       "\"}\"",
																																														},
																																													},
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 467, col: 25, offset: 15133},
																																												run: (*parser).callonFileInclusion135,
																																												expr: &seqExpr{
																																													pos: position{line: 467, col: 25, offset: 15133},
																																													exprs: []interface{}{
																																														&litMatcher{
																																															pos:        position{line: 467, col: 25, offset: 15133},
																																															val:        "{counter2:",
																																															ignoreCase: false,
																																															want:       "\"{counter2:\"",
																																														},
																																														&labeledExpr{
																																															pos:   position{line: 467, col: 38, offset: 15146},
																																															label: "name",
																																															expr: &actionExpr{
																																																pos: position{line: 118, col: 18, offset: 3399},
																																																run: (*parser).callonFileInclusion139,
																																																expr: &seqExpr{
																																																	pos: position{line: 118, col: 18, offset: 3399},
																																																	exprs: []interface{}{
																																																		&charClassMatcher{
																																																			pos:        position{line: 118, col: 18, offset: 3399},
																																																			val:        "[_0-9\\pL]",
																																																			chars:      []rune{'_'},
																																																			ranges:     []rune{'0', '9'},
																																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																																			ignoreCase: false,
																																																			inverted:   false,
																																																		},
																																																		&zeroOrMoreExpr{
																																																			pos: position{line: 118, col: 28, offset: 3409},
																																																			expr: &charClassMatcher{
																																																				pos:        position{line: 118, col: 29, offset: 3410},
																																																				val:        "[-0-9\\pL]",
																																																				chars:      []rune{'-'},
																																																				ranges:     []rune{'0', '9'},
																																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																																				ignoreCase: false,
																																																				inverted:   false,
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																														&labeledExpr{
																																															pos:   position{line: 467, col: 57, offset: 15165},
																																															label: "start",
																																															expr: &zeroOrOneExpr{
																																																pos: position{line: 467, col: 63, offset: 15171},
																																																expr: &actionExpr{
																																																	pos: position{line: 471, col: 17, offset: 15278},
																																																	run: (*parser).callonFileInclusion146,
																																																	expr: &seqExpr{
																																																		pos: position{line: 471, col: 17, offset: 15278},
																																																		exprs: []interface{}{
																																																			&litMatcher{
																																																				pos:        position{line: 471, col: 17, offset: 15278},
																																																				val:        ":",
																																																				ignoreCase: false,
																																																				want:       "\":\"",
																																																			},
																																																			&labeledExpr{
																																																				pos:   position{line: 471, col: 21, offset: 15282},
																																																				label: "start",
																																																				expr: &choiceExpr{
																																																					pos: position{line: 471, col: 28, offset: 15289},
																																																					alternatives: []interface{}{
																																																						&actionExpr{
																																																							pos: position{line: 471, col: 28, offset: 15289},
																																																							run: (*parser).callonFileInclusion151,
																																																							expr: &charClassMatcher{
																																																								pos:        position{line: 471, col: 28, offset: 15289},
																																																								val:        "[A-Za-z]",
																																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																								ignoreCase: false,
																																																								inverted:   false,
																																																							},
																																																						},
																																																						&actionExpr{
																																																							pos: position{line: 473, col: 9, offset: 15343},
																																																							run: (*parser).callonFileInclusion153,
																																																							expr: &oneOrMoreExpr{
																																																								pos: position{line: 473, col: 9, offset: 15343},
																																																								expr: &charClassMatcher{
																																																									pos:        position{line: 473, col: 9, offset: 15343},
																																																									val:        "[0-9]",
																																																									ranges:     []rune{'0', '9'},
																																																									ignoreCase: false,
																																																									inverted:   false,
																																																								},
																																																							},
																																																						},
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																														&litMatcher{
																																															pos:        position{line: 467, col: 79, offset: 15187},
																																															val:        "}",
																																															ignoreCase: false,
																																															want:       "\"}\"",
																																														},
																																													},
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 456, col: 31, offset: 14633},
																																												run: (*parser).callonFileInclusion157,
																																												expr: &seqExpr{
																																													pos: position{line: 456, col: 31, offset: 14633},
																																													exprs: []interface{}{
																																														&litMatcher{
																																															pos:        position{line: 456, col: 31, offset: 14633},
																																															val:        "{",
																																															ignoreCase: false,
																																															want:       "\"{\"",
																																														},
																																														&labeledExpr{
																																															pos:   position{line: 456, col: 35, offset: 14637},
																																															label: "name",
																																															expr: &actionExpr{
																																																pos: position{line: 118, col: 18, offset: 3399},
																																																run: (*parser).callonFileInclusion161,
																																																expr: &seqExpr{
																																																	pos: position{line: 118, col: 18, offset: 3399},
																																																	exprs: []interface{}{
																																																		&charClassMatcher{
																																																			pos:        position{line: 118, col: 18, offset: 3399},
																																																			val:        "[_0-9\\pL]",
																																																			chars:      []rune{'_'},
																																																			ranges:     []rune{'0', '9'},
																																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																																			ignoreCase: false,
																																																			inverted:   false,
																																																		},
																																																		&zeroOrMoreExpr{
																																																			pos: position{line: 118, col: 28, offset: 3409},
																																																			expr: &charClassMatcher{
																																																				pos:        position{line: 118, col: 29, offset: 3410},
																																																				val:        "[-0-9\\pL]",
																																																				chars:      []rune{'-'},
																																																				ranges:     []rune{'0', '9'},
																																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																																				ignoreCase: false,
																																																				inverted:   false,
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																														&litMatcher{
																																															pos:        position{line: 456, col: 54, offset: 14656},
																																															val:        "}",
																																															ignoreCase: false,
																																															want:       "\"}\"",
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																					&actionExpr{
																																						pos: position{line: 506, col: 8, offset: 16673},
																																						run: (*parser).callonFileInclusion167,
																																						expr: &litMatcher{
																																							pos:        position{line: 506, col: 8, offset: 16673},
																																							val:        "{",
																																							ignoreCase: false,
																																							want:       "\"{\"",
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 491, col: 79, offset: 16049},
																																		val:        ">>",
																																		ignoreCase: false,
																																		want:       "\">>\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 493, col: 9, offset: 16122},
																															run: (*parser).callonFileInclusion170,
																															expr: &seqExpr{
																																pos: position{line: 493, col: 9, offset: 16122},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 493, col: 9, offset: 16122},
																																		val:        "<<",
																																		ignoreCase: false,
																																		want:       "\"<<\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 493, col: 14, offset: 16127},
																																		label: "id",
																																		expr: &actionExpr{
																																			pos: position{line: 2866, col: 7, offset: 94768},
																																			run: (*parser).callonFileInclusion174,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 2866, col: 7, offset: 94768},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2866, col: 7, offset: 94768},
																																					val:        "[^[]<>,]",
																																					chars:      []rune{'[', ']', '<', '>', ','},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 493, col: 22, offset: 16135},
																																		val:        ">>",
																																		ignoreCase: false,
																																		want:       "\">>\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2595, col: 11, offset: 86299},
																												run: (*parser).callonFileInclusion178,
																												expr: &charClassMatcher{
																													pos:        position{line: 2595, col: 12, offset: 86300},
																													val:        "[<>&]",
																													chars:      []rune{'<', '>', '&'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2858, col: 7, offset: 94556},
																						run: (*parser).callonFileInclusion180,
																						expr: &litMatcher{
																							pos:        position{line: 2858, col: 7, offset: 94556},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 947, col: 23, offset: 29896},
																	run: (*parser).callonFileInclusion182,
																	expr: &seqExpr{
																		pos: position{line: 947, col: 23, offset: 29896},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 945, col: 32, offset: 29864},
																				val:        "�",
																				ignoreCase: false,
																				want:       "\"�\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 947, col: 51, offset: 29924},
																				label: "ref",
																				expr: &actionExpr{
																					pos: position{line: 947, col: 56, offset: 29929},
																					run: (*parser).callonFileInclusion186,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 947, col: 56, offset: 29929},
																						expr: &charClassMatcher{
																							pos:        position{line: 947, col: 56, offset: 29929},
																							val:        "[0-9]",
																							ranges:     []rune{'0', '9'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 945, col: 32, offset: 29864},
																				val:        "�",
																				ignoreCase: false,
																				want:       "\"�\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 974, col: 9, offset: 30948},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 974, col: 27, offset: 30966},
												name: "InlineAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 978, col: 5, offset: 31127},
							expr: &choiceExpr{
								pos: position{line: 2878, col: 10, offset: 95044},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 2878, col: 10, offset: 95044},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
									&actionExpr{
										pos: position{line: 2878, col: 16, offset: 95050},
										run: (*parser).callonFileInclusion195,
										expr: &litMatcher{
											pos:        position{line: 2878, col: 16, offset: 95050},
											val:        "\t",
											ignoreCase: false,
											want:       "\"\\t\"",
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2893, col: 8, offset: 95335},
							alternatives: []interface{}{
								&notExpr{
									pos: position{line: 2890, col: 8, offset: 95285},
									expr: &anyMatcher{
										line: 2890, col: 9, offset: 95286,
									},
								},
								&litMatcher{
									pos:        position{line: 2886, col: 12, offset: 95178},
									val:        "\n",
									ignoreCase: false,
									want:       "\"\\n\"",
								},
								&litMatcher{
									pos:        position{line: 2886, col: 19, offset: 95185},
									val:        "\r\n",
									ignoreCase: false,
									want:       "\"\\r\\n\"",
								},
								&actionExpr{
									pos: position{line: 2886, col: 28, offset: 95194},
									run: (*parser).callonFileInclusion202,
									expr: &litMatcher{
										pos:        position{line: 2886, col: 28, offset: 95194},
										val:        "\r",
										ignoreCase: false,
										want:       "\"\\r\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineRanges",
			pos:  position{line: 985, col: 1, offset: 31260},
			expr: &actionExpr{
				pos: position{line: 985, col: 15, offset: 31274},
				run: (*parser).callonLineRanges1,
				expr: &seqExpr{
					pos: position{line: 985, col: 15, offset: 31274},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 985, col: 15, offset: 31274},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 985, col: 22, offset: 31281},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 992, col: 23, offset: 31464},
										run: (*parser).callonLineRanges5,
										expr: &seqExpr{
											pos: position{line: 992, col: 23, offset: 31464},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 992, col: 23, offset: 31464},
													label: "first",
													expr: &choiceExpr{
														pos: position{line: 992, col: 30, offset: 31471},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 1001, col: 19, offset: 31829},
																run: (*parser).callonLineRanges9,
																expr: &seqExpr{
																	pos: position{line: 1001, col: 19, offset: 31829},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 1001, col: 19, offset: 31829},
																			label: "start",
																			expr: &actionExpr{
																				pos: position{line: 2874, col: 11, offset: 94970},
																				run: (*parser).callonLineRanges12,
																				expr: &seqExpr{
																					pos: position{line: 2874, col: 11, offset: 94970},
																					exprs: []interface{}{
																						&zeroOrOneExpr{
																							pos: position{line: 2874, col: 11, offset: 94970},
																							expr: &litMatcher{
																								pos:        position{line: 2874, col: 11, offset: 94970},
																								val:        "-",
																								ignoreCase: false,
																								want:       "\"-\"",
																							},
																						},
																						&oneOrMoreExpr{
																							pos: position{line: 2874, col: 16, offset: 94975},
																							expr: &actionExpr{
																								pos: position{line: 2870, col: 10, offset: 94910},
																								run: (*parser).callonLineRanges17,
																								expr: &charClassMatcher{
																									pos:        position{line: 2870, col: 10, offset: 94910},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 1001, col: 34, offset: 31844},
																			val:        "..",
																			ignoreCase: false,
																			want:       "\"..\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 1001, col: 39, offset: 31849},
																			label: "end",
																			expr: &actionExpr{
																				pos: position{line: 2874, col: 11, offset: 94970},
																				run: (*parser).callonLineRanges21,
																				expr: &seqExpr{
																					pos: position{line: 2874, col: 11, offset: 94970},
																					exprs: []interface{}{
																						&zeroOrOneExpr{
																							pos: position{line: 2874, col: 11, offset: 94970},
																							expr: &litMatcher{
																								pos:        position{line: 2874, col: 11, offset: 94970},
																								val:        "-",
																								ignoreCase: false,
																								want:       "\"-\"",
																							},
																						},
																						&oneOrMoreExpr{
																							pos: position{line: 2874, col: 16, offset: 94975},
																							expr: &actionExpr{
																								pos: position{line: 2870, col: 10, offset: 94910},
																								run: (*parser).callonLineRanges26,
																								expr: &charClassMatcher{
																									pos:        position{line: 2870, col: 10, offset: 94910},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1005, col: 20, offset: 31969},
																run: (*parser).callonLineRanges28,
																expr: &labeledExpr{
																	pos:   position{line: 1005, col: 20, offset: 31969},
																	label: "singleline",
																	expr: &actionExpr{
																		pos: position{line: 2874, col: 11, offset: 94970},
																		run: (*parser).callonLineRanges30,
																		expr: &seqExpr{
																			pos: position{line: 2874, col: 11, offset: 94970},
																			exprs: []interface{}{
																				&zeroOrOneExpr{
																					pos: position{line: 2874, col: 11, offset: 94970},
																					expr: &litMatcher{
																						pos:        position{line: 2874, col: 11, offset: 94970},
																						val:        "-",
																						ignoreCase: false,
																						want:       "\"-\"",
																					},
																				},
																				&oneOrMoreExpr{
																					pos: position{line: 2874, col: 16, offset: 94975},
																					expr: &actionExpr{
																						pos: position{line: 2870, col: 10, offset: 94910},
																						run: (*parser).callonLineRanges35,
																						expr: &charClassMatcher{
																							pos:        position{line: 2870, col: 10, offset: 94910},
																							val:        "[0-9]",
																							ranges:     []rune{'0', '9'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 993, col: 5, offset: 31510},
													label: "others",
													expr: &oneOrMoreExpr{
														pos: position{line: 993, col: 12, offset: 31517},
														expr: &actionExpr{
															pos: position{line: 994, col: 9, offset: 31527},
															run: (*parser).callonLineRanges39,
															expr: &seqExpr{
																pos: position{line: 994, col: 9, offset: 31527},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 994, col: 10, offset: 31528},
																		val:        "[,;]",
																		chars:      []rune{',', ';'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&labeledExpr{
																		pos:   position{line: 995, col: 9, offset: 31645},
																		label: "other",
																		expr: &choiceExpr{
																			pos: position{line: 995, col: 16, offset: 31652},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 1001, col: 19, offset: 31829},
																					run: (*parser).callonLineRanges44,
																					expr: &seqExpr{
																						pos: position{line: 1001, col: 19, offset: 31829},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 1001, col: 19, offset: 31829},
																								label: "start",
																								expr: &actionExpr{
																									pos: position{line: 2874, col: 11, offset: 94970},
																									run: (*parser).callonLineRanges47,
																									expr: &seqExpr{
																										pos: position{line: 2874, col: 11, offset: 94970},
																										exprs: []interface{}{
																											&zeroOrOneExpr{
																												pos: position{line: 2874, col: 11, offset: 94970},
																												expr: &litMatcher{
																													pos:        position{line: 2874, col: 11, offset: 94970},
																													val:        "-",
																													ignoreCase: false,
																													want:       "\"-\"",
																												},
																											},
																											&oneOrMoreExpr{
																												pos: position{line: 2874, col: 16, offset: 94975},
																												expr: &actionExpr{
																													pos: position{line: 2870, col: 10, offset: 94910},
																													run: (*parser).callonLineRanges52,
																													expr: &charClassMatcher{
																														pos:        position{line: 2870, col: 10, offset: 94910},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 1001, col: 34, offset: 31844},
																								val:        "..",
																								ignoreCase: false,
																								want:       "\"..\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 1001, col: 39, offset: 31849},
																								label: "end",
																								expr: &actionExpr{
																									pos: position{line: 2874, col: 11, offset: 94970},
																									run: (*parser).callonLineRanges56,
																									expr: &seqExpr{
																										pos: position{line: 2874, col: 11, offset: 94970},
																										exprs: []interface{}{
																											&zeroOrOneExpr{
																												pos: position{line: 2874, col: 11, offset: 94970},
																												expr: &litMatcher{
																													pos:        position{line: 2874, col: 11, offset: 94970},
																													val:        "-",
																													ignoreCase: false,
																													want:       "\"-\"",
																												},
																											},
																											&oneOrMoreExpr{
																												pos: position{line: 2874, col: 16, offset: 94975},
																												expr: &actionExpr{
																													pos: position{line: 2870, col: 10, offset: 94910},
																													run: (*parser).callonLineRanges61,
																													expr: &charClassMatcher{
																														pos:        position{line: 2870, col: 10, offset: 94910},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1005, col: 20, offset: 31969},
																					run: (*parser).callonLineRanges63,
																					expr: &labeledExpr{
																						pos:   position{line: 1005, col: 20, offset: 31969},
																						label: "singleline",
																						expr: &actionExpr{
																							pos: position{line: 2874, col: 11, offset: 94970},
																							run: (*parser).callonLineRanges65,
																							expr: &seqExpr{
																								pos: position{line: 2874, col: 11, offset: 94970},
																								exprs: []interface{}{
																									&zeroOrOneExpr{
																										pos: position{line: 2874, col: 11, offset: 94970},
																										expr: &litMatcher{
																											pos:        position{line: 2874, col: 11, offset: 94970},
																											val:        "-",
																											ignoreCase: false,
																											want:       "\"-\"",
																										},
																									},
																									&oneOrMoreExpr{
																										pos: position{line: 2874, col: 16, offset: 94975},
																										expr: &actionExpr{
																											pos: position{line: 2870, col: 10, offset: 94910},
																											run: (*parser).callonLineRanges70,
																											expr: &charClassMatcher{
																												pos:        position{line: 2870, col: 10, offset: 94910},
																												val:        "[0-9]",
																												ranges:     []rune{'0', '9'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1001, col: 19, offset: 31829},
										run: (*parser).callonLineRanges72,
										expr: &seqExpr{
											pos: position{line: 1001, col: 19, offset: 31829},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1001, col: 19, offset: 31829},
													label: "start",
													expr: &actionExpr{
														pos: position{line: 2874, col: 11, offset: 94970},
														run: (*parser).callonLineRanges75,
														expr: &seqExpr{
															pos: position{line: 2874, col: 11, offset: 94970},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 2874, col: 11, offset: 94970},
																	expr: &litMatcher{
																		pos:        position{line: 2874, col: 11, offset: 94970},
																		val:        "-",
																		ignoreCase: false,
																		want:       "\"-\"",
																	},
																},
																&oneOrMoreExpr{
																	pos: position{line: 2874, col: 16, offset: 94975},
																	expr: &actionExpr{
																		pos: position{line: 2870, col: 10, offset: 94910},
																		run: (*parser).callonLineRanges80,
																		expr: &charClassMatcher{
																			pos:        position{line: 2870, col: 10, offset: 94910},
																			val:        "[0-9]",
																			ranges:     []rune{'0', '9'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1001, col: 34, offset: 31844},
													val:        "..",
													ignoreCase: false,
													want:       "\"..\"",
												},
												&labeledExpr{
													pos:   position{line: 1001, col: 39, offset: 31849},
													label: "end",
													expr: &actionExpr{
														pos: position{line: 2874, col: 11, offset: 94970},
														run: (*parser).callonLineRanges84,
														expr: &seqExpr{
															pos: position{line: 2874, col: 11, offset: 94970},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 2874, col: 11, offset: 94970},
																	expr: &litMatcher{
																		pos:        position{line: 2874, col: 11, offset: 94970},
																		val:        "-",
																		ignoreCase: false,
																		want:       "\"-\"",
																	},
																},
																&oneOrMoreExpr{
																	pos: position{line: 2874, col: 16, offset: 94975},
																	expr: &actionExpr{
																		pos: position{line: 2870, col: 10, offset: 94910},
																		run: (*parser).callonLineRanges89,
																		expr: &charClassMatcher{
																			pos:        position{line: 2870, col: 10, offset: 94910},
																			val:        "[0-9]",
																			ranges:     []rune{'0', '9'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1005, col: 20, offset: 31969},
										run: (*parser).callonLineRanges91,
										expr: &labeledExpr{
											pos:   position{line: 1005, col: 20, offset: 31969},
											label: "singleline",
											expr: &actionExpr{
												pos: position{line: 2874, col: 11, offset: 94970},
												run: (*parser).callonLineRanges93,
												expr: &seqExpr{
													pos: position{line: 2874, col: 11, offset: 94970},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 2874, col: 11, offset: 94970},
															expr: &litMatcher{
																pos:        position{line: 2874, col: 11, offset: 94970},
																val:        "-",
																ignoreCase: false,
																want:       "\"-\"",
															},
														},
														&oneOrMoreExpr{
															pos: position{line: 2874, col: 16, offset: 94975},
															expr: &actionExpr{
																pos: position{line: 2870, col: 10, offset: 94910},
																run: (*parser).callonLineRanges98,
																expr: &charClassMatcher{
																	pos:        position{line: 2870, col: 10, offset: 94910},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2890, col: 8, offset: 95285},
							expr: &anyMatcher{
								line: 2890, col: 9, offset: 95286,
							},
						},
					},
				},
			},
		},
		{
			name: "TagRanges",
			pos:  position{line: 1010, col: 1, offset: 32104},
			expr: &actionExpr{
				pos: position{line: 1010, col: 14, offset: 32117},
				run: (*parser).callonTagRanges1,
				expr: &seqExpr{
					pos: position{line: 1010, col: 14, offset: 32117},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1010, col: 14, offset: 32117},
							label: "value",
							expr: &actionExpr{
								pos: position{line: 1014, col: 22, offset: 32254},
								run: (*parser).callonTagRanges4,
								expr: &seqExpr{
									pos: position{line: 1014, col: 22, offset: 32254},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1014, col: 22, offset: 32254},
											label: "first",
											expr: &choiceExpr{
												pos: position{line: 1023, col: 13, offset: 32564},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 1023, col: 13, offset: 32564},
														run: (*parser).callonTagRanges8,
														expr: &labeledExpr{
															pos:   position{line: 1023, col: 13, offset: 32564},
															label: "tag",
															expr: &choiceExpr{
																pos: position{line: 1023, col: 18, offset: 32569},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2801, col: 14, offset: 92593},
																		run: (*parser).callonTagRanges11,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2801, col: 14, offset: 92593},
																			expr: &charClassMatcher{
																				pos:        position{line: 2801, col: 14, offset: 92593},
																				val:        "[0-9\\pL]",
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 1029, col: 16, offset: 32769},
																		run: (*parser).callonTagRanges14,
																		expr: &seqExpr{
																			pos: position{line: 1029, col: 16, offset: 32769},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1029, col: 16, offset: 32769},
																					label: "stars",
																					expr: &actionExpr{
																						pos: position{line: 1029, col: 23, offset: 32776},
																						run: (*parser).callonTagRanges17,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1029, col: 23, offset: 32776},
																							expr: &litMatcher{
																								pos:        position{line: 1029, col: 24, offset: 32777},
																								val:        "*",
																								ignoreCase: false,
																								want:       "\"*\"",
																							},
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 1032, col: 5, offset: 32831},
																					run: (*parser).callonTagRanges20,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 1025, col: 9, offset: 32657},
														run: (*parser).callonTagRanges21,
														expr: &seqExpr{
															pos: position{line: 1025, col: 9, offset: 32657},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 1025, col: 9, offset: 32657},
																	val:        "!",
																	ignoreCase: false,
																	want:       "\"!\"",
																},
																&labeledExpr{
																	pos:   position{line: 1025, col: 13, offset: 32661},
																	label: "tag",
																	expr: &choiceExpr{
																		pos: position{line: 1025, col: 18, offset: 32666},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2801, col: 14, offset: 92593},
																				run: (*parser).callonTagRanges26,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2801, col: 14, offset: 92593},
																					expr: &charClassMatcher{
																						pos:        position{line: 2801, col: 14, offset: 92593},
																						val:        "[0-9\\pL]",
																						ranges:     []rune{'0', '9'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1029, col: 16, offset: 32769},
																				run: (*parser).callonTagRanges29,
																				expr: &seqExpr{
																					pos: position{line: 1029, col: 16, offset: 32769},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1029, col: 16, offset: 32769},
																							label: "stars",
																							expr: &actionExpr{
																								pos: position{line: 1029, col: 23, offset: 32776},
																								run: (*parser).callonTagRanges32,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1029, col: 23, offset: 32776},
																									expr: &litMatcher{
																										pos:        position{line: 1029, col: 24, offset: 32777},
																										val:        "*",
																										ignoreCase: false,
																										want:       "\"*\"",
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1032, col: 5, offset: 32831},
																							run: (*parser).callonTagRanges35,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 1015, col: 5, offset: 32275},
											label: "others",
											expr: &zeroOrMoreExpr{
												pos: position{line: 1015, col: 12, offset: 32282},
												expr: &actionExpr{
													pos: position{line: 1016, col: 9, offset: 32292},
													run: (*parser).callonTagRanges38,
													expr: &seqExpr{
														pos: position{line: 1016, col: 9, offset: 32292},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 1016, col: 10, offset: 32293},
																val:        "[,;]",
																chars:      []rune{',', ';'},
																ignoreCase: false,
																inverted:   false,
															},
															&labeledExpr{
																pos:   position{line: 1017, col: 9, offset: 32410},
																label: "other",
																expr: &choiceExpr{
																	pos: position{line: 1023, col: 13, offset: 32564},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 1023, col: 13, offset: 32564},
																			run: (*parser).callonTagRanges43,
																			expr: &labeledExpr{
																				pos:   position{line: 1023, col: 13, offset: 32564},
																				label: "tag",
																				expr: &choiceExpr{
																					pos: position{line: 1023, col: 18, offset: 32569},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2801, col: 14, offset: 92593},
																							run: (*parser).callonTagRanges46,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2801, col: 14, offset: 92593},
																								expr: &charClassMatcher{
																									pos:        position{line: 2801, col: 14, offset: 92593},
																									val:        "[0-9\\pL]",
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 1029, col: 16, offset: 32769},
																							run: (*parser).callonTagRanges49,
																							expr: &seqExpr{
																								pos: position{line: 1029, col: 16, offset: 32769},
																								exprs: []interface{}{
																									&labeledExpr{
																										pos:   position{line: 1029, col: 16, offset: 32769},
																										label: "stars",
																										expr: &actionExpr{
																											pos: position{line: 1029, col: 23, offset: 32776},
																											run: (*parser).callonTagRanges52,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 1029, col: 23, offset: 32776},
																												expr: &litMatcher{
																													pos:        position{line: 1029, col: 24, offset: 32777},
																													val:        "*",
																													ignoreCase: false,
																													want:       "\"*\"",
																												},
																											},
																										},
																									},
																									&andCodeExpr{
																										pos: position{line: 1032, col: 5, offset: 32831},
																										run: (*parser).callonTagRanges55,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1025, col: 9, offset: 32657},
																			run: (*parser).callonTagRanges56,
																			expr: &seqExpr{
																				pos: position{line: 1025, col: 9, offset: 32657},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 1025, col: 9, offset: 32657},
																						val:        "!",
																						ignoreCase: false,
																						want:       "\"!\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 1025, col: 13, offset: 32661},
																						label: "tag",
																						expr: &choiceExpr{
																							pos: position{line: 1025, col: 18, offset: 32666},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2801, col: 14, offset: 92593},
																									run: (*parser).callonTagRanges61,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 2801, col: 14, offset: 92593},
																										expr: &charClassMatcher{
																											pos:        position{line: 2801, col: 14, offset: 92593},
																											val:        "[0-9\\pL]",
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 1029, col: 16, offset: 32769},
																									run: (*parser).callonTagRanges64,
																									expr: &seqExpr{
																										pos: position{line: 1029, col: 16, offset: 32769},
																										exprs: []interface{}{
																											&labeledExpr{
																												pos:   position{line: 1029, col: 16, offset: 32769},
																												label: "stars",
																												expr: &actionExpr{
																													pos: position{line: 1029, col: 23, offset: 32776},
																													run: (*parser).callonTagRanges67,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 1029, col: 23, offset: 32776},
																														expr: &litMatcher{
																															pos:        position{line: 1029, col: 24, offset: 32777},
																															val:        "*",
																															ignoreCase: false,
																															want:       "\"*\"",
																														},
																													},
																												},
																											},
																											&andCodeExpr{
																												pos: position{line: 1032, col: 5, offset: 32831},
																												run: (*parser).callonTagRanges70,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2890, col: 8, offset: 95285},
							expr: &anyMatcher{
								line: 2890, col: 9, offset: 95286,
							},
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 1039, col: 1, offset: 32998},
			expr: &actionExpr{
				pos: position{line: 1039, col: 21, offset: 33018},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 1039, col: 21, offset: 33018},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1039, col: 21, offset: 33018},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1039, col: 29, offset: 33026},
								expr: &choiceExpr{
									pos: position{line: 1039, col: 30, offset: 33027},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 1043, col: 25, offset: 33207},
											run: (*parser).callonIncludedFileLine6,
											expr: &seqExpr{
												pos: position{line: 1043, col: 25, offset: 33207},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 1043, col: 25, offset: 33207},
														val:        "tag::",
														ignoreCase: false,
														want:       "\"tag::\"",
													},
													&labeledExpr{
														pos:   position{line: 1043, col: 33, offset: 33215},
														label: "tag",
														expr: &actionExpr{
															pos: position{line: 1043, col: 38, offset: 33220},
															run: (*parser).callonIncludedFileLine10,
															expr: &actionExpr{
																pos: position{line: 2801, col: 14, offset: 92593},
																run: (*parser).callonIncludedFileLine11,
																expr: &oneOrMoreExpr{
																	pos: position{line: 2801, col: 14, offset: 92593},
																	expr: &charClassMatcher{
																		pos:        position{line: 2801, col: 14, offset: 92593},
																		val:        "[0-9\\pL]",
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 1043, col: 78, offset: 33260},
														val:        "[]",
														ignoreCase: false,
														want:       "\"[]\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 1047, col: 23, offset: 33355},
											run: (*parser).callonIncludedFileLine15,
											expr: &seqExpr{
												pos: position{line: 1047, col: 23, offset: 33355},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 1047, col: 23, offset: 33355},
														val:        "end::",
														ignoreCase: false,
														want:       "\"end::\"",
													},
													&labeledExpr{
														pos:   position{line: 1047, col: 31, offset: 33363},
														label: "tag",
														expr: &actionExpr{
															pos: position{line: 1047, col: 36, offset: 33368},
															run: (*parser).callonIncludedFileLine19,
															expr: &actionExpr{
																pos: position{line: 2801, col: 14, offset: 92593},
																run: (*parser).callonIncludedFileLine20,
																expr: &oneOrMoreExpr{
																	pos: position{line: 2801, col: 14, offset: 92593},
																	expr: &charClassMatcher{
																		pos:        position{line: 2801, col: 14, offset: 92593},
																		val:        "[0-9\\pL]",
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 1047, col: 76, offset: 33408},
														val:        "[]",
														ignoreCase: false,
														want:       "\"[]\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 1039, col: 74, offset: 33071},
											run: (*parser).callonIncludedFileLine24,
											expr: &anyMatcher{
												line: 1039, col: 74, offset: 33071,
											},
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2893, col: 8, offset: 95335},
							alternatives: []interface{}{
								&notExpr{
									pos: position{line: 2890, col: 8, offset: 95285},
									expr: &anyMatcher{
										line: 2890, col: 9, offset: 95286,
									},
								},
								&litMatcher{
									pos:        position{line: 2886, col: 12, offset: 95178},
									val:        "\n",
									ignoreCase: false,
									want:       "\"\\n\"",
								},
								&litMatcher{
									pos:        position{line: 2886, col: 19, offset: 95185},
									val:        "\r\n",
									ignoreCase: false,
									want:       "\"\\r\\n\"",
								},
								&actionExpr{
									pos: position{line: 2886, col: 28, offset: 95194},
									run: (*parser).callonIncludedFileLine31,
									expr: &litMatcher{
										pos:        position{line: 2886, col: 28, offset: 95194},
										val:        "\r",
										ignoreCase: false,
										want:       "\"\\r\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 1104, col: 1, offset: 35063},
			expr: &actionExpr{
				pos: position{line: 1105, col: 5, offset: 35086},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 1105, col: 5, offset: 35086},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1106, col: 9, offset: 35104},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 2820, col: 5, offset: 93371},
								run: (*parser).callonInlineElement4,
								expr: &seqExpr{
									pos: position{line: 2820, col: 5, offset: 93371},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 2820, col: 5, offset: 93371},
											label: "content",
											expr: &actionExpr{
												pos: position{line: 2820, col: 14, offset: 93380},
												run: (*parser).callonInlineElement7,
												expr: &oneOrMoreExpr{
													pos: position{line: 2820, col: 14, offset: 93380},
													expr: &charClassMatcher{
														pos:        position{line: 2820, col: 14, offset: 93380},
														val:        "[,?!;0-9\\pL]",
														chars:      []rune{',', '?', '!', ';'},
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 2823, col: 5, offset: 93461},
											expr: &choiceExpr{
												pos: position{line: 2823, col: 7, offset: 93463},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2878, col: 10, offset: 95044},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
													&actionExpr{
														pos: position{line: 2878, col: 16, offset: 95050},
														run: (*parser).callonInlineElement13,
														expr: &litMatcher{
															pos:        position{line: 2878, col: 16, offset: 95050},
															val:        "\t",
															ignoreCase: false,
															want:       "\"\\t\"",
														},
													},
													&charClassMatcher{
														pos:        position{line: 2797, col: 13, offset: 92519},
														val:        "[.�0-9\\pL]",
														chars:      []rune{'.', '�'},
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
													&notExpr{
														pos: position{line: 2890, col: 8, offset: 95285},
														expr: &anyMatcher{
															line: 2890, col: 9, offset: 95286,
														},
													},
													&litMatcher{
														pos:        position{line: 2886, col: 12, offset: 95178},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
													&litMatcher{
														pos:        position{line: 2886, col: 19, offset: 95185},
														val:        "\r\n",
														ignoreCase: false,
														want:       "\"\\r\\n\"",
													},
													&actionExpr{
														pos: position{line: 2886, col: 28, offset: 95194},
														run: (*parser).callonInlineElement20,
														expr: &litMatcher{
															pos:        position{line: 2886, col: 28, offset: 95194},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 2809, col: 5, offset: 92974},
								run: (*parser).callonInlineElement22,
								expr: &seqExpr{
									pos: position{line: 2809, col: 5, offset: 92974},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 2809, col: 5, offset: 92974},
											expr: &charClassMatcher{
												pos:        position{line: 2809, col: 5, offset: 92974},
												val:        "[0-9\\pL]",
												ranges:     []rune{'0', '9'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&andExpr{
											pos: position{line: 2809, col: 15, offset: 92984},
											expr: &choiceExpr{
												pos: position{line: 2809, col: 17, offset: 92986},
												alternatives: []interface{}{
													&charClassMatcher{
														pos:        position{line: 2809, col: 17, offset: 92986},
														val:        "[\\r\\n ,]]",
														chars:      []rune{'\r', '\n', ' ', ',', ']'},
														ignoreCase: false,
														inverted:   false,
													},
													&notExpr{
														pos: position{line: 2890, col: 8, offset: 95285},
														expr: &anyMatcher{
															line: 2890, col: 9, offset: 95286,
														},
													},
												},
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 2811, col: 9, offset: 93068},
								run: (*parser).callonInlineElement31,
								expr: &seqExpr{
									pos: position{line: 2811, col: 9, offset: 93068},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 2811, col: 9, offset: 93068},
											expr: &charClassMatcher{
												pos:        position{line: 2811, col: 9, offset: 93068},
												val:        "[0-9\\pL]",
												ranges:     []rune{'0', '9'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 2811, col: 19, offset: 93078},
											expr: &seqExpr{
												pos: position{line: 2811, col: 20, offset: 93079},
												exprs: []interface{}{
													&charClassMatcher{
														pos:        position{line: 2811, col: 20, offset: 93079},
														val:        "[=*_`]",
														chars:      []rune{'=', '*', '_', '`'},
														ignoreCase: false,
														inverted:   false,
													},
													&oneOrMoreExpr{
														pos: position{line: 2811, col: 27, offset: 93086},
														expr: &charClassMatcher{
															pos:        position{line: 2811, col: 27, offset: 93086},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 2829, col: 16, offset: 93605},
								run: (*parser).callonInlineElement40,
								expr: &seqExpr{
									pos: position{line: 2829, col: 16, offset: 93605},
									exprs: []interface{}{
										&charClassMatcher{
											pos:        position{line: 2829, col: 17, offset: 93606},
											val:        "[.,;!?]",
											chars:      []rune{'.', ',', ';', '!', '?'},
											ignoreCase: false,
											inverted:   false,
										},
										&andExpr{
											pos: position{line: 2829, col: 46, offset: 93635},
											expr: &choiceExpr{
												pos: position{line: 2829, col: 48, offset: 93637},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2878, col: 10, offset: 95044},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
													&actionExpr{
														pos: position{line: 2878, col: 16, offset: 95050},
														run: (*parser).callonInlineElement46,
														expr: &litMatcher{
															pos:        position{line: 2878, col: 16, offset: 95050},
															val:        "\t",
															ignoreCase: false,
															want:       "\"\\t\"",
														},
													},
													&notExpr{
														pos: position{line: 2890, col: 8, offset: 95285},
														expr: &anyMatcher{
															line: 2890, col: 9, offset: 95286,
														},
													},
													&litMatcher{
														pos:        position{line: 2886, col: 12, offset: 95178},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
													&litMatcher{
														pos:        position{line: 2886, col: 19, offset: 95185},
														val:        "\r\n",
														ignoreCase: false,
														want:       "\"\\r\\n\"",
													},
													&actionExpr{
														pos: position{line: 2886, col: 28, offset: 95194},
														run: (*parser).callonInlineElement52,
														expr: &litMatcher{
															pos:        position{line: 2886, col: 28, offset: 95194},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 954, col: 14, offset: 30337},
								run: (*parser).callonInlineElement54,
								expr: &seqExpr{
									pos: position{line: 954, col: 14, offset: 30337},
									exprs: []interface{}{
										&choiceExpr{
											pos: position{line: 2878, col: 10, offset: 95044},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 2878, col: 10, offset: 95044},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
												&actionExpr{
													pos: position{line: 2878, col: 16, offset: 95050},
													run: (*parser).callonInlineElement58,
													expr: &litMatcher{
														pos:        position{line: 2878, col: 16, offset: 95050},
														val:        "\t",
														ignoreCase: false,
														want:       "\"\\t\"",
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 954, col: 20, offset: 30343},
											val:        "+",
											ignoreCase: false,
											want:       "\"+\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 954, col: 24, offset: 30347},
											expr: &choiceExpr{
												pos: position{line: 2878, col: 10, offset: 95044},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2878, col: 10, offset: 95044},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
													&actionExpr{
														pos: position{line: 2878, col: 16, offset: 95050},
														run: (*parser).callonInlineElement64,
														expr: &litMatcher{
															pos:        position{line: 2878, col: 16, offset: 95050},
															val:        "\t",
															ignoreCase: false,
															want:       "\"\\t\"",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 954, col: 31, offset: 30354},
											expr: &choiceExpr{
												pos: position{line: 2893, col: 8, offset: 95335},
												alternatives: []interface{}{
													&notExpr{
														pos: position{line: 2890, col: 8, offset: 95285},
														expr: &anyMatcher{
															line: 2890, col: 9, offset: 95286,
														},
													},
													&litMatcher{
														pos:        position{line: 2886, col: 12, offset: 95178},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
													&litMatcher{
														pos:        position{line: 2886, col: 19, offset: 95185},
														val:        "\r\n",
														ignoreCase: false,
														want:       "\"\\r\\n\"",
													},
													&actionExpr{
														pos: position{line: 2886, col: 28, offset: 95194},
														run: (*parser).callonInlineElement72,
														expr: &litMatcher{
															pos:        position{line: 2886, col: 28, offset: 95194},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 2882, col: 11, offset: 95109},
								run: (*parser).callonInlineElement74,
								expr: &oneOrMoreExpr{
									pos: position{line: 2882, col: 11, offset: 95109},
									expr: &charClassMatcher{
										pos:        position{line: 2882, col: 12, offset: 95110},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
							&seqExpr{
								pos: position{line: 1109, col: 11, offset: 35228},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1109, col: 11, offset: 35228},
										expr: &choiceExpr{
											pos: position{line: 2893, col: 8, offset: 95335},
											alternatives: []interface{}{
												&notExpr{
													pos: position{line: 2890, col: 8, offset: 95285},
													expr: &anyMatcher{
														line: 2890, col: 9, offset: 95286,
													},
												},
												&litMatcher{
													pos:        position{line: 2886, col: 12, offset: 95178},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
												&litMatcher{
													pos:        position{line: 2886, col: 19, offset: 95185},
													val:        "\r\n",
													ignoreCase: false,
													want:       "\"\\r\\n\"",
												},
												&actionExpr{
													pos: position{line: 2886, col: 28, offset: 95194},
													run: (*parser).callonInlineElement84,
													expr: &litMatcher{
														pos:        position{line: 2886, col: 28, offset: 95194},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
											},
										},
									},
									&choiceExpr{
										pos: position{line: 1110, col: 13, offset: 35247},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 2587, col: 5, offset: 86026},
												run: (*parser).callonInlineElement87,
												expr: &seqExpr{
													pos: position{line: 2587, col: 5, offset: 86026},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 2587, col: 5, offset: 86026},
															run: (*parser).callonInlineElement89,
														},
														&labeledExpr{
															pos:   position{line: 2590, col: 5, offset: 86097},
															label: "element",
															expr: &choiceExpr{
																pos: position{line: 2592, col: 9, offset: 86195},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2592, col: 9, offset: 86195},
																		run: (*parser).callonInlineElement92,
																		expr: &choiceExpr{
																			pos: position{line: 491, col: 27, offset: 15997},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 491, col: 27, offset: 15997},
																					run: (*parser).callonInlineElement94,
																					expr: &seqExpr{
																						pos: position{line: 491, col: 27, offset: 15997},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 491, col: 27, offset: 15997},
																								val:        "<<",
																								ignoreCase: false,
																								want:       "\"<<\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 491, col: 32, offset: 16002},
																								label: "id",
																								expr: &actionExpr{
																									pos: position{line: 2866, col: 7, offset: 94768},
																									run: (*parser).callonInlineElement98,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 2866, col: 7, offset: 94768},
																										expr: &charClassMatcher{
																											pos:        position{line: 2866, col: 7, offset: 94768},
																											val:        "[^[]<>,]",
																											chars:      []rune{'[', ']', '<', '>', ','},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 491, col: 40, offset: 16010},
																								expr: &choiceExpr{
																									pos: position{line: 2878, col: 10, offset: 95044},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2878, col: 10, offset: 95044},
																											val:        " ",
																											ignoreCase: false,
																											want:       "\" \"",
																										},
																										&actionExpr{
																											pos: position{line: 2878, col: 16, offset: 95050},
																											run: (*parser).callonInlineElement104,
																											expr: &litMatcher{
																												pos:        position{line: 2878, col: 16, offset: 95050},
																												val:        "\t",
																												ignoreCase: false,
																												want:       "\"\\t\"",
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 491, col: 47, offset: 16017},
																								val:        ",",
																								ignoreCase: false,
																								want:       "\",\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 491, col: 51, offset: 16021},
																								label: "label",
																								expr: &oneOrMoreExpr{
																									pos: position{line: 501, col: 24, offset: 16434},
																									expr: &choiceExpr{
																										pos: position{line: 502, col: 5, offset: 16440},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 502, col: 6, offset: 16441},
																												run: (*parser).callonInlineElement110,
																												expr: &seqExpr{
																													pos: position{line: 502, col: 6, offset: 16441},
																													exprs: []interface{}{
																														&charClassMatcher{
																															pos:        position{line: 502, col: 6, offset: 16441},
																															val:        "[0-9\\pL]",
																															ranges:     []rune{'0', '9'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&oneOrMoreExpr{
																															pos: position{line: 502, col: 14, offset: 16449},
																															expr: &charClassMatcher{
																																pos:        position{line: 502, col: 14, offset: 16449},
																																val:        "[^\\r\\n{<>]",
																																chars:      []rune{'\r', '\n', '{', '<', '>'},
																																ignoreCase: false,
																																inverted:   true,
																															},
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 449, col: 5, offset: 14443},
																												run: (*parser).callonInlineElement115,
																												expr: &seqExpr{
																													pos: position{line: 449, col: 5, offset: 14443},
																													exprs: []interface{}{
																														&andCodeExpr{
																															pos: position{line: 449, col: 5, offset: 14443},
																															run: (*parser).callonInlineElement117,
																														},
																														&labeledExpr{
																															pos:   position{line: 452, col: 5, offset: 14507},
																															label: "element",
																															expr: &choiceExpr{
																																pos: position{line: 452, col: 14, offset: 14516},
																																alternatives: []interface{}{
																																	&actionExpr{
																																		pos: position{line: 463, col: 25, offset: 14978},
																																		run: (*parser).callonInlineElement120,
																																		expr: &seqExpr{
																																			pos: position{line: 463, col: 25, offset: 14978},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 463, col: 25, offset: 14978},
																																					val:        "{counter:",
																																					ignoreCase: false,
																																					want:       "\"{counter:\"",
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 463, col: 37, offset: 14990},
																																					label: "name",
																																					expr: &actionExpr{
																																						pos: position{line: 118, col: 18, offset: 3399},
																																						run: (*parser).callonInlineElement124,
																																						expr: &seqExpr{
																																							pos: position{line: 118, col: 18, offset: 3399},
																																							exprs: []interface{}{
																																								&charClassMatcher{
																																									pos:        position{line: 118, col: 18, offset: 3399},
																																									val:        "[_0-9\\pL]",
																																									chars:      []rune{'_'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																								&zeroOrMoreExpr{
																																									pos: position{line: 118, col: 28, offset: 3409},
																																									expr: &charClassMatcher{
																																										pos:        position{line: 118, col: 29, offset: 3410},
																																										val:        "[-0-9\\pL]",
																																										chars:      []rune{'-'},
																																										ranges:     []rune{'0', '9'},
																																										classes:    []*unicode.RangeTable{rangeTable("L")},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 463, col: 56, offset: 15009},
																																					label: "start",
																																					expr: &zeroOrOneExpr{
																																						pos: position{line: 463, col: 62, offset: 15015},
																																						expr: &actionExpr{
																																							pos: position{line: 471, col: 17, offset: 15278},
																																							run: (*parser).callonInlineElement131,
																																							expr: &seqExpr{
																																								pos: position{line: 471, col: 17, offset: 15278},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 471, col: 17, offset: 15278},
																																										val:        ":",
																																										ignoreCase: false,
																																										want:       "\":\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 471, col: 21, offset: 15282},
																																										label: "start",
																																										expr: &choiceExpr{
																																											pos: position{line: 471, col: 28, offset: 15289},
																																											alternatives: []interface{}{
																																												&actionExpr{
																																													pos: position{line: 471, col: 28, offset: 15289},
																																													run: (*parser).callonInlineElement136,
																																													expr: &charClassMatcher{
																																														pos:        position{line: 471, col: 28, offset: 15289},
																																														val:        "[A-Za-z]",
																																														ranges:     []rune{'A', 'Z', 'a', 'z'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																												&actionExpr{
																																													pos: position{line: 473, col: 9, offset: 15343},
																																													run: (*parser).callonInlineElement138,
																																													expr: &oneOrMoreExpr{
																																														pos: position{line: 473, col: 9, offset: 15343},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 473, col: 9, offset: 15343},
																																															val:        "[0-9]",
																																															ranges:     []rune{'0', '9'},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&litMatcher{
																																					pos:        position{line: 463, col: 78, offset: 15031},
																																					val:        "}",
																																					ignoreCase: false,
																																					want:       "\"}\"",
																																				},
																																			},
																																		},
																																	},
																																	&actionExpr{
																																		pos: position{line: 467, col: 25, offset: 15133},
																																		run: (*parser).callonInlineElement142,
																																		expr: &seqExpr{
																																			pos: position{line: 467, col: 25, offset: 15133},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 467, col: 25, offset: 15133},
																																					val:        "{counter2:",
																																					ignoreCase: false,
																																					want:       "\"{counter2:\"",
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 467, col: 38, offset: 15146},
																																					label: "name",
																																					expr: &actionExpr{
																																						pos: position{line: 118, col: 18, offset: 3399},
																																						run: (*parser).callonInlineElement146,
																																						expr: &seqExpr{
																																							pos: position{line: 118, col: 18, offset: 3399},
																																							exprs: []interface{}{
																																								&charClassMatcher{
																																									pos:        position{line: 118, col: 18, offset: 3399},
																																									val:        "[_0-9\\pL]",
																																									chars:      []rune{'_'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																								&zeroOrMoreExpr{
																																									pos: position{line: 118, col: 28, offset: 3409},
																																									expr: &charClassMatcher{
																																										pos:        position{line: 118, col: 29, offset: 3410},
																																										val:        "[-0-9\\pL]",
																																										chars:      []rune{'-'},
																																										ranges:     []rune{'0', '9'},
																																										classes:    []*unicode.RangeTable{rangeTable("L")},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 467, col: 57, offset: 15165},
																																					label: "start",
																																					expr: &zeroOrOneExpr{
																																						pos: position{line: 467, col: 63, offset: 15171},
																																						expr: &actionExpr{
																																							pos: position{line: 471, col: 17, offset: 15278},
																																							run: (*parser).callonInlineElement153,
																																							expr: &seqExpr{
																																								pos: position{line: 471, col: 17, offset: 15278},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 471, col: 17, offset: 15278},
																																										val:        ":",
																																										ignoreCase: false,
																																										want:       "\":\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 471, col: 21, offset: 15282},
																																										label: "start",
																																										expr: &choiceExpr{
																																											pos: position{line: 471, col: 28, offset: 15289},
																																											alternatives: []interface{}{
																																												&actionExpr{
																																													pos: position{line: 471, col: 28, offset: 15289},
																																													run: (*parser).callonInlineElement158,
																																													expr: &charClassMatcher{
																																														pos:        position{line: 471, col: 28, offset: 15289},
																																														val:        "[A-Za-z]",
																																														ranges:     []rune{'A', 'Z', 'a', 'z'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																												&actionExpr{
																																													pos: position{line: 473, col: 9, offset: 15343},
																																													run: (*parser).callonInlineElement160,
																																													expr: &oneOrMoreExpr{
																																														pos: position{line: 473, col: 9, offset: 15343},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 473, col: 9, offset: 15343},
																																															val:        "[0-9]",
																																															ranges:     []rune{'0', '9'},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&litMatcher{
																																					pos:        position{line: 467, col: 79, offset: 15187},
																																					val:        "}",
																																					ignoreCase: false,
																																					want:       "\"}\"",
																																				},
																																			},
																																		},
																																	},
																																	&actionExpr{
																																		pos: position{line: 456, col: 31, offset: 14633},
																																		run: (*parser).callonInlineElement164,
																																		expr: &seqExpr{
																																			pos: position{line: 456, col: 31, offset: 14633},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 456, col: 31, offset: 14633},
																																					val:        "{",
																																					ignoreCase: false,
																																					want:       "\"{\"",
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 456, col: 35, offset: 14637},
																																					label: "name",
																																					expr: &actionExpr{
																																						pos: position{line: 118, col: 18, offset: 3399},
																																						run: (*parser).callonInlineElement168,
																																						expr: &seqExpr{
																																							pos: position{line: 118, col: 18, offset: 3399},
																																							exprs: []interface{}{
																																								&charClassMatcher{
																																									pos:        position{line: 118, col: 18, offset: 3399},
																																									val:        "[_0-9\\pL]",
																																									chars:      []rune{'_'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																								&zeroOrMoreExpr{
																																									pos: position{line: 118, col: 28, offset: 3409},
																																									expr: &charClassMatcher{
																																										pos:        position{line: 118, col: 29, offset: 3410},
																																										val:        "[-0-9\\pL]",
																																										chars:      []rune{'-'},
																																										ranges:     []rune{'0', '9'},
																																										classes:    []*unicode.RangeTable{rangeTable("L")},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&litMatcher{
																																					pos:        position{line: 456, col: 54, offset: 14656},
																																					val:        "}",
																																					ignoreCase: false,
																																					want:       "\"}\"",
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 506, col: 8, offset: 16673},
																												run: (*parser).callonInlineElement174,
																												expr: &litMatcher{
																													pos:        position{line: 506, col: 8, offset: 16673},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 491, col: 79, offset: 16049},
																								val:        ">>",
																								ignoreCase: false,
																								want:       "\">>\"",
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 493, col: 9, offset: 16122},
																					run: (*parser).callonInlineElement177,
																					expr: &seqExpr{
																						pos: position{line: 493, col: 9, offset: 16122},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 493, col: 9, offset: 16122},
																								val:        "<<",
																								ignoreCase: false,
																								want:       "\"<<\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 493, col: 14, offset: 16127},
																								label: "id",
																								expr: &actionExpr{
																									pos: position{line: 2866, col: 7, offset: 94768},
																									run: (*parser).callonInlineElement181,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 2866, col: 7, offset: 94768},
																										expr: &charClassMatcher{
																											pos:        position{line: 2866, col: 7, offset: 94768},
																											val:        "[^[]<>,]",
																											chars:      []rune{'[', ']', '<', '>', ','},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 493, col: 22, offset: 16135},
																								val:        ">>",
																								ignoreCase: false,
																								want:       "\">>\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2595, col: 11, offset: 86299},
																		run: (*parser).callonInlineElement185,
																		expr: &charClassMatcher{
																			pos:        position{line: 2595, col: 12, offset: 86300},
																			val:        "[<>&]",
																			chars:      []rune{'<', '>', '&'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1111, col: 15, offset: 35278},
												name: "Quote",
											},
											&actionExpr{
												pos: position{line: 449, col: 5, offset: 14443},
												run: (*parser).callonInlineElement188,
												expr: &seqExpr{
													pos: position{line: 449, col: 5, offset: 14443},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 449, col: 5, offset: 14443},
															run: (*parser).callonInlineElement190,
														},
														&labeledExpr{
															pos:   position{line: 452, col: 5, offset: 14507},
															label: "element",
															expr: &choiceExpr{
																pos: position{line: 452, col: 14, offset: 14516},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 463, col: 25, offset: 14978},
																		run: (*parser).callonInlineElement193,
																		expr: &seqExpr{
																			pos: position{line: 463, col: 25, offset: 14978},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 463, col: 25, offset: 14978},
																					val:        "{counter:",
																					ignoreCase: false,
																					want:       "\"{counter:\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 463, col: 37, offset: 14990},
																					label: "name",
																					expr: &actionExpr{
																						pos: position{line: 118, col: 18, offset: 3399},
																						run: (*parser).callonInlineElement197,
																						expr: &seqExpr{
																							pos: position{line: 118, col: 18, offset: 3399},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 118, col: 18, offset: 3399},
																									val:        "[_0-9\\pL]",
																									chars:      []rune{'_'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 118, col: 28, offset: 3409},
																									expr: &charClassMatcher{
																										pos:        position{line: 118, col: 29, offset: 3410},
																										val:        "[-0-9\\pL]",
																										chars:      []rune{'-'},
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 463, col: 56, offset: 15009},
																					label: "start",
																					expr: &zeroOrOneExpr{
																						pos: position{line: 463, col: 62, offset: 15015},
																						expr: &actionExpr{
																							pos: position{line: 471, col: 17, offset: 15278},
																							run: (*parser).callonInlineElement204,
																							expr: &seqExpr{
																								pos: position{line: 471, col: 17, offset: 15278},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 471, col: 17, offset: 15278},
																										val:        ":",
																										ignoreCase: false,
																										want:       "\":\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 471, col: 21, offset: 15282},
																										label: "start",
																										expr: &choiceExpr{
																											pos: position{line: 471, col: 28, offset: 15289},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 471, col: 28, offset: 15289},
																													run: (*parser).callonInlineElement209,
																													expr: &charClassMatcher{
																														pos:        position{line: 471, col: 28, offset: 15289},
																														val:        "[A-Za-z]",
																														ranges:     []rune{'A', 'Z', 'a', 'z'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&actionExpr{
																													pos: position{line: 473, col: 9, offset: 15343},
																													run: (*parser).callonInlineElement211,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 473, col: 9, offset: 15343},
																														expr: &charClassMatcher{
																															pos:        position{line: 473, col: 9, offset: 15343},
																															val:        "[0-9]",
																															ranges:     []rune{'0', '9'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 463, col: 78, offset: 15031},
																					val:        "}",
																					ignoreCase: false,
																					want:       "\"}\"",
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 467, col: 25, offset: 15133},
																		run: (*parser).callonInlineElement215,
																		expr: &seqExpr{
																			pos: position{line: 467, col: 25, offset: 15133},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 467, col: 25, offset: 15133},
																					val:        "{counter2:",
																					ignoreCase: false,
																					want:       "\"{counter2:\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 467, col: 38, offset: 15146},
																					label: "name",
																					expr: &actionExpr{
																						pos: position{line: 118, col: 18, offset: 3399},
																						run: (*parser).callonInlineElement219,
																						expr: &seqExpr{
																							pos: position{line: 118, col: 18, offset: 3399},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 118, col: 18, offset: 3399},
																									val:        "[_0-9\\pL]",
																									chars:      []rune{'_'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 118, col: 28, offset: 3409},
																									expr: &charClassMatcher{
																										pos:        position{line: 118, col: 29, offset: 3410},
																										val:        "[-0-9\\pL]",
																										chars:      []rune{'-'},
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 467, col: 57, offset: 15165},
																					label: "start",
																					expr: &zeroOrOneExpr{
																						pos: position{line: 467, col: 63, offset: 15171},
																						expr: &actionExpr{
																							pos: position{line: 471, col: 17, offset: 15278},
																							run: (*parser).callonInlineElement226,
																							expr: &seqExpr{
																								pos: position{line: 471, col: 17, offset: 15278},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 471, col: 17, offset: 15278},
																										val:        ":",
																										ignoreCase: false,
																										want:       "\":\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 471, col: 21, offset: 15282},
																										label: "start",
																										expr: &choiceExpr{
																											pos: position{line: 471, col: 28, offset: 15289},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 471, col: 28, offset: 15289},
																													run: (*parser).callonInlineElement231,
																													expr: &charClassMatcher{
																														pos:        position{line: 471, col: 28, offset: 15289},
																														val:        "[A-Za-z]",
																														ranges:     []rune{'A', 'Z', 'a', 'z'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&actionExpr{
																													pos: position{line: 473, col: 9, offset: 15343},
																													run: (*parser).callonInlineElement233,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 473, col: 9, offset: 15343},
																														expr: &charClassMatcher{
																															pos:        position{line: 473, col: 9, offset: 15343},
																															val:        "[0-9]",
																															ranges:     []rune{'0', '9'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 467, col: 79, offset: 15187},
																					val:        "}",
																					ignoreCase: false,
																					want:       "\"}\"",
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 456, col: 31, offset: 14633},
																		run: (*parser).callonInlineElement237,
																		expr: &seqExpr{
																			pos: position{line: 456, col: 31, offset: 14633},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 456, col: 31, offset: 14633},
																					val:        "{",
																					ignoreCase: false,
																					want:       "\"{\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 456, col: 35, offset: 14637},
																					label: "name",
																					expr: &actionExpr{
																						pos: position{line: 118, col: 18, offset: 3399},
																						run: (*parser).callonInlineElement241,
																						expr: &seqExpr{
																							pos: position{line: 118, col: 18, offset: 3399},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 118, col: 18, offset: 3399},
																									val:        "[_0-9\\pL]",
																									chars:      []rune{'_'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 118, col: 28, offset: 3409},
																									expr: &charClassMatcher{
																										pos:        position{line: 118, col: 29, offset: 3410},
																										val:        "[-0-9\\pL]",
																										chars:      []rune{'-'},
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 456, col: 54, offset: 14656},
																					val:        "}",
																					ignoreCase: false,
																					want:       "\"}\"",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 2576, col: 5, offset: 85805},
												run: (*parser).callonInlineElement247,
												expr: &seqExpr{
													pos: position{line: 2576, col: 5, offset: 85805},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 2576, col: 5, offset: 85805},
															run: (*parser).callonInlineElement249,
														},
														&labeledExpr{
															pos:   position{line: 2579, col: 5, offset: 85871},
															label: "element",
															expr: &choiceExpr{
																pos: position{line: 2618, col: 11, offset: 87173},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2620, col: 15, offset: 87267},
																		run: (*parser).callonInlineElement252,
																		expr: &litMatcher{
																			pos:        position{line: 2620, col: 15, offset: 87267},
																			val:        "`'",
																			ignoreCase: false,
																			want:       "\"`'\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2626, col: 14, offset: 87382},
																		run: (*parser).callonInlineElement254,
																		expr: &litMatcher{
																			pos:        position{line: 2626, col: 14, offset: 87382},
																			val:        "(C)",
																			ignoreCase: false,
																			want:       "\"(C)\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2630, col: 14, offset: 87458},
																		run: (*parser).callonInlineElement256,
																		expr: &litMatcher{
																			pos:        position{line: 2630, col: 14, offset: 87458},
																			val:        "(TM)",
																			ignoreCase: false,
																			want:       "\"(TM)\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2634, col: 15, offset: 87536},
																		run: (*parser).callonInlineElement258,
																		expr: &litMatcher{
																			pos:        position{line: 2634, col: 15, offset: 87536},
																			val:        "(R)",
																			ignoreCase: false,
																			want:       "\"(R)\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2638, col: 13, offset: 87611},
																		run: (*parser).callonInlineElement260,
																		expr: &litMatcher{
																			pos:        position{line: 2638, col: 13, offset: 87611},
																			val:        "...",
																			ignoreCase: false,
																			want:       "\"...\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2646, col: 22, offset: 87917},
																		run: (*parser).callonInlineElement262,
																		expr: &seqExpr{
																			pos: position{line: 2646, col: 22, offset: 87917},
																			exprs: []interface{}{
																				&charClassMatcher{
																					pos:        position{line: 2797, col: 13, offset: 92519},
																					val:        "[0-9\\pL]",
																					ranges:     []rune{'0', '9'},
																					classes:    []*unicode.RangeTable{rangeTable("L")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&litMatcher{
																					pos:        position{line: 2646, col: 31, offset: 87926},
																					val:        "'",
																					ignoreCase: false,
																					want:       "\"'\"",
																				},
																				&andExpr{
																					pos: position{line: 2646, col: 35, offset: 87930},
																					expr: &charClassMatcher{
																						pos:        position{line: 2646, col: 36, offset: 87931},
																						val:        "[\\pL]",
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1114, col: 15, offset: 35361},
												name: "InlineMacro",
											},
											&actionExpr{
												pos: position{line: 2554, col: 5, offset: 85347},
												run: (*parser).callonInlineElement269,
												expr: &seqExpr{
													pos: position{line: 2554, col: 5, offset: 85347},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 2554, col: 5, offset: 85347},
															run: (*parser).callonInlineElement271,
														},
														&labeledExpr{
															pos:   position{line: 2557, col: 5, offset: 85417},
															label: "element",
															expr: &actionExpr{
																pos: position{line: 954, col: 14, offset: 30337},
																run: (*parser).callonInlineElement273,
																expr: &seqExpr{
																	pos: position{line: 954, col: 14, offset: 30337},
																	exprs: []interface{}{
																		&choiceExpr{
																			pos: position{line: 2878, col: 10, offset: 95044},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2878, col: 10, offset: 95044},
																					val:        " ",
																					ignoreCase: false,
																					want:       "\" \"",
																				},
																				&actionExpr{
																					pos: position{line: 2878, col: 16, offset: 95050},
																					run: (*parser).callonInlineElement277,
																					expr: &litMatcher{
																						pos:        position{line: 2878, col: 16, offset: 95050},
																						val:        "\t",
																						ignoreCase: false,
																						want:       "\"\\t\"",
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 954, col: 20, offset: 30343},
																			val:        "+",
																			ignoreCase: false,
																			want:       "\"+\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 954, col: 24, offset: 30347},
																			expr: &choiceExpr{
																				pos: position{line: 2878, col: 10, offset: 95044},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2878, col: 10, offset: 95044},
																						val:        " ",
																						ignoreCase: false,
																						want:       "\" \"",
																					},
																					&actionExpr{
																						pos: position{line: 2878, col: 16, offset: 95050},
																						run: (*parser).callonInlineElement283,
																						expr: &litMatcher{
																							pos:        position{line: 2878, col: 16, offset: 95050},
																							val:        "\t",
																							ignoreCase: false,
																							want:       "\"\\t\"",
																						},
																					},
																				},
																			},
																		},
																		&andExpr{
																			pos: position{line: 954, col: 31, offset: 30354},
																			expr: &choiceExpr{
																				pos: position{line: 2893, col: 8, offset: 95335},
																				alternatives: []interface{}{
																					&notExpr{
																						pos: position{line: 2890, col: 8, offset: 95285},
																						expr: &anyMatcher{
																							line: 2890, col: 9, offset: 95286,
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 2886, col: 12, offset: 95178},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2886, col: 19, offset: 95185},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&actionExpr{
																						pos: position{line: 2886, col: 28, offset: 95194},
																						run: (*parser).callonInlineElement291,
																						expr: &litMatcher{
																							pos:        position{line: 2886, col: 28, offset: 95194},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 947, col: 23, offset: 29896},
												run: (*parser).callonInlineElement293,
												expr: &seqExpr{
													pos: position{line: 947, col: 23, offset: 29896},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 945, col: 32, offset: 29864},
															val:        "�",
															ignoreCase: false,
															want:       "\"�\"",
														},
														&labeledExpr{
															pos:   position{line: 947, col: 51, offset: 29924},
															label: "ref",
															expr: &actionExpr{
																pos: position{line: 947, col: 56, offset: 29929},
																run: (*parser).callonInlineElement297,
																expr: &oneOrMoreExpr{
																	pos: position{line: 947, col: 56, offset: 29929},
																	expr: &charClassMatcher{
																		pos:        position{line: 947, col: 56, offset: 29929},
																		val:        "[0-9]",
																		ranges:     []rune{'0', '9'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 945, col: 32, offset: 29864},
															val:        "�",
															ignoreCase: false,
															want:       "\"�\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 2835, col: 12, offset: 93828},
												run: (*parser).callonInlineElement301,
												expr: &anyMatcher{
													line: 2835, col: 12, offset: 93828,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 1132, col: 1, offset: 36123},
			expr: &actionExpr{
				pos: position{line: 1132, col: 14, offset: 36136},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1132, col: 14, offset: 36136},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1132, col: 14, offset: 36136},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 1132, col: 19, offset: 36141},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 1132, col: 25, offset: 36147},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 1132, col: 43, offset: 36165},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 1136, col: 1, offset: 36237},
			expr: &actionExpr{
				pos: position{line: 1136, col: 21, offset: 36257},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 1136, col: 21, offset: 36257},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1136, col: 30, offset: 36266},
						expr: &choiceExpr{
							pos: position{line: 1136, col: 31, offset: 36267},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2809, col: 5, offset: 92974},
									run: (*parser).callonIndexTermContent5,
									expr: &seqExpr{
										pos: position{line: 2809, col: 5, offset: 92974},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 2809, col: 5, offset: 92974},
												expr: &charClassMatcher{
													pos:        position{line: 2809, col: 5, offset: 92974},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&andExpr{
												pos: position{line: 2809, col: 15, offset: 92984},
												expr: &choiceExpr{
													pos: position{line: 2809, col: 17, offset: 92986},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2809, col: 17, offset: 92986},
															val:        "[\\r\\n ,]]",
															chars:      []rune{'\r', '\n', ' ', ',', ']'},
															ignoreCase: false,
															inverted:   false,
														},
														&notExpr{
															pos: position{line: 2890, col: 8, offset: 95285},
															expr: &anyMatcher{
																line: 2890, col: 9, offset: 95286,
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2811, col: 9, offset: 93068},
									run: (*parser).callonIndexTermContent14,
									expr: &seqExpr{
										pos: position{line: 2811, col: 9, offset: 93068},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 2811, col: 9, offset: 93068},
												expr: &charClassMatcher{
													pos:        position{line: 2811, col: 9, offset: 93068},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&oneOrMoreExpr{
												pos: position{line: 2811, col: 19, offset: 93078},
												expr: &seqExpr{
													pos: position{line: 2811, col: 20, offset: 93079},
													exprs: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2811, col: 20, offset: 93079},
															val:        "[=*_`]",
															chars:      []rune{'=', '*', '_', '`'},
															ignoreCase: false,
															inverted:   false,
														},
														&oneOrMoreExpr{
															pos: position{line: 2811, col: 27, offset: 93086},
															expr: &charClassMatcher{
																pos:        position{line: 2811, col: 27, offset: 93086},
																val:        "[0-9\\pL]",
																ranges:     []rune{'0', '9'},
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1136, col: 38, offset: 36274},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 1136, col: 53, offset: 36289},
									name: "QuotedText",
								},
								&litMatcher{
									pos:        position{line: 2878, col: 10, offset: 95044},
									val:        " ",
									ignoreCase: false,
									want:       "\" \"",
								},
								&actionExpr{
									pos: position{line: 2878, col: 16, offset: 95050},
									run: (*parser).callonIndexTermContent26,
									expr: &litMatcher{
										pos:        position{line: 2878, col: 16, offset: 95050},
										val:        "\t",
										ignoreCase: false,
										want:       "\"\\t\"",
									},
								},
								&actionExpr{
									pos: position{line: 2587, col: 5, offset: 86026},
									run: (*parser).callonIndexTermContent28,
									expr: &seqExpr{
										pos: position{line: 2587, col: 5, offset: 86026},
										exprs: []interface{}{
											&andCodeExpr{
												pos: position{line: 2587, col: 5, offset: 86026},
												run: (*parser).callonIndexTermContent30,
											},
											&labeledExpr{
												pos:   position{line: 2590, col: 5, offset: 86097},
												label: "element",
												expr: &choiceExpr{
													pos: position{line: 2592, col: 9, offset: 86195},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2592, col: 9, offset: 86195},
															run: (*parser).callonIndexTermContent33,
															expr: &choiceExpr{
																pos: position{line: 491, col: 27, offset: 15997},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 491, col: 27, offset: 15997},
																		run: (*parser).callonIndexTermContent35,
																		expr: &seqExpr{
																			pos: position{line: 491, col: 27, offset: 15997},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 491, col: 27, offset: 15997},
																					val:        "<<",
																					ignoreCase: false,
																					want:       "\"<<\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 491, col: 32, offset: 16002},
																					label: "id",
																					expr: &actionExpr{
																						pos: position{line: 2866, col: 7, offset: 94768},
																						run: (*parser).callonIndexTermContent39,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 2866, col: 7, offset: 94768},
																							expr: &charClassMatcher{
																								pos:        position{line: 2866, col: 7, offset: 94768},
																								val:        "[^[]<>,]",
																								chars:      []rune{'[', ']', '<', '>', ','},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 491, col: 40, offset: 16010},
																					expr: &choiceExpr{
																						pos: position{line: 2878, col: 10, offset: 95044},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2878, col: 10, offset: 95044},
																								val:        " ",
																								ignoreCase: false,
																								want:       "\" \"",
																							},
																							&actionExpr{
																								pos: position{line: 2878, col: 16, offset: 95050},
																								run: (*parser).callonIndexTermContent45,
																								expr: &litMatcher{
																									pos:        position{line: 2878, col: 16, offset: 95050},
																									val:        "\t",
																									ignoreCase: false,
																									want:       "\"\\t\"",
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 491, col: 47, offset: 16017},
																					val:        ",",
																					ignoreCase: false,
																					want:       "\",\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 491, col: 51, offset: 16021},
																					label: "label",
																					expr: &oneOrMoreExpr{
																						pos: position{line: 501, col: 24, offset: 16434},
																						expr: &choiceExpr{
																							pos: position{line: 502, col: 5, offset: 16440},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 502, col: 6, offset: 16441},
																									run: (*parser).callonIndexTermContent51,
																									expr: &seqExpr{
																										pos: position{line: 502, col: 6, offset: 16441},
																										exprs: []interface{}{
																											&charClassMatcher{
																												pos:        position{line: 502, col: 6, offset: 16441},
																												val:        "[0-9\\pL]",
																												ranges:     []rune{'0', '9'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&oneOrMoreExpr{
																												pos: position{line: 502, col: 14, offset: 16449},
																												expr: &charClassMatcher{
																													pos:        position{line: 502, col: 14, offset: 16449},
																													val:        "[^\\r\\n{<>]",
																													chars:      []rune{'\r', '\n', '{', '<', '>'},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 449, col: 5, offset: 14443},
																									run: (*parser).callonIndexTermContent56,
																									expr: &seqExpr{
																										pos: position{line: 449, col: 5, offset: 14443},
																										exprs: []interface{}{
																											&andCodeExpr{
																												pos: position{line: 449, col: 5, offset: 14443},
																												run: (*parser).callonIndexTermContent58,
																											},
																											&labeledExpr{
																												pos:   position{line: 452, col: 5, offset: 14507},
																												label: "element",
																												expr: &choiceExpr{
																													pos: position{line: 452, col: 14, offset: 14516},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 463, col: 25, offset: 14978},
																															run: (*parser).callonIndexTermContent61,
																															expr: &seqExpr{
																																pos: position{line: 463, col: 25, offset: 14978},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 463, col: 25, offset: 14978},
																																		val:        "{counter:",
																																		ignoreCase: false,
																																		want:       "\"{counter:\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 463, col: 37, offset: 14990},
																																		label: "name",
																																		expr: &actionExpr{
																																			pos: position{line: 118, col: 18, offset: 3399},
																																			run: (*parser).callonIndexTermContent65,
																																			expr: &seqExpr{
																																				pos: position{line: 118, col: 18, offset: 3399},
																																				exprs: []interface{}{
																																					&charClassMatcher{
																																						pos:        position{line: 118, col: 18, offset: 3399},
																																						val:        "[_0-9\\pL]",
																																						chars:      []rune{'_'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																					&zeroOrMoreExpr{
																																						pos: position{line: 118, col: 28, offset: 3409},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 118, col: 29, offset: 3410},
																																							val:        "[-0-9\\pL]",
																																							chars:      []rune{'-'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 463, col: 56, offset: 15009},
																																		label: "start",
																																		expr: &zeroOrOneExpr{
																																			pos: position{line: 463, col: 62, offset: 15015},
																																			expr: &actionExpr{
																																				pos: position{line: 471, col: 17, offset: 15278},
																																				run: (*parser).callonIndexTermContent72,
																																				expr: &seqExpr{
																																					pos: position{line: 471, col: 17, offset: 15278},
																																					exprs: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 471, col: 17, offset: 15278},
																																							val:        ":",
																																							ignoreCase: false,
																																							want:       "\":\"",
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 471, col: 21, offset: 15282},
																																							label: "start",
																																							expr: &choiceExpr{
																																								pos: position{line: 471, col: 28, offset: 15289},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 471, col: 28, offset: 15289},
																																										run: (*parser).callonIndexTermContent77,
																																										expr: &charClassMatcher{
																																											pos:        position{line: 471, col: 28, offset: 15289},
																																											val:        "[A-Za-z]",
																																											ranges:     []rune{'A', 'Z', 'a', 'z'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																									&actionExpr{
																																										pos: position{line: 473, col: 9, offset: 15343},
																																										run: (*parser).callonIndexTermContent79,
																																										expr: &oneOrMoreExpr{
																																											pos: position{line: 473, col: 9, offset: 15343},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 473, col: 9, offset: 15343},
																																												val:        "[0-9]",
																																												ranges:     []rune{'0', '9'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 463, col: 78, offset: 15031},
																																		val:        "}",
																																		ignoreCase: false,
																																		want:       "\"}\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 467, col: 25, offset: 15133},
																															run: (*parser).callonIndexTermContent83,
																															expr: &seqExpr{
																																pos: position{line: 467, col: 25, offset: 15133},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 467, col: 25, offset: 15133},
																																		val:        "{counter2:",
																																		ignoreCase: false,
																																		want:       "\"{counter2:\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 467, col: 38, offset: 15146},
																																		label: "name",
																																		expr: &actionExpr{
																																			pos: position{line: 118, col: 18, offset: 3399},
																																			run: (*parser).callonIndexTermContent87,
																																			expr: &seqExpr{
																																				pos: position{line: 118, col: 18, offset: 3399},
																																				exprs: []interface{}{
																																					&charClassMatcher{
																																						pos:        position{line: 118, col: 18, offset: 3399},
																																						val:        "[_0-9\\pL]",
																																						chars:      []rune{'_'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																					&zeroOrMoreExpr{
																																						pos: position{line: 118, col: 28, offset: 3409},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 118, col: 29, offset: 3410},
																																							val:        "[-0-9\\pL]",
																																							chars:      []rune{'-'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 467, col: 57, offset: 15165},
																																		label: "start",
																																		expr: &zeroOrOneExpr{
																																			pos: position{line: 467, col: 63, offset: 15171},
																																			expr: &actionExpr{
																																				pos: position{line: 471, col: 17, offset: 15278},
																																				run: (*parser).callonIndexTermContent94,
																																				expr: &seqExpr{
																																					pos: position{line: 471, col: 17, offset: 15278},
																																					exprs: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 471, col: 17, offset: 15278},
																																							val:        ":",
																																							ignoreCase: false,
																																							want:       "\":\"",
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 471, col: 21, offset: 15282},
																																							label: "start",
																																							expr: &choiceExpr{
																																								pos: position{line: 471, col: 28, offset: 15289},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 471, col: 28, offset: 15289},
																																										run: (*parser).callonIndexTermContent99,
																																										expr: &charClassMatcher{
																																											pos:        position{line: 471, col: 28, offset: 15289},
																																											val:        "[A-Za-z]",
																																											ranges:     []rune{'A', 'Z', 'a', 'z'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																									&actionExpr{
																																										pos: position{line: 473, col: 9, offset: 15343},
																																										run: (*parser).callonIndexTermContent101,
																																										expr: &oneOrMoreExpr{
																																											pos: position{line: 473, col: 9, offset: 15343},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 473, col: 9, offset: 15343},
																																												val:        "[0-9]",
																																												ranges:     []rune{'0', '9'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 467, col: 79, offset: 15187},
																																		val:        "}",
																																		ignoreCase: false,
																																		want:       "\"}\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 456, col: 31, offset: 14633},
																															run: (*parser).callonIndexTermContent105,
																															expr: &seqExpr{
																																pos: position{line: 456, col: 31, offset: 14633},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 456, col: 31, offset: 14633},
																																		val:        "{",
																																		ignoreCase: false,
																																		want:       "\"{\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 456, col: 35, offset: 14637},
																																		label: "name",
																																		expr: &actionExpr{
																																			pos: position{line: 118, col: 18, offset: 3399},
																																			run: (*parser).callonIndexTermContent109,
																																			expr: &seqExpr{
																																				pos: position{line: 118, col: 18, offset: 3399},
																																				exprs: []interface{}{
																																					&charClassMatcher{
																																						pos:        position{line: 118, col: 18, offset: 3399},
																																						val:        "[_0-9\\pL]",
																																						chars:      []rune{'_'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																					&zeroOrMoreExpr{
																																						pos: position{line: 118, col: 28, offset: 3409},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 118, col: 29, offset: 3410},
																																							val:        "[-0-9\\pL]",
																																							chars:      []rune{'-'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 456, col: 54, offset: 14656},
																																		val:        "}",
																																		ignoreCase: false,
																																		want:       "\"}\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 506, col: 8, offset: 16673},
																									run: (*parser).callonIndexTermContent115,
																									expr: &litMatcher{
																										pos:        position{line: 506, col: 8, offset: 16673},
																										val:        "{",
																										ignoreCase: false,
																										want:       "\"{\"",
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 491, col: 79, offset: 16049},
																					val:        ">>",
																					ignoreCase: false,
																					want:       "\">>\"",
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 493, col: 9, offset: 16122},
																		run: (*parser).callonIndexTermContent118,
																		expr: &seqExpr{
																			pos: position{line: 493, col: 9, offset: 16122},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 493, col: 9, offset: 16122},
																					val:        "<<",
																					ignoreCase: false,
																					want:       "\"<<\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 493, col: 14, offset: 16127},
																					label: "id",
																					expr: &actionExpr{
																						pos: position{line: 2866, col: 7, offset: 94768},
																						run: (*parser).callonIndexTermContent122,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 2866, col: 7, offset: 94768},
																							expr: &charClassMatcher{
																								pos:        position{line: 2866, col: 7, offset: 94768},
																								val:        "[^[]<>,]",
																								chars:      []rune{'[', ']', '<', '>', ','},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 493, col: 22, offset: 16135},
																					val:        ">>",
																					ignoreCase: false,
																					want:       "\">>\"",
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2595, col: 11, offset: 86299},
															run: (*parser).callonIndexTermContent126,
															expr: &charClassMatcher{
																pos:        position{line: 2595, col: 12, offset: 86300},
																val:        "[<>&]",
																chars:      []rune{'<', '>', '&'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 947, col: 23, offset: 29896},
									run: (*parser).callonIndexTermContent128,
									expr: &seqExpr{
										pos: position{line: 947, col: 23, offset: 29896},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 945, col: 32, offset: 29864},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
											&labeledExpr{
												pos:   position{line: 947, col: 51, offset: 29924},
												label: "ref",
												expr: &actionExpr{
													pos: position{line: 947, col: 56, offset: 29929},
													run: (*parser).callonIndexTermContent132,
													expr: &oneOrMoreExpr{
														pos: position{line: 947, col: 56, offset: 29929},
														expr: &charClassMatcher{
															pos:        position{line: 947, col: 56, offset: 29929},
															val:        "[0-9]",
															ranges:     []rune{'0', '9'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 945, col: 32, offset: 29864},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1136, col: 114, offset: 36350},
									run: (*parser).callonIndexTermContent136,
									expr: &seqExpr{
										pos: position{line: 1136, col: 115, offset: 36351},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1136, col: 115, offset: 36351},
												expr: &litMatcher{
													pos:        position{line: 1136, col: 116, offset: 36352},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 1136, col: 121, offset: 36357,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1156, col: 1, offset: 37066},
			expr: &actionExpr{
				pos: position{line: 1157, col: 5, offset: 37085},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1157, col: 5, offset: 37085},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1157, col: 5, offset: 37085},
							run: (*parser).callonImageBlock3,
						},
						&litMatcher{
							pos:        position{line: 1161, col: 5, offset: 37237},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 1161, col: 15, offset: 37247},
							label: "path",
							expr: &actionExpr{
								pos: position{line: 2843, col: 13, offset: 94029},
								run: (*parser).callonImageBlock6,
								expr: &seqExpr{
									pos: position{line: 2843, col: 13, offset: 94029},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 2843, col: 13, offset: 94029},
											label: "scheme",
											expr: &zeroOrOneExpr{
												pos: position{line: 2843, col: 20, offset: 94036},
												expr: &choiceExpr{
													pos: position{line: 2864, col: 11, offset: 94704},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2864, col: 11, offset: 94704},
															val:        "http://",
															ignoreCase: false,
															want:       "\"http://\"",
														},
														&litMatcher{
															pos:        position{line: 2864, col: 23, offset: 94716},
															val:        "https://",
															ignoreCase: false,
															want:       "\"https://\"",
														},
														&litMatcher{
															pos:        position{line: 2864, col: 36, offset: 94729},
															val:        "ftp://",
															ignoreCase: false,
															want:       "\"ftp://\"",
														},
														&litMatcher{
															pos:        position{line: 2864, col: 47, offset: 94740},
															val:        "irc://",
															ignoreCase: false,
															want:       "\"irc://\"",
														},
														&litMatcher{
															pos:        position{line: 2864, col: 58, offset: 94751},
															val:        "mailto:",
															ignoreCase: false,
															want:       "\"mailto:\"",
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 2843, col: 30, offset: 94046},
											label: "path",
											expr: &oneOrMoreExpr{
												pos: position{line: 2843, col: 35, offset: 94051},
												expr: &choiceExpr{
													pos: position{line: 2843, col: 36, offset: 94052},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2851, col: 13, offset: 94316},
															run: (*parser).callonImageBlock19,
															expr: &labeledExpr{
																pos:   position{line: 2851, col: 13, offset: 94316},
																label: "elements",
																expr: &oneOrMoreExpr{
																	pos: position{line: 2851, col: 22, offset: 94325},
																	expr: &choiceExpr{
																		pos: position{line: 2852, col: 5, offset: 94331},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2852, col: 5, offset: 94331},
																				run: (*parser).callonImageBlock23,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2852, col: 5, offset: 94331},
																					expr: &charClassMatcher{
																						pos:        position{line: 2852, col: 6, offset: 94332},
																						val:        "[^\\r\\n[]�&<>{ ]",
																						chars:      []rune{'\r', '\n', '[', ']', '�', '&', '<', '>', '{', ' '},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 449, col: 5, offset: 14443},
																				run: (*parser).callonImageBlock26,
																				expr: &seqExpr{
																					pos: position{line: 449, col: 5, offset: 14443},
																					exprs: []interface{}{
																						&andCodeExpr{
																							pos: position{line: 449, col: 5, offset: 14443},
																							run: (*parser).callonImageBlock28,
																						},
																						&labeledExpr{
																							pos:   position{line: 452, col: 5, offset: 14507},
																							label: "element",
																							expr: &choiceExpr{
																								pos: position{line: 452, col: 14, offset: 14516},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 463, col: 25, offset: 14978},
																										run: (*parser).callonImageBlock31,
																										expr: &seqExpr{
																											pos: position{line: 463, col: 25, offset: 14978},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 463, col: 25, offset: 14978},
																													val:        "{counter:",
																													ignoreCase: false,
																													want:       "\"{counter:\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 463, col: 37, offset: 14990},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 118, col: 18, offset: 3399},
																														run: (*parser).callonImageBlock35,
																														expr: &seqExpr{
																															pos: position{line: 118, col: 18, offset: 3399},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 118, col: 18, offset: 3399},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 118, col: 28, offset: 3409},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 118, col: 29, offset: 3410},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 463, col: 56, offset: 15009},
																													label: "start",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 463, col: 62, offset: 15015},
																														expr: &actionExpr{
																															pos: position{line: 471, col: 17, offset: 15278},
																															run: (*parser).callonImageBlock42,
																															expr: &seqExpr{
																																pos: position{line: 471, col: 17, offset: 15278},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 471, col: 17, offset: 15278},
																																		val:        ":",
																																		ignoreCase: false,
																																		want:       "\":\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 471, col: 21, offset: 15282},
																																		label: "start",
																																		expr: &choiceExpr{
																																			pos: position{line: 471, col: 28, offset: 15289},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 471, col: 28, offset: 15289},
																																					run: (*parser).callonImageBlock47,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 471, col: 28, offset: 15289},
																																						val:        "[A-Za-z]",
																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 473, col: 9, offset: 15343},
																																					run: (*parser).callonImageBlock49,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 473, col: 9, offset: 15343},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 473, col: 9, offset: 15343},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 463, col: 78, offset: 15031},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 467, col: 25, offset: 15133},
																										run: (*parser).callonImageBlock53,
																										expr: &seqExpr{
																											pos: position{line: 467, col: 25, offset: 15133},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 467, col: 25, offset: 15133},
																													val:        "{counter2:",
																													ignoreCase: false,
																													want:       "\"{counter2:\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 467, col: 38, offset: 15146},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 118, col: 18, offset: 3399},
																														run: (*parser).callonImageBlock57,
																														expr: &seqExpr{
																															pos: position{line: 118, col: 18, offset: 3399},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 118, col: 18, offset: 3399},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 118, col: 28, offset: 3409},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 118, col: 29, offset: 3410},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 467, col: 57, offset: 15165},
																													label: "start",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 467, col: 63, offset: 15171},
																														expr: &actionExpr{
																															pos: position{line: 471, col: 17, offset: 15278},
																															run: (*parser).callonImageBlock64,
																															expr: &seqExpr{
																																pos: position{line: 471, col: 17, offset: 15278},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 471, col: 17, offset: 15278},
																																		val:        ":",
																																		ignoreCase: false,
																																		want:       "\":\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 471, col: 21, offset: 15282},
																																		label: "start",
																																		expr: &choiceExpr{
																																			pos: position{line: 471, col: 28, offset: 15289},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 471, col: 28, offset: 15289},
																																					run: (*parser).callonImageBlock69,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 471, col: 28, offset: 15289},
																																						val:        "[A-Za-z]",
																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 473, col: 9, offset: 15343},
																																					run: (*parser).callonImageBlock71,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 473, col: 9, offset: 15343},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 473, col: 9, offset: 15343},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 467, col: 79, offset: 15187},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 456, col: 31, offset: 14633},
																										run: (*parser).callonImageBlock75,
																										expr: &seqExpr{
																											pos: position{line: 456, col: 31, offset: 14633},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 456, col: 31, offset: 14633},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 456, col: 35, offset: 14637},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 118, col: 18, offset: 3399},
																														run: (*parser).callonImageBlock79,
																														expr: &seqExpr{
																															pos: position{line: 118, col: 18, offset: 3399},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 118, col: 18, offset: 3399},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 118, col: 28, offset: 3409},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 118, col: 29, offset: 3410},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 456, col: 54, offset: 14656},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2587, col: 5, offset: 86026},
																				run: (*parser).callonImageBlock85,
																				expr: &seqExpr{
																					pos: position{line: 2587, col: 5, offset: 86026},
																					exprs: []interface{}{
																						&andCodeExpr{
																							pos: position{line: 2587, col: 5, offset: 86026},
																							run: (*parser).callonImageBlock87,
																						},
																						&labeledExpr{
																							pos:   position{line: 2590, col: 5, offset: 86097},
																							label: "element",
																							expr: &choiceExpr{
																								pos: position{line: 2592, col: 9, offset: 86195},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2592, col: 9, offset: 86195},
																										run: (*parser).callonImageBlock90,
																										expr: &choiceExpr{
																											pos: position{line: 491, col: 27, offset: 15997},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 491, col: 27, offset: 15997},
																													run: (*parser).callonImageBlock92,
																													expr: &seqExpr{
																														pos: position{line: 491, col: 27, offset: 15997},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 491, col: 27, offset: 15997},
																																val:        "<<",
																																ignoreCase: false,
																																want:       "\"<<\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 491, col: 32, offset: 16002},
																																label: "id",
																																expr: &actionExpr{
																																	pos: position{line: 2866, col: 7, offset: 94768},
																																	run: (*parser).callonImageBlock96,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 2866, col: 7, offset: 94768},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2866, col: 7, offset: 94768},
																																			val:        "[^[]<>,]",
																																			chars:      []rune{'[', ']', '<', '>', ','},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 491, col: 40, offset: 16010},
																																expr: &choiceExpr{
																																	pos: position{line: 2878, col: 10, offset: 95044},
																																	alternatives: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2878, col: 10, offset: 95044},
																																			val:        " ",
																																			ignoreCase: false,
																																			want:       "\" \"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 2878, col: 16, offset: 95050},
																																			run: (*parser).callonImageBlock102,
																																			expr: &litMatcher{
																																				pos:        position{line: 2878, col: 16, offset: 95050},
																																				val:        "\t",
																																				ignoreCase: false,
																																				want:       "\"\\t\"",
																																			},
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 491, col: 47, offset: 16017},
																																val:        ",",
																																ignoreCase: false,
																																want:       "\",\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 491, col: 51, offset: 16021},
																																label: "label",
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 501, col: 24, offset: 16434},
																																	expr: &choiceExpr{
																																		pos: position{line: 502, col: 5, offset: 16440},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 502, col: 6, offset: 16441},
																																				run: (*parser).callonImageBlock108,
																																				expr: &seqExpr{
																																					pos: position{line: 502, col: 6, offset: 16441},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 502, col: 6, offset: 16441},
																																							val:        "[0-9\\pL]",
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&oneOrMoreExpr{
																																							pos: position{line: 502, col: 14, offset: 16449},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 502, col: 14, offset: 16449},
																																								val:        "[^\\r\\n{<>]",
																																								chars:      []rune{'\r', '\n', '{', '<', '>'},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 449, col: 5, offset: 14443},
																																				run: (*parser).callonImageBlock113,
																																				expr: &seqExpr{
																																					pos: position{line: 449, col: 5, offset: 14443},
																																					exprs: []interface{}{
																																						&andCodeExpr{
																																							pos: position{line: 449, col: 5, offset: 14443},
																																							run: (*parser).callonImageBlock115,
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 452, col: 5, offset: 14507},
																																							label: "element",
																																							expr: &choiceExpr{
																																								pos: position{line: 452, col: 14, offset: 14516},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 463, col: 25, offset: 14978},
																																										run: (*parser).callonImageBlock118,
																																										expr: &seqExpr{
																																											pos: position{line: 463, col: 25, offset: 14978},
																																											exprs: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 463, col: 25, offset: 14978},
																																													val:        "{counter:",
																																													ignoreCase: false,
																																													want:       "\"{counter:\"",
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 463, col: 37, offset: 14990},
																																													label: "name",
																																													expr: &actionExpr{
																																														pos: position{line: 118, col: 18, offset: 3399},
																																														run: (*parser).callonImageBlock122,
																																														expr: &seqExpr{
																																															pos: position{line: 118, col: 18, offset: 3399},
																																															exprs: []interface{}{
																																																&charClassMatcher{
																																																	pos:        position{line: 118, col: 18, offset: 3399},
																																																	val:        "[_0-9\\pL]",
																																																	chars:      []rune{'_'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																																&zeroOrMoreExpr{
																																																	pos: position{line: 118, col: 28, offset: 3409},
																																																	expr: &charClassMatcher{
																																																		pos:        position{line: 118, col: 29, offset: 3410},
																																																		val:        "[-0-9\\pL]",
																																																		chars:      []rune{'-'},
																																																		ranges:     []rune{'0', '9'},
																																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																																		ignoreCase: false,
																																																		inverted:   false,
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 463, col: 56, offset: 15009},
																																													label: "start",
																																													expr: &zeroOrOneExpr{
																																														pos: position{line: 463, col: 62, offset: 15015},
																																														expr: &actionExpr{
																																															pos: position{line: 471, col: 17, offset: 15278},
																																															run: (*parser).callonImageBlock129,
																																															expr: &seqExpr{
																																																pos: position{line: 471, col: 17, offset: 15278},
																																																exprs: []interface{}{
																																																	&litMatcher{
																																																		pos:        position{line: 471, col: 17, offset: 15278},
																																																		val:        ":",
																																																		ignoreCase: false,
																																																		want:       "\":\"",
																																																	},
																																																	&labeledExpr{
																																																		pos:   position{line: 471, col: 21, offset: 15282},
																																																		label: "start",
																																																		expr: &choiceExpr{
																																																			pos: position{line: 471, col: 28, offset: 15289},
																																																			alternatives: []interface{}{
																																																				&actionExpr{
																																																					pos: position{line: 471, col: 28, offset: 15289},
																																																					run: (*parser).callonImageBlock134,
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 471, col: 28, offset: 15289},
																																																						val:        "[A-Za-z]",
																																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																				&actionExpr{
																																																					pos: position{line: 473, col: 9, offset: 15343},
																																																					run: (*parser).callonImageBlock136,
																																																					expr: &oneOrMoreExpr{
																																																						pos: position{line: 473, col: 9, offset: 15343},
																																																						expr: &charClassMatcher{
																																																							pos:        position{line: 473, col: 9, offset: 15343},
																																																							val:        "[0-9]",
																																																							ranges:     []rune{'0', '9'},
																																																							ignoreCase: false,
																																																							inverted:   false,
																																																						},
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&litMatcher{
																																													pos:        position{line: 463, col: 78, offset: 15031},
																																													val:        "}",
																																													ignoreCase: false,
																																													want:       "\"}\"",
																																												},
																																											},
																																										},
																																									},
																																									&actionExpr{
																																										pos: position{line: 467, col: 25, offset: 15133},
																																										run: (*parser).callonImageBlock140,
																																										expr: &seqExpr{
																																											pos: position{line: 467, col: 25, offset: 15133},
																																											exprs: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 467, col: 25, offset: 15133},
																																													val:        "{counter2:",
																																													ignoreCase: false,
																																													want:       "\"{counter2:\"",
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 467, col: 38, offset: 15146},
																																													label: "name",
																																													expr: &actionExpr{
																																														pos: position{line: 118, col: 18, offset: 3399},
																																														run: (*parser).callonImageBlock144,
																																														expr: &seqExpr{
																																															pos: position{line: 118, col: 18, offset: 3399},
																																															exprs: []interface{}{
																																																&charClassMatcher{
																																																	pos:        position{line: 118, col: 18, offset: 3399},
																																																	val:        "[_0-9\\pL]",
																																																	chars:      []rune{'_'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																																&zeroOrMoreExpr{
																																																	pos: position{line: 118, col: 28, offset: 3409},
																																																	expr: &charClassMatcher{
																																																		pos:        position{line: 118, col: 29, offset: 3410},
																																																		val:        "[-0-9\\pL]",
																																																		chars:      []rune{'-'},
																																																		ranges:     []rune{'0', '9'},
																																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																																		ignoreCase: false,
																																																		inverted:   false,
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 467, col: 57, offset: 15165},
																																													label: "start",
																																													expr: &zeroOrOneExpr{
																																														pos: position{line: 467, col: 63, offset: 15171},
																																														expr: &actionExpr{
																																															pos: position{line: 471, col: 17, offset: 15278},
																																															run: (*parser).callonImageBlock151,
																																															expr: &seqExpr{
																																																pos: position{line: 471, col: 17, offset: 15278},
																																																exprs: []interface{}{
																																																	&litMatcher{
																																																		pos:        position{line: 471, col: 17, offset: 15278},
																																																		val:        ":",
																																																		ignoreCase: false,
																																																		want:       "\":\"",
																																																	},
																																																	&labeledExpr{
																																																		pos:   position{line: 471, col: 21, offset: 15282},
																																																		label: "start",
																																																		expr: &choiceExpr{
																																																			pos: position{line: 471, col: 28, offset: 15289},
																																																			alternatives: []interface{}{
																																																				&actionExpr{
																																																					pos: position{line: 471, col: 28, offset: 15289},
																																																					run: (*parser).callonImageBlock156,
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 471, col: 28, offset: 15289},
																																																						val:        "[A-Za-z]",
																																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																				&actionExpr{
																																																					pos: position{line: 473, col: 9, offset: 15343},
																																																					run: (*parser).callonImageBlock158,
																																																					expr: &oneOrMoreExpr{
																																																						pos: position{line: 473, col: 9, offset: 15343},
																																																						expr: &charClassMatcher{
																																																							pos:        position{line: 473, col: 9, offset: 15343},
																																																							val:        "[0-9]",
																																																							ranges:     []rune{'0', '9'},
																																																							ignoreCase: false,
																																																							inverted:   false,
																																																						},
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&litMatcher{
																																													pos:        position{line: 467, col: 79, offset: 15187},
																																													val:        "}",
																																													ignoreCase: false,
																																													want:       "\"}\"",
																																												},
																																											},
																																										},
																																									},
																																									&actionExpr{
																																										pos: position{line: 456, col: 31, offset: 14633},
																																										run: (*parser).callonImageBlock162,
																																										expr: &seqExpr{
																																											pos: position{line: 456, col: 31, offset: 14633},
																																											exprs: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 456, col: 31, offset: 14633},
																																													val:        "{",
																																													ignoreCase: false,
																																													want:       "\"{\"",
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 456, col: 35, offset: 14637},
																																													label: "name",
																																													expr: &actionExpr{
																																														pos: position{line: 118, col: 18, offset: 3399},
																																														run: (*parser).callonImageBlock166,
																																														expr: &seqExpr{
																																															pos: position{line: 118, col: 18, offset: 3399},
																																															exprs: []interface{}{
																																																&charClassMatcher{
																																																	pos:        position{line: 118, col: 18, offset: 3399},
																																																	val:        "[_0-9\\pL]",
																																																	chars:      []rune{'_'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																																&zeroOrMoreExpr{
																																																	pos: position{line: 118, col: 28, offset: 3409},
																																																	expr: &charClassMatcher{
																																																		pos:        position{line: 118, col: 29, offset: 3410},
																																																		val:        "[-0-9\\pL]",
																																																		chars:      []rune{'-'},
																																																		ranges:     []rune{'0', '9'},
																																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																																		ignoreCase: false,
																																																		inverted:   false,
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&litMatcher{
																																													pos:        position{line: 456, col: 54, offset: 14656},
																																													val:        "}",
																																													ignoreCase: false,
																																													want:       "\"}\"",
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 506, col: 8, offset: 16673},
																																				run: (*parser).callonImageBlock172,
																																				expr: &litMatcher{
																																					pos:        position{line: 506, col: 8, offset: 16673},
																																					val:        "{",
																																					ignoreCase: false,
																																					want:       "\"{\"",
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 491, col: 79, offset: 16049},
																																val:        ">>",
																																ignoreCase: false,
																																want:       "\">>\"",
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 493, col: 9, offset: 16122},
																													run: (*parser).callonImageBlock175,
																													expr: &seqExpr{
																														pos: position{line: 493, col: 9, offset: 16122},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 493, col: 9, offset: 16122},
																																val:        "<<",
																																ignoreCase: false,
																																want:       "\"<<\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 493, col: 14, offset: 16127},
																																label: "id",
																																expr: &actionExpr{
																																	pos: position{line: 2866, col: 7, offset: 94768},
																																	run: (*parser).callonImageBlock179,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 2866, col: 7, offset: 94768},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2866, col: 7, offset: 94768},
																																			val:        "[^[]<>,]",
																																			chars:      []rune{'[', ']', '<', '>', ','},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 493, col: 22, offset: 16135},
																																val:        ">>",
																																ignoreCase: false,
																																want:       "\">>\"",
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2595, col: 11, offset: 86299},
																										run: (*parser).callonImageBlock183,
																										expr: &charClassMatcher{
																											pos:        position{line: 2595, col: 12, offset: 86300},
																											val:        "[<>&]",
																											chars:      []rune{'<', '>', '&'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2858, col: 7, offset: 94556},
																				run: (*parser).callonImageBlock185,
																				expr: &litMatcher{
																					pos:        position{line: 2858, col: 7, offset: 94556},
																					val:        "{",
																					ignoreCase: false,
																					want:       "\"{\"",
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 947, col: 23, offset: 29896},
															run: (*parser).callonImageBlock187,
															expr: &seqExpr{
																pos: position{line: 947, col: 23, offset: 29896},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 945, col: 32, offset: 29864},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 947, col: 51, offset: 29924},
																		label: "ref",
																		expr: &actionExpr{
																			pos: position{line: 947, col: 56, offset: 29929},
																			run: (*parser).callonImageBlock191,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 947, col: 56, offset: 29929},
																				expr: &charClassMatcher{
																					pos:        position{line: 947, col: 56, offset: 29929},
																					val:        "[0-9]",
																					ranges:     []rune{'0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 945, col: 32, offset: 29864},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1161, col: 31, offset: 37263},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1161, col: 49, offset: 37281},
								name: "InlineAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1161, col: 67, offset: 37299},
							expr: &choiceExpr{
								pos: position{line: 2878, col: 10, offset: 95044},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 2878, col: 10, offset: 95044},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
									&actionExpr{
										pos: position{line: 2878, col: 16, offset: 95050},
										run: (*parser).callonImageBlock200,
										expr: &litMatcher{
											pos:        position{line: 2878, col: 16, offset: 95050},
											val:        "\t",
											ignoreCase: false,
											want:       "\"\\t\"",
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2893, col: 8, offset: 95335},
							alternatives: []interface{}{
								&notExpr{
									pos: position{line: 2890, col: 8, offset: 95285},
									expr: &anyMatcher{
										line: 2890, col: 9, offset: 95286,
									},
								},
								&litMatcher{
									pos:        position{line: 2886, col: 12, offset: 95178},
									val:        "\n",
									ignoreCase: false,
									want:       "\"\\n\"",
								},
								&litMatcher{
									pos:        position{line: 2886, col: 19, offset: 95185},
									val:        "\r\n",
									ignoreCase: false,
									want:       "\"\\r\\n\"",
								},
								&actionExpr{
									pos: position{line: 2886, col: 28, offset: 95194},
									run: (*parser).callonImageBlock207,
									expr: &litMatcher{
										pos:        position{line: 2886, col: 28, offset: 95194},
										val:        "\r",
										ignoreCase: false,
										want:       "\"\\r\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1167, col: 1, offset: 37593},
			expr: &actionExpr{
				pos: position{line: 1167, col: 16, offset: 37608},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1167, col: 16, offset: 37608},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1167, col: 16, offset: 37608},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 1167, col: 25, offset: 37617},
							expr: &litMatcher{
								pos:        position{line: 1167, col: 26, offset: 37618},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1167, col: 30, offset: 37622},
							label: "path",
							expr: &actionExpr{
								pos: position{line: 2843, col: 13, offset: 94029},
								run: (*parser).callonInlineImage7,
								expr: &seqExpr{
									pos: position{line: 2843, col: 13, offset: 94029},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 2843, col: 13, offset: 94029},
											label: "scheme",
											expr: &zeroOrOneExpr{
												pos: position{line: 2843, col: 20, offset: 94036},
												expr: &choiceExpr{
													pos: position{line: 2864, col: 11, offset: 94704},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2864, col: 11, offset: 94704},
															val:        "http://",
															ignoreCase: false,
															want:       "\"http://\"",
														},
														&litMatcher{
															pos:        position{line: 2864, col: 23, offset: 94716},
															val:        "https://",
															ignoreCase: false,
															want:       "\"https://\"",
														},
														&litMatcher{
															pos:        position{line: 2864, col: 36, offset: 94729},
															val:        "ftp://",
															ignoreCase: false,
															want:       "\"ftp://\"",
														},
														&litMatcher{
															pos:        position{line: 2864, col: 47, offset: 94740},
															val:        "irc://",
															ignoreCase: false,
															want:       "\"irc://\"",
														},
														&litMatcher{
															pos:        position{line: 2864, col: 58, offset: 94751},
															val:        "mailto:",
															ignoreCase: false,
															want:       "\"mailto:\"",
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 2843, col: 30, offset: 94046},
											label: "path",
											expr: &oneOrMoreExpr{
												pos: position{line: 2843, col: 35, offset: 94051},
												expr: &choiceExpr{
													pos: position{line: 2843, col: 36, offset: 94052},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2851, col: 13, offset: 94316},
															run: (*parser).callonInlineImage20,
															expr: &labeledExpr{
																pos:   position{line: 2851, col: 13, offset: 94316},
																label: "elements",
																expr: &oneOrMoreExpr{
																	pos: position{line: 2851, col: 22, offset: 94325},
																	expr: &choiceExpr{
																		pos: position{line: 2852, col: 5, offset: 94331},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2852, col: 5, offset: 94331},
																				run: (*parser).callonInlineImage24,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2852, col: 5, offset: 94331},
																					expr: &charClassMatcher{
																						pos:        position{line: 2852, col: 6, offset: 94332},
																						val:        "[^\\r\\n[]�&<>{ ]",
																						chars:      []rune{'\r', '\n', '[', ']', '�', '&', '<', '>', '{', ' '},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 449, col: 5, offset: 14443},
																				run: (*parser).callonInlineImage27,
																				expr: &seqExpr{
																					pos: position{line: 449, col: 5, offset: 14443},
																					exprs: []interface{}{
																						&andCodeExpr{
																							pos: position{line: 449, col: 5, offset: 14443},
																							run: (*parser).callonInlineImage29,
																						},
																						&labeledExpr{
																							pos:   position{line: 452, col: 5, offset: 14507},
																							label: "element",
																							expr: &choiceExpr{
																								pos: position{line: 452, col: 14, offset: 14516},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 463, col: 25, offset: 14978},
																										run: (*parser).callonInlineImage32,
																										expr: &seqExpr{
																											pos: position{line: 463, col: 25, offset: 14978},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 463, col: 25, offset: 14978},
																													val:        "{counter:",
																													ignoreCase: false,
																													want:       "\"{counter:\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 463, col: 37, offset: 14990},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 118, col: 18, offset: 3399},
																														run: (*parser).callonInlineImage36,
																														expr: &seqExpr{
																															pos: position{line: 118, col: 18, offset: 3399},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 118, col: 18, offset: 3399},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 118, col: 28, offset: 3409},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 118, col: 29, offset: 3410},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 463, col: 56, offset: 15009},
																													label: "start",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 463, col: 62, offset: 15015},
																														expr: &actionExpr{
																															pos: position{line: 471, col: 17, offset: 15278},
																															run: (*parser).callonInlineImage43,
																															expr: &seqExpr{
																																pos: position{line: 471, col: 17, offset: 15278},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 471, col: 17, offset: 15278},
																																		val:        ":",
																																		ignoreCase: false,
																																		want:       "\":\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 471, col: 21, offset: 15282},
																																		label: "start",
																																		expr: &choiceExpr{
																																			pos: position{line: 471, col: 28, offset: 15289},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 471, col: 28, offset: 15289},
																																					run: (*parser).callonInlineImage48,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 471, col: 28, offset: 15289},
																																						val:        "[A-Za-z]",
																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 473, col: 9, offset: 15343},
																																					run: (*parser).callonInlineImage50,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 473, col: 9, offset: 15343},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 473, col: 9, offset: 15343},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 463, col: 78, offset: 15031},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 467, col: 25, offset: 15133},
																										run: (*parser).callonInlineImage54,
																										expr: &seqExpr{
																											pos: position{line: 467, col: 25, offset: 15133},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 467, col: 25, offset: 15133},
																													val:        "{counter2:",
																													ignoreCase: false,
																													want:       "\"{counter2:\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 467, col: 38, offset: 15146},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 118, col: 18, offset: 3399},
																														run: (*parser).callonInlineImage58,
																														expr: &seqExpr{
																															pos: position{line: 118, col: 18, offset: 3399},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 118, col: 18, offset: 3399},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 118, col: 28, offset: 3409},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 118, col: 29, offset: 3410},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 467, col: 57, offset: 15165},
																													label: "start",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 467, col: 63, offset: 15171},
																														expr: &actionExpr{
																															pos: position{line: 471, col: 17, offset: 15278},
																															run: (*parser).callonInlineImage65,
																															expr: &seqExpr{
																																pos: position{line: 471, col: 17, offset: 15278},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 471, col: 17, offset: 15278},
																																		val:        ":",
																																		ignoreCase: false,
																																		want:       "\":\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 471, col: 21, offset: 15282},
																																		label: "start",
																																		expr: &choiceExpr{
																																			pos: position{line: 471, col: 28, offset: 15289},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 471, col: 28, offset: 15289},
																																					run: (*parser).callonInlineImage70,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 471, col: 28, offset: 15289},
																																						val:        "[A-Za-z]",
																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 473, col: 9, offset: 15343},
																																					run: (*parser).callonInlineImage72,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 473, col: 9, offset: 15343},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 473, col: 9, offset: 15343},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 467, col: 79, offset: 15187},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 456, col: 31, offset: 14633},
																										run: (*parser).callonInlineImage76,
																										expr: &seqExpr{
																											pos: position{line: 456, col: 31, offset: 14633},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 456, col: 31, offset: 14633},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 456, col: 35, offset: 14637},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 118, col: 18, offset: 3399},
																														run: (*parser).callonInlineImage80,
																														expr: &seqExpr{
																															pos: position{line: 118, col: 18, offset: 3399},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 118, col: 18, offset: 3399},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 118, col: 28, offset: 3409},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 118, col: 29, offset: 3410},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 456, col: 54, offset: 14656},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2587, col: 5, offset: 86026},
																				run: (*parser).callonInlineImage86,
																				expr: &seqExpr{
																					pos: position{line: 2587, col: 5, offset: 86026},
																					exprs: []interface{}{
																						&andCodeExpr{
																							pos: position{line: 2587, col: 5, offset: 86026},
																							run: (*parser).callonInlineImage88,
																						},
																						&labeledExpr{
																							pos:   position{line: 2590, col: 5, offset: 86097},
																							label: "element",
																							expr: &choiceExpr{
																								pos: position{line: 2592, col: 9, offset: 86195},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2592, col: 9, offset: 86195},
																										run: (*parser).callonInlineImage91,
																										expr: &choiceExpr{
																											pos: position{line: 491, col: 27, offset: 15997},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 491, col: 27, offset: 15997},
																													run: (*parser).callonInlineImage93,
																													expr: &seqExpr{
																														pos: position{line: 491, col: 27, offset: 15997},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 491, col: 27, offset: 15997},
																																val:        "<<",
																																ignoreCase: false,
																																want:       "\"<<\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 491, col: 32, offset: 16002},
																																label: "id",
																																expr: &actionExpr{
																																	pos: position{line: 2866, col: 7, offset: 94768},
																																	run: (*parser).callonInlineImage97,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 2866, col: 7, offset: 94768},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2866, col: 7, offset: 94768},
																																			val:        "[^[]<>,]",
																																			chars:      []rune{'[', ']', '<', '>', ','},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 491, col: 40, offset: 16010},
																																expr: &choiceExpr{
																																	pos: position{line: 2878, col: 10, offset: 95044},
																																	alternatives: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2878, col: 10, offset: 95044},
																																			val:        " ",
																																			ignoreCase: false,
																																			want:       "\" \"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 2878, col: 16, offset: 95050},
																																			run: (*parser).callonInlineImage103,
																																			expr: &litMatcher{
																																				pos:        position{line: 2878, col: 16, offset: 95050},
																																				val:        "\t",
																																				ignoreCase: false,
																																				want:       "\"\\t\"",
																																			},
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 491, col: 47, offset: 16017},
																																val:        ",",
																																ignoreCase: false,
																																want:       "\",\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 491, col: 51, offset: 16021},
																																label: "label",
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 501, col: 24, offset: 16434},
																																	expr: &choiceExpr{
																																		pos: position{line: 502, col: 5, offset: 16440},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 502, col: 6, offset: 16441},
																																				run: (*parser).callonInlineImage109,
																																				expr: &seqExpr{
																																					pos: position{line: 502, col: 6, offset: 16441},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 502, col: 6, offset: 16441},
																																							val:        "[0-9\\pL]",
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&oneOrMoreExpr{
																																							pos: position{line: 502, col: 14, offset: 16449},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 502, col: 14, offset: 16449},
																																								val:        "[^\\r\\n{<>]",
																																								chars:      []rune{'\r', '\n', '{', '<', '>'},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 449, col: 5, offset: 14443},
																																				run: (*parser).callonInlineImage114,
																																				expr: &seqExpr{
																																					pos: position{line: 449, col: 5, offset: 14443},
																																					exprs: []interface{}{
																																						&andCodeExpr{
																																							pos: position{line: 449, col: 5, offset: 14443},
																																							run: (*parser).callonInlineImage116,
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 452, col: 5, offset: 14507},
																																							label: "element",
																																							expr: &choiceExpr{
																																								pos: position{line: 452, col: 14, offset: 14516},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 463, col: 25, offset: 14978},
																																										run: (*parser).callonInlineImage119,
																																										expr: &seqExpr{
																																											pos: position{line: 463, col: 25, offset: 14978},
																																											exprs: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 463, col: 25, offset: 14978},
																																													val:        "{counter:",
																																													ignoreCase: false,
																																													want:       "\"{counter:\"",
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 463, col: 37, offset: 14990},
																																													label: "name",
																																													expr: &actionExpr{
																																														pos: position{line: 118, col: 18, offset: 3399},
																																														run: (*parser).callonInlineImage123,
																																														expr: &seqExpr{
																																															pos: position{line: 118, col: 18, offset: 3399},
																																															exprs: []interface{}{
																																																&charClassMatcher{
																																																	pos:        position{line: 118, col: 18, offset: 3399},
																																																	val:        "[_0-9\\pL]",
																																																	chars:      []rune{'_'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																																&zeroOrMoreExpr{
																																																	pos: position{line: 118, col: 28, offset: 3409},
																																																	expr: &charClassMatcher{
																																																		pos:        position{line: 118, col: 29, offset: 3410},
																																																		val:        "[-0-9\\pL]",
																																																		chars:      []rune{'-'},
																																																		ranges:     []rune{'0', '9'},
																																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																																		ignoreCase: false,
																																																		inverted:   false,
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 463, col: 56, offset: 15009},
																																													label: "start",
																																													expr: &zeroOrOneExpr{
																																														pos: position{line: 463, col: 62, offset: 15015},
																																														expr: &actionExpr{
																																															pos: position{line: 471, col: 17, offset: 15278},
																																															run: (*parser).callonInlineImage130,
																																															expr: &seqExpr{
																																																pos: position{line: 471, col: 17, offset: 15278},
																																																exprs: []interface{}{
																																																	&litMatcher{
																																																		pos:        position{line: 471, col: 17, offset: 15278},
																																																		val:        ":",
																																																		ignoreCase: false,
																																																		want:       "\":\"",
																																																	},
																																																	&labeledExpr{
																																																		pos:   position{line: 471, col: 21, offset: 15282},
																																																		label: "start",
																																																		expr: &choiceExpr{
																																																			pos: position{line: 471, col: 28, offset: 15289},
																																																			alternatives: []interface{}{
																																																				&actionExpr{
																																																					pos: position{line: 471, col: 28, offset: 15289},
																																																					run: (*parser).callonInlineImage135,
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 471, col: 28, offset: 15289},
																																																						val:        "[A-Za-z]",
																																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																				&actionExpr{
																																																					pos: position{line: 473, col: 9, offset: 15343},
																																																					run: (*parser).callonInlineImage137,
																																																					expr: &oneOrMoreExpr{
																																																						pos: position{line: 473, col: 9, offset: 15343},
																																																						expr: &charClassMatcher{
																																																							pos:        position{line: 473, col: 9, offset: 15343},
																																																							val:        "[0-9]",
																																																							ranges:     []rune{'0', '9'},
																																																							ignoreCase: false,
																																																							inverted:   false,
																																																						},
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&litMatcher{
																																													pos:        position{line: 463, col: 78, offset: 15031},
																																													val:        "}",
																																													ignoreCase: false,
																																													want:       "\"}\"",
																																												},
																																											},
																																										},
																																									},
																																									&actionExpr{
																																										pos: position{line: 467, col: 25, offset: 15133},
																																										run: (*parser).callonInlineImage141,
																																										expr: &seqExpr{
																																											pos: position{line: 467, col: 25, offset: 15133},
																																											exprs: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 467, col: 25, offset: 15133},
																																													val:        "{counter2:",
																																													ignoreCase: false,
																																													want:       "\"{counter2:\"",
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 467, col: 38, offset: 15146},
																																													label: "name",
																																													expr: &actionExpr{
																																														pos: position{line: 118, col: 18, offset: 3399},
																																														run: (*parser).callonInlineImage145,
																																														expr: &seqExpr{
																																															pos: position{line: 118, col: 18, offset: 3399},
																																															exprs: []interface{}{
																																																&charClassMatcher{
																																																	pos:        position{line: 118, col: 18, offset: 3399},
																																																	val:        "[_0-9\\pL]",
																																																	chars:      []rune{'_'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																																&zeroOrMoreExpr{
																																																	pos: position{line: 118, col: 28, offset: 3409},
																																																	expr: &charClassMatcher{
																																																		pos:        position{line: 118, col: 29, offset: 3410},
																																																		val:        "[-0-9\\pL]",
																																																		chars:      []rune{'-'},
																																																		ranges:     []rune{'0', '9'},
																																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																																		ignoreCase: false,
																																																		inverted:   false,
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 467, col: 57, offset: 15165},
																																													label: "start",
																																													expr: &zeroOrOneExpr{
																																														pos: position{line: 467, col: 63, offset: 15171},
																																														expr: &actionExpr{
																																															pos: position{line: 471, col: 17, offset: 15278},
																																															run: (*parser).callonInlineImage152,
																																															expr: &seqExpr{
																																																pos: position{line: 471, col: 17, offset: 15278},
																																																exprs: []interface{}{
																																																	&litMatcher{
																																																		pos:        position{line: 471, col: 17, offset: 15278},
																																																		val:        ":",
																																																		ignoreCase: false,
																																																		want:       "\":\"",
																																																	},
																																																	&labeledExpr{
																																																		pos:   position{line: 471, col: 21, offset: 15282},
																																																		label: "start",
																																																		expr: &choiceExpr{
																																																			pos: position{line: 471, col: 28, offset: 15289},
																																																			alternatives: []interface{}{
																																																				&actionExpr{
																																																					pos: position{line: 471, col: 28, offset: 15289},
																																																					run: (*parser).callonInlineImage157,
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 471, col: 28, offset: 15289},
																																																						val:        "[A-Za-z]",
																																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																				&actionExpr{
																																																					pos: position{line: 473, col: 9, offset: 15343},
																																																					run: (*parser).callonInlineImage159,
																																																					expr: &oneOrMoreExpr{
																																																						pos: position{line: 473, col: 9, offset: 15343},
																																																						expr: &charClassMatcher{
																																																							pos:        position{line: 473, col: 9, offset: 15343},
																																																							val:        "[0-9]",
																																																							ranges:     []rune{'0', '9'},
																																																							ignoreCase: false,
																																																							inverted:   false,
																																																						},
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&litMatcher{
																																													pos:        position{line: 467, col: 79, offset: 15187},
																																													val:        "}",
																																													ignoreCase: false,
																																													want:       "\"}\"",
																																												},
																																											},
																																										},
																																									},
																																									&actionExpr{
																																										pos: position{line: 456, col: 31, offset: 14633},
																																										run: (*parser).callonInlineImage163,
																																										expr: &seqExpr{
																																											pos: position{line: 456, col: 31, offset: 14633},
																																											exprs: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 456, col: 31, offset: 14633},
																																													val:        "{",
																																													ignoreCase: false,
																																													want:       "\"{\"",
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 456, col: 35, offset: 14637},
																																													label: "name",
																																													expr: &actionExpr{
																																														pos: position{line: 118, col: 18, offset: 3399},
																																														run: (*parser).callonInlineImage167,
																																														expr: &seqExpr{
																																															pos: position{line: 118, col: 18, offset: 3399},
																																															exprs: []interface{}{
																																																&charClassMatcher{
																																																	pos:        position{line: 118, col: 18, offset: 3399},
																																																	val:        "[_0-9\\pL]",
																																																	chars:      []rune{'_'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																																&zeroOrMoreExpr{
																																																	pos: position{line: 118, col: 28, offset: 3409},
																																																	expr: &charClassMatcher{
																																																		pos:        position{line: 118, col: 29, offset: 3410},
																																																		val:        "[-0-9\\pL]",
																																																		chars:      []rune{'-'},
																																																		ranges:     []rune{'0', '9'},
																																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																																		ignoreCase: false,
																																																		inverted:   false,
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&litMatcher{
																																													pos:        position{line: 456, col: 54, offset: 14656},
																																													val:        "}",
																																													ignoreCase: false,
																																													want:       "\"}\"",
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 506, col: 8, offset: 16673},
																																				run: (*parser).callonInlineImage173,
																																				expr: &litMatcher{
																																					pos:        position{line: 506, col: 8, offset: 16673},
																																					val:        "{",
																																					ignoreCase: false,
																																					want:       "\"{\"",
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 491, col: 79, offset: 16049},
																																val:        ">>",
																																ignoreCase: false,
																																want:       "\">>\"",
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 493, col: 9, offset: 16122},
																													run: (*parser).callonInlineImage176,
																													expr: &seqExpr{
																														pos: position{line: 493, col: 9, offset: 16122},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 493, col: 9, offset: 16122},
																																val:        "<<",
																																ignoreCase: false,
																																want:       "\"<<\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 493, col: 14, offset: 16127},
																																label: "id",
																																expr: &actionExpr{
																																	pos: position{line: 2866, col: 7, offset: 94768},
																																	run: (*parser).callonInlineImage180,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 2866, col: 7, offset: 94768},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2866, col: 7, offset: 94768},
																																			val:        "[^[]<>,]",
																																			chars:      []rune{'[', ']', '<', '>', ','},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 493, col: 22, offset: 16135},
																																val:        ">>",
																																ignoreCase: false,
																																want:       "\">>\"",
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2595, col: 11, offset: 86299},
																										run: (*parser).callonInlineImage184,
																										expr: &charClassMatcher{
																											pos:        position{line: 2595, col: 12, offset: 86300},
																											val:        "[<>&]",
																											chars:      []rune{'<', '>', '&'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2858, col: 7, offset: 94556},
																				run: (*parser).callonInlineImage186,
																				expr: &litMatcher{
																					pos:        position{line: 2858, col: 7, offset: 94556},
																					val:        "{",
																					ignoreCase: false,
																					want:       "\"{\"",
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 947, col: 23, offset: 29896},
															run: (*parser).callonInlineImage188,
															expr: &seqExpr{
																pos: position{line: 947, col: 23, offset: 29896},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 945, col: 32, offset: 29864},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 947, col: 51, offset: 29924},
																		label: "ref",
																		expr: &actionExpr{
																			pos: position{line: 947, col: 56, offset: 29929},
																			run: (*parser).callonInlineImage192,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 947, col: 56, offset: 29929},
																				expr: &charClassMatcher{
																					pos:        position{line: 947, col: 56, offset: 29929},
																					val:        "[0-9]",
																					ranges:     []rune{'0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 945, col: 32, offset: 29864},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1167, col: 46, offset: 37638},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1167, col: 64, offset: 37656},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 1174, col: 1, offset: 38086},
			expr: &actionExpr{
				pos: position{line: 1174, col: 15, offset: 38100},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 1174, col: 15, offset: 38100},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1174, col: 15, offset: 38100},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 1174, col: 23, offset: 38108},
							label: "icon",
							expr: &actionExpr{
								pos: position{line: 1174, col: 29, offset: 38114},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1174, col: 29, offset: 38114},
									expr: &charClassMatcher{
										pos:        position{line: 1174, col: 29, offset: 38114},
										val:        "[_-0-9\\pL]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1174, col: 73, offset: 38158},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1174, col: 85, offset: 38170},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1181, col: 1, offset: 38536},
			expr: &choiceExpr{
				pos: position{line: 1181, col: 19, offset: 38554},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1181, col: 19, offset: 38554},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1181, col: 19, offset: 38554},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1181, col: 19, offset: 38554},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1181, col: 32, offset: 38567},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1181, col: 41, offset: 38576},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1181, col: 58, offset: 38593},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1183, col: 9, offset: 38653},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1183, col: 9, offset: 38653},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1183, col: 9, offset: 38653},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 1183, col: 21, offset: 38665},
									label: "ref",
									expr: &actionExpr{
										pos: position{line: 2801, col: 14, offset: 92593},
										run: (*parser).callonInlineFootnote12,
										expr: &oneOrMoreExpr{
											pos: position{line: 2801, col: 14, offset: 92593},
											expr: &charClassMatcher{
												pos:        position{line: 2801, col: 14, offset: 92593},
												val:        "[0-9\\pL]",
												ranges:     []rune{'0', '9'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1183, col: 39, offset: 38683},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 1183, col: 43, offset: 38687},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 1183, col: 51, offset: 38695},
										expr: &ruleRefExpr{
											pos:  position{line: 1183, col: 52, offset: 38696},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1183, col: 70, offset: 38714},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1189, col: 1, offset: 38863},
			expr: &actionExpr{
				pos: position{line: 1189, col: 20, offset: 38882},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1189, col: 20, offset: 38882},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1189, col: 29, offset: 38891},
						expr: &seqExpr{
							pos: position{line: 1189, col: 30, offset: 38892},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1189, col: 30, offset: 38892},
									expr: &litMatcher{
										pos:        position{line: 1189, col: 31, offset: 38893},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1189, col: 35, offset: 38897},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1221, col: 1, offset: 40586},
			expr: &choiceExpr{
				pos: position{line: 1221, col: 21, offset: 40606},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1221, col: 21, offset: 40606},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1221, col: 21, offset: 40606},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1221, col: 21, offset: 40606},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1221, col: 30, offset: 40615},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1221, col: 38, offset: 40623},
										expr: &actionExpr{
											pos: position{line: 1227, col: 30, offset: 40949},
											run: (*parser).callonPassthroughMacro7,
											expr: &charClassMatcher{
												pos:        position{line: 1227, col: 30, offset: 40949},
												val:        "[^]]",
												chars:      []rune{']'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1221, col: 67, offset: 40652},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1223, col: 9, offset: 40756},
						run: (*parser).callonPassthroughMacro10,
						expr: &seqExpr{
							pos: position{line: 1223, col: 9, offset: 40756},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1223, col: 9, offset: 40756},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 1223, col: 19, offset: 40766},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1223, col: 27, offset: 40774},
										expr: &choiceExpr{
											pos: position{line: 1223, col: 28, offset: 40775},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1223, col: 28, offset: 40775},
													name: "QuotedText",
												},
												&actionExpr{
													pos: position{line: 1227, col: 30, offset: 40949},
													run: (*parser).callonPassthroughMacro17,
													expr: &charClassMatcher{
														pos:        position{line: 1227, col: 30, offset: 40949},
														val:        "[^]]",
														chars:      []rune{']'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1223, col: 69, offset: 40816},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 1234, col: 1, offset: 41205},
			expr: &choiceExpr{
				pos: position{line: 1234, col: 9, offset: 41213},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1234, col: 9, offset: 41213},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1234, col: 24, offset: 41228},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1237, col: 1, offset: 41309},
			expr: &actionExpr{
				pos: position{line: 1237, col: 17, offset: 41325},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1237, col: 17, offset: 41325},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1237, col: 17, offset: 41325},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1237, col: 25, offset: 41333},
							label: "url",
							expr: &actionExpr{
								pos: position{line: 2843, col: 13, offset: 94029},
								run: (*parser).callonRelativeLink5,
								expr: &seqExpr{
									pos: position{line: 2843, col: 13, offset: 94029},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 2843, col: 13, offset: 94029},
											label: "scheme",
											expr: &zeroOrOneExpr{
												pos: position{line: 2843, col: 20, offset: 94036},
												expr: &choiceExpr{
													pos: position{line: 2864, col: 11, offset: 94704},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2864, col: 11, offset: 94704},
															val:        "http://",
															ignoreCase: false,
															want:       "\"http://\"",
														},
														&litMatcher{
															pos:        position{line: 2864, col: 23, offset: 94716},
															val:        "https://",
															ignoreCase: false,
															want:       "\"https://\"",
														},
														&litMatcher{
															pos:        position{line: 2864, col: 36, offset: 94729},
															val:        "ftp://",
															ignoreCase: false,
															want:       "\"ftp://\"",
														},
														&litMatcher{
															pos:        position{line: 2864, col: 47, offset: 94740},
															val:        "irc://",
															ignoreCase: false,
															want:       "\"irc://\"",
														},
														&litMatcher{
															pos:        position{line: 2864, col: 58, offset: 94751},
															val:        "mailto:",
															ignoreCase: false,
															want:       "\"mailto:\"",
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 2843, col: 30, offset: 94046},
											label: "path",
											expr: &oneOrMoreExpr{
												pos: position{line: 2843, col: 35, offset: 94051},
												expr: &choiceExpr{
													pos: position{line: 2843, col: 36, offset: 94052},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2851, col: 13, offset: 94316},
															run: (*parser).callonRelativeLink18,
															expr: &labeledExpr{
																pos:   position{line: 2851, col: 13, offset: 94316},
																label: "elements",
																expr: &oneOrMoreExpr{
																	pos: position{line: 2851, col: 22, offset: 94325},
																	expr: &choiceExpr{
																		pos: position{line: 2852, col: 5, offset: 94331},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2852, col: 5, offset: 94331},
																				run: (*parser).callonRelativeLink22,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2852, col: 5, offset: 94331},
																					expr: &charClassMatcher{
																						pos:        position{line: 2852, col: 6, offset: 94332},
																						val:        "[^\\r\\n[]�&<>{ ]",
																						chars:      []rune{'\r', '\n', '[', ']', '�', '&', '<', '>', '{', ' '},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 449, col: 5, offset: 14443},
																				run: (*parser).callonRelativeLink25,
																				expr: &seqExpr{
																					pos: position{line: 449, col: 5, offset: 14443},
																					exprs: []interface{}{
																						&andCodeExpr{
																							pos: position{line: 449, col: 5, offset: 14443},
																							run: (*parser).callonRelativeLink27,
																						},
																						&labeledExpr{
																							pos:   position{line: 452, col: 5, offset: 14507},
																							label: "element",
																							expr: &choiceExpr{
																								pos: position{line: 452, col: 14, offset: 14516},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 463, col: 25, offset: 14978},
																										run: (*parser).callonRelativeLink30,
																										expr: &seqExpr{
																											pos: position{line: 463, col: 25, offset: 14978},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 463, col: 25, offset: 14978},
																													val:        "{counter:",
																													ignoreCase: false,
																													want:       "\"{counter:\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 463, col: 37, offset: 14990},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 118, col: 18, offset: 3399},
																														run: (*parser).callonRelativeLink34,
																														expr: &seqExpr{
																															pos: position{line: 118, col: 18, offset: 3399},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 118, col: 18, offset: 3399},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 118, col: 28, offset: 3409},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 118, col: 29, offset: 3410},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 463, col: 56, offset: 15009},
																													label: "start",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 463, col: 62, offset: 15015},
																														expr: &actionExpr{
																															pos: position{line: 471, col: 17, offset: 15278},
																															run: (*parser).callonRelativeLink41,
																															expr: &seqExpr{
																																pos: position{line: 471, col: 17, offset: 15278},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 471, col: 17, offset: 15278},
																																		val:        ":",
																																		ignoreCase: false,
																																		want:       "\":\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 471, col: 21, offset: 15282},
																																		label: "start",
																																		expr: &choiceExpr{
																																			pos: position{line: 471, col: 28, offset: 15289},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 471, col: 28, offset: 15289},
																																					run: (*parser).callonRelativeLink46,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 471, col: 28, offset: 15289},
																																						val:        "[A-Za-z]",
																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 473, col: 9, offset: 15343},
																																					run: (*parser).callonRelativeLink48,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 473, col: 9, offset: 15343},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 473, col: 9, offset: 15343},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 463, col: 78, offset: 15031},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 467, col: 25, offset: 15133},
																										run: (*parser).callonRelativeLink52,
																										expr: &seqExpr{
																											pos: position{line: 467, col: 25, offset: 15133},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 467, col: 25, offset: 15133},
																													val:        "{counter2:",
																													ignoreCase: false,
																													want:       "\"{counter2:\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 467, col: 38, offset: 15146},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 118, col: 18, offset: 3399},
																														run: (*parser).callonRelativeLink56,
																														expr: &seqExpr{
																															pos: position{line: 118, col: 18, offset: 3399},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 118, col: 18, offset: 3399},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 118, col: 28, offset: 3409},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 118, col: 29, offset: 3410},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 467, col: 57, offset: 15165},
																													label: "start",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 467, col: 63, offset: 15171},
																														expr: &actionExpr{
																															pos: position{line: 471, col: 17, offset: 15278},
																															run: (*parser).callonRelativeLink63,
																															expr: &seqExpr{
																																pos: position{line: 471, col: 17, offset: 15278},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 471, col: 17, offset: 15278},
																																		val:        ":",
																																		ignoreCase: false,
																																		want:       "\":\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 471, col: 21, offset: 15282},
																																		label: "start",
																																		expr: &choiceExpr{
																																			pos: position{line: 471, col: 28, offset: 15289},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 471, col: 28, offset: 15289},
																																					run: (*parser).callonRelativeLink68,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 471, col: 28, offset: 15289},
																																						val:        "[A-Za-z]",
																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 473, col: 9, offset: 15343},
																																					run: (*parser).callonRelativeLink70,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 473, col: 9, offset: 15343},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 473, col: 9, offset: 15343},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 467, col: 79, offset: 15187},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 456, col: 31, offset: 14633},
																										run: (*parser).callonRelativeLink74,
																										expr: &seqExpr{
																											pos: position{line: 456, col: 31, offset: 14633},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 456, col: 31, offset: 14633},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 456, col: 35, offset: 14637},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 118, col: 18, offset: 3399},
																														run: (*parser).callonRelativeLink78,
																														expr: &seqExpr{
																															pos: position{line: 118, col: 18, offset: 3399},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 118, col: 18, offset: 3399},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 118, col: 28, offset: 3409},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 118, col: 29, offset: 3410},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 456, col: 54, offset: 14656},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2587, col: 5, offset: 86026},
																				run: (*parser).callonRelativeLink84,
																				expr: &seqExpr{
																					pos: position{line: 2587, col: 5, offset: 86026},
																					exprs: []interface{}{
																						&andCodeExpr{
																							pos: position{line: 2587, col: 5, offset: 86026},
																							run: (*parser).callonRelativeLink86,
																						},
																						&labeledExpr{
																							pos:   position{line: 2590, col: 5, offset: 86097},
																							label: "element",
																							expr: &choiceExpr{
																								pos: position{line: 2592, col: 9, offset: 86195},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2592, col: 9, offset: 86195},
																										run: (*parser).callonRelativeLink89,
																										expr: &choiceExpr{
																											pos: position{line: 491, col: 27, offset: 15997},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 491, col: 27, offset: 15997},
																													run: (*parser).callonRelativeLink91,
																													expr: &seqExpr{
																														pos: position{line: 491, col: 27, offset: 15997},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 491, col: 27, offset: 15997},
																																val:        "<<",
																																ignoreCase: false,
																																want:       "\"<<\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 491, col: 32, offset: 16002},
																																label: "id",
																																expr: &actionExpr{
																																	pos: position{line: 2866, col: 7, offset: 94768},
																																	run: (*parser).callonRelativeLink95,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 2866, col: 7, offset: 94768},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2866, col: 7, offset: 94768},
																																			val:        "[^[]<>,]",
																																			chars:      []rune{'[', ']', '<', '>', ','},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 491, col: 40, offset: 16010},
																																expr: &choiceExpr{
																																	pos: position{line: 2878, col: 10, offset: 95044},
																																	alternatives: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2878, col: 10, offset: 95044},
																																			val:        " ",
																																			ignoreCase: false,
																																			want:       "\" \"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 2878, col: 16, offset: 95050},
																																			run: (*parser).callonRelativeLink101,
																																			expr: &litMatcher{
																																				pos:        position{line: 2878, col: 16, offset: 95050},
																																				val:        "\t",
																																				ignoreCase: false,
																																				want:       "\"\\t\"",
																																			},
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 491, col: 47, offset: 16017},
																																val:        ",",
																																ignoreCase: false,
																																want:       "\",\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 491, col: 51, offset: 16021},
																																label: "label",
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 501, col: 24, offset: 16434},
																																	expr: &choiceExpr{
																																		pos: position{line: 502, col: 5, offset: 16440},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 502, col: 6, offset: 16441},
																																				run: (*parser).callonRelativeLink107,
																																				expr: &seqExpr{
																																					pos: position{line: 502, col: 6, offset: 16441},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 502, col: 6, offset: 16441},
																																							val:        "[0-9\\pL]",
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&oneOrMoreExpr{
																																							pos: position{line: 502, col: 14, offset: 16449},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 502, col: 14, offset: 16449},
																																								val:        "[^\\r\\n{<>]",
																																								chars:      []rune{'\r', '\n', '{', '<', '>'},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 449, col: 5, offset: 14443},
																																				run: (*parser).callonRelativeLink112,
																																				expr: &seqExpr{
																																					pos: position{line: 449, col: 5, offset: 14443},
																																					exprs: []interface{}{
																																						&andCodeExpr{
																																							pos: position{line: 449, col: 5, offset: 14443},
																																							run: (*parser).callonRelativeLink114,
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 452, col: 5, offset: 14507},
																																							label: "element",
																																							expr: &choiceExpr{
																																								pos: position{line: 452, col: 14, offset: 14516},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 463, col: 25, offset: 14978},
																																										run: (*parser).callonRelativeLink117,
																																										expr: &seqExpr{
																																											pos: position{line: 463, col: 25, offset: 14978},
																																											exprs: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 463, col: 25, offset: 14978},
																																													val:        "{counter:",
																																													ignoreCase: false,
																																													want:       "\"{counter:\"",
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 463, col: 37, offset: 14990},
																																													label: "name",
																																													expr: &actionExpr{
																																														pos: position{line: 118, col: 18, offset: 3399},
																																														run: (*parser).callonRelativeLink121,
																																														expr: &seqExpr{
																																															pos: position{line: 118, col: 18, offset: 3399},
																																															exprs: []interface{}{
																																																&charClassMatcher{
																																																	pos:        position{line: 118, col: 18, offset: 3399},
																																																	val:        "[_0-9\\pL]",
																																																	chars:      []rune{'_'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																																&zeroOrMoreExpr{
																																																	pos: position{line: 118, col: 28, offset: 3409},
																																																	expr: &charClassMatcher{
																																																		pos:        position{line: 118, col: 29, offset: 3410},
																																																		val:        "[-0-9\\pL]",
																																																		chars:      []rune{'-'},
																																																		ranges:     []rune{'0', '9'},
																																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																																		ignoreCase: false,
																																																		inverted:   false,
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 463, col: 56, offset: 15009},
																																													label: "start",
																																													expr: &zeroOrOneExpr{
																																														pos: position{line: 463, col: 62, offset: 15015},
																																														expr: &actionExpr{
																																															pos: position{line: 471, col: 17, offset: 15278},
																																															run: (*parser).callonRelativeLink128,
																																															expr: &seqExpr{
																																																pos: position{line: 471, col: 17, offset: 15278},
																																																exprs: []interface{}{
																																																	&litMatcher{
																																																		pos:        position{line: 471, col: 17, offset: 15278},
																																																		val:        ":",
																																																		ignoreCase: false,
																																																		want:       "\":\"",
																																																	},
																																																	&labeledExpr{
																																																		pos:   position{line: 471, col: 21, offset: 15282},
																																																		label: "start",
																																																		expr: &choiceExpr{
																																																			pos: position{line: 471, col: 28, offset: 15289},
																																																			alternatives: []interface{}{
																																																				&actionExpr{
																																																					pos: position{line: 471, col: 28, offset: 15289},
																																																					run: (*parser).callonRelativeLink133,
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 471, col: 28, offset: 15289},
																																																						val:        "[A-Za-z]",
																																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																				&actionExpr{
																																																					pos: position{line: 473, col: 9, offset: 15343},
																																																					run: (*parser).callonRelativeLink135,
																																																					expr: &oneOrMoreExpr{
																																																						pos: position{line: 473, col: 9, offset: 15343},
																																																						expr: &charClassMatcher{
																																																							pos:        position{line: 473, col: 9, offset: 15343},
																																																							val:        "[0-9]",
																																																							ranges:     []rune{'0', '9'},
																																																							ignoreCase: false,
																																																							inverted:   false,
																																																						},
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&litMatcher{
																																													pos:        position{line: 463, col: 78, offset: 15031},
																																													val:        "}",
																																													ignoreCase: false,
																																													want:       "\"}\"",
																																												},
																																											},
																																										},
																																									},
																																									&actionExpr{
																																										pos: position{line: 467, col: 25, offset: 15133},
																																										run: (*parser).callonRelativeLink139,
																																										expr: &seqExpr{
																																											pos: position{line: 467, col: 25, offset: 15133},
																																											exprs: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 467, col: 25, offset: 15133},
																																													val:        "{counter2:",
																																													ignoreCase: false,
																																													want:       "\"{counter2:\"",
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 467, col: 38, offset: 15146},
																																													label: "name",
																																													expr: &actionExpr{
																																														pos: position{line: 118, col: 18, offset: 3399},
																																														run: (*parser).callonRelativeLink143,
																																														expr: &seqExpr{
																																															pos: position{line: 118, col: 18, offset: 3399},
																																															exprs: []interface{}{
																																																&charClassMatcher{
																																																	pos:        position{line: 118, col: 18, offset: 3399},
																																																	val:        "[_0-9\\pL]",
																																																	chars:      []rune{'_'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																																&zeroOrMoreExpr{
																																																	pos: position{line: 118, col: 28, offset: 3409},
																																																	expr: &charClassMatcher{
																																																		pos:        position{line: 118, col: 29, offset: 3410},
																																																		val:        "[-0-9\\pL]",
																																																		chars:      []rune{'-'},
																																																		ranges:     []rune{'0', '9'},
																																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																																		ignoreCase: false,
																																																		inverted:   false,
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 467, col: 57, offset: 15165},
																																													label: "start",
																																													expr: &zeroOrOneExpr{
																																														pos: position{line: 467, col: 63, offset: 15171},
																																														expr: &actionExpr{
																																															pos: position{line: 471, col: 17, offset: 15278},
																																															run: (*parser).callonRelativeLink150,
																																															expr: &seqExpr{
																																																pos: position{line: 471, col: 17, offset: 15278},
																																																exprs: []interface{}{
																																																	&litMatcher{
																																																		pos:        position{line: 471, col: 17, offset: 15278},
																																																		val:        ":",
																																																		ignoreCase: false,
																																																		want:       "\":\"",
																																																	},
																																																	&labeledExpr{
																																																		pos:   position{line: 471, col: 21, offset: 15282},
																																																		label: "start",
																																																		expr: &choiceExpr{
																																																			pos: position{line: 471, col: 28, offset: 15289},
																																																			alternatives: []interface{}{
																																																				&actionExpr{
																																																					pos: position{line: 471, col: 28, offset: 15289},
																																																					run: (*parser).callonRelativeLink155,
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 471, col: 28, offset: 15289},
																																																						val:        "[A-Za-z]",
																																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																				&actionExpr{
																																																					pos: position{line: 473, col: 9, offset: 15343},
																																																					run: (*parser).callonRelativeLink157,
																																																					expr: &oneOrMoreExpr{
																																																						pos: position{line: 473, col: 9, offset: 15343},
																																																						expr: &charClassMatcher{
																																																							pos:        position{line: 473, col: 9, offset: 15343},
																																																							val:        "[0-9]",
																																																							ranges:     []rune{'0', '9'},
																																																							ignoreCase: false,
																																																							inverted:   false,
																																																						},
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&litMatcher{
																																													pos:        position{line: 467, col: 79, offset: 15187},
																																													val:        "}",
																																													ignoreCase: false,
																																													want:       "\"}\"",
																																												},
																																											},
																																										},
																																									},
																																									&actionExpr{
																																										pos: position{line: 456, col: 31, offset: 14633},
																																										run: (*parser).callonRelativeLink161,
																																										expr: &seqExpr{
																																											pos: position{line: 456, col: 31, offset: 14633},
																																											exprs: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 456, col: 31, offset: 14633},
																																													val:        "{",
																																													ignoreCase: false,
																																													want:       "\"{\"",
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 456, col: 35, offset: 14637},
																																													label: "name",
																																													expr: &actionExpr{
																																														pos: position{line: 118, col: 18, offset: 3399},
																																														run: (*parser).callonRelativeLink165,
																																														expr: &seqExpr{
																																															pos: position{line: 118, col: 18, offset: 3399},
																																															exprs: []interface{}{
																																																&charClassMatcher{
																																																	pos:        position{line: 118, col: 18, offset: 3399},
																																																	val:        "[_0-9\\pL]",
																																																	chars:      []rune{'_'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																																&zeroOrMoreExpr{
																																																	pos: position{line: 118, col: 28, offset: 3409},
																																																	expr: &charClassMatcher{
																																																		pos:        position{line: 118, col: 29, offset: 3410},
																																																		val:        "[-0-9\\pL]",
																																																		chars:      []rune{'-'},
																																																		ranges:     []rune{'0', '9'},
																																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																																		ignoreCase: false,
																																																		inverted:   false,
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&litMatcher{
																																													pos:        position{line: 456, col: 54, offset: 14656},
																																													val:        "}",
																																													ignoreCase: false,
																																													want:       "\"}\"",
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 506, col: 8, offset: 16673},
																																				run: (*parser).callonRelativeLink171,
																																				expr: &litMatcher{
																																					pos:        position{line: 506, col: 8, offset: 16673},
																																					val:        "{",
																																					ignoreCase: false,
																																					want:       "\"{\"",
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 491, col: 79, offset: 16049},
																																val:        ">>",
																																ignoreCase: false,
																																want:       "\">>\"",
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 493, col: 9, offset: 16122},
																													run: (*parser).callonRelativeLink174,
																													expr: &seqExpr{
																														pos: position{line: 493, col: 9, offset: 16122},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 493, col: 9, offset: 16122},
																																val:        "<<",
																																ignoreCase: false,
																																want:       "\"<<\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 493, col: 14, offset: 16127},
																																label: "id",
																																expr: &actionExpr{
																																	pos: position{line: 2866, col: 7, offset: 94768},
																																	run: (*parser).callonRelativeLink178,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 2866, col: 7, offset: 94768},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2866, col: 7, offset: 94768},
																																			val:        "[^[]<>,]",
																																			chars:      []rune{'[', ']', '<', '>', ','},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 493, col: 22, offset: 16135},
																																val:        ">>",
																																ignoreCase: false,
																																want:       "\">>\"",
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2595, col: 11, offset: 86299},
																										run: (*parser).callonRelativeLink182,
																										expr: &charClassMatcher{
																											pos:        position{line: 2595, col: 12, offset: 86300},
																											val:        "[<>&]",
																											chars:      []rune{'<', '>', '&'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2858, col: 7, offset: 94556},
																				run: (*parser).callonRelativeLink184,
																				expr: &litMatcher{
																					pos:        position{line: 2858, col: 7, offset: 94556},
																					val:        "{",
																					ignoreCase: false,
																					want:       "\"{\"",
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 947, col: 23, offset: 29896},
															run: (*parser).callonRelativeLink186,
															expr: &seqExpr{
																pos: position{line: 947, col: 23, offset: 29896},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 945, col: 32, offset: 29864},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 947, col: 51, offset: 29924},
																		label: "ref",
																		expr: &actionExpr{
																			pos: position{line: 947, col: 56, offset: 29929},
																			run: (*parser).callonRelativeLink190,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 947, col: 56, offset: 29929},
																				expr: &charClassMatcher{
																					pos:        position{line: 947, col: 56, offset: 29929},
																					val:        "[0-9]",
																					ranges:     []rune{'0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 945, col: 32, offset: 29864},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1237, col: 40, offset: 41348},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1237, col: 58, offset: 41366},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1241, col: 1, offset: 41488},
			expr: &actionExpr{
				pos: position{line: 1241, col: 17, offset: 41504},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1241, col: 17, offset: 41504},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1241, col: 17, offset: 41504},
							label: "url",
							expr: &actionExpr{
								pos: position{line: 2847, col: 23, offset: 94178},
								run: (*parser).callonExternalLink4,
								expr: &seqExpr{
									pos: position{line: 2847, col: 23, offset: 94178},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 2847, col: 23, offset: 94178},
											label: "scheme",
											expr: &choiceExpr{
												pos: position{line: 2864, col: 11, offset: 94704},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2864, col: 11, offset: 94704},
														val:        "http://",
														ignoreCase: false,
														want:       "\"http://\"",
													},
													&litMatcher{
														pos:        position{line: 2864, col: 23, offset: 94716},
														val:        "https://",
														ignoreCase: false,
														want:       "\"https://\"",
													},
													&litMatcher{
														pos:        position{line: 2864, col: 36, offset: 94729},
														val:        "ftp://",
														ignoreCase: false,
														want:       "\"ftp://\"",
													},
													&litMatcher{
														pos:        position{line: 2864, col: 47, offset: 94740},
														val:        "irc://",
														ignoreCase: false,
														want:       "\"irc://\"",
													},
													&litMatcher{
														pos:        position{line: 2864, col: 58, offset: 94751},
														val:        "mailto:",
														ignoreCase: false,
														want:       "\"mailto:\"",
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 2847, col: 39, offset: 94194},
											label: "path",
											expr: &oneOrMoreExpr{
												pos: position{line: 2847, col: 44, offset: 94199},
												expr: &choiceExpr{
													pos: position{line: 2847, col: 45, offset: 94200},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2851, col: 13, offset: 94316},
															run: (*parser).callonExternalLink16,
															expr: &labeledExpr{
																pos:   position{line: 2851, col: 13, offset: 94316},
																label: "elements",
																expr: &oneOrMoreExpr{
																	pos: position{line: 2851, col: 22, offset: 94325},
																	expr: &choiceExpr{
																		pos: position{line: 2852, col: 5, offset: 94331},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2852, col: 5, offset: 94331},
																				run: (*parser).callonExternalLink20,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2852, col: 5, offset: 94331},
																					expr: &charClassMatcher{
																						pos:        position{line: 2852, col: 6, offset: 94332},
																						val:        "[^\\r\\n[]�&<>{ ]",
																						chars:      []rune{'\r', '\n', '[', ']', '�', '&', '<', '>', '{', ' '},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 449, col: 5, offset: 14443},
																				run: (*parser).callonExternalLink23,
																				expr: &seqExpr{
																					pos: position{line: 449, col: 5, offset: 14443},
																					exprs: []interface{}{
																						&andCodeExpr{
																							pos: position{line: 449, col: 5, offset: 14443},
																							run: (*parser).callonExternalLink25,
																						},
																						&labeledExpr{
																							pos:   position{line: 452, col: 5, offset: 14507},
																							label: "element",
																							expr: &choiceExpr{
																								pos: position{line: 452, col: 14, offset: 14516},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 463, col: 25, offset: 14978},
																										run: (*parser).callonExternalLink28,
																										expr: &seqExpr{
																											pos: position{line: 463, col: 25, offset: 14978},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 463, col: 25, offset: 14978},
																													val:        "{counter:",
																													ignoreCase: false,
																													want:       "\"{counter:\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 463, col: 37, offset: 14990},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 118, col: 18, offset: 3399},
																														run: (*parser).callonExternalLink32,
																														expr: &seqExpr{
																															pos: position{line: 118, col: 18, offset: 3399},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 118, col: 18, offset: 3399},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 118, col: 28, offset: 3409},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 118, col: 29, offset: 3410},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 463, col: 56, offset: 15009},
																													label: "start",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 463, col: 62, offset: 15015},
																														expr: &actionExpr{
																															pos: position{line: 471, col: 17, offset: 15278},
																															run: (*parser).callonExternalLink39,
																															expr: &seqExpr{
																																pos: position{line: 471, col: 17, offset: 15278},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 471, col: 17, offset: 15278},
																																		val:        ":",
																																		ignoreCase: false,
																																		want:       "\":\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 471, col: 21, offset: 15282},
																																		label: "start",
																																		expr: &choiceExpr{
																																			pos: position{line: 471, col: 28, offset: 15289},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 471, col: 28, offset: 15289},
																																					run: (*parser).callonExternalLink44,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 471, col: 28, offset: 15289},
																																						val:        "[A-Za-z]",
																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 473, col: 9, offset: 15343},
																																					run: (*parser).callonExternalLink46,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 473, col: 9, offset: 15343},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 473, col: 9, offset: 15343},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 463, col: 78, offset: 15031},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 467, col: 25, offset: 15133},
																										run: (*parser).callonExternalLink50,
																										expr: &seqExpr{
																											pos: position{line: 467, col: 25, offset: 15133},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 467, col: 25, offset: 15133},
																													val:        "{counter2:",
																													ignoreCase: false,
																													want:       "\"{counter2:\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 467, col: 38, offset: 15146},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 118, col: 18, offset: 3399},
																														run: (*parser).callonExternalLink54,
																														expr: &seqExpr{
																															pos: position{line: 118, col: 18, offset: 3399},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 118, col: 18, offset: 3399},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 118, col: 28, offset: 3409},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 118, col: 29, offset: 3410},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 467, col: 57, offset: 15165},
																													label: "start",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 467, col: 63, offset: 15171},
																														expr: &actionExpr{
																															pos: position{line: 471, col: 17, offset: 15278},
																															run: (*parser).callonExternalLink61,
																															expr: &seqExpr{
																																pos: position{line: 471, col: 17, offset: 15278},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 471, col: 17, offset: 15278},
																																		val:        ":",
																																		ignoreCase: false,
																																		want:       "\":\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 471, col: 21, offset: 15282},
																																		label: "start",
																																		expr: &choiceExpr{
																																			pos: position{line: 471, col: 28, offset: 15289},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 471, col: 28, offset: 15289},
																																					run: (*parser).callonExternalLink66,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 471, col: 28, offset: 15289},
																																						val:        "[A-Za-z]",
																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 473, col: 9, offset: 15343},
																																					run: (*parser).callonExternalLink68,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 473, col: 9, offset: 15343},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 473, col: 9, offset: 15343},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 467, col: 79, offset: 15187},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 456, col: 31, offset: 14633},
																										run: (*parser).callonExternalLink72,
																										expr: &seqExpr{
																											pos: position{line: 456, col: 31, offset: 14633},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 456, col: 31, offset: 14633},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 456, col: 35, offset: 14637},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 118, col: 18, offset: 3399},
																														run: (*parser).callonExternalLink76,
																														expr: &seqExpr{
																															pos: position{line: 118, col: 18, offset: 3399},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 118, col: 18, offset: 3399},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 118, col: 28, offset: 3409},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 118, col: 29, offset: 3410},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 456, col: 54, offset: 14656},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2587, col: 5, offset: 86026},
																				run: (*parser).callonExternalLink82,
																				expr: &seqExpr{
																					pos: position{line: 2587, col: 5, offset: 86026},
																					exprs: []interface{}{
																						&andCodeExpr{
																							pos: position{line: 2587, col: 5, offset: 86026},
																							run: (*parser).callonExternalLink84,
																						},
																						&labeledExpr{
																							pos:   position{line: 2590, col: 5, offset: 86097},
																							label: "element",
																							expr: &choiceExpr{
																								pos: position{line: 2592, col: 9, offset: 86195},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2592, col: 9, offset: 86195},
																										run: (*parser).callonExternalLink87,
																										expr: &choiceExpr{
																											pos: position{line: 491, col: 27, offset: 15997},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 491, col: 27, offset: 15997},
																													run: (*parser).callonExternalLink89,
																													expr: &seqExpr{
																														pos: position{line: 491, col: 27, offset: 15997},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 491, col: 27, offset: 15997},
																																val:        "<<",
																																ignoreCase: false,
																																want:       "\"<<\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 491, col: 32, offset: 16002},
																																label: "id",
																																expr: &actionExpr{
																																	pos: position{line: 2866, col: 7, offset: 94768},
																																	run: (*parser).callonExternalLink93,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 2866, col: 7, offset: 94768},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2866, col: 7, offset: 94768},
																																			val:        "[^[]<>,]",
																																			chars:      []rune{'[', ']', '<', '>', ','},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 491, col: 40, offset: 16010},
																																expr: &choiceExpr{
																																	pos: position{line: 2878, col: 10, offset: 95044},
																																	alternatives: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2878, col: 10, offset: 95044},
																																			val:        " ",
																																			ignoreCase: false,
																																			want:       "\" \"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 2878, col: 16, offset: 95050},
																																			run: (*parser).callonExternalLink99,
																																			expr: &litMatcher{
																																				pos:        position{line: 2878, col: 16, offset: 95050},
																																				val:        "\t",
																																				ignoreCase: false,
																																				want:       "\"\\t\"",
																																			},
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 491, col: 47, offset: 16017},
																																val:        ",",
																																ignoreCase: false,
																																want:       "\",\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 491, col: 51, offset: 16021},
																																label: "label",
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 501, col: 24, offset: 16434},
																																	expr: &choiceExpr{
																																		pos: position{line: 502, col: 5, offset: 16440},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 502, col: 6, offset: 16441},
																																				run: (*parser).callonExternalLink105,
																																				expr: &seqExpr{
																																					pos: position{line: 502, col: 6, offset: 16441},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 502, col: 6, offset: 16441},
																																							val:        "[0-9\\pL]",
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&oneOrMoreExpr{
																																							pos: position{line: 502, col: 14, offset: 16449},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 502, col: 14, offset: 16449},
																																								val:        "[^\\r\\n{<>]",
																																								chars:      []rune{'\r', '\n', '{', '<', '>'},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 449, col: 5, offset: 14443},
																																				run: (*parser).callonExternalLink110,
																																				expr: &seqExpr{
																																					pos: position{line: 449, col: 5, offset: 14443},
																																					exprs: []interface{}{
																																						&andCodeExpr{
																																							pos: position{line: 449, col: 5, offset: 14443},
																																							run: (*parser).callonExternalLink112,
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 452, col: 5, offset: 14507},
																																							label: "element",
																																							expr: &choiceExpr{
																																								pos: position{line: 452, col: 14, offset: 14516},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 463, col: 25, offset: 14978},
																																										run: (*parser).callonExternalLink115,
																																										expr: &seqExpr{
																																											pos: position{line: 463, col: 25, offset: 14978},
																																											exprs: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 463, col: 25, offset: 14978},
																																													val:        "{counter:",
																																													ignoreCase: false,
																																													want:       "\"{counter:\"",
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 463, col: 37, offset: 14990},
																																													label: "name",
																																													expr: &actionExpr{
																																														pos: position{line: 118, col: 18, offset: 3399},
																																														run: (*parser).callonExternalLink119,
																																														expr: &seqExpr{
																																															pos: position{line: 118, col: 18, offset: 3399},
																																															exprs: []interface{}{
																																																&charClassMatcher{
																																																	pos:        position{line: 118, col: 18, offset: 3399},
																																																	val:        "[_0-9\\pL]",
																																																	chars:      []rune{'_'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																																&zeroOrMoreExpr{
																																																	pos: position{line: 118, col: 28, offset: 3409},
																																																	expr: &charClassMatcher{
																																																		pos:        position{line: 118, col: 29, offset: 3410},
																																																		val:        "[-0-9\\pL]",
																																																		chars:      []rune{'-'},
																																																		ranges:     []rune{'0', '9'},
																																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																																		ignoreCase: false,
																																																		inverted:   false,
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 463, col: 56, offset: 15009},
																																													label: "start",
																																													expr: &zeroOrOneExpr{
																																														pos: position{line: 463, col: 62, offset: 15015},
																																														expr: &actionExpr{
																																															pos: position{line: 471, col: 17, offset: 15278},
																																															run: (*parser).callonExternalLink126,
																																															expr: &seqExpr{
																																																pos: position{line: 471, col: 17, offset: 15278},
																																																exprs: []interface{}{
																																																	&litMatcher{
																																																		pos:        position{line: 471, col: 17, offset: 15278},
																																																		val:        ":",
																																																		ignoreCase: false,
																																																		want:       "\":\"",
																																																	},
																																																	&labeledExpr{
																																																		pos:   position{line: 471, col: 21, offset: 15282},
																																																		label: "start",
																																																		expr: &choiceExpr{
																																																			pos: position{line: 471, col: 28, offset: 15289},
																																																			alternatives: []interface{}{
																																																				&actionExpr{
																																																					pos: position{line: 471, col: 28, offset: 15289},
																																																					run: (*parser).callonExternalLink131,
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 471, col: 28, offset: 15289},
																																																						val:        "[A-Za-z]",
																																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																				&actionExpr{
																																																					pos: position{line: 473, col: 9, offset: 15343},
																																																					run: (*parser).callonExternalLink133,
																																																					expr: &oneOrMoreExpr{
																																																						pos: position{line: 473, col: 9, offset: 15343},
																																																						expr: &charClassMatcher{
																																																							pos:        position{line: 473, col: 9, offset: 15343},
																																																							val:        "[0-9]",
																																																							ranges:     []rune{'0', '9'},
																																																							ignoreCase: false,
																																																							inverted:   false,
																																																						},
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&litMatcher{
																																													pos:        position{line: 463, col: 78, offset: 15031},
																																													val:        "}",
																																													ignoreCase: false,
																																													want:       "\"}\"",
																																												},
																																											},
																																										},
																																									},
																																									&actionExpr{
																																										pos: position{line: 467, col: 25, offset: 15133},
																																										run: (*parser).callonExternalLink137,
																																										expr: &seqExpr{
																																											pos: position{line: 467, col: 25, offset: 15133},
																																											exprs: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 467, col: 25, offset: 15133},
																																													val:        "{counter2:",
																																													ignoreCase: false,
																																													want:       "\"{counter2:\"",
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 467, col: 38, offset: 15146},
																																													label: "name",
																																													expr: &actionExpr{
																																														pos: position{line: 118, col: 18, offset: 3399},
																																														run: (*parser).callonExternalLink141,
																																														expr: &seqExpr{
																																															pos: position{line: 118, col: 18, offset: 3399},
																																															exprs: []interface{}{
																																																&charClassMatcher{
																																																	pos:        position{line: 118, col: 18, offset: 3399},
																																																	val:        "[_0-9\\pL]",
																																																	chars:      []rune{'_'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																																&zeroOrMoreExpr{
																																																	pos: position{line: 118, col: 28, offset: 3409},
																																																	expr: &charClassMatcher{
																																																		pos:        position{line: 118, col: 29, offset: 3410},
																																																		val:        "[-0-9\\pL]",
																																																		chars:      []rune{'-'},
																																																		ranges:     []rune{'0', '9'},
																																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																																		ignoreCase: false,
																																																		inverted:   false,
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 467, col: 57, offset: 15165},
																																													label: "start",
																																													expr: &zeroOrOneExpr{
																																														pos: position{line: 467, col: 63, offset: 15171},
																																														expr: &actionExpr{
																																															pos: position{line: 471, col: 17, offset: 15278},
																																															run: (*parser).callonExternalLink148,
																																															expr: &seqExpr{
																																																pos: position{line: 471, col: 17, offset: 15278},
																																																exprs: []interface{}{
																																																	&litMatcher{
																																																		pos:        position{line: 471, col: 17, offset: 15278},
																																																		val:        ":",
																																																		ignoreCase: false,
																																																		want:       "\":\"",
																																																	},
																																																	&labeledExpr{
																																																		pos:   position{line: 471, col: 21, offset: 15282},
																																																		label: "start",
																																																		expr: &choiceExpr{
																																																			pos: position{line: 471, col: 28, offset: 15289},
																																																			alternatives: []interface{}{
																																																				&actionExpr{
																																																					pos: position{line: 471, col: 28, offset: 15289},
																																																					run: (*parser).callonExternalLink153,
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 471, col: 28, offset: 15289},
																																																						val:        "[A-Za-z]",
																																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																				&actionExpr{
																																																					pos: position{line: 473, col: 9, offset: 15343},
																																																					run: (*parser).callonExternalLink155,
																																																					expr: &oneOrMoreExpr{
																																																						pos: position{line: 473, col: 9, offset: 15343},
																																																						expr: &charClassMatcher{
																																																							pos:        position{line: 473, col: 9, offset: 15343},
																																																							val:        "[0-9]",
																																																							ranges:     []rune{'0', '9'},
																																																							ignoreCase: false,
																																																							inverted:   false,
																																																						},
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&litMatcher{
																																													pos:        position{line: 467, col: 79, offset: 15187},
																																													val:        "}",
																																													ignoreCase: false,
																																													want:       "\"}\"",
																																												},
																																											},
																																										},
																																									},
																																									&actionExpr{
																																										pos: position{line: 456, col: 31, offset: 14633},
																																										run: (*parser).callonExternalLink159,
																																										expr: &seqExpr{
																																											pos: position{line: 456, col: 31, offset: 14633},
																																											exprs: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 456, col: 31, offset: 14633},
																																													val:        "{",
																																													ignoreCase: false,
																																													want:       "\"{\"",
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 456, col: 35, offset: 14637},
																																													label: "name",
																																													expr: &actionExpr{
																																														pos: position{line: 118, col: 18, offset: 3399},
																																														run: (*parser).callonExternalLink163,
																																														expr: &seqExpr{
																																															pos: position{line: 118, col: 18, offset: 3399},
																																															exprs: []interface{}{
																																																&charClassMatcher{
																																																	pos:        position{line: 118, col: 18, offset: 3399},
																																																	val:        "[_0-9\\pL]",
																																																	chars:      []rune{'_'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																																&zeroOrMoreExpr{
																																																	pos: position{line: 118, col: 28, offset: 3409},
																																																	expr: &charClassMatcher{
																																																		pos:        position{line: 118, col: 29, offset: 3410},
																																																		val:        "[-0-9\\pL]",
																																																		chars:      []rune{'-'},
																																																		ranges:     []rune{'0', '9'},
																																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																																		ignoreCase: false,
																																																		inverted:   false,
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&litMatcher{
																																													pos:        position{line: 456, col: 54, offset: 14656},
																																													val:        "}",
																																													ignoreCase: false,
																																													want:       "\"}\"",
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 506, col: 8, offset: 16673},
																																				run: (*parser).callonExternalLink169,
																																				expr: &litMatcher{
																																					pos:        position{line: 506, col: 8, offset: 16673},
																																					val:        "{",
																																					ignoreCase: false,
																																					want:       "\"{\"",
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 491, col: 79, offset: 16049},
																																val:        ">>",
																																ignoreCase: false,
																																want:       "\">>\"",
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 493, col: 9, offset: 16122},
																													run: (*parser).callonExternalLink172,
																													expr: &seqExpr{
																														pos: position{line: 493, col: 9, offset: 16122},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 493, col: 9, offset: 16122},
																																val:        "<<",
																																ignoreCase: false,
																																want:       "\"<<\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 493, col: 14, offset: 16127},
																																label: "id",
																																expr: &actionExpr{
																																	pos: position{line: 2866, col: 7, offset: 94768},
																																	run: (*parser).callonExternalLink176,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 2866, col: 7, offset: 94768},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2866, col: 7, offset: 94768},
																																			val:        "[^[]<>,]",
																																			chars:      []rune{'[', ']', '<', '>', ','},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 493, col: 22, offset: 16135},
																																val:        ">>",
																																ignoreCase: false,
																																want:       "\">>\"",
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2595, col: 11, offset: 86299},
																										run: (*parser).callonExternalLink180,
																										expr: &charClassMatcher{
																											pos:        position{line: 2595, col: 12, offset: 86300},
																											val:        "[<>&]",
																											chars:      []rune{'<', '>', '&'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2858, col: 7, offset: 94556},
																				run: (*parser).callonExternalLink182,
																				expr: &litMatcher{
																					pos:        position{line: 2858, col: 7, offset: 94556},
																					val:        "{",
																					ignoreCase: false,
																					want:       "\"{\"",
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 947, col: 23, offset: 29896},
															run: (*parser).callonExternalLink184,
															expr: &seqExpr{
																pos: position{line: 947, col: 23, offset: 29896},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 945, col: 32, offset: 29864},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 947, col: 51, offset: 29924},
																		label: "ref",
																		expr: &actionExpr{
																			pos: position{line: 947, col: 56, offset: 29929},
																			run: (*parser).callonExternalLink188,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 947, col: 56, offset: 29929},
																				expr: &charClassMatcher{
																					pos:        position{line: 947, col: 56, offset: 29929},
																					val:        "[0-9]",
																					ranges:     []rune{'0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 945, col: 32, offset: 29864},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1241, col: 42, offset: 41529},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1241, col: 59, offset: 41546},
								expr: &ruleRefExpr{
									pos:  position{line: 1241, col: 60, offset: 41547},
									name: "InlineAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListElements",
			pos:  position{line: 1249, col: 1, offset: 41907},
			expr: &actionExpr{
				pos: position{line: 1250, col: 5, offset: 41928},
				run: (*parser).callonListElements1,
				expr: &seqExpr{
					pos: position{line: 1250, col: 5, offset: 41928},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1250, col: 5, offset: 41928},
							label: "firstElement",
							expr: &choiceExpr{
								pos: position{line: 1256, col: 5, offset: 42140},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1385, col: 5, offset: 46170},
										run: (*parser).callonListElements5,
										expr: &seqExpr{
											pos: position{line: 1385, col: 5, offset: 46170},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1385, col: 5, offset: 46170},
													label: "prefix",
													expr: &actionExpr{
														pos: position{line: 1392, col: 5, offset: 46378},
														run: (*parser).callonListElements8,
														expr: &seqExpr{
															pos: position{line: 1392, col: 5, offset: 46378},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 1392, col: 5, offset: 46378},
																	expr: &choiceExpr{
																		pos: position{line: 2878, col: 10, offset: 95044},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2878, col: 10, offset: 95044},
																				val:        " ",
																				ignoreCase: false,
																				want:       "\" \"",
																			},
																			&actionExpr{
																				pos: position{line: 2878, col: 16, offset: 95050},
																				run: (*parser).callonListElements13,
																				expr: &litMatcher{
																					pos:        position{line: 2878, col: 16, offset: 95050},
																					val:        "\t",
																					ignoreCase: false,
																					want:       "\"\\t\"",
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1392, col: 12, offset: 46385},
																	label: "prefix",
																	expr: &choiceExpr{
																		pos: position{line: 1394, col: 9, offset: 46448},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 1394, col: 9, offset: 46448},
																				run: (*parser).callonListElements17,
																				expr: &seqExpr{
																					pos: position{line: 1394, col: 9, offset: 46448},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1394, col: 9, offset: 46448},
																							label: "depth",
																							expr: &actionExpr{
																								pos: position{line: 1394, col: 16, offset: 46455},
																								run: (*parser).callonListElements20,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1394, col: 16, offset: 46455},
																									expr: &litMatcher{
																										pos:        position{line: 1394, col: 17, offset: 46456},
																										val:        ".",
																										ignoreCase: false,
																										want:       "\".\"",
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1398, col: 9, offset: 46556},
																							run: (*parser).callonListElements23,
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1417, col: 11, offset: 47273},
																				run: (*parser).callonListElements24,
																				expr: &seqExpr{
																					pos: position{line: 1417, col: 11, offset: 47273},
																					exprs: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 1417, col: 11, offset: 47273},
																							expr: &charClassMatcher{
																								pos:        position{line: 1417, col: 12, offset: 47274},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1417, col: 20, offset: 47282},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1419, col: 13, offset: 47399},
																				run: (*parser).callonListElements29,
																				expr: &seqExpr{
																					pos: position{line: 1419, col: 13, offset: 47399},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 1419, col: 14, offset: 47400},
																							val:        "[a-z]",
																							ranges:     []rune{'a', 'z'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&litMatcher{
																							pos:        position{line: 1419, col: 21, offset: 47407},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1421, col: 13, offset: 47527},
																				run: (*parser).callonListElements33,
																				expr: &seqExpr{
																					pos: position{line: 1421, col: 13, offset: 47527},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 1421, col: 14, offset: 47528},
																							val:        "[A-Z]",
																							ranges:     []rune{'A', 'Z'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&litMatcher{
																							pos:        position{line: 1421, col: 21, offset: 47535},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1423, col: 13, offset: 47655},
																				run: (*parser).callonListElements37,
																				expr: &seqExpr{
																					pos: position{line: 1423, col: 13, offset: 47655},
																					exprs: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 1423, col: 13, offset: 47655},
																							expr: &charClassMatcher{
																								pos:        position{line: 1423, col: 14, offset: 47656},
																								val:        "[ivxdlcm]",
																								chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1423, col: 26, offset: 47668},
																							val:        ")",
																							ignoreCase: false,
																							want:       "\")\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1425, col: 13, offset: 47788},
																				run: (*parser).callonListElements42,
																				expr: &seqExpr{
																					pos: position{line: 1425, col: 13, offset: 47788},
																					exprs: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 1425, col: 13, offset: 47788},
																							expr: &charClassMatcher{
																								pos:        position{line: 1425, col: 14, offset: 47789},
																								val:        "[IVXDLCM]",
																								chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1425, col: 26, offset: 47801},
																							val:        ")",
																							ignoreCase: false,
																							want:       "\")\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2882, col: 11, offset: 95109},
																	run: (*parser).callonListElements47,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2882, col: 11, offset: 95109},
																		expr: &charClassMatcher{
																			pos:        position{line: 2882, col: 12, offset: 95110},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1386, col: 5, offset: 46209},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 1325, col: 5, offset: 44370},
														run: (*parser).callonListElements51,
														expr: &seqExpr{
															pos: position{line: 1325, col: 5, offset: 44370},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1325, col: 5, offset: 44370},
																	label: "rawline",
																	expr: &actionExpr{
																		pos: position{line: 1325, col: 14, offset: 44379},
																		run: (*parser).callonListElements54,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1325, col: 14, offset: 44379},
																			expr: &charClassMatcher{
																				pos:        position{line: 1325, col: 14, offset: 44379},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2893, col: 8, offset: 95335},
																	alternatives: []interface{}{
																		&notExpr{
																			pos: position{line: 2890, col: 8, offset: 95285},
																			expr: &anyMatcher{
																				line: 2890, col: 9, offset: 95286,
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2886, col: 12, offset: 95178},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2886, col: 19, offset: 95185},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&actionExpr{
																			pos: position{line: 2886, col: 28, offset: 95194},
																			run: (*parser).callonListElements62,
																			expr: &litMatcher{
																				pos:        position{line: 2886, col: 28, offset: 95194},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1435, col: 5, offset: 48067},
										run: (*parser).callonListElements64,
										expr: &seqExpr{
											pos: position{line: 1435, col: 5, offset: 48067},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1435, col: 5, offset: 48067},
													label: "prefix",
													expr: &actionExpr{
														pos: position{line: 1442, col: 5, offset: 48340},
														run: (*parser).callonListElements67,
														expr: &seqExpr{
															pos: position{line: 1442, col: 5, offset: 48340},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 1442, col: 5, offset: 48340},
																	expr: &choiceExpr{
																		pos: position{line: 2878, col: 10, offset: 95044},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2878, col: 10, offset: 95044},
																				val:        " ",
																				ignoreCase: false,
																				want:       "\" \"",
																			},
																			&actionExpr{
																				pos: position{line: 2878, col: 16, offset: 95050},
																				run: (*parser).callonListElements72,
																				expr: &litMatcher{
																					pos:        position{line: 2878, col: 16, offset: 95050},
																					val:        "\t",
																					ignoreCase: false,
																					want:       "\"\\t\"",
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1442, col: 12, offset: 48347},
																	label: "prefix",
																	expr: &choiceExpr{
																		pos: position{line: 1442, col: 20, offset: 48355},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 1444, col: 9, offset: 48412},
																				run: (*parser).callonListElements76,
																				expr: &seqExpr{
																					pos: position{line: 1444, col: 9, offset: 48412},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1444, col: 9, offset: 48412},
																							label: "depth",
																							expr: &actionExpr{
																								pos: position{line: 1444, col: 16, offset: 48419},
																								run: (*parser).callonListElements79,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1444, col: 16, offset: 48419},
																									expr: &litMatcher{
																										pos:        position{line: 1444, col: 17, offset: 48420},
																										val:        "*",
																										ignoreCase: false,
																										want:       "\"*\"",
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1448, col: 9, offset: 48520},
																							run: (*parser).callonListElements82,
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 1465, col: 14, offset: 49227},
																				label: "depth",
																				expr: &actionExpr{
																					pos: position{line: 1465, col: 21, offset: 49234},
																					run: (*parser).callonListElements84,
																					expr: &litMatcher{
																						pos:        position{line: 1465, col: 22, offset: 49235},
																						val:        "-",
																						ignoreCase: false,
																						want:       "\"-\"",
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2882, col: 11, offset: 95109},
																	run: (*parser).callonListElements86,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2882, col: 11, offset: 95109},
																		expr: &charClassMatcher{
																			pos:        position{line: 2882, col: 12, offset: 95110},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1436, col: 5, offset: 48108},
													label: "checkstyle",
													expr: &zeroOrOneExpr{
														pos: position{line: 1436, col: 16, offset: 48119},
														expr: &actionExpr{
															pos: position{line: 1472, col: 5, offset: 49396},
															run: (*parser).callonListElements91,
															expr: &seqExpr{
																pos: position{line: 1472, col: 5, offset: 49396},
																exprs: []interface{}{
																	&andExpr{
																		pos: position{line: 1472, col: 5, offset: 49396},
																		expr: &litMatcher{
																			pos:        position{line: 1472, col: 6, offset: 49397},
																			val:        "[",
																			ignoreCase: false,
																			want:       "\"[\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1472, col: 10, offset: 49401},
																		label: "style",
																		expr: &choiceExpr{
																			pos: position{line: 1473, col: 7, offset: 49415},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 1473, col: 7, offset: 49415},
																					run: (*parser).callonListElements97,
																					expr: &litMatcher{
																						pos:        position{line: 1473, col: 7, offset: 49415},
																						val:        "[ ]",
																						ignoreCase: false,
																						want:       "\"[ ]\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1474, col: 7, offset: 49460},
																					run: (*parser).callonListElements99,
																					expr: &litMatcher{
																						pos:        position{line: 1474, col: 7, offset: 49460},
																						val:        "[*]",
																						ignoreCase: false,
																						want:       "\"[*]\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1475, col: 7, offset: 49503},
																					run: (*parser).callonListElements101,
																					expr: &litMatcher{
																						pos:        position{line: 1475, col: 7, offset: 49503},
																						val:        "[x]",
																						ignoreCase: false,
																						want:       "\"[x]\"",
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2882, col: 11, offset: 95109},
																		run: (*parser).callonListElements103,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2882, col: 11, offset: 95109},
																			expr: &charClassMatcher{
																				pos:        position{line: 2882, col: 12, offset: 95110},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1437, col: 5, offset: 48158},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 1325, col: 5, offset: 44370},
														run: (*parser).callonListElements107,
														expr: &seqExpr{
															pos: position{line: 1325, col: 5, offset: 44370},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1325, col: 5, offset: 44370},
																	label: "rawline",
																	expr: &actionExpr{
																		pos: position{line: 1325, col: 14, offset: 44379},
																		run: (*parser).callonListElements110,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1325, col: 14, offset: 44379},
																			expr: &charClassMatcher{
																				pos:        position{line: 1325, col: 14, offset: 44379},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2893, col: 8, offset: 95335},
																	alternatives: []interface{}{
																		&notExpr{
																			pos: position{line: 2890, col: 8, offset: 95285},
																			expr: &anyMatcher{
																				line: 2890, col: 9, offset: 95286,
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2886, col: 12, offset: 95178},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2886, col: 19, offset: 95185},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&actionExpr{
																			pos: position{line: 2886, col: 28, offset: 95194},
																			run: (*parser).callonListElements118,
																			expr: &litMatcher{
																				pos:        position{line: 2886, col: 28, offset: 95194},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1558, col: 5, offset: 51792},
										run: (*parser).callonListElements120,
										expr: &seqExpr{
											pos: position{line: 1558, col: 5, offset: 51792},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1558, col: 5, offset: 51792},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 1564, col: 5, offset: 51993},
														run: (*parser).callonListElements123,
														expr: &seqExpr{
															pos: position{line: 1564, col: 5, offset: 51993},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 1564, col: 5, offset: 51993},
																	val:        "<",
																	ignoreCase: false,
																	want:       "\"<\"",
																},
																&labeledExpr{
																	pos:   position{line: 1564, col: 9, offset: 51997},
																	label: "ref",
																	expr: &actionExpr{
																		pos: position{line: 1564, col: 14, offset: 52002},
																		run: (*parser).callonListElements127,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1564, col: 14, offset: 52002},
																			expr: &charClassMatcher{
																				pos:        position{line: 1564, col: 14, offset: 52002},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 1564, col: 62, offset: 52050},
																	val:        ">",
																	ignoreCase: false,
																	want:       "\">\"",
																},
																&actionExpr{
																	pos: position{line: 2882, col: 11, offset: 95109},
																	run: (*parser).callonListElements131,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2882, col: 11, offset: 95109},
																		expr: &charClassMatcher{
																			pos:        position{line: 2882, col: 12, offset: 95110},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1559, col: 5, offset: 51828},
													label: "description",
													expr: &actionExpr{
														pos: position{line: 1569, col: 5, offset: 52128},
														run: (*parser).callonListElements135,
														expr: &seqExpr{
															pos: position{line: 1569, col: 5, offset: 52128},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1569, col: 5, offset: 52128},
																	label: "rawline",
																	expr: &actionExpr{
																		pos: position{line: 1569, col: 14, offset: 52137},
																		run: (*parser).callonListElements138,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1569, col: 14, offset: 52137},
																			expr: &charClassMatcher{
																				pos:        position{line: 1569, col: 14, offset: 52137},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2893, col: 8, offset: 95335},
																	alternatives: []interface{}{
																		&notExpr{
																			pos: position{line: 2890, col: 8, offset: 95285},
																			expr: &anyMatcher{
																				line: 2890, col: 9, offset: 95286,
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2886, col: 12, offset: 95178},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2886, col: 19, offset: 95185},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&actionExpr{
																			pos: position{line: 2886, col: 28, offset: 95194},
																			run: (*parser).callonListElements146,
																			expr: &litMatcher{
																				pos:        position{line: 2886, col: 28, offset: 95194},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1484, col: 5, offset: 49696},
										run: (*parser).callonListElements148,
										expr: &seqExpr{
											pos: position{line: 1484, col: 5, offset: 49696},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1484, col: 5, offset: 49696},
													label: "term",
													expr: &actionExpr{
														pos: position{line: 1492, col: 5, offset: 49955},
														run: (*parser).callonListElements151,
														expr: &oneOrMoreExpr{
															pos: position{line: 1492, col: 5, offset: 49955},
															expr: &seqExpr{
																pos: position{line: 1492, col: 6, offset: 49956},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1492, col: 6, offset: 49956},
																		expr: &actionExpr{
																			pos: position{line: 1497, col: 5, offset: 50087},
																			run: (*parser).callonListElements155,
																			expr: &seqExpr{
																				pos: position{line: 1497, col: 5, offset: 50087},
																				exprs: []interface{}{
																					&labeledExpr{
																						pos:   position{line: 1497, col: 5, offset: 50087},
																						label: "separator",
																						expr: &actionExpr{
																							pos: position{line: 1497, col: 16, offset: 50098},
																							run: (*parser).callonListElements158,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 1497, col: 16, offset: 50098},
																								expr: &litMatcher{
																									pos:        position{line: 1497, col: 17, offset: 50099},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																							},
																						},
																					},
																					&andCodeExpr{
																						pos: position{line: 1500, col: 5, offset: 50156},
																						run: (*parser).callonListElements161,
																					},
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 1492, col: 35, offset: 49985},
																		expr: &choiceExpr{
																			pos: position{line: 2893, col: 8, offset: 95335},
																			alternatives: []interface{}{
																				&notExpr{
																					pos: position{line: 2890, col: 8, offset: 95285},
																					expr: &anyMatcher{
																						line: 2890, col: 9, offset: 95286,
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2886, col: 12, offset: 95178},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2886, col: 19, offset: 95185},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&actionExpr{
																					pos: position{line: 2886, col: 28, offset: 95194},
																					run: (*parser).callonListElements168,
																					expr: &litMatcher{
																						pos:        position{line: 2886, col: 28, offset: 95194},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																	},
																	&anyMatcher{
																		line: 1492, col: 40, offset: 49990,
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1485, col: 5, offset: 49731},
													label: "separator",
													expr: &actionExpr{
														pos: position{line: 1497, col: 5, offset: 50087},
														run: (*parser).callonListElements172,
														expr: &seqExpr{
															pos: position{line: 1497, col: 5, offset: 50087},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1497, col: 5, offset: 50087},
																	label: "separator",
																	expr: &actionExpr{
																		pos: position{line: 1497, col: 16, offset: 50098},
																		run: (*parser).callonListElements175,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1497, col: 16, offset: 50098},
																			expr: &litMatcher{
																				pos:        position{line: 1497, col: 17, offset: 50099},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																		},
																	},
																},
																&andCodeExpr{
																	pos: position{line: 1500, col: 5, offset: 50156},
																	run: (*parser).callonListElements178,
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1486, col: 5, offset: 49776},
													label: "description",
													expr: &choiceExpr{
														pos: position{line: 1524, col: 5, offset: 50845},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 1526, col: 9, offset: 50923},
																run: (*parser).callonListElements181,
																expr: &seqExpr{
																	pos: position{line: 1526, col: 9, offset: 50923},
																	exprs: []interface{}{
																		&zeroOrMoreExpr{
																			pos: position{line: 1526, col: 9, offset: 50923},
																			expr: &choiceExpr{
																				pos: position{line: 2878, col: 10, offset: 95044},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2878, col: 10, offset: 95044},
																						val:        " ",
																						ignoreCase: false,
																						want:       "\" \"",
																					},
																					&actionExpr{
																						pos: position{line: 2878, col: 16, offset: 95050},
																						run: (*parser).callonListElements186,
																						expr: &litMatcher{
																							pos:        position{line: 2878, col: 16, offset: 95050},
																							val:        "\t",
																							ignoreCase: false,
																							want:       "\"\\t\"",
																						},
																					},
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2893, col: 8, offset: 95335},
																			alternatives: []interface{}{
																				&notExpr{
																					pos: position{line: 2890, col: 8, offset: 95285},
																					expr: &anyMatcher{
																						line: 2890, col: 9, offset: 95286,
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2886, col: 12, offset: 95178},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2886, col: 19, offset: 95185},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&actionExpr{
																					pos: position{line: 2886, col: 28, offset: 95194},
																					run: (*parser).callonListElements193,
																					expr: &litMatcher{
																						pos:        position{line: 2886, col: 28, offset: 95194},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1527, col: 9, offset: 50943},
																			expr: &actionExpr{
																				pos: position{line: 482, col: 14, offset: 15644},
																				run: (*parser).callonListElements196,
																				expr: &seqExpr{
																					pos: position{line: 482, col: 14, offset: 15644},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 482, col: 14, offset: 15644},
																							expr: &notExpr{
																								pos: position{line: 2890, col: 8, offset: 95285},
																								expr: &anyMatcher{
																									line: 2890, col: 9, offset: 95286,
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 482, col: 19, offset: 15649},
																							expr: &choiceExpr{
																								pos: position{line: 2878, col: 10, offset: 95044},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2878, col: 10, offset: 95044},
																										val:        " ",
																										ignoreCase: false,
																										want:       "\" \"",
																									},
																									&actionExpr{
																										pos: position{line: 2878, col: 16, offset: 95050},
																										run: (*parser).callonListElements204,
																										expr: &litMatcher{
																											pos:        position{line: 2878, col: 16, offset: 95050},
																											val:        "\t",
																											ignoreCase: false,
																											want:       "\"\\t\"",
																										},
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2893, col: 8, offset: 95335},
																							alternatives: []interface{}{
																								&notExpr{
																									pos: position{line: 2890, col: 8, offset: 95285},
																									expr: &anyMatcher{
																										line: 2890, col: 9, offset: 95286,
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2886, col: 12, offset: 95178},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2886, col: 19, offset: 95185},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&actionExpr{
																									pos: position{line: 2886, col: 28, offset: 95194},
																									run: (*parser).callonListElements211,
																									expr: &litMatcher{
																										pos:        position{line: 2886, col: 28, offset: 95194},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1528, col: 9, offset: 50963},
																			label: "content",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 1528, col: 17, offset: 50971},
																				expr: &actionExpr{
																					pos: position{line: 1310, col: 5, offset: 43944},
																					run: (*parser).callonListElements215,
																					expr: &seqExpr{
																						pos: position{line: 1310, col: 5, offset: 43944},
																						exprs: []interface{}{
																							&notExpr{
																								pos: position{line: 1310, col: 5, offset: 43944},
																								expr: &actionExpr{
																									pos: position{line: 482, col: 14, offset: 15644},
																									run: (*parser).callonListElements218,
																									expr: &seqExpr{
																										pos: position{line: 482, col: 14, offset: 15644},
																										exprs: []interface{}{
																											&notExpr{
																												pos: position{line: 482, col: 14, offset: 15644},
																												expr: &notExpr{
																													pos: position{line: 2890, col: 8, offset: 95285},
																													expr: &anyMatcher{
																														line: 2890, col: 9, offset: 95286,
																													},
																												},
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 482, col: 19, offset: 15649},
																												expr: &choiceExpr{
																													pos: position{line: 2878, col: 10, offset: 95044},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2878, col: 10, offset: 95044},
																															val:        " ",
																															ignoreCase: false,
																															want:       "\" \"",
																														},
																														&actionExpr{
																															pos: position{line: 2878, col: 16, offset: 95050},
																															run: (*parser).callonListElements226,
																															expr: &litMatcher{
																																pos:        position{line: 2878, col: 16, offset: 95050},
																																val:        "\t",
																																ignoreCase: false,
																																want:       "\"\\t\"",
																															},
																														},
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2893, col: 8, offset: 95335},
																												alternatives: []interface{}{
																													&notExpr{
																														pos: position{line: 2890, col: 8, offset: 95285},
																														expr: &anyMatcher{
																															line: 2890, col: 9, offset: 95286,
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 2886, col: 12, offset: 95178},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2886, col: 19, offset: 95185},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&actionExpr{
																														pos: position{line: 2886, col: 28, offset: 95194},
																														run: (*parser).callonListElements233,
																														expr: &litMatcher{
																															pos:        position{line: 2886, col: 28, offset: 95194},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 1311, col: 5, offset: 43959},
																								expr: &seqExpr{
																									pos: position{line: 1343, col: 34, offset: 44869},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 1343, col: 34, offset: 44869},
																											val:        "+",
																											ignoreCase: false,
																											want:       "\"+\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 1343, col: 38, offset: 44873},
																											expr: &choiceExpr{
																												pos: position{line: 2878, col: 10, offset: 95044},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2878, col: 10, offset: 95044},
																														val:        " ",
																														ignoreCase: false,
																														want:       "\" \"",
																													},
																													&actionExpr{
																														pos: position{line: 2878, col: 16, offset: 95050},
																														run: (*parser).callonListElements241,
																														expr: &litMatcher{
																															pos:        position{line: 2878, col: 16, offset: 95050},
																															val:        "\t",
																															ignoreCase: false,
																															want:       "\"\\t\"",
																														},
																													},
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2886, col: 12, offset: 95178},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2886, col: 12, offset: 95178},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2886, col: 19, offset: 95185},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&actionExpr{
																													pos: position{line: 2886, col: 28, offset: 95194},
																													run: (*parser).callonListElements246,
																													expr: &litMatcher{
																														pos:        position{line: 2886, col: 28, offset: 95194},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 1312, col: 5, offset: 43994},
																								expr: &actionExpr{
																									pos: position{line: 1392, col: 5, offset: 46378},
																									run: (*parser).callonListElements249,
																									expr: &seqExpr{
																										pos: position{line: 1392, col: 5, offset: 46378},
																										exprs: []interface{}{
																											&zeroOrMoreExpr{
																												pos: position{line: 1392, col: 5, offset: 46378},
																												expr: &choiceExpr{
																													pos: position{line: 2878, col: 10, offset: 95044},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2878, col: 10, offset: 95044},
																															val:        " ",
																															ignoreCase: false,
																															want:       "\" \"",
																														},
																														&actionExpr{
																															pos: position{line: 2878, col: 16, offset: 95050},
																															run: (*parser).callonListElements254,
																															expr: &litMatcher{
																																pos:        position{line: 2878, col: 16, offset: 95050},
																																val:        "\t",
																																ignoreCase: false,
																																want:       "\"\\t\"",
																															},
																														},
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 1392, col: 12, offset: 46385},
																												label: "prefix",
																												expr: &choiceExpr{
																													pos: position{line: 1394, col: 9, offset: 46448},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 1394, col: 9, offset: 46448},
																															run: (*parser).callonListElements258,
																															expr: &seqExpr{
																																pos: position{line: 1394, col: 9, offset: 46448},
																																exprs: []interface{}{
																																	&labeledExpr{
																																		pos:   position{line: 1394, col: 9, offset: 46448},
																																		label: "depth",
																																		expr: &actionExpr{
																																			pos: position{line: 1394, col: 16, offset: 46455},
																																			run: (*parser).callonListElements261,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 1394, col: 16, offset: 46455},
																																				expr: &litMatcher{
																																					pos:        position{line: 1394, col: 17, offset: 46456},
																																					val:        ".",
																																					ignoreCase: false,
																																					want:       "\".\"",
																																				},
																																			},
																																		},
																																	},
																																	&andCodeExpr{
																																		pos: position{line: 1398, col: 9, offset: 46556},
																																		run: (*parser).callonListElements264,
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 1417, col: 11, offset: 47273},
																															run: (*parser).callonListElements265,
																															expr: &seqExpr{
																																pos: position{line: 1417, col: 11, offset: 47273},
																																exprs: []interface{}{
																																	&oneOrMoreExpr{
																																		pos: position{line: 1417, col: 11, offset: 47273},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 1417, col: 12, offset: 47274},
																																			val:        "[0-9]",
																																			ranges:     []rune{'0', '9'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 1417, col: 20, offset: 47282},
																																		val:        ".",
																																		ignoreCase: false,
																																		want:       "\".\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 1419, col: 13, offset: 47399},
																															run: (*parser).callonListElements270,
																															expr: &seqExpr{
																																pos: position{line: 1419, col: 13, offset: 47399},
																																exprs: []interface{}{
																																	&charClassMatcher{
																																		pos:        position{line: 1419, col: 14, offset: 47400},
																																		val:        "[a-z]",
																																		ranges:     []rune{'a', 'z'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																	&litMatcher{
																																		pos:        position{line: 1419, col: 21, offset: 47407},
																																		val:        ".",
																																		ignoreCase: false,
																																		want:       "\".\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 1421, col: 13, offset: 47527},
																															run: (*parser).callonListElements274,
																															expr: &seqExpr{
																																pos: position{line: 1421, col: 13, offset: 47527},
																																exprs: []interface{}{
																																	&charClassMatcher{
																																		pos:        position{line: 1421, col: 14, offset: 47528},
																																		val:        "[A-Z]",
																																		ranges:     []rune{'A', 'Z'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																	&litMatcher{
																																		pos:        position{line: 1421, col: 21, offset: 47535},
																																		val:        ".",
																																		ignoreCase: false,
																																		want:       "\".\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 1423, col: 13, offset: 47655},
																															run: (*parser).callonListElements278,
																															expr: &seqExpr{
																																pos: position{line: 1423, col: 13, offset: 47655},
																																exprs: []interface{}{
																																	&oneOrMoreExpr{
																																		pos: position{line: 1423, col: 13, offset: 47655},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 1423, col: 14, offset: 47656},
																																			val:        "[ivxdlcm]",
																																			chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 1423, col: 26, offset: 47668},
																																		val:        ")",
																																		ignoreCase: false,
																																		want:       "\")\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 1425, col: 13, offset: 47788},
																															run: (*parser).callonListElements283,
																															expr: &seqExpr{
																																pos: position{line: 1425, col: 13, offset: 47788},
																																exprs: []interface{}{
																																	&oneOrMoreExpr{
																																		pos: position{line: 1425, col: 13, offset: 47788},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 1425, col: 14, offset: 47789},
																																			val:        "[IVXDLCM]",
																																			chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 1425, col: 26, offset: 47801},
																																		val:        ")",
																																		ignoreCase: false,
																																		want:       "\")\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2882, col: 11, offset: 95109},
																												run: (*parser).callonListElements288,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 2882, col: 11, offset: 95109},
																													expr: &charClassMatcher{
																														pos:        position{line: 2882, col: 12, offset: 95110},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 1313, col: 5, offset: 44024},
																								expr: &actionExpr{
																									pos: position{line: 1442, col: 5, offset: 48340},
																									run: (*parser).callonListElements292,
																									expr: &seqExpr{
																										pos: position{line: 1442, col: 5, offset: 48340},
																										exprs: []interface{}{
																											&zeroOrMoreExpr{
																												pos: position{line: 1442, col: 5, offset: 48340},
																												expr: &choiceExpr{
																													pos: position{line: 2878, col: 10, offset: 95044},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2878, col: 10, offset: 95044},
																															val:        " ",
																															ignoreCase: false,
																															want:       "\" \"",
																														},
																														&actionExpr{
																															pos: position{line: 2878, col: 16, offset: 95050},
																															run: (*parser).callonListElements297,
																															expr: &litMatcher{
																																pos:        position{line: 2878, col: 16, offset: 95050},
																																val:        "\t",
																																ignoreCase: false,
																																want:       "\"\\t\"",
																															},
																														},
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 1442, col: 12, offset: 48347},
																												label: "prefix",
																												expr: &choiceExpr{
																													pos: position{line: 1442, col: 20, offset: 48355},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 1444, col: 9, offset: 48412},
																															run: (*parser).callonListElements301,
																															expr: &seqExpr{
																																pos: position{line: 1444, col: 9, offset: 48412},
																																exprs: []interface{}{
																																	&labeledExpr{
																																		pos:   position{line: 1444, col: 9, offset: 48412},
																																		label: "depth",
																																		expr: &actionExpr{
																																			pos: position{line: 1444, col: 16, offset: 48419},
																																			run: (*parser).callonListElements304,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 1444, col: 16, offset: 48419},
																																				expr: &litMatcher{
																																					pos:        position{line: 1444, col: 17, offset: 48420},
																																					val:        "*",
																																					ignoreCase: false,
																																					want:       "\"*\"",
																																				},
																																			},
																																		},
																																	},
																																	&andCodeExpr{
																																		pos: position{line: 1448, col: 9, offset: 48520},
																																		run: (*parser).callonListElements307,
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 1465, col: 14, offset: 49227},
																															label: "depth",
																															expr: &actionExpr{
																																pos: position{line: 1465, col: 21, offset: 49234},
																																run: (*parser).callonListElements309,
																																expr: &litMatcher{
																																	pos:        position{line: 1465, col: 22, offset: 49235},
																																	val:        "-",
																																	ignoreCase: false,
																																	want:       "\"-\"",
																																},
																															},
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2882, col: 11, offset: 95109},
																												run: (*parser).callonListElements311,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 2882, col: 11, offset: 95109},
																													expr: &charClassMatcher{
																														pos:        position{line: 2882, col: 12, offset: 95110},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 1314, col: 5, offset: 44056},
																								expr: &actionExpr{
																									pos: position{line: 1564, col: 5, offset: 51993},
																									run: (*parser).callonListElements315,
																									expr: &seqExpr{
																										pos: position{line: 1564, col: 5, offset: 51993},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 1564, col: 5, offset: 51993},
																												val:        "<",
																												ignoreCase: false,
																												want:       "\"<\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 1564, col: 9, offset: 51997},
																												label: "ref",
																												expr: &actionExpr{
																													pos: position{line: 1564, col: 14, offset: 52002},
																													run: (*parser).callonListElements319,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 1564, col: 14, offset: 52002},
																														expr: &charClassMatcher{
																															pos:        position{line: 1564, col: 14, offset: 52002},
																															val:        "[0-9]",
																															ranges:     []rune{'0', '9'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 1564, col: 62, offset: 52050},
																												val:        ">",
																												ignoreCase: false,
																												want:       "\">\"",
																											},
																											&actionExpr{
																												pos: position{line: 2882, col: 11, offset: 95109},
																												run: (*parser).callonListElements323,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 2882, col: 11, offset: 95109},
																													expr: &charClassMatcher{
																														pos:        position{line: 2882, col: 12, offset: 95110},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 1315, col: 5, offset: 44086},
																								expr: &seqExpr{
																									pos: position{line: 1315, col: 7, offset: 44088},
																									exprs: []interface{}{
																										&actionExpr{
																											pos: position{line: 1492, col: 5, offset: 49955},
																											run: (*parser).callonListElements328,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 1492, col: 5, offset: 49955},
																												expr: &seqExpr{
																													pos: position{line: 1492, col: 6, offset: 49956},
																													exprs: []interface{}{
																														&notExpr{
																															pos: position{line: 1492, col: 6, offset: 49956},
																															expr: &actionExpr{
																																pos: position{line: 1497, col: 5, offset: 50087},
																																run: (*parser).callonListElements332,
																																expr: &seqExpr{
																																	pos: position{line: 1497, col: 5, offset: 50087},
																																	exprs: []interface{}{
																																		&labeledExpr{
																																			pos:   position{line: 1497, col: 5, offset: 50087},
																																			label: "separator",
																																			expr: &actionExpr{
																																				pos: position{line: 1497, col: 16, offset: 50098},
																																				run: (*parser).callonListElements335,
																																				expr: &oneOrMoreExpr{
																																					pos: position{line: 1497, col: 16, offset: 50098},
																																					expr: &litMatcher{
																																						pos:        position{line: 1497, col: 17, offset: 50099},
																																						val:        ":",
																																						ignoreCase: false,
																																						want:       "\":\"",
																																					},
																																				},
																																			},
																																		},
																																		&andCodeExpr{
																																			pos: position{line: 1500, col: 5, offset: 50156},
																																			run: (*parser).callonListElements338,
																																		},
																																	},
																																},
																															},
																														},
																														&notExpr{
																															pos: position{line: 1492, col: 35, offset: 49985},
																															expr: &choiceExpr{
																																pos: position{line: 2893, col: 8, offset: 95335},
																																alternatives: []interface{}{
																																	&notExpr{
																																		pos: position{line: 2890, col: 8, offset: 95285},
																																		expr: &anyMatcher{
																																			line: 2890, col: 9, offset: 95286,
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2886, col: 12, offset: 95178},
																																		val:        "\n",
																																		ignoreCase: false,
																																		want:       "\"\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2886, col: 19, offset: 95185},
																																		val:        "\r\n",
																																		ignoreCase: false,
																																		want:       "\"\\r\\n\"",
																																	},
																																	&actionExpr{
																																		pos: position{line: 2886, col: 28, offset: 95194},
																																		run: (*parser).callonListElements345,
																																		expr: &litMatcher{
																																			pos:        position{line: 2886, col: 28, offset: 95194},
																																			val:        "\r",
																																			ignoreCase: false,
																																			want:       "\"\\r\"",
																																		},
																																	},
																																},
																															},
																														},
																														&anyMatcher{
																															line: 1492, col: 40, offset: 49990,
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 1497, col: 5, offset: 50087},
																											run: (*parser).callonListElements348,
																											expr: &seqExpr{
																												pos: position{line: 1497, col: 5, offset: 50087},
																												exprs: []interface{}{
																													&labeledExpr{
																														pos:   position{line: 1497, col: 5, offset: 50087},
																														label: "separator",
																														expr: &actionExpr{
																															pos: position{line: 1497, col: 16, offset: 50098},
																															run: (*parser).callonListElements351,
																															expr: &oneOrMoreExpr{
																																pos: position{line: 1497, col: 16, offset: 50098},
																																expr: &litMatcher{
																																	pos:        position{line: 1497, col: 17, offset: 50099},
																																	val:        ":",
																																	ignoreCase: false,
																																	want:       "\":\"",
																																},
																															},
																														},
																													},
																													&andCodeExpr{
																														pos: position{line: 1500, col: 5, offset: 50156},
																														run: (*parser).callonListElements354,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 1316, col: 5, offset: 44144},
																								expr: &actionExpr{
																									pos: position{line: 527, col: 5, offset: 17165},
																									run: (*parser).callonListElements356,
																									expr: &seqExpr{
																										pos: position{line: 527, col: 5, offset: 17165},
																										exprs: []interface{}{
																											&notExpr{
																												pos: position{line: 527, col: 5, offset: 17165},
																												expr: &charClassMatcher{
																													pos:        position{line: 2797, col: 13, offset: 92519},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 528, col: 5, offset: 17195},
																												label: "delimiter",
																												expr: &choiceExpr{
																													pos: position{line: 529, col: 9, offset: 17215},
																													alternatives: []interface{}{
																														&seqExpr{
																															pos: position{line: 541, col: 26, offset: 17536},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 541, col: 26, offset: 17536},
																																	val:        "////",
																																	ignoreCase: false,
																																	want:       "\"////\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 541, col: 33, offset: 17543},
																																	expr: &choiceExpr{
																																		pos: position{line: 2878, col: 10, offset: 95044},
																																		alternatives: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2878, col: 10, offset: 95044},
																																				val:        " ",
																																				ignoreCase: false,
																																				want:       "\" \"",
																																			},
																																			&actionExpr{
																																				pos: position{line: 2878, col: 16, offset: 95050},
																																				run: (*parser).callonListElements367,
																																				expr: &litMatcher{
																																					pos:        position{line: 2878, col: 16, offset: 95050},
																																					val:        "\t",
																																					ignoreCase: false,
																																					want:       "\"\\t\"",
																																				},
																																			},
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2893, col: 8, offset: 95335},
																																	alternatives: []interface{}{
																																		&notExpr{
																																			pos: position{line: 2890, col: 8, offset: 95285},
																																			expr: &anyMatcher{
																																				line: 2890, col: 9, offset: 95286,
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2886, col: 12, offset: 95178},
																																			val:        "\n",
																																			ignoreCase: false,
																																			want:       "\"\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2886, col: 19, offset: 95185},
																																			val:        "\r\n",
																																			ignoreCase: false,
																																			want:       "\"\\r\\n\"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 2886, col: 28, offset: 95194},
																																			run: (*parser).callonListElements374,
																																			expr: &litMatcher{
																																				pos:        position{line: 2886, col: 28, offset: 95194},
																																				val:        "\r",
																																				ignoreCase: false,
																																				want:       "\"\\r\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&seqExpr{
																															pos: position{line: 543, col: 26, offset: 17580},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 543, col: 26, offset: 17580},
																																	val:        "====",
																																	ignoreCase: false,
																																	want:       "\"====\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 543, col: 33, offset: 17587},
																																	expr: &choiceExpr{
																																		pos: position{line: 2878, col: 10, offset: 95044},
																																		alternatives: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2878, col: 10, offset: 95044},
																																				val:        " ",
																																				ignoreCase: false,
																																				want:       "\" \"",
																																			},
																																			&actionExpr{
																																				pos: position{line: 2878, col: 16, offset: 95050},
																																				run: (*parser).callonListElements381,
																																				expr: &litMatcher{
																																					pos:        position{line: 2878, col: 16, offset: 95050},
																																					val:        "\t",
																																					ignoreCase: false,
																																					want:       "\"\\t\"",
																																				},
																																			},
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2893, col: 8, offset: 95335},
																																	alternatives: []interface{}{
																																		&notExpr{
																																			pos: position{line: 2890, col: 8, offset: 95285},
																																			expr: &anyMatcher{
																																				line: 2890, col: 9, offset: 95286,
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2886, col: 12, offset: 95178},
																																			val:        "\n",
																																			ignoreCase: false,
																																			want:       "\"\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2886, col: 19, offset: 95185},
																																			val:        "\r\n",
																																			ignoreCase: false,
																																			want:       "\"\\r\\n\"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 2886, col: 28, offset: 95194},
																																			run: (*parser).callonListElements388,
																																			expr: &litMatcher{
																																				pos:        position{line: 2886, col: 28, offset: 95194},
																																				val:        "\r",
																																				ignoreCase: false,
																																				want:       "\"\\r\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&seqExpr{
																															pos: position{line: 545, col: 25, offset: 17623},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 545, col: 25, offset: 17623},
																																	val:        "```",
																																	ignoreCase: false,
																																	want:       "\"```\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 545, col: 31, offset: 17629},
																																	expr: &choiceExpr{
																																		pos: position{line: 2878, col: 10, offset: 95044},
																																		alternatives: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2878, col: 10, offset: 95044},
																																				val:        " ",
																																				ignoreCase: false,
																																				want:       "\" \"",
																																			},
																																			&actionExpr{
																																				pos: position{line: 2878, col: 16, offset: 95050},
																																				run: (*parser).callonListElements395,
																																				expr: &litMatcher{
																																					pos:        position{line: 2878, col: 16, offset: 95050},
																																					val:        "\t",
																																					ignoreCase: false,
																																					want:       "\"\\t\"",
																																				},
																																			},
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2893, col: 8, offset: 95335},
																																	alternatives: []interface{}{
																																		&notExpr{
																																			pos: position{line: 2890, col: 8, offset: 95285},
																																			expr: &anyMatcher{
																																				line: 2890, col: 9, offset: 95286,
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2886, col: 12, offset: 95178},
																																			val:        "\n",
																																			ignoreCase: false,
																																			want:       "\"\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2886, col: 19, offset: 95185},
																																			val:        "\r\n",
																																			ignoreCase: false,
																																			want:       "\"\\r\\n\"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 2886, col: 28, offset: 95194},
																																			run: (*parser).callonListElements402,
																																			expr: &litMatcher{
																																				pos:        position{line: 2886, col: 28, offset: 95194},
																																				val:        "\r",
																																				ignoreCase: false,
																																				want:       "\"\\r\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&seqExpr{
																															pos: position{line: 547, col: 26, offset: 17666},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 547, col: 26, offset: 17666},
																																	val:        "----",
																																	ignoreCase: false,
																																	want:       "\"----\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 547, col: 33, offset: 17673},
																																	expr: &choiceExpr{
																																		pos: position{line: 2878, col: 10, offset: 95044},
																																		alternatives: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2878, col: 10, offset: 95044},
																																				val:        " ",
																																				ignoreCase: false,
																																				want:       "\" \"",
																																			},
																																			&actionExpr{
																																				pos: position{line: 2878, col: 16, offset: 95050},
																																				run: (*parser).callonListElements409,
																																				expr: &litMatcher{
																																					pos:        position{line: 2878, col: 16, offset: 95050},
																																					val:        "\t",
																																					ignoreCase: false,
																																					want:       "\"\\t\"",
																																				},
																																			},
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2893, col: 8, offset: 95335},
																																	alternatives: []interface{}{
																																		&notExpr{
																																			pos: position{line: 2890, col: 8, offset: 95285},
																																			expr: &anyMatcher{
																																				line: 2890, col: 9, offset: 95286,
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2886, col: 12, offset: 95178},
																																			val:        "\n",
																																			ignoreCase: false,
																																			want:       "\"\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2886, col: 19, offset: 95185},
																																			val:        "\r\n",
																																			ignoreCase: false,
																																			want:       "\"\\r\\n\"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 2886, col: 28, offset: 95194},
																																			run: (*parser).callonListElements416,
																																			expr: &litMatcher{
																																				pos:        position{line: 2886, col: 28, offset: 95194},
																																				val:        "\r",
																																				ignoreCase: false,
																																				want:       "\"\\r\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&seqExpr{
																															pos: position{line: 549, col: 26, offset: 17710},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 549, col: 26, offset: 17710},
																																	val:        "....",
																																	ignoreCase: false,
																																	want:       "\"....\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 549, col: 33, offset: 17717},
																																	expr: &choiceExpr{
																																		pos: position{line: 2878, col: 10, offset: 95044},
																																		alternatives: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2878, col: 10, offset: 95044},
																																				val:        " ",
																																				ignoreCase: false,
																																				want:       "\" \"",
																																			},
																																			&actionExpr{
																																				pos: position{line: 2878, col: 16, offset: 95050},
																																				run: (*parser).callonListElements423,
																																				expr: &litMatcher{
																																					pos:        position{line: 2878, col: 16, offset: 95050},
																																					val:        "\t",
																																					ignoreCase: false,
																																					want:       "\"\\t\"",
																																				},
																																			},
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2893, col: 8, offset: 95335},
																																	alternatives: []interface{}{
																																		&notExpr{
																																			pos: position{line: 2890, col: 8, offset: 95285},
																																			expr: &anyMatcher{
																																				line: 2890, col: 9, offset: 95286,
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2886, col: 12, offset: 95178},
																																			val:        "\n",
																																			ignoreCase: false,
																																			want:       "\"\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2886, col: 19, offset: 95185},
																																			val:        "\r\n",
																																			ignoreCase: false,
																																			want:       "\"\\r\\n\"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 2886, col: 28, offset: 95194},
																																			run: (*parser).callonListElements430,
																																			expr: &litMatcher{
																																				pos:        position{line: 2886, col: 28, offset: 95194},
																																				val:        "\r",
																																				ignoreCase: false,
																																				want:       "\"\\r\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&seqExpr{
																															pos: position{line: 551, col: 30, offset: 17758},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 551, col: 30, offset: 17758},
																																	val:        "++++",
																																	ignoreCase: false,
																																	want:       "\"++++\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 551, col: 37, offset: 17765},
																																	expr: &choiceExpr{
																																		pos: position{line: 2878, col: 10, offset: 95044},
																																		alternatives: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2878, col: 10, offset: 95044},
																																				val:        " ",
																																				ignoreCase: false,
																																				want:       "\" \"",
																																			},
																																			&actionExpr{
																																				pos: position{line: 2878, col: 16, offset: 95050},
																																				run: (*parser).callonListElements437,
																																				expr: &litMatcher{
																																					pos:        position{line: 2878, col: 16, offset: 95050},
																																					val:        "\t",
																																					ignoreCase: false,
																																					want:       "\"\\t\"",
																																				},
																																			},
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2893, col: 8, offset: 95335},
																																	alternatives: []interface{}{
																																		&notExpr{
																																			pos: position{line: 2890, col: 8, offset: 95285},
																																			expr: &anyMatcher{
																																				line: 2890, col: 9, offset: 95286,
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2886, col: 12, offset: 95178},
																																			val:        "\n",
																																			ignoreCase: false,
																																			want:       "\"\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2886, col: 19, offset: 95185},
																																			val:        "\r\n",
																																			ignoreCase: false,
																																			want:       "\"\\r\\n\"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 2886, col: 28, offset: 95194},
																																			run: (*parser).callonListElements444,
																																			expr: &litMatcher{
																																				pos:        position{line: 2886, col: 28, offset: 95194},
																																				val:        "\r",
																																				ignoreCase: false,
																																				want:       "\"\\r\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&seqExpr{
																															pos: position{line: 553, col: 24, offset: 17800},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 553, col: 24, offset: 17800},
																																	val:        "____",
																																	ignoreCase: false,
																																	want:       "\"____\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 553, col: 31, offset: 17807},
																																	expr: &choiceExpr{
																																		pos: position{line: 2878, col: 10, offset: 95044},
																																		alternatives: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2878, col: 10, offset: 95044},
																																				val:        " ",
																																				ignoreCase: false,
																																				want:       "\" \"",
																																			},
																																			&actionExpr{
																																				pos: position{line: 2878, col: 16, offset: 95050},
																																				run: (*parser).callonListElements451,
																																				expr: &litMatcher{
																																					pos:        position{line: 2878, col: 16, offset: 95050},
																																					val:        "\t",
																																					ignoreCase: false,
																																					want:       "\"\\t\"",
																																				},
																																			},
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2893, col: 8, offset: 95335},
																																	alternatives: []interface{}{
																																		&notExpr{
																																			pos: position{line: 2890, col: 8, offset: 95285},
																																			expr: &anyMatcher{
																																				line: 2890, col: 9, offset: 95286,
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2886, col: 12, offset: 95178},
																																			val:        "\n",
																																			ignoreCase: false,
																																			want:       "\"\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2886, col: 19, offset: 95185},
																																			val:        "\r\n",
																																			ignoreCase: false,
																																			want:       "\"\\r\\n\"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 2886, col: 28, offset: 95194},
																																			run: (*parser).callonListElements458,
																																			expr: &litMatcher{
																																				pos:        position{line: 2886, col: 28, offset: 95194},
																																				val:        "\r",
																																				ignoreCase: false,
																																				want:       "\"\\r\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&seqExpr{
																															pos: position{line: 555, col: 26, offset: 17844},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 555, col: 26, offset: 17844},
																																	val:        "****",
																																	ignoreCase: false,
																																	want:       "\"****\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 555, col: 33, offset: 17851},
																																	expr: &choiceExpr{
																																		pos: position{line: 2878, col: 10, offset: 95044},
																																		alternatives: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2878, col: 10, offset: 95044},
																																				val:        " ",
																																				ignoreCase: false,
																																				want:       "\" \"",
																																			},
																																			&actionExpr{
																																				pos: position{line: 2878, col: 16, offset: 95050},
																																				run: (*parser).callonListElements465,
																																				expr: &litMatcher{
																																					pos:        position{line: 2878, col: 16, offset: 95050},
																																					val:        "\t",
																																					ignoreCase: false,
																																					want:       "\"\\t\"",
																																				},
																																			},
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2893, col: 8, offset: 95335},
																																	alternatives: []interface{}{
																																		&notExpr{
																																			pos: position{line: 2890, col: 8, offset: 95285},
																																			expr: &anyMatcher{
																																				line: 2890, col: 9, offset: 95286,
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2886, col: 12, offset: 95178},
																																			val:        "\n",
																																			ignoreCase: false,
																																			want:       "\"\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2886, col: 19, offset: 95185},
																																			val:        "\r\n",
																																			ignoreCase: false,
																																			want:       "\"\\r\\n\"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 2886, col: 28, offset: 95194},
																																			run: (*parser).callonListElements472,
																																			expr: &litMatcher{
																																				pos:        position{line: 2886, col: 28, offset: 95194},
																																				val:        "\r",
																																				ignoreCase: false,
																																				want:       "\"\\r\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 1317, col: 5, offset: 44164},
																								label: "content",
																								expr: &actionExpr{
																									pos: position{line: 1317, col: 14, offset: 44173},
																									run: (*parser).callonListElements475,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1317, col: 14, offset: 44173},
																										expr: &charClassMatcher{
																											pos:        position{line: 1317, col: 14, offset: 44173},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2893, col: 8, offset: 95335},
																								alternatives: []interface{}{
																									&notExpr{
																										pos: position{line: 2890, col: 8, offset: 95285},
																										expr: &anyMatcher{
																											line: 2890, col: 9, offset: 95286,
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2886, col: 12, offset: 95178},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2886, col: 19, offset: 95185},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&actionExpr{
																										pos: position{line: 2886, col: 28, offset: 95194},
																										run: (*parser).callonListElements483,
																										expr: &litMatcher{
																											pos:        position{line: 2886, col: 28, offset: 95194},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1536, col: 9, offset: 51194},
																run: (*parser).callonListElements485,
																expr: &seqExpr{
																	pos: position{line: 1536, col: 9, offset: 51194},
																	exprs: []interface{}{
																		&actionExpr{
																			pos: position{line: 2882, col: 11, offset: 95109},
																			run: (*parser).callonListElements487,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2882, col: 11, offset: 95109},
																				expr: &charClassMatcher{
																					pos:        position{line: 2882, col: 12, offset: 95110},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1537, col: 9, offset: 51246},
																			label: "content",
																			expr: &actionExpr{
																				pos: position{line: 1537, col: 18, offset: 51255},
																				run: (*parser).callonListElements491,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 1537, col: 18, offset: 51255},
																					expr: &charClassMatcher{
																						pos:        position{line: 1537, col: 18, offset: 51255},
																						val:        "[^\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2893, col: 8, offset: 95335},
																			alternatives: []interface{}{
																				&notExpr{
																					pos: position{line: 2890, col: 8, offset: 95285},
																					expr: &anyMatcher{
																						line: 2890, col: 9, offset: 95286,
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2886, col: 12, offset: 95178},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2886, col: 19, offset: 95185},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&actionExpr{
																					pos: position{line: 2886, col: 28, offset: 95194},
																					run: (*parser).callonListElements499,
																					expr: &litMatcher{
																						pos:        position{line: 2886, col: 28, offset: 95194},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1251, col: 5, offset: 41964},
							label: "otherElements",
							expr: &ruleRefExpr{
								pos:  position{line: 1251, col: 20, offset: 41979},
								name: "OtherListElements",
							},
						},
					},
				},
			},
		},
		{
			name: "OtherListElements",
			pos:  position{line: 1261, col: 1, offset: 42239},
			expr: &actionExpr{
				pos: position{line: 1261, col: 22, offset: 42260},
				run: (*parser).callonOtherListElements1,
				expr: &labeledExpr{
					pos:   position{line: 1261, col: 22, offset: 42260},
					label: "otherElements",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1261, col: 36, offset: 42274},
						expr: &ruleRefExpr{
							pos:  position{line: 1261, col: 36, offset: 42274},
							name: "OtherListElement",
						},
					},
				},
			},
		},
		{
			name: "OtherListElement",
			pos:  position{line: 1265, col: 1, offset: 42358},
			expr: &actionExpr{
				pos: position{line: 1266, col: 5, offset: 42497},
				run: (*parser).callonOtherListElement1,
				expr: &seqExpr{
					pos: position{line: 1266, col: 5, offset: 42497},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1266, col: 5, offset: 42497},
							expr: &notExpr{
								pos: position{line: 2890, col: 8, offset: 95285},
								expr: &anyMatcher{
									line: 2890, col: 9, offset: 95286,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1267, col: 5, offset: 42507},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1268, col: 9, offset: 42525},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1268, col: 13, offset: 42529},
										run: (*parser).callonOtherListElement8,
										expr: &seqExpr{
											pos: position{line: 1268, col: 13, offset: 42529},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 1268, col: 13, offset: 42529},
													expr: &actionExpr{
														pos: position{line: 482, col: 14, offset: 15644},
														run: (*parser).callonOtherListElement11,
														expr: &seqExpr{
															pos: position{line: 482, col: 14, offset: 15644},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 482, col: 14, offset: 15644},
																	expr: &notExpr{
																		pos: position{line: 2890, col: 8, offset: 95285},
																		expr: &anyMatcher{
																			line: 2890, col: 9, offset: 95286,
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 482, col: 19, offset: 15649},
																	expr: &choiceExpr{
																		pos: position{line: 2878, col: 10, offset: 95044},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2878, col: 10, offset: 95044},
																				val:        " ",
																				ignoreCase: false,
																				want:       "\" \"",
																			},
																			&actionExpr{
																				pos: position{line: 2878, col: 16, offset: 95050},
																				run: (*parser).callonOtherListElement19,
																				expr: &litMatcher{
																					pos:        position{line: 2878, col: 16, offset: 95050},
																					val:        "\t",
																					ignoreCase: false,
																					want:       "\"\\t\"",
																				},
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2893, col: 8, offset: 95335},
																	alternatives: []interface{}{
																		&notExpr{
																			pos: position{line: 2890, col: 8, offset: 95285},
																			expr: &anyMatcher{
																				line: 2890, col: 9, offset: 95286,
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2886, col: 12, offset: 95178},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2886, col: 19, offset: 95185},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&actionExpr{
																			pos: position{line: 2886, col: 28, offset: 95194},
																			run: (*parser).callonOtherListElement26,
																			expr: &litMatcher{
																				pos:        position{line: 2886, col: 28, offset: 95194},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1269, col: 13, offset: 42553},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 1385, col: 5, offset: 46170},
														run: (*parser).callonOtherListElement29,
														expr: &seqExpr{
															pos: position{line: 1385, col: 5, offset: 46170},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1385, col: 5, offset: 46170},
																	label: "prefix",
																	expr: &actionExpr{
																		pos: position{line: 1392, col: 5, offset: 46378},
																		run: (*parser).callonOtherListElement32,
																		expr: &seqExpr{
																			pos: position{line: 1392, col: 5, offset: 46378},
																			exprs: []interface{}{
																				&zeroOrMoreExpr{
																					pos: position{line: 1392, col: 5, offset: 46378},
																					expr: &choiceExpr{
																						pos: position{line: 2878, col: 10, offset: 95044},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2878, col: 10, offset: 95044},
																								val:        " ",
																								ignoreCase: false,
																								want:       "\" \"",
																							},
																							&actionExpr{
																								pos: position{line: 2878, col: 16, offset: 95050},
																								run: (*parser).callonOtherListElement37,
																								expr: &litMatcher{
																									pos:        position{line: 2878, col: 16, offset: 95050},
																									val:        "\t",
																									ignoreCase: false,
																									want:       "\"\\t\"",
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1392, col: 12, offset: 46385},
																					label: "prefix",
																					expr: &choiceExpr{
																						pos: position{line: 1394, col: 9, offset: 46448},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 1394, col: 9, offset: 46448},
																								run: (*parser).callonOtherListElement41,
																								expr: &seqExpr{
																									pos: position{line: 1394, col: 9, offset: 46448},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 1394, col: 9, offset: 46448},
																											label: "depth",
																											expr: &actionExpr{
																												pos: position{line: 1394, col: 16, offset: 46455},
																												run: (*parser).callonOtherListElement44,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 1394, col: 16, offset: 46455},
																													expr: &litMatcher{
																														pos:        position{line: 1394, col: 17, offset: 46456},
																														val:        ".",
																														ignoreCase: false,
																														want:       "\".\"",
																													},
																												},
																											},
																										},
																										&andCodeExpr{
																											pos: position{line: 1398, col: 9, offset: 46556},
																											run: (*parser).callonOtherListElement47,
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1417, col: 11, offset: 47273},
																								run: (*parser).callonOtherListElement48,
																								expr: &seqExpr{
																									pos: position{line: 1417, col: 11, offset: 47273},
																									exprs: []interface{}{
																										&oneOrMoreExpr{
																											pos: position{line: 1417, col: 11, offset: 47273},
																											expr: &charClassMatcher{
																												pos:        position{line: 1417, col: 12, offset: 47274},
																												val:        "[0-9]",
																												ranges:     []rune{'0', '9'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 1417, col: 20, offset: 47282},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1419, col: 13, offset: 47399},
																								run: (*parser).callonOtherListElement53,
																								expr: &seqExpr{
																									pos: position{line: 1419, col: 13, offset: 47399},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 1419, col: 14, offset: 47400},
																											val:        "[a-z]",
																											ranges:     []rune{'a', 'z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&litMatcher{
																											pos:        position{line: 1419, col: 21, offset: 47407},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1421, col: 13, offset: 47527},
																								run: (*parser).callonOtherListElement57,
																								expr: &seqExpr{
																									pos: position{line: 1421, col: 13, offset: 47527},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 1421, col: 14, offset: 47528},
																											val:        "[A-Z]",
																											ranges:     []rune{'A', 'Z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&litMatcher{
																											pos:        position{line: 1421, col: 21, offset: 47535},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1423, col: 13, offset: 47655},
																								run: (*parser).callonOtherListElement61,
																								expr: &seqExpr{
																									pos: position{line: 1423, col: 13, offset: 47655},
																									exprs: []interface{}{
																										&oneOrMoreExpr{
																											pos: position{line: 1423, col: 13, offset: 47655},
																											expr: &charClassMatcher{
																												pos:        position{line: 1423, col: 14, offset: 47656},
																												val:        "[ivxdlcm]",
																												chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 1423, col: 26, offset: 47668},
																											val:        ")",
																											ignoreCase: false,
																											want:       "\")\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1425, col: 13, offset: 47788},
																								run: (*parser).callonOtherListElement66,
																								expr: &seqExpr{
																									pos: position{line: 1425, col: 13, offset: 47788},
																									exprs: []interface{}{
																										&oneOrMoreExpr{
																											pos: position{line: 1425, col: 13, offset: 47788},
																											expr: &charClassMatcher{
																												pos:        position{line: 1425, col: 14, offset: 47789},
																												val:        "[IVXDLCM]",
																												chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 1425, col: 26, offset: 47801},
																											val:        ")",
																											ignoreCase: false,
																											want:       "\")\"",
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2882, col: 11, offset: 95109},
																					run: (*parser).callonOtherListElement71,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2882, col: 11, offset: 95109},
																						expr: &charClassMatcher{
																							pos:        position{line: 2882, col: 12, offset: 95110},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1386, col: 5, offset: 46209},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 1325, col: 5, offset: 44370},
																		run: (*parser).callonOtherListElement75,
																		expr: &seqExpr{
																			pos: position{line: 1325, col: 5, offset: 44370},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1325, col: 5, offset: 44370},
																					label: "rawline",
																					expr: &actionExpr{
																						pos: position{line: 1325, col: 14, offset: 44379},
																						run: (*parser).callonOtherListElement78,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1325, col: 14, offset: 44379},
																							expr: &charClassMatcher{
																								pos:        position{line: 1325, col: 14, offset: 44379},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2893, col: 8, offset: 95335},
																					alternatives: []interface{}{
																						&notExpr{
																							pos: position{line: 2890, col: 8, offset: 95285},
																							expr: &anyMatcher{
																								line: 2890, col: 9, offset: 95286,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2886, col: 12, offset: 95178},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2886, col: 19, offset: 95185},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&actionExpr{
																							pos: position{line: 2886, col: 28, offset: 95194},
																							run: (*parser).callonOtherListElement86,
																							expr: &litMatcher{
																								pos:        position{line: 2886, col: 28, offset: 95194},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1272, col: 13, offset: 42645},
										run: (*parser).callonOtherListElement88,
										expr: &seqExpr{
											pos: position{line: 1272, col: 13, offset: 42645},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1272, col: 13, offset: 42645},
													label: "attributes",
													expr: &oneOrMoreExpr{
														pos: position{line: 1272, col: 24, offset: 42656},
														expr: &ruleRefExpr{
															pos:  position{line: 1272, col: 25, offset: 42657},
															name: "BlockAttributes",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1273, col: 13, offset: 42688},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 1385, col: 5, offset: 46170},
														run: (*parser).callonOtherListElement94,
														expr: &seqExpr{
															pos: position{line: 1385, col: 5, offset: 46170},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1385, col: 5, offset: 46170},
																	label: "prefix",
																	expr: &actionExpr{
																		pos: position{line: 1392, col: 5, offset: 46378},
																		run: (*parser).callonOtherListElement97,
																		expr: &seqExpr{
																			pos: position{line: 1392, col: 5, offset: 46378},
																			exprs: []interface{}{
																				&zeroOrMoreExpr{
																					pos: position{line: 1392, col: 5, offset: 46378},
																					expr: &choiceExpr{
																						pos: position{line: 2878, col: 10, offset: 95044},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2878, col: 10, offset: 95044},
																								val:        " ",
																								ignoreCase: false,
																								want:       "\" \"",
																							},
																							&actionExpr{
																								pos: position{line: 2878, col: 16, offset: 95050},
																								run: (*parser).callonOtherListElement102,
																								expr: &litMatcher{
																									pos:        position{line: 2878, col: 16, offset: 95050},
																									val:        "\t",
																									ignoreCase: false,
																									want:       "\"\\t\"",
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1392, col: 12, offset: 46385},
																					label: "prefix",
																					expr: &choiceExpr{
																						pos: position{line: 1394, col: 9, offset: 46448},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 1394, col: 9, offset: 46448},
																								run: (*parser).callonOtherListElement106,
																								expr: &seqExpr{
																									pos: position{line: 1394, col: 9, offset: 46448},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 1394, col: 9, offset: 46448},
																											label: "depth",
																											expr: &actionExpr{
																												pos: position{line: 1394, col: 16, offset: 46455},
																												run: (*parser).callonOtherListElement109,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 1394, col: 16, offset: 46455},
																													expr: &litMatcher{
																														pos:        position{line: 1394, col: 17, offset: 46456},
																														val:        ".",
																														ignoreCase: false,
																														want:       "\".\"",
																													},
																												},
																											},
																										},
																										&andCodeExpr{
																											pos: position{line: 1398, col: 9, offset: 46556},
																											run: (*parser).callonOtherListElement112,
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1417, col: 11, offset: 47273},
																								run: (*parser).callonOtherListElement113,
																								expr: &seqExpr{
																									pos: position{line: 1417, col: 11, offset: 47273},
																									exprs: []interface{}{
																										&oneOrMoreExpr{
																											pos: position{line: 1417, col: 11, offset: 47273},
																											expr: &charClassMatcher{
																												pos:        position{line: 1417, col: 12, offset: 47274},
																												val:        "[0-9]",
																												ranges:     []rune{'0', '9'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 1417, col: 20, offset: 47282},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1419, col: 13, offset: 47399},
																								run: (*parser).callonOtherListElement118,
																								expr: &seqExpr{
																									pos: position{line: 1419, col: 13, offset: 47399},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 1419, col: 14, offset: 47400},
																											val:        "[a-z]",
																											ranges:     []rune{'a', 'z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&litMatcher{
																											pos:        position{line: 1419, col: 21, offset: 47407},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1421, col: 13, offset: 47527},
																								run: (*parser).callonOtherListElement122,
																								expr: &seqExpr{
																									pos: position{line: 1421, col: 13, offset: 47527},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 1421, col: 14, offset: 47528},
																											val:        "[A-Z]",
																											ranges:     []rune{'A', 'Z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&litMatcher{
																											pos:        position{line: 1421, col: 21, offset: 47535},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1423, col: 13, offset: 47655},
																								run: (*parser).callonOtherListElement126,
																								expr: &seqExpr{
																									pos: position{line: 1423, col: 13, offset: 47655},
																									exprs: []interface{}{
																										&oneOrMoreExpr{
																											pos: position{line: 1423, col: 13, offset: 47655},
																											expr: &charClassMatcher{
																												pos:        position{line: 1423, col: 14, offset: 47656},
																												val:        "[ivxdlcm]",
																												chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 1423, col: 26, offset: 47668},
																											val:        ")",
																											ignoreCase: false,
																											want:       "\")\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1425, col: 13, offset: 47788},
																								run: (*parser).callonOtherListElement131,
																								expr: &seqExpr{
																									pos: position{line: 1425, col: 13, offset: 47788},
																									exprs: []interface{}{
																										&oneOrMoreExpr{
																											pos: position{line: 1425, col: 13, offset: 47788},
																											expr: &charClassMatcher{
																												pos:        position{line: 1425, col: 14, offset: 47789},
																												val:        "[IVXDLCM]",
																												chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 1425, col: 26, offset: 47801},
																											val:        ")",
																											ignoreCase: false,
																											want:       "\")\"",
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2882, col: 11, offset: 95109},
																					run: (*parser).callonOtherListElement136,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2882, col: 11, offset: 95109},
																						expr: &charClassMatcher{
																							pos:        position{line: 2882, col: 12, offset: 95110},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1386, col: 5, offset: 46209},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 1325, col: 5, offset: 44370},
																		run: (*parser).callonOtherListElement140,
																		expr: &seqExpr{
																			pos: position{line: 1325, col: 5, offset: 44370},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1325, col: 5, offset: 44370},
																					label: "rawline",
																					expr: &actionExpr{
																						pos: position{line: 1325, col: 14, offset: 44379},
																						run: (*parser).callonOtherListElement143,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1325, col: 14, offset: 44379},
																							expr: &charClassMatcher{
																								pos:        position{line: 1325, col: 14, offset: 44379},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2893, col: 8, offset: 95335},
																					alternatives: []interface{}{
																						&notExpr{
																							pos: position{line: 2890, col: 8, offset: 95285},
																							expr: &anyMatcher{
																								line: 2890, col: 9, offset: 95286,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2886, col: 12, offset: 95178},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2886, col: 19, offset: 95185},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&actionExpr{
																							pos: position{line: 2886, col: 28, offset: 95194},
																							run: (*parser).callonOtherListElement151,
																							expr: &litMatcher{
																								pos:        position{line: 2886, col: 28, offset: 95194},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1276, col: 13, offset: 42816},
										run: (*parser).callonOtherListElement153,
										expr: &seqExpr{
											pos: position{line: 1276, col: 13, offset: 42816},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 1276, col: 13, offset: 42816},
													expr: &actionExpr{
														pos: position{line: 482, col: 14, offset: 15644},
														run: (*parser).callonOtherListElement156,
														expr: &seqExpr{
															pos: position{line: 482, col: 14, offset: 15644},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 482, col: 14, offset: 15644},
																	expr: &notExpr{
																		pos: position{line: 2890, col: 8, offset: 95285},
																		expr: &anyMatcher{
																			line: 2890, col: 9, offset: 95286,
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 482, col: 19, offset: 15649},
																	expr: &choiceExpr{
																		pos: position{line: 2878, col: 10, offset: 95044},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2878, col: 10, offset: 95044},
																				val:        " ",
																				ignoreCase: false,
																				want:       "\" \"",
																			},
																			&actionExpr{
																				pos: position{line: 2878, col: 16, offset: 95050},
																				run: (*parser).callonOtherListElement164,
																				expr: &litMatcher{
																					pos:        position{line: 2878, col: 16, offset: 95050},
																					val:        "\t",
																					ignoreCase: false,
																					want:       "\"\\t\"",
																				},
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2893, col: 8, offset: 95335},
																	alternatives: []interface{}{
																		&notExpr{
																			pos: position{line: 2890, col: 8, offset: 95285},
																			expr: &anyMatcher{
																				line: 2890, col: 9, offset: 95286,
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2886, col: 12, offset: 95178},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2886, col: 19, offset: 95185},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&actionExpr{
																			pos: position{line: 2886, col: 28, offset: 95194},
																			run: (*parser).callonOtherListElement171,
																			expr: &litMatcher{
																				pos:        position{line: 2886, col: 28, offset: 95194},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1277, col: 13, offset: 42840},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 1435, col: 5, offset: 48067},
														run: (*parser).callonOtherListElement174,
														expr: &seqExpr{
															pos: position{line: 1435, col: 5, offset: 48067},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1435, col: 5, offset: 48067},
																	label: "prefix",
																	expr: &actionExpr{
																		pos: position{line: 1442, col: 5, offset: 48340},
																		run: (*parser).callonOtherListElement177,
																		expr: &seqExpr{
																			pos: position{line: 1442, col: 5, offset: 48340},
																			exprs: []interface{}{
																				&zeroOrMoreExpr{
																					pos: position{line: 1442, col: 5, offset: 48340},
																					expr: &choiceExpr{
																						pos: position{line: 2878, col: 10, offset: 95044},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2878, col: 10, offset: 95044},
																								val:        " ",
																								ignoreCase: false,
																								want:       "\" \"",
																							},
																							&actionExpr{
																								pos: position{line: 2878, col: 16, offset: 95050},
																								run: (*parser).callonOtherListElement182,
																								expr: &litMatcher{
																									pos:        position{line: 2878, col: 16, offset: 95050},
																									val:        "\t",
																									ignoreCase: false,
																									want:       "\"\\t\"",
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1442, col: 12, offset: 48347},
																					label: "prefix",
																					expr: &choiceExpr{
																						pos: position{line: 1442, col: 20, offset: 48355},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 1444, col: 9, offset: 48412},
																								run: (*parser).callonOtherListElement186,
																								expr: &seqExpr{
																									pos: position{line: 1444, col: 9, offset: 48412},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 1444, col: 9, offset: 48412},
																											label: "depth",
																											expr: &actionExpr{
																												pos: position{line: 1444, col: 16, offset: 48419},
																												run: (*parser).callonOtherListElement189,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 1444, col: 16, offset: 48419},
																													expr: &litMatcher{
																														pos:        position{line: 1444, col: 17, offset: 48420},
																														val:        "*",
																														ignoreCase: false,
																														want:       "\"*\"",
																													},
																												},
																											},
																										},
																										&andCodeExpr{
																											pos: position{line: 1448, col: 9, offset: 48520},
																											run: (*parser).callonOtherListElement192,
																										},
																									},
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 1465, col: 14, offset: 49227},
																								label: "depth",
																								expr: &actionExpr{
																									pos: position{line: 1465, col: 21, offset: 49234},
																									run: (*parser).callonOtherListElement194,
																									expr: &litMatcher{
																										pos:        position{line: 1465, col: 22, offset: 49235},
																										val:        "-",
																										ignoreCase: false,
																										want:       "\"-\"",
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2882, col: 11, offset: 95109},
																					run: (*parser).callonOtherListElement196,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2882, col: 11, offset: 95109},
																						expr: &charClassMatcher{
																							pos:        position{line: 2882, col: 12, offset: 95110},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1436, col: 5, offset: 48108},
																	label: "checkstyle",
																	expr: &zeroOrOneExpr{
																		pos: position{line: 1436, col: 16, offset: 48119},
																		expr: &actionExpr{
																			pos: position{line: 1472, col: 5, offset: 49396},
																			run: (*parser).callonOtherListElement201,
																			expr: &seqExpr{
																				pos: position{line: 1472, col: 5, offset: 49396},
																				exprs: []interface{}{
																					&andExpr{
																						pos: position{line: 1472, col: 5, offset: 49396},
																						expr: &litMatcher{
																							pos:        position{line: 1472, col: 6, offset: 49397},
																							val:        "[",
																							ignoreCase: false,
																							want:       "\"[\"",
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 1472, col: 10, offset: 49401},
																						label: "style",
																						expr: &choiceExpr{
																							pos: position{line: 1473, col: 7, offset: 49415},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 1473, col: 7, offset: 49415},
																									run: (*parser).callonOtherListElement207,
																									expr: &litMatcher{
																										pos:        position{line: 1473, col: 7, offset: 49415},
																										val:        "[ ]",
																										ignoreCase: false,
																										want:       "\"[ ]\"",
																									},
																								},
																								&actionExpr{
																									pos: position{line: 1474, col: 7, offset: 49460},
																									run: (*parser).callonOtherListElement209,
																									expr: &litMatcher{
																										pos:        position{line: 1474, col: 7, offset: 49460},
																										val:        "[*]",
																										ignoreCase: false,
																										want:       "\"[*]\"",
																									},
																								},
																								&actionExpr{
																									pos: position{line: 1475, col: 7, offset: 49503},
																									run: (*parser).callonOtherListElement211,
																									expr: &litMatcher{
																										pos:        position{line: 1475, col: 7, offset: 49503},
																										val:        "[x]",
																										ignoreCase: false,
																										want:       "\"[x]\"",
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2882, col: 11, offset: 95109},
																						run: (*parser).callonOtherListElement213,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 2882, col: 11, offset: 95109},
																							expr: &charClassMatcher{
																								pos:        position{line: 2882, col: 12, offset: 95110},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1437, col: 5, offset: 48158},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 1325, col: 5, offset: 44370},
																		run: (*parser).callonOtherListElement217,
																		expr: &seqExpr{
																			pos: position{line: 1325, col: 5, offset: 44370},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1325, col: 5, offset: 44370},
																					label: "rawline",
																					expr: &actionExpr{
																						pos: position{line: 1325, col: 14, offset: 44379},
																						run: (*parser).callonOtherListElement220,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1325, col: 14, offset: 44379},
																							expr: &charClassMatcher{
																								pos:        position{line: 1325, col: 14, offset: 44379},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2893, col: 8, offset: 95335},
																					alternatives: []interface{}{
																						&notExpr{
																							pos: position{line: 2890, col: 8, offset: 95285},
																							expr: &anyMatcher{
																								line: 2890, col: 9, offset: 95286,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2886, col: 12, offset: 95178},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2886, col: 19, offset: 95185},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&actionExpr{
																							pos: position{line: 2886, col: 28, offset: 95194},
																							run: (*parser).callonOtherListElement228,
																							expr: &litMatcher{
																								pos:        position{line: 2886, col: 28, offset: 95194},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1280, col: 13, offset: 42934},
										run: (*parser).callonOtherListElement230,
										expr: &seqExpr{
											pos: position{line: 1280, col: 13, offset: 42934},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1280, col: 13, offset: 42934},
													label: "attributes",
													expr: &oneOrMoreExpr{
														pos: position{line: 1280, col: 24, offset: 42945},
														expr: &ruleRefExpr{
															pos:  position{line: 1280, col: 25, offset: 42946},
															name: "BlockAttributes",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1281, col: 13, offset: 42977},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 1435, col: 5, offset: 48067},
														run: (*parser).callonOtherListElement236,
														expr: &seqExpr{
															pos: position{line: 1435, col: 5, offset: 48067},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1435, col: 5, offset: 48067},
																	label: "prefix",
																	expr: &actionExpr{
																		pos: position{line: 1442, col: 5, offset: 48340},
																		run: (*parser).callonOtherListElement239,
																		expr: &seqExpr{
																			pos: position{line: 1442, col: 5, offset: 48340},
																			exprs: []interface{}{
																				&zeroOrMoreExpr{
																					pos: position{line: 1442, col: 5, offset: 48340},
																					expr: &choiceExpr{
																						pos: position{line: 2878, col: 10, offset: 95044},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2878, col: 10, offset: 95044},
																								val:        " ",
																								ignoreCase: false,
																								want:       "\" \"",
																							},
																							&actionExpr{
																								pos: position{line: 2878, col: 16, offset: 95050},
																								run: (*parser).callonOtherListElement244,
																								expr: &litMatcher{
																									pos:        position{line: 2878, col: 16, offset: 95050},
																									val:        "\t",
																									ignoreCase: false,
																									want:       "\"\\t\"",
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1442, col: 12, offset: 48347},
																					label: "prefix",
																					expr: &choiceExpr{
																						pos: position{line: 1442, col: 20, offset: 48355},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 1444, col: 9, offset: 48412},
																								run: (*parser).callonOtherListElement248,
																								expr: &seqExpr{
																									pos: position{line: 1444, col: 9, offset: 48412},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 1444, col: 9, offset: 48412},
																											label: "depth",
																											expr: &actionExpr{
																												pos: position{line: 1444, col: 16, offset: 48419},
																												run: (*parser).callonOtherListElement251,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 1444, col: 16, offset: 48419},
																													expr: &litMatcher{
																														pos:        position{line: 1444, col: 17, offset: 48420},
																														val:        "*",
																														ignoreCase: false,
																														want:       "\"*\"",
																													},
																												},
																											},
																										},
																										&andCodeExpr{
																											pos: position{line: 1448, col: 9, offset: 48520},
																											run: (*parser).callonOtherListElement254,
																										},
																									},
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 1465, col: 14, offset: 49227},
																								label: "depth",
																								expr: &actionExpr{
																									pos: position{line: 1465, col: 21, offset: 49234},
																									run: (*parser).callonOtherListElement256,
																									expr: &litMatcher{
																										pos:        position{line: 1465, col: 22, offset: 49235},
																										val:        "-",
																										ignoreCase: false,
																										want:       "\"-\"",
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2882, col: 11, offset: 95109},
																					run: (*parser).callonOtherListElement258,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2882, col: 11, offset: 95109},
																						expr: &charClassMatcher{
																							pos:        position{line: 2882, col: 12, offset: 95110},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1436, col: 5, offset: 48108},
																	label: "checkstyle",
																	expr: &zeroOrOneExpr{
																		pos: position{line: 1436, col: 16, offset: 48119},
																		expr: &actionExpr{
																			pos: position{line: 1472, col: 5, offset: 49396},
																			run: (*parser).callonOtherListElement263,
																			expr: &seqExpr{
																				pos: position{line: 1472, col: 5, offset: 49396},
																				exprs: []interface{}{
																					&andExpr{
																						pos: position{line: 1472, col: 5, offset: 49396},
																						expr: &litMatcher{
																							pos:        position{line: 1472, col: 6, offset: 49397},
																							val:        "[",
																							ignoreCase: false,
																							want:       "\"[\"",
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 1472, col: 10, offset: 49401},
																						label: "style",
																						expr: &choiceExpr{
																							pos: position{line: 1473, col: 7, offset: 49415},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 1473, col: 7, offset: 49415},
																									run: (*parser).callonOtherListElement269,
																									expr: &litMatcher{
																										pos:        position{line: 1473, col: 7, offset: 49415},
																										val:        "[ ]",
																										ignoreCase: false,
																										want:       "\"[ ]\"",
																									},
																								},
																								&actionExpr{
																									pos: position{line: 1474, col: 7, offset: 49460},
																									run: (*parser).callonOtherListElement271,
																									expr: &litMatcher{
																										pos:        position{line: 1474, col: 7, offset: 49460},
																										val:        "[*]",
																										ignoreCase: false,
																										want:       "\"[*]\"",
																									},
																								},
																								&actionExpr{
																									pos: position{line: 1475, col: 7, offset: 49503},
																									run: (*parser).callonOtherListElement273,
																									expr: &litMatcher{
																										pos:        position{line: 1475, col: 7, offset: 49503},
																										val:        "[x]",
																										ignoreCase: false,
																										want:       "\"[x]\"",
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2882, col: 11, offset: 95109},
																						run: (*parser).callonOtherListElement275,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 2882, col: 11, offset: 95109},
																							expr: &charClassMatcher{
																								pos:        position{line: 2882, col: 12, offset: 95110},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1437, col: 5, offset: 48158},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 1325, col: 5, offset: 44370},
																		run: (*parser).callonOtherListElement279,
																		expr: &seqExpr{
																			pos: position{line: 1325, col: 5, offset: 44370},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1325, col: 5, offset: 44370},
																					label: "rawline",
																					expr: &actionExpr{
																						pos: position{line: 1325, col: 14, offset: 44379},
																						run: (*parser).callonOtherListElement282,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1325, col: 14, offset: 44379},
																							expr: &charClassMatcher{
																								pos:        position{line: 1325, col: 14, offset: 44379},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2893, col: 8, offset: 95335},
																					alternatives: []interface{}{
																						&notExpr{
																							pos: position{line: 2890, col: 8, offset: 95285},
																							expr: &anyMatcher{
																								line: 2890, col: 9, offset: 95286,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2886, col: 12, offset: 95178},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2886, col: 19, offset: 95185},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&actionExpr{
																							pos: position{line: 2886, col: 28, offset: 95194},
																							run: (*parser).callonOtherListElement290,
																							expr: &litMatcher{
																								pos:        position{line: 2886, col: 28, offset: 95194},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1284, col: 13, offset: 43107},
										run: (*parser).callonOtherListElement292,
										expr: &seqExpr{
											pos: position{line: 1284, col: 13, offset: 43107},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 1284, col: 13, offset: 43107},
													expr: &actionExpr{
														pos: position{line: 482, col: 14, offset: 15644},
														run: (*parser).callonOtherListElement295,
														expr: &seqExpr{
															pos: position{line: 482, col: 14, offset: 15644},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 482, col: 14, offset: 15644},
																	expr: &notExpr{
																		pos: position{line: 2890, col: 8, offset: 95285},
																		expr: &anyMatcher{
																			line: 2890, col: 9, offset: 95286,
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 482, col: 19, offset: 15649},
																	expr: &choiceExpr{
																		pos: position{line: 2878, col: 10, offset: 95044},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2878, col: 10, offset: 95044},
																				val:        " ",
																				ignoreCase: false,
																				want:       "\" \"",
																			},
																			&actionExpr{
																				pos: position{line: 2878, col: 16, offset: 95050},
																				run: (*parser).callonOtherListElement303,
																				expr: &litMatcher{
																					pos:        position{line: 2878, col: 16, offset: 95050},
																					val:        "\t",
																					ignoreCase: false,
																					want:       "\"\\t\"",
																				},
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2893, col: 8, offset: 95335},
																	alternatives: []interface{}{
																		&notExpr{
																			pos: position{line: 2890, col: 8, offset: 95285},
																			expr: &anyMatcher{
																				line: 2890, col: 9, offset: 95286,
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2886, col: 12, offset: 95178},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2886, col: 19, offset: 95185},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&actionExpr{
																			pos: position{line: 2886, col: 28, offset: 95194},
																			run: (*parser).callonOtherListElement310,
																			expr: &litMatcher{
																				pos:        position{line: 2886, col: 28, offset: 95194},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1285, col: 13, offset: 43131},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 1558, col: 5, offset: 51792},
														run: (*parser).callonOtherListElement313,
														expr: &seqExpr{
															pos: position{line: 1558, col: 5, offset: 51792},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1558, col: 5, offset: 51792},
																	label: "ref",
																	expr: &actionExpr{
																		pos: position{line: 1564, col: 5, offset: 51993},
																		run: (*parser).callonOtherListElement316,
																		expr: &seqExpr{
																			pos: position{line: 1564, col: 5, offset: 51993},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 1564, col: 5, offset: 51993},
																					val:        "<",
																					ignoreCase: false,
																					want:       "\"<\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 1564, col: 9, offset: 51997},
																					label: "ref",
																					expr: &actionExpr{
																						pos: position{line: 1564, col: 14, offset: 52002},
																						run: (*parser).callonOtherListElement320,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1564, col: 14, offset: 52002},
																							expr: &charClassMatcher{
																								pos:        position{line: 1564, col: 14, offset: 52002},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 1564, col: 62, offset: 52050},
																					val:        ">",
																					ignoreCase: false,
																					want:       "\">\"",
																				},
																				&actionExpr{
																					pos: position{line: 2882, col: 11, offset: 95109},
																					run: (*parser).callonOtherListElement324,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2882, col: 11, offset: 95109},
																						expr: &charClassMatcher{
																							pos:        position{line: 2882, col: 12, offset: 95110},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1559, col: 5, offset: 51828},
																	label: "description",
																	expr: &actionExpr{
																		pos: position{line: 1569, col: 5, offset: 52128},
																		run: (*parser).callonOtherListElement328,
																		expr: &seqExpr{
																			pos: position{line: 1569, col: 5, offset: 52128},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1569, col: 5, offset: 52128},
																					label: "rawline",
																					expr: &actionExpr{
																						pos: position{line: 1569, col: 14, offset: 52137},
																						run: (*parser).callonOtherListElement331,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1569, col: 14, offset: 52137},
																							expr: &charClassMatcher{
																								pos:        position{line: 1569, col: 14, offset: 52137},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2893, col: 8, offset: 95335},
																					alternatives: []interface{}{
																						&notExpr{
																							pos: position{line: 2890, col: 8, offset: 95285},
																							expr: &anyMatcher{
																								line: 2890, col: 9, offset: 95286,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2886, col: 12, offset: 95178},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2886, col: 19, offset: 95185},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&actionExpr{
																							pos: position{line: 2886, col: 28, offset: 95194},
																							run: (*parser).callonOtherListElement339,
																							expr: &litMatcher{
																								pos:        position{line: 2886, col: 28, offset: 95194},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1288, col: 13, offset: 43223},
										run: (*parser).callonOtherListElement341,
										expr: &seqExpr{
											pos: position{line: 1288, col: 13, offset: 43223},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1288, col: 13, offset: 43223},
													label: "attributes",
													expr: &oneOrMoreExpr{
														pos: position{line: 1288, col: 24, offset: 43234},
														expr: &ruleRefExpr{
															pos:  position{line: 1288, col: 25, offset: 43235},
															name: "BlockAttributes",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1289, col: 13, offset: 43266},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 1558, col: 5, offset: 51792},
														run: (*parser).callonOtherListElement347,
														expr: &seqExpr{
															pos: position{line: 1558, col: 5, offset: 51792},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1558, col: 5, offset: 51792},
																	label: "ref",
																	expr: &actionExpr{
																		pos: position{line: 1564, col: 5, offset: 51993},
																		run: (*parser).callonOtherListElement350,
																		expr: &seqExpr{
																			pos: position{line: 1564, col: 5, offset: 51993},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 1564, col: 5, offset: 51993},
																					val:        "<",
																					ignoreCase: false,
																					want:       "\"<\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 1564, col: 9, offset: 51997},
																					label: "ref",
																					expr: &actionExpr{
																						pos: position{line: 1564, col: 14, offset: 52002},
																						run: (*parser).callonOtherListElement354,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1564, col: 14, offset: 52002},
																							expr: &charClassMatcher{
																								pos:        position{line: 1564, col: 14, offset: 52002},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 1564, col: 62, offset: 52050},
																					val:        ">",
																					ignoreCase: false,
																					want:       "\">\"",
																				},
																				&actionExpr{
																					pos: position{line: 2882, col: 11, offset: 95109},
																					run: (*parser).callonOtherListElement358,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2882, col: 11, offset: 95109},
																						expr: &charClassMatcher{
																							pos:        position{line: 2882, col: 12, offset: 95110},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1559, col: 5, offset: 51828},
																	label: "description",
																	expr: &actionExpr{
																		pos: position{line: 1569, col: 5, offset: 52128},
																		run: (*parser).callonOtherListElement362,
																		expr: &seqExpr{
																			pos: position{line: 1569, col: 5, offset: 52128},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1569, col: 5, offset: 52128},
																					label: "rawline",
																					expr: &actionExpr{
																						pos: position{line: 1569, col: 14, offset: 52137},
																						run: (*parser).callonOtherListElement365,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1569, col: 14, offset: 52137},
																							expr: &charClassMatcher{
																								pos:        position{line: 1569, col: 14, offset: 52137},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2893, col: 8, offset: 95335},
																					alternatives: []interface{}{
																						&notExpr{
																							pos: position{line: 2890, col: 8, offset: 95285},
																							expr: &anyMatcher{
																								line: 2890, col: 9, offset: 95286,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2886, col: 12, offset: 95178},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2886, col: 19, offset: 95185},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&actionExpr{
																							pos: position{line: 2886, col: 28, offset: 95194},
																							run: (*parser).callonOtherListElement373,
																							expr: &litMatcher{
																								pos:        position{line: 2886, col: 28, offset: 95194},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1292, col: 11, offset: 43392},
										name: "ListElementContinuation",
									},
									&actionExpr{
										pos: position{line: 1293, col: 13, offset: 43428},
										run: (*parser).callonOtherListElement376,
										expr: &seqExpr{
											pos: position{line: 1293, col: 13, offset: 43428},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 1293, col: 13, offset: 43428},
													expr: &actionExpr{
														pos: position{line: 482, col: 14, offset: 15644},
														run: (*parser).callonOtherListElement379,
														expr: &seqExpr{
															pos: position{line: 482, col: 14, offset: 15644},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 482, col: 14, offset: 15644},
																	expr: &notExpr{
																		pos: position{line: 2890, col: 8, offset: 95285},
																		expr: &anyMatcher{
																			line: 2890, col: 9, offset: 95286,
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 482, col: 19, offset: 15649},
																	expr: &choiceExpr{
																		pos: position{line: 2878, col: 10, offset: 95044},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2878, col: 10, offset: 95044},
																				val:        " ",
																				ignoreCase: false,
																				want:       "\" \"",
																			},
																			&actionExpr{
																				pos: position{line: 2878, col: 16, offset: 95050},
																				run: (*parser).callonOtherListElement387,
																				expr: &litMatcher{
																					pos:        position{line: 2878, col: 16, offset: 95050},
																					val:        "\t",
																					ignoreCase: false,
																					want:       "\"\\t\"",
																				},
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2893, col: 8, offset: 95335},
																	alternatives: []interface{}{
																		&notExpr{
																			pos: position{line: 2890, col: 8, offset: 95285},
																			expr: &anyMatcher{
																				line: 2890, col: 9, offset: 95286,
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2886, col: 12, offset: 95178},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2886, col: 19, offset: 95185},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&actionExpr{
																			pos: position{line: 2886, col: 28, offset: 95194},
																			run: (*parser).callonOtherListElement394,
																			expr: &litMatcher{
																				pos:        position{line: 2886, col: 28, offset: 95194},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1294, col: 13, offset: 43452},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 1484, col: 5, offset: 49696},
														run: (*parser).callonOtherListElement397,
														expr: &seqExpr{
															pos: position{line: 1484, col: 5, offset: 49696},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1484, col: 5, offset: 49696},
																	label: "term",
																	expr: &actionExpr{
																		pos: position{line: 1492, col: 5, offset: 49955},
																		run: (*parser).callonOtherListElement400,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1492, col: 5, offset: 49955},
																			expr: &seqExpr{
																				pos: position{line: 1492, col: 6, offset: 49956},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 1492, col: 6, offset: 49956},
																						expr: &actionExpr{
																							pos: position{line: 1497, col: 5, offset: 50087},
																							run: (*parser).callonOtherListElement404,
																							expr: &seqExpr{
																								pos: position{line: 1497, col: 5, offset: 50087},
																								exprs: []interface{}{
																									&labeledExpr{
																										pos:   position{line: 1497, col: 5, offset: 50087},
																										label: "separator",
																										expr: &actionExpr{
																											pos: position{line: 1497, col: 16, offset: 50098},
																											run: (*parser).callonOtherListElement407,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 1497, col: 16, offset: 50098},
																												expr: &litMatcher{
																													pos:        position{line: 1497, col: 17, offset: 50099},
																													val:        ":",
																													ignoreCase: false,
																													want:       "\":\"",
																												},
																											},
																										},
																									},
																									&andCodeExpr{
																										pos: position{line: 1500, col: 5, offset: 50156},
																										run: (*parser).callonOtherListElement410,
																									},
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 1492, col: 35, offset: 49985},
																						expr: &choiceExpr{
																							pos: position{line: 2893, col: 8, offset: 95335},
																							alternatives: []interface{}{
																								&notExpr{
																									pos: position{line: 2890, col: 8, offset: 95285},
																									expr: &anyMatcher{
																										line: 2890, col: 9, offset: 95286,
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2886, col: 12, offset: 95178},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2886, col: 19, offset: 95185},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&actionExpr{
																									pos: position{line: 2886, col: 28, offset: 95194},
																									run: (*parser).callonOtherListElement417,
																									expr: &litMatcher{
																										pos:        position{line: 2886, col: 28, offset: 95194},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																					},
																					&anyMatcher{
																						line: 1492, col: 40, offset: 49990,
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1485, col: 5, offset: 49731},
																	label: "separator",
																	expr: &actionExpr{
																		pos: position{line: 1497, col: 5, offset: 50087},
																		run: (*parser).callonOtherListElement421,
																		expr: &seqExpr{
																			pos: position{line: 1497, col: 5, offset: 50087},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1497, col: 5, offset: 50087},
																					label: "separator",
																					expr: &actionExpr{
																						pos: position{line: 1497, col: 16, offset: 50098},
																						run: (*parser).callonOtherListElement424,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1497, col: 16, offset: 50098},
																							expr: &litMatcher{
																								pos:        position{line: 1497, col: 17, offset: 50099},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 1500, col: 5, offset: 50156},
																					run: (*parser).callonOtherListElement427,
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1486, col: 5, offset: 49776},
																	label: "description",
																	expr: &choiceExpr{
																		pos: position{line: 1524, col: 5, offset: 50845},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 1526, col: 9, offset: 50923},
																				run: (*parser).callonOtherListElement430,
																				expr: &seqExpr{
																					pos: position{line: 1526, col: 9, offset: 50923},
																					exprs: []interface{}{
																						&zeroOrMoreExpr{
																							pos: position{line: 1526, col: 9, offset: 50923},
																							expr: &choiceExpr{
																								pos: position{line: 2878, col: 10, offset: 95044},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2878, col: 10, offset: 95044},
																										val:        " ",
																										ignoreCase: false,
																										want:       "\" \"",
																									},
																									&actionExpr{
																										pos: position{line: 2878, col: 16, offset: 95050},
																										run: (*parser).callonOtherListElement435,
																										expr: &litMatcher{
																											pos:        position{line: 2878, col: 16, offset: 95050},
																											val:        "\t",
																											ignoreCase: false,
																											want:       "\"\\t\"",
																										},
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2893, col: 8, offset: 95335},
																							alternatives: []interface{}{
																								&notExpr{
																									pos: position{line: 2890, col: 8, offset: 95285},
																									expr: &anyMatcher{
																										line: 2890, col: 9, offset: 95286,
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2886, col: 12, offset: 95178},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2886, col: 19, offset: 95185},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&actionExpr{
																									pos: position{line: 2886, col: 28, offset: 95194},
																									run: (*parser).callonOtherListElement442,
																									expr: &litMatcher{
																										pos:        position{line: 2886, col: 28, offset: 95194},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 1527, col: 9, offset: 50943},
																							expr: &actionExpr{
																								pos: position{line: 482, col: 14, offset: 15644},
																								run: (*parser).callonOtherListElement445,
																								expr: &seqExpr{
																									pos: position{line: 482, col: 14, offset: 15644},
																									exprs: []interface{}{
																										&notExpr{
																											pos: position{line: 482, col: 14, offset: 15644},
																											expr: &notExpr{
																												pos: position{line: 2890, col: 8, offset: 95285},
																												expr: &anyMatcher{
																													line: 2890, col: 9, offset: 95286,
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 482, col: 19, offset: 15649},
																											expr: &choiceExpr{
																												pos: position{line: 2878, col: 10, offset: 95044},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2878, col: 10, offset: 95044},
																														val:        " ",
																														ignoreCase: false,
																														want:       "\" \"",
																													},
																													&actionExpr{
																														pos: position{line: 2878, col: 16, offset: 95050},
																														run: (*parser).callonOtherListElement453,
																														expr: &litMatcher{
																															pos:        position{line: 2878, col: 16, offset: 95050},
																															val:        "\t",
																															ignoreCase: false,
																															want:       "\"\\t\"",
																														},
																													},
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2893, col: 8, offset: 95335},
																											alternatives: []interface{}{
																												&notExpr{
																													pos: position{line: 2890, col: 8, offset: 95285},
																													expr: &anyMatcher{
																														line: 2890, col: 9, offset: 95286,
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 2886, col: 12, offset: 95178},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2886, col: 19, offset: 95185},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&actionExpr{
																													pos: position{line: 2886, col: 28, offset: 95194},
																													run: (*parser).callonOtherListElement460,
																													expr: &litMatcher{
																														pos:        position{line: 2886, col: 28, offset: 95194},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 1528, col: 9, offset: 50963},
																							label: "content",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 1528, col: 17, offset: 50971},
																								expr: &actionExpr{
																									pos: position{line: 1310, col: 5, offset: 43944},
																									run: (*parser).callonOtherListElement464,
																									expr: &seqExpr{
																										pos: position{line: 1310, col: 5, offset: 43944},
																										exprs: []interface{}{
																											&notExpr{
																												pos: position{line: 1310, col: 5, offset: 43944},
																												expr: &actionExpr{
																													pos: position{line: 482, col: 14, offset: 15644},
																													run: (*parser).callonOtherListElement467,
																													expr: &seqExpr{
																														pos: position{line: 482, col: 14, offset: 15644},
																														exprs: []interface{}{
																															&notExpr{
																																pos: position{line: 482, col: 14, offset: 15644},
																																expr: &notExpr{
																																	pos: position{line: 2890, col: 8, offset: 95285},
																																	expr: &anyMatcher{
																																		line: 2890, col: 9, offset: 95286,
																																	},
																																},
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 482, col: 19, offset: 15649},
																																expr: &choiceExpr{
																																	pos: position{line: 2878, col: 10, offset: 95044},
																																	alternatives: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2878, col: 10, offset: 95044},
																																			val:        " ",
																																			ignoreCase: false,
																																			want:       "\" \"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 2878, col: 16, offset: 95050},
																																			run: (*parser).callonOtherListElement475,
																																			expr: &litMatcher{
																																				pos:        position{line: 2878, col: 16, offset: 95050},
																																				val:        "\t",
																																				ignoreCase: false,
																																				want:       "\"\\t\"",
																																			},
																																		},
																																	},
																																},
																															},
																															&choiceExpr{
																																pos: position{line: 2893, col: 8, offset: 95335},
																																alternatives: []interface{}{
																																	&notExpr{
																																		pos: position{line: 2890, col: 8, offset: 95285},
																																		expr: &anyMatcher{
																																			line: 2890, col: 9, offset: 95286,
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2886, col: 12, offset: 95178},
																																		val:        "\n",
																																		ignoreCase: false,
																																		want:       "\"\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2886, col: 19, offset: 95185},
																																		val:        "\r\n",
																																		ignoreCase: false,
																																		want:       "\"\\r\\n\"",
																																	},
																																	&actionExpr{
																																		pos: position{line: 2886, col: 28, offset: 95194},
																																		run: (*parser).callonOtherListElement482,
																																		expr: &litMatcher{
																																			pos:        position{line: 2886, col: 28, offset: 95194},
																																			val:        "\r",
																																			ignoreCase: false,
																																			want:       "\"\\r\"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 1311, col: 5, offset: 43959},
																												expr: &seqExpr{
																													pos: position{line: 1343, col: 34, offset: 44869},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 1343, col: 34, offset: 44869},
																															val:        "+",
																															ignoreCase: false,
																															want:       "\"+\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 1343, col: 38, offset: 44873},
																															expr: &choiceExpr{
																																pos: position{line: 2878, col: 10, offset: 95044},
																																alternatives: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 2878, col: 10, offset: 95044},
																																		val:        " ",
																																		ignoreCase: false,
																																		want:       "\" \"",
																																	},
																																	&actionExpr{
																																		pos: position{line: 2878, col: 16, offset: 95050},
																																		run: (*parser).callonOtherListElement490,
																																		expr: &litMatcher{
																																			pos:        position{line: 2878, col: 16, offset: 95050},
																																			val:        "\t",
																																			ignoreCase: false,
																																			want:       "\"\\t\"",
																																		},
																																	},
																																},
																															},
																														},
																														&choiceExpr{
																															pos: position{line: 2886, col: 12, offset: 95178},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 2886, col: 12, offset: 95178},
																																	val:        "\n",
																																	ignoreCase: false,
																																	want:       "\"\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2886, col: 19, offset: 95185},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&actionExpr{
																																	pos: position{line: 2886, col: 28, offset: 95194},
																																	run: (*parser).callonOtherListElement495,
																																	expr: &litMatcher{
																																		pos:        position{line: 2886, col: 28, offset: 95194},
																																		val:        "\r",
																																		ignoreCase: false,
																																		want:       "\"\\r\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 1312, col: 5, offset: 43994},
																												expr: &actionExpr{
																													pos: position{line: 1392, col: 5, offset: 46378},
																													run: (*parser).callonOtherListElement498,
																													expr: &seqExpr{
																														pos: position{line: 1392, col: 5, offset: 46378},
																														exprs: []interface{}{
																															&zeroOrMoreExpr{
																																pos: position{line: 1392, col: 5, offset: 46378},
																																expr: &choiceExpr{
																																	pos: position{line: 2878, col: 10, offset: 95044},
																																	alternatives: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2878, col: 10, offset: 95044},
																																			val:        " ",
																																			ignoreCase: false,
																																			want:       "\" \"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 2878, col: 16, offset: 95050},
																																			run: (*parser).callonOtherListElement503,
																																			expr: &litMatcher{
																																				pos:        position{line: 2878, col: 16, offset: 95050},
																																				val:        "\t",
																																				ignoreCase: false,
																																				want:       "\"\\t\"",
																																			},
																																		},
																																	},
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 1392, col: 12, offset: 46385},
																																label: "prefix",
																																expr: &choiceExpr{
																																	pos: position{line: 1394, col: 9, offset: 46448},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 1394, col: 9, offset: 46448},
																																			run: (*parser).callonOtherListElement507,
																																			expr: &seqExpr{
																																				pos: position{line: 1394, col: 9, offset: 46448},
																																				exprs: []interface{}{
																																					&labeledExpr{
																																						pos:   position{line: 1394, col: 9, offset: 46448},
																																						label: "depth",
																																						expr: &actionExpr{
																																							pos: position{line: 1394, col: 16, offset: 46455},
																																							run: (*parser).callonOtherListElement510,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 1394, col: 16, offset: 46455},
																																								expr: &litMatcher{
																																									pos:        position{line: 1394, col: 17, offset: 46456},
																																									val:        ".",
																																									ignoreCase: false,
																																									want:       "\".\"",
																																								},
																																							},
																																						},
																																					},
																																					&andCodeExpr{
																																						pos: position{line: 1398, col: 9, offset: 46556},
																																						run: (*parser).callonOtherListElement513,
																																					},
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 1417, col: 11, offset: 47273},
																																			run: (*parser).callonOtherListElement514,
																																			expr: &seqExpr{
																																				pos: position{line: 1417, col: 11, offset: 47273},
																																				exprs: []interface{}{
																																					&oneOrMoreExpr{
																																						pos: position{line: 1417, col: 11, offset: 47273},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 1417, col: 12, offset: 47274},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																					&litMatcher{
																																						pos:        position{line: 1417, col: 20, offset: 47282},
																																						val:        ".",
																																						ignoreCase: false,
																																						want:       "\".\"",
																																					},
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 1419, col: 13, offset: 47399},
																																			run: (*parser).callonOtherListElement519,
																																			expr: &seqExpr{
																																				pos: position{line: 1419, col: 13, offset: 47399},
																																				exprs: []interface{}{
																																					&charClassMatcher{
																																						pos:        position{line: 1419, col: 14, offset: 47400},
																																						val:        "[a-z]",
																																						ranges:     []rune{'a', 'z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																					&litMatcher{
																																						pos:        position{line: 1419, col: 21, offset: 47407},
																																						val:        ".",
																																						ignoreCase: false,
																																						want:       "\".\"",
																																					},
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 1421, col: 13, offset: 47527},
																																			run: (*parser).callonOtherListElement523,
																																			expr: &seqExpr{
																																				pos: position{line: 1421, col: 13, offset: 47527},
																																				exprs: []interface{}{
																																					&charClassMatcher{
																																						pos:        position{line: 1421, col: 14, offset: 47528},
																																						val:        "[A-Z]",
																																						ranges:     []rune{'A', 'Z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																					&litMatcher{
																																						pos:        position{line: 1421, col: 21, offset: 47535},
																																						val:        ".",
																																						ignoreCase: false,
																																						want:       "\".\"",
																																					},
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 1423, col: 13, offset: 47655},
																																			run: (*parser).callonOtherListElement527,
																																			expr: &seqExpr{
																																				pos: position{line: 1423, col: 13, offset: 47655},
																																				exprs: []interface{}{
																																					&oneOrMoreExpr{
																																						pos: position{line: 1423, col: 13, offset: 47655},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 1423, col: 14, offset: 47656},
																																							val:        "[ivxdlcm]",
																																							chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																					&litMatcher{
																																						pos:        position{line: 1423, col: 26, offset: 47668},
																																						val:        ")",
																																						ignoreCase: false,
																																						want:       "\")\"",
																																					},
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 1425, col: 13, offset: 47788},
																																			run: (*parser).callonOtherListElement532,
																																			expr: &seqExpr{
																																				pos: position{line: 1425, col: 13, offset: 47788},
																																				exprs: []interface{}{
																																					&oneOrMoreExpr{
																																						pos: position{line: 1425, col: 13, offset: 47788},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 1425, col: 14, offset: 47789},
																																							val:        "[IVXDLCM]",
																																							chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																					&litMatcher{
																																						pos:        position{line: 1425, col: 26, offset: 47801},
																																						val:        ")",
																																						ignoreCase: false,
																																						want:       "\")\"",
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 2882, col: 11, offset: 95109},
																																run: (*parser).callonOtherListElement537,
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 2882, col: 11, offset: 95109},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2882, col: 12, offset: 95110},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 1313, col: 5, offset: 44024},
																												expr: &actionExpr{
																													pos: position{line: 1442, col: 5, offset: 48340},
																													run: (*parser).callonOtherListElement541,
																													expr: &seqExpr{
																														pos: position{line: 1442, col: 5, offset: 48340},
																														exprs: []interface{}{
																															&zeroOrMoreExpr{
																																pos: position{line: 1442, col: 5, offset: 48340},
																																expr: &choiceExpr{
																																	pos: position{line: 2878, col: 10, offset: 95044},
																																	alternatives: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2878, col: 10, offset: 95044},
																																			val:        " ",
																																			ignoreCase: false,
																																			want:       "\" \"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 2878, col: 16, offset: 95050},
																																			run: (*parser).callonOtherListElement546,
																																			expr: &litMatcher{
																																				pos:        position{line: 2878, col: 16, offset: 95050},
																																				val:        "\t",
																																				ignoreCase: false,
																																				want:       "\"\\t\"",
																																			},
																																		},
																																	},
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 1442, col: 12, offset: 48347},
																																label: "prefix",
																																expr: &choiceExpr{
																																	pos: position{line: 1442, col: 20, offset: 48355},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 1444, col: 9, offset: 48412},
																																			run: (*parser).callonOtherListElement550,
																																			expr: &seqExpr{
																																				pos: position{line: 1444, col: 9, offset: 48412},
																																				exprs: []interface{}{
																																					&labeledExpr{
																																						pos:   position{line: 1444, col: 9, offset: 48412},
																																						label: "depth",
																																						expr: &actionExpr{
																																							pos: position{line: 1444, col: 16, offset: 48419},
																																							run: (*parser).callonOtherListElement553,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 1444, col: 16, offset: 48419},
																																								expr: &litMatcher{
																																									pos:        position{line: 1444, col: 17, offset: 48420},
																																									val:        "*",
																																									ignoreCase: false,
																																									want:       "\"*\"",
																																								},
																																							},
																																						},
																																					},
																																					&andCodeExpr{
																																						pos: position{line: 1448, col: 9, offset: 48520},
																																						run: (*parser).callonOtherListElement556,
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 1465, col: 14, offset: 49227},
																																			label: "depth",
																																			expr: &actionExpr{
																																				pos: position{line: 1465, col: 21, offset: 49234},
																																				run: (*parser).callonOtherListElement558,
																																				expr: &litMatcher{
																																					pos:        position{line: 1465, col: 22, offset: 49235},
																																					val:        "-",
																																					ignoreCase: false,
																																					want:       "\"-\"",
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 2882, col: 11, offset: 95109},
																																run: (*parser).callonOtherListElement560,
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 2882, col: 11, offset: 95109},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2882, col: 12, offset: 95110},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 1314, col: 5, offset: 44056},
																												expr: &actionExpr{
																													pos: position{line: 1564, col: 5, offset: 51993},
																													run: (*parser).callonOtherListElement564,
																													expr: &seqExpr{
																														pos: position{line: 1564, col: 5, offset: 51993},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 1564, col: 5, offset: 51993},
																																val:        "<",
																																ignoreCase: false,
																																want:       "\"<\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 1564, col: 9, offset: 51997},
																																label: "ref",
																																expr: &actionExpr{
																																	pos: position{line: 1564, col: 14, offset: 52002},
																																	run: (*parser).callonOtherListElement568,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 1564, col: 14, offset: 52002},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 1564, col: 14, offset: 52002},
																																			val:        "[0-9]",
																																			ranges:     []rune{'0', '9'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 1564, col: 62, offset: 52050},
																																val:        ">",
																																ignoreCase: false,
																																want:       "\">\"",
																															},
																															&actionExpr{
																																pos: position{line: 2882, col: 11, offset: 95109},
																																run: (*parser).callonOtherListElement572,
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 2882, col: 11, offset: 95109},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2882, col: 12, offset: 95110},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 1315, col: 5, offset: 44086},
																												expr: &seqExpr{
																													pos: position{line: 1315, col: 7, offset: 44088},
																													exprs: []interface{}{
																														&actionExpr{
																															pos: position{line: 1492, col: 5, offset: 49955},
																															run: (*parser).callonOtherListElement577,
																															expr: &oneOrMoreExpr{
																																pos: position{line: 1492, col: 5, offset: 49955},
																																expr: &seqExpr{
																																	pos: position{line: 1492, col: 6, offset: 49956},
																																	exprs: []interface{}{
																																		&notExpr{
																																			pos: position{line: 1492, col: 6, offset: 49956},
																																			expr: &actionExpr{
																																				pos: position{line: 1497, col: 5, offset: 50087},
																																				run: (*parser).callonOtherListElement581,
																																				expr: &seqExpr{
																																					pos: position{line: 1497, col: 5, offset: 50087},
																																					exprs: []interface{}{
																																						&labeledExpr{
																																							pos:   position{line: 1497, col: 5, offset: 50087},
																																							label: "separator",
																																							expr: &actionExpr{
																																								pos: position{line: 1497, col: 16, offset: 50098},
																																								run: (*parser).callonOtherListElement584,
																																								expr: &oneOrMoreExpr{
																																									pos: position{line: 1497, col: 16, offset: 50098},
																																									expr: &litMatcher{
																																										pos:        position{line: 1497, col: 17, offset: 50099},
																																										val:        ":",
																																										ignoreCase: false,
																																										want:       "\":\"",
																																									},
																																								},
																																							},
																																						},
																																						&andCodeExpr{
																																							pos: position{line: 1500, col: 5, offset: 50156},
																																							run: (*parser).callonOtherListElement587,
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&notExpr{
																																			pos: position{line: 1492, col: 35, offset: 49985},
																																			expr: &choiceExpr{
																																				pos: position{line: 2893, col: 8, offset: 95335},
																																				alternatives: []interface{}{
																																					&notExpr{
																																						pos: position{line: 2890, col: 8, offset: 95285},
																																						expr: &anyMatcher{
																																							line: 2890, col: 9, offset: 95286,
																																						},
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2886, col: 12, offset: 95178},
																																						val:        "\n",
																																						ignoreCase: false,
																																						want:       "\"\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2886, col: 19, offset: 95185},
																																						val:        "\r\n",
																																						ignoreCase: false,
																																						want:       "\"\\r\\n\"",
																																					},
																																					&actionExpr{
																																						pos: position{line: 2886, col: 28, offset: 95194},
																																						run: (*parser).callonOtherListElement594,
																																						expr: &litMatcher{
																																							pos:        position{line: 2886, col: 28, offset: 95194},
																																							val:        "\r",
																																							ignoreCase: false,
																																							want:       "\"\\r\"",
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&anyMatcher{
																																			line: 1492, col: 40, offset: 49990,
																																		},
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 1497, col: 5, offset: 50087},
																															run: (*parser).callonOtherListElement597,
																															expr: &seqExpr{
																																pos: position{line: 1497, col: 5, offset: 50087},
																																exprs: []interface{}{
																																	&labeledExpr{
																																		pos:   position{line: 1497, col: 5, offset: 50087},
																																		label: "separator",
																																		expr: &actionExpr{
																																			pos: position{line: 1497, col: 16, offset: 50098},
																																			run: (*parser).callonOtherListElement600,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 1497, col: 16, offset: 50098},
																																				expr: &litMatcher{
																																					pos:        position{line: 1497, col: 17, offset: 50099},
																																					val:        ":",
																																					ignoreCase: false,
																																					want:       "\":\"",
																																				},
																																			},
																																		},
																																	},
																																	&andCodeExpr{
																																		pos: position{line: 1500, col: 5, offset: 50156},
																																		run: (*parser).callonOtherListElement603,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 1316, col: 5, offset: 44144},
																												expr: &actionExpr{
																													pos: position{line: 527, col: 5, offset: 17165},
																													run: (*parser).callonOtherListElement605,
																													expr: &seqExpr{
																														pos: position{line: 527, col: 5, offset: 17165},
																														exprs: []interface{}{
																															&notExpr{
																																pos: position{line: 527, col: 5, offset: 17165},
																																expr: &charClassMatcher{
																																	pos:        position{line: 2797, col: 13, offset: 92519},
																																	val:        "[0-9\\pL]",
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 528, col: 5, offset: 17195},
																																label: "delimiter",
																																expr: &choiceExpr{
																																	pos: position{line: 529, col: 9, offset: 17215},
																																	alternatives: []interface{}{
																																		&seqExpr{
																																			pos: position{line: 541, col: 26, offset: 17536},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 541, col: 26, offset: 17536},
																																					val:        "////",
																																					ignoreCase: false,
																																					want:       "\"////\"",
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 541, col: 33, offset: 17543},
																																					expr: &choiceExpr{
																																						pos: position{line: 2878, col: 10, offset: 95044},
																																						alternatives: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 2878, col: 10, offset: 95044},
																																								val:        " ",
																																								ignoreCase: false,
																																								want:       "\" \"",
																																							},
																																							&actionExpr{
																																								pos: position{line: 2878, col: 16, offset: 95050},
																																								run: (*parser).callonOtherListElement616,
																																								expr: &litMatcher{
																																									pos:        position{line: 2878, col: 16, offset: 95050},
																																									val:        "\t",
																																									ignoreCase: false,
																																									want:       "\"\\t\"",
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 2893, col: 8, offset: 95335},
																																					alternatives: []interface{}{
																																						&notExpr{
																																							pos: position{line: 2890, col: 8, offset: 95285},
																																							expr: &anyMatcher{
																																								line: 2890, col: 9, offset: 95286,
																																							},
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2886, col: 12, offset: 95178},
																																							val:        "\n",
																																							ignoreCase: false,
																																							want:       "\"\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2886, col: 19, offset: 95185},
																																							val:        "\r\n",
																																							ignoreCase: false,
																																							want:       "\"\\r\\n\"",
																																						},
																																						&actionExpr{
																																							pos: position{line: 2886, col: 28, offset: 95194},
																																							run: (*parser).callonOtherListElement623,
																																							expr: &litMatcher{
																																								pos:        position{line: 2886, col: 28, offset: 95194},
																																								val:        "\r",
																																								ignoreCase: false,
																																								want:       "\"\\r\"",
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&seqExpr{
																																			pos: position{line: 543, col: 26, offset: 17580},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 543, col: 26, offset: 17580},
																																					val:        "====",
																																					ignoreCase: false,
																																					want:       "\"====\"",
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 543, col: 33, offset: 17587},
																																					expr: &choiceExpr{
																																						pos: position{line: 2878, col: 10, offset: 95044},
																																						alternatives: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 2878, col: 10, offset: 95044},
																																								val:        " ",
																																								ignoreCase: false,
																																								want:       "\" \"",
																																							},
																																							&actionExpr{
																																								pos: position{line: 2878, col: 16, offset: 95050},
																																								run: (*parser).callonOtherListElement630,
																																								expr: &litMatcher{
																																									pos:        position{line: 2878, col: 16, offset: 95050},
																																									val:        "\t",
																																									ignoreCase: false,
																																									want:       "\"\\t\"",
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 2893, col: 8, offset: 95335},
																																					alternatives: []interface{}{
																																						&notExpr{
																																							pos: position{line: 2890, col: 8, offset: 95285},
																																							expr: &anyMatcher{
																																								line: 2890, col: 9, offset: 95286,
																																							},
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2886, col: 12, offset: 95178},
																																							val:        "\n",
																																							ignoreCase: false,
																																							want:       "\"\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2886, col: 19, offset: 95185},
																																							val:        "\r\n",
																																							ignoreCase: false,
																																							want:       "\"\\r\\n\"",
																																						},
																																						&actionExpr{
																																							pos: position{line: 2886, col: 28, offset: 95194},
																																							run: (*parser).callonOtherListElement637,
																																							expr: &litMatcher{
																																								pos:        position{line: 2886, col: 28, offset: 95194},
																																								val:        "\r",
																																								ignoreCase: false,
																																								want:       "\"\\r\"",
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&seqExpr{
																																			pos: position{line: 545, col: 25, offset: 17623},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 545, col: 25, offset: 17623},
																																					val:        "```",
																																					ignoreCase: false,
																																					want:       "\"```\"",
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 545, col: 31, offset: 17629},
																																					expr: &choiceExpr{
																																						pos: position{line: 2878, col: 10, offset: 95044},
																																						alternatives: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 2878, col: 10, offset: 95044},
																																								val:        " ",
																																								ignoreCase: false,
																																								want:       "\" \"",
																																							},
																																							&actionExpr{
																																								pos: position{line: 2878, col: 16, offset: 95050},
																																								run: (*parser).callonOtherListElement644,
																																								expr: &litMatcher{
																																									pos:        position{line: 2878, col: 16, offset: 95050},
																																									val:        "\t",
																																									ignoreCase: false,
																																									want:       "\"\\t\"",
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 2893, col: 8, offset: 95335},
																																					alternatives: []interface{}{
																																						&notExpr{
																																							pos: position{line: 2890, col: 8, offset: 95285},
																																							expr: &anyMatcher{
																																								line: 2890, col: 9, offset: 95286,
																																							},
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2886, col: 12, offset: 95178},
																																							val:        "\n",
																																							ignoreCase: false,
																																							want:       "\"\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2886, col: 19, offset: 95185},
																																							val:        "\r\n",
																																							ignoreCase: false,
																																							want:       "\"\\r\\n\"",
																																						},
																																						&actionExpr{
																																							pos: position{line: 2886, col: 28, offset: 95194},
																																							run: (*parser).callonOtherListElement651,
																																							expr: &litMatcher{
																																								pos:        position{line: 2886, col: 28, offset: 95194},
																																								val:        "\r",
																																								ignoreCase: false,
																																								want:       "\"\\r\"",
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&seqExpr{
																																			pos: position{line: 547, col: 26, offset: 17666},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 547, col: 26, offset: 17666},
																																					val:        "----",
																																					ignoreCase: false,
																																					want:       "\"----\"",
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 547, col: 33, offset: 17673},
																																					expr: &choiceExpr{
																																						pos: position{line: 2878, col: 10, offset: 95044},
																																						alternatives: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 2878, col: 10, offset: 95044},
																																								val:        " ",
																																								ignoreCase: false,
																																								want:       "\" \"",
																																							},
																																							&actionExpr{
																																								pos: position{line: 2878, col: 16, offset: 95050},
																																								run: (*parser).callonOtherListElement658,
																																								expr: &litMatcher{
																																									pos:        position{line: 2878, col: 16, offset: 95050},
																																									val:        "\t",
																																									ignoreCase: false,
																																									want:       "\"\\t\"",
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 2893, col: 8, offset: 95335},
																																					alternatives: []interface{}{
																																						&notExpr{
																																							pos: position{line: 2890, col: 8, offset: 95285},
																																							expr: &anyMatcher{
																																								line: 2890, col: 9, offset: 95286,
																																							},
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2886, col: 12, offset: 95178},
																																							val:        "\n",
																																							ignoreCase: false,
																																							want:       "\"\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2886, col: 19, offset: 95185},
																																							val:        "\r\n",
																																							ignoreCase: false,
																																							want:       "\"\\r\\n\"",
																																						},
																																						&actionExpr{
																																							pos: position{line: 2886, col: 28, offset: 95194},
																																							run: (*parser).callonOtherListElement665,
																																							expr: &litMatcher{
																																								pos:        position{line: 2886, col: 28, offset: 95194},
																																								val:        "\r",
																																								ignoreCase: false,
																																								want:       "\"\\r\"",
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&seqExpr{
																																			pos: position{line: 549, col: 26, offset: 17710},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 549, col: 26, offset: 17710},
																																					val:        "....",
																																					ignoreCase: false,
																																					want:       "\"....\"",
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 549, col: 33, offset: 17717},
																																					expr: &choiceExpr{
																																						pos: position{line: 2878, col: 10, offset: 95044},
																																						alternatives: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 2878, col: 10, offset: 95044},
																																								val:        " ",
																																								ignoreCase: false,
																																								want:       "\" \"",
																																							},
																																							&actionExpr{
																																								pos: position{line: 2878, col: 16, offset: 95050},
																																								run: (*parser).callonOtherListElement672,
																																								expr: &litMatcher{
																																									pos:        position{line: 2878, col: 16, offset: 95050},
																																									val:        "\t",
																																									ignoreCase: false,
																																									want:       "\"\\t\"",
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 2893, col: 8, offset: 95335},
																																					alternatives: []interface{}{
																																						&notExpr{
																																							pos: position{line: 2890, col: 8, offset: 95285},
																																							expr: &anyMatcher{
																																								line: 2890, col: 9, offset: 95286,
																																							},
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2886, col: 12, offset: 95178},
																																							val:        "\n",
																																							ignoreCase: false,
																																							want:       "\"\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2886, col: 19, offset: 95185},
																																							val:        "\r\n",
																																							ignoreCase: false,
																																							want:       "\"\\r\\n\"",
																																						},
																																						&actionExpr{
																																							pos: position{line: 2886, col: 28, offset: 95194},
																																							run: (*parser).callonOtherListElement679,
																																							expr: &litMatcher{
																																								pos:        position{line: 2886, col: 28, offset: 95194},
																																								val:        "\r",
																																								ignoreCase: false,
																																								want:       "\"\\r\"",
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&seqExpr{
																																			pos: position{line: 551, col: 30, offset: 17758},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 551, col: 30, offset: 17758},
																																					val:        "++++",
																																					ignoreCase: false,
																																					want:       "\"++++\"",
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 551, col: 37, offset: 17765},
																																					expr: &choiceExpr{
																																						pos: position{line: 2878, col: 10, offset: 95044},
																																						alternatives: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 2878, col: 10, offset: 95044},
																																								val:        " ",
																																								ignoreCase: false,
																																								want:       "\" \"",
																																							},
																																							&actionExpr{
																																								pos: position{line: 2878, col: 16, offset: 95050},
																																								run: (*parser).callonOtherListElement686,
																																								expr: &litMatcher{
																																									pos:        position{line: 2878, col: 16, offset: 95050},
																																									val:        "\t",
																																									ignoreCase: false,
																																									want:       "\"\\t\"",
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 2893, col: 8, offset: 95335},
																																					alternatives: []interface{}{
																																						&notExpr{
																																							pos: position{line: 2890, col: 8, offset: 95285},
																																							expr: &anyMatcher{
																																								line: 2890, col: 9, offset: 95286,
																																							},
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2886, col: 12, offset: 95178},
																																							val:        "\n",
																																							ignoreCase: false,
																																							want:       "\"\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2886, col: 19, offset: 95185},
																																							val:        "\r\n",
																																							ignoreCase: false,
																																							want:       "\"\\r\\n\"",
																																						},
																																						&actionExpr{
																																							pos: position{line: 2886, col: 28, offset: 95194},
																																							run: (*parser).callonOtherListElement693,
																																							expr: &litMatcher{
																																								pos:        position{line: 2886, col: 28, offset: 95194},
																																								val:        "\r",
																																								ignoreCase: false,
																																								want:       "\"\\r\"",
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&seqExpr{
																																			pos: position{line: 553, col: 24, offset: 17800},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 553, col: 24, offset: 17800},
																																					val:        "____",
																																					ignoreCase: false,
																																					want:       "\"____\"",
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 553, col: 31, offset: 17807},
																																					expr: &choiceExpr{
																																						pos: position{line: 2878, col: 10, offset: 95044},
																																						alternatives: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 2878, col: 10, offset: 95044},
																																								val:        " ",
																																								ignoreCase: false,
																																								want:       "\" \"",
																																							},
																																							&actionExpr{
																																								pos: position{line: 2878, col: 16, offset: 95050},
																																								run: (*parser).callonOtherListElement700,
																																								expr: &litMatcher{
																																									pos:        position{line: 2878, col: 16, offset: 95050},
																																									val:        "\t",
																																									ignoreCase: false,
																																									want:       "\"\\t\"",
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 2893, col: 8, offset: 95335},
																																					alternatives: []interface{}{
																																						&notExpr{
																																							pos: position{line: 2890, col: 8, offset: 95285},
																																							expr: &anyMatcher{
																																								line: 2890, col: 9, offset: 95286,
																																							},
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2886, col: 12, offset: 95178},
																																							val:        "\n",
																																							ignoreCase: false,
																																							want:       "\"\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2886, col: 19, offset: 95185},
																																							val:        "\r\n",
																																							ignoreCase: false,
																																							want:       "\"\\r\\n\"",
																																						},
																																						&actionExpr{
																																							pos: position{line: 2886, col: 28, offset: 95194},
																																							run: (*parser).callonOtherListElement707,
																																							expr: &litMatcher{
																																								pos:        position{line: 2886, col: 28, offset: 95194},
																																								val:        "\r",
																																								ignoreCase: false,
																																								want:       "\"\\r\"",
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&seqExpr{
																																			pos: position{line: 555, col: 26, offset: 17844},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 555, col: 26, offset: 17844},
																																					val:        "****",
																																					ignoreCase: false,
																																					want:       "\"****\"",
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 555, col: 33, offset: 17851},
																																					expr: &choiceExpr{
																																						pos: position{line: 2878, col: 10, offset: 95044},
																																						alternatives: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 2878, col: 10, offset: 95044},
																																								val:        " ",
																																								ignoreCase: false,
																																								want:       "\" \"",
																																							},
																																							&actionExpr{
																																								pos: position{line: 2878, col: 16, offset: 95050},
																																								run: (*parser).callonOtherListElement714,
																																								expr: &litMatcher{
																																									pos:        position{line: 2878, col: 16, offset: 95050},
																																									val:        "\t",
																																									ignoreCase: false,
																																									want:       "\"\\t\"",
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 2893, col: 8, offset: 95335},
																																					alternatives: []interface{}{
																																						&notExpr{
																																							pos: position{line: 2890, col: 8, offset: 95285},
																																							expr: &anyMatcher{
																																								line: 2890, col: 9, offset: 95286,
																																							},
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2886, col: 12, offset: 95178},
																																							val:        "\n",
																																							ignoreCase: false,
																																							want:       "\"\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2886, col: 19, offset: 95185},
																																							val:        "\r\n",
																																							ignoreCase: false,
																																							want:       "\"\\r\\n\"",
																																						},
																																						&actionExpr{
																																							pos: position{line: 2886, col: 28, offset: 95194},
																																							run: (*parser).callonOtherListElement721,
																																							expr: &litMatcher{
																																								pos:        position{line: 2886, col: 28, offset: 95194},
																																								val:        "\r",
																																								ignoreCase: false,
																																								want:       "\"\\r\"",
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 1317, col: 5, offset: 44164},
																												label: "content",
																												expr: &actionExpr{
																													pos: position{line: 1317, col: 14, offset: 44173},
																													run: (*parser).callonOtherListElement724,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 1317, col: 14, offset: 44173},
																														expr: &charClassMatcher{
																															pos:        position{line: 1317, col: 14, offset: 44173},
																															val:        "[^\\r\\n]",
																															chars:      []rune{'\r', '\n'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2893, col: 8, offset: 95335},
																												alternatives: []interface{}{
																													&notExpr{
																														pos: position{line: 2890, col: 8, offset: 95285},
																														expr: &anyMatcher{
																															line: 2890, col: 9, offset: 95286,
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 2886, col: 12, offset: 95178},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2886, col: 19, offset: 95185},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&actionExpr{
																														pos: position{line: 2886, col: 28, offset: 95194},
																														run: (*parser).callonOtherListElement732,
																														expr: &litMatcher{
																															pos:        position{line: 2886, col: 28, offset: 95194},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1536, col: 9, offset: 51194},
																				run: (*parser).callonOtherListElement734,
																				expr: &seqExpr{
																					pos: position{line: 1536, col: 9, offset: 51194},
																					exprs: []interface{}{
																						&actionExpr{
																							pos: position{line: 2882, col: 11, offset: 95109},
																							run: (*parser).callonOtherListElement736,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2882, col: 11, offset: 95109},
																								expr: &charClassMatcher{
																									pos:        position{line: 2882, col: 12, offset: 95110},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 1537, col: 9, offset: 51246},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 1537, col: 18, offset: 51255},
																								run: (*parser).callonOtherListElement740,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1537, col: 18, offset: 51255},
																									expr: &charClassMatcher{
																										pos:        position{line: 1537, col: 18, offset: 51255},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2893, col: 8, offset: 95335},
																							alternatives: []interface{}{
																								&notExpr{
																									pos: position{line: 2890, col: 8, offset: 95285},
																									expr: &anyMatcher{
																										line: 2890, col: 9, offset: 95286,
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2886, col: 12, offset: 95178},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2886, col: 19, offset: 95185},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&actionExpr{
																									pos: position{line: 2886, col: 28, offset: 95194},
																									run: (*parser).callonOtherListElement748,
																									expr: &litMatcher{
																										pos:        position{line: 2886, col: 28, offset: 95194},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1297, col: 13, offset: 43544},
										run: (*parser).callonOtherListElement750,
										expr: &seqExpr{
											pos: position{line: 1297, col: 13, offset: 43544},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1297, col: 13, offset: 43544},
													label: "attributes",
													expr: &oneOrMoreExpr{
														pos: position{line: 1297, col: 24, offset: 43555},
														expr: &ruleRefExpr{
															pos:  position{line: 1297, col: 25, offset: 43556},
															name: "BlockAttributes",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1298, col: 13, offset: 43587},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 1484, col: 5, offset: 49696},
														run: (*parser).callonOtherListElement756,
														expr: &seqExpr{
															pos: position{line: 1484, col: 5, offset: 49696},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1484, col: 5, offset: 49696},
																	label: "term",
																	expr: &actionExpr{
																		pos: position{line: 1492, col: 5, offset: 49955},
																		run: (*parser).callonOtherListElement759,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1492, col: 5, offset: 49955},
																			expr: &seqExpr{
																				pos: position{line: 1492, col: 6, offset: 49956},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 1492, col: 6, offset: 49956},
																						expr: &actionExpr{
																							pos: position{line: 1497, col: 5, offset: 50087},
																							run: (*parser).callonOtherListElement763,
																							expr: &seqExpr{
																								pos: position{line: 1497, col: 5, offset: 50087},
																								exprs: []interface{}{
																									&labeledExpr{
																										pos:   position{line: 1497, col: 5, offset: 50087},
																										label: "separator",
																										expr: &actionExpr{
																											pos: position{line: 1497, col: 16, offset: 50098},
																											run: (*parser).callonOtherListElement766,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 1497, col: 16, offset: 50098},
																												expr: &litMatcher{
																													pos:        position{line: 1497, col: 17, offset: 50099},
																													val:        ":",
																													ignoreCase: false,
																													want:       "\":\"",
																												},
																											},
																										},
																									},
																									&andCodeExpr{
																										pos: position{line: 1500, col: 5, offset: 50156},
																										run: (*parser).callonOtherListElement769,
																									},
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 1492, col: 35, offset: 49985},
																						expr: &choiceExpr{
																							pos: position{line: 2893, col: 8, offset: 95335},
																							alternatives: []interface{}{
																								&notExpr{
																									pos: position{line: 2890, col: 8, offset: 95285},
																									expr: &anyMatcher{
																										line: 2890, col: 9, offset: 95286,
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2886, col: 12, offset: 95178},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2886, col: 19, offset: 95185},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&actionExpr{
																									pos: position{line: 2886, col: 28, offset: 95194},
																									run: (*parser).callonOtherListElement776,
																									expr: &litMatcher{
																										pos:        position{line: 2886, col: 28, offset: 95194},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																					},
																					&anyMatcher{
																						line: 1492, col: 40, offset: 49990,
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1485, col: 5, offset: 49731},
																	label: "separator",
																	expr: &actionExpr{
																		pos: position{line: 1497, col: 5, offset: 50087},
																		run: (*parser).callonOtherListElement780,
																		expr: &seqExpr{
																			pos: position{line: 1497, col: 5, offset: 50087},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1497, col: 5, offset: 50087},
																					label: "separator",
																					expr: &actionExpr{
																						pos: position{line: 1497, col: 16, offset: 50098},
																						run: (*parser).callonOtherListElement783,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1497, col: 16, offset: 50098},
																							expr: &litMatcher{
																								pos:        position{line: 1497, col: 17, offset: 50099},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 1500, col: 5, offset: 50156},
																					run: (*parser).callonOtherListElement786,
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1486, col: 5, offset: 49776},
																	label: "description",
																	expr: &choiceExpr{
																		pos: position{line: 1524, col: 5, offset: 50845},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 1526, col: 9, offset: 50923},
																				run: (*parser).callonOtherListElement789,
																				expr: &seqExpr{
																					pos: position{line: 1526, col: 9, offset: 50923},
																					exprs: []interface{}{
																						&zeroOrMoreExpr{
																							pos: position{line: 1526, col: 9, offset: 50923},
																							expr: &choiceExpr{
																								pos: position{line: 2878, col: 10, offset: 95044},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2878, col: 10, offset: 95044},
																										val:        " ",
																										ignoreCase: false,
																										want:       "\" \"",
																									},
																									&actionExpr{
																										pos: position{line: 2878, col: 16, offset: 95050},
																										run: (*parser).callonOtherListElement794,
																										expr: &litMatcher{
																											pos:        position{line: 2878, col: 16, offset: 95050},
																											val:        "\t",
																											ignoreCase: false,
																											want:       "\"\\t\"",
																										},
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2893, col: 8, offset: 95335},
																							alternatives: []interface{}{
																								&notExpr{
																									pos: position{line: 2890, col: 8, offset: 95285},
																									expr: &anyMatcher{
																										line: 2890, col: 9, offset: 95286,
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2886, col: 12, offset: 95178},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2886, col: 19, offset: 95185},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&actionExpr{
																									pos: position{line: 2886, col: 28, offset: 95194},
																									run: (*parser).callonOtherListElement801,
																									expr: &litMatcher{
																										pos:        position{line: 2886, col: 28, offset: 95194},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 1527, col: 9, offset: 50943},
																							expr: &actionExpr{
																								pos: position{line: 482, col: 14, offset: 15644},
																								run: (*parser).callonOtherListElement804,
																								expr: &seqExpr{
																									pos: position{line: 482, col: 14, offset: 15644},
																									exprs: []interface{}{
																										&notExpr{
																											pos: position{line: 482, col: 14, offset: 15644},
																											expr: &notExpr{
																												pos: position{line: 2890, col: 8, offset: 95285},
																												expr: &anyMatcher{
																													line: 2890, col: 9, offset: 95286,
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 482, col: 19, offset: 15649},
																											expr: &choiceExpr{
																												pos: position{line: 2878, col: 10, offset: 95044},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2878, col: 10, offset: 95044},
																														val:        " ",
																														ignoreCase: false,
																														want:       "\" \"",
																													},
																													&actionExpr{
																														pos: position{line: 2878, col: 16, offset: 95050},
																														run: (*parser).callonOtherListElement812,
																														expr: &litMatcher{
																															pos:        position{line: 2878, col: 16, offset: 95050},
																															val:        "\t",
																															ignoreCase: false,
																															want:       "\"\\t\"",
																														},
																													},
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2893, col: 8, offset: 95335},
																											alternatives: []interface{}{
																												&notExpr{
																													pos: position{line: 2890, col: 8, offset: 95285},
																													expr: &anyMatcher{
																														line: 2890, col: 9, offset: 95286,
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 2886, col: 12, offset: 95178},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2886, col: 19, offset: 95185},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&actionExpr{
																													pos: position{line: 2886, col: 28, offset: 95194},
																													run: (*parser).callonOtherListElement819,
																													expr: &litMatcher{
																														pos:        position{line: 2886, col: 28, offset: 95194},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 1528, col: 9, offset: 50963},
																							label: "content",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 1528, col: 17, offset: 50971},
																								expr: &actionExpr{
																									pos: position{line: 1310, col: 5, offset: 43944},
																									run: (*parser).callonOtherListElement823,
																									expr: &seqExpr{
																										pos: position{line: 1310, col: 5, offset: 43944},
																										exprs: []interface{}{
																											&notExpr{
																												pos: position{line: 1310, col: 5, offset: 43944},
																												expr: &actionExpr{
																													pos: position{line: 482, col: 14, offset: 15644},
																													run: (*parser).callonOtherListElement826,
																													expr: &seqExpr{
																														pos: position{line: 482, col: 14, offset: 15644},
																														exprs: []interface{}{
																															&notExpr{
																																pos: position{line: 482, col: 14, offset: 15644},
																																expr: &notExpr{
																																	pos: position{line: 2890, col: 8, offset: 95285},
																																	expr: &anyMatcher{
																																		line: 2890, col: 9, offset: 95286,
																																	},
																																},
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 482, col: 19, offset: 15649},
																																expr: &choiceExpr{
																																	pos: position{line: 2878, col: 10, offset: 95044},
																																	alternatives: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2878, col: 10, offset: 95044},
																																			val:        " ",
																																			ignoreCase: false,
																																			want:       "\" \"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 2878, col: 16, offset: 95050},
																																			run: (*parser).callonOtherListElement834,
																																			expr: &litMatcher{
																																				pos:        position{line: 2878, col: 16, offset: 95050},
																																				val:        "\t",
																																				ignoreCase: false,
																																				want:       "\"\\t\"",
																																			},
																																		},
																																	},
																																},
																															},
																															&choiceExpr{
																																pos: position{line: 2893, col: 8, offset: 95335},
																																alternatives: []interface{}{
																																	&notExpr{
																																		pos: position{line: 2890, col: 8, offset: 95285},
																																		expr: &anyMatcher{
																																			line: 2890, col: 9, offset: 95286,
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2886, col: 12, offset: 95178},
																																		val:        "\n",
																																		ignoreCase: false,
																																		want:       "\"\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2886, col: 19, offset: 95185},
																																		val:        "\r\n",
																																		ignoreCase: false,
																																		want:       "\"\\r\\n\"",
																																	},
																																	&actionExpr{
																																		pos: position{line: 2886, col: 28, offset: 95194},
																																		run: (*parser).callonOtherListElement841,
																																		expr: &litMatcher{
																																			pos:        position{line: 2886, col: 28, offset: 95194},
																																			val:        "\r",
																																			ignoreCase: false,
																																			want:       "\"\\r\"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 1311, col: 5, offset: 43959},
																												expr: &seqExpr{
																													pos: position{line: 1343, col: 34, offset: 44869},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 1343, col: 34, offset: 44869},
																															val:        "+",
																															ignoreCase: false,
																															want:       "\"+\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 1343, col: 38, offset: 44873},
																															expr: &choiceExpr{
																																pos: position{line: 2878, col: 10, offset: 95044},
																																alternatives: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 2878, col: 10, offset: 95044},
																																		val:        " ",
																																		ignoreCase: false,
																																		want:       "\" \"",
																																	},
																																	&actionExpr{
																																		pos: position{line: 2878, col: 16, offset: 95050},
																																		run: (*parser).callonOtherListElement849,
																																		expr: &litMatcher{
																																			pos:        position{line: 2878, col: 16, offset: 95050},
																																			val:        "\t",
																																			ignoreCase: false,
																																			want:       "\"\\t\"",
																																		},
																																	},
																																},
																															},
																														},
																														&choiceExpr{
																															pos: position{line: 2886, col: 12, offset: 95178},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 2886, col: 12, offset: 95178},
																																	val:        "\n",
																																	ignoreCase: false,
																																	want:       "\"\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2886, col: 19, offset: 95185},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&actionExpr{
																																	pos: position{line: 2886, col: 28, offset: 95194},
																																	run: (*parser).callonOtherListElement854,
																																	expr: &litMatcher{
																																		pos:        position{line: 2886, col: 28, offset: 95194},
																																		val:        "\r",
																																		ignoreCase: false,
																																		want:       "\"\\r\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 1312, col: 5, offset: 43994},
																												expr: &actionExpr{
																													pos: position{line: 1392, col: 5, offset: 46378},
																													run: (*parser).callonOtherListElement857,
																													expr: &seqExpr{
																														pos: position{line: 1392, col: 5, offset: 46378},
																														exprs: []interface{}{
																															&zeroOrMoreExpr{
																																pos: position{line: 1392, col: 5, offset: 46378},
																																expr: &choiceExpr{
																																	pos: position{line: 2878, col: 10, offset: 95044},
																																	alternatives: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2878, col: 10, offset: 95044},
																																			val:        " ",
																																			ignoreCase: false,
																																			want:       "\" \"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 2878, col: 16, offset: 95050},
																																			run: (*parser).callonOtherListElement862,
																																			expr: &litMatcher{
																																				pos:        position{line: 2878, col: 16, offset: 95050},
																																				val:        "\t",
																																				ignoreCase: false,
																																				want:       "\"\\t\"",
																																			},
																																		},
																																	},
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 1392, col: 12, offset: 46385},
																																label: "prefix",
																																expr: &choiceExpr{
																																	pos: position{line: 1394, col: 9, offset: 46448},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 1394, col: 9, offset: 46448},
																																			run: (*parser).callonOtherListElement866,
																																			expr: &seqExpr{
																																				pos: position{line: 1394, col: 9, offset: 46448},
																																				exprs: []interface{}{
																																					&labeledExpr{
																																						pos:   position{line: 1394, col: 9, offset: 46448},
																																						label: "depth",
																																						expr: &actionExpr{
																																							pos: position{line: 1394, col: 16, offset: 46455},
																																							run: (*parser).callonOtherListElement869,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 1394, col: 16, offset: 46455},
																																								expr: &litMatcher{
																																									pos:        position{line: 1394, col: 17, offset: 46456},
																																									val:        ".",
																																									ignoreCase: false,
																																									want:       "\".\"",
																																								},
																																							},
																																						},
																																					},
																																					&andCodeExpr{
																																						pos: position{line: 1398, col: 9, offset: 46556},
																																						run: (*parser).callonOtherListElement872,
																																					},
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 1417, col: 11, offset: 47273},
																																			run: (*parser).callonOtherListElement873,
																																			expr: &seqExpr{
																																				pos: position{line: 1417, col: 11, offset: 47273},
																																				exprs: []interface{}{
																																					&oneOrMoreExpr{
																																						pos: position{line: 1417, col: 11, offset: 47273},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 1417, col: 12, offset: 47274},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																					&litMatcher{
																																						pos:        position{line: 1417, col: 20, offset: 47282},
																																						val:        ".",
																																						ignoreCase: false,
																																						want:       "\".\"",
																																					},
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 1419, col: 13, offset: 47399},
																																			run: (*parser).callonOtherListElement878,
																																			expr: &seqExpr{
																																				pos: position{line: 1419, col: 13, offset: 47399},
																																				exprs: []interface{}{
																																					&charClassMatcher{
																																						pos:        position{line: 1419, col: 14, offset: 47400},
																																						val:        "[a-z]",
																																						ranges:     []rune{'a', 'z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																					&litMatcher{
																																						pos:        position{line: 1419, col: 21, offset: 47407},
																																						val:        ".",
																																						ignoreCase: false,
																																						want:       "\".\"",
																																					},
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 1421, col: 13, offset: 47527},
																																			run: (*parser).callonOtherListElement882,
																																			expr: &seqExpr{
																																				pos: position{line: 1421, col: 13, offset: 47527},
																																				exprs: []interface{}{
																																					&charClassMatcher{
																																						pos:        position{line: 1421, col: 14, offset: 47528},
																																						val:        "[A-Z]",
																																						ranges:     []rune{'A', 'Z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																					&litMatcher{
																																						pos:        position{line: 1421, col: 21, offset: 47535},
																																						val:        ".",
																																						ignoreCase: false,
																																						want:       "\".\"",
																																					},
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 1423, col: 13, offset: 47655},
																																			run: (*parser).callonOtherListElement886,
																																			expr: &seqExpr{
																																				pos: position{line: 1423, col: 13, offset: 47655},
																																				exprs: []interface{}{
																																					&oneOrMoreExpr{
																																						pos: position{line: 1423, col: 13, offset: 47655},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 1423, col: 14, offset: 47656},
																																							val:        "[ivxdlcm]",
																																							chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																					&litMatcher{
																																						pos:        position{line: 1423, col: 26, offset: 47668},
																																						val:        ")",
																																						ignoreCase: false,
																																						want:       "\")\"",
																																					},
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 1425, col: 13, offset: 47788},
																																			run: (*parser).callonOtherListElement891,
																																			expr: &seqExpr{
																																				pos: position{line: 1425, col: 13, offset: 47788},
																																				exprs: []interface{}{
																																					&oneOrMoreExpr{
																																						pos: position{line: 1425, col: 13, offset: 47788},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 1425, col: 14, offset: 47789},
																																							val:        "[IVXDLCM]",
																																							chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																					&litMatcher{
																																						pos:        position{line: 1425, col: 26, offset: 47801},
																																						val:        ")",
																																						ignoreCase: false,
																																						want:       "\")\"",
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 2882, col: 11, offset: 95109},
																																run: (*parser).callonOtherListElement896,
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 2882, col: 11, offset: 95109},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2882, col: 12, offset: 95110},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 1313, col: 5, offset: 44024},
																												expr: &actionExpr{
																													pos: position{line: 1442, col: 5, offset: 48340},
																													run: (*parser).callonOtherListElement900,
																													expr: &seqExpr{
																														pos: position{line: 1442, col: 5, offset: 48340},
																														exprs: []interface{}{
																															&zeroOrMoreExpr{
																																pos: position{line: 1442, col: 5, offset: 48340},
																																expr: &choiceExpr{
																																	pos: position{line: 2878, col: 10, offset: 95044},
																																	alternatives: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2878, col: 10, offset: 95044},
																																			val:        " ",
																																			ignoreCase: false,
																																			want:       "\" \"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 2878, col: 16, offset: 95050},
																																			run: (*parser).callonOtherListElement905,
																																			expr: &litMatcher{
																																				pos:        position{line: 2878, col: 16, offset: 95050},
																																				val:        "\t",
																																				ignoreCase: false,
																																				want:       "\"\\t\"",
																																			},
																																		},
																																	},
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 1442, col: 12, offset: 48347},
																																label: "prefix",
																																expr: &choiceExpr{
																																	pos: position{line: 1442, col: 20, offset: 48355},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 1444, col: 9, offset: 48412},
																																			run: (*parser).callonOtherListElement909,
																																			expr: &seqExpr{
																																				pos: position{line: 1444, col: 9, offset: 48412},
																																				exprs: []interface{}{
																																					&labeledExpr{
																																						pos:   position{line: 1444, col: 9, offset: 48412},
																																						label: "depth",
																																						expr: &actionExpr{
																																							pos: position{line: 1444, col: 16, offset: 48419},
																																							run: (*parser).callonOtherListElement912,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 1444, col: 16, offset: 48419},
																																								expr: &litMatcher{
																																									pos:        position{line: 1444, col: 17, offset: 48420},
																																									val:        "*",
																																									ignoreCase: false,
																																									want:       "\"*\"",
																																								},
																																							},
																																						},
																																					},
																																					&andCodeExpr{
																																						pos: position{line: 1448, col: 9, offset: 48520},
																																						run: (*parser).callonOtherListElement915,
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 1465, col: 14, offset: 49227},
																																			label: "depth",
																																			expr: &actionExpr{
																																				pos: position{line: 1465, col: 21, offset: 49234},
																																				run: (*parser).callonOtherListElement917,
																																				expr: &litMatcher{
																																					pos:        position{line: 1465, col: 22, offset: 49235},
																																					val:        "-",
																																					ignoreCase: false,
																																					want:       "\"-\"",
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 2882, col: 11, offset: 95109},
																																run: (*parser).callonOtherListElement919,
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 2882, col: 11, offset: 95109},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2882, col: 12, offset: 95110},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 1314, col: 5, offset: 44056},
																												expr: &actionExpr{
																													pos: position{line: 1564, col: 5, offset: 51993},
																													run: (*parser).callonOtherListElement923,
																													expr: &seqExpr{
																														pos: position{line: 1564, col: 5, offset: 51993},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 1564, col: 5, offset: 51993},
																																val:        "<",
																																ignoreCase: false,
																																want:       "\"<\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 1564, col: 9, offset: 51997},
																																label: "ref",
																																expr: &actionExpr{
																																	pos: position{line: 1564, col: 14, offset: 52002},
																																	run: (*parser).callonOtherListElement927,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 1564, col: 14, offset: 52002},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 1564, col: 14, offset: 52002},
																																			val:        "[0-9]",
																																			ranges:     []rune{'0', '9'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 1564, col: 62, offset: 52050},
																																val:        ">",
																																ignoreCase: false,
																																want:       "\">\"",
																															},
																															&actionExpr{
																																pos: position{line: 2882, col: 11, offset: 95109},
																																run: (*parser).callonOtherListElement931,
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 2882, col: 11, offset: 95109},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2882, col: 12, offset: 95110},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 1315, col: 5, offset: 44086},
																												expr: &seqExpr{
																													pos: position{line: 1315, col: 7, offset: 44088},
																													exprs: []interface{}{
																														&actionExpr{
																															pos: position{line: 1492, col: 5, offset: 49955},
																															run: (*parser).callonOtherListElement936,
																															expr: &oneOrMoreExpr{
																																pos: position{line: 1492, col: 5, offset: 49955},
																																expr: &seqExpr{
																																	pos: position{line: 1492, col: 6, offset: 49956},
																																	exprs: []interface{}{
																																		&notExpr{
																																			pos: position{line: 1492, col: 6, offset: 49956},
																																			expr: &actionExpr{
																																				pos: position{line: 1497, col: 5, offset: 50087},
																																				run: (*parser).callonOtherListElement940,
																																				expr: &seqExpr{
																																					pos: position{line: 1497, col: 5, offset: 50087},
																																					exprs: []interface{}{
																																						&labeledExpr{
																																							pos:   position{line: 1497, col: 5, offset: 50087},
																																							label: "separator",
																																							expr: &actionExpr{
																																								pos: position{line: 1497, col: 16, offset: 50098},
																																								run: (*parser).callonOtherListElement943,
																																								expr: &oneOrMoreExpr{
																																									pos: position{line: 1497, col: 16, offset: 50098},
																																									expr: &litMatcher{
																																										pos:        position{line: 1497, col: 17, offset: 50099},
																																										val:        ":",
																																										ignoreCase: false,
																																										want:       "\":\"",
																																									},
																																								},
																																							},
																																						},
																																						&andCodeExpr{
																																							pos: position{line: 1500, col: 5, offset: 50156},
																																							run: (*parser).callonOtherListElement946,
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&notExpr{
																																			pos: position{line: 1492, col: 35, offset: 49985},
																																			expr: &choiceExpr{
																																				pos: position{line: 2893, col: 8, offset: 95335},
																																				alternatives: []interface{}{
																																					&notExpr{
																																						pos: position{line: 2890, col: 8, offset: 95285},
																																						expr: &anyMatcher{
																																							line: 2890, col: 9, offset: 95286,
																																						},
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2886, col: 12, offset: 95178},
																																						val:        "\n",
																																						ignoreCase: false,
																																						want:       "\"\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2886, col: 19, offset: 95185},
																																						val:        "\r\n",
																																						ignoreCase: false,
																																						want:       "\"\\r\\n\"",
																																					},
																																					&actionExpr{
																																						pos: position{line: 2886, col: 28, offset: 95194},
																																						run: (*parser).callonOtherListElement953,
																																						expr: &litMatcher{
																																							pos:        position{line: 2886, col: 28, offset: 95194},
																																							val:        "\r",
																																							ignoreCase: false,
																																							want:       "\"\\r\"",
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&anyMatcher{
																																			line: 1492, col: 40, offset: 49990,
																																		},
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 1497, col: 5, offset: 50087},
																															run: (*parser).callonOtherListElement956,
																															expr: &seqExpr{
																																pos: position{line: 1497, col: 5, offset: 50087},
																																exprs: []interface{}{
																																	&labeledExpr{
																																		pos:   position{line: 1497, col: 5, offset: 50087},
																																		label: "separator",
																																		expr: &actionExpr{
																																			pos: position{line: 1497, col: 16, offset: 50098},
																																			run: (*parser).callonOtherListElement959,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 1497, col: 16, offset: 50098},
																																				expr: &litMatcher{
																																					pos:        position{line: 1497, col: 17, offset: 50099},
																																					val:        ":",
																																					ignoreCase: false,
																																					want:       "\":\"",
																																				},
																																			},
																																		},
																																	},
																																	&andCodeExpr{
																																		pos: position{line: 1500, col: 5, offset: 50156},
																																		run: (*parser).callonOtherListElement962,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 1316, col: 5, offset: 44144},
																												expr: &actionExpr{
																													pos: position{line: 527, col: 5, offset: 17165},
																													run: (*parser).callonOtherListElement964,
																													expr: &seqExpr{
																														pos: position{line: 527, col: 5, offset: 17165},
																														exprs: []interface{}{
																															&notExpr{
																																pos: position{line: 527, col: 5, offset: 17165},
																																expr: &charClassMatcher{
																																	pos:        position{line: 2797, col: 13, offset: 92519},
																																	val:        "[0-9\\pL]",
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 528, col: 5, offset: 17195},
																																label: "delimiter",
																																expr: &choiceExpr{
																																	pos: position{line: 529, col: 9, offset: 17215},
																																	alternatives: []interface{}{
																																		&seqExpr{
																																			pos: position{line: 541, col: 26, offset: 17536},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 541, col: 26, offset: 17536},
																																					val:        "////",
																																					ignoreCase: false,
																																					want:       "\"////\"",
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 541, col: 33, offset: 17543},
																																					expr: &choiceExpr{
																																						pos: position{line: 2878, col: 10, offset: 95044},
																																						alternatives: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 2878, col: 10, offset: 95044},
																																								val:        " ",
																																								ignoreCase: false,
																																								want:       "\" \"",
																																							},
																																							&actionExpr{
																																								pos: position{line: 2878, col: 16, offset: 95050},
																																								run: (*parser).callonOtherListElement975,
																																								expr: &litMatcher{
																																									pos:        position{line: 2878, col: 16, offset: 95050},
																																									val:        "\t",
																																									ignoreCase: false,
																																									want:       "\"\\t\"",
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 2893, col: 8, offset: 95335},
																																					alternatives: []interface{}{
																																						&notExpr{
																																							pos: position{line: 2890, col: 8, offset: 95285},
																																							expr: &anyMatcher{
																																								line: 2890, col: 9, offset: 95286,
																																							},
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2886, col: 12, offset: 95178},
																																							val:        "\n",
																																							ignoreCase: false,
																																							want:       "\"\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2886, col: 19, offset: 95185},
																																							val:        "\r\n",
																																							ignoreCase: false,
																																							want:       "\"\\r\\n\"",
																																						},
																																						&actionExpr{
																																							pos: position{line: 2886, col: 28, offset: 95194},
																																							run: (*parser).callonOtherListElement982,
																																							expr: &litMatcher{
																																								pos:        position{line: 2886, col: 28, offset: 95194},
																																								val:        "\r",
																																								ignoreCase: false,
																																								want:       "\"\\r\"",
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&seqExpr{
																																			pos: position{line: 543, col: 26, offset: 17580},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 543, col: 26, offset: 17580},
																																					val:        "====",
																																					ignoreCase: false,
																																					want:       "\"====\"",
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 543, col: 33, offset: 17587},
																																					expr: &choiceExpr{
																																						pos: position{line: 2878, col: 10, offset: 95044},
																																						alternatives: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 2878, col: 10, offset: 95044},
																																								val:        " ",
																																								ignoreCase: false,
																																								want:       "\" \"",
																																							},
																																							&actionExpr{
																																								pos: position{line: 2878, col: 16, offset: 95050},
																																								run: (*parser).callonOtherListElement989,
																																								expr: &litMatcher{
																																									pos:        position{line: 2878, col: 16, offset: 95050},
																																									val:        "\t",
																																									ignoreCase: false,
																																									want:       "\"\\t\"",
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 2893, col: 8, offset: 95335},
																																					alternatives: []interface{}{
																																						&notExpr{
																																							pos: position{line: 2890, col: 8, offset: 95285},
																																							expr: &anyMatcher{
																																								line: 2890, col: 9, offset: 95286,
																																							},
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2886, col: 12, offset: 95178},
																																							val:        "\n",
																																							ignoreCase: false,
																																							want:       "\"\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2886, col: 19, offset: 95185},
																																							val:        "\r\n",
																																							ignoreCase: false,
																																							want:       "\"\\r\\n\"",
																																						},
																																						&actionExpr{
																																							pos: position{line: 2886, col: 28, offset: 95194},
																																							run: (*parser).callonOtherListElement996,
																																							expr: &litMatcher{
																																								pos:        position{line: 2886, col: 28, offset: 95194},
																																								val:        "\r",
																																								ignoreCase: false,
																																								want:       "\"\\r\"",
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&seqExpr{
																																			pos: position{line: 545, col: 25, offset: 17623},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 545, col: 25, offset: 17623},
																																					val:        "```",
																																					ignoreCase: false,
																																					want:       "\"```\"",
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 545, col: 31, offset: 17629},
																																					expr: &choiceExpr{
																																						pos: position{line: 2878, col: 10, offset: 95044},
																																						alternatives: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 2878, col: 10, offset: 95044},
																																								val:        " ",
																																								ignoreCase: false,
																																								want:       "\" \"",
																																							},
																																							&actionExpr{
																																								pos: position{line: 2878, col: 16, offset: 95050},
																																								run: (*parser).callonOtherListElement1003,
																																								expr: &litMatcher{
																																									pos:        position{line: 2878, col: 16, offset: 95050},
																																									val:        "\t",
																																									ignoreCase: false,
																																									want:       "\"\\t\"",
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 2893, col: 8, offset: 95335},
																																					alternatives: []interface{}{
																																						&notExpr{
																																							pos: position{line: 2890, col: 8, offset: 95285},
																																							expr: &anyMatcher{
																																								line: 2890, col: 9, offset: 95286,
																																							},
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2886, col: 12, offset: 95178},
																																							val:        "\n",
																																							ignoreCase: false,
																																							want:       "\"\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2886, col: 19, offset: 95185},
																																							val:        "\r\n",
																																							ignoreCase: false,
																																							want:       "\"\\r\\n\"",
																																						},
																																						&actionExpr{
																																							pos: position{line: 2886, col: 28, offset: 95194},
																																							run: (*parser).callonOtherListElement1010,
																																							expr: &litMatcher{
																																								pos:        position{line: 2886, col: 28, offset: 95194},
																																								val:        "\r",
																																								ignoreCase: false,
																																								want:       "\"\\r\"",
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&seqExpr{
																																			pos: position{line: 547, col: 26, offset: 17666},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 547, col: 26, offset: 17666},
																																					val:        "----",
																																					ignoreCase: false,
																																					want:       "\"----\"",
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 547, col: 33, offset: 17673},
																																					expr: &choiceExpr{
																																						pos: position{line: 2878, col: 10, offset: 95044},
																																						alternatives: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 2878, col: 10, offset: 95044},
																																								val:        " ",
																																								ignoreCase: false,
																																								want:       "\" \"",
																																							},
																																							&actionExpr{
																																								pos: position{line: 2878, col: 16, offset: 95050},
																																								run: (*parser).callonOtherListElement1017,
																																								expr: &litMatcher{
																																									pos:        position{line: 2878, col: 16, offset: 95050},
																																									val:        "\t",
																																									ignoreCase: false,
																																									want:       "\"\\t\"",
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 2893, col: 8, offset: 95335},
																																					alternatives: []interface{}{
																																						&notExpr{
																																							pos: position{line: 2890, col: 8, offset: 95285},
																																							expr: &anyMatcher{
																																								line: 2890, col: 9, offset: 95286,
																																							},
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2886, col: 12, offset: 95178},
																																							val:        "\n",
																																							ignoreCase: false,
																																							want:       "\"\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2886, col: 19, offset: 95185},
																																							val:        "\r\n",
																																							ignoreCase: false,
																																							want:       "\"\\r\\n\"",
																																						},
																																						&actionExpr{
																																							pos: position{line: 2886, col: 28, offset: 95194},
																																							run: (*parser).callonOtherListElement1024,
																																							expr: &litMatcher{
																																								pos:        position{line: 2886, col: 28, offset: 95194},
																																								val:        "\r",
																																								ignoreCase: false,
																																								want:       "\"\\r\"",
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&seqExpr{
																																			pos: position{line: 549, col: 26, offset: 17710},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 549, col: 26, offset: 17710},
																																					val:        "....",
																																					ignoreCase: false,
																																					want:       "\"....\"",
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 549, col: 33, offset: 17717},
																																					expr: &choiceExpr{
																																						pos: position{line: 2878, col: 10, offset: 95044},
																																						alternatives: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 2878, col: 10, offset: 95044},
																																								val:        " ",
																																								ignoreCase: false,
																																								want:       "\" \"",
																																							},
																																							&actionExpr{
																																								pos: position{line: 2878, col: 16, offset: 95050},
																																								run: (*parser).callonOtherListElement1031,
																																								expr: &litMatcher{
																																									pos:        position{line: 2878, col: 16, offset: 95050},
																																									val:        "\t",
																																									ignoreCase: false,
																																									want:       "\"\\t\"",
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 2893, col: 8, offset: 95335},
																																					alternatives: []interface{}{
																																						&notExpr{
																																							pos: position{line: 2890, col: 8, offset: 95285},
																																							expr: &anyMatcher{
																																								line: 2890, col: 9, offset: 95286,
																																							},
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2886, col: 12, offset: 95178},
																																							val:        "\n",
																																							ignoreCase: false,
																																							want:       "\"\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2886, col: 19, offset: 95185},
																																							val:        "\r\n",
																																							ignoreCase: false,
																																							want:       "\"\\r\\n\"",
																																						},
																																						&actionExpr{
																																							pos: position{line: 2886, col: 28, offset: 95194},
																																							run: (*parser).callonOtherListElement1038,
																																							expr: &litMatcher{
																																								pos:        position{line: 2886, col: 28, offset: 95194},
																																								val:        "\r",
																																								ignoreCase: false,
																																								want:       "\"\\r\"",
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&seqExpr{
																																			pos: position{line: 551, col: 30, offset: 17758},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 551, col: 30, offset: 17758},
																																					val:        "++++",
																																					ignoreCase: false,
																																					want:       "\"++++\"",
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 551, col: 37, offset: 17765},
																																					expr: &choiceExpr{
																																						pos: position{line: 2878, col: 10, offset: 95044},
																																						alternatives: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 2878, col: 10, offset: 95044},
																																								val:        " ",
																																								ignoreCase: false,
																																								want:       "\" \"",
																																							},
																																							&actionExpr{
																																								pos: position{line: 2878, col: 16, offset: 95050},
																																								run: (*parser).callonOtherListElement1045,
																																								expr: &litMatcher{
																																									pos:        position{line: 2878, col: 16, offset: 95050},
																																									val:        "\t",
																																									ignoreCase: false,
																																									want:       "\"\\t\"",
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 2893, col: 8, offset: 95335},
																																					alternatives: []interface{}{
																																						&notExpr{
																																							pos: position{line: 2890, col: 8, offset: 95285},
																																							expr: &anyMatcher{
																																								line: 2890, col: 9, offset: 95286,
																																							},
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2886, col: 12, offset: 95178},
																																							val:        "\n",
																																							ignoreCase: false,
																																							want:       "\"\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2886, col: 19, offset: 95185},
																																							val:        "\r\n",
																																							ignoreCase: false,
																																							want:       "\"\\r\\n\"",
																																						},
																																						&actionExpr{
																																							pos: position{line: 2886, col: 28, offset: 95194},
																																							run: (*parser).callonOtherListElement1052,
																																							expr: &litMatcher{
																																								pos:        position{line: 2886, col: 28, offset: 95194},
																																								val:        "\r",
																																								ignoreCase: false,
																																								want:       "\"\\r\"",
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&seqExpr{
																																			pos: position{line: 553, col: 24, offset: 17800},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 553, col: 24, offset: 17800},
																																					val:        "____",
																																					ignoreCase: false,
																																					want:       "\"____\"",
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 553, col: 31, offset: 17807},
																																					expr: &choiceExpr{
																																						pos: position{line: 2878, col: 10, offset: 95044},
																																						alternatives: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 2878, col: 10, offset: 95044},
																																								val:        " ",
																																								ignoreCase: false,
																																								want:       "\" \"",
																																							},
																																							&actionExpr{
																																								pos: position{line: 2878, col: 16, offset: 95050},
																																								run: (*parser).callonOtherListElement1059,
																																								expr: &litMatcher{
																																									pos:        position{line: 2878, col: 16, offset: 95050},
																																									val:        "\t",
																																									ignoreCase: false,
																																									want:       "\"\\t\"",
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 2893, col: 8, offset: 95335},
																																					alternatives: []interface{}{
																																						&notExpr{
																																							pos: position{line: 2890, col: 8, offset: 95285},
																																							expr: &anyMatcher{
																																								line: 2890, col: 9, offset: 95286,
																																							},
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2886, col: 12, offset: 95178},
																																							val:        "\n",
																																							ignoreCase: false,
																																							want:       "\"\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2886, col: 19, offset: 95185},
																																							val:        "\r\n",
																																							ignoreCase: false,
																																							want:       "\"\\r\\n\"",
																																						},
																																						&actionExpr{
																																							pos: position{line: 2886, col: 28, offset: 95194},
																																							run: (*parser).callonOtherListElement1066,
																																							expr: &litMatcher{
																																								pos:        position{line: 2886, col: 28, offset: 95194},
																																								val:        "\r",
																																								ignoreCase: false,
																																								want:       "\"\\r\"",
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&seqExpr{
																																			pos: position{line: 555, col: 26, offset: 17844},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 555, col: 26, offset: 17844},
																																					val:        "****",
																																					ignoreCase: false,
																																					want:       "\"****\"",
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 555, col: 33, offset: 17851},
																																					expr: &choiceExpr{
																																						pos: position{line: 2878, col: 10, offset: 95044},
																																						alternatives: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 2878, col: 10, offset: 95044},
																																								val:        " ",
																																								ignoreCase: false,
																																								want:       "\" \"",
																																							},
																																							&actionExpr{
																																								pos: position{line: 2878, col: 16, offset: 95050},
																																								run: (*parser).callonOtherListElement1073,
																																								expr: &litMatcher{
																																									pos:        position{line: 2878, col: 16, offset: 95050},
																																									val:        "\t",
																																									ignoreCase: false,
																																									want:       "\"\\t\"",
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 2893, col: 8, offset: 95335},
																																					alternatives: []interface{}{
																																						&notExpr{
																																							pos: position{line: 2890, col: 8, offset: 95285},
																																							expr: &anyMatcher{
																																								line: 2890, col: 9, offset: 95286,
																																							},
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2886, col: 12, offset: 95178},
																																							val:        "\n",
																																							ignoreCase: false,
																																							want:       "\"\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2886, col: 19, offset: 95185},
																																							val:        "\r\n",
																																							ignoreCase: false,
																																							want:       "\"\\r\\n\"",
																																						},
																																						&actionExpr{
																																							pos: position{line: 2886, col: 28, offset: 95194},
																																							run: (*parser).callonOtherListElement1080,
																																							expr: &litMatcher{
																																								pos:        position{line: 2886, col: 28, offset: 95194},
																																								val:        "\r",
																																								ignoreCase: false,
																																								want:       "\"\\r\"",
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 1317, col: 5, offset: 44164},
																												label: "content",
																												expr: &actionExpr{
																													pos: position{line: 1317, col: 14, offset: 44173},
																													run: (*parser).callonOtherListElement1083,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 1317, col: 14, offset: 44173},
																														expr: &charClassMatcher{
																															pos:        position{line: 1317, col: 14, offset: 44173},
																															val:        "[^\\r\\n]",
																															chars:      []rune{'\r', '\n'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2893, col: 8, offset: 95335},
																												alternatives: []interface{}{
																													&notExpr{
																														pos: position{line: 2890, col: 8, offset: 95285},
																														expr: &anyMatcher{
																															line: 2890, col: 9, offset: 95286,
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 2886, col: 12, offset: 95178},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2886, col: 19, offset: 95185},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&actionExpr{
																														pos: position{line: 2886, col: 28, offset: 95194},
																														run: (*parser).callonOtherListElement1091,
																														expr: &litMatcher{
																															pos:        position{line: 2886, col: 28, offset: 95194},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1536, col: 9, offset: 51194},
																				run: (*parser).callonOtherListElement1093,
																				expr: &seqExpr{
																					pos: position{line: 1536, col: 9, offset: 51194},
																					exprs: []interface{}{
																						&actionExpr{
																							pos: position{line: 2882, col: 11, offset: 95109},
																							run: (*parser).callonOtherListElement1095,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2882, col: 11, offset: 95109},
																								expr: &charClassMatcher{
																									pos:        position{line: 2882, col: 12, offset: 95110},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 1537, col: 9, offset: 51246},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 1537, col: 18, offset: 51255},
																								run: (*parser).callonOtherListElement1099,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1537, col: 18, offset: 51255},
																									expr: &charClassMatcher{
																										pos:        position{line: 1537, col: 18, offset: 51255},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2893, col: 8, offset: 95335},
																							alternatives: []interface{}{
																								&notExpr{
																									pos: position{line: 2890, col: 8, offset: 95285},
																									expr: &anyMatcher{
																										line: 2890, col: 9, offset: 95286,
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2886, col: 12, offset: 95178},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2886, col: 19, offset: 95185},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&actionExpr{
																									pos: position{line: 2886, col: 28, offset: 95194},
																									run: (*parser).callonOtherListElement1107,
																									expr: &litMatcher{
																										pos:        position{line: 2886, col: 28, offset: 95194},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2604, col: 22, offset: 86659},
										run: (*parser).callonOtherListElement1109,
										expr: &seqExpr{
											pos: position{line: 2604, col: 22, offset: 86659},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2609, col: 31, offset: 86880},
													val:        "//",
													ignoreCase: false,
													want:       "\"//\"",
												},
												&notExpr{
													pos: position{line: 2609, col: 36, offset: 86885},
													expr: &litMatcher{
														pos:        position{line: 2609, col: 37, offset: 86886},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 2604, col: 49, offset: 86686},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 2611, col: 29, offset: 86921},
														run: (*parser).callonOtherListElement1115,
														expr: &zeroOrMoreExpr{
															pos: position{line: 2611, col: 29, offset: 86921},
															expr: &charClassMatcher{
																pos:        position{line: 2611, col: 29, offset: 86921},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2893, col: 8, offset: 95335},
													alternatives: []interface{}{
														&notExpr{
															pos: position{line: 2890, col: 8, offset: 95285},
															expr: &anyMatcher{
																line: 2890, col: 9, offset: 95286,
															},
														},
														&litMatcher{
															pos:        position{line: 2886, col: 12, offset: 95178},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2886, col: 19, offset: 95185},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&actionExpr{
															pos: position{line: 2886, col: 28, offset: 95194},
															run: (*parser).callonOtherListElement1123,
															expr: &litMatcher{
																pos:        position{line: 2886, col: 28, offset: 95194},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1302, col: 13, offset: 43743},
										run: (*parser).callonOtherListElement1125,
										expr: &labeledExpr{
											pos:   position{line: 1302, col: 13, offset: 43743},
											label: "element",
											expr: &actionExpr{
												pos: position{line: 1310, col: 5, offset: 43944},
												run: (*parser).callonOtherListElement1127,
												expr: &seqExpr{
													pos: position{line: 1310, col: 5, offset: 43944},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 1310, col: 5, offset: 43944},
															expr: &actionExpr{
																pos: position{line: 482, col: 14, offset: 15644},
																run: (*parser).callonOtherListElement1130,
																expr: &seqExpr{
																	pos: position{line: 482, col: 14, offset: 15644},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 482, col: 14, offset: 15644},
																			expr: &notExpr{
																				pos: position{line: 2890, col: 8, offset: 95285},
																				expr: &anyMatcher{
																					line: 2890, col: 9, offset: 95286,
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 482, col: 19, offset: 15649},
																			expr: &choiceExpr{
																				pos: position{line: 2878, col: 10, offset: 95044},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2878, col: 10, offset: 95044},
																						val:        " ",
																						ignoreCase: false,
																						want:       "\" \"",
																					},
																					&actionExpr{
																						pos: position{line: 2878, col: 16, offset: 95050},
																						run: (*parser).callonOtherListElement1138,
																						expr: &litMatcher{
																							pos:        position{line: 2878, col: 16, offset: 95050},
																							val:        "\t",
																							ignoreCase: false,
																							want:       "\"\\t\"",
																						},
																					},
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2893, col: 8, offset: 95335},
																			alternatives: []interface{}{
																				&notExpr{
																					pos: position{line: 2890, col: 8, offset: 95285},
																					expr: &anyMatcher{
																						line: 2890, col: 9, offset: 95286,
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2886, col: 12, offset: 95178},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2886, col: 19, offset: 95185},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&actionExpr{
																					pos: position{line: 2886, col: 28, offset: 95194},
																					run: (*parser).callonOtherListElement1145,
																					expr: &litMatcher{
																						pos:        position{line: 2886, col: 28, offset: 95194},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 1311, col: 5, offset: 43959},
															expr: &seqExpr{
																pos: position{line: 1343, col: 34, offset: 44869},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 1343, col: 34, offset: 44869},
																		val:        "+",
																		ignoreCase: false,
																		want:       "\"+\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1343, col: 38, offset: 44873},
																		expr: &choiceExpr{
																			pos: position{line: 2878, col: 10, offset: 95044},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2878, col: 10, offset: 95044},
																					val:        " ",
																					ignoreCase: false,
																					want:       "\" \"",
																				},
																				&actionExpr{
																					pos: position{line: 2878, col: 16, offset: 95050},
																					run: (*parser).callonOtherListElement1153,
																					expr: &litMatcher{
																						pos:        position{line: 2878, col: 16, offset: 95050},
																						val:        "\t",
																						ignoreCase: false,
																						want:       "\"\\t\"",
																					},
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2886, col: 12, offset: 95178},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2886, col: 12, offset: 95178},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																			&litMatcher{
																				pos:        position{line: 2886, col: 19, offset: 95185},
																				val:        "\r\n",
																				ignoreCase: false,
																				want:       "\"\\r\\n\"",
																			},
																			&actionExpr{
																				pos: position{line: 2886, col: 28, offset: 95194},
																				run: (*parser).callonOtherListElement1158,
																				expr: &litMatcher{
																					pos:        position{line: 2886, col: 28, offset: 95194},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 1312, col: 5, offset: 43994},
															expr: &actionExpr{
																pos: position{line: 1392, col: 5, offset: 46378},
																run: (*parser).callonOtherListElement1161,
																expr: &seqExpr{
																	pos: position{line: 1392, col: 5, offset: 46378},
																	exprs: []interface{}{
																		&zeroOrMoreExpr{
																			pos: position{line: 1392, col: 5, offset: 46378},
																			expr: &choiceExpr{
																				pos: position{line: 2878, col: 10, offset: 95044},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2878, col: 10, offset: 95044},
																						val:        " ",
																						ignoreCase: false,
																						want:       "\" \"",
																					},
																					&actionExpr{
																						pos: position{line: 2878, col: 16, offset: 95050},
																						run: (*parser).callonOtherListElement1166,
																						expr: &litMatcher{
																							pos:        position{line: 2878, col: 16, offset: 95050},
																							val:        "\t",
																							ignoreCase: false,
																							want:       "\"\\t\"",
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1392, col: 12, offset: 46385},
																			label: "prefix",
																			expr: &choiceExpr{
																				pos: position{line: 1394, col: 9, offset: 46448},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 1394, col: 9, offset: 46448},
																						run: (*parser).callonOtherListElement1170,
																						expr: &seqExpr{
																							pos: position{line: 1394, col: 9, offset: 46448},
																							exprs: []interface{}{
																								&labeledExpr{
																									pos:   position{line: 1394, col: 9, offset: 46448},
																									label: "depth",
																									expr: &actionExpr{
																										pos: position{line: 1394, col: 16, offset: 46455},
																										run: (*parser).callonOtherListElement1173,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 1394, col: 16, offset: 46455},
																											expr: &litMatcher{
																												pos:        position{line: 1394, col: 17, offset: 46456},
																												val:        ".",
																												ignoreCase: false,
																												want:       "\".\"",
																											},
																										},
																									},
																								},
																								&andCodeExpr{
																									pos: position{line: 1398, col: 9, offset: 46556},
																									run: (*parser).callonOtherListElement1176,
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1417, col: 11, offset: 47273},
																						run: (*parser).callonOtherListElement1177,
																						expr: &seqExpr{
																							pos: position{line: 1417, col: 11, offset: 47273},
																							exprs: []interface{}{
																								&oneOrMoreExpr{
																									pos: position{line: 1417, col: 11, offset: 47273},
																									expr: &charClassMatcher{
																										pos:        position{line: 1417, col: 12, offset: 47274},
																										val:        "[0-9]",
																										ranges:     []rune{'0', '9'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 1417, col: 20, offset: 47282},
																									val:        ".",
																									ignoreCase: false,
																									want:       "\".\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1419, col: 13, offset: 47399},
																						run: (*parser).callonOtherListElement1182,
																						expr: &seqExpr{
																							pos: position{line: 1419, col: 13, offset: 47399},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 1419, col: 14, offset: 47400},
																									val:        "[a-z]",
																									ranges:     []rune{'a', 'z'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&litMatcher{
																									pos:        position{line: 1419, col: 21, offset: 47407},
																									val:        ".",
																									ignoreCase: false,
																									want:       "\".\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1421, col: 13, offset: 47527},
																						run: (*parser).callonOtherListElement1186,
																						expr: &seqExpr{
																							pos: position{line: 1421, col: 13, offset: 47527},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 1421, col: 14, offset: 47528},
																									val:        "[A-Z]",
																									ranges:     []rune{'A', 'Z'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&litMatcher{
																									pos:        position{line: 1421, col: 21, offset: 47535},
																									val:        ".",
																									ignoreCase: false,
																									want:       "\".\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1423, col: 13, offset: 47655},
																						run: (*parser).callonOtherListElement1190,
																						expr: &seqExpr{
																							pos: position{line: 1423, col: 13, offset: 47655},
																							exprs: []interface{}{
																								&oneOrMoreExpr{
																									pos: position{line: 1423, col: 13, offset: 47655},
																									expr: &charClassMatcher{
																										pos:        position{line: 1423, col: 14, offset: 47656},
																										val:        "[ivxdlcm]",
																										chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 1423, col: 26, offset: 47668},
																									val:        ")",
																									ignoreCase: false,
																									want:       "\")\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1425, col: 13, offset: 47788},
																						run: (*parser).callonOtherListElement1195,
																						expr: &seqExpr{
																							pos: position{line: 1425, col: 13, offset: 47788},
																							exprs: []interface{}{
																								&oneOrMoreExpr{
																									pos: position{line: 1425, col: 13, offset: 47788},
																									expr: &charClassMatcher{
																										pos:        position{line: 1425, col: 14, offset: 47789},
																										val:        "[IVXDLCM]",
																										chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 1425, col: 26, offset: 47801},
																									val:        ")",
																									ignoreCase: false,
																									want:       "\")\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 2882, col: 11, offset: 95109},
																			run: (*parser).callonOtherListElement1200,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2882, col: 11, offset: 95109},
																				expr: &charClassMatcher{
																					pos:        position{line: 2882, col: 12, offset: 95110},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 1313, col: 5, offset: 44024},
															expr: &actionExpr{
																pos: position{line: 1442, col: 5, offset: 48340},
																run: (*parser).callonOtherListElement1204,
																expr: &seqExpr{
																	pos: position{line: 1442, col: 5, offset: 48340},
																	exprs: []interface{}{
																		&zeroOrMoreExpr{
																			pos: position{line: 1442, col: 5, offset: 48340},
																			expr: &choiceExpr{
																				pos: position{line: 2878, col: 10, offset: 95044},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2878, col: 10, offset: 95044},
																						val:        " ",
																						ignoreCase: false,
																						want:       "\" \"",
																					},
																					&actionExpr{
																						pos: position{line: 2878, col: 16, offset: 95050},
																						run: (*parser).callonOtherListElement1209,
																						expr: &litMatcher{
																							pos:        position{line: 2878, col: 16, offset: 95050},
																							val:        "\t",
																							ignoreCase: false,
																							want:       "\"\\t\"",
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1442, col: 12, offset: 48347},
																			label: "prefix",
																			expr: &choiceExpr{
																				pos: position{line: 1442, col: 20, offset: 48355},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 1444, col: 9, offset: 48412},
																						run: (*parser).callonOtherListElement1213,
																						expr: &seqExpr{
																							pos: position{line: 1444, col: 9, offset: 48412},
																							exprs: []interface{}{
																								&labeledExpr{
																									pos:   position{line: 1444, col: 9, offset: 48412},
																									label: "depth",
																									expr: &actionExpr{
																										pos: position{line: 1444, col: 16, offset: 48419},
																										run: (*parser).callonOtherListElement1216,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 1444, col: 16, offset: 48419},
																											expr: &litMatcher{
																												pos:        position{line: 1444, col: 17, offset: 48420},
																												val:        "*",
																												ignoreCase: false,
																												want:       "\"*\"",
																											},
																										},
																									},
																								},
																								&andCodeExpr{
																									pos: position{line: 1448, col: 9, offset: 48520},
																									run: (*parser).callonOtherListElement1219,
																								},
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 1465, col: 14, offset: 49227},
																						label: "depth",
																						expr: &actionExpr{
																							pos: position{line: 1465, col: 21, offset: 49234},
																							run: (*parser).callonOtherListElement1221,
																							expr: &litMatcher{
																								pos:        position{line: 1465, col: 22, offset: 49235},
																								val:        "-",
																								ignoreCase: false,
																								want:       "\"-\"",
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 2882, col: 11, offset: 95109},
																			run: (*parser).callonOtherListElement1223,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2882, col: 11, offset: 95109},
																				expr: &charClassMatcher{
																					pos:        position{line: 2882, col: 12, offset: 95110},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 1314, col: 5, offset: 44056},
															expr: &actionExpr{
																pos: position{line: 1564, col: 5, offset: 51993},
																run: (*parser).callonOtherListElement1227,
																expr: &seqExpr{
																	pos: position{line: 1564, col: 5, offset: 51993},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 1564, col: 5, offset: 51993},
																			val:        "<",
																			ignoreCase: false,
																			want:       "\"<\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 1564, col: 9, offset: 51997},
																			label: "ref",
																			expr: &actionExpr{
																				pos: position{line: 1564, col: 14, offset: 52002},
																				run: (*parser).callonOtherListElement1231,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 1564, col: 14, offset: 52002},
																					expr: &charClassMatcher{
																						pos:        position{line: 1564, col: 14, offset: 52002},
																						val:        "[0-9]",
																						ranges:     []rune{'0', '9'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 1564, col: 62, offset: 52050},
																			val:        ">",
																			ignoreCase: false,
																			want:       "\">\"",
																		},
																		&actionExpr{
																			pos: position{line: 2882, col: 11, offset: 95109},
																			run: (*parser).callonOtherListElement1235,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2882, col: 11, offset: 95109},
																				expr: &charClassMatcher{
																					pos:        position{line: 2882, col: 12, offset: 95110},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 1315, col: 5, offset: 44086},
															expr: &seqExpr{
																pos: position{line: 1315, col: 7, offset: 44088},
																exprs: []interface{}{
																	&actionExpr{
																		pos: position{line: 1492, col: 5, offset: 49955},
																		run: (*parser).callonOtherListElement1240,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1492, col: 5, offset: 49955},
																			expr: &seqExpr{
																				pos: position{line: 1492, col: 6, offset: 49956},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 1492, col: 6, offset: 49956},
																						expr: &actionExpr{
																							pos: position{line: 1497, col: 5, offset: 50087},
																							run: (*parser).callonOtherListElement1244,
																							expr: &seqExpr{
																								pos: position{line: 1497, col: 5, offset: 50087},
																								exprs: []interface{}{
																									&labeledExpr{
																										pos:   position{line: 1497, col: 5, offset: 50087},
																										label: "separator",
																										expr: &actionExpr{
																											pos: position{line: 1497, col: 16, offset: 50098},
																											run: (*parser).callonOtherListElement1247,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 1497, col: 16, offset: 50098},
																												expr: &litMatcher{
																													pos:        position{line: 1497, col: 17, offset: 50099},
																													val:        ":",
																													ignoreCase: false,
																													want:       "\":\"",
																												},
																											},
																										},
																									},
																									&andCodeExpr{
																										pos: position{line: 1500, col: 5, offset: 50156},
																										run: (*parser).callonOtherListElement1250,
																									},
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 1492, col: 35, offset: 49985},
																						expr: &choiceExpr{
																							pos: position{line: 2893, col: 8, offset: 95335},
																							alternatives: []interface{}{
																								&notExpr{
																									pos: position{line: 2890, col: 8, offset: 95285},
																									expr: &anyMatcher{
																										line: 2890, col: 9, offset: 95286,
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2886, col: 12, offset: 95178},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2886, col: 19, offset: 95185},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&actionExpr{
																									pos: position{line: 2886, col: 28, offset: 95194},
																									run: (*parser).callonOtherListElement1257,
																									expr: &litMatcher{
																										pos:        position{line: 2886, col: 28, offset: 95194},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																					},
																					&anyMatcher{
																						line: 1492, col: 40, offset: 49990,
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 1497, col: 5, offset: 50087},
																		run: (*parser).callonOtherListElement1260,
																		expr: &seqExpr{
																			pos: position{line: 1497, col: 5, offset: 50087},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1497, col: 5, offset: 50087},
																					label: "separator",
																					expr: &actionExpr{
																						pos: position{line: 1497, col: 16, offset: 50098},
																						run: (*parser).callonOtherListElement1263,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1497, col: 16, offset: 50098},
																							expr: &litMatcher{
																								pos:        position{line: 1497, col: 17, offset: 50099},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 1500, col: 5, offset: 50156},
																					run: (*parser).callonOtherListElement1266,
																				},
																			},
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 1316, col: 5, offset: 44144},
															expr: &actionExpr{
																pos: position{line: 527, col: 5, offset: 17165},
																run: (*parser).callonOtherListElement1268,
																expr: &seqExpr{
																	pos: position{line: 527, col: 5, offset: 17165},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 527, col: 5, offset: 17165},
																			expr: &charClassMatcher{
																				pos:        position{line: 2797, col: 13, offset: 92519},
																				val:        "[0-9\\pL]",
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 528, col: 5, offset: 17195},
																			label: "delimiter",
																			expr: &choiceExpr{
																				pos: position{line: 529, col: 9, offset: 17215},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 541, col: 26, offset: 17536},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 541, col: 26, offset: 17536},
																								val:        "////",
																								ignoreCase: false,
																								want:       "\"////\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 541, col: 33, offset: 17543},
																								expr: &choiceExpr{
																									pos: position{line: 2878, col: 10, offset: 95044},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2878, col: 10, offset: 95044},
																											val:        " ",
																											ignoreCase: false,
																											want:       "\" \"",
																										},
																										&actionExpr{
																											pos: position{line: 2878, col: 16, offset: 95050},
																											run: (*parser).callonOtherListElement1279,
																											expr: &litMatcher{
																												pos:        position{line: 2878, col: 16, offset: 95050},
																												val:        "\t",
																												ignoreCase: false,
																												want:       "\"\\t\"",
																											},
																										},
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2893, col: 8, offset: 95335},
																								alternatives: []interface{}{
																									&notExpr{
																										pos: position{line: 2890, col: 8, offset: 95285},
																										expr: &anyMatcher{
																											line: 2890, col: 9, offset: 95286,
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2886, col: 12, offset: 95178},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2886, col: 19, offset: 95185},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&actionExpr{
																										pos: position{line: 2886, col: 28, offset: 95194},
																										run: (*parser).callonOtherListElement1286,
																										expr: &litMatcher{
																											pos:        position{line: 2886, col: 28, offset: 95194},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 543, col: 26, offset: 17580},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 543, col: 26, offset: 17580},
																								val:        "====",
																								ignoreCase: false,
																								want:       "\"====\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 543, col: 33, offset: 17587},
																								expr: &choiceExpr{
																									pos: position{line: 2878, col: 10, offset: 95044},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2878, col: 10, offset: 95044},
																											val:        " ",
																											ignoreCase: false,
																											want:       "\" \"",
																										},
																										&actionExpr{
																											pos: position{line: 2878, col: 16, offset: 95050},
																											run: (*parser).callonOtherListElement1293,
																											expr: &litMatcher{
																												pos:        position{line: 2878, col: 16, offset: 95050},
																												val:        "\t",
																												ignoreCase: false,
																												want:       "\"\\t\"",
																											},
																										},
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2893, col: 8, offset: 95335},
																								alternatives: []interface{}{
																									&notExpr{
																										pos: position{line: 2890, col: 8, offset: 95285},
																										expr: &anyMatcher{
																											line: 2890, col: 9, offset: 95286,
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2886, col: 12, offset: 95178},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2886, col: 19, offset: 95185},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&actionExpr{
																										pos: position{line: 2886, col: 28, offset: 95194},
																										run: (*parser).callonOtherListElement1300,
																										expr: &litMatcher{
																											pos:        position{line: 2886, col: 28, offset: 95194},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 545, col: 25, offset: 17623},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 545, col: 25, offset: 17623},
																								val:        "```",
																								ignoreCase: false,
																								want:       "\"```\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 545, col: 31, offset: 17629},
																								expr: &choiceExpr{
																									pos: position{line: 2878, col: 10, offset: 95044},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2878, col: 10, offset: 95044},
																											val:        " ",
																											ignoreCase: false,
																											want:       "\" \"",
																										},
																										&actionExpr{
																											pos: position{line: 2878, col: 16, offset: 95050},
																											run: (*parser).callonOtherListElement1307,
																											expr: &litMatcher{
																												pos:        position{line: 2878, col: 16, offset: 95050},
																												val:        "\t",
																												ignoreCase: false,
																												want:       "\"\\t\"",
																											},
																										},
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2893, col: 8, offset: 95335},
																								alternatives: []interface{}{
																									&notExpr{
																										pos: position{line: 2890, col: 8, offset: 95285},
																										expr: &anyMatcher{
																											line: 2890, col: 9, offset: 95286,
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2886, col: 12, offset: 95178},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2886, col: 19, offset: 95185},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&actionExpr{
																										pos: position{line: 2886, col: 28, offset: 95194},
																										run: (*parser).callonOtherListElement1314,
																										expr: &litMatcher{
																											pos:        position{line: 2886, col: 28, offset: 95194},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 547, col: 26, offset: 17666},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 547, col: 26, offset: 17666},
																								val:        "----",
																								ignoreCase: false,
																								want:       "\"----\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 547, col: 33, offset: 17673},
																								expr: &choiceExpr{
																									pos: position{line: 2878, col: 10, offset: 95044},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2878, col: 10, offset: 95044},
																											val:        " ",
																											ignoreCase: false,
																											want:       "\" \"",
																										},
																										&actionExpr{
																											pos: position{line: 2878, col: 16, offset: 95050},
																											run: (*parser).callonOtherListElement1321,
																											expr: &litMatcher{
																												pos:        position{line: 2878, col: 16, offset: 95050},
																												val:        "\t",
																												ignoreCase: false,
																												want:       "\"\\t\"",
																											},
																										},
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2893, col: 8, offset: 95335},
																								alternatives: []interface{}{
																									&notExpr{
																										pos: position{line: 2890, col: 8, offset: 95285},
																										expr: &anyMatcher{
																											line: 2890, col: 9, offset: 95286,
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2886, col: 12, offset: 95178},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2886, col: 19, offset: 95185},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&actionExpr{
																										pos: position{line: 2886, col: 28, offset: 95194},
																										run: (*parser).callonOtherListElement1328,
																										expr: &litMatcher{
																											pos:        position{line: 2886, col: 28, offset: 95194},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 549, col: 26, offset: 17710},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 549, col: 26, offset: 17710},
																								val:        "....",
																								ignoreCase: false,
																								want:       "\"....\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 549, col: 33, offset: 17717},
																								expr: &choiceExpr{
																									pos: position{line: 2878, col: 10, offset: 95044},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2878, col: 10, offset: 95044},
																											val:        " ",
																											ignoreCase: false,
																											want:       "\" \"",
																										},
																										&actionExpr{
																											pos: position{line: 2878, col: 16, offset: 95050},
																											run: (*parser).callonOtherListElement1335,
																											expr: &litMatcher{
																												pos:        position{line: 2878, col: 16, offset: 95050},
																												val:        "\t",
																												ignoreCase: false,
																												want:       "\"\\t\"",
																											},
																										},
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2893, col: 8, offset: 95335},
																								alternatives: []interface{}{
																									&notExpr{
																										pos: position{line: 2890, col: 8, offset: 95285},
																										expr: &anyMatcher{
																											line: 2890, col: 9, offset: 95286,
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2886, col: 12, offset: 95178},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2886, col: 19, offset: 95185},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&actionExpr{
																										pos: position{line: 2886, col: 28, offset: 95194},
																										run: (*parser).callonOtherListElement1342,
																										expr: &litMatcher{
																											pos:        position{line: 2886, col: 28, offset: 95194},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 551, col: 30, offset: 17758},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 551, col: 30, offset: 17758},
																								val:        "++++",
																								ignoreCase: false,
																								want:       "\"++++\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 551, col: 37, offset: 17765},
																								expr: &choiceExpr{
																									pos: position{line: 2878, col: 10, offset: 95044},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2878, col: 10, offset: 95044},
																											val:        " ",
																											ignoreCase: false,
																											want:       "\" \"",
																										},
																										&actionExpr{
																											pos: position{line: 2878, col: 16, offset: 95050},
																											run: (*parser).callonOtherListElement1349,
																											expr: &litMatcher{
																												pos:        position{line: 2878, col: 16, offset: 95050},
																												val:        "\t",
																												ignoreCase: false,
																												want:       "\"\\t\"",
																											},
																										},
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2893, col: 8, offset: 95335},
																								alternatives: []interface{}{
																									&notExpr{
																										pos: position{line: 2890, col: 8, offset: 95285},
																										expr: &anyMatcher{
																											line: 2890, col: 9, offset: 95286,
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2886, col: 12, offset: 95178},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2886, col: 19, offset: 95185},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&actionExpr{
																										pos: position{line: 2886, col: 28, offset: 95194},
																										run: (*parser).callonOtherListElement1356,
																										expr: &litMatcher{
																											pos:        position{line: 2886, col: 28, offset: 95194},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 553, col: 24, offset: 17800},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 553, col: 24, offset: 17800},
																								val:        "____",
																								ignoreCase: false,
																								want:       "\"____\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 553, col: 31, offset: 17807},
																								expr: &choiceExpr{
																									pos: position{line: 2878, col: 10, offset: 95044},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2878, col: 10, offset: 95044},
																											val:        " ",
																											ignoreCase: false,
																											want:       "\" \"",
																										},
																										&actionExpr{
																											pos: position{line: 2878, col: 16, offset: 95050},
																											run: (*parser).callonOtherListElement1363,
																											expr: &litMatcher{
																												pos:        position{line: 2878, col: 16, offset: 95050},
																												val:        "\t",
																												ignoreCase: false,
																												want:       "\"\\t\"",
																											},
																										},
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2893, col: 8, offset: 95335},
																								alternatives: []interface{}{
																									&notExpr{
																										pos: position{line: 2890, col: 8, offset: 95285},
																										expr: &anyMatcher{
																											line: 2890, col: 9, offset: 95286,
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2886, col: 12, offset: 95178},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2886, col: 19, offset: 95185},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&actionExpr{
																										pos: position{line: 2886, col: 28, offset: 95194},
																										run: (*parser).callonOtherListElement1370,
																										expr: &litMatcher{
																											pos:        position{line: 2886, col: 28, offset: 95194},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 555, col: 26, offset: 17844},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 555, col: 26, offset: 17844},
																								val:        "****",
																								ignoreCase: false,
																								want:       "\"****\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 555, col: 33, offset: 17851},
																								expr: &choiceExpr{
																									pos: position{line: 2878, col: 10, offset: 95044},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2878, col: 10, offset: 95044},
																											val:        " ",
																											ignoreCase: false,
																											want:       "\" \"",
																										},
																										&actionExpr{
																											pos: position{line: 2878, col: 16, offset: 95050},
																											run: (*parser).callonOtherListElement1377,
																											expr: &litMatcher{
																												pos:        position{line: 2878, col: 16, offset: 95050},
																												val:        "\t",
																												ignoreCase: false,
																												want:       "\"\\t\"",
																											},
																										},
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2893, col: 8, offset: 95335},
																								alternatives: []interface{}{
																									&notExpr{
																										pos: position{line: 2890, col: 8, offset: 95285},
																										expr: &anyMatcher{
																											line: 2890, col: 9, offset: 95286,
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2886, col: 12, offset: 95178},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2886, col: 19, offset: 95185},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&actionExpr{
																										pos: position{line: 2886, col: 28, offset: 95194},
																										run: (*parser).callonOtherListElement1384,
																										expr: &litMatcher{
																											pos:        position{line: 2886, col: 28, offset: 95194},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 1317, col: 5, offset: 44164},
															label: "content",
															expr: &actionExpr{
																pos: position{line: 1317, col: 14, offset: 44173},
																run: (*parser).callonOtherListElement1387,
																expr: &oneOrMoreExpr{
																	pos: position{line: 1317, col: 14, offset: 44173},
																	expr: &charClassMatcher{
																		pos:        position{line: 1317, col: 14, offset: 44173},
																		val:        "[^\\r\\n]",
																		chars:      []rune{'\r', '\n'},
																		ignoreCase: false,
																		inverted:   true,
																	},
																},
															},
														},
														&choiceExpr{
															pos: position{line: 2893, col: 8, offset: 95335},
															alternatives: []interface{}{
																&notExpr{
																	pos: position{line: 2890, col: 8, offset: 95285},
																	expr: &anyMatcher{
																		line: 2890, col: 9, offset: 95286,
																	},
																},
																&litMatcher{
																	pos:        position{line: 2886, col: 12, offset: 95178},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2886, col: 19, offset: 95185},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&actionExpr{
																	pos: position{line: 2886, col: 28, offset: 95194},
																	run: (*parser).callonOtherListElement1395,
																	expr: &litMatcher{
																		pos:        position{line: 2886, col: 28, offset: 95194},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListElementContinuation",
			pos:  position{line: 1335, col: 1, offset: 44597},
			expr: &actionExpr{
				pos: position{line: 1336, col: 5, offset: 44629},
				run: (*parser).callonListElementContinuation1,
				expr: &seqExpr{
					pos: position{line: 1336, col: 5, offset: 44629},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1336, col: 5, offset: 44629},
							label: "offset",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1336, col: 12, offset: 44636},
								expr: &seqExpr{
									pos: position{line: 1336, col: 13, offset: 44637},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 1336, col: 13, offset: 44637},
											expr: &choiceExpr{
												pos: position{line: 2878, col: 10, offset: 95044},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2878, col: 10, offset: 95044},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
													&actionExpr{
														pos: position{line: 2878, col: 16, offset: 95050},
														run: (*parser).callonListElementContinuation9,
														expr: &litMatcher{
															pos:        position{line: 2878, col: 16, offset: 95050},
															val:        "\t",
															ignoreCase: false,
															want:       "\"\\t\"",
														},
													},
												},
											},
										},
										&choiceExpr{
											pos: position{line: 2886, col: 12, offset: 95178},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 2886, col: 12, offset: 95178},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
												&litMatcher{
													pos:        position{line: 2886, col: 19, offset: 95185},
													val:        "\r\n",
													ignoreCase: false,
													want:       "\"\\r\\n\"",
												},
												&actionExpr{
													pos: position{line: 2886, col: 28, offset: 95194},
													run: (*parser).callonListElementContinuation14,
													expr: &litMatcher{
														pos:        position{line: 2886, col: 28, offset: 95194},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1343, col: 34, offset: 44869},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1343, col: 38, offset: 44873},
							expr: &choiceExpr{
								pos: position{line: 2878, col: 10, offset: 95044},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 2878, col: 10, offset: 95044},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
									&actionExpr{
										pos: position{line: 2878, col: 16, offset: 95050},
										run: (*parser).callonListElementContinuation20,
										expr: &litMatcher{
											pos:        position{line: 2878, col: 16, offset: 95050},
											val:        "\t",
											ignoreCase: false,
											want:       "\"\\t\"",
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2886, col: 12, offset: 95178},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 2886, col: 12, offset: 95178},
									val:        "\n",
									ignoreCase: false,
									want:       "\"\\n\"",
								},
								&litMatcher{
									pos:        position{line: 2886, col: 19, offset: 95185},
									val:        "\r\n",
									ignoreCase: false,
									want:       "\"\\r\\n\"",
								},
								&actionExpr{
									pos: position{line: 2886, col: 28, offset: 95194},
									run: (*parser).callonListElementContinuation25,
									expr: &litMatcher{
										pos:        position{line: 2886, col: 28, offset: 95194},
										val:        "\r",
										ignoreCase: false,
										want:       "\"\\r\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1338, col: 5, offset: 44693},
							label: "element",
							expr: &zeroOrOneExpr{
								pos: position{line: 1338, col: 13, offset: 44701},
								expr: &ruleRefExpr{
									pos:  position{line: 1338, col: 13, offset: 44701},
									name: "ListElementContinuationElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListElementContinuationElement",
			pos:  position{line: 1345, col: 1, offset: 44889},
			expr: &actionExpr{
				pos: position{line: 1346, col: 5, offset: 44967},
				run: (*parser).callonListElementContinuationElement1,
				expr: &seqExpr{
					pos: position{line: 1346, col: 5, offset: 44967},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1346, col: 5, offset: 44967},
							expr: &notExpr{
								pos: position{line: 2890, col: 8, offset: 95285},
								expr: &anyMatcher{
									line: 2890, col: 9, offset: 95286,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1347, col: 5, offset: 44993},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1347, col: 16, offset: 45004},
								expr: &ruleRefExpr{
									pos:  position{line: 1347, col: 17, offset: 45005},
									name: "BlockAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1348, col: 5, offset: 45027},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1349, col: 9, offset: 45045},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 482, col: 14, offset: 15644},
										run: (*parser).callonListElementContinuationElement11,
										expr: &seqExpr{
											pos: position{line: 482, col: 14, offset: 15644},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 482, col: 14, offset: 15644},
													expr: &notExpr{
														pos: position{line: 2890, col: 8, offset: 95285},
														expr: &anyMatcher{
															line: 2890, col: 9, offset: 95286,
														},
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 482, col: 19, offset: 15649},
													expr: &choiceExpr{
														pos: position{line: 2878, col: 10, offset: 95044},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2878, col: 10, offset: 95044},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2878, col: 16, offset: 95050},
																run: (*parser).callonListElementContinuationElement19,
																expr: &litMatcher{
																	pos:        position{line: 2878, col: 16, offset: 95050},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2893, col: 8, offset: 95335},
													alternatives: []interface{}{
														&notExpr{
															pos: position{line: 2890, col: 8, offset: 95285},
															expr: &anyMatcher{
																line: 2890, col: 9, offset: 95286,
															},
														},
														&litMatcher{
															pos:        position{line: 2886, col: 12, offset: 95178},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2886, col: 19, offset: 95185},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&actionExpr{
															pos: position{line: 2886, col: 28, offset: 95194},
															run: (*parser).callonListElementContinuationElement26,
															expr: &litMatcher{
																pos:        position{line: 2886, col: 28, offset: 95194},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 108, col: 5, offset: 3008},
										run: (*parser).callonListElementContinuationElement28,
										expr: &seqExpr{
											pos: position{line: 108, col: 5, offset: 3008},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 108, col: 5, offset: 3008},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&labeledExpr{
													pos:   position{line: 108, col: 9, offset: 3012},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 118, col: 18, offset: 3399},
														run: (*parser).callonListElementContinuationElement32,
														expr: &seqExpr{
															pos: position{line: 118, col: 18, offset: 3399},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 118, col: 18, offset: 3399},
																	val:        "[_0-9\\pL]",
																	chars:      []rune{'_'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 118, col: 28, offset: 3409},
																	expr: &charClassMatcher{
																		pos:        position{line: 118, col: 29, offset: 3410},
																		val:        "[-0-9\\pL]",
																		chars:      []rune{'-'},
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 108, col: 30, offset: 3033},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&labeledExpr{
													pos:   position{line: 109, col: 5, offset: 3042},
													label: "value",
													expr: &zeroOrOneExpr{
														pos: position{line: 109, col: 11, offset: 3048},
														expr: &actionExpr{
															pos: position{line: 123, col: 5, offset: 3500},
															run: (*parser).callonListElementContinuationElement40,
															expr: &seqExpr{
																pos: position{line: 123, col: 5, offset: 3500},
																exprs: []interface{}{
																	&actionExpr{
																		pos: position{line: 2882, col: 11, offset: 95109},
																		run: (*parser).callonListElementContinuationElement42,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2882, col: 11, offset: 95109},
																			expr: &charClassMatcher{
																				pos:        position{line: 2882, col: 12, offset: 95110},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 123, col: 12, offset: 3507},
																		label: "elements",
																		expr: &zeroOrMoreExpr{
																			pos: position{line: 123, col: 21, offset: 3516},
																			expr: &actionExpr{
																				pos: position{line: 127, col: 37, offset: 3675},
																				run: (*parser).callonListElementContinuationElement47,
																				expr: &seqExpr{
																					pos: position{line: 127, col: 37, offset: 3675},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 127, col: 37, offset: 3675},
																							expr: &choiceExpr{
																								pos: position{line: 2893, col: 8, offset: 95335},
																								alternatives: []interface{}{
																									&notExpr{
																										pos: position{line: 2890, col: 8, offset: 95285},
																										expr: &anyMatcher{
																											line: 2890, col: 9, offset: 95286,
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2886, col: 12, offset: 95178},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2886, col: 19, offset: 95185},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&actionExpr{
																										pos: position{line: 2886, col: 28, offset: 95194},
																										run: (*parser).callonListElementContinuationElement55,
																										expr: &litMatcher{
																											pos:        position{line: 2886, col: 28, offset: 95194},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 128, col: 5, offset: 3685},
																							label: "element",
																							expr: &choiceExpr{
																								pos: position{line: 129, col: 9, offset: 3703},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 129, col: 10, offset: 3704},
																										run: (*parser).callonListElementContinuationElement59,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 129, col: 10, offset: 3704},
																											expr: &charClassMatcher{
																												pos:        position{line: 129, col: 10, offset: 3704},
																												val:        "[^\\r\\n{]",
																												chars:      []rune{'\r', '\n', '{'},
																												ignoreCase: false,
																												inverted:   true,
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 449, col: 5, offset: 14443},
																										run: (*parser).callonListElementContinuationElement62,
																										expr: &seqExpr{
																											pos: position{line: 449, col: 5, offset: 14443},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 449, col: 5, offset: 14443},
																													run: (*parser).callonListElementContinuationElement64,
																												},
																												&labeledExpr{
																													pos:   position{line: 452, col: 5, offset: 14507},
																													label: "element",
																													expr: &choiceExpr{
																														pos: position{line: 452, col: 14, offset: 14516},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 463, col: 25, offset: 14978},
																																run: (*parser).callonListElementContinuationElement67,
																																expr: &seqExpr{
																																	pos: position{line: 463, col: 25, offset: 14978},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 463, col: 25, offset: 14978},
																																			val:        "{counter:",
																																			ignoreCase: false,
																																			want:       "\"{counter:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 463, col: 37, offset: 14990},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 118, col: 18, offset: 3399},
																																				run: (*parser).callonListElementContinuationElement71,
																																				expr: &seqExpr{
																																					pos: position{line: 118, col: 18, offset: 3399},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 118, col: 18, offset: 3399},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 118, col: 28, offset: 3409},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 118, col: 29, offset: 3410},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 463, col: 56, offset: 15009},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 463, col: 62, offset: 15015},
																																				expr: &actionExpr{
																																					pos: position{line: 471, col: 17, offset: 15278},
																																					run: (*parser).callonListElementContinuationElement78,
																																					expr: &seqExpr{
																																						pos: position{line: 471, col: 17, offset: 15278},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 471, col: 17, offset: 15278},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 471, col: 21, offset: 15282},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 471, col: 28, offset: 15289},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 471, col: 28, offset: 15289},
																																											run: (*parser).callonListElementContinuationElement83,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 471, col: 28, offset: 15289},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 473, col: 9, offset: 15343},
																																											run: (*parser).callonListElementContinuationElement85,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 473, col: 9, offset: 15343},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 473, col: 9, offset: 15343},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 463, col: 78, offset: 15031},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 467, col: 25, offset: 15133},
																																run: (*parser).callonListElementContinuationElement89,
																																expr: &seqExpr{
																																	pos: position{line: 467, col: 25, offset: 15133},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 467, col: 25, offset: 15133},
																																			val:        "{counter2:",
																																			ignoreCase: false,
																																			want:       "\"{counter2:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 467, col: 38, offset: 15146},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 118, col: 18, offset: 3399},
																																				run: (*parser).callonListElementContinuationElement93,
																																				expr: &seqExpr{
																																					pos: position{line: 118, col: 18, offset: 3399},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 118, col: 18, offset: 3399},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 118, col: 28, offset: 3409},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 118, col: 29, offset: 3410},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 467, col: 57, offset: 15165},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 467, col: 63, offset: 15171},
																																				expr: &actionExpr{
																																					pos: position{line: 471, col: 17, offset: 15278},
																																					run: (*parser).callonListElementContinuationElement100,
																																					expr: &seqExpr{
																																						pos: position{line: 471, col: 17, offset: 15278},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 471, col: 17, offset: 15278},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 471, col: 21, offset: 15282},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 471, col: 28, offset: 15289},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 471, col: 28, offset: 15289},
																																											run: (*parser).callonListElementContinuationElement105,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 471, col: 28, offset: 15289},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 473, col: 9, offset: 15343},
																																											run: (*parser).callonListElementContinuationElement107,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 473, col: 9, offset: 15343},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 473, col: 9, offset: 15343},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 467, col: 79, offset: 15187},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 456, col: 31, offset: 14633},
																																run: (*parser).callonListElementContinuationElement111,
																																expr: &seqExpr{
																																	pos: position{line: 456, col: 31, offset: 14633},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 456, col: 31, offset: 14633},
																																			val:        "{",
																																			ignoreCase: false,
																																			want:       "\"{\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 456, col: 35, offset: 14637},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 118, col: 18, offset: 3399},
																																				run: (*parser).callonListElementContinuationElement115,
																																				expr: &seqExpr{
																																					pos: position{line: 118, col: 18, offset: 3399},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 118, col: 18, offset: 3399},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 118, col: 28, offset: 3409},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 118, col: 29, offset: 3410},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 456, col: 54, offset: 14656},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 133, col: 12, offset: 3832},
																										run: (*parser).callonListElementContinuationElement121,
																										expr: &litMatcher{
																											pos:        position{line: 133, col: 12, offset: 3832},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2893, col: 8, offset: 95335},
													alternatives: []interface{}{
														&notExpr{
															pos: position{line: 2890, col: 8, offset: 95285},
															expr: &anyMatcher{
																line: 2890, col: 9, offset: 95286,
															},
														},
														&litMatcher{
															pos:        position{line: 2886, col: 12, offset: 95178},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2886, col: 19, offset: 95185},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&actionExpr{
															pos: position{line: 2886, col: 28, offset: 95194},
															run: (*parser).callonListElementContinuationElement128,
															expr: &litMatcher{
																pos:        position{line: 2886, col: 28, offset: 95194},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 140, col: 19, offset: 3987},
										run: (*parser).callonListElementContinuationElement130,
										expr: &seqExpr{
											pos: position{line: 140, col: 19, offset: 3987},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 140, col: 19, offset: 3987},
													val:        ":!",
													ignoreCase: false,
													want:       "\":!\"",
												},
												&labeledExpr{
													pos:   position{line: 140, col: 24, offset: 3992},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 118, col: 18, offset: 3399},
														run: (*parser).callonListElementContinuationElement134,
														expr: &seqExpr{
															pos: position{line: 118, col: 18, offset: 3399},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 118, col: 18, offset: 3399},
																	val:        "[_0-9\\pL]",
																	chars:      []rune{'_'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 118, col: 28, offset: 3409},
																	expr: &charClassMatcher{
																		pos:        position{line: 118, col: 29, offset: 3410},
																		val:        "[-0-9\\pL]",
																		chars:      []rune{'-'},
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 140, col: 45, offset: 4013},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 140, col: 49, offset: 4017},
													expr: &choiceExpr{
														pos: position{line: 2878, col: 10, offset: 95044},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2878, col: 10, offset: 95044},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2878, col: 16, offset: 95050},
																run: (*parser).callonListElementContinuationElement143,
																expr: &litMatcher{
																	pos:        position{line: 2878, col: 16, offset: 95050},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2893, col: 8, offset: 95335},
													alternatives: []interface{}{
														&notExpr{
															pos: position{line: 2890, col: 8, offset: 95285},
															expr: &anyMatcher{
																line: 2890, col: 9, offset: 95286,
															},
														},
														&litMatcher{
															pos:        position{line: 2886, col: 12, offset: 95178},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2886, col: 19, offset: 95185},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&actionExpr{
															pos: position{line: 2886, col: 28, offset: 95194},
															run: (*parser).callonListElementContinuationElement150,
															expr: &litMatcher{
																pos:        position{line: 2886, col: 28, offset: 95194},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 142, col: 5, offset: 4084},
										run: (*parser).callonListElementContinuationElement152,
										expr: &seqExpr{
											pos: position{line: 142, col: 5, offset: 4084},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 142, col: 5, offset: 4084},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&labeledExpr{
													pos:   position{line: 142, col: 9, offset: 4088},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 118, col: 18, offset: 3399},
														run: (*parser).callonListElementContinuationElement156,
														expr: &seqExpr{
															pos: position{line: 118, col: 18, offset: 3399},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 118, col: 18, offset: 3399},
																	val:        "[_0-9\\pL]",
																	chars:      []rune{'_'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 118, col: 28, offset: 3409},
																	expr: &charClassMatcher{
																		pos:        position{line: 118, col: 29, offset: 3410},
																		val:        "[-0-9\\pL]",
																		chars:      []rune{'-'},
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 142, col: 30, offset: 4109},
													val:        "!:",
													ignoreCase: false,
													want:       "\"!:\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 142, col: 35, offset: 4114},
													expr: &choiceExpr{
														pos: position{line: 2878, col: 10, offset: 95044},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2878, col: 10, offset: 95044},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2878, col: 16, offset: 95050},
																run: (*parser).callonListElementContinuationElement165,
																expr: &litMatcher{
																	pos:        position{line: 2878, col: 16, offset: 95050},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2893, col: 8, offset: 95335},
													alternatives: []interface{}{
														&notExpr{
															pos: position{line: 2890, col: 8, offset: 95285},
															expr: &anyMatcher{
																line: 2890, col: 9, offset: 95286,
															},
														},
														&litMatcher{
															pos:        position{line: 2886, col: 12, offset: 95178},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2886, col: 19, offset: 95185},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&actionExpr{
															pos: position{line: 2886, col: 28, offset: 95194},
															run: (*parser).callonListElementContinuationElement172,
															expr: &litMatcher{
																pos:        position{line: 2886, col: 28, offset: 95194},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1352, col: 11, offset: 45121},
										name: "DelimitedBlock",
									},
									&actionExpr{
										pos: position{line: 2755, col: 18, offset: 91083},
										run: (*parser).callonListElementContinuationElement175,
										expr: &seqExpr{
											pos: position{line: 2755, col: 18, offset: 91083},
											exprs: []interface{}{
												&choiceExpr{
													pos: position{line: 2755, col: 19, offset: 91084},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2755, col: 19, offset: 91084},
															val:        "***",
															ignoreCase: false,
															want:       "\"***\"",
														},
														&litMatcher{
															pos:        position{line: 2755, col: 27, offset: 91092},
															val:        "* * *",
															ignoreCase: false,
															want:       "\"* * *\"",
														},
														&litMatcher{
															pos:        position{line: 2755, col: 37, offset: 91102},
															val:        "---",
															ignoreCase: false,
															want:       "\"---\"",
														},
														&litMatcher{
															pos:        position{line: 2755, col: 45, offset: 91110},
															val:        "- - -",
															ignoreCase: false,
															want:       "\"- - -\"",
														},
														&litMatcher{
															pos:        position{line: 2755, col: 55, offset: 91120},
															val:        "___",
															ignoreCase: false,
															want:       "\"___\"",
														},
														&litMatcher{
															pos:        position{line: 2755, col: 63, offset: 91128},
															val:        "_ _ _",
															ignoreCase: false,
															want:       "\"_ _ _\"",
														},
													},
												},
												&notExpr{
													pos: position{line: 2890, col: 8, offset: 95285},
													expr: &anyMatcher{
														line: 2890, col: 9, offset: 95286,
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1354, col: 11, offset: 45207},
										name: "ListElements",
									},
									&ruleRefExpr{
										pos:  position{line: 1355, col: 11, offset: 45230},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1356, col: 11, offset: 45251},
										name: "FileInclusion",
									},
									&actionExpr{
										pos: position{line: 2654, col: 5, offset: 88215},
										run: (*parser).callonListElementContinuationElement189,
										expr: &seqExpr{
											pos: position{line: 2654, col: 5, offset: 88215},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2661, col: 19, offset: 88391},
													val:        "|===",
													ignoreCase: false,
													want:       "\"|===\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 2661, col: 26, offset: 88398},
													expr: &choiceExpr{
														pos: position{line: 2878, col: 10, offset: 95044},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2878, col: 10, offset: 95044},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2878, col: 16, offset: 95050},
																run: (*parser).callonListElementContinuationElement195,
																expr: &litMatcher{
																	pos:        position{line: 2878, col: 16, offset: 95050},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2893, col: 8, offset: 95335},
													alternatives: []interface{}{
														&notExpr{
															pos: position{line: 2890, col: 8, offset: 95285},
															expr: &anyMatcher{
																line: 2890, col: 9, offset: 95286,
															},
														},
														&litMatcher{
															pos:        position{line: 2886, col: 12, offset: 95178},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2886, col: 19, offset: 95185},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&actionExpr{
															pos: position{line: 2886, col: 28, offset: 95194},
															run: (*parser).callonListElementContinuationElement202,
															expr: &litMatcher{
																pos:        position{line: 2886, col: 28, offset: 95194},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2655, col: 5, offset: 88239},
													label: "header",
													expr: &zeroOrOneExpr{
														pos: position{line: 2655, col: 12, offset: 88246},
														expr: &actionExpr{
															pos: position{line: 2669, col: 5, offset: 88558},
															run: (*parser).callonListElementContinuationElement206,
															expr: &seqExpr{
																pos: position{line: 2669, col: 5, offset: 88558},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 2669, col: 5, offset: 88558},
																		label: "cells",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2669, col: 11, offset: 88564},
																			expr: &actionExpr{
																				pos: position{line: 2675, col: 5, offset: 88681},
																				run: (*parser).callonListElementContinuationElement210,
																				expr: &seqExpr{
																					pos: position{line: 2675, col: 5, offset: 88681},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2675, col: 5, offset: 88681},
																							val:        "|",
																							ignoreCase: false,
																							want:       "\"|\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 2675, col: 9, offset: 88685},
																							expr: &choiceExpr{
																								pos: position{line: 2878, col: 10, offset: 95044},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2878, col: 10, offset: 95044},
																										val:        " ",
																										ignoreCase: false,
																										want:       "\" \"",
																									},
																									&actionExpr{
																										pos: position{line: 2878, col: 16, offset: 95050},
																										run: (*parser).callonListElementContinuationElement216,
																										expr: &litMatcher{
																											pos:        position{line: 2878, col: 16, offset: 95050},
																											val:        "\t",
																											ignoreCase: false,
																											want:       "\"\\t\"",
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 2676, col: 5, offset: 88697},
																							label: "content",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 2676, col: 14, offset: 88706},
																								expr: &actionExpr{
																									pos: position{line: 2708, col: 5, offset: 89494},
																									run: (*parser).callonListElementContinuationElement220,
																									expr: &labeledExpr{
																										pos:   position{line: 2708, col: 5, offset: 89494},
																										label: "content",
																										expr: &actionExpr{
																											pos: position{line: 2708, col: 14, offset: 89503},
																											run: (*parser).callonListElementContinuationElement222,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 2708, col: 14, offset: 89503},
																												expr: &charClassMatcher{
																													pos:        position{line: 2708, col: 14, offset: 89503},
																													val:        "[^\\r\\n|]",
																													chars:      []rune{'\r', '\n', '|'},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2893, col: 8, offset: 95335},
																		alternatives: []interface{}{
																			&notExpr{
																				pos: position{line: 2890, col: 8, offset: 95285},
																				expr: &anyMatcher{
																					line: 2890, col: 9, offset: 95286,
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2886, col: 12, offset: 95178},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																			&litMatcher{
																				pos:        position{line: 2886, col: 19, offset: 95185},
																				val:        "\r\n",
																				ignoreCase: false,
																				want:       "\"\\r\\n\"",
																			},
																			&actionExpr{
																				pos: position{line: 2886, col: 28, offset: 95194},
																				run: (*parser).callonListElementContinuationElement230,
																				expr: &litMatcher{
																					pos:        position{line: 2886, col: 28, offset: 95194},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&oneOrMoreExpr{
																		pos: position{line: 2670, col: 5, offset: 88586},
																		expr: &actionExpr{
																			pos: position{line: 482, col: 14, offset: 15644},
																			run: (*parser).callonListElementContinuationElement233,
																			expr: &seqExpr{
																				pos: position{line: 482, col: 14, offset: 15644},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 482, col: 14, offset: 15644},
																						expr: &notExpr{
																							pos: position{line: 2890, col: 8, offset: 95285},
																							expr: &anyMatcher{
																								line: 2890, col: 9, offset: 95286,
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 482, col: 19, offset: 15649},
																						expr: &choiceExpr{
																							pos: position{line: 2878, col: 10, offset: 95044},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2878, col: 10, offset: 95044},
																									val:        " ",
																									ignoreCase: false,
																									want:       "\" \"",
																								},
																								&actionExpr{
																									pos: position{line: 2878, col: 16, offset: 95050},
																									run: (*parser).callonListElementContinuationElement241,
																									expr: &litMatcher{
																										pos:        position{line: 2878, col: 16, offset: 95050},
																										val:        "\t",
																										ignoreCase: false,
																										want:       "\"\\t\"",
																									},
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2893, col: 8, offset: 95335},
																						alternatives: []interface{}{
																							&notExpr{
																								pos: position{line: 2890, col: 8, offset: 95285},
																								expr: &anyMatcher{
																									line: 2890, col: 9, offset: 95286,
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 2886, col: 12, offset: 95178},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2886, col: 19, offset: 95185},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&actionExpr{
																								pos: position{line: 2886, col: 28, offset: 95194},
																								run: (*parser).callonListElementContinuationElement248,
																								expr: &litMatcher{
																									pos:        position{line: 2886, col: 28, offset: 95194},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2656, col: 5, offset: 88265},
													label: "rows",
													expr: &zeroOrMoreExpr{
														pos: position{line: 2656, col: 10, offset: 88270},
														expr: &choiceExpr{
															pos: position{line: 2680, col: 13, offset: 88803},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 2690, col: 5, offset: 89022},
																	run: (*parser).callonListElementContinuationElement253,
																	expr: &seqExpr{
																		pos: position{line: 2690, col: 5, offset: 89022},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 2690, col: 5, offset: 89022},
																				expr: &choiceExpr{
																					pos: position{line: 2665, col: 22, offset: 88471},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 2661, col: 19, offset: 88391},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2661, col: 19, offset: 88391},
																									val:        "|===",
																									ignoreCase: false,
																									want:       "\"|===\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2661, col: 26, offset: 88398},
																									expr: &choiceExpr{
																										pos: position{line: 2878, col: 10, offset: 95044},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2878, col: 10, offset: 95044},
																												val:        " ",
																												ignoreCase: false,
																												want:       "\" \"",
																											},
																											&actionExpr{
																												pos: position{line: 2878, col: 16, offset: 95050},
																												run: (*parser).callonListElementContinuationElement262,
																												expr: &litMatcher{
																													pos:        position{line: 2878, col: 16, offset: 95050},
																													val:        "\t",
																													ignoreCase: false,
																													want:       "\"\\t\"",
																												},
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2893, col: 8, offset: 95335},
																									alternatives: []interface{}{
																										&notExpr{
																											pos: position{line: 2890, col: 8, offset: 95285},
																											expr: &anyMatcher{
																												line: 2890, col: 9, offset: 95286,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 2886, col: 12, offset: 95178},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2886, col: 19, offset: 95185},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&actionExpr{
																											pos: position{line: 2886, col: 28, offset: 95194},
																											run: (*parser).callonListElementContinuationElement269,
																											expr: &litMatcher{
																												pos:        position{line: 2886, col: 28, offset: 95194},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2890, col: 8, offset: 95285},
																							expr: &anyMatcher{
																								line: 2890, col: 9, offset: 95286,
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 2691, col: 5, offset: 89045},
																				label: "cells",
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2691, col: 11, offset: 89051},
																					expr: &actionExpr{
																						pos: position{line: 2691, col: 12, offset: 89052},
																						run: (*parser).callonListElementContinuationElement275,
																						expr: &seqExpr{
																							pos: position{line: 2691, col: 12, offset: 89052},
																							exprs: []interface{}{
																								&labeledExpr{
																									pos:   position{line: 2691, col: 12, offset: 89052},
																									label: "cell",
																									expr: &actionExpr{
																										pos: position{line: 2700, col: 5, offset: 89293},
																										run: (*parser).callonListElementContinuationElement278,
																										expr: &seqExpr{
																											pos: position{line: 2700, col: 5, offset: 89293},
																											exprs: []interface{}{
																												&notExpr{
																													pos: position{line: 2700, col: 5, offset: 89293},
																													expr: &choiceExpr{
																														pos: position{line: 2665, col: 22, offset: 88471},
																														alternatives: []interface{}{
																															&seqExpr{
																																pos: position{line: 2661, col: 19, offset: 88391},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 2661, col: 19, offset: 88391},
																																		val:        "|===",
																																		ignoreCase: false,
																																		want:       "\"|===\"",
																																	},
																																	&zeroOrMoreExpr{
																																		pos: position{line: 2661, col: 26, offset: 88398},
																																		expr: &choiceExpr{
																																			pos: position{line: 2878, col: 10, offset: 95044},
																																			alternatives: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 2878, col: 10, offset: 95044},
																																					val:        " ",
																																					ignoreCase: false,
																																					want:       "\" \"",
																																				},
																																				&actionExpr{
																																					pos: position{line: 2878, col: 16, offset: 95050},
																																					run: (*parser).callonListElementContinuationElement287,
																																					expr: &litMatcher{
																																						pos:        position{line: 2878, col: 16, offset: 95050},
																																						val:        "\t",
																																						ignoreCase: false,
																																						want:       "\"\\t\"",
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&choiceExpr{
																																		pos: position{line: 2893, col: 8, offset: 95335},
																																		alternatives: []interface{}{
																																			&notExpr{
																																				pos: position{line: 2890, col: 8, offset: 95285},
																																				expr: &anyMatcher{
																																					line: 2890, col: 9, offset: 95286,
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 2886, col: 12, offset: 95178},
																																				val:        "\n",
																																				ignoreCase: false,
																																				want:       "\"\\n\"",
																																			},
																																			&litMatcher{
																																				pos:        position{line: 2886, col: 19, offset: 95185},
																																				val:        "\r\n",
																																				ignoreCase: false,
																																				want:       "\"\\r\\n\"",
																																			},
																																			&actionExpr{
																																				pos: position{line: 2886, col: 28, offset: 95194},
																																				run: (*parser).callonListElementContinuationElement294,
																																				expr: &litMatcher{
																																					pos:        position{line: 2886, col: 28, offset: 95194},
																																					val:        "\r",
																																					ignoreCase: false,
																																					want:       "\"\\r\"",
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 2890, col: 8, offset: 95285},
																																expr: &anyMatcher{
																																	line: 2890, col: 9, offset: 95286,
																																},
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2701, col: 5, offset: 89316},
																													expr: &actionExpr{
																														pos: position{line: 482, col: 14, offset: 15644},
																														run: (*parser).callonListElementContinuationElement299,
																														expr: &seqExpr{
																															pos: position{line: 482, col: 14, offset: 15644},
																															exprs: []interface{}{
																																&notExpr{
																																	pos: position{line: 482, col: 14, offset: 15644},
																																	expr: &notExpr{
																																		pos: position{line: 2890, col: 8, offset: 95285},
																																		expr: &anyMatcher{
																																			line: 2890, col: 9, offset: 95286,
																																		},
																																	},
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 482, col: 19, offset: 15649},
																																	expr: &choiceExpr{
																																		pos: position{line: 2878, col: 10, offset: 95044},
																																		alternatives: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2878, col: 10, offset: 95044},
																																				val:        " ",
																																				ignoreCase: false,
																																				want:       "\" \"",
																																			},
																																			&actionExpr{
																																				pos: position{line: 2878, col: 16, offset: 95050},
																																				run: (*parser).callonListElementContinuationElement307,
																																				expr: &litMatcher{
																																					pos:        position{line: 2878, col: 16, offset: 95050},
																																					val:        "\t",
																																					ignoreCase: false,
																																					want:       "\"\\t\"",
																																				},
																																			},
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2893, col: 8, offset: 95335},
																																	alternatives: []interface{}{
																																		&notExpr{
																																			pos: position{line: 2890, col: 8, offset: 95285},
																																			expr: &anyMatcher{
																																				line: 2890, col: 9, offset: 95286,
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2886, col: 12, offset: 95178},
																																			val:        "\n",
																																			ignoreCase: false,
																																			want:       "\"\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2886, col: 19, offset: 95185},
																																			val:        "\r\n",
																																			ignoreCase: false,
																																			want:       "\"\\r\\n\"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 2886, col: 28, offset: 95194},
																																			run: (*parser).callonListElementContinuationElement314,
																																			expr: &litMatcher{
																																				pos:        position{line: 2886, col: 28, offset: 95194},
																																				val:        "\r",
																																				ignoreCase: false,
																																				want:       "\"\\r\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 2702, col: 5, offset: 89331},
																													val:        "|",
																													ignoreCase: false,
																													want:       "\"|\"",
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 2702, col: 9, offset: 89335},
																													expr: &choiceExpr{
																														pos: position{line: 2878, col: 10, offset: 95044},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2878, col: 10, offset: 95044},
																																val:        " ",
																																ignoreCase: false,
																																want:       "\" \"",
																															},
																															&actionExpr{
																																pos: position{line: 2878, col: 16, offset: 95050},
																																run: (*parser).callonListElementContinuationElement320,
																																expr: &litMatcher{
																																	pos:        position{line: 2878, col: 16, offset: 95050},
																																	val:        "\t",
																																	ignoreCase: false,
																																	want:       "\"\\t\"",
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 2702, col: 16, offset: 89342},
																													label: "content",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 2702, col: 25, offset: 89351},
																														expr: &actionExpr{
																															pos: position{line: 2708, col: 5, offset: 89494},
																															run: (*parser).callonListElementContinuationElement324,
																															expr: &labeledExpr{
																																pos:   position{line: 2708, col: 5, offset: 89494},
																																label: "content",
																																expr: &actionExpr{
																																	pos: position{line: 2708, col: 14, offset: 89503},
																																	run: (*parser).callonListElementContinuationElement326,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 2708, col: 14, offset: 89503},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2708, col: 14, offset: 89503},
																																			val:        "[^\\r\\n|]",
																																			chars:      []rune{'\r', '\n', '|'},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2893, col: 8, offset: 95335},
																									alternatives: []interface{}{
																										&notExpr{
																											pos: position{line: 2890, col: 8, offset: 95285},
																											expr: &anyMatcher{
																												line: 2890, col: 9, offset: 95286,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 2886, col: 12, offset: 95178},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2886, col: 19, offset: 95185},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&actionExpr{
																											pos: position{line: 2886, col: 28, offset: 95194},
																											run: (*parser).callonListElementContinuationElement334,
																											expr: &litMatcher{
																												pos:        position{line: 2886, col: 28, offset: 95194},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2694, col: 6, offset: 89114},
																				alternatives: []interface{}{
																					&oneOrMoreExpr{
																						pos: position{line: 2694, col: 6, offset: 89114},
																						expr: &actionExpr{
																							pos: position{line: 482, col: 14, offset: 15644},
																							run: (*parser).callonListElementContinuationElement338,
																							expr: &seqExpr{
																								pos: position{line: 482, col: 14, offset: 15644},
																								exprs: []interface{}{
																									&notExpr{
																										pos: position{line: 482, col: 14, offset: 15644},
																										expr: &notExpr{
																											pos: position{line: 2890, col: 8, offset: 95285},
																											expr: &anyMatcher{
																												line: 2890, col: 9, offset: 95286,
																											},
																										},
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 482, col: 19, offset: 15649},
																										expr: &choiceExpr{
																											pos: position{line: 2878, col: 10, offset: 95044},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2878, col: 10, offset: 95044},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2878, col: 16, offset: 95050},
																													run: (*parser).callonListElementContinuationElement346,
																													expr: &litMatcher{
																														pos:        position{line: 2878, col: 16, offset: 95050},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2893, col: 8, offset: 95335},
																										alternatives: []interface{}{
																											&notExpr{
																												pos: position{line: 2890, col: 8, offset: 95285},
																												expr: &anyMatcher{
																													line: 2890, col: 9, offset: 95286,
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 2886, col: 12, offset: 95178},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2886, col: 19, offset: 95185},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&actionExpr{
																												pos: position{line: 2886, col: 28, offset: 95194},
																												run: (*parser).callonListElementContinuationElement353,
																												expr: &litMatcher{
																													pos:        position{line: 2886, col: 28, offset: 95194},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&andExpr{
																						pos: position{line: 2694, col: 19, offset: 89127},
																						expr: &choiceExpr{
																							pos: position{line: 2665, col: 22, offset: 88471},
																							alternatives: []interface{}{
																								&seqExpr{
																									pos: position{line: 2661, col: 19, offset: 88391},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2661, col: 19, offset: 88391},
																											val:        "|===",
																											ignoreCase: false,
																											want:       "\"|===\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 2661, col: 26, offset: 88398},
																											expr: &choiceExpr{
																												pos: position{line: 2878, col: 10, offset: 95044},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2878, col: 10, offset: 95044},
																														val:        " ",
																														ignoreCase: false,
																														want:       "\" \"",
																													},
																													&actionExpr{
																														pos: position{line: 2878, col: 16, offset: 95050},
																														run: (*parser).callonListElementContinuationElement362,
																														expr: &litMatcher{
																															pos:        position{line: 2878, col: 16, offset: 95050},
																															val:        "\t",
																															ignoreCase: false,
																															want:       "\"\\t\"",
																														},
																													},
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2893, col: 8, offset: 95335},
																											alternatives: []interface{}{
																												&notExpr{
																													pos: position{line: 2890, col: 8, offset: 95285},
																													expr: &anyMatcher{
																														line: 2890, col: 9, offset: 95286,
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 2886, col: 12, offset: 95178},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2886, col: 19, offset: 95185},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&actionExpr{
																													pos: position{line: 2886, col: 28, offset: 95194},
																													run: (*parser).callonListElementContinuationElement369,
																													expr: &litMatcher{
																														pos:        position{line: 2886, col: 28, offset: 95194},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2890, col: 8, offset: 95285},
																									expr: &anyMatcher{
																										line: 2890, col: 9, offset: 95286,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2683, col: 5, offset: 88870},
																	run: (*parser).callonListElementContinuationElement373,
																	expr: &seqExpr{
																		pos: position{line: 2683, col: 5, offset: 88870},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 2683, col: 5, offset: 88870},
																				expr: &choiceExpr{
																					pos: position{line: 2665, col: 22, offset: 88471},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 2661, col: 19, offset: 88391},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2661, col: 19, offset: 88391},
																									val:        "|===",
																									ignoreCase: false,
																									want:       "\"|===\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2661, col: 26, offset: 88398},
																									expr: &choiceExpr{
																										pos: position{line: 2878, col: 10, offset: 95044},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2878, col: 10, offset: 95044},
																												val:        " ",
																												ignoreCase: false,
																												want:       "\" \"",
																											},
																											&actionExpr{
																												pos: position{line: 2878, col: 16, offset: 95050},
																												run: (*parser).callonListElementContinuationElement382,
																												expr: &litMatcher{
																													pos:        position{line: 2878, col: 16, offset: 95050},
																													val:        "\t",
																													ignoreCase: false,
																													want:       "\"\\t\"",
																												},
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2893, col: 8, offset: 95335},
																									alternatives: []interface{}{
																										&notExpr{
																											pos: position{line: 2890, col: 8, offset: 95285},
																											expr: &anyMatcher{
																												line: 2890, col: 9, offset: 95286,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 2886, col: 12, offset: 95178},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2886, col: 19, offset: 95185},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&actionExpr{
																											pos: position{line: 2886, col: 28, offset: 95194},
																											run: (*parser).callonListElementContinuationElement389,
																											expr: &litMatcher{
																												pos:        position{line: 2886, col: 28, offset: 95194},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2890, col: 8, offset: 95285},
																							expr: &anyMatcher{
																								line: 2890, col: 9, offset: 95286,
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 2684, col: 5, offset: 88893},
																				label: "cells",
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2684, col: 11, offset: 88899},
																					expr: &actionExpr{
																						pos: position{line: 2700, col: 5, offset: 89293},
																						run: (*parser).callonListElementContinuationElement395,
																						expr: &seqExpr{
																							pos: position{line: 2700, col: 5, offset: 89293},
																							exprs: []interface{}{
																								&notExpr{
																									pos: position{line: 2700, col: 5, offset: 89293},
																									expr: &choiceExpr{
																										pos: position{line: 2665, col: 22, offset: 88471},
																										alternatives: []interface{}{
																											&seqExpr{
																												pos: position{line: 2661, col: 19, offset: 88391},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2661, col: 19, offset: 88391},
																														val:        "|===",
																														ignoreCase: false,
																														want:       "\"|===\"",
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 2661, col: 26, offset: 88398},
																														expr: &choiceExpr{
																															pos: position{line: 2878, col: 10, offset: 95044},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 2878, col: 10, offset: 95044},
																																	val:        " ",
																																	ignoreCase: false,
																																	want:       "\" \"",
																																},
																																&actionExpr{
																																	pos: position{line: 2878, col: 16, offset: 95050},
																																	run: (*parser).callonListElementContinuationElement404,
																																	expr: &litMatcher{
																																		pos:        position{line: 2878, col: 16, offset: 95050},
																																		val:        "\t",
																																		ignoreCase: false,
																																		want:       "\"\\t\"",
																																	},
																																},
																															},
																														},
																													},
																													&choiceExpr{
																														pos: position{line: 2893, col: 8, offset: 95335},
																														alternatives: []interface{}{
																															&notExpr{
																																pos: position{line: 2890, col: 8, offset: 95285},
																																expr: &anyMatcher{
																																	line: 2890, col: 9, offset: 95286,
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 2886, col: 12, offset: 95178},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2886, col: 19, offset: 95185},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&actionExpr{
																																pos: position{line: 2886, col: 28, offset: 95194},
																																run: (*parser).callonListElementContinuationElement411,
																																expr: &litMatcher{
																																	pos:        position{line: 2886, col: 28, offset: 95194},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 2890, col: 8, offset: 95285},
																												expr: &anyMatcher{
																													line: 2890, col: 9, offset: 95286,
																												},
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2701, col: 5, offset: 89316},
																									expr: &actionExpr{
																										pos: position{line: 482, col: 14, offset: 15644},
																										run: (*parser).callonListElementContinuationElement416,
																										expr: &seqExpr{
																											pos: position{line: 482, col: 14, offset: 15644},
																											exprs: []interface{}{
																												&notExpr{
																													pos: position{line: 482, col: 14, offset: 15644},
																													expr: &notExpr{
																														pos: position{line: 2890, col: 8, offset: 95285},
																														expr: &anyMatcher{
																															line: 2890, col: 9, offset: 95286,
																														},
																													},
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 482, col: 19, offset: 15649},
																													expr: &choiceExpr{
																														pos: position{line: 2878, col: 10, offset: 95044},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2878, col: 10, offset: 95044},
																																val:        " ",
																																ignoreCase: false,
																																want:       "\" \"",
																															},
																															&actionExpr{
																																pos: position{line: 2878, col: 16, offset: 95050},
																																run: (*parser).callonListElementContinuationElement424,
																																expr: &litMatcher{
																																	pos:        position{line: 2878, col: 16, offset: 95050},
																																	val:        "\t",
																																	ignoreCase: false,
																																	want:       "\"\\t\"",
																																},
																															},
																														},
																													},
																												},
																												&choiceExpr{
																													pos: position{line: 2893, col: 8, offset: 95335},
																													alternatives: []interface{}{
																														&notExpr{
																															pos: position{line: 2890, col: 8, offset: 95285},
																															expr: &anyMatcher{
																																line: 2890, col: 9, offset: 95286,
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 2886, col: 12, offset: 95178},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 2886, col: 19, offset: 95185},
																															val:        "\r\n",
																															ignoreCase: false,
																															want:       "\"\\r\\n\"",
																														},
																														&actionExpr{
																															pos: position{line: 2886, col: 28, offset: 95194},
																															run: (*parser).callonListElementContinuationElement431,
																															expr: &litMatcher{
																																pos:        position{line: 2886, col: 28, offset: 95194},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2702, col: 5, offset: 89331},
																									val:        "|",
																									ignoreCase: false,
																									want:       "\"|\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2702, col: 9, offset: 89335},
																									expr: &choiceExpr{
																										pos: position{line: 2878, col: 10, offset: 95044},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2878, col: 10, offset: 95044},
																												val:        " ",
																												ignoreCase: false,
																												want:       "\" \"",
																											},
																											&actionExpr{
																												pos: position{line: 2878, col: 16, offset: 95050},
																												run: (*parser).callonListElementContinuationElement437,
																												expr: &litMatcher{
																													pos:        position{line: 2878, col: 16, offset: 95050},
																													val:        "\t",
																													ignoreCase: false,
																													want:       "\"\\t\"",
																												},
																											},
																										},
																									},
																								},
																								&labeledExpr{
																									pos:   position{line: 2702, col: 16, offset: 89342},
																									label: "content",
																									expr: &zeroOrOneExpr{
																										pos: position{line: 2702, col: 25, offset: 89351},
																										expr: &actionExpr{
																											pos: position{line: 2708, col: 5, offset: 89494},
																											run: (*parser).callonListElementContinuationElement441,
																											expr: &labeledExpr{
																												pos:   position{line: 2708, col: 5, offset: 89494},
																												label: "content",
																												expr: &actionExpr{
																													pos: position{line: 2708, col: 14, offset: 89503},
																													run: (*parser).callonListElementContinuationElement443,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 2708, col: 14, offset: 89503},
																														expr: &charClassMatcher{
																															pos:        position{line: 2708, col: 14, offset: 89503},
																															val:        "[^\\r\\n|]",
																															chars:      []rune{'\r', '\n', '|'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2893, col: 8, offset: 95335},
																				alternatives: []interface{}{
																					&notExpr{
																						pos: position{line: 2890, col: 8, offset: 95285},
																						expr: &anyMatcher{
																							line: 2890, col: 9, offset: 95286,
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 2886, col: 12, offset: 95178},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2886, col: 19, offset: 95185},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&actionExpr{
																						pos: position{line: 2886, col: 28, offset: 95194},
																						run: (*parser).callonListElementContinuationElement451,
																						expr: &litMatcher{
																							pos:        position{line: 2886, col: 28, offset: 95194},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2685, col: 5, offset: 88920},
																				expr: &actionExpr{
																					pos: position{line: 482, col: 14, offset: 15644},
																					run: (*parser).callonListElementContinuationElement454,
																					expr: &seqExpr{
																						pos: position{line: 482, col: 14, offset: 15644},
																						exprs: []interface{}{
																							&notExpr{
																								pos: position{line: 482, col: 14, offset: 15644},
																								expr: &notExpr{
																									pos: position{line: 2890, col: 8, offset: 95285},
																									expr: &anyMatcher{
																										line: 2890, col: 9, offset: 95286,
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 482, col: 19, offset: 15649},
																								expr: &choiceExpr{
																									pos: position{line: 2878, col: 10, offset: 95044},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2878, col: 10, offset: 95044},
																											val:        " ",
																											ignoreCase: false,
																											want:       "\" \"",
																										},
																										&actionExpr{
																											pos: position{line: 2878, col: 16, offset: 95050},
																											run: (*parser).callonListElementContinuationElement462,
																											expr: &litMatcher{
																												pos:        position{line: 2878, col: 16, offset: 95050},
																												val:        "\t",
																												ignoreCase: false,
																												want:       "\"\\t\"",
																											},
																										},
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2893, col: 8, offset: 95335},
																								alternatives: []interface{}{
																									&notExpr{
																										pos: position{line: 2890, col: 8, offset: 95285},
																										expr: &anyMatcher{
																											line: 2890, col: 9, offset: 95286,
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2886, col: 12, offset: 95178},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2886, col: 19, offset: 95185},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&actionExpr{
																										pos: position{line: 2886, col: 28, offset: 95194},
																										run: (*parser).callonListElementContinuationElement469,
																										expr: &litMatcher{
																											pos:        position{line: 2886, col: 28, offset: 95194},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2665, col: 22, offset: 88471},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 2661, col: 19, offset: 88391},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2661, col: 19, offset: 88391},
																	val:        "|===",
																	ignoreCase: false,
																	want:       "\"|===\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 2661, col: 26, offset: 88398},
																	expr: &choiceExpr{
																		pos: position{line: 2878, col: 10, offset: 95044},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2878, col: 10, offset: 95044},
																				val:        " ",
																				ignoreCase: false,
																				want:       "\" \"",
																			},
																			&actionExpr{
																				pos: position{line: 2878, col: 16, offset: 95050},
																				run: (*parser).callonListElementContinuationElement477,
																				expr: &litMatcher{
																					pos:        position{line: 2878, col: 16, offset: 95050},
																					val:        "\t",
																					ignoreCase: false,
																					want:       "\"\\t\"",
																				},
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2893, col: 8, offset: 95335},
																	alternatives: []interface{}{
																		&notExpr{
																			pos: position{line: 2890, col: 8, offset: 95285},
																			expr: &anyMatcher{
																				line: 2890, col: 9, offset: 95286,
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2886, col: 12, offset: 95178},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2886, col: 19, offset: 95185},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&actionExpr{
																			pos: position{line: 2886, col: 28, offset: 95194},
																			run: (*parser).callonListElementContinuationElement484,
																			expr: &litMatcher{
																				pos:        position{line: 2886, col: 28, offset: 95194},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2890, col: 8, offset: 95285},
															expr: &anyMatcher{
																line: 2890, col: 9, offset: 95286,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2604, col: 22, offset: 86659},
										run: (*parser).callonListElementContinuationElement488,
										expr: &seqExpr{
											pos: position{line: 2604, col: 22, offset: 86659},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2609, col: 31, offset: 86880},
													val:        "//",
													ignoreCase: false,
													want:       "\"//\"",
												},
												&notExpr{
													pos: position{line: 2609, col: 36, offset: 86885},
													expr: &litMatcher{
														pos:        position{line: 2609, col: 37, offset: 86886},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 2604, col: 49, offset: 86686},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 2611, col: 29, offset: 86921},
														run: (*parser).callonListElementContinuationElement494,
														expr: &zeroOrMoreExpr{
															pos: position{line: 2611, col: 29, offset: 86921},
															expr: &charClassMatcher{
																pos:        position{line: 2611, col: 29, offset: 86921},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2893, col: 8, offset: 95335},
													alternatives: []interface{}{
														&notExpr{
															pos: position{line: 2890, col: 8, offset: 95285},
															expr: &anyMatcher{
																line: 2890, col: 9, offset: 95286,
															},
														},
														&litMatcher{
															pos:        position{line: 2886, col: 12, offset: 95178},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2886, col: 19, offset: 95185},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&actionExpr{
															pos: position{line: 2886, col: 28, offset: 95194},
															run: (*parser).callonListElementContinuationElement502,
															expr: &litMatcher{
																pos:        position{line: 2886, col: 28, offset: 95194},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1593, col: 5, offset: 52905},
										run: (*parser).callonListElementContinuationElement504,
										expr: &seqExpr{
											pos: position{line: 1593, col: 5, offset: 52905},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1593, col: 5, offset: 52905},
													label: "kind",
													expr: &choiceExpr{
														pos: position{line: 92, col: 19, offset: 2545},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 92, col: 19, offset: 2545},
																run: (*parser).callonListElementContinuationElement508,
																expr: &litMatcher{
																	pos:        position{line: 92, col: 19, offset: 2545},
																	val:        "TIP",
																	ignoreCase: false,
																	want:       "\"TIP\"",
																},
															},
															&actionExpr{
																pos: position{line: 94, col: 5, offset: 2583},
																run: (*parser).callonListElementContinuationElement510,
																expr: &litMatcher{
																	pos:        position{line: 94, col: 5, offset: 2583},
																	val:        "NOTE",
																	ignoreCase: false,
																	want:       "\"NOTE\"",
																},
															},
															&actionExpr{
																pos: position{line: 96, col: 5, offset: 2623},
																run: (*parser).callonListElementContinuationElement512,
																expr: &litMatcher{
																	pos:        position{line: 96, col: 5, offset: 2623},
																	val:        "IMPORTANT",
																	ignoreCase: false,
																	want:       "\"IMPORTANT\"",
																},
															},
															&actionExpr{
																pos: position{line: 98, col: 5, offset: 2673},
																run: (*parser).callonListElementContinuationElement514,
																expr: &litMatcher{
																	pos:        position{line: 98, col: 5, offset: 2673},
																	val:        "WARNING",
																	ignoreCase: false,
																	want:       "\"WARNING\"",
																},
															},
															&actionExpr{
																pos: position{line: 100, col: 5, offset: 2719},
																run: (*parser).callonListElementContinuationElement516,
																expr: &litMatcher{
																	pos:        position{line: 100, col: 5, offset: 2719},
																	val:        "CAUTION",
																	ignoreCase: false,
																	want:       "\"CAUTION\"",
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1593, col: 27, offset: 52927},
													val:        ": ",
													ignoreCase: false,
													want:       "\": \"",
												},
												&labeledExpr{
													pos:   position{line: 1594, col: 5, offset: 52937},
													label: "firstLine",
													expr: &actionExpr{
														pos: position{line: 1605, col: 5, offset: 53281},
														run: (*parser).callonListElementContinuationElement520,
														expr: &seqExpr{
															pos: position{line: 1605, col: 5, offset: 53281},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1605, col: 5, offset: 53281},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 1605, col: 14, offset: 53290},
																		run: (*parser).callonListElementContinuationElement523,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1605, col: 14, offset: 53290},
																			expr: &charClassMatcher{
																				pos:        position{line: 1605, col: 14, offset: 53290},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&andCodeExpr{
																	pos: position{line: 1608, col: 5, offset: 53347},
																	run: (*parser).callonListElementContinuationElement526,
																},
																&choiceExpr{
																	pos: position{line: 2893, col: 8, offset: 95335},
																	alternatives: []interface{}{
																		&notExpr{
																			pos: position{line: 2890, col: 8, offset: 95285},
																			expr: &anyMatcher{
																				line: 2890, col: 9, offset: 95286,
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2886, col: 12, offset: 95178},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2886, col: 19, offset: 95185},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&actionExpr{
																			pos: position{line: 2886, col: 28, offset: 95194},
																			run: (*parser).callonListElementContinuationElement532,
																			expr: &litMatcher{
																				pos:        position{line: 2886, col: 28, offset: 95194},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1595, col: 5, offset: 52971},
													label: "otherLines",
													expr: &zeroOrMoreExpr{
														pos: position{line: 1595, col: 16, offset: 52982},
														expr: &actionExpr{
															pos: position{line: 1596, col: 9, offset: 52992},
															run: (*parser).callonListElementContinuationElement536,
															expr: &seqExpr{
																pos: position{line: 1596, col: 9, offset: 52992},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1596, col: 9, offset: 52992},
																		expr: &seqExpr{
																			pos: position{line: 1343, col: 34, offset: 44869},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 1343, col: 34, offset: 44869},
																					val:        "+",
																					ignoreCase: false,
																					want:       "\"+\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 1343, col: 38, offset: 44873},
																					expr: &choiceExpr{
																						pos: position{line: 2878, col: 10, offset: 95044},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2878, col: 10, offset: 95044},
																								val:        " ",
																								ignoreCase: false,
																								want:       "\" \"",
																							},
																							&actionExpr{
																								pos: position{line: 2878, col: 16, offset: 95050},
																								run: (*parser).callonListElementContinuationElement544,
																								expr: &litMatcher{
																									pos:        position{line: 2878, col: 16, offset: 95050},
																									val:        "\t",
																									ignoreCase: false,
																									want:       "\"\\t\"",
																								},
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2886, col: 12, offset: 95178},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2886, col: 12, offset: 95178},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2886, col: 19, offset: 95185},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&actionExpr{
																							pos: position{line: 2886, col: 28, offset: 95194},
																							run: (*parser).callonListElementContinuationElement549,
																							expr: &litMatcher{
																								pos:        position{line: 2886, col: 28, offset: 95194},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1597, col: 9, offset: 53031},
																		label: "line",
																		expr: &choiceExpr{
																			pos: position{line: 1597, col: 15, offset: 53037},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2604, col: 22, offset: 86659},
																					run: (*parser).callonListElementContinuationElement553,
																					expr: &seqExpr{
																						pos: position{line: 2604, col: 22, offset: 86659},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2609, col: 31, offset: 86880},
																								val:        "//",
																								ignoreCase: false,
																								want:       "\"//\"",
																							},
																							&notExpr{
																								pos: position{line: 2609, col: 36, offset: 86885},
																								expr: &litMatcher{
																									pos:        position{line: 2609, col: 37, offset: 86886},
																									val:        "//",
																									ignoreCase: false,
																									want:       "\"//\"",
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 2604, col: 49, offset: 86686},
																								label: "content",
																								expr: &actionExpr{
																									pos: position{line: 2611, col: 29, offset: 86921},
																									run: (*parser).callonListElementContinuationElement559,
																									expr: &zeroOrMoreExpr{
																										pos: position{line: 2611, col: 29, offset: 86921},
																										expr: &charClassMatcher{
																											pos:        position{line: 2611, col: 29, offset: 86921},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2893, col: 8, offset: 95335},
																								alternatives: []interface{}{
																									&notExpr{
																										pos: position{line: 2890, col: 8, offset: 95285},
																										expr: &anyMatcher{
																											line: 2890, col: 9, offset: 95286,
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2886, col: 12, offset: 95178},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2886, col: 19, offset: 95185},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&actionExpr{
																										pos: position{line: 2886, col: 28, offset: 95194},
																										run: (*parser).callonListElementContinuationElement567,
																										expr: &litMatcher{
																											pos:        position{line: 2886, col: 28, offset: 95194},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1605, col: 5, offset: 53281},
																					run: (*parser).callonListElementContinuationElement569,
																					expr: &seqExpr{
																						pos: position{line: 1605, col: 5, offset: 53281},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 1605, col: 5, offset: 53281},
																								label: "content",
																								expr: &actionExpr{
																									pos: position{line: 1605, col: 14, offset: 53290},
																									run: (*parser).callonListElementContinuationElement572,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1605, col: 14, offset: 53290},
																										expr: &charClassMatcher{
																											pos:        position{line: 1605, col: 14, offset: 53290},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&andCodeExpr{
																								pos: position{line: 1608, col: 5, offset: 53347},
																								run: (*parser).callonListElementContinuationElement575,
																							},
																							&choiceExpr{
																								pos: position{line: 2893, col: 8, offset: 95335},
																								alternatives: []interface{}{
																									&notExpr{
																										pos: position{line: 2890, col: 8, offset: 95285},
																										expr: &anyMatcher{
																											line: 2890, col: 9, offset: 95286,
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2886, col: 12, offset: 95178},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2886, col: 19, offset: 95185},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&actionExpr{
																										pos: position{line: 2886, col: 28, offset: 95194},
																										run: (*parser).callonListElementContinuationElement581,
																										expr: &litMatcher{
																											pos:        position{line: 2886, col: 28, offset: 95194},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1616, col: 5, offset: 53511},
										run: (*parser).callonListElementContinuationElement583,
										expr: &seqExpr{
											pos: position{line: 1616, col: 5, offset: 53511},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1616, col: 5, offset: 53511},
													label: "firstLine",
													expr: &actionExpr{
														pos: position{line: 1623, col: 5, offset: 53796},
														run: (*parser).callonListElementContinuationElement586,
														expr: &seqExpr{
															pos: position{line: 1623, col: 5, offset: 53796},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1623, col: 5, offset: 53796},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 1623, col: 14, offset: 53805},
																		run: (*parser).callonListElementContinuationElement589,
																		expr: &seqExpr{
																			pos: position{line: 1623, col: 14, offset: 53805},
																			exprs: []interface{}{
																				&actionExpr{
																					pos: position{line: 2882, col: 11, offset: 95109},
																					run: (*parser).callonListElementContinuationElement591,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2882, col: 11, offset: 95109},
																						expr: &charClassMatcher{
																							pos:        position{line: 2882, col: 12, offset: 95110},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&oneOrMoreExpr{
																					pos: position{line: 1623, col: 21, offset: 53812},
																					expr: &charClassMatcher{
																						pos:        position{line: 1623, col: 21, offset: 53812},
																						val:        "[^\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																	},
																},
																&andCodeExpr{
																	pos: position{line: 1626, col: 5, offset: 53869},
																	run: (*parser).callonListElementContinuationElement596,
																},
																&choiceExpr{
																	pos: position{line: 2893, col: 8, offset: 95335},
																	alternatives: []interface{}{
																		&notExpr{
																			pos: position{line: 2890, col: 8, offset: 95285},
																			expr: &anyMatcher{
																				line: 2890, col: 9, offset: 95286,
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2886, col: 12, offset: 95178},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2886, col: 19, offset: 95185},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&actionExpr{
																			pos: position{line: 2886, col: 28, offset: 95194},
																			run: (*parser).callonListElementContinuationElement602,
																			expr: &litMatcher{
																				pos:        position{line: 2886, col: 28, offset: 95194},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1617, col: 5, offset: 53552},
													label: "otherLines",
													expr: &zeroOrMoreExpr{
														pos: position{line: 1617, col: 16, offset: 53563},
														expr: &choiceExpr{
															pos: position{line: 1617, col: 17, offset: 53564},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 2604, col: 22, offset: 86659},
																	run: (*parser).callonListElementContinuationElement607,
																	expr: &seqExpr{
																		pos: position{line: 2604, col: 22, offset: 86659},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2609, col: 31, offset: 86880},
																				val:        "//",
																				ignoreCase: false,
																				want:       "\"//\"",
																			},
																			&notExpr{
																				pos: position{line: 2609, col: 36, offset: 86885},
																				expr: &litMatcher{
																					pos:        position{line: 2609, col: 37, offset: 86886},
																					val:        "//",
																					ignoreCase: false,
																					want:       "\"//\"",
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 2604, col: 49, offset: 86686},
																				label: "content",
																				expr: &actionExpr{
																					pos: position{line: 2611, col: 29, offset: 86921},
																					run: (*parser).callonListElementContinuationElement613,
																					expr: &zeroOrMoreExpr{
																						pos: position{line: 2611, col: 29, offset: 86921},
																						expr: &charClassMatcher{
																							pos:        position{line: 2611, col: 29, offset: 86921},
																							val:        "[^\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2893, col: 8, offset: 95335},
																				alternatives: []interface{}{
																					&notExpr{
																						pos: position{line: 2890, col: 8, offset: 95285},
																						expr: &anyMatcher{
																							line: 2890, col: 9, offset: 95286,
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 2886, col: 12, offset: 95178},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2886, col: 19, offset: 95185},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&actionExpr{
																						pos: position{line: 2886, col: 28, offset: 95194},
																						run: (*parser).callonListElementContinuationElement621,
																						expr: &litMatcher{
																							pos:        position{line: 2886, col: 28, offset: 95194},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 1605, col: 5, offset: 53281},
																	run: (*parser).callonListElementContinuationElement623,
																	expr: &seqExpr{
																		pos: position{line: 1605, col: 5, offset: 53281},
																		exprs: []interface{}{
																			&labeledExpr{
																				pos:   position{line: 1605, col: 5, offset: 53281},
																				label: "content",
																				expr: &actionExpr{
																					pos: position{line: 1605, col: 14, offset: 53290},
																					run: (*parser).callonListElementContinuationElement626,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 1605, col: 14, offset: 53290},
																						expr: &charClassMatcher{
																							pos:        position{line: 1605, col: 14, offset: 53290},
																							val:        "[^\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																			},
																			&andCodeExpr{
																				pos: position{line: 1608, col: 5, offset: 53347},
																				run: (*parser).callonListElementContinuationElement629,
																			},
																			&choiceExpr{
																				pos: position{line: 2893, col: 8, offset: 95335},
																				alternatives: []interface{}{
																					&notExpr{
																						pos: position{line: 2890, col: 8, offset: 95285},
																						expr: &anyMatcher{
																							line: 2890, col: 9, offset: 95286,
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 2886, col: 12, offset: 95178},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2886, col: 19, offset: 95185},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&actionExpr{
																						pos: position{line: 2886, col: 28, offset: 95194},
																						run: (*parser).callonListElementContinuationElement635,
																						expr: &litMatcher{
																							pos:        position{line: 2886, col: 28, offset: 95194},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1374, col: 5, offset: 45885},
										run: (*parser).callonListElementContinuationElement637,
										expr: &seqExpr{
											pos: position{line: 1374, col: 5, offset: 45885},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1374, col: 5, offset: 45885},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 1374, col: 14, offset: 45894},
														run: (*parser).callonListElementContinuationElement640,
														expr: &oneOrMoreExpr{
															pos: position{line: 1374, col: 14, offset: 45894},
															expr: &charClassMatcher{
																pos:        position{line: 1374, col: 14, offset: 45894},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2893, col: 8, offset: 95335},
													alternatives: []interface{}{
														&notExpr{
															pos: position{line: 2890, col: 8, offset: 95285},
															expr: &anyMatcher{
																line: 2890, col: 9, offset: 95286,
															},
														},
														&litMatcher{
															pos:        position{line: 2886, col: 12, offset: 95178},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2886, col: 19, offset: 95185},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&actionExpr{
															pos: position{line: 2886, col: 28, offset: 95194},
															run: (*parser).callonListElementContinuationElement648,
															expr: &litMatcher{
																pos:        position{line: 2886, col: 28, offset: 95194},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1548, col: 1, offset: 51488},
			expr: &actionExpr{
				pos: position{line: 1550, col: 5, offset: 51566},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1550, col: 5, offset: 51566},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1550, col: 5, offset: 51566},
							run: (*parser).callonCallout3,
						},
						&litMatcher{
							pos:        position{line: 1553, col: 5, offset: 51628},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1553, col: 9, offset: 51632},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1553, col: 14, offset: 51637},
								run: (*parser).callonCallout6,
								expr: &oneOrMoreExpr{
									pos: position{line: 1553, col: 14, offset: 51637},
									expr: &charClassMatcher{
										pos:        position{line: 1553, col: 14, offset: 51637},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1553, col: 62, offset: 51685},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1553, col: 66, offset: 51689},
							expr: &choiceExpr{
								pos: position{line: 2878, col: 10, offset: 95044},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 2878, col: 10, offset: 95044},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
									&actionExpr{
										pos: position{line: 2878, col: 16, offset: 95050},
										run: (*parser).callonCallout13,
										expr: &litMatcher{
											pos:        position{line: 2878, col: 16, offset: 95050},
											val:        "\t",
											ignoreCase: false,
											want:       "\"\\t\"",
										},
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 1553, col: 73, offset: 51696},
							expr: &choiceExpr{
								pos: position{line: 1553, col: 75, offset: 51698},
								alternatives: []interface{}{
									&notExpr{
										pos: position{line: 2890, col: 8, offset: 95285},
										expr: &anyMatcher{
											line: 2890, col: 9, offset: 95286,
										},
									},
									&litMatcher{
										pos:        position{line: 2886, col: 12, offset: 95178},
										val:        "\n",
										ignoreCase: false,
										want:       "\"\\n\"",
									},
									&litMatcher{
										pos:        position{line: 2886, col: 19, offset: 95185},
										val:        "\r\n",
										ignoreCase: false,
										want:       "\"\\r\\n\"",
									},
									&actionExpr{
										pos: position{line: 2886, col: 28, offset: 95194},
										run: (*parser).callonCallout21,
										expr: &litMatcher{
											pos:        position{line: 2886, col: 28, offset: 95194},
											val:        "\r",
											ignoreCase: false,
											want:       "\"\\r\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1553, col: 81, offset: 51704},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 1636, col: 1, offset: 54331},
			expr: &choiceExpr{
				pos: position{line: 1637, col: 5, offset: 54350},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1638, col: 9, offset: 54360},
						run: (*parser).callonQuotedText2,
						expr: &seqExpr{
							pos: position{line: 1638, col: 9, offset: 54360},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1638, col: 9, offset: 54360},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1638, col: 20, offset: 54371},
										expr: &ruleRefExpr{
											pos:  position{line: 1638, col: 21, offset: 54372},
											name: "LongHandAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1639, col: 9, offset: 54498},
									label: "text",
									expr: &choiceExpr{
										pos: position{line: 1639, col: 15, offset: 54504},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1639, col: 15, offset: 54504},
												name: "UnconstrainedQuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 1639, col: 41, offset: 54530},
												name: "ConstrainedQuotedText",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1643, col: 7, offset: 54649},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 1649, col: 1, offset: 54840},
			expr: &choiceExpr{
				pos: position{line: 1650, col: 5, offset: 54870},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1650, col: 5, offset: 54870},
						name: "SingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1651, col: 7, offset: 54897},
						name: "SingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1652, col: 7, offset: 54925},
						name: "SingleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1653, col: 7, offset: 54953},
						name: "SingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1654, col: 7, offset: 54985},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1655, col: 7, offset: 55006},
						name: "SuperscriptText",
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 1657, col: 1, offset: 55024},
			expr: &choiceExpr{
				pos: position{line: 1658, col: 5, offset: 55056},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1658, col: 5, offset: 55056},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1659, col: 7, offset: 55082},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1660, col: 7, offset: 55110},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1661, col: 7, offset: 55138},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 1663, col: 1, offset: 55164},
			expr: &actionExpr{
				pos: position{line: 1664, col: 5, offset: 55245},
				run: (*parser).callonEscapedQuotedText1,
				expr: &seqExpr{
					pos: position{line: 1664, col: 5, offset: 55245},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1664, col: 5, offset: 55245},
							expr: &litMatcher{
								pos:        position{line: 1664, col: 7, offset: 55247},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1665, col: 5, offset: 55256},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1666, col: 9, offset: 55274},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1666, col: 9, offset: 55274},
										name: "EscapedBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1667, col: 11, offset: 55301},
										name: "EscapedItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1668, col: 11, offset: 55329},
										name: "EscapedMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1669, col: 11, offset: 55357},
										name: "EscapedMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1670, col: 11, offset: 55389},
										name: "EscapedSubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1671, col: 11, offset: 55421},
										name: "EscapedSuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 1691, col: 1, offset: 55948},
			expr: &choiceExpr{
				pos: position{line: 1691, col: 13, offset: 55960},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1691, col: 13, offset: 55960},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1691, col: 35, offset: 55982},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1705, col: 1, offset: 56344},
			expr: &actionExpr{
				pos: position{line: 1706, col: 5, offset: 56372},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1706, col: 5, offset: 56372},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1703, col: 33, offset: 56338},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 1707, col: 5, offset: 56406},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1707, col: 15, offset: 56416},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1703, col: 33, offset: 56338},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1712, col: 1, offset: 56573},
			expr: &oneOrMoreExpr{
				pos: position{line: 1712, col: 32, offset: 56604},
				expr: &ruleRefExpr{
					pos:  position{line: 1712, col: 32, offset: 56604},
					name: "DoubleQuoteBoldTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1714, col: 1, offset: 56635},
			expr: &actionExpr{
				pos: position{line: 1715, col: 5, offset: 56670},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 1715, col: 5, offset: 56670},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1715, col: 5, offset: 56670},
							expr: &litMatcher{
								pos:        position{line: 1703, col: 33, offset: 56338},
								val:        "**",
								ignoreCase: false,
								want:       "\"**\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1716, col: 5, offset: 56704},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1717, col: 9, offset: 56722},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1696, col: 5, offset: 56096},
										run: (*parser).callonDoubleQuoteBoldTextElement7,
										expr: &seqExpr{
											pos: position{line: 1696, col: 5, offset: 56096},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 1696, col: 5, offset: 56096},
													expr: &charClassMatcher{
														pos:        position{line: 1696, col: 5, offset: 56096},
														val:        "[,?!;0-9\\pL]",
														chars:      []rune{',', '?', '!', ';'},
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 1696, col: 19, offset: 56110},
													expr: &choiceExpr{
														pos: position{line: 1696, col: 21, offset: 56112},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2878, col: 10, offset: 95044},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2878, col: 16, offset: 95050},
																run: (*parser).callonDoubleQuoteBoldTextElement14,
																expr: &litMatcher{
																	pos:        position{line: 2878, col: 16, offset: 95050},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
															&litMatcher{
																pos:        position{line: 1693, col: 22, offset: 56070},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2882, col: 11, offset: 95109},
										run: (*parser).callonDoubleQuoteBoldTextElement17,
										expr: &oneOrMoreExpr{
											pos: position{line: 2882, col: 11, offset: 95109},
											expr: &charClassMatcher{
												pos:        position{line: 2882, col: 12, offset: 95110},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&seqExpr{
										pos: position{line: 1719, col: 11, offset: 56795},
										exprs: []interface{}{
											&choiceExpr{
												pos: position{line: 2886, col: 12, offset: 95178},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2886, col: 12, offset: 95178},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
													&litMatcher{
														pos:        position{line: 2886, col: 19, offset: 95185},
														val:        "\r\n",
														ignoreCase: false,
														want:       "\"\\r\\n\"",
													},
													&actionExpr{
														pos: position{line: 2886, col: 28, offset: 95194},
														run: (*parser).callonDoubleQuoteBoldTextElement24,
														expr: &litMatcher{
															pos:        position{line: 2886, col: 28, offset: 95194},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1719, col: 19, offset: 56803},
												expr: &choiceExpr{
													pos: position{line: 2886, col: 12, offset: 95178},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2886, col: 12, offset: 95178},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2886, col: 19, offset: 95185},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&actionExpr{
															pos: position{line: 2886, col: 28, offset: 95194},
															run: (*parser).callonDoubleQuoteBoldTextElement30,
															expr: &litMatcher{
																pos:        position{line: 2886, col: 28, offset: 95194},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 449, col: 5, offset: 14443},
										run: (*parser).callonDoubleQuoteBoldTextElement32,
										expr: &seqExpr{
											pos: position{line: 449, col: 5, offset: 14443},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 449, col: 5, offset: 14443},
													run: (*parser).callonDoubleQuoteBoldTextElement34,
												},
												&labeledExpr{
													pos:   position{line: 452, col: 5, offset: 14507},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 452, col: 14, offset: 14516},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 463, col: 25, offset: 14978},
																run: (*parser).callonDoubleQuoteBoldTextElement37,
																expr: &seqExpr{
																	pos: position{line: 463, col: 25, offset: 14978},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 463, col: 25, offset: 14978},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 463, col: 37, offset: 14990},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 118, col: 18, offset: 3399},
																				run: (*parser).callonDoubleQuoteBoldTextElement41,
																				expr: &seqExpr{
																					pos: position{line: 118, col: 18, offset: 3399},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 118, col: 18, offset: 3399},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 118, col: 28, offset: 3409},
																							expr: &charClassMatcher{
																								pos:        position{line: 118, col: 29, offset: 3410},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 463, col: 56, offset: 15009},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 463, col: 62, offset: 15015},
																				expr: &actionExpr{
																					pos: position{line: 471, col: 17, offset: 15278},
																					run: (*parser).callonDoubleQuoteBoldTextElement48,
																					expr: &seqExpr{
																						pos: position{line: 471, col: 17, offset: 15278},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 471, col: 17, offset: 15278},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 471, col: 21, offset: 15282},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 471, col: 28, offset: 15289},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 471, col: 28, offset: 15289},
																											run: (*parser).callonDoubleQuoteBoldTextElement53,
																											expr: &charClassMatcher{
																												pos:        position{line: 471, col: 28, offset: 15289},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 473, col: 9, offset: 15343},
																											run: (*parser).callonDoubleQuoteBoldTextElement55,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 473, col: 9, offset: 15343},
																												expr: &charClassMatcher{
																													pos:        position{line: 473, col: 9, offset: 15343},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 463, col: 78, offset: 15031},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 467, col: 25, offset: 15133},
																run: (*parser).callonDoubleQuoteBoldTextElement59,
																expr: &seqExpr{
																	pos: position{line: 467, col: 25, offset: 15133},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 467, col: 25, offset: 15133},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 467, col: 38, offset: 15146},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 118, col: 18, offset: 3399},
																				run: (*parser).callonDoubleQuoteBoldTextElement63,
																				expr: &seqExpr{
																					pos: position{line: 118, col: 18, offset: 3399},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 118, col: 18, offset: 3399},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 118, col: 28, offset: 3409},
																							expr: &charClassMatcher{
																								pos:        position{line: 118, col: 29, offset: 3410},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 467, col: 57, offset: 15165},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 467, col: 63, offset: 15171},
																				expr: &actionExpr{
																					pos: position{line: 471, col: 17, offset: 15278},
																					run: (*parser).callonDoubleQuoteBoldTextElement70,
																					expr: &seqExpr{
																						pos: position{line: 471, col: 17, offset: 15278},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 471, col: 17, offset: 15278},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 471, col: 21, offset: 15282},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 471, col: 28, offset: 15289},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 471, col: 28, offset: 15289},
																											run: (*parser).callonDoubleQuoteBoldTextElement75,
																											expr: &charClassMatcher{
																												pos:        position{line: 471, col: 28, offset: 15289},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 473, col: 9, offset: 15343},
																											run: (*parser).callonDoubleQuoteBoldTextElement77,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 473, col: 9, offset: 15343},
																												expr: &charClassMatcher{
																													pos:        position{line: 473, col: 9, offset: 15343},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 467, col: 79, offset: 15187},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 456, col: 31, offset: 14633},
																run: (*parser).callonDoubleQuoteBoldTextElement81,
																expr: &seqExpr{
																	pos: position{line: 456, col: 31, offset: 14633},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 456, col: 31, offset: 14633},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 456, col: 35, offset: 14637},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 118, col: 18, offset: 3399},
																				run: (*parser).callonDoubleQuoteBoldTextElement85,
																				expr: &seqExpr{
																					pos: position{line: 118, col: 18, offset: 3399},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 118, col: 18, offset: 3399},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 118, col: 28, offset: 3409},
																							expr: &charClassMatcher{
																								pos:        position{line: 118, col: 29, offset: 3410},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 456, col: 54, offset: 14656},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2587, col: 5, offset: 86026},
										run: (*parser).callonDoubleQuoteBoldTextElement91,
										expr: &seqExpr{
											pos: position{line: 2587, col: 5, offset: 86026},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2587, col: 5, offset: 86026},
													run: (*parser).callonDoubleQuoteBoldTextElement93,
												},
												&labeledExpr{
													pos:   position{line: 2590, col: 5, offset: 86097},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2592, col: 9, offset: 86195},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2592, col: 9, offset: 86195},
																run: (*parser).callonDoubleQuoteBoldTextElement96,
																expr: &choiceExpr{
																	pos: position{line: 491, col: 27, offset: 15997},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 491, col: 27, offset: 15997},
																			run: (*parser).callonDoubleQuoteBoldTextElement98,
																			expr: &seqExpr{
																				pos: position{line: 491, col: 27, offset: 15997},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 491, col: 27, offset: 15997},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 491, col: 32, offset: 16002},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2866, col: 7, offset: 94768},
																							run: (*parser).callonDoubleQuoteBoldTextElement102,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2866, col: 7, offset: 94768},
																								expr: &charClassMatcher{
																									pos:        position{line: 2866, col: 7, offset: 94768},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 491, col: 40, offset: 16010},
																						expr: &choiceExpr{
																							pos: position{line: 2878, col: 10, offset: 95044},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2878, col: 10, offset: 95044},
																									val:        " ",
																									ignoreCase: false,
																									want:       "\" \"",
																								},
																								&actionExpr{
																									pos: position{line: 2878, col: 16, offset: 95050},
																									run: (*parser).callonDoubleQuoteBoldTextElement108,
																									expr: &litMatcher{
																										pos:        position{line: 2878, col: 16, offset: 95050},
																										val:        "\t",
																										ignoreCase: false,
																										want:       "\"\\t\"",
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 491, col: 47, offset: 16017},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 491, col: 51, offset: 16021},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 501, col: 24, offset: 16434},
																							expr: &choiceExpr{
																								pos: position{line: 502, col: 5, offset: 16440},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 502, col: 6, offset: 16441},
																										run: (*parser).callonDoubleQuoteBoldTextElement114,
																										expr: &seqExpr{
																											pos: position{line: 502, col: 6, offset: 16441},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 502, col: 6, offset: 16441},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 502, col: 14, offset: 16449},
																													expr: &charClassMatcher{
																														pos:        position{line: 502, col: 14, offset: 16449},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 449, col: 5, offset: 14443},
																										run: (*parser).callonDoubleQuoteBoldTextElement119,
																										expr: &seqExpr{
																											pos: position{line: 449, col: 5, offset: 14443},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 449, col: 5, offset: 14443},
																													run: (*parser).callonDoubleQuoteBoldTextElement121,
																												},
																												&labeledExpr{
																													pos:   position{line: 452, col: 5, offset: 14507},
																													label: "element",
																													expr: &choiceExpr{
																														pos: position{line: 452, col: 14, offset: 14516},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 463, col: 25, offset: 14978},
																																run: (*parser).callonDoubleQuoteBoldTextElement124,
																																expr: &seqExpr{
																																	pos: position{line: 463, col: 25, offset: 14978},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 463, col: 25, offset: 14978},
																																			val:        "{counter:",
																																			ignoreCase: false,
																																			want:       "\"{counter:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 463, col: 37, offset: 14990},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 118, col: 18, offset: 3399},
																																				run: (*parser).callonDoubleQuoteBoldTextElement128,
																																				expr: &seqExpr{
																																					pos: position{line: 118, col: 18, offset: 3399},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 118, col: 18, offset: 3399},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 118, col: 28, offset: 3409},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 118, col: 29, offset: 3410},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 463, col: 56, offset: 15009},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 463, col: 62, offset: 15015},
																																				expr: &actionExpr{
																																					pos: position{line: 471, col: 17, offset: 15278},
																																					run: (*parser).callonDoubleQuoteBoldTextElement135,
																																					expr: &seqExpr{
																																						pos: position{line: 471, col: 17, offset: 15278},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 471, col: 17, offset: 15278},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 471, col: 21, offset: 15282},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 471, col: 28, offset: 15289},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 471, col: 28, offset: 15289},
																																											run: (*parser).callonDoubleQuoteBoldTextElement140,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 471, col: 28, offset: 15289},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 473, col: 9, offset: 15343},
																																											run: (*parser).callonDoubleQuoteBoldTextElement142,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 473, col: 9, offset: 15343},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 473, col: 9, offset: 15343},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 463, col: 78, offset: 15031},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 467, col: 25, offset: 15133},
																																run: (*parser).callonDoubleQuoteBoldTextElement146,
																																expr: &seqExpr{
																																	pos: position{line: 467, col: 25, offset: 15133},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 467, col: 25, offset: 15133},
																																			val:        "{counter2:",
																																			ignoreCase: false,
																																			want:       "\"{counter2:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 467, col: 38, offset: 15146},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 118, col: 18, offset: 3399},
																																				run: (*parser).callonDoubleQuoteBoldTextElement150,
																																				expr: &seqExpr{
																																					pos: position{line: 118, col: 18, offset: 3399},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 118, col: 18, offset: 3399},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 118, col: 28, offset: 3409},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 118, col: 29, offset: 3410},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 467, col: 57, offset: 15165},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 467, col: 63, offset: 15171},
																																				expr: &actionExpr{
																																					pos: position{line: 471, col: 17, offset: 15278},
																																					run: (*parser).callonDoubleQuoteBoldTextElement157,
																																					expr: &seqExpr{
																																						pos: position{line: 471, col: 17, offset: 15278},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 471, col: 17, offset: 15278},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 471, col: 21, offset: 15282},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 471, col: 28, offset: 15289},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 471, col: 28, offset: 15289},
																																											run: (*parser).callonDoubleQuoteBoldTextElement162,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 471, col: 28, offset: 15289},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 473, col: 9, offset: 15343},
																																											run: (*parser).callonDoubleQuoteBoldTextElement164,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 473, col: 9, offset: 15343},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 473, col: 9, offset: 15343},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 467, col: 79, offset: 15187},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 456, col: 31, offset: 14633},
																																run: (*parser).callonDoubleQuoteBoldTextElement168,
																																expr: &seqExpr{
																																	pos: position{line: 456, col: 31, offset: 14633},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 456, col: 31, offset: 14633},
																																			val:        "{",
																																			ignoreCase: false,
																																			want:       "\"{\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 456, col: 35, offset: 14637},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 118, col: 18, offset: 3399},
																																				run: (*parser).callonDoubleQuoteBoldTextElement172,
																																				expr: &seqExpr{
																																					pos: position{line: 118, col: 18, offset: 3399},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 118, col: 18, offset: 3399},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 118, col: 28, offset: 3409},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 118, col: 29, offset: 3410},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 456, col: 54, offset: 14656},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 506, col: 8, offset: 16673},
																										run: (*parser).callonDoubleQuoteBoldTextElement178,
																										expr: &litMatcher{
																											pos:        position{line: 506, col: 8, offset: 16673},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 491, col: 79, offset: 16049},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 493, col: 9, offset: 16122},
																			run: (*parser).callonDoubleQuoteBoldTextElement181,
																			expr: &seqExpr{
																				pos: position{line: 493, col: 9, offset: 16122},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 493, col: 9, offset: 16122},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 493, col: 14, offset: 16127},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2866, col: 7, offset: 94768},
																							run: (*parser).callonDoubleQuoteBoldTextElement185,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2866, col: 7, offset: 94768},
																								expr: &charClassMatcher{
																									pos:        position{line: 2866, col: 7, offset: 94768},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 493, col: 22, offset: 16135},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2595, col: 11, offset: 86299},
																run: (*parser).callonDoubleQuoteBoldTextElement189,
																expr: &charClassMatcher{
																	pos:        position{line: 2595, col: 12, offset: 86300},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2620, col: 15, offset: 87267},
										run: (*parser).callonDoubleQuoteBoldTextElement191,
										expr: &litMatcher{
											pos:        position{line: 2620, col: 15, offset: 87267},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&actionExpr{
										pos: position{line: 2626, col: 14, offset: 87382},
										run: (*parser).callonDoubleQuoteBoldTextElement193,
										expr: &litMatcher{
											pos:        position{line: 2626, col: 14, offset: 87382},
											val:        "(C)",
											ignoreCase: false,
											want:       "\"(C)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2630, col: 14, offset: 87458},
										run: (*parser).callonDoubleQuoteBoldTextElement195,
										expr: &litMatcher{
											pos:        position{line: 2630, col: 14, offset: 87458},
											val:        "(TM)",
											ignoreCase: false,
											want:       "\"(TM)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2634, col: 15, offset: 87536},
										run: (*parser).callonDoubleQuoteBoldTextElement197,
										expr: &litMatcher{
											pos:        position{line: 2634, col: 15, offset: 87536},
											val:        "(R)",
											ignoreCase: false,
											want:       "\"(R)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2638, col: 13, offset: 87611},
										run: (*parser).callonDoubleQuoteBoldTextElement199,
										expr: &litMatcher{
											pos:        position{line: 2638, col: 13, offset: 87611},
											val:        "...",
											ignoreCase: false,
											want:       "\"...\"",
										},
									},
									&actionExpr{
										pos: position{line: 2646, col: 22, offset: 87917},
										run: (*parser).callonDoubleQuoteBoldTextElement201,
										expr: &seqExpr{
											pos: position{line: 2646, col: 22, offset: 87917},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2797, col: 13, offset: 92519},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 2646, col: 31, offset: 87926},
													val:        "'",
													ignoreCase: false,
													want:       "\"'\"",
												},
												&andExpr{
													pos: position{line: 2646, col: 35, offset: 87930},
													expr: &charClassMatcher{
														pos:        position{line: 2646, col: 36, offset: 87931},
														val:        "[\\pL]",
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1723, col: 11, offset: 56932},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1724, col: 11, offset: 56954},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1725, col: 11, offset: 56977},
										name: "QuotedTextInDoubleQuoteBoldText",
									},
									&actionExpr{
										pos: position{line: 947, col: 23, offset: 29896},
										run: (*parser).callonDoubleQuoteBoldTextElement210,
										expr: &seqExpr{
											pos: position{line: 947, col: 23, offset: 29896},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 945, col: 32, offset: 29864},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
												&labeledExpr{
													pos:   position{line: 947, col: 51, offset: 29924},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 947, col: 56, offset: 29929},
														run: (*parser).callonDoubleQuoteBoldTextElement214,
														expr: &oneOrMoreExpr{
															pos: position{line: 947, col: 56, offset: 29929},
															expr: &charClassMatcher{
																pos:        position{line: 947, col: 56, offset: 29929},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 945, col: 32, offset: 29864},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
											},
										},
									},
									&charClassMatcher{
										pos:        position{line: 1744, col: 5, offset: 57489},
										val:        "[^\\r\\n*]",
										chars:      []rune{'\r', '\n', '*'},
										ignoreCase: false,
										inverted:   true,
									},
									&actionExpr{
										pos: position{line: 1745, col: 7, offset: 57586},
										run: (*parser).callonDoubleQuoteBoldTextElement219,
										expr: &seqExpr{
											pos: position{line: 1745, col: 7, offset: 57586},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1703, col: 33, offset: 56338},
													val:        "**",
													ignoreCase: false,
													want:       "\"**\"",
												},
												&actionExpr{
													pos: position{line: 2801, col: 14, offset: 92593},
													run: (*parser).callonDoubleQuoteBoldTextElement222,
													expr: &oneOrMoreExpr{
														pos: position{line: 2801, col: 14, offset: 92593},
														expr: &charClassMatcher{
															pos:        position{line: 2801, col: 14, offset: 92593},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteBoldText",
			pos:  position{line: 1731, col: 1, offset: 57131},
			expr: &actionExpr{
				pos: position{line: 1732, col: 5, offset: 57171},
				run: (*parser).callonQuotedTextInDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1732, col: 5, offset: 57171},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1732, col: 5, offset: 57171},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1732, col: 16, offset: 57182},
								expr: &ruleRefExpr{
									pos:  position{line: 1732, col: 17, offset: 57183},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1733, col: 5, offset: 57209},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1734, col: 9, offset: 57224},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1734, col: 9, offset: 57224},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1735, col: 11, offset: 57254},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1736, col: 11, offset: 57275},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1737, col: 11, offset: 57296},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1738, col: 11, offset: 57320},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1739, col: 11, offset: 57344},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1756, col: 1, offset: 57973},
			expr: &actionExpr{
				pos: position{line: 1757, col: 5, offset: 58001},
				run: (*parser).callonSingleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1757, col: 5, offset: 58001},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1752, col: 38, offset: 57927},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&labeledExpr{
							pos:   position{line: 1758, col: 5, offset: 58039},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1758, col: 15, offset: 58049},
								name: "SingleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1754, col: 36, offset: 57967},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1763, col: 1, offset: 58209},
			expr: &actionExpr{
				pos: position{line: 1764, col: 5, offset: 58246},
				run: (*parser).callonSingleQuoteBoldTextElements1,
				expr: &seqExpr{
					pos: position{line: 1764, col: 5, offset: 58246},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1764, col: 5, offset: 58246},
							expr: &notExpr{
								pos: position{line: 2890, col: 8, offset: 95285},
								expr: &anyMatcher{
									line: 2890, col: 9, offset: 95286,
								},
							},
						},
						&notExpr{
							pos: position{line: 1764, col: 10, offset: 58251},
							expr: &choiceExpr{
								pos: position{line: 2878, col: 10, offset: 95044},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 2878, col: 10, offset: 95044},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
									&actionExpr{
										pos: position{line: 2878, col: 16, offset: 95050},
										run: (*parser).callonSingleQuoteBoldTextElements9,
										expr: &litMatcher{
											pos:        position{line: 2878, col: 16, offset: 95050},
											val:        "\t",
											ignoreCase: false,
											want:       "\"\\t\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1765, col: 5, offset: 58290},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1765, col: 14, offset: 58299},
								expr: &ruleRefExpr{
									pos:  position{line: 1765, col: 15, offset: 58300},
									name: "SingleQuoteBoldTextElement",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1766, col: 5, offset: 58334},
							run: (*parser).callonSingleQuoteBoldTextElements14,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1772, col: 1, offset: 58475},
			expr: &choiceExpr{
				pos: position{line: 1773, col: 5, offset: 58510},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1696, col: 5, offset: 56096},
						run: (*parser).callonSingleQuoteBoldTextElement2,
						expr: &seqExpr{
							pos: position{line: 1696, col: 5, offset: 56096},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1696, col: 5, offset: 56096},
									expr: &charClassMatcher{
										pos:        position{line: 1696, col: 5, offset: 56096},
										val:        "[,?!;0-9\\pL]",
										chars:      []rune{',', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1696, col: 19, offset: 56110},
									expr: &choiceExpr{
										pos: position{line: 1696, col: 21, offset: 56112},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2878, col: 10, offset: 95044},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
											&actionExpr{
												pos: position{line: 2878, col: 16, offset: 95050},
												run: (*parser).callonSingleQuoteBoldTextElement9,
												expr: &litMatcher{
													pos:        position{line: 2878, col: 16, offset: 95050},
													val:        "\t",
													ignoreCase: false,
													want:       "\"\\t\"",
												},
											},
											&litMatcher{
												pos:        position{line: 1693, col: 22, offset: 56070},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2882, col: 11, offset: 95109},
						run: (*parser).callonSingleQuoteBoldTextElement12,
						expr: &oneOrMoreExpr{
							pos: position{line: 2882, col: 11, offset: 95109},
							expr: &charClassMatcher{
								pos:        position{line: 2882, col: 12, offset: 95110},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
					&seqExpr{
						pos: position{line: 1775, col: 7, offset: 58542},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 2886, col: 12, offset: 95178},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 2886, col: 12, offset: 95178},
										val:        "\n",
										ignoreCase: false,
										want:       "\"\\n\"",
									},
									&litMatcher{
										pos:        position{line: 2886, col: 19, offset: 95185},
										val:        "\r\n",
										ignoreCase: false,
										want:       "\"\\r\\n\"",
									},
									&actionExpr{
										pos: position{line: 2886, col: 28, offset: 95194},
										run: (*parser).callonSingleQuoteBoldTextElement19,
										expr: &litMatcher{
											pos:        position{line: 2886, col: 28, offset: 95194},
											val:        "\r",
											ignoreCase: false,
											want:       "\"\\r\"",
										},
									},
								},
							},
							&notExpr{
								pos: position{line: 1775, col: 15, offset: 58550},
								expr: &choiceExpr{
									pos: position{line: 2886, col: 12, offset: 95178},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 2886, col: 12, offset: 95178},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
										&litMatcher{
											pos:        position{line: 2886, col: 19, offset: 95185},
											val:        "\r\n",
											ignoreCase: false,
											want:       "\"\\r\\n\"",
										},
										&actionExpr{
											pos: position{line: 2886, col: 28, offset: 95194},
											run: (*parser).callonSingleQuoteBoldTextElement25,
											expr: &litMatcher{
												pos:        position{line: 2886, col: 28, offset: 95194},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 449, col: 5, offset: 14443},
						run: (*parser).callonSingleQuoteBoldTextElement27,
						expr: &seqExpr{
							pos: position{line: 449, col: 5, offset: 14443},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 449, col: 5, offset: 14443},
									run: (*parser).callonSingleQuoteBoldTextElement29,
								},
								&labeledExpr{
									pos:   position{line: 452, col: 5, offset: 14507},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 452, col: 14, offset: 14516},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 463, col: 25, offset: 14978},
												run: (*parser).callonSingleQuoteBoldTextElement32,
												expr: &seqExpr{
													pos: position{line: 463, col: 25, offset: 14978},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 463, col: 25, offset: 14978},
															val:        "{counter:",
															ignoreCase: false,
															want:       "\"{counter:\"",
														},
														&labeledExpr{
															pos:   position{line: 463, col: 37, offset: 14990},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 118, col: 18, offset: 3399},
																run: (*parser).callonSingleQuoteBoldTextElement36,
																expr: &seqExpr{
																	pos: position{line: 118, col: 18, offset: 3399},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 118, col: 18, offset: 3399},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 118, col: 28, offset: 3409},
																			expr: &charClassMatcher{
																				pos:        position{line: 118, col: 29, offset: 3410},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 463, col: 56, offset: 15009},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 463, col: 62, offset: 15015},
																expr: &actionExpr{
																	pos: position{line: 471, col: 17, offset: 15278},
																	run: (*parser).callonSingleQuoteBoldTextElement43,
																	expr: &seqExpr{
																		pos: position{line: 471, col: 17, offset: 15278},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 471, col: 17, offset: 15278},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 471, col: 21, offset: 15282},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 471, col: 28, offset: 15289},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 471, col: 28, offset: 15289},
																							run: (*parser).callonSingleQuoteBoldTextElement48,
																							expr: &charClassMatcher{
																								pos:        position{line: 471, col: 28, offset: 15289},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 473, col: 9, offset: 15343},
																							run: (*parser).callonSingleQuoteBoldTextElement50,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 473, col: 9, offset: 15343},
																								expr: &charClassMatcher{
																									pos:        position{line: 473, col: 9, offset: 15343},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 463, col: 78, offset: 15031},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 467, col: 25, offset: 15133},
												run: (*parser).callonSingleQuoteBoldTextElement54,
												expr: &seqExpr{
													pos: position{line: 467, col: 25, offset: 15133},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 467, col: 25, offset: 15133},
															val:        "{counter2:",
															ignoreCase: false,
															want:       "\"{counter2:\"",
														},
														&labeledExpr{
															pos:   position{line: 467, col: 38, offset: 15146},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 118, col: 18, offset: 3399},
																run: (*parser).callonSingleQuoteBoldTextElement58,
																expr: &seqExpr{
																	pos: position{line: 118, col: 18, offset: 3399},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 118, col: 18, offset: 3399},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 118, col: 28, offset: 3409},
																			expr: &charClassMatcher{
																				pos:        position{line: 118, col: 29, offset: 3410},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 467, col: 57, offset: 15165},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 467, col: 63, offset: 15171},
																expr: &actionExpr{
																	pos: position{line: 471, col: 17, offset: 15278},
																	run: (*parser).callonSingleQuoteBoldTextElement65,
																	expr: &seqExpr{
																		pos: position{line: 471, col: 17, offset: 15278},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 471, col: 17, offset: 15278},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 471, col: 21, offset: 15282},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 471, col: 28, offset: 15289},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 471, col: 28, offset: 15289},
																							run: (*parser).callonSingleQuoteBoldTextElement70,
																							expr: &charClassMatcher{
																								pos:        position{line: 471, col: 28, offset: 15289},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 473, col: 9, offset: 15343},
																							run: (*parser).callonSingleQuoteBoldTextElement72,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 473, col: 9, offset: 15343},
																								expr: &charClassMatcher{
																									pos:        position{line: 473, col: 9, offset: 15343},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 467, col: 79, offset: 15187},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 456, col: 31, offset: 14633},
												run: (*parser).callonSingleQuoteBoldTextElement76,
												expr: &seqExpr{
													pos: position{line: 456, col: 31, offset: 14633},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 456, col: 31, offset: 14633},
															val:        "{",
															ignoreCase: false,
															want:       "\"{\"",
														},
														&labeledExpr{
															pos:   position{line: 456, col: 35, offset: 14637},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 118, col: 18, offset: 3399},
																run: (*parser).callonSingleQuoteBoldTextElement80,
																expr: &seqExpr{
																	pos: position{line: 118, col: 18, offset: 3399},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 118, col: 18, offset: 3399},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 118, col: 28, offset: 3409},
																			expr: &charClassMatcher{
																				pos:        position{line: 118, col: 29, offset: 3410},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 456, col: 54, offset: 14656},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2587, col: 5, offset: 86026},
						run: (*parser).callonSingleQuoteBoldTextElement86,
						expr: &seqExpr{
							pos: position{line: 2587, col: 5, offset: 86026},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 2587, col: 5, offset: 86026},
									run: (*parser).callonSingleQuoteBoldTextElement88,
								},
								&labeledExpr{
									pos:   position{line: 2590, col: 5, offset: 86097},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 2592, col: 9, offset: 86195},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 2592, col: 9, offset: 86195},
												run: (*parser).callonSingleQuoteBoldTextElement91,
												expr: &choiceExpr{
													pos: position{line: 491, col: 27, offset: 15997},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 491, col: 27, offset: 15997},
															run: (*parser).callonSingleQuoteBoldTextElement93,
															expr: &seqExpr{
																pos: position{line: 491, col: 27, offset: 15997},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 491, col: 27, offset: 15997},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 491, col: 32, offset: 16002},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 2866, col: 7, offset: 94768},
																			run: (*parser).callonSingleQuoteBoldTextElement97,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2866, col: 7, offset: 94768},
																				expr: &charClassMatcher{
																					pos:        position{line: 2866, col: 7, offset: 94768},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 491, col: 40, offset: 16010},
																		expr: &choiceExpr{
																			pos: position{line: 2878, col: 10, offset: 95044},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2878, col: 10, offset: 95044},
																					val:        " ",
																					ignoreCase: false,
																					want:       "\" \"",
																				},
																				&actionExpr{
																					pos: position{line: 2878, col: 16, offset: 95050},
																					run: (*parser).callonSingleQuoteBoldTextElement103,
																					expr: &litMatcher{
																						pos:        position{line: 2878, col: 16, offset: 95050},
																						val:        "\t",
																						ignoreCase: false,
																						want:       "\"\\t\"",
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 491, col: 47, offset: 16017},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 491, col: 51, offset: 16021},
																		label: "label",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 501, col: 24, offset: 16434},
																			expr: &choiceExpr{
																				pos: position{line: 502, col: 5, offset: 16440},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 502, col: 6, offset: 16441},
																						run: (*parser).callonSingleQuoteBoldTextElement109,
																						expr: &seqExpr{
																							pos: position{line: 502, col: 6, offset: 16441},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 502, col: 6, offset: 16441},
																									val:        "[0-9\\pL]",
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&oneOrMoreExpr{
																									pos: position{line: 502, col: 14, offset: 16449},
																									expr: &charClassMatcher{
																										pos:        position{line: 502, col: 14, offset: 16449},
																										val:        "[^\\r\\n{<>]",
																										chars:      []rune{'\r', '\n', '{', '<', '>'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 449, col: 5, offset: 14443},
																						run: (*parser).callonSingleQuoteBoldTextElement114,
																						expr: &seqExpr{
																							pos: position{line: 449, col: 5, offset: 14443},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 449, col: 5, offset: 14443},
																									run: (*parser).callonSingleQuoteBoldTextElement116,
																								},
																								&labeledExpr{
																									pos:   position{line: 452, col: 5, offset: 14507},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 452, col: 14, offset: 14516},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 463, col: 25, offset: 14978},
																												run: (*parser).callonSingleQuoteBoldTextElement119,
																												expr: &seqExpr{
																													pos: position{line: 463, col: 25, offset: 14978},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 463, col: 25, offset: 14978},
																															val:        "{counter:",
																															ignoreCase: false,
																															want:       "\"{counter:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 463, col: 37, offset: 14990},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 118, col: 18, offset: 3399},
																																run: (*parser).callonSingleQuoteBoldTextElement123,
																																expr: &seqExpr{
																																	pos: position{line: 118, col: 18, offset: 3399},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 118, col: 18, offset: 3399},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 118, col: 28, offset: 3409},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 118, col: 29, offset: 3410},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 463, col: 56, offset: 15009},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 463, col: 62, offset: 15015},
																																expr: &actionExpr{
																																	pos: position{line: 471, col: 17, offset: 15278},
																																	run: (*parser).callonSingleQuoteBoldTextElement130,
																																	expr: &seqExpr{
																																		pos: position{line: 471, col: 17, offset: 15278},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 471, col: 17, offset: 15278},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 471, col: 21, offset: 15282},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 471, col: 28, offset: 15289},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 471, col: 28, offset: 15289},
																																							run: (*parser).callonSingleQuoteBoldTextElement135,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 471, col: 28, offset: 15289},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 473, col: 9, offset: 15343},
																																							run: (*parser).callonSingleQuoteBoldTextElement137,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 473, col: 9, offset: 15343},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 473, col: 9, offset: 15343},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 463, col: 78, offset: 15031},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 467, col: 25, offset: 15133},
																												run: (*parser).callonSingleQuoteBoldTextElement141,
																												expr: &seqExpr{
																													pos: position{line: 467, col: 25, offset: 15133},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 467, col: 25, offset: 15133},
																															val:        "{counter2:",
																															ignoreCase: false,
																															want:       "\"{counter2:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 467, col: 38, offset: 15146},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 118, col: 18, offset: 3399},
																																run: (*parser).callonSingleQuoteBoldTextElement145,
																																expr: &seqExpr{
																																	pos: position{line: 118, col: 18, offset: 3399},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 118, col: 18, offset: 3399},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 118, col: 28, offset: 3409},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 118, col: 29, offset: 3410},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 467, col: 57, offset: 15165},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 467, col: 63, offset: 15171},
																																expr: &actionExpr{
																																	pos: position{line: 471, col: 17, offset: 15278},
																																	run: (*parser).callonSingleQuoteBoldTextElement152,
																																	expr: &seqExpr{
																																		pos: position{line: 471, col: 17, offset: 15278},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 471, col: 17, offset: 15278},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 471, col: 21, offset: 15282},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 471, col: 28, offset: 15289},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 471, col: 28, offset: 15289},
																																							run: (*parser).callonSingleQuoteBoldTextElement157,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 471, col: 28, offset: 15289},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 473, col: 9, offset: 15343},
																																							run: (*parser).callonSingleQuoteBoldTextElement159,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 473, col: 9, offset: 15343},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 473, col: 9, offset: 15343},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 467, col: 79, offset: 15187},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 456, col: 31, offset: 14633},
																												run: (*parser).callonSingleQuoteBoldTextElement163,
																												expr: &seqExpr{
																													pos: position{line: 456, col: 31, offset: 14633},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 456, col: 31, offset: 14633},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 456, col: 35, offset: 14637},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 118, col: 18, offset: 3399},
																																run: (*parser).callonSingleQuoteBoldTextElement167,
																																expr: &seqExpr{
																																	pos: position{line: 118, col: 18, offset: 3399},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 118, col: 18, offset: 3399},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 118, col: 28, offset: 3409},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 118, col: 29, offset: 3410},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 456, col: 54, offset: 14656},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 506, col: 8, offset: 16673},
																						run: (*parser).callonSingleQuoteBoldTextElement173,
																						expr: &litMatcher{
																							pos:        position{line: 506, col: 8, offset: 16673},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 491, col: 79, offset: 16049},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 493, col: 9, offset: 16122},
															run: (*parser).callonSingleQuoteBoldTextElement176,
															expr: &seqExpr{
																pos: position{line: 493, col: 9, offset: 16122},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 493, col: 9, offset: 16122},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 493, col: 14, offset: 16127},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 2866, col: 7, offset: 94768},
																			run: (*parser).callonSingleQuoteBoldTextElement180,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2866, col: 7, offset: 94768},
																				expr: &charClassMatcher{
																					pos:        position{line: 2866, col: 7, offset: 94768},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 493, col: 22, offset: 16135},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 2595, col: 11, offset: 86299},
												run: (*parser).callonSingleQuoteBoldTextElement184,
												expr: &charClassMatcher{
													pos:        position{line: 2595, col: 12, offset: 86300},
													val:        "[<>&]",
													chars:      []rune{'<', '>', '&'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2620, col: 15, offset: 87267},
						run: (*parser).callonSingleQuoteBoldTextElement186,
						expr: &litMatcher{
							pos:        position{line: 2620, col: 15, offset: 87267},
							val:        "`'",
							ignoreCase: false,
							want:       "\"`'\"",
						},
					},
					&actionExpr{
						pos: position{line: 2626, col: 14, offset: 87382},
						run: (*parser).callonSingleQuoteBoldTextElement188,
						expr: &litMatcher{
							pos:        position{line: 2626, col: 14, offset: 87382},
							val:        "(C)",
							ignoreCase: false,
							want:       "\"(C)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2630, col: 14, offset: 87458},
						run: (*parser).callonSingleQuoteBoldTextElement190,
						expr: &litMatcher{
							pos:        position{line: 2630, col: 14, offset: 87458},
							val:        "(TM)",
							ignoreCase: false,
							want:       "\"(TM)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2634, col: 15, offset: 87536},
						run: (*parser).callonSingleQuoteBoldTextElement192,
						expr: &litMatcher{
							pos:        position{line: 2634, col: 15, offset: 87536},
							val:        "(R)",
							ignoreCase: false,
							want:       "\"(R)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2638, col: 13, offset: 87611},
						run: (*parser).callonSingleQuoteBoldTextElement194,
						expr: &litMatcher{
							pos:        position{line: 2638, col: 13, offset: 87611},
							val:        "...",
							ignoreCase: false,
							want:       "\"...\"",
						},
					},
					&actionExpr{
						pos: position{line: 2646, col: 22, offset: 87917},
						run: (*parser).callonSingleQuoteBoldTextElement196,
						expr: &seqExpr{
							pos: position{line: 2646, col: 22, offset: 87917},
							exprs: []interface{}{
								&charClassMatcher{
									pos:        position{line: 2797, col: 13, offset: 92519},
									val:        "[0-9\\pL]",
									ranges:     []rune{'0', '9'},
									classes:    []*unicode.RangeTable{rangeTable("L")},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 2646, col: 31, offset: 87926},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&andExpr{
									pos: position{line: 2646, col: 35, offset: 87930},
									expr: &charClassMatcher{
										pos:        position{line: 2646, col: 36, offset: 87931},
										val:        "[\\pL]",
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1779, col: 7, offset: 58663},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1780, col: 7, offset: 58681},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1781, col: 7, offset: 58700},
						name: "QuotedTextInSingleQuoteBoldText",
					},
					&actionExpr{
						pos: position{line: 947, col: 23, offset: 29896},
						run: (*parser).callonSingleQuoteBoldTextElement205,
						expr: &seqExpr{
							pos: position{line: 947, col: 23, offset: 29896},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 945, col: 32, offset: 29864},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
								&labeledExpr{
									pos:   position{line: 947, col: 51, offset: 29924},
									label: "ref",
									expr: &actionExpr{
										pos: position{line: 947, col: 56, offset: 29929},
										run: (*parser).callonSingleQuoteBoldTextElement209,
										expr: &oneOrMoreExpr{
											pos: position{line: 947, col: 56, offset: 29929},
											expr: &charClassMatcher{
												pos:        position{line: 947, col: 56, offset: 29929},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 945, col: 32, offset: 29864},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
							},
						},
					},
					&charClassMatcher{
						pos:        position{line: 1797, col: 5, offset: 59158},
						val:        "[^\\r\\n *]",
						chars:      []rune{'\r', '\n', ' ', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1798, col: 7, offset: 59263},
						run: (*parser).callonSingleQuoteBoldTextElement214,
						expr: &seqExpr{
							pos: position{line: 1798, col: 7, offset: 59263},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1798, col: 7, offset: 59263},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&actionExpr{
									pos: position{line: 2801, col: 14, offset: 92593},
									run: (*parser).callonSingleQuoteBoldTextElement217,
									expr: &oneOrMoreExpr{
										pos: position{line: 2801, col: 14, offset: 92593},
										expr: &charClassMatcher{
											pos:        position{line: 2801, col: 14, offset: 92593},
											val:        "[0-9\\pL]",
											ranges:     []rune{'0', '9'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteBoldText",
			pos:  position{line: 1785, col: 1, offset: 58801},
			expr: &actionExpr{
				pos: position{line: 1786, col: 5, offset: 58841},
				run: (*parser).callonQuotedTextInSingleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1786, col: 5, offset: 58841},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1786, col: 5, offset: 58841},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1786, col: 16, offset: 58852},
								expr: &ruleRefExpr{
									pos:  position{line: 1786, col: 17, offset: 58853},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1787, col: 5, offset: 58879},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1788, col: 9, offset: 58894},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1788, col: 9, offset: 58894},
										name: "DoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1789, col: 11, offset: 58924},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1790, col: 11, offset: 58945},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1791, col: 11, offset: 58969},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1792, col: 11, offset: 58990},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1793, col: 11, offset: 59014},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1802, col: 1, offset: 59438},
			expr: &choiceExpr{
				pos: position{line: 1803, col: 5, offset: 59462},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1803, col: 5, offset: 59462},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1803, col: 5, offset: 59462},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1803, col: 5, offset: 59462},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1684, col: 25, offset: 55764},
										run: (*parser).callonEscapedBoldText5,
										expr: &seqExpr{
											pos: position{line: 1684, col: 25, offset: 55764},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1684, col: 25, offset: 55764},
													val:        "\\\\",
													ignoreCase: false,
													want:       "\"\\\\\\\\\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1684, col: 30, offset: 55769},
													expr: &litMatcher{
														pos:        position{line: 1684, col: 30, offset: 55769},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1803, col: 40, offset: 59497},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1803, col: 45, offset: 59502},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1803, col: 55, offset: 59512},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1803, col: 84, offset: 59541},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1805, col: 9, offset: 59698},
						run: (*parser).callonEscapedBoldText14,
						expr: &seqExpr{
							pos: position{line: 1805, col: 9, offset: 59698},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1805, col: 9, offset: 59698},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1680, col: 25, offset: 55691},
										run: (*parser).callonEscapedBoldText17,
										expr: &oneOrMoreExpr{
											pos: position{line: 1680, col: 25, offset: 55691},
											expr: &litMatcher{
												pos:        position{line: 1680, col: 25, offset: 55691},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1805, col: 44, offset: 59733},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1805, col: 49, offset: 59738},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1805, col: 59, offset: 59748},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1805, col: 88, offset: 59777},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1808, col: 9, offset: 59977},
						run: (*parser).callonEscapedBoldText24,
						expr: &seqExpr{
							pos: position{line: 1808, col: 9, offset: 59977},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1808, col: 9, offset: 59977},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1680, col: 25, offset: 55691},
										run: (*parser).callonEscapedBoldText27,
										expr: &oneOrMoreExpr{
											pos: position{line: 1680, col: 25, offset: 55691},
											expr: &litMatcher{
												pos:        position{line: 1680, col: 25, offset: 55691},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1808, col: 44, offset: 60012},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1808, col: 48, offset: 60016},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1808, col: 58, offset: 60026},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1808, col: 87, offset: 60055},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1816, col: 1, offset: 60353},
			expr: &choiceExpr{
				pos: position{line: 1816, col: 15, offset: 60367},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1816, col: 15, offset: 60367},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1816, col: 39, offset: 60391},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1830, col: 1, offset: 60719},
			expr: &actionExpr{
				pos: position{line: 1831, col: 5, offset: 60749},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1831, col: 5, offset: 60749},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1828, col: 35, offset: 60713},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1832, col: 5, offset: 60785},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1832, col: 15, offset: 60795},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1828, col: 35, offset: 60713},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1837, col: 1, offset: 61003},
			expr: &oneOrMoreExpr{
				pos: position{line: 1837, col: 34, offset: 61036},
				expr: &ruleRefExpr{
					pos:  position{line: 1837, col: 34, offset: 61036},
					name: "DoubleQuoteItalicTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1839, col: 1, offset: 61068},
			expr: &actionExpr{
				pos: position{line: 1840, col: 5, offset: 61105},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 1840, col: 5, offset: 61105},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1840, col: 5, offset: 61105},
							expr: &litMatcher{
								pos:        position{line: 1828, col: 35, offset: 60713},
								val:        "__",
								ignoreCase: false,
								want:       "\"__\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1841, col: 5, offset: 61141},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1842, col: 9, offset: 61159},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1821, col: 5, offset: 60465},
										run: (*parser).callonDoubleQuoteItalicTextElement7,
										expr: &seqExpr{
											pos: position{line: 1821, col: 5, offset: 60465},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 1821, col: 5, offset: 60465},
													expr: &charClassMatcher{
														pos:        position{line: 1821, col: 5, offset: 60465},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 1821, col: 15, offset: 60475},
													expr: &choiceExpr{
														pos: position{line: 1821, col: 17, offset: 60477},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2878, col: 10, offset: 95044},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2878, col: 16, offset: 95050},
																run: (*parser).callonDoubleQuoteItalicTextElement14,
																expr: &litMatcher{
																	pos:        position{line: 2878, col: 16, offset: 95050},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
															&litMatcher{
																pos:        position{line: 1818, col: 24, offset: 60437},
																val:        "_",
																ignoreCase: false,
																want:       "\"_\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2882, col: 11, offset: 95109},
										run: (*parser).callonDoubleQuoteItalicTextElement17,
										expr: &oneOrMoreExpr{
											pos: position{line: 2882, col: 11, offset: 95109},
											expr: &charClassMatcher{
												pos:        position{line: 2882, col: 12, offset: 95110},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&seqExpr{
										pos: position{line: 1844, col: 11, offset: 61234},
										exprs: []interface{}{
											&choiceExpr{
												pos: position{line: 2886, col: 12, offset: 95178},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2886, col: 12, offset: 95178},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
													&litMatcher{
														pos:        position{line: 2886, col: 19, offset: 95185},
														val:        "\r\n",
														ignoreCase: false,
														want:       "\"\\r\\n\"",
													},
													&actionExpr{
														pos: position{line: 2886, col: 28, offset: 95194},
														run: (*parser).callonDoubleQuoteItalicTextElement24,
														expr: &litMatcher{
															pos:        position{line: 2886, col: 28, offset: 95194},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1844, col: 19, offset: 61242},
												expr: &choiceExpr{
													pos: position{line: 2886, col: 12, offset: 95178},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2886, col: 12, offset: 95178},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2886, col: 19, offset: 95185},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&actionExpr{
															pos: position{line: 2886, col: 28, offset: 95194},
															run: (*parser).callonDoubleQuoteItalicTextElement30,
															expr: &litMatcher{
																pos:        position{line: 2886, col: 28, offset: 95194},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 449, col: 5, offset: 14443},
										run: (*parser).callonDoubleQuoteItalicTextElement32,
										expr: &seqExpr{
											pos: position{line: 449, col: 5, offset: 14443},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 449, col: 5, offset: 14443},
													run: (*parser).callonDoubleQuoteItalicTextElement34,
												},
												&labeledExpr{
													pos:   position{line: 452, col: 5, offset: 14507},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 452, col: 14, offset: 14516},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 463, col: 25, offset: 14978},
																run: (*parser).callonDoubleQuoteItalicTextElement37,
																expr: &seqExpr{
																	pos: position{line: 463, col: 25, offset: 14978},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 463, col: 25, offset: 14978},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 463, col: 37, offset: 14990},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 118, col: 18, offset: 3399},
																				run: (*parser).callonDoubleQuoteItalicTextElement41,
																				expr: &seqExpr{
																					pos: position{line: 118, col: 18, offset: 3399},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 118, col: 18, offset: 3399},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 118, col: 28, offset: 3409},
																							expr: &charClassMatcher{
																								pos:        position{line: 118, col: 29, offset: 3410},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 463, col: 56, offset: 15009},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 463, col: 62, offset: 15015},
																				expr: &actionExpr{
																					pos: position{line: 471, col: 17, offset: 15278},
																					run: (*parser).callonDoubleQuoteItalicTextElement48,
																					expr: &seqExpr{
																						pos: position{line: 471, col: 17, offset: 15278},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 471, col: 17, offset: 15278},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 471, col: 21, offset: 15282},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 471, col: 28, offset: 15289},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 471, col: 28, offset: 15289},
																											run: (*parser).callonDoubleQuoteItalicTextElement53,
																											expr: &charClassMatcher{
																												pos:        position{line: 471, col: 28, offset: 15289},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 473, col: 9, offset: 15343},
																											run: (*parser).callonDoubleQuoteItalicTextElement55,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 473, col: 9, offset: 15343},
																												expr: &charClassMatcher{
																													pos:        position{line: 473, col: 9, offset: 15343},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 463, col: 78, offset: 15031},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 467, col: 25, offset: 15133},
																run: (*parser).callonDoubleQuoteItalicTextElement59,
																expr: &seqExpr{
																	pos: position{line: 467, col: 25, offset: 15133},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 467, col: 25, offset: 15133},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 467, col: 38, offset: 15146},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 118, col: 18, offset: 3399},
																				run: (*parser).callonDoubleQuoteItalicTextElement63,
																				expr: &seqExpr{
																					pos: position{line: 118, col: 18, offset: 3399},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 118, col: 18, offset: 3399},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 118, col: 28, offset: 3409},
																							expr: &charClassMatcher{
																								pos:        position{line: 118, col: 29, offset: 3410},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 467, col: 57, offset: 15165},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 467, col: 63, offset: 15171},
																				expr: &actionExpr{
																					pos: position{line: 471, col: 17, offset: 15278},
																					run: (*parser).callonDoubleQuoteItalicTextElement70,
																					expr: &seqExpr{
																						pos: position{line: 471, col: 17, offset: 15278},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 471, col: 17, offset: 15278},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 471, col: 21, offset: 15282},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 471, col: 28, offset: 15289},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 471, col: 28, offset: 15289},
																											run: (*parser).callonDoubleQuoteItalicTextElement75,
																											expr: &charClassMatcher{
																												pos:        position{line: 471, col: 28, offset: 15289},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 473, col: 9, offset: 15343},
																											run: (*parser).callonDoubleQuoteItalicTextElement77,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 473, col: 9, offset: 15343},
																												expr: &charClassMatcher{
																													pos:        position{line: 473, col: 9, offset: 15343},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 467, col: 79, offset: 15187},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 456, col: 31, offset: 14633},
																run: (*parser).callonDoubleQuoteItalicTextElement81,
																expr: &seqExpr{
																	pos: position{line: 456, col: 31, offset: 14633},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 456, col: 31, offset: 14633},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 456, col: 35, offset: 14637},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 118, col: 18, offset: 3399},
																				run: (*parser).callonDoubleQuoteItalicTextElement85,
																				expr: &seqExpr{
																					pos: position{line: 118, col: 18, offset: 3399},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 118, col: 18, offset: 3399},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 118, col: 28, offset: 3409},
																							expr: &charClassMatcher{
																								pos:        position{line: 118, col: 29, offset: 3410},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 456, col: 54, offset: 14656},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2587, col: 5, offset: 86026},
										run: (*parser).callonDoubleQuoteItalicTextElement91,
										expr: &seqExpr{
											pos: position{line: 2587, col: 5, offset: 86026},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2587, col: 5, offset: 86026},
													run: (*parser).callonDoubleQuoteItalicTextElement93,
												},
												&labeledExpr{
													pos:   position{line: 2590, col: 5, offset: 86097},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2592, col: 9, offset: 86195},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2592, col: 9, offset: 86195},
																run: (*parser).callonDoubleQuoteItalicTextElement96,
																expr: &choiceExpr{
																	pos: position{line: 491, col: 27, offset: 15997},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 491, col: 27, offset: 15997},
																			run: (*parser).callonDoubleQuoteItalicTextElement98,
																			expr: &seqExpr{
																				pos: position{line: 491, col: 27, offset: 15997},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 491, col: 27, offset: 15997},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 491, col: 32, offset: 16002},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2866, col: 7, offset: 94768},
																							run: (*parser).callonDoubleQuoteItalicTextElement102,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2866, col: 7, offset: 94768},
																								expr: &charClassMatcher{
																									pos:        position{line: 2866, col: 7, offset: 94768},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 491, col: 40, offset: 16010},
																						expr: &choiceExpr{
																							pos: position{line: 2878, col: 10, offset: 95044},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2878, col: 10, offset: 95044},
																									val:        " ",
																									ignoreCase: false,
																									want:       "\" \"",
																								},
																								&actionExpr{
																									pos: position{line: 2878, col: 16, offset: 95050},
																									run: (*parser).callonDoubleQuoteItalicTextElement108,
																									expr: &litMatcher{
																										pos:        position{line: 2878, col: 16, offset: 95050},
																										val:        "\t",
																										ignoreCase: false,
																										want:       "\"\\t\"",
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 491, col: 47, offset: 16017},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 491, col: 51, offset: 16021},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 501, col: 24, offset: 16434},
																							expr: &choiceExpr{
																								pos: position{line: 502, col: 5, offset: 16440},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 502, col: 6, offset: 16441},
																										run: (*parser).callonDoubleQuoteItalicTextElement114,
																										expr: &seqExpr{
																											pos: position{line: 502, col: 6, offset: 16441},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 502, col: 6, offset: 16441},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 502, col: 14, offset: 16449},
																													expr: &charClassMatcher{
																														pos:        position{line: 502, col: 14, offset: 16449},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 449, col: 5, offset: 14443},
																										run: (*parser).callonDoubleQuoteItalicTextElement119,
																										expr: &seqExpr{
																											pos: position{line: 449, col: 5, offset: 14443},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 449, col: 5, offset: 14443},
																													run: (*parser).callonDoubleQuoteItalicTextElement121,
																												},
																												&labeledExpr{
																													pos:   position{line: 452, col: 5, offset: 14507},
																													label: "element",
																													expr: &choiceExpr{
																														pos: position{line: 452, col: 14, offset: 14516},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 463, col: 25, offset: 14978},
																																run: (*parser).callonDoubleQuoteItalicTextElement124,
																																expr: &seqExpr{
																																	pos: position{line: 463, col: 25, offset: 14978},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 463, col: 25, offset: 14978},
																																			val:        "{counter:",
																																			ignoreCase: false,
																																			want:       "\"{counter:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 463, col: 37, offset: 14990},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 118, col: 18, offset: 3399},
																																				run: (*parser).callonDoubleQuoteItalicTextElement128,
																																				expr: &seqExpr{
																																					pos: position{line: 118, col: 18, offset: 3399},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 118, col: 18, offset: 3399},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 118, col: 28, offset: 3409},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 118, col: 29, offset: 3410},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 463, col: 56, offset: 15009},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 463, col: 62, offset: 15015},
																																				expr: &actionExpr{
																																					pos: position{line: 471, col: 17, offset: 15278},
																																					run: (*parser).callonDoubleQuoteItalicTextElement135,
																																					expr: &seqExpr{
																																						pos: position{line: 471, col: 17, offset: 15278},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 471, col: 17, offset: 15278},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 471, col: 21, offset: 15282},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 471, col: 28, offset: 15289},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 471, col: 28, offset: 15289},
																																											run: (*parser).callonDoubleQuoteItalicTextElement140,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 471, col: 28, offset: 15289},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 473, col: 9, offset: 15343},
																																											run: (*parser).callonDoubleQuoteItalicTextElement142,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 473, col: 9, offset: 15343},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 473, col: 9, offset: 15343},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 463, col: 78, offset: 15031},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 467, col: 25, offset: 15133},
																																run: (*parser).callonDoubleQuoteItalicTextElement146,
																																expr: &seqExpr{
																																	pos: position{line: 467, col: 25, offset: 15133},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 467, col: 25, offset: 15133},
																																			val:        "{counter2:",
																																			ignoreCase: false,
																																			want:       "\"{counter2:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 467, col: 38, offset: 15146},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 118, col: 18, offset: 3399},
																																				run: (*parser).callonDoubleQuoteItalicTextElement150,
																																				expr: &seqExpr{
																																					pos: position{line: 118, col: 18, offset: 3399},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 118, col: 18, offset: 3399},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 118, col: 28, offset: 3409},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 118, col: 29, offset: 3410},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 467, col: 57, offset: 15165},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 467, col: 63, offset: 15171},
																																				expr: &actionExpr{
																																					pos: position{line: 471, col: 17, offset: 15278},
																																					run: (*parser).callonDoubleQuoteItalicTextElement157,
																																					expr: &seqExpr{
																																						pos: position{line: 471, col: 17, offset: 15278},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 471, col: 17, offset: 15278},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 471, col: 21, offset: 15282},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 471, col: 28, offset: 15289},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 471, col: 28, offset: 15289},
																																											run: (*parser).callonDoubleQuoteItalicTextElement162,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 471, col: 28, offset: 15289},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 473, col: 9, offset: 15343},
																																											run: (*parser).callonDoubleQuoteItalicTextElement164,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 473, col: 9, offset: 15343},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 473, col: 9, offset: 15343},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 467, col: 79, offset: 15187},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 456, col: 31, offset: 14633},
																																run: (*parser).callonDoubleQuoteItalicTextElement168,
																																expr: &seqExpr{
																																	pos: position{line: 456, col: 31, offset: 14633},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 456, col: 31, offset: 14633},
																																			val:        "{",
																																			ignoreCase: false,
																																			want:       "\"{\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 456, col: 35, offset: 14637},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 118, col: 18, offset: 3399},
																																				run: (*parser).callonDoubleQuoteItalicTextElement172,
																																				expr: &seqExpr{
																																					pos: position{line: 118, col: 18, offset: 3399},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 118, col: 18, offset: 3399},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 118, col: 28, offset: 3409},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 118, col: 29, offset: 3410},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 456, col: 54, offset: 14656},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 506, col: 8, offset: 16673},
																										run: (*parser).callonDoubleQuoteItalicTextElement178,
																										expr: &litMatcher{
																											pos:        position{line: 506, col: 8, offset: 16673},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 491, col: 79, offset: 16049},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 493, col: 9, offset: 16122},
																			run: (*parser).callonDoubleQuoteItalicTextElement181,
																			expr: &seqExpr{
																				pos: position{line: 493, col: 9, offset: 16122},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 493, col: 9, offset: 16122},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 493, col: 14, offset: 16127},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2866, col: 7, offset: 94768},
																							run: (*parser).callonDoubleQuoteItalicTextElement185,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2866, col: 7, offset: 94768},
																								expr: &charClassMatcher{
																									pos:        position{line: 2866, col: 7, offset: 94768},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 493, col: 22, offset: 16135},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2595, col: 11, offset: 86299},
																run: (*parser).callonDoubleQuoteItalicTextElement189,
																expr: &charClassMatcher{
																	pos:        position{line: 2595, col: 12, offset: 86300},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2620, col: 15, offset: 87267},
										run: (*parser).callonDoubleQuoteItalicTextElement191,
										expr: &litMatcher{
											pos:        position{line: 2620, col: 15, offset: 87267},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&actionExpr{
										pos: position{line: 2626, col: 14, offset: 87382},
										run: (*parser).callonDoubleQuoteItalicTextElement193,
										expr: &litMatcher{
											pos:        position{line: 2626, col: 14, offset: 87382},
											val:        "(C)",
											ignoreCase: false,
											want:       "\"(C)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2630, col: 14, offset: 87458},
										run: (*parser).callonDoubleQuoteItalicTextElement195,
										expr: &litMatcher{
											pos:        position{line: 2630, col: 14, offset: 87458},
											val:        "(TM)",
											ignoreCase: false,
											want:       "\"(TM)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2634, col: 15, offset: 87536},
										run: (*parser).callonDoubleQuoteItalicTextElement197,
										expr: &litMatcher{
											pos:        position{line: 2634, col: 15, offset: 87536},
											val:        "(R)",
											ignoreCase: false,
											want:       "\"(R)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2638, col: 13, offset: 87611},
										run: (*parser).callonDoubleQuoteItalicTextElement199,
										expr: &litMatcher{
											pos:        position{line: 2638, col: 13, offset: 87611},
											val:        "...",
											ignoreCase: false,
											want:       "\"...\"",
										},
									},
									&actionExpr{
										pos: position{line: 2646, col: 22, offset: 87917},
										run: (*parser).callonDoubleQuoteItalicTextElement201,
										expr: &seqExpr{
											pos: position{line: 2646, col: 22, offset: 87917},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2797, col: 13, offset: 92519},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 2646, col: 31, offset: 87926},
													val:        "'",
													ignoreCase: false,
													want:       "\"'\"",
												},
												&andExpr{
													pos: position{line: 2646, col: 35, offset: 87930},
													expr: &charClassMatcher{
														pos:        position{line: 2646, col: 36, offset: 87931},
														val:        "[\\pL]",
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1848, col: 11, offset: 61371},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1849, col: 11, offset: 61393},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1850, col: 11, offset: 61416},
										name: "QuotedTextInDoubleQuoteItalicText",
									},
									&actionExpr{
										pos: position{line: 947, col: 23, offset: 29896},
										run: (*parser).callonDoubleQuoteItalicTextElement210,
										expr: &seqExpr{
											pos: position{line: 947, col: 23, offset: 29896},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 945, col: 32, offset: 29864},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
												&labeledExpr{
													pos:   position{line: 947, col: 51, offset: 29924},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 947, col: 56, offset: 29929},
														run: (*parser).callonDoubleQuoteItalicTextElement214,
														expr: &oneOrMoreExpr{
															pos: position{line: 947, col: 56, offset: 29929},
															expr: &charClassMatcher{
																pos:        position{line: 947, col: 56, offset: 29929},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 945, col: 32, offset: 29864},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
											},
										},
									},
									&charClassMatcher{
										pos:        position{line: 1868, col: 5, offset: 61927},
										val:        "[^\\r\\n_]",
										chars:      []rune{'\r', '\n', '_'},
										ignoreCase: false,
										inverted:   true,
									},
									&actionExpr{
										pos: position{line: 1869, col: 7, offset: 62026},
										run: (*parser).callonDoubleQuoteItalicTextElement219,
										expr: &seqExpr{
											pos: position{line: 1869, col: 7, offset: 62026},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1869, col: 7, offset: 62026},
													val:        "__",
													ignoreCase: false,
													want:       "\"__\"",
												},
												&actionExpr{
													pos: position{line: 2801, col: 14, offset: 92593},
													run: (*parser).callonDoubleQuoteItalicTextElement222,
													expr: &oneOrMoreExpr{
														pos: position{line: 2801, col: 14, offset: 92593},
														expr: &charClassMatcher{
															pos:        position{line: 2801, col: 14, offset: 92593},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteItalicText",
			pos:  position{line: 1856, col: 1, offset: 61574},
			expr: &actionExpr{
				pos: position{line: 1857, col: 5, offset: 61616},
				run: (*parser).callonQuotedTextInDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1857, col: 5, offset: 61616},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1857, col: 5, offset: 61616},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1857, col: 16, offset: 61627},
								expr: &ruleRefExpr{
									pos:  position{line: 1857, col: 17, offset: 61628},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1858, col: 5, offset: 61654},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1858, col: 11, offset: 61660},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1858, col: 11, offset: 61660},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1859, col: 11, offset: 61692},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1860, col: 11, offset: 61711},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1861, col: 11, offset: 61732},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1862, col: 11, offset: 61756},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1863, col: 11, offset: 61780},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1880, col: 1, offset: 62402},
			expr: &actionExpr{
				pos: position{line: 1881, col: 5, offset: 62432},
				run: (*parser).callonSingleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1881, col: 5, offset: 62432},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1876, col: 40, offset: 62353},
							val:        "_",
							ignoreCase: false,
							want:       "\"_\"",
						},
						&labeledExpr{
							pos:   position{line: 1882, col: 5, offset: 62472},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1882, col: 15, offset: 62482},
								name: "SingleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1878, col: 38, offset: 62396},
							val:        "_",
							ignoreCase: false,
							want:       "\"_\"",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1887, col: 1, offset: 62649},
			expr: &actionExpr{
				pos: position{line: 1888, col: 5, offset: 62687},
				run: (*parser).callonSingleQuoteItalicTextElements1,
				expr: &seqExpr{
					pos: position{line: 1888, col: 5, offset: 62687},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1888, col: 5, offset: 62687},
							expr: &notExpr{
								pos: position{line: 2890, col: 8, offset: 95285},
								expr: &anyMatcher{
									line: 2890, col: 9, offset: 95286,
								},
							},
						},
						&notExpr{
							pos: position{line: 1888, col: 10, offset: 62692},
							expr: &choiceExpr{
								pos: position{line: 2878, col: 10, offset: 95044},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 2878, col: 10, offset: 95044},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
									&actionExpr{
										pos: position{line: 2878, col: 16, offset: 95050},
										run: (*parser).callonSingleQuoteItalicTextElements9,
										expr: &litMatcher{
											pos:        position{line: 2878, col: 16, offset: 95050},
											val:        "\t",
											ignoreCase: false,
											want:       "\"\\t\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1889, col: 5, offset: 62731},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1889, col: 14, offset: 62740},
								expr: &ruleRefExpr{
									pos:  position{line: 1889, col: 15, offset: 62741},
									name: "SingleQuoteItalicTextElement",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1890, col: 5, offset: 62776},
							run: (*parser).callonSingleQuoteItalicTextElements14,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1896, col: 1, offset: 62917},
			expr: &choiceExpr{
				pos: position{line: 1897, col: 5, offset: 62954},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1821, col: 5, offset: 60465},
						run: (*parser).callonSingleQuoteItalicTextElement2,
						expr: &seqExpr{
							pos: position{line: 1821, col: 5, offset: 60465},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1821, col: 5, offset: 60465},
									expr: &charClassMatcher{
										pos:        position{line: 1821, col: 5, offset: 60465},
										val:        "[0-9\\pL]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1821, col: 15, offset: 60475},
									expr: &choiceExpr{
										pos: position{line: 1821, col: 17, offset: 60477},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2878, col: 10, offset: 95044},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
											&actionExpr{
												pos: position{line: 2878, col: 16, offset: 95050},
												run: (*parser).callonSingleQuoteItalicTextElement9,
												expr: &litMatcher{
													pos:        position{line: 2878, col: 16, offset: 95050},
													val:        "\t",
													ignoreCase: false,
													want:       "\"\\t\"",
												},
											},
											&litMatcher{
												pos:        position{line: 1818, col: 24, offset: 60437},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2882, col: 11, offset: 95109},
						run: (*parser).callonSingleQuoteItalicTextElement12,
						expr: &oneOrMoreExpr{
							pos: position{line: 2882, col: 11, offset: 95109},
							expr: &charClassMatcher{
								pos:        position{line: 2882, col: 12, offset: 95110},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
					&seqExpr{
						pos: position{line: 1899, col: 7, offset: 62988},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 2886, col: 12, offset: 95178},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 2886, col: 12, offset: 95178},
										val:        "\n",
										ignoreCase: false,
										want:       "\"\\n\"",
									},
									&litMatcher{
										pos:        position{line: 2886, col: 19, offset: 95185},
										val:        "\r\n",
										ignoreCase: false,
										want:       "\"\\r\\n\"",
									},
									&actionExpr{
										pos: position{line: 2886, col: 28, offset: 95194},
										run: (*parser).callonSingleQuoteItalicTextElement19,
										expr: &litMatcher{
											pos:        position{line: 2886, col: 28, offset: 95194},
											val:        "\r",
											ignoreCase: false,
											want:       "\"\\r\"",
										},
									},
								},
							},
							&notExpr{
								pos: position{line: 1899, col: 15, offset: 62996},
								expr: &choiceExpr{
									pos: position{line: 2886, col: 12, offset: 95178},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 2886, col: 12, offset: 95178},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
										&litMatcher{
											pos:        position{line: 2886, col: 19, offset: 95185},
											val:        "\r\n",
											ignoreCase: false,
											want:       "\"\\r\\n\"",
										},
										&actionExpr{
											pos: position{line: 2886, col: 28, offset: 95194},
											run: (*parser).callonSingleQuoteItalicTextElement25,
											expr: &litMatcher{
												pos:        position{line: 2886, col: 28, offset: 95194},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 449, col: 5, offset: 14443},
						run: (*parser).callonSingleQuoteItalicTextElement27,
						expr: &seqExpr{
							pos: position{line: 449, col: 5, offset: 14443},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 449, col: 5, offset: 14443},
									run: (*parser).callonSingleQuoteItalicTextElement29,
								},
								&labeledExpr{
									pos:   position{line: 452, col: 5, offset: 14507},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 452, col: 14, offset: 14516},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 463, col: 25, offset: 14978},
												run: (*parser).callonSingleQuoteItalicTextElement32,
												expr: &seqExpr{
													pos: position{line: 463, col: 25, offset: 14978},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 463, col: 25, offset: 14978},
															val:        "{counter:",
															ignoreCase: false,
															want:       "\"{counter:\"",
														},
														&labeledExpr{
															pos:   position{line: 463, col: 37, offset: 14990},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 118, col: 18, offset: 3399},
																run: (*parser).callonSingleQuoteItalicTextElement36,
																expr: &seqExpr{
																	pos: position{line: 118, col: 18, offset: 3399},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 118, col: 18, offset: 3399},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 118, col: 28, offset: 3409},
																			expr: &charClassMatcher{
																				pos:        position{line: 118, col: 29, offset: 3410},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 463, col: 56, offset: 15009},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 463, col: 62, offset: 15015},
																expr: &actionExpr{
																	pos: position{line: 471, col: 17, offset: 15278},
																	run: (*parser).callonSingleQuoteItalicTextElement43,
																	expr: &seqExpr{
																		pos: position{line: 471, col: 17, offset: 15278},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 471, col: 17, offset: 15278},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 471, col: 21, offset: 15282},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 471, col: 28, offset: 15289},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 471, col: 28, offset: 15289},
																							run: (*parser).callonSingleQuoteItalicTextElement48,
																							expr: &charClassMatcher{
																								pos:        position{line: 471, col: 28, offset: 15289},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 473, col: 9, offset: 15343},
																							run: (*parser).callonSingleQuoteItalicTextElement50,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 473, col: 9, offset: 15343},
																								expr: &charClassMatcher{
																									pos:        position{line: 473, col: 9, offset: 15343},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 463, col: 78, offset: 15031},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 467, col: 25, offset: 15133},
												run: (*parser).callonSingleQuoteItalicTextElement54,
												expr: &seqExpr{
													pos: position{line: 467, col: 25, offset: 15133},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 467, col: 25, offset: 15133},
															val:        "{counter2:",
															ignoreCase: false,
															want:       "\"{counter2:\"",
														},
														&labeledExpr{
															pos:   position{line: 467, col: 38, offset: 15146},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 118, col: 18, offset: 3399},
																run: (*parser).callonSingleQuoteItalicTextElement58,
																expr: &seqExpr{
																	pos: position{line: 118, col: 18, offset: 3399},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 118, col: 18, offset: 3399},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 118, col: 28, offset: 3409},
																			expr: &charClassMatcher{
																				pos:        position{line: 118, col: 29, offset: 3410},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 467, col: 57, offset: 15165},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 467, col: 63, offset: 15171},
																expr: &actionExpr{
																	pos: position{line: 471, col: 17, offset: 15278},
																	run: (*parser).callonSingleQuoteItalicTextElement65,
																	expr: &seqExpr{
																		pos: position{line: 471, col: 17, offset: 15278},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 471, col: 17, offset: 15278},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 471, col: 21, offset: 15282},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 471, col: 28, offset: 15289},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 471, col: 28, offset: 15289},
																							run: (*parser).callonSingleQuoteItalicTextElement70,
																							expr: &charClassMatcher{
																								pos:        position{line: 471, col: 28, offset: 15289},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 473, col: 9, offset: 15343},
																							run: (*parser).callonSingleQuoteItalicTextElement72,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 473, col: 9, offset: 15343},
																								expr: &charClassMatcher{
																									pos:        position{line: 473, col: 9, offset: 15343},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 467, col: 79, offset: 15187},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 456, col: 31, offset: 14633},
												run: (*parser).callonSingleQuoteItalicTextElement76,
												expr: &seqExpr{
													pos: position{line: 456, col: 31, offset: 14633},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 456, col: 31, offset: 14633},
															val:        "{",
															ignoreCase: false,
															want:       "\"{\"",
														},
														&labeledExpr{
															pos:   position{line: 456, col: 35, offset: 14637},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 118, col: 18, offset: 3399},
																run: (*parser).callonSingleQuoteItalicTextElement80,
																expr: &seqExpr{
																	pos: position{line: 118, col: 18, offset: 3399},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 118, col: 18, offset: 3399},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 118, col: 28, offset: 3409},
																			expr: &charClassMatcher{
																				pos:        position{line: 118, col: 29, offset: 3410},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 456, col: 54, offset: 14656},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2587, col: 5, offset: 86026},
						run: (*parser).callonSingleQuoteItalicTextElement86,
						expr: &seqExpr{
							pos: position{line: 2587, col: 5, offset: 86026},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 2587, col: 5, offset: 86026},
									run: (*parser).callonSingleQuoteItalicTextElement88,
								},
								&labeledExpr{
									pos:   position{line: 2590, col: 5, offset: 86097},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 2592, col: 9, offset: 86195},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 2592, col: 9, offset: 86195},
												run: (*parser).callonSingleQuoteItalicTextElement91,
												expr: &choiceExpr{
													pos: position{line: 491, col: 27, offset: 15997},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 491, col: 27, offset: 15997},
															run: (*parser).callonSingleQuoteItalicTextElement93,
															expr: &seqExpr{
																pos: position{line: 491, col: 27, offset: 15997},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 491, col: 27, offset: 15997},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 491, col: 32, offset: 16002},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 2866, col: 7, offset: 94768},
																			run: (*parser).callonSingleQuoteItalicTextElement97,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2866, col: 7, offset: 94768},
																				expr: &charClassMatcher{
																					pos:        position{line: 2866, col: 7, offset: 94768},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 491, col: 40, offset: 16010},
																		expr: &choiceExpr{
																			pos: position{line: 2878, col: 10, offset: 95044},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2878, col: 10, offset: 95044},
																					val:        " ",
																					ignoreCase: false,
																					want:       "\" \"",
																				},
																				&actionExpr{
																					pos: position{line: 2878, col: 16, offset: 95050},
																					run: (*parser).callonSingleQuoteItalicTextElement103,
																					expr: &litMatcher{
																						pos:        position{line: 2878, col: 16, offset: 95050},
																						val:        "\t",
																						ignoreCase: false,
																						want:       "\"\\t\"",
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 491, col: 47, offset: 16017},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 491, col: 51, offset: 16021},
																		label: "label",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 501, col: 24, offset: 16434},
																			expr: &choiceExpr{
																				pos: position{line: 502, col: 5, offset: 16440},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 502, col: 6, offset: 16441},
																						run: (*parser).callonSingleQuoteItalicTextElement109,
																						expr: &seqExpr{
																							pos: position{line: 502, col: 6, offset: 16441},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 502, col: 6, offset: 16441},
																									val:        "[0-9\\pL]",
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&oneOrMoreExpr{
																									pos: position{line: 502, col: 14, offset: 16449},
																									expr: &charClassMatcher{
																										pos:        position{line: 502, col: 14, offset: 16449},
																										val:        "[^\\r\\n{<>]",
																										chars:      []rune{'\r', '\n', '{', '<', '>'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 449, col: 5, offset: 14443},
																						run: (*parser).callonSingleQuoteItalicTextElement114,
																						expr: &seqExpr{
																							pos: position{line: 449, col: 5, offset: 14443},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 449, col: 5, offset: 14443},
																									run: (*parser).callonSingleQuoteItalicTextElement116,
																								},
																								&labeledExpr{
																									pos:   position{line: 452, col: 5, offset: 14507},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 452, col: 14, offset: 14516},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 463, col: 25, offset: 14978},
																												run: (*parser).callonSingleQuoteItalicTextElement119,
																												expr: &seqExpr{
																													pos: position{line: 463, col: 25, offset: 14978},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 463, col: 25, offset: 14978},
																															val:        "{counter:",
																															ignoreCase: false,
																															want:       "\"{counter:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 463, col: 37, offset: 14990},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 118, col: 18, offset: 3399},
																																run: (*parser).callonSingleQuoteItalicTextElement123,
																																expr: &seqExpr{
																																	pos: position{line: 118, col: 18, offset: 3399},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 118, col: 18, offset: 3399},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 118, col: 28, offset: 3409},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 118, col: 29, offset: 3410},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 463, col: 56, offset: 15009},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 463, col: 62, offset: 15015},
																																expr: &actionExpr{
																																	pos: position{line: 471, col: 17, offset: 15278},
																																	run: (*parser).callonSingleQuoteItalicTextElement130,
																																	expr: &seqExpr{
																																		pos: position{line: 471, col: 17, offset: 15278},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 471, col: 17, offset: 15278},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 471, col: 21, offset: 15282},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 471, col: 28, offset: 15289},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 471, col: 28, offset: 15289},
																																							run: (*parser).callonSingleQuoteItalicTextElement135,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 471, col: 28, offset: 15289},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 473, col: 9, offset: 15343},
																																							run: (*parser).callonSingleQuoteItalicTextElement137,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 473, col: 9, offset: 15343},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 473, col: 9, offset: 15343},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 463, col: 78, offset: 15031},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 467, col: 25, offset: 15133},
																												run: (*parser).callonSingleQuoteItalicTextElement141,
																												expr: &seqExpr{
																													pos: position{line: 467, col: 25, offset: 15133},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 467, col: 25, offset: 15133},
																															val:        "{counter2:",
																															ignoreCase: false,
																															want:       "\"{counter2:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 467, col: 38, offset: 15146},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 118, col: 18, offset: 3399},
																																run: (*parser).callonSingleQuoteItalicTextElement145,
																																expr: &seqExpr{
																																	pos: position{line: 118, col: 18, offset: 3399},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 118, col: 18, offset: 3399},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 118, col: 28, offset: 3409},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 118, col: 29, offset: 3410},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 467, col: 57, offset: 15165},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 467, col: 63, offset: 15171},
																																expr: &actionExpr{
																																	pos: position{line: 471, col: 17, offset: 15278},
																																	run: (*parser).callonSingleQuoteItalicTextElement152,
																																	expr: &seqExpr{
																																		pos: position{line: 471, col: 17, offset: 15278},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 471, col: 17, offset: 15278},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 471, col: 21, offset: 15282},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 471, col: 28, offset: 15289},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 471, col: 28, offset: 15289},
																																							run: (*parser).callonSingleQuoteItalicTextElement157,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 471, col: 28, offset: 15289},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 473, col: 9, offset: 15343},
																																							run: (*parser).callonSingleQuoteItalicTextElement159,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 473, col: 9, offset: 15343},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 473, col: 9, offset: 15343},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 467, col: 79, offset: 15187},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 456, col: 31, offset: 14633},
																												run: (*parser).callonSingleQuoteItalicTextElement163,
																												expr: &seqExpr{
																													pos: position{line: 456, col: 31, offset: 14633},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 456, col: 31, offset: 14633},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 456, col: 35, offset: 14637},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 118, col: 18, offset: 3399},
																																run: (*parser).callonSingleQuoteItalicTextElement167,
																																expr: &seqExpr{
																																	pos: position{line: 118, col: 18, offset: 3399},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 118, col: 18, offset: 3399},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 118, col: 28, offset: 3409},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 118, col: 29, offset: 3410},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 456, col: 54, offset: 14656},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 506, col: 8, offset: 16673},
																						run: (*parser).callonSingleQuoteItalicTextElement173,
																						expr: &litMatcher{
																							pos:        position{line: 506, col: 8, offset: 16673},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 491, col: 79, offset: 16049},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 493, col: 9, offset: 16122},
															run: (*parser).callonSingleQuoteItalicTextElement176,
															expr: &seqExpr{
																pos: position{line: 493, col: 9, offset: 16122},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 493, col: 9, offset: 16122},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 493, col: 14, offset: 16127},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 2866, col: 7, offset: 94768},
																			run: (*parser).callonSingleQuoteItalicTextElement180,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2866, col: 7, offset: 94768},
																				expr: &charClassMatcher{
																					pos:        position{line: 2866, col: 7, offset: 94768},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 493, col: 22, offset: 16135},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 2595, col: 11, offset: 86299},
												run: (*parser).callonSingleQuoteItalicTextElement184,
												expr: &charClassMatcher{
													pos:        position{line: 2595, col: 12, offset: 86300},
													val:        "[<>&]",
													chars:      []rune{'<', '>', '&'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2620, col: 15, offset: 87267},
						run: (*parser).callonSingleQuoteItalicTextElement186,
						expr: &litMatcher{
							pos:        position{line: 2620, col: 15, offset: 87267},
							val:        "`'",
							ignoreCase: false,
							want:       "\"`'\"",
						},
					},
					&actionExpr{
						pos: position{line: 2626, col: 14, offset: 87382},
						run: (*parser).callonSingleQuoteItalicTextElement188,
						expr: &litMatcher{
							pos:        position{line: 2626, col: 14, offset: 87382},
							val:        "(C)",
							ignoreCase: false,
							want:       "\"(C)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2630, col: 14, offset: 87458},
						run: (*parser).callonSingleQuoteItalicTextElement190,
						expr: &litMatcher{
							pos:        position{line: 2630, col: 14, offset: 87458},
							val:        "(TM)",
							ignoreCase: false,
							want:       "\"(TM)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2634, col: 15, offset: 87536},
						run: (*parser).callonSingleQuoteItalicTextElement192,
						expr: &litMatcher{
							pos:        position{line: 2634, col: 15, offset: 87536},
							val:        "(R)",
							ignoreCase: false,
							want:       "\"(R)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2638, col: 13, offset: 87611},
						run: (*parser).callonSingleQuoteItalicTextElement194,
						expr: &litMatcher{
							pos:        position{line: 2638, col: 13, offset: 87611},
							val:        "...",
							ignoreCase: false,
							want:       "\"...\"",
						},
					},
					&actionExpr{
						pos: position{line: 2646, col: 22, offset: 87917},
						run: (*parser).callonSingleQuoteItalicTextElement196,
						expr: &seqExpr{
							pos: position{line: 2646, col: 22, offset: 87917},
							exprs: []interface{}{
								&charClassMatcher{
									pos:        position{line: 2797, col: 13, offset: 92519},
									val:        "[0-9\\pL]",
									ranges:     []rune{'0', '9'},
									classes:    []*unicode.RangeTable{rangeTable("L")},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 2646, col: 31, offset: 87926},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&andExpr{
									pos: position{line: 2646, col: 35, offset: 87930},
									expr: &charClassMatcher{
										pos:        position{line: 2646, col: 36, offset: 87931},
										val:        "[\\pL]",
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1903, col: 7, offset: 63109},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1904, col: 7, offset: 63127},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1905, col: 7, offset: 63146},
						name: "QuotedTextInSingleQuoteItalicText",
					},
					&actionExpr{
						pos: position{line: 947, col: 23, offset: 29896},
						run: (*parser).callonSingleQuoteItalicTextElement205,
						expr: &seqExpr{
							pos: position{line: 947, col: 23, offset: 29896},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 945, col: 32, offset: 29864},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
								&labeledExpr{
									pos:   position{line: 947, col: 51, offset: 29924},
									label: "ref",
									expr: &actionExpr{
										pos: position{line: 947, col: 56, offset: 29929},
										run: (*parser).callonSingleQuoteItalicTextElement209,
										expr: &oneOrMoreExpr{
											pos: position{line: 947, col: 56, offset: 29929},
											expr: &charClassMatcher{
												pos:        position{line: 947, col: 56, offset: 29929},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 945, col: 32, offset: 29864},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
							},
						},
					},
					&charClassMatcher{
						pos:        position{line: 1921, col: 5, offset: 63603},
						val:        "[^\\r\\n _]",
						chars:      []rune{'\r', '\n', ' ', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1922, col: 7, offset: 63710},
						run: (*parser).callonSingleQuoteItalicTextElement214,
						expr: &seqExpr{
							pos: position{line: 1922, col: 7, offset: 63710},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1922, col: 7, offset: 63710},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&actionExpr{
									pos: position{line: 2801, col: 14, offset: 92593},
									run: (*parser).callonSingleQuoteItalicTextElement217,
									expr: &oneOrMoreExpr{
										pos: position{line: 2801, col: 14, offset: 92593},
										expr: &charClassMatcher{
											pos:        position{line: 2801, col: 14, offset: 92593},
											val:        "[0-9\\pL]",
											ranges:     []rune{'0', '9'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteItalicText",
			pos:  position{line: 1909, col: 1, offset: 63251},
			expr: &actionExpr{
				pos: position{line: 1910, col: 5, offset: 63292},
				run: (*parser).callonQuotedTextInSingleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1910, col: 5, offset: 63292},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1910, col: 5, offset: 63292},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1910, col: 16, offset: 63303},
								expr: &ruleRefExpr{
									pos:  position{line: 1910, col: 17, offset: 63304},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1911, col: 5, offset: 63330},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1911, col: 11, offset: 63336},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1911, col: 11, offset: 63336},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1912, col: 11, offset: 63355},
										name: "DoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1913, col: 11, offset: 63387},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1914, col: 11, offset: 63408},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1915, col: 11, offset: 63432},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1916, col: 11, offset: 63456},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1926, col: 1, offset: 63888},
			expr: &choiceExpr{
				pos: position{line: 1927, col: 5, offset: 63914},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1927, col: 5, offset: 63914},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1927, col: 5, offset: 63914},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1927, col: 5, offset: 63914},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1684, col: 25, offset: 55764},
										run: (*parser).callonEscapedItalicText5,
										expr: &seqExpr{
											pos: position{line: 1684, col: 25, offset: 55764},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1684, col: 25, offset: 55764},
													val:        "\\\\",
													ignoreCase: false,
													want:       "\"\\\\\\\\\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1684, col: 30, offset: 55769},
													expr: &litMatcher{
														pos:        position{line: 1684, col: 30, offset: 55769},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1927, col: 40, offset: 63949},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1927, col: 45, offset: 63954},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1927, col: 55, offset: 63964},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1927, col: 86, offset: 63995},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1929, col: 9, offset: 64152},
						run: (*parser).callonEscapedItalicText14,
						expr: &seqExpr{
							pos: position{line: 1929, col: 9, offset: 64152},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1929, col: 9, offset: 64152},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1680, col: 25, offset: 55691},
										run: (*parser).callonEscapedItalicText17,
										expr: &oneOrMoreExpr{
											pos: position{line: 1680, col: 25, offset: 55691},
											expr: &litMatcher{
												pos:        position{line: 1680, col: 25, offset: 55691},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1929, col: 44, offset: 64187},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1929, col: 49, offset: 64192},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1929, col: 59, offset: 64202},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1929, col: 90, offset: 64233},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1932, col: 9, offset: 64433},
						run: (*parser).callonEscapedItalicText24,
						expr: &seqExpr{
							pos: position{line: 1932, col: 9, offset: 64433},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1932, col: 9, offset: 64433},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1680, col: 25, offset: 55691},
										run: (*parser).callonEscapedItalicText27,
										expr: &oneOrMoreExpr{
											pos: position{line: 1680, col: 25, offset: 55691},
											expr: &litMatcher{
												pos:        position{line: 1680, col: 25, offset: 55691},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1932, col: 44, offset: 64468},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1932, col: 48, offset: 64472},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1932, col: 58, offset: 64482},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1932, col: 89, offset: 64513},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1939, col: 1, offset: 64832},
			expr: &choiceExpr{
				pos: position{line: 1939, col: 18, offset: 64849},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1939, col: 18, offset: 64849},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1939, col: 45, offset: 64876},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1953, col: 1, offset: 65228},
			expr: &actionExpr{
				pos: position{line: 1954, col: 5, offset: 65261},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1954, col: 5, offset: 65261},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1951, col: 38, offset: 65222},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1955, col: 5, offset: 65300},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1955, col: 15, offset: 65310},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1951, col: 38, offset: 65222},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1960, col: 1, offset: 65482},
			expr: &oneOrMoreExpr{
				pos: position{line: 1960, col: 37, offset: 65518},
				expr: &ruleRefExpr{
					pos:  position{line: 1960, col: 37, offset: 65518},
					name: "DoubleQuoteMonospaceTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1962, col: 1, offset: 65585},
			expr: &actionExpr{
				pos: position{line: 1963, col: 5, offset: 65625},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 1963, col: 5, offset: 65625},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1963, col: 5, offset: 65625},
							expr: &litMatcher{
								pos:        position{line: 1951, col: 38, offset: 65222},
								val:        "``",
								ignoreCase: false,
								want:       "\"``\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1964, col: 5, offset: 65664},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1965, col: 9, offset: 65682},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1944, col: 5, offset: 64959},
										run: (*parser).callonDoubleQuoteMonospaceTextElement7,
										expr: &seqExpr{
											pos: position{line: 1944, col: 5, offset: 64959},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 1944, col: 5, offset: 64959},
													expr: &charClassMatcher{
														pos:        position{line: 1944, col: 5, offset: 64959},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 1944, col: 15, offset: 64969},
													expr: &choiceExpr{
														pos: position{line: 1944, col: 17, offset: 64971},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2878, col: 10, offset: 95044},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2878, col: 16, offset: 95050},
																run: (*parser).callonDoubleQuoteMonospaceTextElement14,
																expr: &litMatcher{
																	pos:        position{line: 2878, col: 16, offset: 95050},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
															&litMatcher{
																pos:        position{line: 1941, col: 27, offset: 64928},
																val:        "`",
																ignoreCase: false,
																want:       "\"`\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2882, col: 11, offset: 95109},
										run: (*parser).callonDoubleQuoteMonospaceTextElement17,
										expr: &oneOrMoreExpr{
											pos: position{line: 2882, col: 11, offset: 95109},
											expr: &charClassMatcher{
												pos:        position{line: 2882, col: 12, offset: 95110},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&seqExpr{
										pos: position{line: 1967, col: 11, offset: 65760},
										exprs: []interface{}{
											&choiceExpr{
												pos: position{line: 2886, col: 12, offset: 95178},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2886, col: 12, offset: 95178},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
													&litMatcher{
														pos:        position{line: 2886, col: 19, offset: 95185},
														val:        "\r\n",
														ignoreCase: false,
														want:       "\"\\r\\n\"",
													},
													&actionExpr{
														pos: position{line: 2886, col: 28, offset: 95194},
														run: (*parser).callonDoubleQuoteMonospaceTextElement24,
														expr: &litMatcher{
															pos:        position{line: 2886, col: 28, offset: 95194},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1967, col: 19, offset: 65768},
												expr: &choiceExpr{
													pos: position{line: 2886, col: 12, offset: 95178},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2886, col: 12, offset: 95178},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2886, col: 19, offset: 95185},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&actionExpr{
															pos: position{line: 2886, col: 28, offset: 95194},
															run: (*parser).callonDoubleQuoteMonospaceTextElement30,
															expr: &litMatcher{
																pos:        position{line: 2886, col: 28, offset: 95194},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 449, col: 5, offset: 14443},
										run: (*parser).callonDoubleQuoteMonospaceTextElement32,
										expr: &seqExpr{
											pos: position{line: 449, col: 5, offset: 14443},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 449, col: 5, offset: 14443},
													run: (*parser).callonDoubleQuoteMonospaceTextElement34,
												},
												&labeledExpr{
													pos:   position{line: 452, col: 5, offset: 14507},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 452, col: 14, offset: 14516},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 463, col: 25, offset: 14978},
																run: (*parser).callonDoubleQuoteMonospaceTextElement37,
																expr: &seqExpr{
																	pos: position{line: 463, col: 25, offset: 14978},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 463, col: 25, offset: 14978},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 463, col: 37, offset: 14990},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 118, col: 18, offset: 3399},
																				run: (*parser).callonDoubleQuoteMonospaceTextElement41,
																				expr: &seqExpr{
																					pos: position{line: 118, col: 18, offset: 3399},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 118, col: 18, offset: 3399},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 118, col: 28, offset: 3409},
																							expr: &charClassMatcher{
																								pos:        position{line: 118, col: 29, offset: 3410},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 463, col: 56, offset: 15009},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 463, col: 62, offset: 15015},
																				expr: &actionExpr{
																					pos: position{line: 471, col: 17, offset: 15278},
																					run: (*parser).callonDoubleQuoteMonospaceTextElement48,
																					expr: &seqExpr{
																						pos: position{line: 471, col: 17, offset: 15278},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 471, col: 17, offset: 15278},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 471, col: 21, offset: 15282},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 471, col: 28, offset: 15289},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 471, col: 28, offset: 15289},
																											run: (*parser).callonDoubleQuoteMonospaceTextElement53,
																											expr: &charClassMatcher{
																												pos:        position{line: 471, col: 28, offset: 15289},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 473, col: 9, offset: 15343},
																											run: (*parser).callonDoubleQuoteMonospaceTextElement55,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 473, col: 9, offset: 15343},
																												expr: &charClassMatcher{
																													pos:        position{line: 473, col: 9, offset: 15343},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 463, col: 78, offset: 15031},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 467, col: 25, offset: 15133},
																run: (*parser).callonDoubleQuoteMonospaceTextElement59,
																expr: &seqExpr{
																	pos: position{line: 467, col: 25, offset: 15133},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 467, col: 25, offset: 15133},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 467, col: 38, offset: 15146},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 118, col: 18, offset: 3399},
																				run: (*parser).callonDoubleQuoteMonospaceTextElement63,
																				expr: &seqExpr{
																					pos: position{line: 118, col: 18, offset: 3399},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 118, col: 18, offset: 3399},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 118, col: 28, offset: 3409},
																							expr: &charClassMatcher{
																								pos:        position{line: 118, col: 29, offset: 3410},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 467, col: 57, offset: 15165},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 467, col: 63, offset: 15171},
																				expr: &actionExpr{
																					pos: position{line: 471, col: 17, offset: 15278},
																					run: (*parser).callonDoubleQuoteMonospaceTextElement70,
																					expr: &seqExpr{
																						pos: position{line: 471, col: 17, offset: 15278},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 471, col: 17, offset: 15278},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 471, col: 21, offset: 15282},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 471, col: 28, offset: 15289},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 471, col: 28, offset: 15289},
																											run: (*parser).callonDoubleQuoteMonospaceTextElement75,
																											expr: &charClassMatcher{
																												pos:        position{line: 471, col: 28, offset: 15289},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 473, col: 9, offset: 15343},
																											run: (*parser).callonDoubleQuoteMonospaceTextElement77,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 473, col: 9, offset: 15343},
																												expr: &charClassMatcher{
																													pos:        position{line: 473, col: 9, offset: 15343},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 467, col: 79, offset: 15187},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 456, col: 31, offset: 14633},
																run: (*parser).callonDoubleQuoteMonospaceTextElement81,
																expr: &seqExpr{
																	pos: position{line: 456, col: 31, offset: 14633},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 456, col: 31, offset: 14633},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 456, col: 35, offset: 14637},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 118, col: 18, offset: 3399},
																				run: (*parser).callonDoubleQuoteMonospaceTextElement85,
																				expr: &seqExpr{
																					pos: position{line: 118, col: 18, offset: 3399},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 118, col: 18, offset: 3399},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 118, col: 28, offset: 3409},
																							expr: &charClassMatcher{
																								pos:        position{line: 118, col: 29, offset: 3410},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 456, col: 54, offset: 14656},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2587, col: 5, offset: 86026},
										run: (*parser).callonDoubleQuoteMonospaceTextElement91,
										expr: &seqExpr{
											pos: position{line: 2587, col: 5, offset: 86026},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2587, col: 5, offset: 86026},
													run: (*parser).callonDoubleQuoteMonospaceTextElement93,
												},
												&labeledExpr{
													pos:   position{line: 2590, col: 5, offset: 86097},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2592, col: 9, offset: 86195},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2592, col: 9, offset: 86195},
																run: (*parser).callonDoubleQuoteMonospaceTextElement96,
																expr: &choiceExpr{
																	pos: position{line: 491, col: 27, offset: 15997},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 491, col: 27, offset: 15997},
																			run: (*parser).callonDoubleQuoteMonospaceTextElement98,
																			expr: &seqExpr{
																				pos: position{line: 491, col: 27, offset: 15997},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 491, col: 27, offset: 15997},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 491, col: 32, offset: 16002},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2866, col: 7, offset: 94768},
																							run: (*parser).callonDoubleQuoteMonospaceTextElement102,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2866, col: 7, offset: 94768},
																								expr: &charClassMatcher{
																									pos:        position{line: 2866, col: 7, offset: 94768},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 491, col: 40, offset: 16010},
																						expr: &choiceExpr{
																							pos: position{line: 2878, col: 10, offset: 95044},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2878, col: 10, offset: 95044},
																									val:        " ",
																									ignoreCase: false,
																									want:       "\" \"",
																								},
																								&actionExpr{
																									pos: position{line: 2878, col: 16, offset: 95050},
																									run: (*parser).callonDoubleQuoteMonospaceTextElement108,
																									expr: &litMatcher{
																										pos:        position{line: 2878, col: 16, offset: 95050},
																										val:        "\t",
																										ignoreCase: false,
																										want:       "\"\\t\"",
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 491, col: 47, offset: 16017},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 491, col: 51, offset: 16021},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 501, col: 24, offset: 16434},
																							expr: &choiceExpr{
																								pos: position{line: 502, col: 5, offset: 16440},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 502, col: 6, offset: 16441},
																										run: (*parser).callonDoubleQuoteMonospaceTextElement114,
																										expr: &seqExpr{
																											pos: position{line: 502, col: 6, offset: 16441},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 502, col: 6, offset: 16441},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 502, col: 14, offset: 16449},
																													expr: &charClassMatcher{
																														pos:        position{line: 502, col: 14, offset: 16449},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 449, col: 5, offset: 14443},
																										run: (*parser).callonDoubleQuoteMonospaceTextElement119,
																										expr: &seqExpr{
																											pos: position{line: 449, col: 5, offset: 14443},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 449, col: 5, offset: 14443},
																													run: (*parser).callonDoubleQuoteMonospaceTextElement121,
																												},
																												&labeledExpr{
																													pos:   position{line: 452, col: 5, offset: 14507},
																													label: "element",
																													expr: &choiceExpr{
																														pos: position{line: 452, col: 14, offset: 14516},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 463, col: 25, offset: 14978},
																																run: (*parser).callonDoubleQuoteMonospaceTextElement124,
																																expr: &seqExpr{
																																	pos: position{line: 463, col: 25, offset: 14978},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 463, col: 25, offset: 14978},
																																			val:        "{counter:",
																																			ignoreCase: false,
																																			want:       "\"{counter:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 463, col: 37, offset: 14990},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 118, col: 18, offset: 3399},
																																				run: (*parser).callonDoubleQuoteMonospaceTextElement128,
																																				expr: &seqExpr{
																																					pos: position{line: 118, col: 18, offset: 3399},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 118, col: 18, offset: 3399},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 118, col: 28, offset: 3409},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 118, col: 29, offset: 3410},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 463, col: 56, offset: 15009},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 463, col: 62, offset: 15015},
																																				expr: &actionExpr{
																																					pos: position{line: 471, col: 17, offset: 15278},
																																					run: (*parser).callonDoubleQuoteMonospaceTextElement135,
																																					expr: &seqExpr{
																																						pos: position{line: 471, col: 17, offset: 15278},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 471, col: 17, offset: 15278},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 471, col: 21, offset: 15282},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 471, col: 28, offset: 15289},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 471, col: 28, offset: 15289},
																																											run: (*parser).callonDoubleQuoteMonospaceTextElement140,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 471, col: 28, offset: 15289},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 473, col: 9, offset: 15343},
																																											run: (*parser).callonDoubleQuoteMonospaceTextElement142,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 473, col: 9, offset: 15343},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 473, col: 9, offset: 15343},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 463, col: 78, offset: 15031},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 467, col: 25, offset: 15133},
																																run: (*parser).callonDoubleQuoteMonospaceTextElement146,
																																expr: &seqExpr{
																																	pos: position{line: 467, col: 25, offset: 15133},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 467, col: 25, offset: 15133},
																																			val:        "{counter2:",
																																			ignoreCase: false,
																																			want:       "\"{counter2:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 467, col: 38, offset: 15146},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 118, col: 18, offset: 3399},
																																				run: (*parser).callonDoubleQuoteMonospaceTextElement150,
																																				expr: &seqExpr{
																																					pos: position{line: 118, col: 18, offset: 3399},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 118, col: 18, offset: 3399},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 118, col: 28, offset: 3409},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 118, col: 29, offset: 3410},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 467, col: 57, offset: 15165},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 467, col: 63, offset: 15171},
																																				expr: &actionExpr{
																																					pos: position{line: 471, col: 17, offset: 15278},
																																					run: (*parser).callonDoubleQuoteMonospaceTextElement157,
																																					expr: &seqExpr{
																																						pos: position{line: 471, col: 17, offset: 15278},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 471, col: 17, offset: 15278},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 471, col: 21, offset: 15282},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 471, col: 28, offset: 15289},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 471, col: 28, offset: 15289},
																																											run: (*parser).callonDoubleQuoteMonospaceTextElement162,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 471, col: 28, offset: 15289},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 473, col: 9, offset: 15343},
																																											run: (*parser).callonDoubleQuoteMonospaceTextElement164,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 473, col: 9, offset: 15343},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 473, col: 9, offset: 15343},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 467, col: 79, offset: 15187},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 456, col: 31, offset: 14633},
																																run: (*parser).callonDoubleQuoteMonospaceTextElement168,
																																expr: &seqExpr{
																																	pos: position{line: 456, col: 31, offset: 14633},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 456, col: 31, offset: 14633},
																																			val:        "{",
																																			ignoreCase: false,
																																			want:       "\"{\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 456, col: 35, offset: 14637},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 118, col: 18, offset: 3399},
																																				run: (*parser).callonDoubleQuoteMonospaceTextElement172,
																																				expr: &seqExpr{
																																					pos: position{line: 118, col: 18, offset: 3399},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 118, col: 18, offset: 3399},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 118, col: 28, offset: 3409},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 118, col: 29, offset: 3410},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 456, col: 54, offset: 14656},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 506, col: 8, offset: 16673},
																										run: (*parser).callonDoubleQuoteMonospaceTextElement178,
																										expr: &litMatcher{
																											pos:        position{line: 506, col: 8, offset: 16673},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 491, col: 79, offset: 16049},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 493, col: 9, offset: 16122},
																			run: (*parser).callonDoubleQuoteMonospaceTextElement181,
																			expr: &seqExpr{
																				pos: position{line: 493, col: 9, offset: 16122},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 493, col: 9, offset: 16122},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 493, col: 14, offset: 16127},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2866, col: 7, offset: 94768},
																							run: (*parser).callonDoubleQuoteMonospaceTextElement185,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2866, col: 7, offset: 94768},
																								expr: &charClassMatcher{
																									pos:        position{line: 2866, col: 7, offset: 94768},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 493, col: 22, offset: 16135},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2595, col: 11, offset: 86299},
																run: (*parser).callonDoubleQuoteMonospaceTextElement189,
																expr: &charClassMatcher{
																	pos:        position{line: 2595, col: 12, offset: 86300},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2620, col: 15, offset: 87267},
										run: (*parser).callonDoubleQuoteMonospaceTextElement191,
										expr: &litMatcher{
											pos:        position{line: 2620, col: 15, offset: 87267},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&actionExpr{
										pos: position{line: 2626, col: 14, offset: 87382},
										run: (*parser).callonDoubleQuoteMonospaceTextElement193,
										expr: &litMatcher{
											pos:        position{line: 2626, col: 14, offset: 87382},
											val:        "(C)",
											ignoreCase: false,
											want:       "\"(C)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2630, col: 14, offset: 87458},
										run: (*parser).callonDoubleQuoteMonospaceTextElement195,
										expr: &litMatcher{
											pos:        position{line: 2630, col: 14, offset: 87458},
											val:        "(TM)",
											ignoreCase: false,
											want:       "\"(TM)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2634, col: 15, offset: 87536},
										run: (*parser).callonDoubleQuoteMonospaceTextElement197,
										expr: &litMatcher{
											pos:        position{line: 2634, col: 15, offset: 87536},
											val:        "(R)",
											ignoreCase: false,
											want:       "\"(R)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2638, col: 13, offset: 87611},
										run: (*parser).callonDoubleQuoteMonospaceTextElement199,
										expr: &litMatcher{
											pos:        position{line: 2638, col: 13, offset: 87611},
											val:        "...",
											ignoreCase: false,
											want:       "\"...\"",
										},
									},
									&actionExpr{
										pos: position{line: 2646, col: 22, offset: 87917},
										run: (*parser).callonDoubleQuoteMonospaceTextElement201,
										expr: &seqExpr{
											pos: position{line: 2646, col: 22, offset: 87917},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2797, col: 13, offset: 92519},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 2646, col: 31, offset: 87926},
													val:        "'",
													ignoreCase: false,
													want:       "\"'\"",
												},
												&andExpr{
													pos: position{line: 2646, col: 35, offset: 87930},
													expr: &charClassMatcher{
														pos:        position{line: 2646, col: 36, offset: 87931},
														val:        "[\\pL]",
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1971, col: 11, offset: 65897},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1972, col: 11, offset: 65919},
										name: "QuotedString",
									},
									&litMatcher{
										pos:        position{line: 2624, col: 18, offset: 87346},
										val:        "`'",
										ignoreCase: false,
										want:       "\"`'\"",
									},
									&ruleRefExpr{
										pos:  position{line: 1974, col: 11, offset: 66009},
										name: "QuotedTextInDoubleQuoteMonospaceText",
									},
									&actionExpr{
										pos: position{line: 947, col: 23, offset: 29896},
										run: (*parser).callonDoubleQuoteMonospaceTextElement211,
										expr: &seqExpr{
											pos: position{line: 947, col: 23, offset: 29896},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 945, col: 32, offset: 29864},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
												&labeledExpr{
													pos:   position{line: 947, col: 51, offset: 29924},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 947, col: 56, offset: 29929},
														run: (*parser).callonDoubleQuoteMonospaceTextElement215,
														expr: &oneOrMoreExpr{
															pos: position{line: 947, col: 56, offset: 29929},
															expr: &charClassMatcher{
																pos:        position{line: 947, col: 56, offset: 29929},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 945, col: 32, offset: 29864},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
											},
										},
									},
									&charClassMatcher{
										pos:        position{line: 1993, col: 5, offset: 66541},
										val:        "[^\\r\\n`]",
										chars:      []rune{'\r', '\n', '`'},
										ignoreCase: false,
										inverted:   true,
									},
									&actionExpr{
										pos: position{line: 1994, col: 7, offset: 66643},
										run: (*parser).callonDoubleQuoteMonospaceTextElement220,
										expr: &seqExpr{
											pos: position{line: 1994, col: 7, offset: 66643},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1994, col: 7, offset: 66643},
													val:        "``",
													ignoreCase: false,
													want:       "\"``\"",
												},
												&actionExpr{
													pos: position{line: 2801, col: 14, offset: 92593},
													run: (*parser).callonDoubleQuoteMonospaceTextElement223,
													expr: &oneOrMoreExpr{
														pos: position{line: 2801, col: 14, offset: 92593},
														expr: &charClassMatcher{
															pos:        position{line: 2801, col: 14, offset: 92593},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteMonospaceText",
			pos:  position{line: 1980, col: 1, offset: 66173},
			expr: &actionExpr{
				pos: position{line: 1981, col: 5, offset: 66217},
				run: (*parser).callonQuotedTextInDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1981, col: 5, offset: 66217},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1981, col: 5, offset: 66217},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1981, col: 16, offset: 66228},
								expr: &ruleRefExpr{
									pos:  position{line: 1981, col: 17, offset: 66229},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1982, col: 5, offset: 66255},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1983, col: 9, offset: 66270},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1983, col: 9, offset: 66270},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1984, col: 11, offset: 66305},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1985, col: 11, offset: 66324},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1986, col: 11, offset: 66345},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1987, col: 11, offset: 66366},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1988, col: 11, offset: 66390},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 2007, col: 1, offset: 67129},
			expr: &actionExpr{
				pos: position{line: 2008, col: 5, offset: 67162},
				run: (*parser).callonSingleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 2008, col: 5, offset: 67162},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2003, col: 43, offset: 67077},
							val:        "`",
							ignoreCase: false,
							want:       "\"`\"",
						},
						&labeledExpr{
							pos:   position{line: 2009, col: 5, offset: 67206},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2009, col: 15, offset: 67216},
								name: "SingleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 2005, col: 41, offset: 67123},
							val:        "`",
							ignoreCase: false,
							want:       "\"`\"",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 2014, col: 1, offset: 67392},
			expr: &actionExpr{
				pos: position{line: 2015, col: 5, offset: 67433},
				run: (*parser).callonSingleQuoteMonospaceTextElements1,
				expr: &seqExpr{
					pos: position{line: 2015, col: 5, offset: 67433},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2015, col: 5, offset: 67433},
							expr: &notExpr{
								pos: position{line: 2890, col: 8, offset: 95285},
								expr: &anyMatcher{
									line: 2890, col: 9, offset: 95286,
								},
							},
						},
						&notExpr{
							pos: position{line: 2015, col: 10, offset: 67438},
							expr: &choiceExpr{
								pos: position{line: 2878, col: 10, offset: 95044},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 2878, col: 10, offset: 95044},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
									&actionExpr{
										pos: position{line: 2878, col: 16, offset: 95050},
										run: (*parser).callonSingleQuoteMonospaceTextElements9,
										expr: &litMatcher{
											pos:        position{line: 2878, col: 16, offset: 95050},
											val:        "\t",
											ignoreCase: false,
											want:       "\"\\t\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2016, col: 5, offset: 67477},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2016, col: 14, offset: 67486},
								expr: &ruleRefExpr{
									pos:  position{line: 2016, col: 15, offset: 67487},
									name: "SingleQuoteMonospaceTextElement",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2017, col: 5, offset: 67525},
							run: (*parser).callonSingleQuoteMonospaceTextElements14,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 2023, col: 1, offset: 67666},
			expr: &choiceExpr{
				pos: position{line: 2024, col: 5, offset: 67707},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2809, col: 5, offset: 92974},
						run: (*parser).callonSingleQuoteMonospaceTextElement2,
						expr: &seqExpr{
							pos: position{line: 2809, col: 5, offset: 92974},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2809, col: 5, offset: 92974},
									expr: &charClassMatcher{
										pos:        position{line: 2809, col: 5, offset: 92974},
										val:        "[0-9\\pL]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2809, col: 15, offset: 92984},
									expr: &choiceExpr{
										pos: position{line: 2809, col: 17, offset: 92986},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2809, col: 17, offset: 92986},
												val:        "[\\r\\n ,]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&notExpr{
												pos: position{line: 2890, col: 8, offset: 95285},
												expr: &anyMatcher{
													line: 2890, col: 9, offset: 95286,
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2811, col: 9, offset: 93068},
						run: (*parser).callonSingleQuoteMonospaceTextElement11,
						expr: &seqExpr{
							pos: position{line: 2811, col: 9, offset: 93068},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2811, col: 9, offset: 93068},
									expr: &charClassMatcher{
										pos:        position{line: 2811, col: 9, offset: 93068},
										val:        "[0-9\\pL]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 2811, col: 19, offset: 93078},
									expr: &seqExpr{
										pos: position{line: 2811, col: 20, offset: 93079},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2811, col: 20, offset: 93079},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 2811, col: 27, offset: 93086},
												expr: &charClassMatcher{
													pos:        position{line: 2811, col: 27, offset: 93086},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2882, col: 11, offset: 95109},
						run: (*parser).callonSingleQuoteMonospaceTextElement20,
						expr: &oneOrMoreExpr{
							pos: position{line: 2882, col: 11, offset: 95109},
							expr: &charClassMatcher{
								pos:        position{line: 2882, col: 12, offset: 95110},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
					&seqExpr{
						pos: position{line: 2026, col: 7, offset: 67732},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 2886, col: 12, offset: 95178},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 2886, col: 12, offset: 95178},
										val:        "\n",
										ignoreCase: false,
										want:       "\"\\n\"",
									},
									&litMatcher{
										pos:        position{line: 2886, col: 19, offset: 95185},
										val:        "\r\n",
										ignoreCase: false,
										want:       "\"\\r\\n\"",
									},
									&actionExpr{
										pos: position{line: 2886, col: 28, offset: 95194},
										run: (*parser).callonSingleQuoteMonospaceTextElement27,
										expr: &litMatcher{
											pos:        position{line: 2886, col: 28, offset: 95194},
											val:        "\r",
											ignoreCase: false,
											want:       "\"\\r\"",
										},
									},
								},
							},
							&notExpr{
								pos: position{line: 2026, col: 15, offset: 67740},
								expr: &choiceExpr{
									pos: position{line: 2886, col: 12, offset: 95178},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 2886, col: 12, offset: 95178},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
										&litMatcher{
											pos:        position{line: 2886, col: 19, offset: 95185},
											val:        "\r\n",
											ignoreCase: false,
											want:       "\"\\r\\n\"",
										},
										&actionExpr{
											pos: position{line: 2886, col: 28, offset: 95194},
											run: (*parser).callonSingleQuoteMonospaceTextElement33,
											expr: &litMatcher{
												pos:        position{line: 2886, col: 28, offset: 95194},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 449, col: 5, offset: 14443},
						run: (*parser).callonSingleQuoteMonospaceTextElement35,
						expr: &seqExpr{
							pos: position{line: 449, col: 5, offset: 14443},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 449, col: 5, offset: 14443},
									run: (*parser).callonSingleQuoteMonospaceTextElement37,
								},
								&labeledExpr{
									pos:   position{line: 452, col: 5, offset: 14507},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 452, col: 14, offset: 14516},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 463, col: 25, offset: 14978},
												run: (*parser).callonSingleQuoteMonospaceTextElement40,
												expr: &seqExpr{
													pos: position{line: 463, col: 25, offset: 14978},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 463, col: 25, offset: 14978},
															val:        "{counter:",
															ignoreCase: false,
															want:       "\"{counter:\"",
														},
														&labeledExpr{
															pos:   position{line: 463, col: 37, offset: 14990},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 118, col: 18, offset: 3399},
																run: (*parser).callonSingleQuoteMonospaceTextElement44,
																expr: &seqExpr{
																	pos: position{line: 118, col: 18, offset: 3399},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 118, col: 18, offset: 3399},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 118, col: 28, offset: 3409},
																			expr: &charClassMatcher{
																				pos:        position{line: 118, col: 29, offset: 3410},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 463, col: 56, offset: 15009},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 463, col: 62, offset: 15015},
																expr: &actionExpr{
																	pos: position{line: 471, col: 17, offset: 15278},
																	run: (*parser).callonSingleQuoteMonospaceTextElement51,
																	expr: &seqExpr{
																		pos: position{line: 471, col: 17, offset: 15278},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 471, col: 17, offset: 15278},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 471, col: 21, offset: 15282},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 471, col: 28, offset: 15289},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 471, col: 28, offset: 15289},
																							run: (*parser).callonSingleQuoteMonospaceTextElement56,
																							expr: &charClassMatcher{
																								pos:        position{line: 471, col: 28, offset: 15289},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 473, col: 9, offset: 15343},
																							run: (*parser).callonSingleQuoteMonospaceTextElement58,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 473, col: 9, offset: 15343},
																								expr: &charClassMatcher{
																									pos:        position{line: 473, col: 9, offset: 15343},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 463, col: 78, offset: 15031},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 467, col: 25, offset: 15133},
												run: (*parser).callonSingleQuoteMonospaceTextElement62,
												expr: &seqExpr{
													pos: position{line: 467, col: 25, offset: 15133},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 467, col: 25, offset: 15133},
															val:        "{counter2:",
															ignoreCase: false,
															want:       "\"{counter2:\"",
														},
														&labeledExpr{
															pos:   position{line: 467, col: 38, offset: 15146},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 118, col: 18, offset: 3399},
																run: (*parser).callonSingleQuoteMonospaceTextElement66,
																expr: &seqExpr{
																	pos: position{line: 118, col: 18, offset: 3399},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 118, col: 18, offset: 3399},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 118, col: 28, offset: 3409},
																			expr: &charClassMatcher{
																				pos:        position{line: 118, col: 29, offset: 3410},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 467, col: 57, offset: 15165},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 467, col: 63, offset: 15171},
																expr: &actionExpr{
																	pos: position{line: 471, col: 17, offset: 15278},
																	run: (*parser).callonSingleQuoteMonospaceTextElement73,
																	expr: &seqExpr{
																		pos: position{line: 471, col: 17, offset: 15278},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 471, col: 17, offset: 15278},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 471, col: 21, offset: 15282},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 471, col: 28, offset: 15289},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 471, col: 28, offset: 15289},
																							run: (*parser).callonSingleQuoteMonospaceTextElement78,
																							expr: &charClassMatcher{
																								pos:        position{line: 471, col: 28, offset: 15289},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 473, col: 9, offset: 15343},
																							run: (*parser).callonSingleQuoteMonospaceTextElement80,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 473, col: 9, offset: 15343},
																								expr: &charClassMatcher{
																									pos:        position{line: 473, col: 9, offset: 15343},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 467, col: 79, offset: 15187},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 456, col: 31, offset: 14633},
												run: (*parser).callonSingleQuoteMonospaceTextElement84,
												expr: &seqExpr{
													pos: position{line: 456, col: 31, offset: 14633},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 456, col: 31, offset: 14633},
															val:        "{",
															ignoreCase: false,
															want:       "\"{\"",
														},
														&labeledExpr{
															pos:   position{line: 456, col: 35, offset: 14637},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 118, col: 18, offset: 3399},
																run: (*parser).callonSingleQuoteMonospaceTextElement88,
																expr: &seqExpr{
																	pos: position{line: 118, col: 18, offset: 3399},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 118, col: 18, offset: 3399},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 118, col: 28, offset: 3409},
																			expr: &charClassMatcher{
																				pos:        position{line: 118, col: 29, offset: 3410},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 456, col: 54, offset: 14656},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2587, col: 5, offset: 86026},
						run: (*parser).callonSingleQuoteMonospaceTextElement94,
						expr: &seqExpr{
							pos: position{line: 2587, col: 5, offset: 86026},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 2587, col: 5, offset: 86026},
									run: (*parser).callonSingleQuoteMonospaceTextElement96,
								},
								&labeledExpr{
									pos:   position{line: 2590, col: 5, offset: 86097},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 2592, col: 9, offset: 86195},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 2592, col: 9, offset: 86195},
												run: (*parser).callonSingleQuoteMonospaceTextElement99,
												expr: &choiceExpr{
													pos: position{line: 491, col: 27, offset: 15997},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 491, col: 27, offset: 15997},
															run: (*parser).callonSingleQuoteMonospaceTextElement101,
															expr: &seqExpr{
																pos: position{line: 491, col: 27, offset: 15997},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 491, col: 27, offset: 15997},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 491, col: 32, offset: 16002},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 2866, col: 7, offset: 94768},
																			run: (*parser).callonSingleQuoteMonospaceTextElement105,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2866, col: 7, offset: 94768},
																				expr: &charClassMatcher{
																					pos:        position{line: 2866, col: 7, offset: 94768},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 491, col: 40, offset: 16010},
																		expr: &choiceExpr{
																			pos: position{line: 2878, col: 10, offset: 95044},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2878, col: 10, offset: 95044},
																					val:        " ",
																					ignoreCase: false,
																					want:       "\" \"",
																				},
																				&actionExpr{
																					pos: position{line: 2878, col: 16, offset: 95050},
																					run: (*parser).callonSingleQuoteMonospaceTextElement111,
																					expr: &litMatcher{
																						pos:        position{line: 2878, col: 16, offset: 95050},
																						val:        "\t",
																						ignoreCase: false,
																						want:       "\"\\t\"",
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 491, col: 47, offset: 16017},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 491, col: 51, offset: 16021},
																		label: "label",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 501, col: 24, offset: 16434},
																			expr: &choiceExpr{
																				pos: position{line: 502, col: 5, offset: 16440},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 502, col: 6, offset: 16441},
																						run: (*parser).callonSingleQuoteMonospaceTextElement117,
																						expr: &seqExpr{
																							pos: position{line: 502, col: 6, offset: 16441},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 502, col: 6, offset: 16441},
																									val:        "[0-9\\pL]",
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&oneOrMoreExpr{
																									pos: position{line: 502, col: 14, offset: 16449},
																									expr: &charClassMatcher{
																										pos:        position{line: 502, col: 14, offset: 16449},
																										val:        "[^\\r\\n{<>]",
																										chars:      []rune{'\r', '\n', '{', '<', '>'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 449, col: 5, offset: 14443},
																						run: (*parser).callonSingleQuoteMonospaceTextElement122,
																						expr: &seqExpr{
																							pos: position{line: 449, col: 5, offset: 14443},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 449, col: 5, offset: 14443},
																									run: (*parser).callonSingleQuoteMonospaceTextElement124,
																								},
																								&labeledExpr{
																									pos:   position{line: 452, col: 5, offset: 14507},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 452, col: 14, offset: 14516},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 463, col: 25, offset: 14978},
																												run: (*parser).callonSingleQuoteMonospaceTextElement127,
																												expr: &seqExpr{
																													pos: position{line: 463, col: 25, offset: 14978},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 463, col: 25, offset: 14978},
																															val:        "{counter:",
																															ignoreCase: false,
																															want:       "\"{counter:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 463, col: 37, offset: 14990},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 118, col: 18, offset: 3399},
																																run: (*parser).callonSingleQuoteMonospaceTextElement131,
																																expr: &seqExpr{
																																	pos: position{line: 118, col: 18, offset: 3399},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 118, col: 18, offset: 3399},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 118, col: 28, offset: 3409},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 118, col: 29, offset: 3410},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 463, col: 56, offset: 15009},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 463, col: 62, offset: 15015},
																																expr: &actionExpr{
																																	pos: position{line: 471, col: 17, offset: 15278},
																																	run: (*parser).callonSingleQuoteMonospaceTextElement138,
																																	expr: &seqExpr{
																																		pos: position{line: 471, col: 17, offset: 15278},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 471, col: 17, offset: 15278},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 471, col: 21, offset: 15282},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 471, col: 28, offset: 15289},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 471, col: 28, offset: 15289},
																																							run: (*parser).callonSingleQuoteMonospaceTextElement143,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 471, col: 28, offset: 15289},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 473, col: 9, offset: 15343},
																																							run: (*parser).callonSingleQuoteMonospaceTextElement145,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 473, col: 9, offset: 15343},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 473, col: 9, offset: 15343},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 463, col: 78, offset: 15031},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 467, col: 25, offset: 15133},
																												run: (*parser).callonSingleQuoteMonospaceTextElement149,
																												expr: &seqExpr{
																													pos: position{line: 467, col: 25, offset: 15133},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 467, col: 25, offset: 15133},
																															val:        "{counter2:",
																															ignoreCase: false,
																															want:       "\"{counter2:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 467, col: 38, offset: 15146},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 118, col: 18, offset: 3399},
																																run: (*parser).callonSingleQuoteMonospaceTextElement153,
																																expr: &seqExpr{
																																	pos: position{line: 118, col: 18, offset: 3399},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 118, col: 18, offset: 3399},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 118, col: 28, offset: 3409},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 118, col: 29, offset: 3410},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 467, col: 57, offset: 15165},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 467, col: 63, offset: 15171},
																																expr: &actionExpr{
																																	pos: position{line: 471, col: 17, offset: 15278},
																																	run: (*parser).callonSingleQuoteMonospaceTextElement160,
																																	expr: &seqExpr{
																																		pos: position{line: 471, col: 17, offset: 15278},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 471, col: 17, offset: 15278},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 471, col: 21, offset: 15282},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 471, col: 28, offset: 15289},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 471, col: 28, offset: 15289},
																																							run: (*parser).callonSingleQuoteMonospaceTextElement165,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 471, col: 28, offset: 15289},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 473, col: 9, offset: 15343},
																																							run: (*parser).callonSingleQuoteMonospaceTextElement167,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 473, col: 9, offset: 15343},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 473, col: 9, offset: 15343},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 467, col: 79, offset: 15187},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 456, col: 31, offset: 14633},
																												run: (*parser).callonSingleQuoteMonospaceTextElement171,
																												expr: &seqExpr{
																													pos: position{line: 456, col: 31, offset: 14633},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 456, col: 31, offset: 14633},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 456, col: 35, offset: 14637},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 118, col: 18, offset: 3399},
																																run: (*parser).callonSingleQuoteMonospaceTextElement175,
																																expr: &seqExpr{
																																	pos: position{line: 118, col: 18, offset: 3399},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 118, col: 18, offset: 3399},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 118, col: 28, offset: 3409},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 118, col: 29, offset: 3410},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 456, col: 54, offset: 14656},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 506, col: 8, offset: 16673},
																						run: (*parser).callonSingleQuoteMonospaceTextElement181,
																						expr: &litMatcher{
																							pos:        position{line: 506, col: 8, offset: 16673},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 491, col: 79, offset: 16049},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 493, col: 9, offset: 16122},
															run: (*parser).callonSingleQuoteMonospaceTextElement184,
															expr: &seqExpr{
																pos: position{line: 493, col: 9, offset: 16122},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 493, col: 9, offset: 16122},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 493, col: 14, offset: 16127},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 2866, col: 7, offset: 94768},
																			run: (*parser).callonSingleQuoteMonospaceTextElement188,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2866, col: 7, offset: 94768},
																				expr: &charClassMatcher{
																					pos:        position{line: 2866, col: 7, offset: 94768},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 493, col: 22, offset: 16135},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 2595, col: 11, offset: 86299},
												run: (*parser).callonSingleQuoteMonospaceTextElement192,
												expr: &charClassMatcher{
													pos:        position{line: 2595, col: 12, offset: 86300},
													val:        "[<>&]",
													chars:      []rune{'<', '>', '&'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2620, col: 15, offset: 87267},
						run: (*parser).callonSingleQuoteMonospaceTextElement194,
						expr: &litMatcher{
							pos:        position{line: 2620, col: 15, offset: 87267},
							val:        "`'",
							ignoreCase: false,
							want:       "\"`'\"",
						},
					},
					&actionExpr{
						pos: position{line: 2626, col: 14, offset: 87382},
						run: (*parser).callonSingleQuoteMonospaceTextElement196,
						expr: &litMatcher{
							pos:        position{line: 2626, col: 14, offset: 87382},
							val:        "(C)",
							ignoreCase: false,
							want:       "\"(C)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2630, col: 14, offset: 87458},
						run: (*parser).callonSingleQuoteMonospaceTextElement198,
						expr: &litMatcher{
							pos:        position{line: 2630, col: 14, offset: 87458},
							val:        "(TM)",
							ignoreCase: false,
							want:       "\"(TM)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2634, col: 15, offset: 87536},
						run: (*parser).callonSingleQuoteMonospaceTextElement200,
						expr: &litMatcher{
							pos:        position{line: 2634, col: 15, offset: 87536},
							val:        "(R)",
							ignoreCase: false,
							want:       "\"(R)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2638, col: 13, offset: 87611},
						run: (*parser).callonSingleQuoteMonospaceTextElement202,
						expr: &litMatcher{
							pos:        position{line: 2638, col: 13, offset: 87611},
							val:        "...",
							ignoreCase: false,
							want:       "\"...\"",
						},
					},
					&actionExpr{
						pos: position{line: 2646, col: 22, offset: 87917},
						run: (*parser).callonSingleQuoteMonospaceTextElement204,
						expr: &seqExpr{
							pos: position{line: 2646, col: 22, offset: 87917},
							exprs: []interface{}{
								&charClassMatcher{
									pos:        position{line: 2797, col: 13, offset: 92519},
									val:        "[0-9\\pL]",
									ranges:     []rune{'0', '9'},
									classes:    []*unicode.RangeTable{rangeTable("L")},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 2646, col: 31, offset: 87926},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&andExpr{
									pos: position{line: 2646, col: 35, offset: 87930},
									expr: &charClassMatcher{
										pos:        position{line: 2646, col: 36, offset: 87931},
										val:        "[\\pL]",
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2030, col: 7, offset: 67853},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 2031, col: 7, offset: 67871},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 2032, col: 7, offset: 67890},
						name: "QuotedTextInSingleQuoteMonospaceText",
					},
					&litMatcher{
						pos:        position{line: 2624, col: 18, offset: 87346},
						val:        "`'",
						ignoreCase: false,
						want:       "\"`'\"",
					},
					&actionExpr{
						pos: position{line: 947, col: 23, offset: 29896},
						run: (*parser).callonSingleQuoteMonospaceTextElement214,
						expr: &seqExpr{
							pos: position{line: 947, col: 23, offset: 29896},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 945, col: 32, offset: 29864},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
								&labeledExpr{
									pos:   position{line: 947, col: 51, offset: 29924},
									label: "ref",
									expr: &actionExpr{
										pos: position{line: 947, col: 56, offset: 29929},
										run: (*parser).callonSingleQuoteMonospaceTextElement218,
										expr: &oneOrMoreExpr{
											pos: position{line: 947, col: 56, offset: 29929},
											expr: &charClassMatcher{
												pos:        position{line: 947, col: 56, offset: 29929},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 945, col: 32, offset: 29864},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2050, col: 5, offset: 68389},
						run: (*parser).callonSingleQuoteMonospaceTextElement222,
						expr: &choiceExpr{
							pos: position{line: 2050, col: 6, offset: 68390},
							alternatives: []interface{}{
								&charClassMatcher{
									pos:        position{line: 2050, col: 6, offset: 68390},
									val:        "[^\\r\\n` ]",
									chars:      []rune{'\r', '\n', '`', ' '},
									ignoreCase: false,
									inverted:   true,
								},
								&seqExpr{
									pos: position{line: 2051, col: 7, offset: 68502},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1941, col: 27, offset: 64928},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&actionExpr{
											pos: position{line: 2801, col: 14, offset: 92593},
											run: (*parser).callonSingleQuoteMonospaceTextElement227,
											expr: &oneOrMoreExpr{
												pos: position{line: 2801, col: 14, offset: 92593},
												expr: &charClassMatcher{
													pos:        position{line: 2801, col: 14, offset: 92593},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteMonospaceText",
			pos:  position{line: 2037, col: 1, offset: 68021},
			expr: &actionExpr{
				pos: position{line: 2038, col: 5, offset: 68065},
				run: (*parser).callonQuotedTextInSingleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 2038, col: 5, offset: 68065},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2038, col: 5, offset: 68065},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2038, col: 16, offset: 68076},
								expr: &ruleRefExpr{
									pos:  position{line: 2038, col: 17, offset: 68077},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2039, col: 5, offset: 68103},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 2040, col: 9, offset: 68118},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2040, col: 9, offset: 68118},
										name: "DoubleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 2041, col: 11, offset: 68153},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 2042, col: 11, offset: 68172},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 2043, col: 11, offset: 68193},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 2044, col: 11, offset: 68214},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 2045, col: 11, offset: 68238},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 2055, col: 1, offset: 68703},
			expr: &choiceExpr{
				pos: position{line: 2056, col: 5, offset: 68732},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2056, col: 5, offset: 68732},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 2056, col: 5, offset: 68732},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2056, col: 5, offset: 68732},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1684, col: 25, offset: 55764},
										run: (*parser).callonEscapedMonospaceText5,
										expr: &seqExpr{
											pos: position{line: 1684, col: 25, offset: 55764},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1684, col: 25, offset: 55764},
													val:        "\\\\",
													ignoreCase: false,
													want:       "\"\\\\\\\\\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1684, col: 30, offset: 55769},
													expr: &litMatcher{
														pos:        position{line: 1684, col: 30, offset: 55769},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2056, col: 40, offset: 68767},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 2056, col: 45, offset: 68772},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2056, col: 55, offset: 68782},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2056, col: 89, offset: 68816},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2058, col: 9, offset: 68973},
						run: (*parser).callonEscapedMonospaceText14,
						expr: &seqExpr{
							pos: position{line: 2058, col: 9, offset: 68973},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2058, col: 9, offset: 68973},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1680, col: 25, offset: 55691},
										run: (*parser).callonEscapedMonospaceText17,
										expr: &oneOrMoreExpr{
											pos: position{line: 1680, col: 25, offset: 55691},
											expr: &litMatcher{
												pos:        position{line: 1680, col: 25, offset: 55691},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2058, col: 44, offset: 69008},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 2058, col: 49, offset: 69013},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2058, col: 59, offset: 69023},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2058, col: 93, offset: 69057},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2061, col: 9, offset: 69257},
						run: (*parser).callonEscapedMonospaceText24,
						expr: &seqExpr{
							pos: position{line: 2061, col: 9, offset: 69257},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2061, col: 9, offset: 69257},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1680, col: 25, offset: 55691},
										run: (*parser).callonEscapedMonospaceText27,
										expr: &oneOrMoreExpr{
											pos: position{line: 1680, col: 25, offset: 55691},
											expr: &litMatcher{
												pos:        position{line: 1680, col: 25, offset: 55691},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2061, col: 44, offset: 69292},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 2061, col: 48, offset: 69296},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2061, col: 58, offset: 69306},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2061, col: 92, offset: 69340},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 2068, col: 1, offset: 69637},
			expr: &choiceExpr{
				pos: position{line: 2068, col: 15, offset: 69651},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2068, col: 15, offset: 69651},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 2068, col: 39, offset: 69675},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 2082, col: 1, offset: 70013},
			expr: &actionExpr{
				pos: position{line: 2083, col: 5, offset: 70043},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 2083, col: 5, offset: 70043},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2080, col: 35, offset: 70007},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 2084, col: 5, offset: 70079},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2084, col: 15, offset: 70089},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 2080, col: 35, offset: 70007},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 2089, col: 1, offset: 70252},
			expr: &zeroOrMoreExpr{
				pos: position{line: 2089, col: 34, offset: 70285},
				expr: &ruleRefExpr{
					pos:  position{line: 2089, col: 34, offset: 70285},
					name: "DoubleQuoteMarkedTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 2091, col: 1, offset: 70316},
			expr: &actionExpr{
				pos: position{line: 2092, col: 5, offset: 70385},
				run: (*parser).callonDoubleQuoteMarkedTextElement1,
				expr: &seqExpr{
					pos: position{line: 2092, col: 5, offset: 70385},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2092, col: 5, offset: 70385},
							expr: &litMatcher{
								pos:        position{line: 2080, col: 35, offset: 70007},
								val:        "##",
								ignoreCase: false,
								want:       "\"##\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 2093, col: 5, offset: 70421},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2094, col: 9, offset: 70439},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2073, col: 5, offset: 69749},
										run: (*parser).callonDoubleQuoteMarkedTextElement7,
										expr: &seqExpr{
											pos: position{line: 2073, col: 5, offset: 69749},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2073, col: 5, offset: 69749},
													expr: &charClassMatcher{
														pos:        position{line: 2073, col: 5, offset: 69749},
														val:        "[,?!;0-9\\pL]",
														chars:      []rune{',', '?', '!', ';'},
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 2073, col: 19, offset: 69763},
													expr: &choiceExpr{
														pos: position{line: 2073, col: 21, offset: 69765},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2878, col: 10, offset: 95044},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2878, col: 16, offset: 95050},
																run: (*parser).callonDoubleQuoteMarkedTextElement14,
																expr: &litMatcher{
																	pos:        position{line: 2878, col: 16, offset: 95050},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
															&litMatcher{
																pos:        position{line: 2070, col: 24, offset: 69721},
																val:        "#",
																ignoreCase: false,
																want:       "\"#\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2882, col: 11, offset: 95109},
										run: (*parser).callonDoubleQuoteMarkedTextElement17,
										expr: &oneOrMoreExpr{
											pos: position{line: 2882, col: 11, offset: 95109},
											expr: &charClassMatcher{
												pos:        position{line: 2882, col: 12, offset: 95110},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&seqExpr{
										pos: position{line: 2096, col: 11, offset: 70514},
										exprs: []interface{}{
											&choiceExpr{
												pos: position{line: 2886, col: 12, offset: 95178},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2886, col: 12, offset: 95178},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
													&litMatcher{
														pos:        position{line: 2886, col: 19, offset: 95185},
														val:        "\r\n",
														ignoreCase: false,
														want:       "\"\\r\\n\"",
													},
													&actionExpr{
														pos: position{line: 2886, col: 28, offset: 95194},
														run: (*parser).callonDoubleQuoteMarkedTextElement24,
														expr: &litMatcher{
															pos:        position{line: 2886, col: 28, offset: 95194},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 2096, col: 19, offset: 70522},
												expr: &choiceExpr{
													pos: position{line: 2886, col: 12, offset: 95178},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2886, col: 12, offset: 95178},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2886, col: 19, offset: 95185},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&actionExpr{
															pos: position{line: 2886, col: 28, offset: 95194},
															run: (*parser).callonDoubleQuoteMarkedTextElement30,
															expr: &litMatcher{
																pos:        position{line: 2886, col: 28, offset: 95194},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 449, col: 5, offset: 14443},
										run: (*parser).callonDoubleQuoteMarkedTextElement32,
										expr: &seqExpr{
											pos: position{line: 449, col: 5, offset: 14443},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 449, col: 5, offset: 14443},
													run: (*parser).callonDoubleQuoteMarkedTextElement34,
												},
												&labeledExpr{
													pos:   position{line: 452, col: 5, offset: 14507},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 452, col: 14, offset: 14516},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 463, col: 25, offset: 14978},
																run: (*parser).callonDoubleQuoteMarkedTextElement37,
																expr: &seqExpr{
																	pos: position{line: 463, col: 25, offset: 14978},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 463, col: 25, offset: 14978},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 463, col: 37, offset: 14990},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 118, col: 18, offset: 3399},
																				run: (*parser).callonDoubleQuoteMarkedTextElement41,
																				expr: &seqExpr{
																					pos: position{line: 118, col: 18, offset: 3399},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 118, col: 18, offset: 3399},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 118, col: 28, offset: 3409},
																							expr: &charClassMatcher{
																								pos:        position{line: 118, col: 29, offset: 3410},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 463, col: 56, offset: 15009},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 463, col: 62, offset: 15015},
																				expr: &actionExpr{
																					pos: position{line: 471, col: 17, offset: 15278},
																					run: (*parser).callonDoubleQuoteMarkedTextElement48,
																					expr: &seqExpr{
																						pos: position{line: 471, col: 17, offset: 15278},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 471, col: 17, offset: 15278},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 471, col: 21, offset: 15282},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 471, col: 28, offset: 15289},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 471, col: 28, offset: 15289},
																											run: (*parser).callonDoubleQuoteMarkedTextElement53,
																											expr: &charClassMatcher{
																												pos:        position{line: 471, col: 28, offset: 15289},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 473, col: 9, offset: 15343},
																											run: (*parser).callonDoubleQuoteMarkedTextElement55,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 473, col: 9, offset: 15343},
																												expr: &charClassMatcher{
																													pos:        position{line: 473, col: 9, offset: 15343},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 463, col: 78, offset: 15031},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 467, col: 25, offset: 15133},
																run: (*parser).callonDoubleQuoteMarkedTextElement59,
																expr: &seqExpr{
																	pos: position{line: 467, col: 25, offset: 15133},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 467, col: 25, offset: 15133},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 467, col: 38, offset: 15146},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 118, col: 18, offset: 3399},
																				run: (*parser).callonDoubleQuoteMarkedTextElement63,
																				expr: &seqExpr{
																					pos: position{line: 118, col: 18, offset: 3399},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 118, col: 18, offset: 3399},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 118, col: 28, offset: 3409},
																							expr: &charClassMatcher{
																								pos:        position{line: 118, col: 29, offset: 3410},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 467, col: 57, offset: 15165},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 467, col: 63, offset: 15171},
																				expr: &actionExpr{
																					pos: position{line: 471, col: 17, offset: 15278},
																					run: (*parser).callonDoubleQuoteMarkedTextElement70,
																					expr: &seqExpr{
																						pos: position{line: 471, col: 17, offset: 15278},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 471, col: 17, offset: 15278},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 471, col: 21, offset: 15282},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 471, col: 28, offset: 15289},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 471, col: 28, offset: 15289},
																											run: (*parser).callonDoubleQuoteMarkedTextElement75,
																											expr: &charClassMatcher{
																												pos:        position{line: 471, col: 28, offset: 15289},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 473, col: 9, offset: 15343},
																											run: (*parser).callonDoubleQuoteMarkedTextElement77,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 473, col: 9, offset: 15343},
																												expr: &charClassMatcher{
																													pos:        position{line: 473, col: 9, offset: 15343},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 467, col: 79, offset: 15187},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 456, col: 31, offset: 14633},
																run: (*parser).callonDoubleQuoteMarkedTextElement81,
																expr: &seqExpr{
																	pos: position{line: 456, col: 31, offset: 14633},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 456, col: 31, offset: 14633},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 456, col: 35, offset: 14637},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 118, col: 18, offset: 3399},
																				run: (*parser).callonDoubleQuoteMarkedTextElement85,
																				expr: &seqExpr{
																					pos: position{line: 118, col: 18, offset: 3399},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 118, col: 18, offset: 3399},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 118, col: 28, offset: 3409},
																							expr: &charClassMatcher{
																								pos:        position{line: 118, col: 29, offset: 3410},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 456, col: 54, offset: 14656},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2587, col: 5, offset: 86026},
										run: (*parser).callonDoubleQuoteMarkedTextElement91,
										expr: &seqExpr{
											pos: position{line: 2587, col: 5, offset: 86026},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2587, col: 5, offset: 86026},
													run: (*parser).callonDoubleQuoteMarkedTextElement93,
												},
												&labeledExpr{
													pos:   position{line: 2590, col: 5, offset: 86097},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2592, col: 9, offset: 86195},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2592, col: 9, offset: 86195},
																run: (*parser).callonDoubleQuoteMarkedTextElement96,
																expr: &choiceExpr{
																	pos: position{line: 491, col: 27, offset: 15997},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 491, col: 27, offset: 15997},
																			run: (*parser).callonDoubleQuoteMarkedTextElement98,
																			expr: &seqExpr{
																				pos: position{line: 491, col: 27, offset: 15997},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 491, col: 27, offset: 15997},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 491, col: 32, offset: 16002},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2866, col: 7, offset: 94768},
																							run: (*parser).callonDoubleQuoteMarkedTextElement102,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2866, col: 7, offset: 94768},
																								expr: &charClassMatcher{
																									pos:        position{line: 2866, col: 7, offset: 94768},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 491, col: 40, offset: 16010},
																						expr: &choiceExpr{
																							pos: position{line: 2878, col: 10, offset: 95044},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2878, col: 10, offset: 95044},
																									val:        " ",
																									ignoreCase: false,
																									want:       "\" \"",
																								},
																								&actionExpr{
																									pos: position{line: 2878, col: 16, offset: 95050},
																									run: (*parser).callonDoubleQuoteMarkedTextElement108,
																									expr: &litMatcher{
																										pos:        position{line: 2878, col: 16, offset: 95050},
																										val:        "\t",
																										ignoreCase: false,
																										want:       "\"\\t\"",
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 491, col: 47, offset: 16017},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 491, col: 51, offset: 16021},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 501, col: 24, offset: 16434},
																							expr: &choiceExpr{
																								pos: position{line: 502, col: 5, offset: 16440},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 502, col: 6, offset: 16441},
																										run: (*parser).callonDoubleQuoteMarkedTextElement114,
																										expr: &seqExpr{
																											pos: position{line: 502, col: 6, offset: 16441},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 502, col: 6, offset: 16441},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 502, col: 14, offset: 16449},
																													expr: &charClassMatcher{
																														pos:        position{line: 502, col: 14, offset: 16449},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 449, col: 5, offset: 14443},
																										run: (*parser).callonDoubleQuoteMarkedTextElement119,
																										expr: &seqExpr{
																											pos: position{line: 449, col: 5, offset: 14443},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 449, col: 5, offset: 14443},
																													run: (*parser).callonDoubleQuoteMarkedTextElement121,
																												},
																												&labeledExpr{
																													pos:   position{line: 452, col: 5, offset: 14507},
																													label: "element",
																													expr: &choiceExpr{
																														pos: position{line: 452, col: 14, offset: 14516},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 463, col: 25, offset: 14978},
																																run: (*parser).callonDoubleQuoteMarkedTextElement124,
																																expr: &seqExpr{
																																	pos: position{line: 463, col: 25, offset: 14978},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 463, col: 25, offset: 14978},
																																			val:        "{counter:",
																																			ignoreCase: false,
																																			want:       "\"{counter:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 463, col: 37, offset: 14990},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 118, col: 18, offset: 3399},
																																				run: (*parser).callonDoubleQuoteMarkedTextElement128,
																																				expr: &seqExpr{
																																					pos: position{line: 118, col: 18, offset: 3399},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 118, col: 18, offset: 3399},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 118, col: 28, offset: 3409},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 118, col: 29, offset: 3410},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 463, col: 56, offset: 15009},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 463, col: 62, offset: 15015},
																																				expr: &actionExpr{
																																					pos: position{line: 471, col: 17, offset: 15278},
																																					run: (*parser).callonDoubleQuoteMarkedTextElement135,
																																					expr: &seqExpr{
																																						pos: position{line: 471, col: 17, offset: 15278},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 471, col: 17, offset: 15278},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 471, col: 21, offset: 15282},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 471, col: 28, offset: 15289},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 471, col: 28, offset: 15289},
																																											run: (*parser).callonDoubleQuoteMarkedTextElement140,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 471, col: 28, offset: 15289},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 473, col: 9, offset: 15343},
																																											run: (*parser).callonDoubleQuoteMarkedTextElement142,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 473, col: 9, offset: 15343},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 473, col: 9, offset: 15343},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 463, col: 78, offset: 15031},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 467, col: 25, offset: 15133},
																																run: (*parser).callonDoubleQuoteMarkedTextElement146,
																																expr: &seqExpr{
																																	pos: position{line: 467, col: 25, offset: 15133},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 467, col: 25, offset: 15133},
																																			val:        "{counter2:",
																																			ignoreCase: false,
																																			want:       "\"{counter2:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 467, col: 38, offset: 15146},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 118, col: 18, offset: 3399},
																																				run: (*parser).callonDoubleQuoteMarkedTextElement150,
																																				expr: &seqExpr{
																																					pos: position{line: 118, col: 18, offset: 3399},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 118, col: 18, offset: 3399},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 118, col: 28, offset: 3409},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 118, col: 29, offset: 3410},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 467, col: 57, offset: 15165},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 467, col: 63, offset: 15171},
																																				expr: &actionExpr{
																																					pos: position{line: 471, col: 17, offset: 15278},
																																					run: (*parser).callonDoubleQuoteMarkedTextElement157,
																																					expr: &seqExpr{
																																						pos: position{line: 471, col: 17, offset: 15278},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 471, col: 17, offset: 15278},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 471, col: 21, offset: 15282},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 471, col: 28, offset: 15289},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 471, col: 28, offset: 15289},
																																											run: (*parser).callonDoubleQuoteMarkedTextElement162,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 471, col: 28, offset: 15289},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 473, col: 9, offset: 15343},
																																											run: (*parser).callonDoubleQuoteMarkedTextElement164,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 473, col: 9, offset: 15343},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 473, col: 9, offset: 15343},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 467, col: 79, offset: 15187},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 456, col: 31, offset: 14633},
																																run: (*parser).callonDoubleQuoteMarkedTextElement168,
																																expr: &seqExpr{
																																	pos: position{line: 456, col: 31, offset: 14633},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 456, col: 31, offset: 14633},
																																			val:        "{",
																																			ignoreCase: false,
																																			want:       "\"{\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 456, col: 35, offset: 14637},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 118, col: 18, offset: 3399},
																																				run: (*parser).callonDoubleQuoteMarkedTextElement172,
																																				expr: &seqExpr{
																																					pos: position{line: 118, col: 18, offset: 3399},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 118, col: 18, offset: 3399},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 118, col: 28, offset: 3409},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 118, col: 29, offset: 3410},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 456, col: 54, offset: 14656},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 506, col: 8, offset: 16673},
																										run: (*parser).callonDoubleQuoteMarkedTextElement178,
																										expr: &litMatcher{
																											pos:        position{line: 506, col: 8, offset: 16673},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 491, col: 79, offset: 16049},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 493, col: 9, offset: 16122},
																			run: (*parser).callonDoubleQuoteMarkedTextElement181,
																			expr: &seqExpr{
																				pos: position{line: 493, col: 9, offset: 16122},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 493, col: 9, offset: 16122},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 493, col: 14, offset: 16127},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2866, col: 7, offset: 94768},
																							run: (*parser).callonDoubleQuoteMarkedTextElement185,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2866, col: 7, offset: 94768},
																								expr: &charClassMatcher{
																									pos:        position{line: 2866, col: 7, offset: 94768},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 493, col: 22, offset: 16135},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2595, col: 11, offset: 86299},
																run: (*parser).callonDoubleQuoteMarkedTextElement189,
																expr: &charClassMatcher{
																	pos:        position{line: 2595, col: 12, offset: 86300},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2620, col: 15, offset: 87267},
										run: (*parser).callonDoubleQuoteMarkedTextElement191,
										expr: &litMatcher{
											pos:        position{line: 2620, col: 15, offset: 87267},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&actionExpr{
										pos: position{line: 2626, col: 14, offset: 87382},
										run: (*parser).callonDoubleQuoteMarkedTextElement193,
										expr: &litMatcher{
											pos:        position{line: 2626, col: 14, offset: 87382},
											val:        "(C)",
											ignoreCase: false,
											want:       "\"(C)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2630, col: 14, offset: 87458},
										run: (*parser).callonDoubleQuoteMarkedTextElement195,
										expr: &litMatcher{
											pos:        position{line: 2630, col: 14, offset: 87458},
											val:        "(TM)",
											ignoreCase: false,
											want:       "\"(TM)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2634, col: 15, offset: 87536},
										run: (*parser).callonDoubleQuoteMarkedTextElement197,
										expr: &litMatcher{
											pos:        position{line: 2634, col: 15, offset: 87536},
											val:        "(R)",
											ignoreCase: false,
											want:       "\"(R)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2638, col: 13, offset: 87611},
										run: (*parser).callonDoubleQuoteMarkedTextElement199,
										expr: &litMatcher{
											pos:        position{line: 2638, col: 13, offset: 87611},
											val:        "...",
											ignoreCase: false,
											want:       "\"...\"",
										},
									},
									&actionExpr{
										pos: position{line: 2646, col: 22, offset: 87917},
										run: (*parser).callonDoubleQuoteMarkedTextElement201,
										expr: &seqExpr{
											pos: position{line: 2646, col: 22, offset: 87917},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2797, col: 13, offset: 92519},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 2646, col: 31, offset: 87926},
													val:        "'",
													ignoreCase: false,
													want:       "\"'\"",
												},
												&andExpr{
													pos: position{line: 2646, col: 35, offset: 87930},
													expr: &charClassMatcher{
														pos:        position{line: 2646, col: 36, offset: 87931},
														val:        "[\\pL]",
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2100, col: 11, offset: 70651},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 2101, col: 11, offset: 70673},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 2102, col: 11, offset: 70696},
										name: "QuotedTextInDoubleMarkedBoldText",
									},
									&actionExpr{
										pos: position{line: 947, col: 23, offset: 29896},
										run: (*parser).callonDoubleQuoteMarkedTextElement210,
										expr: &seqExpr{
											pos: position{line: 947, col: 23, offset: 29896},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 945, col: 32, offset: 29864},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
												&labeledExpr{
													pos:   position{line: 947, col: 51, offset: 29924},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 947, col: 56, offset: 29929},
														run: (*parser).callonDoubleQuoteMarkedTextElement214,
														expr: &oneOrMoreExpr{
															pos: position{line: 947, col: 56, offset: 29929},
															expr: &charClassMatcher{
																pos:        position{line: 947, col: 56, offset: 29929},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 945, col: 32, offset: 29864},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
											},
										},
									},
									&charClassMatcher{
										pos:        position{line: 2122, col: 5, offset: 71211},
										val:        "[^\\r\\n#]",
										chars:      []rune{'\r', '\n', '#'},
										ignoreCase: false,
										inverted:   true,
									},
									&actionExpr{
										pos: position{line: 2123, col: 7, offset: 71310},
										run: (*parser).callonDoubleQuoteMarkedTextElement219,
										expr: &seqExpr{
											pos: position{line: 2123, col: 7, offset: 71310},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2080, col: 35, offset: 70007},
													val:        "##",
													ignoreCase: false,
													want:       "\"##\"",
												},
												&actionExpr{
													pos: position{line: 2801, col: 14, offset: 92593},
													run: (*parser).callonDoubleQuoteMarkedTextElement222,
													expr: &oneOrMoreExpr{
														pos: position{line: 2801, col: 14, offset: 92593},
														expr: &charClassMatcher{
															pos:        position{line: 2801, col: 14, offset: 92593},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleMarkedBoldText",
			pos:  position{line: 2109, col: 1, offset: 70850},
			expr: &actionExpr{
				pos: position{line: 2110, col: 5, offset: 70890},
				run: (*parser).callonQuotedTextInDoubleMarkedBoldText1,
				expr: &seqExpr{
					pos: position{line: 2110, col: 5, offset: 70890},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2110, col: 5, offset: 70890},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2110, col: 16, offset: 70901},
								expr: &ruleRefExpr{
									pos:  position{line: 2110, col: 17, offset: 70902},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2111, col: 5, offset: 70928},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 2112, col: 9, offset: 70943},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2112, col: 9, offset: 70943},
										name: "SingleQuoteMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 2113, col: 11, offset: 70975},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 2114, col: 11, offset: 70994},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 2115, col: 11, offset: 71015},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 2116, col: 11, offset: 71039},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 2117, col: 11, offset: 71063},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 2134, col: 1, offset: 71717},
			expr: &actionExpr{
				pos: position{line: 2135, col: 5, offset: 71747},
				run: (*parser).callonSingleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 2135, col: 5, offset: 71747},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2130, col: 40, offset: 71669},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 2136, col: 5, offset: 71787},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2136, col: 15, offset: 71797},
								name: "SingleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 2132, col: 38, offset: 71711},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 2141, col: 1, offset: 71964},
			expr: &actionExpr{
				pos: position{line: 2142, col: 5, offset: 72002},
				run: (*parser).callonSingleQuoteMarkedTextElements1,
				expr: &seqExpr{
					pos: position{line: 2142, col: 5, offset: 72002},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2142, col: 5, offset: 72002},
							expr: &notExpr{
								pos: position{line: 2890, col: 8, offset: 95285},
								expr: &anyMatcher{
									line: 2890, col: 9, offset: 95286,
								},
							},
						},
						&notExpr{
							pos: position{line: 2142, col: 10, offset: 72007},
							expr: &choiceExpr{
								pos: position{line: 2878, col: 10, offset: 95044},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 2878, col: 10, offset: 95044},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
									&actionExpr{
										pos: position{line: 2878, col: 16, offset: 95050},
										run: (*parser).callonSingleQuoteMarkedTextElements9,
										expr: &litMatcher{
											pos:        position{line: 2878, col: 16, offset: 95050},
											val:        "\t",
											ignoreCase: false,
											want:       "\"\\t\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2143, col: 5, offset: 72046},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2143, col: 14, offset: 72055},
								expr: &ruleRefExpr{
									pos:  position{line: 2143, col: 15, offset: 72056},
									name: "SingleQuoteMarkedTextElement",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2144, col: 5, offset: 72092},
							run: (*parser).callonSingleQuoteMarkedTextElements14,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 2150, col: 1, offset: 72233},
			expr: &choiceExpr{
				pos: position{line: 2151, col: 5, offset: 72270},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2073, col: 5, offset: 69749},
						run: (*parser).callonSingleQuoteMarkedTextElement2,
						expr: &seqExpr{
							pos: position{line: 2073, col: 5, offset: 69749},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2073, col: 5, offset: 69749},
									expr: &charClassMatcher{
										pos:        position{line: 2073, col: 5, offset: 69749},
										val:        "[,?!;0-9\\pL]",
										chars:      []rune{',', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2073, col: 19, offset: 69763},
									expr: &choiceExpr{
										pos: position{line: 2073, col: 21, offset: 69765},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2878, col: 10, offset: 95044},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
											&actionExpr{
												pos: position{line: 2878, col: 16, offset: 95050},
												run: (*parser).callonSingleQuoteMarkedTextElement9,
												expr: &litMatcher{
													pos:        position{line: 2878, col: 16, offset: 95050},
													val:        "\t",
													ignoreCase: false,
													want:       "\"\\t\"",
												},
											},
											&litMatcher{
												pos:        position{line: 2070, col: 24, offset: 69721},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2882, col: 11, offset: 95109},
						run: (*parser).callonSingleQuoteMarkedTextElement12,
						expr: &oneOrMoreExpr{
							pos: position{line: 2882, col: 11, offset: 95109},
							expr: &charClassMatcher{
								pos:        position{line: 2882, col: 12, offset: 95110},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
					&seqExpr{
						pos: position{line: 2153, col: 7, offset: 72304},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 2886, col: 12, offset: 95178},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 2886, col: 12, offset: 95178},
										val:        "\n",
										ignoreCase: false,
										want:       "\"\\n\"",
									},
									&litMatcher{
										pos:        position{line: 2886, col: 19, offset: 95185},
										val:        "\r\n",
										ignoreCase: false,
										want:       "\"\\r\\n\"",
									},
									&actionExpr{
										pos: position{line: 2886, col: 28, offset: 95194},
										run: (*parser).callonSingleQuoteMarkedTextElement19,
										expr: &litMatcher{
											pos:        position{line: 2886, col: 28, offset: 95194},
											val:        "\r",
											ignoreCase: false,
											want:       "\"\\r\"",
										},
									},
								},
							},
							&notExpr{
								pos: position{line: 2153, col: 15, offset: 72312},
								expr: &choiceExpr{
									pos: position{line: 2886, col: 12, offset: 95178},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 2886, col: 12, offset: 95178},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
										&litMatcher{
											pos:        position{line: 2886, col: 19, offset: 95185},
											val:        "\r\n",
											ignoreCase: false,
											want:       "\"\\r\\n\"",
										},
										&actionExpr{
											pos: position{line: 2886, col: 28, offset: 95194},
											run: (*parser).callonSingleQuoteMarkedTextElement25,
											expr: &litMatcher{
												pos:        position{line: 2886, col: 28, offset: 95194},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 449, col: 5, offset: 14443},
						run: (*parser).callonSingleQuoteMarkedTextElement27,
						expr: &seqExpr{
							pos: position{line: 449, col: 5, offset: 14443},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 449, col: 5, offset: 14443},
									run: (*parser).callonSingleQuoteMarkedTextElement29,
								},
								&labeledExpr{
									pos:   position{line: 452, col: 5, offset: 14507},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 452, col: 14, offset: 14516},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 463, col: 25, offset: 14978},
												run: (*parser).callonSingleQuoteMarkedTextElement32,
												expr: &seqExpr{
													pos: position{line: 463, col: 25, offset: 14978},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 463, col: 25, offset: 14978},
															val:        "{counter:",
															ignoreCase: false,
															want:       "\"{counter:\"",
														},
														&labeledExpr{
															pos:   position{line: 463, col: 37, offset: 14990},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 118, col: 18, offset: 3399},
																run: (*parser).callonSingleQuoteMarkedTextElement36,
																expr: &seqExpr{
																	pos: position{line: 118, col: 18, offset: 3399},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 118, col: 18, offset: 3399},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 118, col: 28, offset: 3409},
																			expr: &charClassMatcher{
																				pos:        position{line: 118, col: 29, offset: 3410},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 463, col: 56, offset: 15009},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 463, col: 62, offset: 15015},
																expr: &actionExpr{
																	pos: position{line: 471, col: 17, offset: 15278},
																	run: (*parser).callonSingleQuoteMarkedTextElement43,
																	expr: &seqExpr{
																		pos: position{line: 471, col: 17, offset: 15278},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 471, col: 17, offset: 15278},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 471, col: 21, offset: 15282},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 471, col: 28, offset: 15289},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 471, col: 28, offset: 15289},
																							run: (*parser).callonSingleQuoteMarkedTextElement48,
																							expr: &charClassMatcher{
																								pos:        position{line: 471, col: 28, offset: 15289},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 473, col: 9, offset: 15343},
																							run: (*parser).callonSingleQuoteMarkedTextElement50,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 473, col: 9, offset: 15343},
																								expr: &charClassMatcher{
																									pos:        position{line: 473, col: 9, offset: 15343},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 463, col: 78, offset: 15031},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 467, col: 25, offset: 15133},
												run: (*parser).callonSingleQuoteMarkedTextElement54,
												expr: &seqExpr{
													pos: position{line: 467, col: 25, offset: 15133},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 467, col: 25, offset: 15133},
															val:        "{counter2:",
															ignoreCase: false,
															want:       "\"{counter2:\"",
														},
														&labeledExpr{
															pos:   position{line: 467, col: 38, offset: 15146},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 118, col: 18, offset: 3399},
																run: (*parser).callonSingleQuoteMarkedTextElement58,
																expr: &seqExpr{
																	pos: position{line: 118, col: 18, offset: 3399},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 118, col: 18, offset: 3399},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 118, col: 28, offset: 3409},
																			expr: &charClassMatcher{
																				pos:        position{line: 118, col: 29, offset: 3410},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 467, col: 57, offset: 15165},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 467, col: 63, offset: 15171},
																expr: &actionExpr{
																	pos: position{line: 471, col: 17, offset: 15278},
																	run: (*parser).callonSingleQuoteMarkedTextElement65,
																	expr: &seqExpr{
																		pos: position{line: 471, col: 17, offset: 15278},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 471, col: 17, offset: 15278},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 471, col: 21, offset: 15282},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 471, col: 28, offset: 15289},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 471, col: 28, offset: 15289},
																							run: (*parser).callonSingleQuoteMarkedTextElement70,
																							expr: &charClassMatcher{
																								pos:        position{line: 471, col: 28, offset: 15289},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 473, col: 9, offset: 15343},
																							run: (*parser).callonSingleQuoteMarkedTextElement72,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 473, col: 9, offset: 15343},
																								expr: &charClassMatcher{
																									pos:        position{line: 473, col: 9, offset: 15343},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 467, col: 79, offset: 15187},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 456, col: 31, offset: 14633},
												run: (*parser).callonSingleQuoteMarkedTextElement76,
												expr: &seqExpr{
													pos: position{line: 456, col: 31, offset: 14633},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 456, col: 31, offset: 14633},
															val:        "{",
															ignoreCase: false,
															want:       "\"{\"",
														},
														&labeledExpr{
															pos:   position{line: 456, col: 35, offset: 14637},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 118, col: 18, offset: 3399},
																run: (*parser).callonSingleQuoteMarkedTextElement80,
																expr: &seqExpr{
																	pos: position{line: 118, col: 18, offset: 3399},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 118, col: 18, offset: 3399},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 118, col: 28, offset: 3409},
																			expr: &charClassMatcher{
																				pos:        position{line: 118, col: 29, offset: 3410},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 456, col: 54, offset: 14656},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2587, col: 5, offset: 86026},
						run: (*parser).callonSingleQuoteMarkedTextElement86,
						expr: &seqExpr{
							pos: position{line: 2587, col: 5, offset: 86026},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 2587, col: 5, offset: 86026},
									run: (*parser).callonSingleQuoteMarkedTextElement88,
								},
								&labeledExpr{
									pos:   position{line: 2590, col: 5, offset: 86097},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 2592, col: 9, offset: 86195},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 2592, col: 9, offset: 86195},
												run: (*parser).callonSingleQuoteMarkedTextElement91,
												expr: &choiceExpr{
													pos: position{line: 491, col: 27, offset: 15997},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 491, col: 27, offset: 15997},
															run: (*parser).callonSingleQuoteMarkedTextElement93,
															expr: &seqExpr{
																pos: position{line: 491, col: 27, offset: 15997},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 491, col: 27, offset: 15997},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 491, col: 32, offset: 16002},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 2866, col: 7, offset: 94768},
																			run: (*parser).callonSingleQuoteMarkedTextElement97,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2866, col: 7, offset: 94768},
																				expr: &charClassMatcher{
																					pos:        position{line: 2866, col: 7, offset: 94768},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 491, col: 40, offset: 16010},
																		expr: &choiceExpr{
																			pos: position{line: 2878, col: 10, offset: 95044},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2878, col: 10, offset: 95044},
																					val:        " ",
																					ignoreCase: false,
																					want:       "\" \"",
																				},
																				&actionExpr{
																					pos: position{line: 2878, col: 16, offset: 95050},
																					run: (*parser).callonSingleQuoteMarkedTextElement103,
																					expr: &litMatcher{
																						pos:        position{line: 2878, col: 16, offset: 95050},
																						val:        "\t",
																						ignoreCase: false,
																						want:       "\"\\t\"",
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 491, col: 47, offset: 16017},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 491, col: 51, offset: 16021},
																		label: "label",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 501, col: 24, offset: 16434},
																			expr: &choiceExpr{
																				pos: position{line: 502, col: 5, offset: 16440},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 502, col: 6, offset: 16441},
																						run: (*parser).callonSingleQuoteMarkedTextElement109,
																						expr: &seqExpr{
																							pos: position{line: 502, col: 6, offset: 16441},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 502, col: 6, offset: 16441},
																									val:        "[0-9\\pL]",
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&oneOrMoreExpr{
																									pos: position{line: 502, col: 14, offset: 16449},
																									expr: &charClassMatcher{
																										pos:        position{line: 502, col: 14, offset: 16449},
																										val:        "[^\\r\\n{<>]",
																										chars:      []rune{'\r', '\n', '{', '<', '>'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 449, col: 5, offset: 14443},
																						run: (*parser).callonSingleQuoteMarkedTextElement114,
																						expr: &seqExpr{
																							pos: position{line: 449, col: 5, offset: 14443},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 449, col: 5, offset: 14443},
																									run: (*parser).callonSingleQuoteMarkedTextElement116,
																								},
																								&labeledExpr{
																									pos:   position{line: 452, col: 5, offset: 14507},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 452, col: 14, offset: 14516},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 463, col: 25, offset: 14978},
																												run: (*parser).callonSingleQuoteMarkedTextElement119,
																												expr: &seqExpr{
																													pos: position{line: 463, col: 25, offset: 14978},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 463, col: 25, offset: 14978},
																															val:        "{counter:",
																															ignoreCase: false,
																															want:       "\"{counter:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 463, col: 37, offset: 14990},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 118, col: 18, offset: 3399},
																																run: (*parser).callonSingleQuoteMarkedTextElement123,
																																expr: &seqExpr{
																																	pos: position{line: 118, col: 18, offset: 3399},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 118, col: 18, offset: 3399},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 118, col: 28, offset: 3409},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 118, col: 29, offset: 3410},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 463, col: 56, offset: 15009},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 463, col: 62, offset: 15015},
																																expr: &actionExpr{
																																	pos: position{line: 471, col: 17, offset: 15278},
																																	run: (*parser).callonSingleQuoteMarkedTextElement130,
																																	expr: &seqExpr{
																																		pos: position{line: 471, col: 17, offset: 15278},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 471, col: 17, offset: 15278},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 471, col: 21, offset: 15282},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 471, col: 28, offset: 15289},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 471, col: 28, offset: 15289},
																																							run: (*parser).callonSingleQuoteMarkedTextElement135,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 471, col: 28, offset: 15289},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 473, col: 9, offset: 15343},
																																							run: (*parser).callonSingleQuoteMarkedTextElement137,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 473, col: 9, offset: 15343},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 473, col: 9, offset: 15343},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 463, col: 78, offset: 15031},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 467, col: 25, offset: 15133},
																												run: (*parser).callonSingleQuoteMarkedTextElement141,
																												expr: &seqExpr{
																													pos: position{line: 467, col: 25, offset: 15133},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 467, col: 25, offset: 15133},
																															val:        "{counter2:",
																															ignoreCase: false,
																															want:       "\"{counter2:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 467, col: 38, offset: 15146},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 118, col: 18, offset: 3399},
																																run: (*parser).callonSingleQuoteMarkedTextElement145,
																																expr: &seqExpr{
																																	pos: position{line: 118, col: 18, offset: 3399},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 118, col: 18, offset: 3399},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 118, col: 28, offset: 3409},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 118, col: 29, offset: 3410},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 467, col: 57, offset: 15165},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 467, col: 63, offset: 15171},
																																expr: &actionExpr{
																																	pos: position{line: 471, col: 17, offset: 15278},
																																	run: (*parser).callonSingleQuoteMarkedTextElement152,
																																	expr: &seqExpr{
																																		pos: position{line: 471, col: 17, offset: 15278},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 471, col: 17, offset: 15278},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 471, col: 21, offset: 15282},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 471, col: 28, offset: 15289},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 471, col: 28, offset: 15289},
																																							run: (*parser).callonSingleQuoteMarkedTextElement157,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 471, col: 28, offset: 15289},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 473, col: 9, offset: 15343},
																																							run: (*parser).callonSingleQuoteMarkedTextElement159,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 473, col: 9, offset: 15343},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 473, col: 9, offset: 15343},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 467, col: 79, offset: 15187},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 456, col: 31, offset: 14633},
																												run: (*parser).callonSingleQuoteMarkedTextElement163,
																												expr: &seqExpr{
																													pos: position{line: 456, col: 31, offset: 14633},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 456, col: 31, offset: 14633},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 456, col: 35, offset: 14637},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 118, col: 18, offset: 3399},
																																run: (*parser).callonSingleQuoteMarkedTextElement167,
																																expr: &seqExpr{
																																	pos: position{line: 118, col: 18, offset: 3399},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 118, col: 18, offset: 3399},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 118, col: 28, offset: 3409},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 118, col: 29, offset: 3410},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 456, col: 54, offset: 14656},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 506, col: 8, offset: 16673},
																						run: (*parser).callonSingleQuoteMarkedTextElement173,
																						expr: &litMatcher{
																							pos:        position{line: 506, col: 8, offset: 16673},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 491, col: 79, offset: 16049},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 493, col: 9, offset: 16122},
															run: (*parser).callonSingleQuoteMarkedTextElement176,
															expr: &seqExpr{
																pos: position{line: 493, col: 9, offset: 16122},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 493, col: 9, offset: 16122},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 493, col: 14, offset: 16127},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 2866, col: 7, offset: 94768},
																			run: (*parser).callonSingleQuoteMarkedTextElement180,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2866, col: 7, offset: 94768},
																				expr: &charClassMatcher{
																					pos:        position{line: 2866, col: 7, offset: 94768},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 493, col: 22, offset: 16135},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 2595, col: 11, offset: 86299},
												run: (*parser).callonSingleQuoteMarkedTextElement184,
												expr: &charClassMatcher{
													pos:        position{line: 2595, col: 12, offset: 86300},
													val:        "[<>&]",
													chars:      []rune{'<', '>', '&'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2620, col: 15, offset: 87267},
						run: (*parser).callonSingleQuoteMarkedTextElement186,
						expr: &litMatcher{
							pos:        position{line: 2620, col: 15, offset: 87267},
							val:        "`'",
							ignoreCase: false,
							want:       "\"`'\"",
						},
					},
					&actionExpr{
						pos: position{line: 2626, col: 14, offset: 87382},
						run: (*parser).callonSingleQuoteMarkedTextElement188,
						expr: &litMatcher{
							pos:        position{line: 2626, col: 14, offset: 87382},
							val:        "(C)",
							ignoreCase: false,
							want:       "\"(C)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2630, col: 14, offset: 87458},
						run: (*parser).callonSingleQuoteMarkedTextElement190,
						expr: &litMatcher{
							pos:        position{line: 2630, col: 14, offset: 87458},
							val:        "(TM)",
							ignoreCase: false,
							want:       "\"(TM)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2634, col: 15, offset: 87536},
						run: (*parser).callonSingleQuoteMarkedTextElement192,
						expr: &litMatcher{
							pos:        position{line: 2634, col: 15, offset: 87536},
							val:        "(R)",
							ignoreCase: false,
							want:       "\"(R)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2638, col: 13, offset: 87611},
						run: (*parser).callonSingleQuoteMarkedTextElement194,
						expr: &litMatcher{
							pos:        position{line: 2638, col: 13, offset: 87611},
							val:        "...",
							ignoreCase: false,
							want:       "\"...\"",
						},
					},
					&actionExpr{
						pos: position{line: 2646, col: 22, offset: 87917},
						run: (*parser).callonSingleQuoteMarkedTextElement196,
						expr: &seqExpr{
							pos: position{line: 2646, col: 22, offset: 87917},
							exprs: []interface{}{
								&charClassMatcher{
									pos:        position{line: 2797, col: 13, offset: 92519},
									val:        "[0-9\\pL]",
									ranges:     []rune{'0', '9'},
									classes:    []*unicode.RangeTable{rangeTable("L")},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 2646, col: 31, offset: 87926},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&andExpr{
									pos: position{line: 2646, col: 35, offset: 87930},
									expr: &charClassMatcher{
										pos:        position{line: 2646, col: 36, offset: 87931},
										val:        "[\\pL]",
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2157, col: 7, offset: 72425},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 2158, col: 7, offset: 72443},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 2159, col: 7, offset: 72462},
						name: "QuotedTextInSingleQuoteMarkedText",
					},
					&actionExpr{
						pos: position{line: 947, col: 23, offset: 29896},
						run: (*parser).callonSingleQuoteMarkedTextElement205,
						expr: &seqExpr{
							pos: position{line: 947, col: 23, offset: 29896},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 945, col: 32, offset: 29864},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
								&labeledExpr{
									pos:   position{line: 947, col: 51, offset: 29924},
									label: "ref",
									expr: &actionExpr{
										pos: position{line: 947, col: 56, offset: 29929},
										run: (*parser).callonSingleQuoteMarkedTextElement209,
										expr: &oneOrMoreExpr{
											pos: position{line: 947, col: 56, offset: 29929},
											expr: &charClassMatcher{
												pos:        position{line: 947, col: 56, offset: 29929},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 945, col: 32, offset: 29864},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
							},
						},
					},
					&charClassMatcher{
						pos:        position{line: 2176, col: 5, offset: 72929},
						val:        "[^\\r\\n #]",
						chars:      []rune{'\r', '\n', ' ', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 2177, col: 7, offset: 73034},
						run: (*parser).callonSingleQuoteMarkedTextElement214,
						expr: &seqExpr{
							pos: position{line: 2177, col: 7, offset: 73034},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2177, col: 7, offset: 73034},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&actionExpr{
									pos: position{line: 2801, col: 14, offset: 92593},
									run: (*parser).callonSingleQuoteMarkedTextElement217,
									expr: &oneOrMoreExpr{
										pos: position{line: 2801, col: 14, offset: 92593},
										expr: &charClassMatcher{
											pos:        position{line: 2801, col: 14, offset: 92593},
											val:        "[0-9\\pL]",
											ranges:     []rune{'0', '9'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteMarkedText",
			pos:  position{line: 2163, col: 1, offset: 72567},
			expr: &actionExpr{
				pos: position{line: 2164, col: 5, offset: 72608},
				run: (*parser).callonQuotedTextInSingleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 2164, col: 5, offset: 72608},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2164, col: 5, offset: 72608},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2164, col: 16, offset: 72619},
								expr: &ruleRefExpr{
									pos:  position{line: 2164, col: 17, offset: 72620},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2165, col: 5, offset: 72646},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 2166, col: 9, offset: 72661},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2166, col: 9, offset: 72661},
										name: "DoubleQuoteMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 2167, col: 11, offset: 72693},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 2168, col: 11, offset: 72712},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 2169, col: 11, offset: 72733},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 2170, col: 11, offset: 72757},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 2171, col: 11, offset: 72781},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 2181, col: 1, offset: 73209},
			expr: &choiceExpr{
				pos: position{line: 2182, col: 5, offset: 73234},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2182, col: 5, offset: 73234},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 2182, col: 5, offset: 73234},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2182, col: 5, offset: 73234},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1684, col: 25, offset: 55764},
										run: (*parser).callonEscapedMarkedText5,
										expr: &seqExpr{
											pos: position{line: 1684, col: 25, offset: 55764},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1684, col: 25, offset: 55764},
													val:        "\\\\",
													ignoreCase: false,
													want:       "\"\\\\\\\\\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1684, col: 30, offset: 55769},
													expr: &litMatcher{
														pos:        position{line: 1684, col: 30, offset: 55769},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2182, col: 40, offset: 73269},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 2182, col: 45, offset: 73274},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2182, col: 55, offset: 73284},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2182, col: 86, offset: 73315},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2184, col: 9, offset: 73472},
						run: (*parser).callonEscapedMarkedText14,
						expr: &seqExpr{
							pos: position{line: 2184, col: 9, offset: 73472},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2184, col: 9, offset: 73472},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1680, col: 25, offset: 55691},
										run: (*parser).callonEscapedMarkedText17,
										expr: &oneOrMoreExpr{
											pos: position{line: 1680, col: 25, offset: 55691},
											expr: &litMatcher{
												pos:        position{line: 1680, col: 25, offset: 55691},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2184, col: 44, offset: 73507},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 2184, col: 49, offset: 73512},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2184, col: 59, offset: 73522},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2184, col: 90, offset: 73553},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2187, col: 9, offset: 73753},
						run: (*parser).callonEscapedMarkedText24,
						expr: &seqExpr{
							pos: position{line: 2187, col: 9, offset: 73753},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2187, col: 9, offset: 73753},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1680, col: 25, offset: 55691},
										run: (*parser).callonEscapedMarkedText27,
										expr: &oneOrMoreExpr{
											pos: position{line: 1680, col: 25, offset: 55691},
											expr: &litMatcher{
												pos:        position{line: 1680, col: 25, offset: 55691},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2187, col: 44, offset: 73788},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 2187, col: 48, offset: 73792},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2187, col: 58, offset: 73802},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2187, col: 89, offset: 73833},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 2194, col: 1, offset: 74145},
			expr: &actionExpr{
				pos: position{line: 2195, col: 5, offset: 74167},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 2195, col: 5, offset: 74167},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2201, col: 27, offset: 74382},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 2196, col: 5, offset: 74194},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 2196, col: 14, offset: 74203},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 2201, col: 27, offset: 74382},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 2203, col: 1, offset: 74387},
			expr: &choiceExpr{
				pos: position{line: 2203, col: 25, offset: 74411},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2203, col: 25, offset: 74411},
						name: "QuotedText",
					},
					&actionExpr{
						pos: position{line: 2205, col: 21, offset: 74463},
						run: (*parser).callonSubscriptTextElement3,
						expr: &oneOrMoreExpr{
							pos: position{line: 2205, col: 21, offset: 74463},
							expr: &charClassMatcher{
								pos:        position{line: 2205, col: 21, offset: 74463},
								val:        "[^\\r\\n ~]",
								chars:      []rune{'\r', '\n', ' ', '~'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 2209, col: 1, offset: 74548},
			expr: &actionExpr{
				pos: position{line: 2210, col: 5, offset: 74577},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 2210, col: 5, offset: 74577},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2210, col: 5, offset: 74577},
							label: "backslashes",
							expr: &actionExpr{
								pos: position{line: 1680, col: 25, offset: 55691},
								run: (*parser).callonEscapedSubscriptText4,
								expr: &oneOrMoreExpr{
									pos: position{line: 1680, col: 25, offset: 55691},
									expr: &litMatcher{
										pos:        position{line: 1680, col: 25, offset: 55691},
										val:        "\\",
										ignoreCase: false,
										want:       "\"\\\\\"",
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 2201, col: 27, offset: 74382},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 2212, col: 5, offset: 74645},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 2212, col: 14, offset: 74654},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 2201, col: 27, offset: 74382},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 2220, col: 1, offset: 74917},
			expr: &actionExpr{
				pos: position{line: 2221, col: 5, offset: 74941},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 2221, col: 5, offset: 74941},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2227, col: 29, offset: 75168},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 2222, col: 5, offset: 74971},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 2222, col: 14, offset: 74980},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 2227, col: 29, offset: 75168},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 2229, col: 1, offset: 75173},
			expr: &choiceExpr{
				pos: position{line: 2229, col: 27, offset: 75199},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2229, col: 27, offset: 75199},
						name: "QuotedText",
					},
					&actionExpr{
						pos: position{line: 2231, col: 23, offset: 75255},
						run: (*parser).callonSuperscriptTextElement3,
						expr: &oneOrMoreExpr{
							pos: position{line: 2231, col: 23, offset: 75255},
							expr: &charClassMatcher{
								pos:        position{line: 2231, col: 23, offset: 75255},
								val:        "[^\\r\\n ^]",
								chars:      []rune{'\r', '\n', ' ', '^'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 2235, col: 1, offset: 75340},
			expr: &actionExpr{
				pos: position{line: 2236, col: 5, offset: 75371},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 2236, col: 5, offset: 75371},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2236, col: 5, offset: 75371},
							label: "backslashes",
							expr: &actionExpr{
								pos: position{line: 1680, col: 25, offset: 55691},
								run: (*parser).callonEscapedSuperscriptText4,
								expr: &oneOrMoreExpr{
									pos: position{line: 1680, col: 25, offset: 55691},
									expr: &litMatcher{
										pos:        position{line: 1680, col: 25, offset: 55691},
										val:        "\\",
										ignoreCase: false,
										want:       "\"\\\\\"",
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 2227, col: 29, offset: 75168},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 2238, col: 5, offset: 75441},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 2238, col: 14, offset: 75450},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 2227, col: 29, offset: 75168},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 2247, col: 1, offset: 75898},
			expr: &choiceExpr{
				pos: position{line: 2247, col: 17, offset: 75914},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2247, col: 17, offset: 75914},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 2247, col: 38, offset: 75935},
						name: "DoubleQuotedString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 2249, col: 1, offset: 75955},
			expr: &actionExpr{
				pos: position{line: 2250, col: 5, offset: 75982},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 2250, col: 5, offset: 75982},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2261, col: 27, offset: 76313},
							val:        "'`",
							ignoreCase: false,
							want:       "\"'`\"",
						},
						&notExpr{
							pos: position{line: 2261, col: 32, offset: 76318},
							expr: &charClassMatcher{
								pos:        position{line: 2261, col: 33, offset: 76319},
								val:        "[ \\t\\r\\n]",
								chars:      []rune{' ', '\t', '\r', '\n'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 2251, col: 5, offset: 76010},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2251, col: 14, offset: 76019},
								name: "SingleQuotedStringElements",
							},
						},
						&litMatcher{
							pos:        position{line: 2263, col: 25, offset: 76354},
							val:        "`'",
							ignoreCase: false,
							want:       "\"`'\"",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 2256, col: 1, offset: 76163},
			expr: &actionExpr{
				pos: position{line: 2257, col: 5, offset: 76198},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 2257, col: 5, offset: 76198},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 2257, col: 14, offset: 76207},
						expr: &ruleRefExpr{
							pos:  position{line: 2257, col: 15, offset: 76208},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 2270, col: 1, offset: 76567},
			expr: &actionExpr{
				pos: position{line: 2271, col: 5, offset: 76601},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &seqExpr{
					pos: position{line: 2271, col: 5, offset: 76601},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2271, col: 5, offset: 76601},
							expr: &litMatcher{
								pos:        position{line: 2263, col: 25, offset: 76354},
								val:        "`'",
								ignoreCase: false,
								want:       "\"`'\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 2272, col: 5, offset: 76627},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2273, col: 9, offset: 76645},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2265, col: 21, offset: 76380},
										run: (*parser).callonSingleQuotedStringElement7,
										expr: &seqExpr{
											pos: position{line: 2265, col: 21, offset: 76380},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2265, col: 21, offset: 76380},
													expr: &charClassMatcher{
														pos:        position{line: 2265, col: 21, offset: 76380},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 2265, col: 31, offset: 76390},
													expr: &choiceExpr{
														pos: position{line: 2265, col: 33, offset: 76392},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2878, col: 10, offset: 95044},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2878, col: 16, offset: 95050},
																run: (*parser).callonSingleQuotedStringElement14,
																expr: &litMatcher{
																	pos:        position{line: 2878, col: 16, offset: 95050},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
															&litMatcher{
																pos:        position{line: 2263, col: 25, offset: 76354},
																val:        "`'",
																ignoreCase: false,
																want:       "\"`'\"",
															},
														},
													},
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 2274, col: 11, offset: 76672},
										exprs: []interface{}{
											&choiceExpr{
												pos: position{line: 2886, col: 12, offset: 95178},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2886, col: 12, offset: 95178},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
													&litMatcher{
														pos:        position{line: 2886, col: 19, offset: 95185},
														val:        "\r\n",
														ignoreCase: false,
														want:       "\"\\r\\n\"",
													},
													&actionExpr{
														pos: position{line: 2886, col: 28, offset: 95194},
														run: (*parser).callonSingleQuotedStringElement21,
														expr: &litMatcher{
															pos:        position{line: 2886, col: 28, offset: 95194},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 2274, col: 19, offset: 76680},
												expr: &choiceExpr{
													pos: position{line: 2886, col: 12, offset: 95178},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2886, col: 12, offset: 95178},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2886, col: 19, offset: 95185},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&actionExpr{
															pos: position{line: 2886, col: 28, offset: 95194},
															run: (*parser).callonSingleQuotedStringElement27,
															expr: &litMatcher{
																pos:        position{line: 2886, col: 28, offset: 95194},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 449, col: 5, offset: 14443},
										run: (*parser).callonSingleQuotedStringElement29,
										expr: &seqExpr{
											pos: position{line: 449, col: 5, offset: 14443},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 449, col: 5, offset: 14443},
													run: (*parser).callonSingleQuotedStringElement31,
												},
												&labeledExpr{
													pos:   position{line: 452, col: 5, offset: 14507},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 452, col: 14, offset: 14516},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 463, col: 25, offset: 14978},
																run: (*parser).callonSingleQuotedStringElement34,
																expr: &seqExpr{
																	pos: position{line: 463, col: 25, offset: 14978},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 463, col: 25, offset: 14978},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 463, col: 37, offset: 14990},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 118, col: 18, offset: 3399},
																				run: (*parser).callonSingleQuotedStringElement38,
																				expr: &seqExpr{
																					pos: position{line: 118, col: 18, offset: 3399},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 118, col: 18, offset: 3399},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 118, col: 28, offset: 3409},
																							expr: &charClassMatcher{
																								pos:        position{line: 118, col: 29, offset: 3410},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 463, col: 56, offset: 15009},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 463, col: 62, offset: 15015},
																				expr: &actionExpr{
																					pos: position{line: 471, col: 17, offset: 15278},
																					run: (*parser).callonSingleQuotedStringElement45,
																					expr: &seqExpr{
																						pos: position{line: 471, col: 17, offset: 15278},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 471, col: 17, offset: 15278},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 471, col: 21, offset: 15282},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 471, col: 28, offset: 15289},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 471, col: 28, offset: 15289},
																											run: (*parser).callonSingleQuotedStringElement50,
																											expr: &charClassMatcher{
																												pos:        position{line: 471, col: 28, offset: 15289},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 473, col: 9, offset: 15343},
																											run: (*parser).callonSingleQuotedStringElement52,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 473, col: 9, offset: 15343},
																												expr: &charClassMatcher{
																													pos:        position{line: 473, col: 9, offset: 15343},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 463, col: 78, offset: 15031},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 467, col: 25, offset: 15133},
																run: (*parser).callonSingleQuotedStringElement56,
																expr: &seqExpr{
																	pos: position{line: 467, col: 25, offset: 15133},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 467, col: 25, offset: 15133},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 467, col: 38, offset: 15146},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 118, col: 18, offset: 3399},
																				run: (*parser).callonSingleQuotedStringElement60,
																				expr: &seqExpr{
																					pos: position{line: 118, col: 18, offset: 3399},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 118, col: 18, offset: 3399},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 118, col: 28, offset: 3409},
																							expr: &charClassMatcher{
																								pos:        position{line: 118, col: 29, offset: 3410},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 467, col: 57, offset: 15165},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 467, col: 63, offset: 15171},
																				expr: &actionExpr{
																					pos: position{line: 471, col: 17, offset: 15278},
																					run: (*parser).callonSingleQuotedStringElement67,
																					expr: &seqExpr{
																						pos: position{line: 471, col: 17, offset: 15278},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 471, col: 17, offset: 15278},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 471, col: 21, offset: 15282},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 471, col: 28, offset: 15289},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 471, col: 28, offset: 15289},
																											run: (*parser).callonSingleQuotedStringElement72,
																											expr: &charClassMatcher{
																												pos:        position{line: 471, col: 28, offset: 15289},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 473, col: 9, offset: 15343},
																											run: (*parser).callonSingleQuotedStringElement74,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 473, col: 9, offset: 15343},
																												expr: &charClassMatcher{
																													pos:        position{line: 473, col: 9, offset: 15343},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 467, col: 79, offset: 15187},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 456, col: 31, offset: 14633},
																run: (*parser).callonSingleQuotedStringElement78,
																expr: &seqExpr{
																	pos: position{line: 456, col: 31, offset: 14633},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 456, col: 31, offset: 14633},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 456, col: 35, offset: 14637},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 118, col: 18, offset: 3399},
																				run: (*parser).callonSingleQuotedStringElement82,
																				expr: &seqExpr{
																					pos: position{line: 118, col: 18, offset: 3399},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 118, col: 18, offset: 3399},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 118, col: 28, offset: 3409},
																							expr: &charClassMatcher{
																								pos:        position{line: 118, col: 29, offset: 3410},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 456, col: 54, offset: 14656},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2587, col: 5, offset: 86026},
										run: (*parser).callonSingleQuotedStringElement88,
										expr: &seqExpr{
											pos: position{line: 2587, col: 5, offset: 86026},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2587, col: 5, offset: 86026},
													run: (*parser).callonSingleQuotedStringElement90,
												},
												&labeledExpr{
													pos:   position{line: 2590, col: 5, offset: 86097},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2592, col: 9, offset: 86195},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2592, col: 9, offset: 86195},
																run: (*parser).callonSingleQuotedStringElement93,
																expr: &choiceExpr{
																	pos: position{line: 491, col: 27, offset: 15997},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 491, col: 27, offset: 15997},
																			run: (*parser).callonSingleQuotedStringElement95,
																			expr: &seqExpr{
																				pos: position{line: 491, col: 27, offset: 15997},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 491, col: 27, offset: 15997},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 491, col: 32, offset: 16002},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2866, col: 7, offset: 94768},
																							run: (*parser).callonSingleQuotedStringElement99,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2866, col: 7, offset: 94768},
																								expr: &charClassMatcher{
																									pos:        position{line: 2866, col: 7, offset: 94768},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 491, col: 40, offset: 16010},
																						expr: &choiceExpr{
																							pos: position{line: 2878, col: 10, offset: 95044},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2878, col: 10, offset: 95044},
																									val:        " ",
																									ignoreCase: false,
																									want:       "\" \"",
																								},
																								&actionExpr{
																									pos: position{line: 2878, col: 16, offset: 95050},
																									run: (*parser).callonSingleQuotedStringElement105,
																									expr: &litMatcher{
																										pos:        position{line: 2878, col: 16, offset: 95050},
																										val:        "\t",
																										ignoreCase: false,
																										want:       "\"\\t\"",
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 491, col: 47, offset: 16017},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 491, col: 51, offset: 16021},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 501, col: 24, offset: 16434},
																							expr: &choiceExpr{
																								pos: position{line: 502, col: 5, offset: 16440},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 502, col: 6, offset: 16441},
																										run: (*parser).callonSingleQuotedStringElement111,
																										expr: &seqExpr{
																											pos: position{line: 502, col: 6, offset: 16441},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 502, col: 6, offset: 16441},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 502, col: 14, offset: 16449},
																													expr: &charClassMatcher{
																														pos:        position{line: 502, col: 14, offset: 16449},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 449, col: 5, offset: 14443},
																										run: (*parser).callonSingleQuotedStringElement116,
																										expr: &seqExpr{
																											pos: position{line: 449, col: 5, offset: 14443},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 449, col: 5, offset: 14443},
																													run: (*parser).callonSingleQuotedStringElement118,
																												},
																												&labeledExpr{
																													pos:   position{line: 452, col: 5, offset: 14507},
																													label: "element",
																													expr: &choiceExpr{
																														pos: position{line: 452, col: 14, offset: 14516},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 463, col: 25, offset: 14978},
																																run: (*parser).callonSingleQuotedStringElement121,
																																expr: &seqExpr{
																																	pos: position{line: 463, col: 25, offset: 14978},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 463, col: 25, offset: 14978},
																																			val:        "{counter:",
																																			ignoreCase: false,
																																			want:       "\"{counter:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 463, col: 37, offset: 14990},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 118, col: 18, offset: 3399},
																																				run: (*parser).callonSingleQuotedStringElement125,
																																				expr: &seqExpr{
																																					pos: position{line: 118, col: 18, offset: 3399},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 118, col: 18, offset: 3399},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 118, col: 28, offset: 3409},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 118, col: 29, offset: 3410},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 463, col: 56, offset: 15009},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 463, col: 62, offset: 15015},
																																				expr: &actionExpr{
																																					pos: position{line: 471, col: 17, offset: 15278},
																																					run: (*parser).callonSingleQuotedStringElement132,
																																					expr: &seqExpr{
																																						pos: position{line: 471, col: 17, offset: 15278},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 471, col: 17, offset: 15278},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 471, col: 21, offset: 15282},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 471, col: 28, offset: 15289},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 471, col: 28, offset: 15289},
																																											run: (*parser).callonSingleQuotedStringElement137,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 471, col: 28, offset: 15289},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 473, col: 9, offset: 15343},
																																											run: (*parser).callonSingleQuotedStringElement139,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 473, col: 9, offset: 15343},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 473, col: 9, offset: 15343},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 463, col: 78, offset: 15031},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 467, col: 25, offset: 15133},
																																run: (*parser).callonSingleQuotedStringElement143,
																																expr: &seqExpr{
																																	pos: position{line: 467, col: 25, offset: 15133},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 467, col: 25, offset: 15133},
																																			val:        "{counter2:",
																																			ignoreCase: false,
																																			want:       "\"{counter2:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 467, col: 38, offset: 15146},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 118, col: 18, offset: 3399},
																																				run: (*parser).callonSingleQuotedStringElement147,
																																				expr: &seqExpr{
																																					pos: position{line: 118, col: 18, offset: 3399},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 118, col: 18, offset: 3399},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 118, col: 28, offset: 3409},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 118, col: 29, offset: 3410},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 467, col: 57, offset: 15165},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 467, col: 63, offset: 15171},
																																				expr: &actionExpr{
																																					pos: position{line: 471, col: 17, offset: 15278},
																																					run: (*parser).callonSingleQuotedStringElement154,
																																					expr: &seqExpr{
																																						pos: position{line: 471, col: 17, offset: 15278},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 471, col: 17, offset: 15278},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 471, col: 21, offset: 15282},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 471, col: 28, offset: 15289},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 471, col: 28, offset: 15289},
																																											run: (*parser).callonSingleQuotedStringElement159,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 471, col: 28, offset: 15289},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 473, col: 9, offset: 15343},
																																											run: (*parser).callonSingleQuotedStringElement161,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 473, col: 9, offset: 15343},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 473, col: 9, offset: 15343},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 467, col: 79, offset: 15187},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 456, col: 31, offset: 14633},
																																run: (*parser).callonSingleQuotedStringElement165,
																																expr: &seqExpr{
																																	pos: position{line: 456, col: 31, offset: 14633},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 456, col: 31, offset: 14633},
																																			val:        "{",
																																			ignoreCase: false,
																																			want:       "\"{\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 456, col: 35, offset: 14637},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 118, col: 18, offset: 3399},
																																				run: (*parser).callonSingleQuotedStringElement169,
																																				expr: &seqExpr{
																																					pos: position{line: 118, col: 18, offset: 3399},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 118, col: 18, offset: 3399},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 118, col: 28, offset: 3409},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 118, col: 29, offset: 3410},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 456, col: 54, offset: 14656},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 506, col: 8, offset: 16673},
																										run: (*parser).callonSingleQuotedStringElement175,
																										expr: &litMatcher{
																											pos:        position{line: 506, col: 8, offset: 16673},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 491, col: 79, offset: 16049},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 493, col: 9, offset: 16122},
																			run: (*parser).callonSingleQuotedStringElement178,
																			expr: &seqExpr{
																				pos: position{line: 493, col: 9, offset: 16122},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 493, col: 9, offset: 16122},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 493, col: 14, offset: 16127},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2866, col: 7, offset: 94768},
																							run: (*parser).callonSingleQuotedStringElement182,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2866, col: 7, offset: 94768},
																								expr: &charClassMatcher{
																									pos:        position{line: 2866, col: 7, offset: 94768},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 493, col: 22, offset: 16135},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2595, col: 11, offset: 86299},
																run: (*parser).callonSingleQuotedStringElement186,
																expr: &charClassMatcher{
																	pos:        position{line: 2595, col: 12, offset: 86300},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2277, col: 11, offset: 76792},
										name: "InlineMacro",
									},
									&seqExpr{
										pos: position{line: 2278, col: 11, offset: 76814},
										exprs: []interface{}{
											&actionExpr{
												pos: position{line: 954, col: 14, offset: 30337},
												run: (*parser).callonSingleQuotedStringElement190,
												expr: &seqExpr{
													pos: position{line: 954, col: 14, offset: 30337},
													exprs: []interface{}{
														&choiceExpr{
															pos: position{line: 2878, col: 10, offset: 95044},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2878, col: 10, offset: 95044},
																	val:        " ",
																	ignoreCase: false,
																	want:       "\" \"",
																},
																&actionExpr{
																	pos: position{line: 2878, col: 16, offset: 95050},
																	run: (*parser).callonSingleQuotedStringElement194,
																	expr: &litMatcher{
																		pos:        position{line: 2878, col: 16, offset: 95050},
																		val:        "\t",
																		ignoreCase: false,
																		want:       "\"\\t\"",
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 954, col: 20, offset: 30343},
															val:        "+",
															ignoreCase: false,
															want:       "\"+\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 954, col: 24, offset: 30347},
															expr: &choiceExpr{
																pos: position{line: 2878, col: 10, offset: 95044},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2878, col: 10, offset: 95044},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																	&actionExpr{
																		pos: position{line: 2878, col: 16, offset: 95050},
																		run: (*parser).callonSingleQuotedStringElement200,
																		expr: &litMatcher{
																			pos:        position{line: 2878, col: 16, offset: 95050},
																			val:        "\t",
																			ignoreCase: false,
																			want:       "\"\\t\"",
																		},
																	},
																},
															},
														},
														&andExpr{
															pos: position{line: 954, col: 31, offset: 30354},
															expr: &choiceExpr{
																pos: position{line: 2893, col: 8, offset: 95335},
																alternatives: []interface{}{
																	&notExpr{
																		pos: position{line: 2890, col: 8, offset: 95285},
																		expr: &anyMatcher{
																			line: 2890, col: 9, offset: 95286,
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2886, col: 12, offset: 95178},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2886, col: 19, offset: 95185},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&actionExpr{
																		pos: position{line: 2886, col: 28, offset: 95194},
																		run: (*parser).callonSingleQuotedStringElement208,
																		expr: &litMatcher{
																			pos:        position{line: 2886, col: 28, offset: 95194},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 2278, col: 21, offset: 76824},
												expr: &litMatcher{
													pos:        position{line: 2263, col: 25, offset: 76354},
													val:        "`'",
													ignoreCase: false,
													want:       "\"`'\"",
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 2279, col: 11, offset: 76881},
										exprs: []interface{}{
											&choiceExpr{
												pos: position{line: 2878, col: 10, offset: 95044},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2878, col: 10, offset: 95044},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
													&actionExpr{
														pos: position{line: 2878, col: 16, offset: 95050},
														run: (*parser).callonSingleQuotedStringElement215,
														expr: &litMatcher{
															pos:        position{line: 2878, col: 16, offset: 95050},
															val:        "\t",
															ignoreCase: false,
															want:       "\"\\t\"",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 2279, col: 17, offset: 76887},
												expr: &litMatcher{
													pos:        position{line: 2263, col: 25, offset: 76354},
													val:        "`'",
													ignoreCase: false,
													want:       "\"`'\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2620, col: 15, offset: 87267},
										run: (*parser).callonSingleQuotedStringElement219,
										expr: &litMatcher{
											pos:        position{line: 2620, col: 15, offset: 87267},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&actionExpr{
										pos: position{line: 2626, col: 14, offset: 87382},
										run: (*parser).callonSingleQuotedStringElement221,
										expr: &litMatcher{
											pos:        position{line: 2626, col: 14, offset: 87382},
											val:        "(C)",
											ignoreCase: false,
											want:       "\"(C)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2630, col: 14, offset: 87458},
										run: (*parser).callonSingleQuotedStringElement223,
										expr: &litMatcher{
											pos:        position{line: 2630, col: 14, offset: 87458},
											val:        "(TM)",
											ignoreCase: false,
											want:       "\"(TM)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2634, col: 15, offset: 87536},
										run: (*parser).callonSingleQuotedStringElement225,
										expr: &litMatcher{
											pos:        position{line: 2634, col: 15, offset: 87536},
											val:        "(R)",
											ignoreCase: false,
											want:       "\"(R)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2638, col: 13, offset: 87611},
										run: (*parser).callonSingleQuotedStringElement227,
										expr: &litMatcher{
											pos:        position{line: 2638, col: 13, offset: 87611},
											val:        "...",
											ignoreCase: false,
											want:       "\"...\"",
										},
									},
									&actionExpr{
										pos: position{line: 2646, col: 22, offset: 87917},
										run: (*parser).callonSingleQuotedStringElement229,
										expr: &seqExpr{
											pos: position{line: 2646, col: 22, offset: 87917},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2797, col: 13, offset: 92519},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 2646, col: 31, offset: 87926},
													val:        "'",
													ignoreCase: false,
													want:       "\"'\"",
												},
												&andExpr{
													pos: position{line: 2646, col: 35, offset: 87930},
													expr: &charClassMatcher{
														pos:        position{line: 2646, col: 36, offset: 87931},
														val:        "[\\pL]",
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2281, col: 11, offset: 76936},
										name: "QuotedTextInSingleQuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 2282, col: 11, offset: 76977},
										name: "DoubleQuotedString",
									},
									&charClassMatcher{
										pos:        position{line: 2299, col: 41, offset: 77459},
										val:        "[^\\r\\n\\t `]",
										chars:      []rune{'\r', '\n', '\t', ' ', '`'},
										ignoreCase: false,
										inverted:   true,
									},
									&actionExpr{
										pos: position{line: 2299, col: 55, offset: 77473},
										run: (*parser).callonSingleQuotedStringElement238,
										expr: &seqExpr{
											pos: position{line: 2299, col: 55, offset: 77473},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2299, col: 55, offset: 77473},
													val:        "`",
													ignoreCase: false,
													want:       "\"`\"",
												},
												&notExpr{
													pos: position{line: 2299, col: 59, offset: 77477},
													expr: &litMatcher{
														pos:        position{line: 2299, col: 60, offset: 77478},
														val:        "'",
														ignoreCase: false,
														want:       "\"'\"",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuotedString",
			pos:  position{line: 2288, col: 1, offset: 77085},
			expr: &actionExpr{
				pos: position{line: 2289, col: 5, offset: 77123},
				run: (*parser).callonQuotedTextInSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 2289, col: 5, offset: 77123},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2289, col: 5, offset: 77123},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2289, col: 16, offset: 77134},
								expr: &ruleRefExpr{
									pos:  position{line: 2289, col: 17, offset: 77135},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2290, col: 5, offset: 77161},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 2290, col: 11, offset: 77167},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2290, col: 11, offset: 77167},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 2291, col: 11, offset: 77186},
										name: "ItalicText",
									},
									&actionExpr{
										pos: position{line: 2292, col: 12, offset: 77208},
										run: (*parser).callonQuotedTextInSingleQuotedString10,
										expr: &seqExpr{
											pos: position{line: 2292, col: 12, offset: 77208},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 2292, col: 12, offset: 77208},
													expr: &litMatcher{
														pos:        position{line: 2292, col: 13, offset: 77209},
														val:        "`'",
														ignoreCase: false,
														want:       "\"`'\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 2292, col: 18, offset: 77214},
													label: "element",
													expr: &ruleRefExpr{
														pos:  position{line: 2292, col: 27, offset: 77223},
														name: "MonospaceText",
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2293, col: 11, offset: 77272},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 2294, col: 11, offset: 77296},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 2295, col: 11, offset: 77322},
										name: "MarkedText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 2303, col: 1, offset: 77550},
			expr: &actionExpr{
				pos: position{line: 2303, col: 23, offset: 77572},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 2303, col: 23, offset: 77572},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2340, col: 27, offset: 78818},
							val:        "\"`",
							ignoreCase: false,
							want:       "\"\\\"`\"",
						},
						&notExpr{
							pos: position{line: 2340, col: 33, offset: 78824},
							expr: &charClassMatcher{
								pos:        position{line: 2340, col: 34, offset: 78825},
								val:        "[ \\t\\r\\n]",
								chars:      []rune{' ', '\t', '\r', '\n'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 2303, col: 46, offset: 77595},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2303, col: 55, offset: 77604},
								name: "DoubleQuotedStringElements",
							},
						},
						&litMatcher{
							pos:        position{line: 2342, col: 25, offset: 78860},
							val:        "`\"",
							ignoreCase: false,
							want:       "\"`\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 2307, col: 1, offset: 77743},
			expr: &actionExpr{
				pos: position{line: 2307, col: 31, offset: 77773},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 2307, col: 31, offset: 77773},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 2307, col: 41, offset: 77783},
						expr: &ruleRefExpr{
							pos:  position{line: 2307, col: 41, offset: 77783},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 2312, col: 1, offset: 77944},
			expr: &actionExpr{
				pos: position{line: 2313, col: 5, offset: 77978},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &seqExpr{
					pos: position{line: 2313, col: 5, offset: 77978},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2313, col: 5, offset: 77978},
							expr: &litMatcher{
								pos:        position{line: 2342, col: 25, offset: 78860},
								val:        "`\"",
								ignoreCase: false,
								want:       "\"`\\\"\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 2314, col: 5, offset: 78004},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2315, col: 9, offset: 78022},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2265, col: 21, offset: 76380},
										run: (*parser).callonDoubleQuotedStringElement7,
										expr: &seqExpr{
											pos: position{line: 2265, col: 21, offset: 76380},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2265, col: 21, offset: 76380},
													expr: &charClassMatcher{
														pos:        position{line: 2265, col: 21, offset: 76380},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 2265, col: 31, offset: 76390},
													expr: &choiceExpr{
														pos: position{line: 2265, col: 33, offset: 76392},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2878, col: 10, offset: 95044},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2878, col: 16, offset: 95050},
																run: (*parser).callonDoubleQuotedStringElement14,
																expr: &litMatcher{
																	pos:        position{line: 2878, col: 16, offset: 95050},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
															&litMatcher{
																pos:        position{line: 2263, col: 25, offset: 76354},
																val:        "`'",
																ignoreCase: false,
																want:       "\"`'\"",
															},
														},
													},
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 2316, col: 11, offset: 78049},
										exprs: []interface{}{
											&actionExpr{
												pos: position{line: 954, col: 14, offset: 30337},
												run: (*parser).callonDoubleQuotedStringElement18,
												expr: &seqExpr{
													pos: position{line: 954, col: 14, offset: 30337},
													exprs: []interface{}{
														&choiceExpr{
															pos: position{line: 2878, col: 10, offset: 95044},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2878, col: 10, offset: 95044},
																	val:        " ",
																	ignoreCase: false,
																	want:       "\" \"",
																},
																&actionExpr{
																	pos: position{line: 2878, col: 16, offset: 95050},
																	run: (*parser).callonDoubleQuotedStringElement22,
																	expr: &litMatcher{
																		pos:        position{line: 2878, col: 16, offset: 95050},
																		val:        "\t",
																		ignoreCase: false,
																		want:       "\"\\t\"",
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 954, col: 20, offset: 30343},
															val:        "+",
															ignoreCase: false,
															want:       "\"+\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 954, col: 24, offset: 30347},
															expr: &choiceExpr{
																pos: position{line: 2878, col: 10, offset: 95044},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2878, col: 10, offset: 95044},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																	&actionExpr{
																		pos: position{line: 2878, col: 16, offset: 95050},
																		run: (*parser).callonDoubleQuotedStringElement28,
																		expr: &litMatcher{
																			pos:        position{line: 2878, col: 16, offset: 95050},
																			val:        "\t",
																			ignoreCase: false,
																			want:       "\"\\t\"",
																		},
																	},
																},
															},
														},
														&andExpr{
															pos: position{line: 954, col: 31, offset: 30354},
															expr: &choiceExpr{
																pos: position{line: 2893, col: 8, offset: 95335},
																alternatives: []interface{}{
																	&notExpr{
																		pos: position{line: 2890, col: 8, offset: 95285},
																		expr: &anyMatcher{
																			line: 2890, col: 9, offset: 95286,
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2886, col: 12, offset: 95178},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2886, col: 19, offset: 95185},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&actionExpr{
																		pos: position{line: 2886, col: 28, offset: 95194},
																		run: (*parser).callonDoubleQuotedStringElement36,
																		expr: &litMatcher{
																			pos:        position{line: 2886, col: 28, offset: 95194},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 2316, col: 21, offset: 78059},
												expr: &litMatcher{
													pos:        position{line: 2263, col: 25, offset: 76354},
													val:        "`'",
													ignoreCase: false,
													want:       "\"`'\"",
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 2317, col: 11, offset: 78116},
										exprs: []interface{}{
											&choiceExpr{
												pos: position{line: 2878, col: 10, offset: 95044},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2878, col: 10, offset: 95044},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
													&actionExpr{
														pos: position{line: 2878, col: 16, offset: 95050},
														run: (*parser).callonDoubleQuotedStringElement43,
														expr: &litMatcher{
															pos:        position{line: 2878, col: 16, offset: 95050},
															val:        "\t",
															ignoreCase: false,
															want:       "\"\\t\"",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 2317, col: 17, offset: 78122},
												expr: &litMatcher{
													pos:        position{line: 2342, col: 25, offset: 78860},
													val:        "`\"",
													ignoreCase: false,
													want:       "\"`\\\"\"",
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 2318, col: 11, offset: 78154},
										exprs: []interface{}{
											&choiceExpr{
												pos: position{line: 2886, col: 12, offset: 95178},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2886, col: 12, offset: 95178},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
													&litMatcher{
														pos:        position{line: 2886, col: 19, offset: 95185},
														val:        "\r\n",
														ignoreCase: false,
														want:       "\"\\r\\n\"",
													},
													&actionExpr{
														pos: position{line: 2886, col: 28, offset: 95194},
														run: (*parser).callonDoubleQuotedStringElement51,
														expr: &litMatcher{
															pos:        position{line: 2886, col: 28, offset: 95194},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 2318, col: 19, offset: 78162},
												expr: &choiceExpr{
													pos: position{line: 2886, col: 12, offset: 95178},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2886, col: 12, offset: 95178},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2886, col: 19, offset: 95185},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&actionExpr{
															pos: position{line: 2886, col: 28, offset: 95194},
															run: (*parser).callonDoubleQuotedStringElement57,
															expr: &litMatcher{
																pos:        position{line: 2886, col: 28, offset: 95194},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 449, col: 5, offset: 14443},
										run: (*parser).callonDoubleQuotedStringElement59,
										expr: &seqExpr{
											pos: position{line: 449, col: 5, offset: 14443},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 449, col: 5, offset: 14443},
													run: (*parser).callonDoubleQuotedStringElement61,
												},
												&labeledExpr{
													pos:   position{line: 452, col: 5, offset: 14507},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 452, col: 14, offset: 14516},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 463, col: 25, offset: 14978},
																run: (*parser).callonDoubleQuotedStringElement64,
																expr: &seqExpr{
																	pos: position{line: 463, col: 25, offset: 14978},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 463, col: 25, offset: 14978},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 463, col: 37, offset: 14990},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 118, col: 18, offset: 3399},
																				run: (*parser).callonDoubleQuotedStringElement68,
																				expr: &seqExpr{
																					pos: position{line: 118, col: 18, offset: 3399},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 118, col: 18, offset: 3399},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 118, col: 28, offset: 3409},
																							expr: &charClassMatcher{
																								pos:        position{line: 118, col: 29, offset: 3410},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 463, col: 56, offset: 15009},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 463, col: 62, offset: 15015},
																				expr: &actionExpr{
																					pos: position{line: 471, col: 17, offset: 15278},
																					run: (*parser).callonDoubleQuotedStringElement75,
																					expr: &seqExpr{
																						pos: position{line: 471, col: 17, offset: 15278},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 471, col: 17, offset: 15278},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 471, col: 21, offset: 15282},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 471, col: 28, offset: 15289},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 471, col: 28, offset: 15289},
																											run: (*parser).callonDoubleQuotedStringElement80,
																											expr: &charClassMatcher{
																												pos:        position{line: 471, col: 28, offset: 15289},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 473, col: 9, offset: 15343},
																											run: (*parser).callonDoubleQuotedStringElement82,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 473, col: 9, offset: 15343},
																												expr: &charClassMatcher{
																													pos:        position{line: 473, col: 9, offset: 15343},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 463, col: 78, offset: 15031},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 467, col: 25, offset: 15133},
																run: (*parser).callonDoubleQuotedStringElement86,
																expr: &seqExpr{
																	pos: position{line: 467, col: 25, offset: 15133},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 467, col: 25, offset: 15133},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 467, col: 38, offset: 15146},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 118, col: 18, offset: 3399},
																				run: (*parser).callonDoubleQuotedStringElement90,
																				expr: &seqExpr{
																					pos: position{line: 118, col: 18, offset: 3399},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 118, col: 18, offset: 3399},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 118, col: 28, offset: 3409},
																							expr: &charClassMatcher{
																								pos:        position{line: 118, col: 29, offset: 3410},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 467, col: 57, offset: 15165},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 467, col: 63, offset: 15171},
																				expr: &actionExpr{
																					pos: position{line: 471, col: 17, offset: 15278},
																					run: (*parser).callonDoubleQuotedStringElement97,
																					expr: &seqExpr{
																						pos: position{line: 471, col: 17, offset: 15278},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 471, col: 17, offset: 15278},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 471, col: 21, offset: 15282},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 471, col: 28, offset: 15289},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 471, col: 28, offset: 15289},
																											run: (*parser).callonDoubleQuotedStringElement102,
																											expr: &charClassMatcher{
																												pos:        position{line: 471, col: 28, offset: 15289},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 473, col: 9, offset: 15343},
																											run: (*parser).callonDoubleQuotedStringElement104,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 473, col: 9, offset: 15343},
																												expr: &charClassMatcher{
																													pos:        position{line: 473, col: 9, offset: 15343},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 467, col: 79, offset: 15187},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 456, col: 31, offset: 14633},
																run: (*parser).callonDoubleQuotedStringElement108,
																expr: &seqExpr{
																	pos: position{line: 456, col: 31, offset: 14633},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 456, col: 31, offset: 14633},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 456, col: 35, offset: 14637},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 118, col: 18, offset: 3399},
																				run: (*parser).callonDoubleQuotedStringElement112,
																				expr: &seqExpr{
																					pos: position{line: 118, col: 18, offset: 3399},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 118, col: 18, offset: 3399},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 118, col: 28, offset: 3409},
																							expr: &charClassMatcher{
																								pos:        position{line: 118, col: 29, offset: 3410},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 456, col: 54, offset: 14656},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2587, col: 5, offset: 86026},
										run: (*parser).callonDoubleQuotedStringElement118,
										expr: &seqExpr{
											pos: position{line: 2587, col: 5, offset: 86026},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2587, col: 5, offset: 86026},
													run: (*parser).callonDoubleQuotedStringElement120,
												},
												&labeledExpr{
													pos:   position{line: 2590, col: 5, offset: 86097},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2592, col: 9, offset: 86195},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2592, col: 9, offset: 86195},
																run: (*parser).callonDoubleQuotedStringElement123,
																expr: &choiceExpr{
																	pos: position{line: 491, col: 27, offset: 15997},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 491, col: 27, offset: 15997},
																			run: (*parser).callonDoubleQuotedStringElement125,
																			expr: &seqExpr{
																				pos: position{line: 491, col: 27, offset: 15997},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 491, col: 27, offset: 15997},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 491, col: 32, offset: 16002},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2866, col: 7, offset: 94768},
																							run: (*parser).callonDoubleQuotedStringElement129,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2866, col: 7, offset: 94768},
																								expr: &charClassMatcher{
																									pos:        position{line: 2866, col: 7, offset: 94768},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 491, col: 40, offset: 16010},
																						expr: &choiceExpr{
																							pos: position{line: 2878, col: 10, offset: 95044},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2878, col: 10, offset: 95044},
																									val:        " ",
																									ignoreCase: false,
																									want:       "\" \"",
																								},
																								&actionExpr{
																									pos: position{line: 2878, col: 16, offset: 95050},
																									run: (*parser).callonDoubleQuotedStringElement135,
																									expr: &litMatcher{
																										pos:        position{line: 2878, col: 16, offset: 95050},
																										val:        "\t",
																										ignoreCase: false,
																										want:       "\"\\t\"",
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 491, col: 47, offset: 16017},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 491, col: 51, offset: 16021},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 501, col: 24, offset: 16434},
																							expr: &choiceExpr{
																								pos: position{line: 502, col: 5, offset: 16440},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 502, col: 6, offset: 16441},
																										run: (*parser).callonDoubleQuotedStringElement141,
																										expr: &seqExpr{
																											pos: position{line: 502, col: 6, offset: 16441},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 502, col: 6, offset: 16441},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 502, col: 14, offset: 16449},
																													expr: &charClassMatcher{
																														pos:        position{line: 502, col: 14, offset: 16449},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 449, col: 5, offset: 14443},
																										run: (*parser).callonDoubleQuotedStringElement146,
																										expr: &seqExpr{
																											pos: position{line: 449, col: 5, offset: 14443},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 449, col: 5, offset: 14443},
																													run: (*parser).callonDoubleQuotedStringElement148,
																												},
																												&labeledExpr{
																													pos:   position{line: 452, col: 5, offset: 14507},
																													label: "element",
																													expr: &choiceExpr{
																														pos: position{line: 452, col: 14, offset: 14516},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 463, col: 25, offset: 14978},
																																run: (*parser).callonDoubleQuotedStringElement151,
																																expr: &seqExpr{
																																	pos: position{line: 463, col: 25, offset: 14978},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 463, col: 25, offset: 14978},
																																			val:        "{counter:",
																																			ignoreCase: false,
																																			want:       "\"{counter:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 463, col: 37, offset: 14990},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 118, col: 18, offset: 3399},
																																				run: (*parser).callonDoubleQuotedStringElement155,
																																				expr: &seqExpr{
																																					pos: position{line: 118, col: 18, offset: 3399},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 118, col: 18, offset: 3399},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 118, col: 28, offset: 3409},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 118, col: 29, offset: 3410},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 463, col: 56, offset: 15009},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 463, col: 62, offset: 15015},
																																				expr: &actionExpr{
																																					pos: position{line: 471, col: 17, offset: 15278},
																																					run: (*parser).callonDoubleQuotedStringElement162,
																																					expr: &seqExpr{
																																						pos: position{line: 471, col: 17, offset: 15278},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 471, col: 17, offset: 15278},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 471, col: 21, offset: 15282},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 471, col: 28, offset: 15289},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 471, col: 28, offset: 15289},
																																											run: (*parser).callonDoubleQuotedStringElement167,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 471, col: 28, offset: 15289},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 473, col: 9, offset: 15343},
																																											run: (*parser).callonDoubleQuotedStringElement169,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 473, col: 9, offset: 15343},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 473, col: 9, offset: 15343},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 463, col: 78, offset: 15031},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 467, col: 25, offset: 15133},
																																run: (*parser).callonDoubleQuotedStringElement173,
																																expr: &seqExpr{
																																	pos: position{line: 467, col: 25, offset: 15133},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 467, col: 25, offset: 15133},
																																			val:        "{counter2:",
																																			ignoreCase: false,
																																			want:       "\"{counter2:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 467, col: 38, offset: 15146},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 118, col: 18, offset: 3399},
																																				run: (*parser).callonDoubleQuotedStringElement177,
																																				expr: &seqExpr{
																																					pos: position{line: 118, col: 18, offset: 3399},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 118, col: 18, offset: 3399},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 118, col: 28, offset: 3409},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 118, col: 29, offset: 3410},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 467, col: 57, offset: 15165},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 467, col: 63, offset: 15171},
																																				expr: &actionExpr{
																																					pos: position{line: 471, col: 17, offset: 15278},
																																					run: (*parser).callonDoubleQuotedStringElement184,
																																					expr: &seqExpr{
																																						pos: position{line: 471, col: 17, offset: 15278},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 471, col: 17, offset: 15278},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 471, col: 21, offset: 15282},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 471, col: 28, offset: 15289},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 471, col: 28, offset: 15289},
																																											run: (*parser).callonDoubleQuotedStringElement189,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 471, col: 28, offset: 15289},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 473, col: 9, offset: 15343},
																																											run: (*parser).callonDoubleQuotedStringElement191,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 473, col: 9, offset: 15343},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 473, col: 9, offset: 15343},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 467, col: 79, offset: 15187},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 456, col: 31, offset: 14633},
																																run: (*parser).callonDoubleQuotedStringElement195,
																																expr: &seqExpr{
																																	pos: position{line: 456, col: 31, offset: 14633},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 456, col: 31, offset: 14633},
																																			val:        "{",
																																			ignoreCase: false,
																																			want:       "\"{\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 456, col: 35, offset: 14637},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 118, col: 18, offset: 3399},
																																				run: (*parser).callonDoubleQuotedStringElement199,
																																				expr: &seqExpr{
																																					pos: position{line: 118, col: 18, offset: 3399},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 118, col: 18, offset: 3399},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 118, col: 28, offset: 3409},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 118, col: 29, offset: 3410},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 456, col: 54, offset: 14656},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 506, col: 8, offset: 16673},
																										run: (*parser).callonDoubleQuotedStringElement205,
																										expr: &litMatcher{
																											pos:        position{line: 506, col: 8, offset: 16673},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 491, col: 79, offset: 16049},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 493, col: 9, offset: 16122},
																			run: (*parser).callonDoubleQuotedStringElement208,
																			expr: &seqExpr{
																				pos: position{line: 493, col: 9, offset: 16122},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 493, col: 9, offset: 16122},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 493, col: 14, offset: 16127},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2866, col: 7, offset: 94768},
																							run: (*parser).callonDoubleQuotedStringElement212,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2866, col: 7, offset: 94768},
																								expr: &charClassMatcher{
																									pos:        position{line: 2866, col: 7, offset: 94768},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 493, col: 22, offset: 16135},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2595, col: 11, offset: 86299},
																run: (*parser).callonDoubleQuotedStringElement216,
																expr: &charClassMatcher{
																	pos:        position{line: 2595, col: 12, offset: 86300},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2321, col: 11, offset: 78274},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 2322, col: 11, offset: 78296},
										name: "QuotedTextInDoubleQuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 2323, col: 11, offset: 78337},
										name: "SingleQuotedString",
									},
									&actionExpr{
										pos: position{line: 2344, col: 41, offset: 78907},
										run: (*parser).callonDoubleQuotedStringElement221,
										expr: &choiceExpr{
											pos: position{line: 2344, col: 42, offset: 78908},
											alternatives: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2344, col: 42, offset: 78908},
													val:        "[^\\r\\n\\t `]",
													chars:      []rune{'\r', '\n', '\t', ' ', '`'},
													ignoreCase: false,
													inverted:   true,
												},
												&seqExpr{
													pos: position{line: 2344, col: 56, offset: 78922},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 2344, col: 56, offset: 78922},
															val:        "`",
															ignoreCase: false,
															want:       "\"`\"",
														},
														&notExpr{
															pos: position{line: 2344, col: 60, offset: 78926},
															expr: &litMatcher{
																pos:        position{line: 2344, col: 61, offset: 78927},
																val:        "\"",
																ignoreCase: false,
																want:       "\"\\\"\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuotedString",
			pos:  position{line: 2328, col: 1, offset: 78448},
			expr: &actionExpr{
				pos: position{line: 2329, col: 5, offset: 78486},
				run: (*parser).callonQuotedTextInDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 2329, col: 5, offset: 78486},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2329, col: 5, offset: 78486},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2329, col: 16, offset: 78497},
								expr: &ruleRefExpr{
									pos:  position{line: 2329, col: 17, offset: 78498},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2330, col: 5, offset: 78524},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 2331, col: 9, offset: 78539},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2331, col: 9, offset: 78539},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 2332, col: 11, offset: 78558},
										name: "ItalicText",
									},
									&actionExpr{
										pos: position{line: 2333, col: 12, offset: 78580},
										run: (*parser).callonQuotedTextInDoubleQuotedString10,
										expr: &seqExpr{
											pos: position{line: 2333, col: 12, offset: 78580},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 2333, col: 12, offset: 78580},
													expr: &litMatcher{
														pos:        position{line: 2333, col: 13, offset: 78581},
														val:        "`\"",
														ignoreCase: false,
														want:       "\"`\\\"\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 2333, col: 19, offset: 78587},
													label: "element",
													expr: &ruleRefExpr{
														pos:  position{line: 2333, col: 28, offset: 78596},
														name: "MonospaceText",
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2334, col: 11, offset: 78645},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 2335, col: 11, offset: 78669},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 2336, col: 11, offset: 78695},
										name: "MarkedText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributesGroup",
			pos:  position{line: 2379, col: 1, offset: 80084},
			expr: &actionExpr{
				pos: position{line: 2379, col: 20, offset: 80103},
				run: (*parser).callonAttributesGroup1,
				expr: &seqExpr{
					pos: position{line: 2379, col: 20, offset: 80103},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2379, col: 20, offset: 80103},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2379, col: 29, offset: 80112},
								expr: &choiceExpr{
									pos: position{line: 2380, col: 5, offset: 80118},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 2801, col: 14, offset: 92593},
											run: (*parser).callonAttributesGroup6,
											expr: &oneOrMoreExpr{
												pos: position{line: 2801, col: 14, offset: 92593},
												expr: &charClassMatcher{
													pos:        position{line: 2801, col: 14, offset: 92593},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&litMatcher{
											pos:        position{line: 2878, col: 10, offset: 95044},
											val:        " ",
											ignoreCase: false,
											want:       "\" \"",
										},
										&actionExpr{
											pos: position{line: 2878, col: 16, offset: 95050},
											run: (*parser).callonAttributesGroup10,
											expr: &litMatcher{
												pos:        position{line: 2878, col: 16, offset: 95050},
												val:        "\t",
												ignoreCase: false,
												want:       "\"\\t\"",
											},
										},
										&actionExpr{
											pos: position{line: 2587, col: 5, offset: 86026},
											run: (*parser).callonAttributesGroup12,
											expr: &seqExpr{
												pos: position{line: 2587, col: 5, offset: 86026},
												exprs: []interface{}{
													&andCodeExpr{
														pos: position{line: 2587, col: 5, offset: 86026},
														run: (*parser).callonAttributesGroup14,
													},
													&labeledExpr{
														pos:   position{line: 2590, col: 5, offset: 86097},
														label: "element",
														expr: &choiceExpr{
															pos: position{line: 2592, col: 9, offset: 86195},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 2592, col: 9, offset: 86195},
																	run: (*parser).callonAttributesGroup17,
																	expr: &choiceExpr{
																		pos: position{line: 491, col: 27, offset: 15997},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 491, col: 27, offset: 15997},
																				run: (*parser).callonAttributesGroup19,
																				expr: &seqExpr{
																					pos: position{line: 491, col: 27, offset: 15997},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 491, col: 27, offset: 15997},
																							val:        "<<",
																							ignoreCase: false,
																							want:       "\"<<\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 491, col: 32, offset: 16002},
																							label: "id",
																							expr: &actionExpr{
																								pos: position{line: 2866, col: 7, offset: 94768},
																								run: (*parser).callonAttributesGroup23,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 2866, col: 7, offset: 94768},
																									expr: &charClassMatcher{
																										pos:        position{line: 2866, col: 7, offset: 94768},
																										val:        "[^[]<>,]",
																										chars:      []rune{'[', ']', '<', '>', ','},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 491, col: 40, offset: 16010},
																							expr: &choiceExpr{
																								pos: position{line: 2878, col: 10, offset: 95044},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2878, col: 10, offset: 95044},
																										val:        " ",
																										ignoreCase: false,
																										want:       "\" \"",
																									},
																									&actionExpr{
																										pos: position{line: 2878, col: 16, offset: 95050},
																										run: (*parser).callonAttributesGroup29,
																										expr: &litMatcher{
																											pos:        position{line: 2878, col: 16, offset: 95050},
																											val:        "\t",
																											ignoreCase: false,
																											want:       "\"\\t\"",
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 491, col: 47, offset: 16017},
																							val:        ",",
																							ignoreCase: false,
																							want:       "\",\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 491, col: 51, offset: 16021},
																							label: "label",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 501, col: 24, offset: 16434},
																								expr: &choiceExpr{
																									pos: position{line: 502, col: 5, offset: 16440},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 502, col: 6, offset: 16441},
																											run: (*parser).callonAttributesGroup35,
																											expr: &seqExpr{
																												pos: position{line: 502, col: 6, offset: 16441},
																												exprs: []interface{}{
																													&charClassMatcher{
																														pos:        position{line: 502, col: 6, offset: 16441},
																														val:        "[0-9\\pL]",
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&oneOrMoreExpr{
																														pos: position{line: 502, col: 14, offset: 16449},
																														expr: &charClassMatcher{
																															pos:        position{line: 502, col: 14, offset: 16449},
																															val:        "[^\\r\\n{<>]",
																															chars:      []rune{'\r', '\n', '{', '<', '>'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 449, col: 5, offset: 14443},
																											run: (*parser).callonAttributesGroup40,
																											expr: &seqExpr{
																												pos: position{line: 449, col: 5, offset: 14443},
																												exprs: []interface{}{
																													&andCodeExpr{
																														pos: position{line: 449, col: 5, offset: 14443},
																														run: (*parser).callonAttributesGroup42,
																													},
																													&labeledExpr{
																														pos:   position{line: 452, col: 5, offset: 14507},
																														label: "element",
																														expr: &choiceExpr{
																															pos: position{line: 452, col: 14, offset: 14516},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 463, col: 25, offset: 14978},
																																	run: (*parser).callonAttributesGroup45,
																																	expr: &seqExpr{
																																		pos: position{line: 463, col: 25, offset: 14978},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 463, col: 25, offset: 14978},
																																				val:        "{counter:",
																																				ignoreCase: false,
																																				want:       "\"{counter:\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 463, col: 37, offset: 14990},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 118, col: 18, offset: 3399},
																																					run: (*parser).callonAttributesGroup49,
																																					expr: &seqExpr{
																																						pos: position{line: 118, col: 18, offset: 3399},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 118, col: 18, offset: 3399},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 118, col: 28, offset: 3409},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 118, col: 29, offset: 3410},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 463, col: 56, offset: 15009},
																																				label: "start",
																																				expr: &zeroOrOneExpr{
																																					pos: position{line: 463, col: 62, offset: 15015},
																																					expr: &actionExpr{
																																						pos: position{line: 471, col: 17, offset: 15278},
																																						run: (*parser).callonAttributesGroup56,
																																						expr: &seqExpr{
																																							pos: position{line: 471, col: 17, offset: 15278},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 471, col: 17, offset: 15278},
																																									val:        ":",
																																									ignoreCase: false,
																																									want:       "\":\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 471, col: 21, offset: 15282},
																																									label: "start",
																																									expr: &choiceExpr{
																																										pos: position{line: 471, col: 28, offset: 15289},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 471, col: 28, offset: 15289},
																																												run: (*parser).callonAttributesGroup61,
																																												expr: &charClassMatcher{
																																													pos:        position{line: 471, col: 28, offset: 15289},
																																													val:        "[A-Za-z]",
																																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 473, col: 9, offset: 15343},
																																												run: (*parser).callonAttributesGroup63,
																																												expr: &oneOrMoreExpr{
																																													pos: position{line: 473, col: 9, offset: 15343},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 473, col: 9, offset: 15343},
																																														val:        "[0-9]",
																																														ranges:     []rune{'0', '9'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 463, col: 78, offset: 15031},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 467, col: 25, offset: 15133},
																																	run: (*parser).callonAttributesGroup67,
																																	expr: &seqExpr{
																																		pos: position{line: 467, col: 25, offset: 15133},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 467, col: 25, offset: 15133},
																																				val:        "{counter2:",
																																				ignoreCase: false,
																																				want:       "\"{counter2:\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 467, col: 38, offset: 15146},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 118, col: 18, offset: 3399},
																																					run: (*parser).callonAttributesGroup71,
																																					expr: &seqExpr{
																																						pos: position{line: 118, col: 18, offset: 3399},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 118, col: 18, offset: 3399},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 118, col: 28, offset: 3409},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 118, col: 29, offset: 3410},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 467, col: 57, offset: 15165},
																																				label: "start",
																																				expr: &zeroOrOneExpr{
																																					pos: position{line: 467, col: 63, offset: 15171},
																																					expr: &actionExpr{
																																						pos: position{line: 471, col: 17, offset: 15278},
																																						run: (*parser).callonAttributesGroup78,
																																						expr: &seqExpr{
																																							pos: position{line: 471, col: 17, offset: 15278},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 471, col: 17, offset: 15278},
																																									val:        ":",
																																									ignoreCase: false,
																																									want:       "\":\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 471, col: 21, offset: 15282},
																																									label: "start",
																																									expr: &choiceExpr{
																																										pos: position{line: 471, col: 28, offset: 15289},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 471, col: 28, offset: 15289},
																																												run: (*parser).callonAttributesGroup83,
																																												expr: &charClassMatcher{
																																													pos:        position{line: 471, col: 28, offset: 15289},
																																													val:        "[A-Za-z]",
																																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 473, col: 9, offset: 15343},
																																												run: (*parser).callonAttributesGroup85,
																																												expr: &oneOrMoreExpr{
																																													pos: position{line: 473, col: 9, offset: 15343},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 473, col: 9, offset: 15343},
																																														val:        "[0-9]",
																																														ranges:     []rune{'0', '9'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 467, col: 79, offset: 15187},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 456, col: 31, offset: 14633},
																																	run: (*parser).callonAttributesGroup89,
																																	expr: &seqExpr{
																																		pos: position{line: 456, col: 31, offset: 14633},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 456, col: 31, offset: 14633},
																																				val:        "{",
																																				ignoreCase: false,
																																				want:       "\"{\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 456, col: 35, offset: 14637},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 118, col: 18, offset: 3399},
																																					run: (*parser).callonAttributesGroup93,
																																					expr: &seqExpr{
																																						pos: position{line: 118, col: 18, offset: 3399},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 118, col: 18, offset: 3399},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 118, col: 28, offset: 3409},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 118, col: 29, offset: 3410},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 456, col: 54, offset: 14656},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 506, col: 8, offset: 16673},
																											run: (*parser).callonAttributesGroup99,
																											expr: &litMatcher{
																												pos:        position{line: 506, col: 8, offset: 16673},
																												val:        "{",
																												ignoreCase: false,
																												want:       "\"{\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 491, col: 79, offset: 16049},
																							val:        ">>",
																							ignoreCase: false,
																							want:       "\">>\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 493, col: 9, offset: 16122},
																				run: (*parser).callonAttributesGroup102,
																				expr: &seqExpr{
																					pos: position{line: 493, col: 9, offset: 16122},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 493, col: 9, offset: 16122},
																							val:        "<<",
																							ignoreCase: false,
																							want:       "\"<<\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 493, col: 14, offset: 16127},
																							label: "id",
																							expr: &actionExpr{
																								pos: position{line: 2866, col: 7, offset: 94768},
																								run: (*parser).callonAttributesGroup106,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 2866, col: 7, offset: 94768},
																									expr: &charClassMatcher{
																										pos:        position{line: 2866, col: 7, offset: 94768},
																										val:        "[^[]<>,]",
																										chars:      []rune{'[', ']', '<', '>', ','},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 493, col: 22, offset: 16135},
																							val:        ">>",
																							ignoreCase: false,
																							want:       "\">>\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2595, col: 11, offset: 86299},
																	run: (*parser).callonAttributesGroup110,
																	expr: &charClassMatcher{
																		pos:        position{line: 2595, col: 12, offset: 86300},
																		val:        "[<>&]",
																		chars:      []rune{'<', '>', '&'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2383, col: 7, offset: 80169},
											name: "Quote",
										},
										&ruleRefExpr{
											pos:  position{line: 2384, col: 7, offset: 80181},
											name: "InlinePassthrough",
										},
										&actionExpr{
											pos: position{line: 449, col: 5, offset: 14443},
											run: (*parser).callonAttributesGroup114,
											expr: &seqExpr{
												pos: position{line: 449, col: 5, offset: 14443},
												exprs: []interface{}{
													&andCodeExpr{
														pos: position{line: 449, col: 5, offset: 14443},
														run: (*parser).callonAttributesGroup116,
													},
													&labeledExpr{
														pos:   position{line: 452, col: 5, offset: 14507},
														label: "element",
														expr: &choiceExpr{
															pos: position{line: 452, col: 14, offset: 14516},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 463, col: 25, offset: 14978},
																	run: (*parser).callonAttributesGroup119,
																	expr: &seqExpr{
																		pos: position{line: 463, col: 25, offset: 14978},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 463, col: 25, offset: 14978},
																				val:        "{counter:",
																				ignoreCase: false,
																				want:       "\"{counter:\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 463, col: 37, offset: 14990},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 118, col: 18, offset: 3399},
																					run: (*parser).callonAttributesGroup123,
																					expr: &seqExpr{
																						pos: position{line: 118, col: 18, offset: 3399},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 118, col: 18, offset: 3399},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 118, col: 28, offset: 3409},
																								expr: &charClassMatcher{
																									pos:        position{line: 118, col: 29, offset: 3410},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 463, col: 56, offset: 15009},
																				label: "start",
																				expr: &zeroOrOneExpr{
																					pos: position{line: 463, col: 62, offset: 15015},
																					expr: &actionExpr{
																						pos: position{line: 471, col: 17, offset: 15278},
																						run: (*parser).callonAttributesGroup130,
																						expr: &seqExpr{
																							pos: position{line: 471, col: 17, offset: 15278},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 471, col: 17, offset: 15278},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 471, col: 21, offset: 15282},
																									label: "start",
																									expr: &choiceExpr{
																										pos: position{line: 471, col: 28, offset: 15289},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 471, col: 28, offset: 15289},
																												run: (*parser).callonAttributesGroup135,
																												expr: &charClassMatcher{
																													pos:        position{line: 471, col: 28, offset: 15289},
																													val:        "[A-Za-z]",
																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 473, col: 9, offset: 15343},
																												run: (*parser).callonAttributesGroup137,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 473, col: 9, offset: 15343},
																													expr: &charClassMatcher{
																														pos:        position{line: 473, col: 9, offset: 15343},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 463, col: 78, offset: 15031},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 467, col: 25, offset: 15133},
																	run: (*parser).callonAttributesGroup141,
																	expr: &seqExpr{
																		pos: position{line: 467, col: 25, offset: 15133},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 467, col: 25, offset: 15133},
																				val:        "{counter2:",
																				ignoreCase: false,
																				want:       "\"{counter2:\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 467, col: 38, offset: 15146},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 118, col: 18, offset: 3399},
																					run: (*parser).callonAttributesGroup145,
																					expr: &seqExpr{
																						pos: position{line: 118, col: 18, offset: 3399},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 118, col: 18, offset: 3399},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 118, col: 28, offset: 3409},
																								expr: &charClassMatcher{
																									pos:        position{line: 118, col: 29, offset: 3410},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 467, col: 57, offset: 15165},
																				label: "start",
																				expr: &zeroOrOneExpr{
																					pos: position{line: 467, col: 63, offset: 15171},
																					expr: &actionExpr{
																						pos: position{line: 471, col: 17, offset: 15278},
																						run: (*parser).callonAttributesGroup152,
																						expr: &seqExpr{
																							pos: position{line: 471, col: 17, offset: 15278},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 471, col: 17, offset: 15278},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 471, col: 21, offset: 15282},
																									label: "start",
																									expr: &choiceExpr{
																										pos: position{line: 471, col: 28, offset: 15289},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 471, col: 28, offset: 15289},
																												run: (*parser).callonAttributesGroup157,
																												expr: &charClassMatcher{
																													pos:        position{line: 471, col: 28, offset: 15289},
																													val:        "[A-Za-z]",
																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 473, col: 9, offset: 15343},
																												run: (*parser).callonAttributesGroup159,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 473, col: 9, offset: 15343},
																													expr: &charClassMatcher{
																														pos:        position{line: 473, col: 9, offset: 15343},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 467, col: 79, offset: 15187},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 456, col: 31, offset: 14633},
																	run: (*parser).callonAttributesGroup163,
																	expr: &seqExpr{
																		pos: position{line: 456, col: 31, offset: 14633},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 456, col: 31, offset: 14633},
																				val:        "{",
																				ignoreCase: false,
																				want:       "\"{\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 456, col: 35, offset: 14637},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 118, col: 18, offset: 3399},
																					run: (*parser).callonAttributesGroup167,
																					expr: &seqExpr{
																						pos: position{line: 118, col: 18, offset: 3399},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 118, col: 18, offset: 3399},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 118, col: 28, offset: 3409},
																								expr: &charClassMatcher{
																									pos:        position{line: 118, col: 29, offset: 3410},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 456, col: 54, offset: 14656},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 947, col: 23, offset: 29896},
											run: (*parser).callonAttributesGroup173,
											expr: &seqExpr{
												pos: position{line: 947, col: 23, offset: 29896},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 945, col: 32, offset: 29864},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
													&labeledExpr{
														pos:   position{line: 947, col: 51, offset: 29924},
														label: "ref",
														expr: &actionExpr{
															pos: position{line: 947, col: 56, offset: 29929},
															run: (*parser).callonAttributesGroup177,
															expr: &oneOrMoreExpr{
																pos: position{line: 947, col: 56, offset: 29929},
																expr: &charClassMatcher{
																	pos:        position{line: 947, col: 56, offset: 29929},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 945, col: 32, offset: 29864},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2835, col: 12, offset: 93828},
											run: (*parser).callonAttributesGroup181,
											expr: &anyMatcher{
												line: 2835, col: 12, offset: 93828,
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2890, col: 8, offset: 95285},
							expr: &anyMatcher{
								line: 2890, col: 9, offset: 95286,
							},
						},
					},
				},
			},
		},
		{
			name: "ElementAttributesGroup",
			pos:  position{line: 2392, col: 1, offset: 80453},
			expr: &actionExpr{
				pos: position{line: 2392, col: 27, offset: 80479},
				run: (*parser).callonElementAttributesGroup1,
				expr: &seqExpr{
					pos: position{line: 2392, col: 27, offset: 80479},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2392, col: 27, offset: 80479},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2392, col: 36, offset: 80488},
								expr: &choiceExpr{
									pos: position{line: 2393, col: 5, offset: 80494},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 2820, col: 5, offset: 93371},
											run: (*parser).callonElementAttributesGroup6,
											expr: &seqExpr{
												pos: position{line: 2820, col: 5, offset: 93371},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 2820, col: 5, offset: 93371},
														label: "content",
														expr: &actionExpr{
															pos: position{line: 2820, col: 14, offset: 93380},
															run: (*parser).callonElementAttributesGroup9,
															expr: &oneOrMoreExpr{
																pos: position{line: 2820, col: 14, offset: 93380},
																expr: &charClassMatcher{
																	pos:        position{line: 2820, col: 14, offset: 93380},
																	val:        "[,?!;0-9\\pL]",
																	chars:      []rune{',', '?', '!', ';'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&andExpr{
														pos: position{line: 2823, col: 5, offset: 93461},
														expr: &choiceExpr{
															pos: position{line: 2823, col: 7, offset: 93463},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2878, col: 10, offset: 95044},
																	val:        " ",
																	ignoreCase: false,
																	want:       "\" \"",
																},
																&actionExpr{
																	pos: position{line: 2878, col: 16, offset: 95050},
																	run: (*parser).callonElementAttributesGroup15,
																	expr: &litMatcher{
																		pos:        position{line: 2878, col: 16, offset: 95050},
																		val:        "\t",
																		ignoreCase: false,
																		want:       "\"\\t\"",
																	},
																},
																&charClassMatcher{
																	pos:        position{line: 2797, col: 13, offset: 92519},
																	val:        "[.�0-9\\pL]",
																	chars:      []rune{'.', '�'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&notExpr{
																	pos: position{line: 2890, col: 8, offset: 95285},
																	expr: &anyMatcher{
																		line: 2890, col: 9, offset: 95286,
																	},
																},
																&litMatcher{
																	pos:        position{line: 2886, col: 12, offset: 95178},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2886, col: 19, offset: 95185},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&actionExpr{
																	pos: position{line: 2886, col: 28, offset: 95194},
																	run: (*parser).callonElementAttributesGroup22,
																	expr: &litMatcher{
																		pos:        position{line: 2886, col: 28, offset: 95194},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2809, col: 5, offset: 92974},
											run: (*parser).callonElementAttributesGroup24,
											expr: &seqExpr{
												pos: position{line: 2809, col: 5, offset: 92974},
												exprs: []interface{}{
													&oneOrMoreExpr{
														pos: position{line: 2809, col: 5, offset: 92974},
														expr: &charClassMatcher{
															pos:        position{line: 2809, col: 5, offset: 92974},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&andExpr{
														pos: position{line: 2809, col: 15, offset: 92984},
														expr: &choiceExpr{
															pos: position{line: 2809, col: 17, offset: 92986},
															alternatives: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2809, col: 17, offset: 92986},
																	val:        "[\\r\\n ,]]",
																	chars:      []rune{'\r', '\n', ' ', ',', ']'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&notExpr{
																	pos: position{line: 2890, col: 8, offset: 95285},
																	expr: &anyMatcher{
																		line: 2890, col: 9, offset: 95286,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2811, col: 9, offset: 93068},
											run: (*parser).callonElementAttributesGroup33,
											expr: &seqExpr{
												pos: position{line: 2811, col: 9, offset: 93068},
												exprs: []interface{}{
													&oneOrMoreExpr{
														pos: position{line: 2811, col: 9, offset: 93068},
														expr: &charClassMatcher{
															pos:        position{line: 2811, col: 9, offset: 93068},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&oneOrMoreExpr{
														pos: position{line: 2811, col: 19, offset: 93078},
														expr: &seqExpr{
															pos: position{line: 2811, col: 20, offset: 93079},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2811, col: 20, offset: 93079},
																	val:        "[=*_`]",
																	chars:      []rune{'=', '*', '_', '`'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&oneOrMoreExpr{
																	pos: position{line: 2811, col: 27, offset: 93086},
																	expr: &charClassMatcher{
																		pos:        position{line: 2811, col: 27, offset: 93086},
																		val:        "[0-9\\pL]",
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2829, col: 16, offset: 93605},
											run: (*parser).callonElementAttributesGroup42,
											expr: &seqExpr{
												pos: position{line: 2829, col: 16, offset: 93605},
												exprs: []interface{}{
													&charClassMatcher{
														pos:        position{line: 2829, col: 17, offset: 93606},
														val:        "[.,;!?]",
														chars:      []rune{'.', ',', ';', '!', '?'},
														ignoreCase: false,
														inverted:   false,
													},
													&andExpr{
														pos: position{line: 2829, col: 46, offset: 93635},
														expr: &choiceExpr{
															pos: position{line: 2829, col: 48, offset: 93637},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2878, col: 10, offset: 95044},
																	val:        " ",
																	ignoreCase: false,
																	want:       "\" \"",
																},
																&actionExpr{
																	pos: position{line: 2878, col: 16, offset: 95050},
																	run: (*parser).callonElementAttributesGroup48,
																	expr: &litMatcher{
																		pos:        position{line: 2878, col: 16, offset: 95050},
																		val:        "\t",
																		ignoreCase: false,
																		want:       "\"\\t\"",
																	},
																},
																&notExpr{
																	pos: position{line: 2890, col: 8, offset: 95285},
																	expr: &anyMatcher{
																		line: 2890, col: 9, offset: 95286,
																	},
																},
																&litMatcher{
																	pos:        position{line: 2886, col: 12, offset: 95178},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2886, col: 19, offset: 95185},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&actionExpr{
																	pos: position{line: 2886, col: 28, offset: 95194},
																	run: (*parser).callonElementAttributesGroup54,
																	expr: &litMatcher{
																		pos:        position{line: 2886, col: 28, offset: 95194},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 449, col: 5, offset: 14443},
											run: (*parser).callonElementAttributesGroup56,
											expr: &seqExpr{
												pos: position{line: 449, col: 5, offset: 14443},
												exprs: []interface{}{
													&andCodeExpr{
														pos: position{line: 449, col: 5, offset: 14443},
														run: (*parser).callonElementAttributesGroup58,
													},
													&labeledExpr{
														pos:   position{line: 452, col: 5, offset: 14507},
														label: "element",
														expr: &choiceExpr{
															pos: position{line: 452, col: 14, offset: 14516},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 463, col: 25, offset: 14978},
																	run: (*parser).callonElementAttributesGroup61,
																	expr: &seqExpr{
																		pos: position{line: 463, col: 25, offset: 14978},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 463, col: 25, offset: 14978},
																				val:        "{counter:",
																				ignoreCase: false,
																				want:       "\"{counter:\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 463, col: 37, offset: 14990},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 118, col: 18, offset: 3399},
																					run: (*parser).callonElementAttributesGroup65,
																					expr: &seqExpr{
																						pos: position{line: 118, col: 18, offset: 3399},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 118, col: 18, offset: 3399},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 118, col: 28, offset: 3409},
																								expr: &charClassMatcher{
																									pos:        position{line: 118, col: 29, offset: 3410},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 463, col: 56, offset: 15009},
																				label: "start",
																				expr: &zeroOrOneExpr{
																					pos: position{line: 463, col: 62, offset: 15015},
																					expr: &actionExpr{
																						pos: position{line: 471, col: 17, offset: 15278},
																						run: (*parser).callonElementAttributesGroup72,
																						expr: &seqExpr{
																							pos: position{line: 471, col: 17, offset: 15278},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 471, col: 17, offset: 15278},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 471, col: 21, offset: 15282},
																									label: "start",
																									expr: &choiceExpr{
																										pos: position{line: 471, col: 28, offset: 15289},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 471, col: 28, offset: 15289},
																												run: (*parser).callonElementAttributesGroup77,
																												expr: &charClassMatcher{
																													pos:        position{line: 471, col: 28, offset: 15289},
																													val:        "[A-Za-z]",
																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 473, col: 9, offset: 15343},
																												run: (*parser).callonElementAttributesGroup79,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 473, col: 9, offset: 15343},
																													expr: &charClassMatcher{
																														pos:        position{line: 473, col: 9, offset: 15343},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 463, col: 78, offset: 15031},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 467, col: 25, offset: 15133},
																	run: (*parser).callonElementAttributesGroup83,
																	expr: &seqExpr{
																		pos: position{line: 467, col: 25, offset: 15133},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 467, col: 25, offset: 15133},
																				val:        "{counter2:",
																				ignoreCase: false,
																				want:       "\"{counter2:\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 467, col: 38, offset: 15146},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 118, col: 18, offset: 3399},
																					run: (*parser).callonElementAttributesGroup87,
																					expr: &seqExpr{
																						pos: position{line: 118, col: 18, offset: 3399},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 118, col: 18, offset: 3399},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 118, col: 28, offset: 3409},
																								expr: &charClassMatcher{
																									pos:        position{line: 118, col: 29, offset: 3410},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 467, col: 57, offset: 15165},
																				label: "start",
																				expr: &zeroOrOneExpr{
																					pos: position{line: 467, col: 63, offset: 15171},
																					expr: &actionExpr{
																						pos: position{line: 471, col: 17, offset: 15278},
																						run: (*parser).callonElementAttributesGroup94,
																						expr: &seqExpr{
																							pos: position{line: 471, col: 17, offset: 15278},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 471, col: 17, offset: 15278},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 471, col: 21, offset: 15282},
																									label: "start",
																									expr: &choiceExpr{
																										pos: position{line: 471, col: 28, offset: 15289},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 471, col: 28, offset: 15289},
																												run: (*parser).callonElementAttributesGroup99,
																												expr: &charClassMatcher{
																													pos:        position{line: 471, col: 28, offset: 15289},
																													val:        "[A-Za-z]",
																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 473, col: 9, offset: 15343},
																												run: (*parser).callonElementAttributesGroup101,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 473, col: 9, offset: 15343},
																													expr: &charClassMatcher{
																														pos:        position{line: 473, col: 9, offset: 15343},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 467, col: 79, offset: 15187},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 456, col: 31, offset: 14633},
																	run: (*parser).callonElementAttributesGroup105,
																	expr: &seqExpr{
																		pos: position{line: 456, col: 31, offset: 14633},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 456, col: 31, offset: 14633},
																				val:        "{",
																				ignoreCase: false,
																				want:       "\"{\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 456, col: 35, offset: 14637},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 118, col: 18, offset: 3399},
																					run: (*parser).callonElementAttributesGroup109,
																					expr: &seqExpr{
																						pos: position{line: 118, col: 18, offset: 3399},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 118, col: 18, offset: 3399},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 118, col: 28, offset: 3409},
																								expr: &charClassMatcher{
																									pos:        position{line: 118, col: 29, offset: 3410},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 456, col: 54, offset: 14656},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2395, col: 7, offset: 80539},
											name: "Quote",
										},
										&actionExpr{
											pos: position{line: 2587, col: 5, offset: 86026},
											run: (*parser).callonElementAttributesGroup116,
											expr: &seqExpr{
												pos: position{line: 2587, col: 5, offset: 86026},
												exprs: []interface{}{
													&andCodeExpr{
														pos: position{line: 2587, col: 5, offset: 86026},
														run: (*parser).callonElementAttributesGroup118,
													},
													&labeledExpr{
														pos:   position{line: 2590, col: 5, offset: 86097},
														label: "element",
														expr: &choiceExpr{
															pos: position{line: 2592, col: 9, offset: 86195},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 2592, col: 9, offset: 86195},
																	run: (*parser).callonElementAttributesGroup121,
																	expr: &choiceExpr{
																		pos: position{line: 491, col: 27, offset: 15997},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 491, col: 27, offset: 15997},
																				run: (*parser).callonElementAttributesGroup123,
																				expr: &seqExpr{
																					pos: position{line: 491, col: 27, offset: 15997},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 491, col: 27, offset: 15997},
																							val:        "<<",
																							ignoreCase: false,
																							want:       "\"<<\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 491, col: 32, offset: 16002},
																							label: "id",
																							expr: &actionExpr{
																								pos: position{line: 2866, col: 7, offset: 94768},
																								run: (*parser).callonElementAttributesGroup127,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 2866, col: 7, offset: 94768},
																									expr: &charClassMatcher{
																										pos:        position{line: 2866, col: 7, offset: 94768},
																										val:        "[^[]<>,]",
																										chars:      []rune{'[', ']', '<', '>', ','},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 491, col: 40, offset: 16010},
																							expr: &choiceExpr{
																								pos: position{line: 2878, col: 10, offset: 95044},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2878, col: 10, offset: 95044},
																										val:        " ",
																										ignoreCase: false,
																										want:       "\" \"",
																									},
																									&actionExpr{
																										pos: position{line: 2878, col: 16, offset: 95050},
																										run: (*parser).callonElementAttributesGroup133,
																										expr: &litMatcher{
																											pos:        position{line: 2878, col: 16, offset: 95050},
																											val:        "\t",
																											ignoreCase: false,
																											want:       "\"\\t\"",
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 491, col: 47, offset: 16017},
																							val:        ",",
																							ignoreCase: false,
																							want:       "\",\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 491, col: 51, offset: 16021},
																							label: "label",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 501, col: 24, offset: 16434},
																								expr: &choiceExpr{
																									pos: position{line: 502, col: 5, offset: 16440},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 502, col: 6, offset: 16441},
																											run: (*parser).callonElementAttributesGroup139,
																											expr: &seqExpr{
																												pos: position{line: 502, col: 6, offset: 16441},
																												exprs: []interface{}{
																													&charClassMatcher{
																														pos:        position{line: 502, col: 6, offset: 16441},
																														val:        "[0-9\\pL]",
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&oneOrMoreExpr{
																														pos: position{line: 502, col: 14, offset: 16449},
																														expr: &charClassMatcher{
																															pos:        position{line: 502, col: 14, offset: 16449},
																															val:        "[^\\r\\n{<>]",
																															chars:      []rune{'\r', '\n', '{', '<', '>'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 449, col: 5, offset: 14443},
																											run: (*parser).callonElementAttributesGroup144,
																											expr: &seqExpr{
																												pos: position{line: 449, col: 5, offset: 14443},
																												exprs: []interface{}{
																													&andCodeExpr{
																														pos: position{line: 449, col: 5, offset: 14443},
																														run: (*parser).callonElementAttributesGroup146,
																													},
																													&labeledExpr{
																														pos:   position{line: 452, col: 5, offset: 14507},
																														label: "element",
																														expr: &choiceExpr{
																															pos: position{line: 452, col: 14, offset: 14516},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 463, col: 25, offset: 14978},
																																	run: (*parser).callonElementAttributesGroup149,
																																	expr: &seqExpr{
																																		pos: position{line: 463, col: 25, offset: 14978},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 463, col: 25, offset: 14978},
																																				val:        "{counter:",
																																				ignoreCase: false,
																																				want:       "\"{counter:\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 463, col: 37, offset: 14990},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 118, col: 18, offset: 3399},
																																					run: (*parser).callonElementAttributesGroup153,
																																					expr: &seqExpr{
																																						pos: position{line: 118, col: 18, offset: 3399},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 118, col: 18, offset: 3399},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 118, col: 28, offset: 3409},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 118, col: 29, offset: 3410},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 463, col: 56, offset: 15009},
																																				label: "start",
																																				expr: &zeroOrOneExpr{
																																					pos: position{line: 463, col: 62, offset: 15015},
																																					expr: &actionExpr{
																																						pos: position{line: 471, col: 17, offset: 15278},
																																						run: (*parser).callonElementAttributesGroup160,
																																						expr: &seqExpr{
																																							pos: position{line: 471, col: 17, offset: 15278},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 471, col: 17, offset: 15278},
																																									val:        ":",
																																									ignoreCase: false,
																																									want:       "\":\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 471, col: 21, offset: 15282},
																																									label: "start",
																																									expr: &choiceExpr{
																																										pos: position{line: 471, col: 28, offset: 15289},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 471, col: 28, offset: 15289},
																																												run: (*parser).callonElementAttributesGroup165,
																																												expr: &charClassMatcher{
																																													pos:        position{line: 471, col: 28, offset: 15289},
																																													val:        "[A-Za-z]",
																																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 473, col: 9, offset: 15343},
																																												run: (*parser).callonElementAttributesGroup167,
																																												expr: &oneOrMoreExpr{
																																													pos: position{line: 473, col: 9, offset: 15343},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 473, col: 9, offset: 15343},
																																														val:        "[0-9]",
																																														ranges:     []rune{'0', '9'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 463, col: 78, offset: 15031},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 467, col: 25, offset: 15133},
																																	run: (*parser).callonElementAttributesGroup171,
																																	expr: &seqExpr{
																																		pos: position{line: 467, col: 25, offset: 15133},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 467, col: 25, offset: 15133},
																																				val:        "{counter2:",
																																				ignoreCase: false,
																																				want:       "\"{counter2:\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 467, col: 38, offset: 15146},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 118, col: 18, offset: 3399},
																																					run: (*parser).callonElementAttributesGroup175,
																																					expr: &seqExpr{
																																						pos: position{line: 118, col: 18, offset: 3399},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 118, col: 18, offset: 3399},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 118, col: 28, offset: 3409},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 118, col: 29, offset: 3410},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 467, col: 57, offset: 15165},
																																				label: "start",
																																				expr: &zeroOrOneExpr{
																																					pos: position{line: 467, col: 63, offset: 15171},
																																					expr: &actionExpr{
																																						pos: position{line: 471, col: 17, offset: 15278},
																																						run: (*parser).callonElementAttributesGroup182,
																																						expr: &seqExpr{
																																							pos: position{line: 471, col: 17, offset: 15278},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 471, col: 17, offset: 15278},
																																									val:        ":",
																																									ignoreCase: false,
																																									want:       "\":\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 471, col: 21, offset: 15282},
																																									label: "start",
																																									expr: &choiceExpr{
																																										pos: position{line: 471, col: 28, offset: 15289},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 471, col: 28, offset: 15289},
																																												run: (*parser).callonElementAttributesGroup187,
																																												expr: &charClassMatcher{
																																													pos:        position{line: 471, col: 28, offset: 15289},
																																													val:        "[A-Za-z]",
																																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 473, col: 9, offset: 15343},
																																												run: (*parser).callonElementAttributesGroup189,
																																												expr: &oneOrMoreExpr{
																																													pos: position{line: 473, col: 9, offset: 15343},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 473, col: 9, offset: 15343},
																																														val:        "[0-9]",
																																														ranges:     []rune{'0', '9'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 467, col: 79, offset: 15187},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 456, col: 31, offset: 14633},
																																	run: (*parser).callonElementAttributesGroup193,
																																	expr: &seqExpr{
																																		pos: position{line: 456, col: 31, offset: 14633},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 456, col: 31, offset: 14633},
																																				val:        "{",
																																				ignoreCase: false,
																																				want:       "\"{\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 456, col: 35, offset: 14637},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 118, col: 18, offset: 3399},
																																					run: (*parser).callonElementAttributesGroup197,
																																					expr: &seqExpr{
																																						pos: position{line: 118, col: 18, offset: 3399},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 118, col: 18, offset: 3399},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 118, col: 28, offset: 3409},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 118, col: 29, offset: 3410},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 456, col: 54, offset: 14656},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 506, col: 8, offset: 16673},
																											run: (*parser).callonElementAttributesGroup203,
																											expr: &litMatcher{
																												pos:        position{line: 506, col: 8, offset: 16673},
																												val:        "{",
																												ignoreCase: false,
																												want:       "\"{\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 491, col: 79, offset: 16049},
																							val:        ">>",
																							ignoreCase: false,
																							want:       "\">>\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 493, col: 9, offset: 16122},
																				run: (*parser).callonElementAttributesGroup206,
																				expr: &seqExpr{
																					pos: position{line: 493, col: 9, offset: 16122},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 493, col: 9, offset: 16122},
																							val:        "<<",
																							ignoreCase: false,
																							want:       "\"<<\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 493, col: 14, offset: 16127},
																							label: "id",
																							expr: &actionExpr{
																								pos: position{line: 2866, col: 7, offset: 94768},
																								run: (*parser).callonElementAttributesGroup210,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 2866, col: 7, offset: 94768},
																									expr: &charClassMatcher{
																										pos:        position{line: 2866, col: 7, offset: 94768},
																										val:        "[^[]<>,]",
																										chars:      []rune{'[', ']', '<', '>', ','},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 493, col: 22, offset: 16135},
																							val:        ">>",
																							ignoreCase: false,
																							want:       "\">>\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2595, col: 11, offset: 86299},
																	run: (*parser).callonElementAttributesGroup214,
																	expr: &charClassMatcher{
																		pos:        position{line: 2595, col: 12, offset: 86300},
																		val:        "[<>&]",
																		chars:      []rune{'<', '>', '&'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 947, col: 23, offset: 29896},
											run: (*parser).callonElementAttributesGroup216,
											expr: &seqExpr{
												pos: position{line: 947, col: 23, offset: 29896},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 945, col: 32, offset: 29864},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
													&labeledExpr{
														pos:   position{line: 947, col: 51, offset: 29924},
														label: "ref",
														expr: &actionExpr{
															pos: position{line: 947, col: 56, offset: 29929},
															run: (*parser).callonElementAttributesGroup220,
															expr: &oneOrMoreExpr{
																pos: position{line: 947, col: 56, offset: 29929},
																expr: &charClassMatcher{
																	pos:        position{line: 947, col: 56, offset: 29929},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 945, col: 32, offset: 29864},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2835, col: 12, offset: 93828},
											run: (*parser).callonElementAttributesGroup224,
											expr: &anyMatcher{
												line: 2835, col: 12, offset: 93828,
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2890, col: 8, offset: 95285},
							expr: &anyMatcher{
								line: 2890, col: 9, offset: 95286,
							},
						},
					},
				},
			},
		},
		{
			name: "HeaderGroup",
			pos:  position{line: 2403, col: 1, offset: 80797},
			expr: &actionExpr{
				pos: position{line: 2404, col: 5, offset: 80817},
				run: (*parser).callonHeaderGroup1,
				expr: &seqExpr{
					pos: position{line: 2404, col: 5, offset: 80817},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2404, col: 5, offset: 80817},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2404, col: 14, offset: 80826},
								expr: &ruleRefExpr{
									pos:  position{line: 2404, col: 15, offset: 80827},
									name: "HeaderGroupElement",
								},
							},
						},
						&notExpr{
							pos: position{line: 2890, col: 8, offset: 95285},
							expr: &anyMatcher{
								line: 2890, col: 9, offset: 95286,
							},
						},
					},
				},
			},
		},
		{
			name: "HeaderGroupElement",
			pos:  position{line: 2408, col: 1, offset: 80904},
			expr: &actionExpr{
				pos: position{line: 2409, col: 5, offset: 80930},
				run: (*parser).callonHeaderGroupElement1,
				expr: &seqExpr{
					pos: position{line: 2409, col: 5, offset: 80930},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2409, col: 5, offset: 80930},
							expr: &notExpr{
								pos: position{line: 2890, col: 8, offset: 95285},
								expr: &anyMatcher{
									line: 2890, col: 9, offset: 95286,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2410, col: 5, offset: 80939},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2411, col: 9, offset: 80957},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2820, col: 5, offset: 93371},
										run: (*parser).callonHeaderGroupElement8,
										expr: &seqExpr{
											pos: position{line: 2820, col: 5, offset: 93371},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 2820, col: 5, offset: 93371},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 2820, col: 14, offset: 93380},
														run: (*parser).callonHeaderGroupElement11,
														expr: &oneOrMoreExpr{
															pos: position{line: 2820, col: 14, offset: 93380},
															expr: &charClassMatcher{
																pos:        position{line: 2820, col: 14, offset: 93380},
																val:        "[,?!;0-9\\pL]",
																chars:      []rune{',', '?', '!', ';'},
																ranges:     []rune{'0', '9'},
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&andExpr{
													pos: position{line: 2823, col: 5, offset: 93461},
													expr: &choiceExpr{
														pos: position{line: 2823, col: 7, offset: 93463},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2878, col: 10, offset: 95044},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2878, col: 16, offset: 95050},
																run: (*parser).callonHeaderGroupElement17,
																expr: &litMatcher{
																	pos:        position{line: 2878, col: 16, offset: 95050},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
															&charClassMatcher{
																pos:        position{line: 2797, col: 13, offset: 92519},
																val:        "[.�0-9\\pL]",
																chars:      []rune{'.', '�'},
																ranges:     []rune{'0', '9'},
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
															&notExpr{
																pos: position{line: 2890, col: 8, offset: 95285},
																expr: &anyMatcher{
																	line: 2890, col: 9, offset: 95286,
																},
															},
															&litMatcher{
																pos:        position{line: 2886, col: 12, offset: 95178},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2886, col: 19, offset: 95185},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&actionExpr{
																pos: position{line: 2886, col: 28, offset: 95194},
																run: (*parser).callonHeaderGroupElement24,
																expr: &litMatcher{
																	pos:        position{line: 2886, col: 28, offset: 95194},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2809, col: 5, offset: 92974},
										run: (*parser).callonHeaderGroupElement26,
										expr: &seqExpr{
											pos: position{line: 2809, col: 5, offset: 92974},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2809, col: 5, offset: 92974},
													expr: &charClassMatcher{
														pos:        position{line: 2809, col: 5, offset: 92974},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 2809, col: 15, offset: 92984},
													expr: &choiceExpr{
														pos: position{line: 2809, col: 17, offset: 92986},
														alternatives: []interface{}{
															&charClassMatcher{
																pos:        position{line: 2809, col: 17, offset: 92986},
																val:        "[\\r\\n ,]]",
																chars:      []rune{'\r', '\n', ' ', ',', ']'},
																ignoreCase: false,
																inverted:   false,
															},
															&notExpr{
																pos: position{line: 2890, col: 8, offset: 95285},
																expr: &anyMatcher{
																	line: 2890, col: 9, offset: 95286,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2811, col: 9, offset: 93068},
										run: (*parser).callonHeaderGroupElement35,
										expr: &seqExpr{
											pos: position{line: 2811, col: 9, offset: 93068},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2811, col: 9, offset: 93068},
													expr: &charClassMatcher{
														pos:        position{line: 2811, col: 9, offset: 93068},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&oneOrMoreExpr{
													pos: position{line: 2811, col: 19, offset: 93078},
													expr: &seqExpr{
														pos: position{line: 2811, col: 20, offset: 93079},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 2811, col: 20, offset: 93079},
																val:        "[=*_`]",
																chars:      []rune{'=', '*', '_', '`'},
																ignoreCase: false,
																inverted:   false,
															},
															&oneOrMoreExpr{
																pos: position{line: 2811, col: 27, offset: 93086},
																expr: &charClassMatcher{
																	pos:        position{line: 2811, col: 27, offset: 93086},
																	val:        "[0-9\\pL]",
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2829, col: 16, offset: 93605},
										run: (*parser).callonHeaderGroupElement44,
										expr: &seqExpr{
											pos: position{line: 2829, col: 16, offset: 93605},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2829, col: 17, offset: 93606},
													val:        "[.,;!?]",
													chars:      []rune{'.', ',', ';', '!', '?'},
													ignoreCase: false,
													inverted:   false,
												},
												&andExpr{
													pos: position{line: 2829, col: 46, offset: 93635},
													expr: &choiceExpr{
														pos: position{line: 2829, col: 48, offset: 93637},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2878, col: 10, offset: 95044},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2878, col: 16, offset: 95050},
																run: (*parser).callonHeaderGroupElement50,
																expr: &litMatcher{
																	pos:        position{line: 2878, col: 16, offset: 95050},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
															&notExpr{
																pos: position{line: 2890, col: 8, offset: 95285},
																expr: &anyMatcher{
																	line: 2890, col: 9, offset: 95286,
																},
															},
															&litMatcher{
																pos:        position{line: 2886, col: 12, offset: 95178},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2886, col: 19, offset: 95185},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&actionExpr{
																pos: position{line: 2886, col: 28, offset: 95194},
																run: (*parser).callonHeaderGroupElement56,
																expr: &litMatcher{
																	pos:        position{line: 2886, col: 28, offset: 95194},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
												},
											},
										},
									},
									&litMatcher{
										pos:        position{line: 2878, col: 10, offset: 95044},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
									&actionExpr{
										pos: position{line: 2878, col: 16, offset: 95050},
										run: (*parser).callonHeaderGroupElement59,
										expr: &litMatcher{
											pos:        position{line: 2878, col: 16, offset: 95050},
											val:        "\t",
											ignoreCase: false,
											want:       "\"\\t\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2413, col: 11, offset: 80994},
										name: "InlinePassthrough",
									},
									&actionExpr{
										pos: position{line: 2587, col: 5, offset: 86026},
										run: (*parser).callonHeaderGroupElement62,
										expr: &seqExpr{
											pos: position{line: 2587, col: 5, offset: 86026},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2587, col: 5, offset: 86026},
													run: (*parser).callonHeaderGroupElement64,
												},
												&labeledExpr{
													pos:   position{line: 2590, col: 5, offset: 86097},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2592, col: 9, offset: 86195},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2592, col: 9, offset: 86195},
																run: (*parser).callonHeaderGroupElement67,
																expr: &choiceExpr{
																	pos: position{line: 491, col: 27, offset: 15997},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 491, col: 27, offset: 15997},
																			run: (*parser).callonHeaderGroupElement69,
																			expr: &seqExpr{
																				pos: position{line: 491, col: 27, offset: 15997},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 491, col: 27, offset: 15997},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 491, col: 32, offset: 16002},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2866, col: 7, offset: 94768},
																							run: (*parser).callonHeaderGroupElement73,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2866, col: 7, offset: 94768},
																								expr: &charClassMatcher{
																									pos:        position{line: 2866, col: 7, offset: 94768},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 491, col: 40, offset: 16010},
																						expr: &choiceExpr{
																							pos: position{line: 2878, col: 10, offset: 95044},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2878, col: 10, offset: 95044},
																									val:        " ",
																									ignoreCase: false,
																									want:       "\" \"",
																								},
																								&actionExpr{
																									pos: position{line: 2878, col: 16, offset: 95050},
																									run: (*parser).callonHeaderGroupElement79,
																									expr: &litMatcher{
																										pos:        position{line: 2878, col: 16, offset: 95050},
																										val:        "\t",
																										ignoreCase: false,
																										want:       "\"\\t\"",
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 491, col: 47, offset: 16017},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 491, col: 51, offset: 16021},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 501, col: 24, offset: 16434},
																							expr: &choiceExpr{
																								pos: position{line: 502, col: 5, offset: 16440},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 502, col: 6, offset: 16441},
																										run: (*parser).callonHeaderGroupElement85,
																										expr: &seqExpr{
																											pos: position{line: 502, col: 6, offset: 16441},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 502, col: 6, offset: 16441},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 502, col: 14, offset: 16449},
																													expr: &charClassMatcher{
																														pos:        position{line: 502, col: 14, offset: 16449},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 449, col: 5, offset: 14443},
																										run: (*parser).callonHeaderGroupElement90,
																										expr: &seqExpr{
																											pos: position{line: 449, col: 5, offset: 14443},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 449, col: 5, offset: 14443},
																													run: (*parser).callonHeaderGroupElement92,
																												},
																												&labeledExpr{
																													pos:   position{line: 452, col: 5, offset: 14507},
																													label: "element",
																													expr: &choiceExpr{
																														pos: position{line: 452, col: 14, offset: 14516},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 463, col: 25, offset: 14978},
																																run: (*parser).callonHeaderGroupElement95,
																																expr: &seqExpr{
																																	pos: position{line: 463, col: 25, offset: 14978},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 463, col: 25, offset: 14978},
																																			val:        "{counter:",
																																			ignoreCase: false,
																																			want:       "\"{counter:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 463, col: 37, offset: 14990},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 118, col: 18, offset: 3399},
																																				run: (*parser).callonHeaderGroupElement99,
																																				expr: &seqExpr{
																																					pos: position{line: 118, col: 18, offset: 3399},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 118, col: 18, offset: 3399},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 118, col: 28, offset: 3409},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 118, col: 29, offset: 3410},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 463, col: 56, offset: 15009},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 463, col: 62, offset: 15015},
																																				expr: &actionExpr{
																																					pos: position{line: 471, col: 17, offset: 15278},
																																					run: (*parser).callonHeaderGroupElement106,
																																					expr: &seqExpr{
																																						pos: position{line: 471, col: 17, offset: 15278},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 471, col: 17, offset: 15278},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 471, col: 21, offset: 15282},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 471, col: 28, offset: 15289},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 471, col: 28, offset: 15289},
																																											run: (*parser).callonHeaderGroupElement111,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 471, col: 28, offset: 15289},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 473, col: 9, offset: 15343},
																																											run: (*parser).callonHeaderGroupElement113,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 473, col: 9, offset: 15343},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 473, col: 9, offset: 15343},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 463, col: 78, offset: 15031},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 467, col: 25, offset: 15133},
																																run: (*parser).callonHeaderGroupElement117,
																																expr: &seqExpr{
																																	pos: position{line: 467, col: 25, offset: 15133},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 467, col: 25, offset: 15133},
																																			val:        "{counter2:",
																																			ignoreCase: false,
																																			want:       "\"{counter2:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 467, col: 38, offset: 15146},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 118, col: 18, offset: 3399},
																																				run: (*parser).callonHeaderGroupElement121,
																																				expr: &seqExpr{
																																					pos: position{line: 118, col: 18, offset: 3399},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 118, col: 18, offset: 3399},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 118, col: 28, offset: 3409},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 118, col: 29, offset: 3410},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 467, col: 57, offset: 15165},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 467, col: 63, offset: 15171},
																																				expr: &actionExpr{
																																					pos: position{line: 471, col: 17, offset: 15278},
																																					run: (*parser).callonHeaderGroupElement128,
																																					expr: &seqExpr{
																																						pos: position{line: 471, col: 17, offset: 15278},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 471, col: 17, offset: 15278},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 471, col: 21, offset: 15282},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 471, col: 28, offset: 15289},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 471, col: 28, offset: 15289},
																																											run: (*parser).callonHeaderGroupElement133,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 471, col: 28, offset: 15289},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 473, col: 9, offset: 15343},
																																											run: (*parser).callonHeaderGroupElement135,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 473, col: 9, offset: 15343},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 473, col: 9, offset: 15343},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 467, col: 79, offset: 15187},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 456, col: 31, offset: 14633},
																																run: (*parser).callonHeaderGroupElement139,
																																expr: &seqExpr{
																																	pos: position{line: 456, col: 31, offset: 14633},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 456, col: 31, offset: 14633},
																																			val:        "{",
																																			ignoreCase: false,
																																			want:       "\"{\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 456, col: 35, offset: 14637},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 118, col: 18, offset: 3399},
																																				run: (*parser).callonHeaderGroupElement143,
																																				expr: &seqExpr{
																																					pos: position{line: 118, col: 18, offset: 3399},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 118, col: 18, offset: 3399},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 118, col: 28, offset: 3409},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 118, col: 29, offset: 3410},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 456, col: 54, offset: 14656},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 506, col: 8, offset: 16673},
																										run: (*parser).callonHeaderGroupElement149,
																										expr: &litMatcher{
																											pos:        position{line: 506, col: 8, offset: 16673},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 491, col: 79, offset: 16049},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 493, col: 9, offset: 16122},
																			run: (*parser).callonHeaderGroupElement152,
																			expr: &seqExpr{
																				pos: position{line: 493, col: 9, offset: 16122},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 493, col: 9, offset: 16122},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 493, col: 14, offset: 16127},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2866, col: 7, offset: 94768},
																							run: (*parser).callonHeaderGroupElement156,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2866, col: 7, offset: 94768},
																								expr: &charClassMatcher{
																									pos:        position{line: 2866, col: 7, offset: 94768},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 493, col: 22, offset: 16135},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2595, col: 11, offset: 86299},
																run: (*parser).callonHeaderGroupElement160,
																expr: &charClassMatcher{
																	pos:        position{line: 2595, col: 12, offset: 86300},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2415, col: 11, offset: 81049},
										name: "Quote",
									},
									&ruleRefExpr{
										pos:  position{line: 2416, col: 11, offset: 81065},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 2417, col: 11, offset: 81080},
										name: "InlineIcon",
									},
									&actionExpr{
										pos: position{line: 449, col: 5, offset: 14443},
										run: (*parser).callonHeaderGroupElement165,
										expr: &seqExpr{
											pos: position{line: 449, col: 5, offset: 14443},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 449, col: 5, offset: 14443},
													run: (*parser).callonHeaderGroupElement167,
												},
												&labeledExpr{
													pos:   position{line: 452, col: 5, offset: 14507},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 452, col: 14, offset: 14516},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 463, col: 25, offset: 14978},
																run: (*parser).callonHeaderGroupElement170,
																expr: &seqExpr{
																	pos: position{line: 463, col: 25, offset: 14978},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 463, col: 25, offset: 14978},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 463, col: 37, offset: 14990},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 118, col: 18, offset: 3399},
																				run: (*parser).callonHeaderGroupElement174,
																				expr: &seqExpr{
																					pos: position{line: 118, col: 18, offset: 3399},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 118, col: 18, offset: 3399},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 118, col: 28, offset: 3409},
																							expr: &charClassMatcher{
																								pos:        position{line: 118, col: 29, offset: 3410},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 463, col: 56, offset: 15009},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 463, col: 62, offset: 15015},
																				expr: &actionExpr{
																					pos: position{line: 471, col: 17, offset: 15278},
																					run: (*parser).callonHeaderGroupElement181,
																					expr: &seqExpr{
																						pos: position{line: 471, col: 17, offset: 15278},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 471, col: 17, offset: 15278},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 471, col: 21, offset: 15282},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 471, col: 28, offset: 15289},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 471, col: 28, offset: 15289},
																											run: (*parser).callonHeaderGroupElement186,
																											expr: &charClassMatcher{
																												pos:        position{line: 471, col: 28, offset: 15289},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 473, col: 9, offset: 15343},
																											run: (*parser).callonHeaderGroupElement188,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 473, col: 9, offset: 15343},
																												expr: &charClassMatcher{
																													pos:        position{line: 473, col: 9, offset: 15343},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 463, col: 78, offset: 15031},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 467, col: 25, offset: 15133},
																run: (*parser).callonHeaderGroupElement192,
																expr: &seqExpr{
																	pos: position{line: 467, col: 25, offset: 15133},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 467, col: 25, offset: 15133},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 467, col: 38, offset: 15146},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 118, col: 18, offset: 3399},
																				run: (*parser).callonHeaderGroupElement196,
																				expr: &seqExpr{
																					pos: position{line: 118, col: 18, offset: 3399},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 118, col: 18, offset: 3399},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 118, col: 28, offset: 3409},
																							expr: &charClassMatcher{
																								pos:        position{line: 118, col: 29, offset: 3410},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 467, col: 57, offset: 15165},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 467, col: 63, offset: 15171},
																				expr: &actionExpr{
																					pos: position{line: 471, col: 17, offset: 15278},
																					run: (*parser).callonHeaderGroupElement203,
																					expr: &seqExpr{
																						pos: position{line: 471, col: 17, offset: 15278},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 471, col: 17, offset: 15278},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 471, col: 21, offset: 15282},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 471, col: 28, offset: 15289},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 471, col: 28, offset: 15289},
																											run: (*parser).callonHeaderGroupElement208,
																											expr: &charClassMatcher{
																												pos:        position{line: 471, col: 28, offset: 15289},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 473, col: 9, offset: 15343},
																											run: (*parser).callonHeaderGroupElement210,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 473, col: 9, offset: 15343},
																												expr: &charClassMatcher{
																													pos:        position{line: 473, col: 9, offset: 15343},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 467, col: 79, offset: 15187},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 456, col: 31, offset: 14633},
																run: (*parser).callonHeaderGroupElement214,
																expr: &seqExpr{
																	pos: position{line: 456, col: 31, offset: 14633},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 456, col: 31, offset: 14633},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 456, col: 35, offset: 14637},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 118, col: 18, offset: 3399},
																				run: (*parser).callonHeaderGroupElement218,
																				expr: &seqExpr{
																					pos: position{line: 118, col: 18, offset: 3399},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 118, col: 18, offset: 3399},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 118, col: 28, offset: 3409},
																							expr: &charClassMatcher{
																								pos:        position{line: 118, col: 29, offset: 3410},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 456, col: 54, offset: 14656},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 947, col: 23, offset: 29896},
										run: (*parser).callonHeaderGroupElement224,
										expr: &seqExpr{
											pos: position{line: 947, col: 23, offset: 29896},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 945, col: 32, offset: 29864},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
												&labeledExpr{
													pos:   position{line: 947, col: 51, offset: 29924},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 947, col: 56, offset: 29929},
														run: (*parser).callonHeaderGroupElement228,
														expr: &oneOrMoreExpr{
															pos: position{line: 947, col: 56, offset: 29929},
															expr: &charClassMatcher{
																pos:        position{line: 947, col: 56, offset: 29929},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 945, col: 32, offset: 29864},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2576, col: 5, offset: 85805},
										run: (*parser).callonHeaderGroupElement232,
										expr: &seqExpr{
											pos: position{line: 2576, col: 5, offset: 85805},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2576, col: 5, offset: 85805},
													run: (*parser).callonHeaderGroupElement234,
												},
												&labeledExpr{
													pos:   position{line: 2579, col: 5, offset: 85871},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2618, col: 11, offset: 87173},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2620, col: 15, offset: 87267},
																run: (*parser).callonHeaderGroupElement237,
																expr: &litMatcher{
																	pos:        position{line: 2620, col: 15, offset: 87267},
																	val:        "`'",
																	ignoreCase: false,
																	want:       "\"`'\"",
																},
															},
															&actionExpr{
																pos: position{line: 2626, col: 14, offset: 87382},
																run: (*parser).callonHeaderGroupElement239,
																expr: &litMatcher{
																	pos:        position{line: 2626, col: 14, offset: 87382},
																	val:        "(C)",
																	ignoreCase: false,
																	want:       "\"(C)\"",
																},
															},
															&actionExpr{
																pos: position{line: 2630, col: 14, offset: 87458},
																run: (*parser).callonHeaderGroupElement241,
																expr: &litMatcher{
																	pos:        position{line: 2630, col: 14, offset: 87458},
																	val:        "(TM)",
																	ignoreCase: false,
																	want:       "\"(TM)\"",
																},
															},
															&actionExpr{
																pos: position{line: 2634, col: 15, offset: 87536},
																run: (*parser).callonHeaderGroupElement243,
																expr: &litMatcher{
																	pos:        position{line: 2634, col: 15, offset: 87536},
																	val:        "(R)",
																	ignoreCase: false,
																	want:       "\"(R)\"",
																},
															},
															&actionExpr{
																pos: position{line: 2638, col: 13, offset: 87611},
																run: (*parser).callonHeaderGroupElement245,
																expr: &litMatcher{
																	pos:        position{line: 2638, col: 13, offset: 87611},
																	val:        "...",
																	ignoreCase: false,
																	want:       "\"...\"",
																},
															},
															&actionExpr{
																pos: position{line: 2646, col: 22, offset: 87917},
																run: (*parser).callonHeaderGroupElement247,
																expr: &seqExpr{
																	pos: position{line: 2646, col: 22, offset: 87917},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 2797, col: 13, offset: 92519},
																			val:        "[0-9\\pL]",
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&litMatcher{
																			pos:        position{line: 2646, col: 31, offset: 87926},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&andExpr{
																			pos: position{line: 2646, col: 35, offset: 87930},
																			expr: &charClassMatcher{
																				pos:        position{line: 2646, col: 36, offset: 87931},
																				val:        "[\\pL]",
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 184, col: 4, offset: 5334},
										run: (*parser).callonHeaderGroupElement253,
										expr: &seqExpr{
											pos: position{line: 184, col: 4, offset: 5334},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 184, col: 4, offset: 5334},
													val:        "[[",
													ignoreCase: false,
													want:       "\"[[\"",
												},
												&labeledExpr{
													pos:   position{line: 185, col: 5, offset: 5344},
													label: "id",
													expr: &actionExpr{
														pos: position{line: 186, col: 9, offset: 5357},
														run: (*parser).callonHeaderGroupElement257,
														expr: &labeledExpr{
															pos:   position{line: 186, col: 9, offset: 5357},
															label: "elements",
															expr: &oneOrMoreExpr{
																pos: position{line: 186, col: 18, offset: 5366},
																expr: &choiceExpr{
																	pos: position{line: 187, col: 13, offset: 5380},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 187, col: 14, offset: 5381},
																			run: (*parser).callonHeaderGroupElement261,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 187, col: 14, offset: 5381},
																				expr: &charClassMatcher{
																					pos:        position{line: 187, col: 14, offset: 5381},
																					val:        "[^=\\r\\n�{]]",
																					chars:      []rune{'=', '\r', '\n', '�', '{', ']'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 947, col: 23, offset: 29896},
																			run: (*parser).callonHeaderGroupElement264,
																			expr: &seqExpr{
																				pos: position{line: 947, col: 23, offset: 29896},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 945, col: 32, offset: 29864},
																						val:        "�",
																						ignoreCase: false,
																						want:       "\"�\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 947, col: 51, offset: 29924},
																						label: "ref",
																						expr: &actionExpr{
																							pos: position{line: 947, col: 56, offset: 29929},
																							run: (*parser).callonHeaderGroupElement268,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 947, col: 56, offset: 29929},
																								expr: &charClassMatcher{
																									pos:        position{line: 947, col: 56, offset: 29929},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 945, col: 32, offset: 29864},
																						val:        "�",
																						ignoreCase: false,
																						want:       "\"�\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 449, col: 5, offset: 14443},
																			run: (*parser).callonHeaderGroupElement272,
																			expr: &seqExpr{
																				pos: position{line: 449, col: 5, offset: 14443},
																				exprs: []interface{}{
																					&andCodeExpr{
																						pos: position{line: 449, col: 5, offset: 14443},
																						run: (*parser).callonHeaderGroupElement274,
																					},
																					&labeledExpr{
																						pos:   position{line: 452, col: 5, offset: 14507},
																						label: "element",
																						expr: &choiceExpr{
																							pos: position{line: 452, col: 14, offset: 14516},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 463, col: 25, offset: 14978},
																									run: (*parser).callonHeaderGroupElement277,
																									expr: &seqExpr{
																										pos: position{line: 463, col: 25, offset: 14978},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 463, col: 25, offset: 14978},
																												val:        "{counter:",
																												ignoreCase: false,
																												want:       "\"{counter:\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 463, col: 37, offset: 14990},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 118, col: 18, offset: 3399},
																													run: (*parser).callonHeaderGroupElement281,
																													expr: &seqExpr{
																														pos: position{line: 118, col: 18, offset: 3399},
																														exprs: []interface{}{
																															&charClassMatcher{
																																pos:        position{line: 118, col: 18, offset: 3399},
																																val:        "[_0-9\\pL]",
																																chars:      []rune{'_'},
																																ranges:     []rune{'0', '9'},
																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 118, col: 28, offset: 3409},
																																expr: &charClassMatcher{
																																	pos:        position{line: 118, col: 29, offset: 3410},
																																	val:        "[-0-9\\pL]",
																																	chars:      []rune{'-'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 463, col: 56, offset: 15009},
																												label: "start",
																												expr: &zeroOrOneExpr{
																													pos: position{line: 463, col: 62, offset: 15015},
																													expr: &actionExpr{
																														pos: position{line: 471, col: 17, offset: 15278},
																														run: (*parser).callonHeaderGroupElement288,
																														expr: &seqExpr{
																															pos: position{line: 471, col: 17, offset: 15278},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 471, col: 17, offset: 15278},
																																	val:        ":",
																																	ignoreCase: false,
																																	want:       "\":\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 471, col: 21, offset: 15282},
																																	label: "start",
																																	expr: &choiceExpr{
																																		pos: position{line: 471, col: 28, offset: 15289},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 471, col: 28, offset: 15289},
																																				run: (*parser).callonHeaderGroupElement293,
																																				expr: &charClassMatcher{
																																					pos:        position{line: 471, col: 28, offset: 15289},
																																					val:        "[A-Za-z]",
																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 473, col: 9, offset: 15343},
																																				run: (*parser).callonHeaderGroupElement295,
																																				expr: &oneOrMoreExpr{
																																					pos: position{line: 473, col: 9, offset: 15343},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 473, col: 9, offset: 15343},
																																						val:        "[0-9]",
																																						ranges:     []rune{'0', '9'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 463, col: 78, offset: 15031},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 467, col: 25, offset: 15133},
																									run: (*parser).callonHeaderGroupElement299,
																									expr: &seqExpr{
																										pos: position{line: 467, col: 25, offset: 15133},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 467, col: 25, offset: 15133},
																												val:        "{counter2:",
																												ignoreCase: false,
																												want:       "\"{counter2:\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 467, col: 38, offset: 15146},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 118, col: 18, offset: 3399},
																													run: (*parser).callonHeaderGroupElement303,
																													expr: &seqExpr{
																														pos: position{line: 118, col: 18, offset: 3399},
																														exprs: []interface{}{
																															&charClassMatcher{
																																pos:        position{line: 118, col: 18, offset: 3399},
																																val:        "[_0-9\\pL]",
																																chars:      []rune{'_'},
																																ranges:     []rune{'0', '9'},
																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 118, col: 28, offset: 3409},
																																expr: &charClassMatcher{
																																	pos:        position{line: 118, col: 29, offset: 3410},
																																	val:        "[-0-9\\pL]",
																																	chars:      []rune{'-'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 467, col: 57, offset: 15165},
																												label: "start",
																												expr: &zeroOrOneExpr{
																													pos: position{line: 467, col: 63, offset: 15171},
																													expr: &actionExpr{
																														pos: position{line: 471, col: 17, offset: 15278},
																														run: (*parser).callonHeaderGroupElement310,
																														expr: &seqExpr{
																															pos: position{line: 471, col: 17, offset: 15278},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 471, col: 17, offset: 15278},
																																	val:        ":",
																																	ignoreCase: false,
																																	want:       "\":\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 471, col: 21, offset: 15282},
																																	label: "start",
																																	expr: &choiceExpr{
																																		pos: position{line: 471, col: 28, offset: 15289},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 471, col: 28, offset: 15289},
																																				run: (*parser).callonHeaderGroupElement315,
																																				expr: &charClassMatcher{
																																					pos:        position{line: 471, col: 28, offset: 15289},
																																					val:        "[A-Za-z]",
																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 473, col: 9, offset: 15343},
																																				run: (*parser).callonHeaderGroupElement317,
																																				expr: &oneOrMoreExpr{
																																					pos: position{line: 473, col: 9, offset: 15343},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 473, col: 9, offset: 15343},
																																						val:        "[0-9]",
																																						ranges:     []rune{'0', '9'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 467, col: 79, offset: 15187},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 456, col: 31, offset: 14633},
																									run: (*parser).callonHeaderGroupElement321,
																									expr: &seqExpr{
																										pos: position{line: 456, col: 31, offset: 14633},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 456, col: 31, offset: 14633},
																												val:        "{",
																												ignoreCase: false,
																												want:       "\"{\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 456, col: 35, offset: 14637},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 118, col: 18, offset: 3399},
																													run: (*parser).callonHeaderGroupElement325,
																													expr: &seqExpr{
																														pos: position{line: 118, col: 18, offset: 3399},
																														exprs: []interface{}{
																															&charClassMatcher{
																																pos:        position{line: 118, col: 18, offset: 3399},
																																val:        "[_0-9\\pL]",
																																chars:      []rune{'_'},
																																ranges:     []rune{'0', '9'},
																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 118, col: 28, offset: 3409},
																																expr: &charClassMatcher{
																																	pos:        position{line: 118, col: 29, offset: 3410},
																																	val:        "[-0-9\\pL]",
																																	chars:      []rune{'-'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 456, col: 54, offset: 14656},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 192, col: 16, offset: 5617},
																			run: (*parser).callonHeaderGroupElement331,
																			expr: &litMatcher{
																				pos:        position{line: 192, col: 16, offset: 5617},
																				val:        "{",
																				ignoreCase: false,
																				want:       "\"{\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 198, col: 5, offset: 5803},
													val:        "]]",
													ignoreCase: false,
													want:       "\"]]\"",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2422, col: 11, offset: 81298},
										name: "InlineFootnote",
									},
									&actionExpr{
										pos: position{line: 2835, col: 12, offset: 93828},
										run: (*parser).callonHeaderGroupElement335,
										expr: &anyMatcher{
											line: 2835, col: 12, offset: 93828,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MacrosGroup",
			pos:  position{line: 2428, col: 1, offset: 81417},
			expr: &actionExpr{
				pos: position{line: 2428, col: 16, offset: 81432},
				run: (*parser).callonMacrosGroup1,
				expr: &seqExpr{
					pos: position{line: 2428, col: 16, offset: 81432},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2428, col: 16, offset: 81432},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2428, col: 25, offset: 81441},
								expr: &choiceExpr{
									pos: position{line: 2429, col: 5, offset: 81447},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 2820, col: 5, offset: 93371},
											run: (*parser).callonMacrosGroup6,
											expr: &seqExpr{
												pos: position{line: 2820, col: 5, offset: 93371},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 2820, col: 5, offset: 93371},
														label: "content",
														expr: &actionExpr{
															pos: position{line: 2820, col: 14, offset: 93380},
															run: (*parser).callonMacrosGroup9,
															expr: &oneOrMoreExpr{
																pos: position{line: 2820, col: 14, offset: 93380},
																expr: &charClassMatcher{
																	pos:        position{line: 2820, col: 14, offset: 93380},
																	val:        "[,?!;0-9\\pL]",
																	chars:      []rune{',', '?', '!', ';'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&andExpr{
														pos: position{line: 2823, col: 5, offset: 93461},
														expr: &choiceExpr{
															pos: position{line: 2823, col: 7, offset: 93463},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2878, col: 10, offset: 95044},
																	val:        " ",
																	ignoreCase: false,
																	want:       "\" \"",
																},
																&actionExpr{
																	pos: position{line: 2878, col: 16, offset: 95050},
																	run: (*parser).callonMacrosGroup15,
																	expr: &litMatcher{
																		pos:        position{line: 2878, col: 16, offset: 95050},
																		val:        "\t",
																		ignoreCase: false,
																		want:       "\"\\t\"",
																	},
																},
																&charClassMatcher{
																	pos:        position{line: 2797, col: 13, offset: 92519},
																	val:        "[.�0-9\\pL]",
																	chars:      []rune{'.', '�'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&notExpr{
																	pos: position{line: 2890, col: 8, offset: 95285},
																	expr: &anyMatcher{
																		line: 2890, col: 9, offset: 95286,
																	},
																},
																&litMatcher{
																	pos:        position{line: 2886, col: 12, offset: 95178},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2886, col: 19, offset: 95185},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&actionExpr{
																	pos: position{line: 2886, col: 28, offset: 95194},
																	run: (*parser).callonMacrosGroup22,
																	expr: &litMatcher{
																		pos:        position{line: 2886, col: 28, offset: 95194},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2809, col: 5, offset: 92974},
											run: (*parser).callonMacrosGroup24,
											expr: &seqExpr{
												pos: position{line: 2809, col: 5, offset: 92974},
												exprs: []interface{}{
													&oneOrMoreExpr{
														pos: position{line: 2809, col: 5, offset: 92974},
														expr: &charClassMatcher{
															pos:        position{line: 2809, col: 5, offset: 92974},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&andExpr{
														pos: position{line: 2809, col: 15, offset: 92984},
														expr: &choiceExpr{
															pos: position{line: 2809, col: 17, offset: 92986},
															alternatives: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2809, col: 17, offset: 92986},
																	val:        "[\\r\\n ,]]",
																	chars:      []rune{'\r', '\n', ' ', ',', ']'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&notExpr{
																	pos: position{line: 2890, col: 8, offset: 95285},
																	expr: &anyMatcher{
																		line: 2890, col: 9, offset: 95286,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2811, col: 9, offset: 93068},
											run: (*parser).callonMacrosGroup33,
											expr: &seqExpr{
												pos: position{line: 2811, col: 9, offset: 93068},
												exprs: []interface{}{
													&oneOrMoreExpr{
														pos: position{line: 2811, col: 9, offset: 93068},
														expr: &charClassMatcher{
															pos:        position{line: 2811, col: 9, offset: 93068},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&oneOrMoreExpr{
														pos: position{line: 2811, col: 19, offset: 93078},
														expr: &seqExpr{
															pos: position{line: 2811, col: 20, offset: 93079},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2811, col: 20, offset: 93079},
																	val:        "[=*_`]",
																	chars:      []rune{'=', '*', '_', '`'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&oneOrMoreExpr{
																	pos: position{line: 2811, col: 27, offset: 93086},
																	expr: &charClassMatcher{
																		pos:        position{line: 2811, col: 27, offset: 93086},
																		val:        "[0-9\\pL]",
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2829, col: 16, offset: 93605},
											run: (*parser).callonMacrosGroup42,
											expr: &seqExpr{
												pos: position{line: 2829, col: 16, offset: 93605},
												exprs: []interface{}{
													&charClassMatcher{
														pos:        position{line: 2829, col: 17, offset: 93606},
														val:        "[.,;!?]",
														chars:      []rune{'.', ',', ';', '!', '?'},
														ignoreCase: false,
														inverted:   false,
													},
													&andExpr{
														pos: position{line: 2829, col: 46, offset: 93635},
														expr: &choiceExpr{
															pos: position{line: 2829, col: 48, offset: 93637},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2878, col: 10, offset: 95044},
																	val:        " ",
																	ignoreCase: false,
																	want:       "\" \"",
																},
																&actionExpr{
																	pos: position{line: 2878, col: 16, offset: 95050},
																	run: (*parser).callonMacrosGroup48,
																	expr: &litMatcher{
																		pos:        position{line: 2878, col: 16, offset: 95050},
																		val:        "\t",
																		ignoreCase: false,
																		want:       "\"\\t\"",
																	},
																},
																&notExpr{
																	pos: position{line: 2890, col: 8, offset: 95285},
																	expr: &anyMatcher{
																		line: 2890, col: 9, offset: 95286,
																	},
																},
																&litMatcher{
																	pos:        position{line: 2886, col: 12, offset: 95178},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2886, col: 19, offset: 95185},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&actionExpr{
																	pos: position{line: 2886, col: 28, offset: 95194},
																	run: (*parser).callonMacrosGroup54,
																	expr: &litMatcher{
																		pos:        position{line: 2886, col: 28, offset: 95194},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2430, col: 7, offset: 81464},
											name: "InlineMacro",
										},
										&actionExpr{
											pos: position{line: 947, col: 23, offset: 29896},
											run: (*parser).callonMacrosGroup57,
											expr: &seqExpr{
												pos: position{line: 947, col: 23, offset: 29896},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 945, col: 32, offset: 29864},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
													&labeledExpr{
														pos:   position{line: 947, col: 51, offset: 29924},
														label: "ref",
														expr: &actionExpr{
															pos: position{line: 947, col: 56, offset: 29929},
															run: (*parser).callonMacrosGroup61,
															expr: &oneOrMoreExpr{
																pos: position{line: 947, col: 56, offset: 29929},
																expr: &charClassMatcher{
																	pos:        position{line: 947, col: 56, offset: 29929},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 945, col: 32, offset: 29864},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2835, col: 12, offset: 93828},
											run: (*parser).callonMacrosGroup65,
											expr: &anyMatcher{
												line: 2835, col: 12, offset: 93828,
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2890, col: 8, offset: 95285},
							expr: &anyMatcher{
								line: 2890, col: 9, offset: 95286,
							},
						},
					},
				},
			},
		},
		{
			name: "NoneGroup",
			pos:  position{line: 2438, col: 1, offset: 81765},
			expr: &actionExpr{
				pos: position{line: 2438, col: 14, offset: 81778},
				run: (*parser).callonNoneGroup1,
				expr: &seqExpr{
					pos: position{line: 2438, col: 14, offset: 81778},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2438, col: 14, offset: 81778},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2438, col: 23, offset: 81787},
								expr: &actionExpr{
									pos: position{line: 2443, col: 5, offset: 81888},
									run: (*parser).callonNoneGroup5,
									expr: &seqExpr{
										pos: position{line: 2443, col: 5, offset: 81888},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2443, col: 5, offset: 81888},
												expr: &notExpr{
													pos: position{line: 2890, col: 8, offset: 95285},
													expr: &anyMatcher{
														line: 2890, col: 9, offset: 95286,
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2444, col: 5, offset: 81897},
												label: "element",
												expr: &oneOrMoreExpr{
													pos: position{line: 2444, col: 13, offset: 81905},
													expr: &choiceExpr{
														pos: position{line: 2445, col: 9, offset: 81915},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2820, col: 5, offset: 93371},
																run: (*parser).callonNoneGroup13,
																expr: &seqExpr{
																	pos: position{line: 2820, col: 5, offset: 93371},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 2820, col: 5, offset: 93371},
																			label: "content",
																			expr: &actionExpr{
																				pos: position{line: 2820, col: 14, offset: 93380},
																				run: (*parser).callonNoneGroup16,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2820, col: 14, offset: 93380},
																					expr: &charClassMatcher{
																						pos:        position{line: 2820, col: 14, offset: 93380},
																						val:        "[,?!;0-9\\pL]",
																						chars:      []rune{',', '?', '!', ';'},
																						ranges:     []rune{'0', '9'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&andExpr{
																			pos: position{line: 2823, col: 5, offset: 93461},
																			expr: &choiceExpr{
																				pos: position{line: 2823, col: 7, offset: 93463},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2878, col: 10, offset: 95044},
																						val:        " ",
																						ignoreCase: false,
																						want:       "\" \"",
																					},
																					&actionExpr{
																						pos: position{line: 2878, col: 16, offset: 95050},
																						run: (*parser).callonNoneGroup22,
																						expr: &litMatcher{
																							pos:        position{line: 2878, col: 16, offset: 95050},
																							val:        "\t",
																							ignoreCase: false,
																							want:       "\"\\t\"",
																						},
																					},
																					&charClassMatcher{
																						pos:        position{line: 2797, col: 13, offset: 92519},
																						val:        "[.�0-9\\pL]",
																						chars:      []rune{'.', '�'},
																						ranges:     []rune{'0', '9'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&notExpr{
																						pos: position{line: 2890, col: 8, offset: 95285},
																						expr: &anyMatcher{
																							line: 2890, col: 9, offset: 95286,
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 2886, col: 12, offset: 95178},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2886, col: 19, offset: 95185},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&actionExpr{
																						pos: position{line: 2886, col: 28, offset: 95194},
																						run: (*parser).callonNoneGroup29,
																						expr: &litMatcher{
																							pos:        position{line: 2886, col: 28, offset: 95194},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2809, col: 5, offset: 92974},
																run: (*parser).callonNoneGroup31,
																expr: &seqExpr{
																	pos: position{line: 2809, col: 5, offset: 92974},
																	exprs: []interface{}{
																		&oneOrMoreExpr{
																			pos: position{line: 2809, col: 5, offset: 92974},
																			expr: &charClassMatcher{
																				pos:        position{line: 2809, col: 5, offset: 92974},
																				val:        "[0-9\\pL]",
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&andExpr{
																			pos: position{line: 2809, col: 15, offset: 92984},
																			expr: &choiceExpr{
																				pos: position{line: 2809, col: 17, offset: 92986},
																				alternatives: []interface{}{
																					&charClassMatcher{
																						pos:        position{line: 2809, col: 17, offset: 92986},
																						val:        "[\\r\\n ,]]",
																						chars:      []rune{'\r', '\n', ' ', ',', ']'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&notExpr{
																						pos: position{line: 2890, col: 8, offset: 95285},
																						expr: &anyMatcher{
																							line: 2890, col: 9, offset: 95286,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2811, col: 9, offset: 93068},
																run: (*parser).callonNoneGroup40,
																expr: &seqExpr{
																	pos: position{line: 2811, col: 9, offset: 93068},
																	exprs: []interface{}{
																		&oneOrMoreExpr{
																			pos: position{line: 2811, col: 9, offset: 93068},
																			expr: &charClassMatcher{
																				pos:        position{line: 2811, col: 9, offset: 93068},
																				val:        "[0-9\\pL]",
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 2811, col: 19, offset: 93078},
																			expr: &seqExpr{
																				pos: position{line: 2811, col: 20, offset: 93079},
																				exprs: []interface{}{
																					&charClassMatcher{
																						pos:        position{line: 2811, col: 20, offset: 93079},
																						val:        "[=*_`]",
																						chars:      []rune{'=', '*', '_', '`'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&oneOrMoreExpr{
																						pos: position{line: 2811, col: 27, offset: 93086},
																						expr: &charClassMatcher{
																							pos:        position{line: 2811, col: 27, offset: 93086},
																							val:        "[0-9\\pL]",
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2829, col: 16, offset: 93605},
																run: (*parser).callonNoneGroup49,
																expr: &seqExpr{
																	pos: position{line: 2829, col: 16, offset: 93605},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 2829, col: 17, offset: 93606},
																			val:        "[.,;!?]",
																			chars:      []rune{'.', ',', ';', '!', '?'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&andExpr{
																			pos: position{line: 2829, col: 46, offset: 93635},
																			expr: &choiceExpr{
																				pos: position{line: 2829, col: 48, offset: 93637},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2878, col: 10, offset: 95044},
																						val:        " ",
																						ignoreCase: false,
																						want:       "\" \"",
																					},
																					&actionExpr{
																						pos: position{line: 2878, col: 16, offset: 95050},
																						run: (*parser).callonNoneGroup55,
																						expr: &litMatcher{
																							pos:        position{line: 2878, col: 16, offset: 95050},
																							val:        "\t",
																							ignoreCase: false,
																							want:       "\"\\t\"",
																						},
																					},
																					&notExpr{
																						pos: position{line: 2890, col: 8, offset: 95285},
																						expr: &anyMatcher{
																							line: 2890, col: 9, offset: 95286,
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 2886, col: 12, offset: 95178},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2886, col: 19, offset: 95185},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&actionExpr{
																						pos: position{line: 2886, col: 28, offset: 95194},
																						run: (*parser).callonNoneGroup61,
																						expr: &litMatcher{
																							pos:        position{line: 2886, col: 28, offset: 95194},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 947, col: 23, offset: 29896},
																run: (*parser).callonNoneGroup63,
																expr: &seqExpr{
																	pos: position{line: 947, col: 23, offset: 29896},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 945, col: 32, offset: 29864},
																			val:        "�",
																			ignoreCase: false,
																			want:       "\"�\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 947, col: 51, offset: 29924},
																			label: "ref",
																			expr: &actionExpr{
																				pos: position{line: 947, col: 56, offset: 29929},
																				run: (*parser).callonNoneGroup67,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 947, col: 56, offset: 29929},
																					expr: &charClassMatcher{
																						pos:        position{line: 947, col: 56, offset: 29929},
																						val:        "[0-9]",
																						ranges:     []rune{'0', '9'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 945, col: 32, offset: 29864},
																			val:        "�",
																			ignoreCase: false,
																			want:       "\"�\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2835, col: 12, offset: 93828},
																run: (*parser).callonNoneGroup71,
																expr: &anyMatcher{
																	line: 2835, col: 12, offset: 93828,
																},
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 2890, col: 8, offset: 95285},
												expr: &anyMatcher{
													line: 2890, col: 9, offset: 95286,
												},
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2890, col: 8, offset: 95285},
							expr: &anyMatcher{
								line: 2890, col: 9, offset: 95286,
							},
						},
					},
				},
			},
		},
		{
			name: "NormalGroup",
			pos:  position{line: 2453, col: 1, offset: 82313},
			expr: &actionExpr{
				pos: position{line: 2453, col: 16, offset: 82328},
				run: (*parser).callonNormalGroup1,
				expr: &seqExpr{
					pos: position{line: 2453, col: 16, offset: 82328},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2453, col: 16, offset: 82328},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2453, col: 25, offset: 82337},
								expr: &ruleRefExpr{
									pos:  position{line: 2453, col: 26, offset: 82338},
									name: "NormalGroupElement",
								},
							},
						},
						&notExpr{
							pos: position{line: 2890, col: 8, offset: 95285},
							expr: &anyMatcher{
								line: 2890, col: 9, offset: 95286,
							},
						},
					},
				},
			},
		},
		{
			name: "NormalGroupElement",
			pos:  position{line: 2457, col: 1, offset: 82415},
			expr: &actionExpr{
				pos: position{line: 2458, col: 5, offset: 82442},
				run: (*parser).callonNormalGroupElement1,
				expr: &seqExpr{
					pos: position{line: 2458, col: 5, offset: 82442},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2458, col: 5, offset: 82442},
							expr: &notExpr{
								pos: position{line: 2890, col: 8, offset: 95285},
								expr: &anyMatcher{
									line: 2890, col: 9, offset: 95286,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2459, col: 5, offset: 82451},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2460, col: 9, offset: 82469},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2820, col: 5, offset: 93371},
										run: (*parser).callonNormalGroupElement8,
										expr: &seqExpr{
											pos: position{line: 2820, col: 5, offset: 93371},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 2820, col: 5, offset: 93371},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 2820, col: 14, offset: 93380},
														run: (*parser).callonNormalGroupElement11,
														expr: &oneOrMoreExpr{
															pos: position{line: 2820, col: 14, offset: 93380},
															expr: &charClassMatcher{
																pos:        position{line: 2820, col: 14, offset: 93380},
																val:        "[,?!;0-9\\pL]",
																chars:      []rune{',', '?', '!', ';'},
																ranges:     []rune{'0', '9'},
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&andExpr{
													pos: position{line: 2823, col: 5, offset: 93461},
													expr: &choiceExpr{
														pos: position{line: 2823, col: 7, offset: 93463},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2878, col: 10, offset: 95044},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2878, col: 16, offset: 95050},
																run: (*parser).callonNormalGroupElement17,
																expr: &litMatcher{
																	pos:        position{line: 2878, col: 16, offset: 95050},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
															&charClassMatcher{
																pos:        position{line: 2797, col: 13, offset: 92519},
																val:        "[.�0-9\\pL]",
																chars:      []rune{'.', '�'},
																ranges:     []rune{'0', '9'},
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
															&notExpr{
																pos: position{line: 2890, col: 8, offset: 95285},
																expr: &anyMatcher{
																	line: 2890, col: 9, offset: 95286,
																},
															},
															&litMatcher{
																pos:        position{line: 2886, col: 12, offset: 95178},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2886, col: 19, offset: 95185},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&actionExpr{
																pos: position{line: 2886, col: 28, offset: 95194},
																run: (*parser).callonNormalGroupElement24,
																expr: &litMatcher{
																	pos:        position{line: 2886, col: 28, offset: 95194},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2809, col: 5, offset: 92974},
										run: (*parser).callonNormalGroupElement26,
										expr: &seqExpr{
											pos: position{line: 2809, col: 5, offset: 92974},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2809, col: 5, offset: 92974},
													expr: &charClassMatcher{
														pos:        position{line: 2809, col: 5, offset: 92974},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 2809, col: 15, offset: 92984},
													expr: &choiceExpr{
														pos: position{line: 2809, col: 17, offset: 92986},
														alternatives: []interface{}{
															&charClassMatcher{
																pos:        position{line: 2809, col: 17, offset: 92986},
																val:        "[\\r\\n ,]]",
																chars:      []rune{'\r', '\n', ' ', ',', ']'},
																ignoreCase: false,
																inverted:   false,
															},
															&notExpr{
																pos: position{line: 2890, col: 8, offset: 95285},
																expr: &anyMatcher{
																	line: 2890, col: 9, offset: 95286,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2811, col: 9, offset: 93068},
										run: (*parser).callonNormalGroupElement35,
										expr: &seqExpr{
											pos: position{line: 2811, col: 9, offset: 93068},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2811, col: 9, offset: 93068},
													expr: &charClassMatcher{
														pos:        position{line: 2811, col: 9, offset: 93068},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&oneOrMoreExpr{
													pos: position{line: 2811, col: 19, offset: 93078},
													expr: &seqExpr{
														pos: position{line: 2811, col: 20, offset: 93079},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 2811, col: 20, offset: 93079},
																val:        "[=*_`]",
																chars:      []rune{'=', '*', '_', '`'},
																ignoreCase: false,
																inverted:   false,
															},
															&oneOrMoreExpr{
																pos: position{line: 2811, col: 27, offset: 93086},
																expr: &charClassMatcher{
																	pos:        position{line: 2811, col: 27, offset: 93086},
																	val:        "[0-9\\pL]",
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2829, col: 16, offset: 93605},
										run: (*parser).callonNormalGroupElement44,
										expr: &seqExpr{
											pos: position{line: 2829, col: 16, offset: 93605},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2829, col: 17, offset: 93606},
													val:        "[.,;!?]",
													chars:      []rune{'.', ',', ';', '!', '?'},
													ignoreCase: false,
													inverted:   false,
												},
												&andExpr{
													pos: position{line: 2829, col: 46, offset: 93635},
													expr: &choiceExpr{
														pos: position{line: 2829, col: 48, offset: 93637},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2878, col: 10, offset: 95044},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2878, col: 16, offset: 95050},
																run: (*parser).callonNormalGroupElement50,
																expr: &litMatcher{
																	pos:        position{line: 2878, col: 16, offset: 95050},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
															&notExpr{
																pos: position{line: 2890, col: 8, offset: 95285},
																expr: &anyMatcher{
																	line: 2890, col: 9, offset: 95286,
																},
															},
															&litMatcher{
																pos:        position{line: 2886, col: 12, offset: 95178},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2886, col: 19, offset: 95185},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&actionExpr{
																pos: position{line: 2886, col: 28, offset: 95194},
																run: (*parser).callonNormalGroupElement56,
																expr: &litMatcher{
																	pos:        position{line: 2886, col: 28, offset: 95194},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 954, col: 14, offset: 30337},
										run: (*parser).callonNormalGroupElement58,
										expr: &seqExpr{
											pos: position{line: 954, col: 14, offset: 30337},
											exprs: []interface{}{
												&choiceExpr{
													pos: position{line: 2878, col: 10, offset: 95044},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2878, col: 10, offset: 95044},
															val:        " ",
															ignoreCase: false,
															want:       "\" \"",
														},
														&actionExpr{
															pos: position{line: 2878, col: 16, offset: 95050},
															run: (*parser).callonNormalGroupElement62,
															expr: &litMatcher{
																pos:        position{line: 2878, col: 16, offset: 95050},
																val:        "\t",
																ignoreCase: false,
																want:       "\"\\t\"",
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 954, col: 20, offset: 30343},
													val:        "+",
													ignoreCase: false,
													want:       "\"+\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 954, col: 24, offset: 30347},
													expr: &choiceExpr{
														pos: position{line: 2878, col: 10, offset: 95044},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2878, col: 10, offset: 95044},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2878, col: 16, offset: 95050},
																run: (*parser).callonNormalGroupElement68,
																expr: &litMatcher{
																	pos:        position{line: 2878, col: 16, offset: 95050},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
														},
													},
												},
												&andExpr{
													pos: position{line: 954, col: 31, offset: 30354},
													expr: &choiceExpr{
														pos: position{line: 2893, col: 8, offset: 95335},
														alternatives: []interface{}{
															&notExpr{
																pos: position{line: 2890, col: 8, offset: 95285},
																expr: &anyMatcher{
																	line: 2890, col: 9, offset: 95286,
																},
															},
															&litMatcher{
																pos:        position{line: 2886, col: 12, offset: 95178},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2886, col: 19, offset: 95185},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&actionExpr{
																pos: position{line: 2886, col: 28, offset: 95194},
																run: (*parser).callonNormalGroupElement76,
																expr: &litMatcher{
																	pos:        position{line: 2886, col: 28, offset: 95194},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
												},
											},
										},
									},
									&litMatcher{
										pos:        position{line: 2878, col: 10, offset: 95044},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
									&actionExpr{
										pos: position{line: 2878, col: 16, offset: 95050},
										run: (*parser).callonNormalGroupElement79,
										expr: &litMatcher{
											pos:        position{line: 2878, col: 16, offset: 95050},
											val:        "\t",
											ignoreCase: false,
											want:       "\"\\t\"",
										},
									},
									&litMatcher{
										pos:        position{line: 2886, col: 12, offset: 95178},
										val:        "\n",
										ignoreCase: false,
										want:       "\"\\n\"",
									},
									&litMatcher{
										pos:        position{line: 2886, col: 19, offset: 95185},
										val:        "\r\n",
										ignoreCase: false,
										want:       "\"\\r\\n\"",
									},
									&actionExpr{
										pos: position{line: 2886, col: 28, offset: 95194},
										run: (*parser).callonNormalGroupElement83,
										expr: &litMatcher{
											pos:        position{line: 2886, col: 28, offset: 95194},
											val:        "\r",
											ignoreCase: false,
											want:       "\"\\r\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2464, col: 11, offset: 82575},
										name: "Quote",
									},
									&ruleRefExpr{
										pos:  position{line: 2465, col: 11, offset: 82591},
										name: "InlinePassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 2466, col: 11, offset: 82619},
										name: "InlineMacro",
									},
									&actionExpr{
										pos: position{line: 2587, col: 5, offset: 86026},
										run: (*parser).callonNormalGroupElement88,
										expr: &seqExpr{
											pos: position{line: 2587, col: 5, offset: 86026},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2587, col: 5, offset: 86026},
													run: (*parser).callonNormalGroupElement90,
												},
												&labeledExpr{
													pos:   position{line: 2590, col: 5, offset: 86097},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2592, col: 9, offset: 86195},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2592, col: 9, offset: 86195},
																run: (*parser).callonNormalGroupElement93,
																expr: &choiceExpr{
																	pos: position{line: 491, col: 27, offset: 15997},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 491, col: 27, offset: 15997},
																			run: (*parser).callonNormalGroupElement95,
																			expr: &seqExpr{
																				pos: position{line: 491, col: 27, offset: 15997},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 491, col: 27, offset: 15997},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 491, col: 32, offset: 16002},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2866, col: 7, offset: 94768},
																							run: (*parser).callonNormalGroupElement99,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2866, col: 7, offset: 94768},
																								expr: &charClassMatcher{
																									pos:        position{line: 2866, col: 7, offset: 94768},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 491, col: 40, offset: 16010},
																						expr: &choiceExpr{
																							pos: position{line: 2878, col: 10, offset: 95044},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2878, col: 10, offset: 95044},
																									val:        " ",
																									ignoreCase: false,
																									want:       "\" \"",
																								},
																								&actionExpr{
																									pos: position{line: 2878, col: 16, offset: 95050},
																									run: (*parser).callonNormalGroupElement105,
																									expr: &litMatcher{
																										pos:        position{line: 2878, col: 16, offset: 95050},
																										val:        "\t",
																										ignoreCase: false,
																										want:       "\"\\t\"",
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 491, col: 47, offset: 16017},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 491, col: 51, offset: 16021},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 501, col: 24, offset: 16434},
																							expr: &choiceExpr{
																								pos: position{line: 502, col: 5, offset: 16440},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 502, col: 6, offset: 16441},
																										run: (*parser).callonNormalGroupElement111,
																										expr: &seqExpr{
																											pos: position{line: 502, col: 6, offset: 16441},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 502, col: 6, offset: 16441},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 502, col: 14, offset: 16449},
																													expr: &charClassMatcher{
																														pos:        position{line: 502, col: 14, offset: 16449},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 449, col: 5, offset: 14443},
																										run: (*parser).callonNormalGroupElement116,
																										expr: &seqExpr{
																											pos: position{line: 449, col: 5, offset: 14443},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 449, col: 5, offset: 14443},
																													run: (*parser).callonNormalGroupElement118,
																												},
																												&labeledExpr{
																													pos:   position{line: 452, col: 5, offset: 14507},
																													label: "element",
																													expr: &choiceExpr{
																														pos: position{line: 452, col: 14, offset: 14516},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 463, col: 25, offset: 14978},
																																run: (*parser).callonNormalGroupElement121,
																																expr: &seqExpr{
																																	pos: position{line: 463, col: 25, offset: 14978},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 463, col: 25, offset: 14978},
																																			val:        "{counter:",
																																			ignoreCase: false,
																																			want:       "\"{counter:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 463, col: 37, offset: 14990},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 118, col: 18, offset: 3399},
																																				run: (*parser).callonNormalGroupElement125,
																																				expr: &seqExpr{
																																					pos: position{line: 118, col: 18, offset: 3399},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 118, col: 18, offset: 3399},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 118, col: 28, offset: 3409},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 118, col: 29, offset: 3410},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 463, col: 56, offset: 15009},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 463, col: 62, offset: 15015},
																																				expr: &actionExpr{
																																					pos: position{line: 471, col: 17, offset: 15278},
																																					run: (*parser).callonNormalGroupElement132,
																																					expr: &seqExpr{
																																						pos: position{line: 471, col: 17, offset: 15278},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 471, col: 17, offset: 15278},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 471, col: 21, offset: 15282},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 471, col: 28, offset: 15289},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 471, col: 28, offset: 15289},
																																											run: (*parser).callonNormalGroupElement137,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 471, col: 28, offset: 15289},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 473, col: 9, offset: 15343},
																																											run: (*parser).callonNormalGroupElement139,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 473, col: 9, offset: 15343},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 473, col: 9, offset: 15343},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 463, col: 78, offset: 15031},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 467, col: 25, offset: 15133},
																																run: (*parser).callonNormalGroupElement143,
																																expr: &seqExpr{
																																	pos: position{line: 467, col: 25, offset: 15133},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 467, col: 25, offset: 15133},
																																			val:        "{counter2:",
																																			ignoreCase: false,
																																			want:       "\"{counter2:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 467, col: 38, offset: 15146},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 118, col: 18, offset: 3399},
																																				run: (*parser).callonNormalGroupElement147,
																																				expr: &seqExpr{
																																					pos: position{line: 118, col: 18, offset: 3399},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 118, col: 18, offset: 3399},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 118, col: 28, offset: 3409},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 118, col: 29, offset: 3410},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 467, col: 57, offset: 15165},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 467, col: 63, offset: 15171},
																																				expr: &actionExpr{
																																					pos: position{line: 471, col: 17, offset: 15278},
																																					run: (*parser).callonNormalGroupElement154,
																																					expr: &seqExpr{
																																						pos: position{line: 471, col: 17, offset: 15278},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 471, col: 17, offset: 15278},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 471, col: 21, offset: 15282},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 471, col: 28, offset: 15289},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 471, col: 28, offset: 15289},
																																											run: (*parser).callonNormalGroupElement159,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 471, col: 28, offset: 15289},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 473, col: 9, offset: 15343},
																																											run: (*parser).callonNormalGroupElement161,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 473, col: 9, offset: 15343},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 473, col: 9, offset: 15343},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 467, col: 79, offset: 15187},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 456, col: 31, offset: 14633},
																																run: (*parser).callonNormalGroupElement165,
																																expr: &seqExpr{
																																	pos: position{line: 456, col: 31, offset: 14633},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 456, col: 31, offset: 14633},
																																			val:        "{",
																																			ignoreCase: false,
																																			want:       "\"{\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 456, col: 35, offset: 14637},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 118, col: 18, offset: 3399},
																																				run: (*parser).callonNormalGroupElement169,
																																				expr: &seqExpr{
																																					pos: position{line: 118, col: 18, offset: 3399},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 118, col: 18, offset: 3399},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 118, col: 28, offset: 3409},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 118, col: 29, offset: 3410},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 456, col: 54, offset: 14656},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 506, col: 8, offset: 16673},
																										run: (*parser).callonNormalGroupElement175,
																										expr: &litMatcher{
																											pos:        position{line: 506, col: 8, offset: 16673},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 491, col: 79, offset: 16049},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 493, col: 9, offset: 16122},
																			run: (*parser).callonNormalGroupElement178,
																			expr: &seqExpr{
																				pos: position{line: 493, col: 9, offset: 16122},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 493, col: 9, offset: 16122},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 493, col: 14, offset: 16127},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2866, col: 7, offset: 94768},
																							run: (*parser).callonNormalGroupElement182,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2866, col: 7, offset: 94768},
																								expr: &charClassMatcher{
																									pos:        position{line: 2866, col: 7, offset: 94768},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 493, col: 22, offset: 16135},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2595, col: 11, offset: 86299},
																run: (*parser).callonNormalGroupElement186,
																expr: &charClassMatcher{
																	pos:        position{line: 2595, col: 12, offset: 86300},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 449, col: 5, offset: 14443},
										run: (*parser).callonNormalGroupElement188,
										expr: &seqExpr{
											pos: position{line: 449, col: 5, offset: 14443},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 449, col: 5, offset: 14443},
													run: (*parser).callonNormalGroupElement190,
												},
												&labeledExpr{
													pos:   position{line: 452, col: 5, offset: 14507},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 452, col: 14, offset: 14516},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 463, col: 25, offset: 14978},
																run: (*parser).callonNormalGroupElement193,
																expr: &seqExpr{
																	pos: position{line: 463, col: 25, offset: 14978},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 463, col: 25, offset: 14978},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 463, col: 37, offset: 14990},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 118, col: 18, offset: 3399},
																				run: (*parser).callonNormalGroupElement197,
																				expr: &seqExpr{
																					pos: position{line: 118, col: 18, offset: 3399},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 118, col: 18, offset: 3399},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 118, col: 28, offset: 3409},
																							expr: &charClassMatcher{
																								pos:        position{line: 118, col: 29, offset: 3410},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 463, col: 56, offset: 15009},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 463, col: 62, offset: 15015},
																				expr: &actionExpr{
																					pos: position{line: 471, col: 17, offset: 15278},
																					run: (*parser).callonNormalGroupElement204,
																					expr: &seqExpr{
																						pos: position{line: 471, col: 17, offset: 15278},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 471, col: 17, offset: 15278},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 471, col: 21, offset: 15282},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 471, col: 28, offset: 15289},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 471, col: 28, offset: 15289},
																											run: (*parser).callonNormalGroupElement209,
																											expr: &charClassMatcher{
																												pos:        position{line: 471, col: 28, offset: 15289},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 473, col: 9, offset: 15343},
																											run: (*parser).callonNormalGroupElement211,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 473, col: 9, offset: 15343},
																												expr: &charClassMatcher{
																													pos:        position{line: 473, col: 9, offset: 15343},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 463, col: 78, offset: 15031},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 467, col: 25, offset: 15133},
																run: (*parser).callonNormalGroupElement215,
																expr: &seqExpr{
																	pos: position{line: 467, col: 25, offset: 15133},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 467, col: 25, offset: 15133},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 467, col: 38, offset: 15146},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 118, col: 18, offset: 3399},
																				run: (*parser).callonNormalGroupElement219,
																				expr: &seqExpr{
																					pos: position{line: 118, col: 18, offset: 3399},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 118, col: 18, offset: 3399},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 118, col: 28, offset: 3409},
																							expr: &charClassMatcher{
																								pos:        position{line: 118, col: 29, offset: 3410},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 467, col: 57, offset: 15165},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 467, col: 63, offset: 15171},
																				expr: &actionExpr{
																					pos: position{line: 471, col: 17, offset: 15278},
																					run: (*parser).callonNormalGroupElement226,
																					expr: &seqExpr{
																						pos: position{line: 471, col: 17, offset: 15278},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 471, col: 17, offset: 15278},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 471, col: 21, offset: 15282},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 471, col: 28, offset: 15289},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 471, col: 28, offset: 15289},
																											run: (*parser).callonNormalGroupElement231,
																											expr: &charClassMatcher{
																												pos:        position{line: 471, col: 28, offset: 15289},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 473, col: 9, offset: 15343},
																											run: (*parser).callonNormalGroupElement233,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 473, col: 9, offset: 15343},
																												expr: &charClassMatcher{
																													pos:        position{line: 473, col: 9, offset: 15343},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 467, col: 79, offset: 15187},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 456, col: 31, offset: 14633},
																run: (*parser).callonNormalGroupElement237,
																expr: &seqExpr{
																	pos: position{line: 456, col: 31, offset: 14633},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 456, col: 31, offset: 14633},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 456, col: 35, offset: 14637},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 118, col: 18, offset: 3399},
																				run: (*parser).callonNormalGroupElement241,
																				expr: &seqExpr{
																					pos: position{line: 118, col: 18, offset: 3399},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 118, col: 18, offset: 3399},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 118, col: 28, offset: 3409},
																							expr: &charClassMatcher{
																								pos:        position{line: 118, col: 29, offset: 3410},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 456, col: 54, offset: 14656},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2576, col: 5, offset: 85805},
										run: (*parser).callonNormalGroupElement247,
										expr: &seqExpr{
											pos: position{line: 2576, col: 5, offset: 85805},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2576, col: 5, offset: 85805},
													run: (*parser).callonNormalGroupElement249,
												},
												&labeledExpr{
													pos:   position{line: 2579, col: 5, offset: 85871},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2618, col: 11, offset: 87173},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2620, col: 15, offset: 87267},
																run: (*parser).callonNormalGroupElement252,
																expr: &litMatcher{
																	pos:        position{line: 2620, col: 15, offset: 87267},
																	val:        "`'",
																	ignoreCase: false,
																	want:       "\"`'\"",
																},
															},
															&actionExpr{
																pos: position{line: 2626, col: 14, offset: 87382},
																run: (*parser).callonNormalGroupElement254,
																expr: &litMatcher{
																	pos:        position{line: 2626, col: 14, offset: 87382},
																	val:        "(C)",
																	ignoreCase: false,
																	want:       "\"(C)\"",
																},
															},
															&actionExpr{
																pos: position{line: 2630, col: 14, offset: 87458},
																run: (*parser).callonNormalGroupElement256,
																expr: &litMatcher{
																	pos:        position{line: 2630, col: 14, offset: 87458},
																	val:        "(TM)",
																	ignoreCase: false,
																	want:       "\"(TM)\"",
																},
															},
															&actionExpr{
																pos: position{line: 2634, col: 15, offset: 87536},
																run: (*parser).callonNormalGroupElement258,
																expr: &litMatcher{
																	pos:        position{line: 2634, col: 15, offset: 87536},
																	val:        "(R)",
																	ignoreCase: false,
																	want:       "\"(R)\"",
																},
															},
															&actionExpr{
																pos: position{line: 2638, col: 13, offset: 87611},
																run: (*parser).callonNormalGroupElement260,
																expr: &litMatcher{
																	pos:        position{line: 2638, col: 13, offset: 87611},
																	val:        "...",
																	ignoreCase: false,
																	want:       "\"...\"",
																},
															},
															&actionExpr{
																pos: position{line: 2646, col: 22, offset: 87917},
																run: (*parser).callonNormalGroupElement262,
																expr: &seqExpr{
																	pos: position{line: 2646, col: 22, offset: 87917},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 2797, col: 13, offset: 92519},
																			val:        "[0-9\\pL]",
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&litMatcher{
																			pos:        position{line: 2646, col: 31, offset: 87926},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&andExpr{
																			pos: position{line: 2646, col: 35, offset: 87930},
																			expr: &charClassMatcher{
																				pos:        position{line: 2646, col: 36, offset: 87931},
																				val:        "[\\pL]",
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2554, col: 5, offset: 85347},
										run: (*parser).callonNormalGroupElement268,
										expr: &seqExpr{
											pos: position{line: 2554, col: 5, offset: 85347},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2554, col: 5, offset: 85347},
													run: (*parser).callonNormalGroupElement270,
												},
												&labeledExpr{
													pos:   position{line: 2557, col: 5, offset: 85417},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 954, col: 14, offset: 30337},
														run: (*parser).callonNormalGroupElement272,
														expr: &seqExpr{
															pos: position{line: 954, col: 14, offset: 30337},
															exprs: []interface{}{
																&choiceExpr{
																	pos: position{line: 2878, col: 10, offset: 95044},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2878, col: 10, offset: 95044},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																		&actionExpr{
																			pos: position{line: 2878, col: 16, offset: 95050},
																			run: (*parser).callonNormalGroupElement276,
																			expr: &litMatcher{
																				pos:        position{line: 2878, col: 16, offset: 95050},
																				val:        "\t",
																				ignoreCase: false,
																				want:       "\"\\t\"",
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 954, col: 20, offset: 30343},
																	val:        "+",
																	ignoreCase: false,
																	want:       "\"+\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 954, col: 24, offset: 30347},
																	expr: &choiceExpr{
																		pos: position{line: 2878, col: 10, offset: 95044},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2878, col: 10, offset: 95044},
																				val:        " ",
																				ignoreCase: false,
																				want:       "\" \"",
																			},
																			&actionExpr{
																				pos: position{line: 2878, col: 16, offset: 95050},
																				run: (*parser).callonNormalGroupElement282,
																				expr: &litMatcher{
																					pos:        position{line: 2878, col: 16, offset: 95050},
																					val:        "\t",
																					ignoreCase: false,
																					want:       "\"\\t\"",
																				},
																			},
																		},
																	},
																},
																&andExpr{
																	pos: position{line: 954, col: 31, offset: 30354},
																	expr: &choiceExpr{
																		pos: position{line: 2893, col: 8, offset: 95335},
																		alternatives: []interface{}{
																			&notExpr{
																				pos: position{line: 2890, col: 8, offset: 95285},
																				expr: &anyMatcher{
																					line: 2890, col: 9, offset: 95286,
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2886, col: 12, offset: 95178},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																			&litMatcher{
																				pos:        position{line: 2886, col: 19, offset: 95185},
																				val:        "\r\n",
																				ignoreCase: false,
																				want:       "\"\\r\\n\"",
																			},
																			&actionExpr{
																				pos: position{line: 2886, col: 28, offset: 95194},
																				run: (*parser).callonNormalGroupElement290,
																				expr: &litMatcher{
																					pos:        position{line: 2886, col: 28, offset: 95194},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 947, col: 23, offset: 29896},
										run: (*parser).callonNormalGroupElement292,
										expr: &seqExpr{
											pos: position{line: 947, col: 23, offset: 29896},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 945, col: 32, offset: 29864},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
												&labeledExpr{
													pos:   position{line: 947, col: 51, offset: 29924},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 947, col: 56, offset: 29929},
														run: (*parser).callonNormalGroupElement296,
														expr: &oneOrMoreExpr{
															pos: position{line: 947, col: 56, offset: 29929},
															expr: &charClassMatcher{
																pos:        position{line: 947, col: 56, offset: 29929},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 945, col: 32, offset: 29864},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2835, col: 12, offset: 93828},
										run: (*parser).callonNormalGroupElement300,
										expr: &anyMatcher{
											line: 2835, col: 12, offset: 93828,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PostReplacementsGroup",
			pos:  position{line: 2475, col: 1, offset: 82985},
			expr: &actionExpr{
				pos: position{line: 2475, col: 27, offset: 83011},
				run: (*parser).callonPostReplacementsGroup1,
				expr: &seqExpr{
					pos: position{line: 2475, col: 27, offset: 83011},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2475, col: 27, offset: 83011},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2475, col: 36, offset: 83020},
								expr: &choiceExpr{
									pos: position{line: 2476, col: 5, offset: 83026},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 2820, col: 5, offset: 93371},
											run: (*parser).callonPostReplacementsGroup6,
											expr: &seqExpr{
												pos: position{line: 2820, col: 5, offset: 93371},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 2820, col: 5, offset: 93371},
														label: "content",
														expr: &actionExpr{
															pos: position{line: 2820, col: 14, offset: 93380},
															run: (*parser).callonPostReplacementsGroup9,
															expr: &oneOrMoreExpr{
																pos: position{line: 2820, col: 14, offset: 93380},
																expr: &charClassMatcher{
																	pos:        position{line: 2820, col: 14, offset: 93380},
																	val:        "[,?!;0-9\\pL]",
																	chars:      []rune{',', '?', '!', ';'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&andExpr{
														pos: position{line: 2823, col: 5, offset: 93461},
														expr: &choiceExpr{
															pos: position{line: 2823, col: 7, offset: 93463},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2878, col: 10, offset: 95044},
																	val:        " ",
																	ignoreCase: false,
																	want:       "\" \"",
																},
																&actionExpr{
																	pos: position{line: 2878, col: 16, offset: 95050},
																	run: (*parser).callonPostReplacementsGroup15,
																	expr: &litMatcher{
																		pos:        position{line: 2878, col: 16, offset: 95050},
																		val:        "\t",
																		ignoreCase: false,
																		want:       "\"\\t\"",
																	},
																},
																&charClassMatcher{
																	pos:        position{line: 2797, col: 13, offset: 92519},
																	val:        "[.�0-9\\pL]",
																	chars:      []rune{'.', '�'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&notExpr{
																	pos: position{line: 2890, col: 8, offset: 95285},
																	expr: &anyMatcher{
																		line: 2890, col: 9, offset: 95286,
																	},
																},
																&litMatcher{
																	pos:        position{line: 2886, col: 12, offset: 95178},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2886, col: 19, offset: 95185},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&actionExpr{
																	pos: position{line: 2886, col: 28, offset: 95194},
																	run: (*parser).callonPostReplacementsGroup22,
																	expr: &litMatcher{
																		pos:        position{line: 2886, col: 28, offset: 95194},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2809, col: 5, offset: 92974},
											run: (*parser).callonPostReplacementsGroup24,
											expr: &seqExpr{
												pos: position{line: 2809, col: 5, offset: 92974},
												exprs: []interface{}{
													&oneOrMoreExpr{
														pos: position{line: 2809, col: 5, offset: 92974},
														expr: &charClassMatcher{
															pos:        position{line: 2809, col: 5, offset: 92974},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&andExpr{
														pos: position{line: 2809, col: 15, offset: 92984},
														expr: &choiceExpr{
															pos: position{line: 2809, col: 17, offset: 92986},
															alternatives: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2809, col: 17, offset: 92986},
																	val:        "[\\r\\n ,]]",
																	chars:      []rune{'\r', '\n', ' ', ',', ']'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&notExpr{
																	pos: position{line: 2890, col: 8, offset: 95285},
																	expr: &anyMatcher{
																		line: 2890, col: 9, offset: 95286,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2811, col: 9, offset: 93068},
											run: (*parser).callonPostReplacementsGroup33,
											expr: &seqExpr{
												pos: position{line: 2811, col: 9, offset: 93068},
												exprs: []interface{}{
													&oneOrMoreExpr{
														pos: position{line: 2811, col: 9, offset: 93068},
														expr: &charClassMatcher{
															pos:        position{line: 2811, col: 9, offset: 93068},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&oneOrMoreExpr{
														pos: position{line: 2811, col: 19, offset: 93078},
														expr: &seqExpr{
															pos: position{line: 2811, col: 20, offset: 93079},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2811, col: 20, offset: 93079},
																	val:        "[=*_`]",
																	chars:      []rune{'=', '*', '_', '`'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&oneOrMoreExpr{
																	pos: position{line: 2811, col: 27, offset: 93086},
																	expr: &charClassMatcher{
																		pos:        position{line: 2811, col: 27, offset: 93086},
																		val:        "[0-9\\pL]",
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2829, col: 16, offset: 93605},
											run: (*parser).callonPostReplacementsGroup42,
											expr: &seqExpr{
												pos: position{line: 2829, col: 16, offset: 93605},
												exprs: []interface{}{
													&charClassMatcher{
														pos:        position{line: 2829, col: 17, offset: 93606},
														val:        "[.,;!?]",
														chars:      []rune{'.', ',', ';', '!', '?'},
														ignoreCase: false,
														inverted:   false,
													},
													&andExpr{
														pos: position{line: 2829, col: 46, offset: 93635},
														expr: &choiceExpr{
															pos: position{line: 2829, col: 48, offset: 93637},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2878, col: 10, offset: 95044},
																	val:        " ",
																	ignoreCase: false,
																	want:       "\" \"",
																},
																&actionExpr{
																	pos: position{line: 2878, col: 16, offset: 95050},
																	run: (*parser).callonPostReplacementsGroup48,
																	expr: &litMatcher{
																		pos:        position{line: 2878, col: 16, offset: 95050},
																		val:        "\t",
																		ignoreCase: false,
																		want:       "\"\\t\"",
																	},
																},
																&notExpr{
																	pos: position{line: 2890, col: 8, offset: 95285},
																	expr: &anyMatcher{
																		line: 2890, col: 9, offset: 95286,
																	},
																},
																&litMatcher{
																	pos:        position{line: 2886, col: 12, offset: 95178},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2886, col: 19, offset: 95185},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&actionExpr{
																	pos: position{line: 2886, col: 28, offset: 95194},
																	run: (*parser).callonPostReplacementsGroup54,
																	expr: &litMatcher{
																		pos:        position{line: 2886, col: 28, offset: 95194},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 954, col: 14, offset: 30337},
											run: (*parser).callonPostReplacementsGroup56,
											expr: &seqExpr{
												pos: position{line: 954, col: 14, offset: 30337},
												exprs: []interface{}{
													&choiceExpr{
														pos: position{line: 2878, col: 10, offset: 95044},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2878, col: 10, offset: 95044},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2878, col: 16, offset: 95050},
																run: (*parser).callonPostReplacementsGroup60,
																expr: &litMatcher{
																	pos:        position{line: 2878, col: 16, offset: 95050},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 954, col: 20, offset: 30343},
														val:        "+",
														ignoreCase: false,
														want:       "\"+\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 954, col: 24, offset: 30347},
														expr: &choiceExpr{
															pos: position{line: 2878, col: 10, offset: 95044},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2878, col: 10, offset: 95044},
																	val:        " ",
																	ignoreCase: false,
																	want:       "\" \"",
																},
																&actionExpr{
																	pos: position{line: 2878, col: 16, offset: 95050},
																	run: (*parser).callonPostReplacementsGroup66,
																	expr: &litMatcher{
																		pos:        position{line: 2878, col: 16, offset: 95050},
																		val:        "\t",
																		ignoreCase: false,
																		want:       "\"\\t\"",
																	},
																},
															},
														},
													},
													&andExpr{
														pos: position{line: 954, col: 31, offset: 30354},
														expr: &choiceExpr{
															pos: position{line: 2893, col: 8, offset: 95335},
															alternatives: []interface{}{
																&notExpr{
																	pos: position{line: 2890, col: 8, offset: 95285},
																	expr: &anyMatcher{
																		line: 2890, col: 9, offset: 95286,
																	},
																},
																&litMatcher{
																	pos:        position{line: 2886, col: 12, offset: 95178},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2886, col: 19, offset: 95185},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&actionExpr{
																	pos: position{line: 2886, col: 28, offset: 95194},
																	run: (*parser).callonPostReplacementsGroup74,
																	expr: &litMatcher{
																		pos:        position{line: 2886, col: 28, offset: 95194},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 2878, col: 10, offset: 95044},
											val:        " ",
											ignoreCase: false,
											want:       "\" \"",
										},
										&actionExpr{
											pos: position{line: 2878, col: 16, offset: 95050},
											run: (*parser).callonPostReplacementsGroup77,
											expr: &litMatcher{
												pos:        position{line: 2878, col: 16, offset: 95050},
												val:        "\t",
												ignoreCase: false,
												want:       "\"\\t\"",
											},
										},
										&litMatcher{
											pos:        position{line: 2886, col: 12, offset: 95178},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
										&litMatcher{
											pos:        position{line: 2886, col: 19, offset: 95185},
											val:        "\r\n",
											ignoreCase: false,
											want:       "\"\\r\\n\"",
										},
										&actionExpr{
											pos: position{line: 2886, col: 28, offset: 95194},
											run: (*parser).callonPostReplacementsGroup81,
											expr: &litMatcher{
												pos:        position{line: 2886, col: 28, offset: 95194},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&actionExpr{
											pos: position{line: 947, col: 23, offset: 29896},
											run: (*parser).callonPostReplacementsGroup83,
											expr: &seqExpr{
												pos: position{line: 947, col: 23, offset: 29896},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 945, col: 32, offset: 29864},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
													&labeledExpr{
														pos:   position{line: 947, col: 51, offset: 29924},
														label: "ref",
														expr: &actionExpr{
															pos: position{line: 947, col: 56, offset: 29929},
															run: (*parser).callonPostReplacementsGroup87,
															expr: &oneOrMoreExpr{
																pos: position{line: 947, col: 56, offset: 29929},
																expr: &charClassMatcher{
																	pos:        position{line: 947, col: 56, offset: 29929},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 945, col: 32, offset: 29864},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2835, col: 12, offset: 93828},
											run: (*parser).callonPostReplacementsGroup91,
											expr: &anyMatcher{
												line: 2835, col: 12, offset: 93828,
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2890, col: 8, offset: 95285},
							expr: &anyMatcher{
								line: 2890, col: 9, offset: 95286,
							},
						},
					},
				},
			},
		},
		{
			name: "QuotesGroup",
			pos:  position{line: 2486, col: 1, offset: 83334},
			expr: &actionExpr{
				pos: position{line: 2486, col: 16, offset: 83349},
				run: (*parser).callonQuotesGroup1,
				expr: &seqExpr{
					pos: position{line: 2486, col: 16, offset: 83349},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2486, col: 16, offset: 83349},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2486, col: 25, offset: 83358},
								expr: &choiceExpr{
									pos: position{line: 2487, col: 5, offset: 83364},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 2820, col: 5, offset: 93371},
											run: (*parser).callonQuotesGroup6,
											expr: &seqExpr{
												pos: position{line: 2820, col: 5, offset: 93371},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 2820, col: 5, offset: 93371},
														label: "content",
														expr: &actionExpr{
															pos: position{line: 2820, col: 14, offset: 93380},
															run: (*parser).callonQuotesGroup9,
															expr: &oneOrMoreExpr{
																pos: position{line: 2820, col: 14, offset: 93380},
																expr: &charClassMatcher{
																	pos:        position{line: 2820, col: 14, offset: 93380},
																	val:        "[,?!;0-9\\pL]",
																	chars:      []rune{',', '?', '!', ';'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&andExpr{
														pos: position{line: 2823, col: 5, offset: 93461},
														expr: &choiceExpr{
															pos: position{line: 2823, col: 7, offset: 93463},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2878, col: 10, offset: 95044},
																	val:        " ",
																	ignoreCase: false,
																	want:       "\" \"",
																},
																&actionExpr{
																	pos: position{line: 2878, col: 16, offset: 95050},
																	run: (*parser).callonQuotesGroup15,
																	expr: &litMatcher{
																		pos:        position{line: 2878, col: 16, offset: 95050},
																		val:        "\t",
																		ignoreCase: false,
																		want:       "\"\\t\"",
																	},
																},
																&charClassMatcher{
																	pos:        position{line: 2797, col: 13, offset: 92519},
																	val:        "[.�0-9\\pL]",
																	chars:      []rune{'.', '�'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&notExpr{
																	pos: position{line: 2890, col: 8, offset: 95285},
																	expr: &anyMatcher{
																		line: 2890, col: 9, offset: 95286,
																	},
																},
																&litMatcher{
																	pos:        position{line: 2886, col: 12, offset: 95178},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2886, col: 19, offset: 95185},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&actionExpr{
																	pos: position{line: 2886, col: 28, offset: 95194},
																	run: (*parser).callonQuotesGroup22,
																	expr: &litMatcher{
																		pos:        position{line: 2886, col: 28, offset: 95194},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2809, col: 5, offset: 92974},
											run: (*parser).callonQuotesGroup24,
											expr: &seqExpr{
												pos: position{line: 2809, col: 5, offset: 92974},
												exprs: []interface{}{
													&oneOrMoreExpr{
														pos: position{line: 2809, col: 5, offset: 92974},
														expr: &charClassMatcher{
															pos:        position{line: 2809, col: 5, offset: 92974},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&andExpr{
														pos: position{line: 2809, col: 15, offset: 92984},
														expr: &choiceExpr{
															pos: position{line: 2809, col: 17, offset: 92986},
															alternatives: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2809, col: 17, offset: 92986},
																	val:        "[\\r\\n ,]]",
																	chars:      []rune{'\r', '\n', ' ', ',', ']'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&notExpr{
																	pos: position{line: 2890, col: 8, offset: 95285},
																	expr: &anyMatcher{
																		line: 2890, col: 9, offset: 95286,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2811, col: 9, offset: 93068},
											run: (*parser).callonQuotesGroup33,
											expr: &seqExpr{
												pos: position{line: 2811, col: 9, offset: 93068},
												exprs: []interface{}{
													&oneOrMoreExpr{
														pos: position{line: 2811, col: 9, offset: 93068},
														expr: &charClassMatcher{
															pos:        position{line: 2811, col: 9, offset: 93068},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&oneOrMoreExpr{
														pos: position{line: 2811, col: 19, offset: 93078},
														expr: &seqExpr{
															pos: position{line: 2811, col: 20, offset: 93079},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2811, col: 20, offset: 93079},
																	val:        "[=*_`]",
																	chars:      []rune{'=', '*', '_', '`'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&oneOrMoreExpr{
																	pos: position{line: 2811, col: 27, offset: 93086},
																	expr: &charClassMatcher{
																		pos:        position{line: 2811, col: 27, offset: 93086},
																		val:        "[0-9\\pL]",
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2829, col: 16, offset: 93605},
											run: (*parser).callonQuotesGroup42,
											expr: &seqExpr{
												pos: position{line: 2829, col: 16, offset: 93605},
												exprs: []interface{}{
													&charClassMatcher{
														pos:        position{line: 2829, col: 17, offset: 93606},
														val:        "[.,;!?]",
														chars:      []rune{'.', ',', ';', '!', '?'},
														ignoreCase: false,
														inverted:   false,
													},
													&andExpr{
														pos: position{line: 2829, col: 46, offset: 93635},
														expr: &choiceExpr{
															pos: position{line: 2829, col: 48, offset: 93637},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2878, col: 10, offset: 95044},
																	val:        " ",
																	ignoreCase: false,
																	want:       "\" \"",
																},
																&actionExpr{
																	pos: position{line: 2878, col: 16, offset: 95050},
																	run: (*parser).callonQuotesGroup48,
																	expr: &litMatcher{
																		pos:        position{line: 2878, col: 16, offset: 95050},
																		val:        "\t",
																		ignoreCase: false,
																		want:       "\"\\t\"",
																	},
																},
																&notExpr{
																	pos: position{line: 2890, col: 8, offset: 95285},
																	expr: &anyMatcher{
																		line: 2890, col: 9, offset: 95286,
																	},
																},
																&litMatcher{
																	pos:        position{line: 2886, col: 12, offset: 95178},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2886, col: 19, offset: 95185},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&actionExpr{
																	pos: position{line: 2886, col: 28, offset: 95194},
																	run: (*parser).callonQuotesGroup54,
																	expr: &litMatcher{
																		pos:        position{line: 2886, col: 28, offset: 95194},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2488, col: 7, offset: 83381},
											name: "Quote",
										},
										&actionExpr{
											pos: position{line: 947, col: 23, offset: 29896},
											run: (*parser).callonQuotesGroup57,
											expr: &seqExpr{
												pos: position{line: 947, col: 23, offset: 29896},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 945, col: 32, offset: 29864},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
													&labeledExpr{
														pos:   position{line: 947, col: 51, offset: 29924},
														label: "ref",
														expr: &actionExpr{
															pos: position{line: 947, col: 56, offset: 29929},
															run: (*parser).callonQuotesGroup61,
															expr: &oneOrMoreExpr{
																pos: position{line: 947, col: 56, offset: 29929},
																expr: &charClassMatcher{
																	pos:        position{line: 947, col: 56, offset: 29929},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 945, col: 32, offset: 29864},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2835, col: 12, offset: 93828},
											run: (*parser).callonQuotesGroup65,
											expr: &anyMatcher{
												line: 2835, col: 12, offset: 93828,
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2890, col: 8, offset: 95285},
							expr: &anyMatcher{
								line: 2890, col: 9, offset: 95286,
							},
						},
					},
				},
			},
		},
		{
			name: "ReplacementsGroup",
			pos:  position{line: 2495, col: 1, offset: 83618},
			expr: &actionExpr{
				pos: position{line: 2495, col: 22, offset: 83639},
				run: (*parser).callonReplacementsGroup1,
				expr: &seqExpr{
					pos: position{line: 2495, col: 22, offset: 83639},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2495, col: 22, offset: 83639},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2495, col: 31, offset: 83648},
								expr: &choiceExpr{
									pos: position{line: 2496, col: 5, offset: 83654},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 2820, col: 5, offset: 93371},
											run: (*parser).callonReplacementsGroup6,
											expr: &seqExpr{
												pos: position{line: 2820, col: 5, offset: 93371},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 2820, col: 5, offset: 93371},
														label: "content",
														expr: &actionExpr{
															pos: position{line: 2820, col: 14, offset: 93380},
															run: (*parser).callonReplacementsGroup9,
															expr: &oneOrMoreExpr{
																pos: position{line: 2820, col: 14, offset: 93380},
																expr: &charClassMatcher{
																	pos:        position{line: 2820, col: 14, offset: 93380},
																	val:        "[,?!;0-9\\pL]",
																	chars:      []rune{',', '?', '!', ';'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&andExpr{
														pos: position{line: 2823, col: 5, offset: 93461},
														expr: &choiceExpr{
															pos: position{line: 2823, col: 7, offset: 93463},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2878, col: 10, offset: 95044},
																	val:        " ",
																	ignoreCase: false,
																	want:       "\" \"",
																},
																&actionExpr{
																	pos: position{line: 2878, col: 16, offset: 95050},
																	run: (*parser).callonReplacementsGroup15,
																	expr: &litMatcher{
																		pos:        position{line: 2878, col: 16, offset: 95050},
																		val:        "\t",
																		ignoreCase: false,
																		want:       "\"\\t\"",
																	},
																},
																&charClassMatcher{
																	pos:        position{line: 2797, col: 13, offset: 92519},
																	val:        "[.�0-9\\pL]",
																	chars:      []rune{'.', '�'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&notExpr{
																	pos: position{line: 2890, col: 8, offset: 95285},
																	expr: &anyMatcher{
																		line: 2890, col: 9, offset: 95286,
																	},
																},
																&litMatcher{
																	pos:        position{line: 2886, col: 12, offset: 95178},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2886, col: 19, offset: 95185},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&actionExpr{
																	pos: position{line: 2886, col: 28, offset: 95194},
																	run: (*parser).callonReplacementsGroup22,
																	expr: &litMatcher{
																		pos:        position{line: 2886, col: 28, offset: 95194},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2809, col: 5, offset: 92974},
											run: (*parser).callonReplacementsGroup24,
											expr: &seqExpr{
												pos: position{line: 2809, col: 5, offset: 92974},
												exprs: []interface{}{
													&oneOrMoreExpr{
														pos: position{line: 2809, col: 5, offset: 92974},
														expr: &charClassMatcher{
															pos:        position{line: 2809, col: 5, offset: 92974},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&andExpr{
														pos: position{line: 2809, col: 15, offset: 92984},
														expr: &choiceExpr{
															pos: position{line: 2809, col: 17, offset: 92986},
															alternatives: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2809, col: 17, offset: 92986},
																	val:        "[\\r\\n ,]]",
																	chars:      []rune{'\r', '\n', ' ', ',', ']'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&notExpr{
																	pos: position{line: 2890, col: 8, offset: 95285},
																	expr: &anyMatcher{
																		line: 2890, col: 9, offset: 95286,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2811, col: 9, offset: 93068},
											run: (*parser).callonReplacementsGroup33,
											expr: &seqExpr{
												pos: position{line: 2811, col: 9, offset: 93068},
												exprs: []interface{}{
													&oneOrMoreExpr{
														pos: position{line: 2811, col: 9, offset: 93068},
														expr: &charClassMatcher{
															pos:        position{line: 2811, col: 9, offset: 93068},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&oneOrMoreExpr{
														pos: position{line: 2811, col: 19, offset: 93078},
														expr: &seqExpr{
															pos: position{line: 2811, col: 20, offset: 93079},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2811, col: 20, offset: 93079},
																	val:        "[=*_`]",
																	chars:      []rune{'=', '*', '_', '`'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&oneOrMoreExpr{
																	pos: position{line: 2811, col: 27, offset: 93086},
																	expr: &charClassMatcher{
																		pos:        position{line: 2811, col: 27, offset: 93086},
																		val:        "[0-9\\pL]",
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2829, col: 16, offset: 93605},
											run: (*parser).callonReplacementsGroup42,
											expr: &seqExpr{
												pos: position{line: 2829, col: 16, offset: 93605},
												exprs: []interface{}{
													&charClassMatcher{
														pos:        position{line: 2829, col: 17, offset: 93606},
														val:        "[.,;!?]",
														chars:      []rune{'.', ',', ';', '!', '?'},
														ignoreCase: false,
														inverted:   false,
													},
													&andExpr{
														pos: position{line: 2829, col: 46, offset: 93635},
														expr: &choiceExpr{
															pos: position{line: 2829, col: 48, offset: 93637},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2878, col: 10, offset: 95044},
																	val:        " ",
																	ignoreCase: false,
																	want:       "\" \"",
																},
																&actionExpr{
																	pos: position{line: 2878, col: 16, offset: 95050},
																	run: (*parser).callonReplacementsGroup48,
																	expr: &litMatcher{
																		pos:        position{line: 2878, col: 16, offset: 95050},
																		val:        "\t",
																		ignoreCase: false,
																		want:       "\"\\t\"",
																	},
																},
																&notExpr{
																	pos: position{line: 2890, col: 8, offset: 95285},
																	expr: &anyMatcher{
																		line: 2890, col: 9, offset: 95286,
																	},
																},
																&litMatcher{
																	pos:        position{line: 2886, col: 12, offset: 95178},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2886, col: 19, offset: 95185},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&actionExpr{
																	pos: position{line: 2886, col: 28, offset: 95194},
																	run: (*parser).callonReplacementsGroup54,
																	expr: &litMatcher{
																		pos:        position{line: 2886, col: 28, offset: 95194},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2576, col: 5, offset: 85805},
											run: (*parser).callonReplacementsGroup56,
											expr: &seqExpr{
												pos: position{line: 2576, col: 5, offset: 85805},
												exprs: []interface{}{
													&andCodeExpr{
														pos: position{line: 2576, col: 5, offset: 85805},
														run: (*parser).callonReplacementsGroup58,
													},
													&labeledExpr{
														pos:   position{line: 2579, col: 5, offset: 85871},
														label: "element",
														expr: &choiceExpr{
															pos: position{line: 2618, col: 11, offset: 87173},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 2620, col: 15, offset: 87267},
																	run: (*parser).callonReplacementsGroup61,
																	expr: &litMatcher{
																		pos:        position{line: 2620, col: 15, offset: 87267},
																		val:        "`'",
																		ignoreCase: false,
																		want:       "\"`'\"",
																	},
																},
																&actionExpr{
																	pos: position{line: 2626, col: 14, offset: 87382},
																	run: (*parser).callonReplacementsGroup63,
																	expr: &litMatcher{
																		pos:        position{line: 2626, col: 14, offset: 87382},
																		val:        "(C)",
																		ignoreCase: false,
																		want:       "\"(C)\"",
																	},
																},
																&actionExpr{
																	pos: position{line: 2630, col: 14, offset: 87458},
																	run: (*parser).callonReplacementsGroup65,
																	expr: &litMatcher{
																		pos:        position{line: 2630, col: 14, offset: 87458},
																		val:        "(TM)",
																		ignoreCase: false,
																		want:       "\"(TM)\"",
																	},
																},
																&actionExpr{
																	pos: position{line: 2634, col: 15, offset: 87536},
																	run: (*parser).callonReplacementsGroup67,
																	expr: &litMatcher{
																		pos:        position{line: 2634, col: 15, offset: 87536},
																		val:        "(R)",
																		ignoreCase: false,
																		want:       "\"(R)\"",
																	},
																},
																&actionExpr{
																	pos: position{line: 2638, col: 13, offset: 87611},
																	run: (*parser).callonReplacementsGroup69,
																	expr: &litMatcher{
																		pos:        position{line: 2638, col: 13, offset: 87611},
																		val:        "...",
																		ignoreCase: false,
																		want:       "\"...\"",
																	},
																},
																&actionExpr{
																	pos: position{line: 2646, col: 22, offset: 87917},
																	run: (*parser).callonReplacementsGroup71,
																	expr: &seqExpr{
																		pos: position{line: 2646, col: 22, offset: 87917},
																		exprs: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 2797, col: 13, offset: 92519},
																				val:        "[0-9\\pL]",
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&litMatcher{
																				pos:        position{line: 2646, col: 31, offset: 87926},
																				val:        "'",
																				ignoreCase: false,
																				want:       "\"'\"",
																			},
																			&andExpr{
																				pos: position{line: 2646, col: 35, offset: 87930},
																				expr: &charClassMatcher{
																					pos:        position{line: 2646, col: 36, offset: 87931},
																					val:        "[\\pL]",
																					classes:    []*unicode.RangeTable{rangeTable("L")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 947, col: 23, offset: 29896},
											run: (*parser).callonReplacementsGroup77,
											expr: &seqExpr{
												pos: position{line: 947, col: 23, offset: 29896},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 945, col: 32, offset: 29864},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
													&labeledExpr{
														pos:   position{line: 947, col: 51, offset: 29924},
														label: "ref",
														expr: &actionExpr{
															pos: position{line: 947, col: 56, offset: 29929},
															run: (*parser).callonReplacementsGroup81,
															expr: &oneOrMoreExpr{
																pos: position{line: 947, col: 56, offset: 29929},
																expr: &charClassMatcher{
																	pos:        position{line: 947, col: 56, offset: 29929},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 945, col: 32, offset: 29864},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2835, col: 12, offset: 93828},
											run: (*parser).callonReplacementsGroup85,
											expr: &anyMatcher{
												line: 2835, col: 12, offset: 93828,
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2890, col: 8, offset: 95285},
							expr: &anyMatcher{
								line: 2890, col: 9, offset: 95286,
							},
						},
					},
				},
			},
		},
		{
			name: "SpecialCharactersGroup",
			pos:  position{line: 2504, col: 1, offset: 83939},
			expr: &actionExpr{
				pos: position{line: 2504, col: 27, offset: 83965},
				run: (*parser).callonSpecialCharactersGroup1,
				expr: &seqExpr{
					pos: position{line: 2504, col: 27, offset: 83965},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2504, col: 27, offset: 83965},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2504, col: 36, offset: 83974},
								expr: &choiceExpr{
									pos: position{line: 2505, col: 5, offset: 83980},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 2820, col: 5, offset: 93371},
											run: (*parser).callonSpecialCharactersGroup6,
											expr: &seqExpr{
												pos: position{line: 2820, col: 5, offset: 93371},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 2820, col: 5, offset: 93371},
														label: "content",
														expr: &actionExpr{
															pos: position{line: 2820, col: 14, offset: 93380},
															run: (*parser).callonSpecialCharactersGroup9,
															expr: &oneOrMoreExpr{
																pos: position{line: 2820, col: 14, offset: 93380},
																expr: &charClassMatcher{
																	pos:        position{line: 2820, col: 14, offset: 93380},
																	val:        "[,?!;0-9\\pL]",
																	chars:      []rune{',', '?', '!', ';'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&andExpr{
														pos: position{line: 2823, col: 5, offset: 93461},
														expr: &choiceExpr{
															pos: position{line: 2823, col: 7, offset: 93463},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2878, col: 10, offset: 95044},
																	val:        " ",
																	ignoreCase: false,
																	want:       "\" \"",
																},
																&actionExpr{
																	pos: position{line: 2878, col: 16, offset: 95050},
																	run: (*parser).callonSpecialCharactersGroup15,
																	expr: &litMatcher{
																		pos:        position{line: 2878, col: 16, offset: 95050},
																		val:        "\t",
																		ignoreCase: false,
																		want:       "\"\\t\"",
																	},
																},
																&charClassMatcher{
																	pos:        position{line: 2797, col: 13, offset: 92519},
																	val:        "[.�0-9\\pL]",
																	chars:      []rune{'.', '�'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&notExpr{
																	pos: position{line: 2890, col: 8, offset: 95285},
																	expr: &anyMatcher{
																		line: 2890, col: 9, offset: 95286,
																	},
																},
																&litMatcher{
																	pos:        position{line: 2886, col: 12, offset: 95178},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2886, col: 19, offset: 95185},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&actionExpr{
																	pos: position{line: 2886, col: 28, offset: 95194},
																	run: (*parser).callonSpecialCharactersGroup22,
																	expr: &litMatcher{
																		pos:        position{line: 2886, col: 28, offset: 95194},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2809, col: 5, offset: 92974},
											run: (*parser).callonSpecialCharactersGroup24,
											expr: &seqExpr{
												pos: position{line: 2809, col: 5, offset: 92974},
												exprs: []interface{}{
													&oneOrMoreExpr{
														pos: position{line: 2809, col: 5, offset: 92974},
														expr: &charClassMatcher{
															pos:        position{line: 2809, col: 5, offset: 92974},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&andExpr{
														pos: position{line: 2809, col: 15, offset: 92984},
														expr: &choiceExpr{
															pos: position{line: 2809, col: 17, offset: 92986},
															alternatives: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2809, col: 17, offset: 92986},
																	val:        "[\\r\\n ,]]",
																	chars:      []rune{'\r', '\n', ' ', ',', ']'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&notExpr{
																	pos: position{line: 2890, col: 8, offset: 95285},
																	expr: &anyMatcher{
																		line: 2890, col: 9, offset: 95286,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2811, col: 9, offset: 93068},
											run: (*parser).callonSpecialCharactersGroup33,
											expr: &seqExpr{
												pos: position{line: 2811, col: 9, offset: 93068},
												exprs: []interface{}{
													&oneOrMoreExpr{
														pos: position{line: 2811, col: 9, offset: 93068},
														expr: &charClassMatcher{
															pos:        position{line: 2811, col: 9, offset: 93068},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&oneOrMoreExpr{
														pos: position{line: 2811, col: 19, offset: 93078},
														expr: &seqExpr{
															pos: position{line: 2811, col: 20, offset: 93079},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2811, col: 20, offset: 93079},
																	val:        "[=*_`]",
																	chars:      []rune{'=', '*', '_', '`'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&oneOrMoreExpr{
																	pos: position{line: 2811, col: 27, offset: 93086},
																	expr: &charClassMatcher{
																		pos:        position{line: 2811, col: 27, offset: 93086},
																		val:        "[0-9\\pL]",
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2829, col: 16, offset: 93605},
											run: (*parser).callonSpecialCharactersGroup42,
											expr: &seqExpr{
												pos: position{line: 2829, col: 16, offset: 93605},
												exprs: []interface{}{
													&charClassMatcher{
														pos:        position{line: 2829, col: 17, offset: 93606},
														val:        "[.,;!?]",
														chars:      []rune{'.', ',', ';', '!', '?'},
														ignoreCase: false,
														inverted:   false,
													},
													&andExpr{
														pos: position{line: 2829, col: 46, offset: 93635},
														expr: &choiceExpr{
															pos: position{line: 2829, col: 48, offset: 93637},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2878, col: 10, offset: 95044},
																	val:        " ",
																	ignoreCase: false,
																	want:       "\" \"",
																},
																&actionExpr{
																	pos: position{line: 2878, col: 16, offset: 95050},
																	run: (*parser).callonSpecialCharactersGroup48,
																	expr: &litMatcher{
																		pos:        position{line: 2878, col: 16, offset: 95050},
																		val:        "\t",
																		ignoreCase: false,
																		want:       "\"\\t\"",
																	},
																},
																&notExpr{
																	pos: position{line: 2890, col: 8, offset: 95285},
																	expr: &anyMatcher{
																		line: 2890, col: 9, offset: 95286,
																	},
																},
																&litMatcher{
																	pos:        position{line: 2886, col: 12, offset: 95178},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2886, col: 19, offset: 95185},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&actionExpr{
																	pos: position{line: 2886, col: 28, offset: 95194},
																	run: (*parser).callonSpecialCharactersGroup54,
																	expr: &litMatcher{
																		pos:        position{line: 2886, col: 28, offset: 95194},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2587, col: 5, offset: 86026},
											run: (*parser).callonSpecialCharactersGroup56,
											expr: &seqExpr{
												pos: position{line: 2587, col: 5, offset: 86026},
												exprs: []interface{}{
													&andCodeExpr{
														pos: position{line: 2587, col: 5, offset: 86026},
														run: (*parser).callonSpecialCharactersGroup58,
													},
													&labeledExpr{
														pos:   position{line: 2590, col: 5, offset: 86097},
														label: "element",
														expr: &choiceExpr{
															pos: position{line: 2592, col: 9, offset: 86195},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 2592, col: 9, offset: 86195},
																	run: (*parser).callonSpecialCharactersGroup61,
																	expr: &choiceExpr{
																		pos: position{line: 491, col: 27, offset: 15997},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 491, col: 27, offset: 15997},
																				run: (*parser).callonSpecialCharactersGroup63,
																				expr: &seqExpr{
																					pos: position{line: 491, col: 27, offset: 15997},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 491, col: 27, offset: 15997},
																							val:        "<<",
																							ignoreCase: false,
																							want:       "\"<<\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 491, col: 32, offset: 16002},
																							label: "id",
																							expr: &actionExpr{
																								pos: position{line: 2866, col: 7, offset: 94768},
																								run: (*parser).callonSpecialCharactersGroup67,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 2866, col: 7, offset: 94768},
																									expr: &charClassMatcher{
																										pos:        position{line: 2866, col: 7, offset: 94768},
																										val:        "[^[]<>,]",
																										chars:      []rune{'[', ']', '<', '>', ','},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 491, col: 40, offset: 16010},
																							expr: &choiceExpr{
																								pos: position{line: 2878, col: 10, offset: 95044},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2878, col: 10, offset: 95044},
																										val:        " ",
																										ignoreCase: false,
																										want:       "\" \"",
																									},
																									&actionExpr{
																										pos: position{line: 2878, col: 16, offset: 95050},
																										run: (*parser).callonSpecialCharactersGroup73,
																										expr: &litMatcher{
																											pos:        position{line: 2878, col: 16, offset: 95050},
																											val:        "\t",
																											ignoreCase: false,
																											want:       "\"\\t\"",
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 491, col: 47, offset: 16017},
																							val:        ",",
																							ignoreCase: false,
																							want:       "\",\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 491, col: 51, offset: 16021},
																							label: "label",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 501, col: 24, offset: 16434},
																								expr: &choiceExpr{
																									pos: position{line: 502, col: 5, offset: 16440},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 502, col: 6, offset: 16441},
																											run: (*parser).callonSpecialCharactersGroup79,
																											expr: &seqExpr{
																												pos: position{line: 502, col: 6, offset: 16441},
																												exprs: []interface{}{
																													&charClassMatcher{
																														pos:        position{line: 502, col: 6, offset: 16441},
																														val:        "[0-9\\pL]",
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&oneOrMoreExpr{
																														pos: position{line: 502, col: 14, offset: 16449},
																														expr: &charClassMatcher{
																															pos:        position{line: 502, col: 14, offset: 16449},
																															val:        "[^\\r\\n{<>]",
																															chars:      []rune{'\r', '\n', '{', '<', '>'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 449, col: 5, offset: 14443},
																											run: (*parser).callonSpecialCharactersGroup84,
																											expr: &seqExpr{
																												pos: position{line: 449, col: 5, offset: 14443},
																												exprs: []interface{}{
																													&andCodeExpr{
																														pos: position{line: 449, col: 5, offset: 14443},
																														run: (*parser).callonSpecialCharactersGroup86,
																													},
																													&labeledExpr{
																														pos:   position{line: 452, col: 5, offset: 14507},
																														label: "element",
																														expr: &choiceExpr{
																															pos: position{line: 452, col: 14, offset: 14516},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 463, col: 25, offset: 14978},
																																	run: (*parser).callonSpecialCharactersGroup89,
																																	expr: &seqExpr{
																																		pos: position{line: 463, col: 25, offset: 14978},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 463, col: 25, offset: 14978},
																																				val:        "{counter:",
																																				ignoreCase: false,
																																				want:       "\"{counter:\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 463, col: 37, offset: 14990},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 118, col: 18, offset: 3399},
																																					run: (*parser).callonSpecialCharactersGroup93,
																																					expr: &seqExpr{
																																						pos: position{line: 118, col: 18, offset: 3399},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 118, col: 18, offset: 3399},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 118, col: 28, offset: 3409},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 118, col: 29, offset: 3410},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 463, col: 56, offset: 15009},
																																				label: "start",
																																				expr: &zeroOrOneExpr{
																																					pos: position{line: 463, col: 62, offset: 15015},
																																					expr: &actionExpr{
																																						pos: position{line: 471, col: 17, offset: 15278},
																																						run: (*parser).callonSpecialCharactersGroup100,
																																						expr: &seqExpr{
																																							pos: position{line: 471, col: 17, offset: 15278},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 471, col: 17, offset: 15278},
																																									val:        ":",
																																									ignoreCase: false,
																																									want:       "\":\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 471, col: 21, offset: 15282},
																																									label: "start",
																																									expr: &choiceExpr{
																																										pos: position{line: 471, col: 28, offset: 15289},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 471, col: 28, offset: 15289},
																																												run: (*parser).callonSpecialCharactersGroup105,
																																												expr: &charClassMatcher{
																																													pos:        position{line: 471, col: 28, offset: 15289},
																																													val:        "[A-Za-z]",
																																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 473, col: 9, offset: 15343},
																																												run: (*parser).callonSpecialCharactersGroup107,
																																												expr: &oneOrMoreExpr{
																																													pos: position{line: 473, col: 9, offset: 15343},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 473, col: 9, offset: 15343},
																																														val:        "[0-9]",
																																														ranges:     []rune{'0', '9'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 463, col: 78, offset: 15031},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 467, col: 25, offset: 15133},
																																	run: (*parser).callonSpecialCharactersGroup111,
																																	expr: &seqExpr{
																																		pos: position{line: 467, col: 25, offset: 15133},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 467, col: 25, offset: 15133},
																																				val:        "{counter2:",
																																				ignoreCase: false,
																																				want:       "\"{counter2:\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 467, col: 38, offset: 15146},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 118, col: 18, offset: 3399},
																																					run: (*parser).callonSpecialCharactersGroup115,
																																					expr: &seqExpr{
																																						pos: position{line: 118, col: 18, offset: 3399},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 118, col: 18, offset: 3399},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 118, col: 28, offset: 3409},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 118, col: 29, offset: 3410},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 467, col: 57, offset: 15165},
																																				label: "start",
																																				expr: &zeroOrOneExpr{
																																					pos: position{line: 467, col: 63, offset: 15171},
																																					expr: &actionExpr{
																																						pos: position{line: 471, col: 17, offset: 15278},
																																						run: (*parser).callonSpecialCharactersGroup122,
																																						expr: &seqExpr{
																																							pos: position{line: 471, col: 17, offset: 15278},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 471, col: 17, offset: 15278},
																																									val:        ":",
																																									ignoreCase: false,
																																									want:       "\":\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 471, col: 21, offset: 15282},
																																									label: "start",
																																									expr: &choiceExpr{
																																										pos: position{line: 471, col: 28, offset: 15289},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 471, col: 28, offset: 15289},
																																												run: (*parser).callonSpecialCharactersGroup127,
																																												expr: &charClassMatcher{
																																													pos:        position{line: 471, col: 28, offset: 15289},
																																													val:        "[A-Za-z]",
																																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 473, col: 9, offset: 15343},
																																												run: (*parser).callonSpecialCharactersGroup129,
																																												expr: &oneOrMoreExpr{
																																													pos: position{line: 473, col: 9, offset: 15343},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 473, col: 9, offset: 15343},
																																														val:        "[0-9]",
																																														ranges:     []rune{'0', '9'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 467, col: 79, offset: 15187},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 456, col: 31, offset: 14633},
																																	run: (*parser).callonSpecialCharactersGroup133,
																																	expr: &seqExpr{
																																		pos: position{line: 456, col: 31, offset: 14633},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 456, col: 31, offset: 14633},
																																				val:        "{",
																																				ignoreCase: false,
																																				want:       "\"{\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 456, col: 35, offset: 14637},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 118, col: 18, offset: 3399},
																																					run: (*parser).callonSpecialCharactersGroup137,
																																					expr: &seqExpr{
																																						pos: position{line: 118, col: 18, offset: 3399},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 118, col: 18, offset: 3399},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 118, col: 28, offset: 3409},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 118, col: 29, offset: 3410},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 456, col: 54, offset: 14656},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 506, col: 8, offset: 16673},
																											run: (*parser).callonSpecialCharactersGroup143,
																											expr: &litMatcher{
																												pos:        position{line: 506, col: 8, offset: 16673},
																												val:        "{",
																												ignoreCase: false,
																												want:       "\"{\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 491, col: 79, offset: 16049},
																							val:        ">>",
																							ignoreCase: false,
																							want:       "\">>\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 493, col: 9, offset: 16122},
																				run: (*parser).callonSpecialCharactersGroup146,
																				expr: &seqExpr{
																					pos: position{line: 493, col: 9, offset: 16122},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 493, col: 9, offset: 16122},
																							val:        "<<",
																							ignoreCase: false,
																							want:       "\"<<\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 493, col: 14, offset: 16127},
																							label: "id",
																							expr: &actionExpr{
																								pos: position{line: 2866, col: 7, offset: 94768},
																								run: (*parser).callonSpecialCharactersGroup150,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 2866, col: 7, offset: 94768},
																									expr: &charClassMatcher{
																										pos:        position{line: 2866, col: 7, offset: 94768},
																										val:        "[^[]<>,]",
																										chars:      []rune{'[', ']', '<', '>', ','},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 493, col: 22, offset: 16135},
																							val:        ">>",
																							ignoreCase: false,
																							want:       "\">>\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2595, col: 11, offset: 86299},
																	run: (*parser).callonSpecialCharactersGroup154,
																	expr: &charClassMatcher{
																		pos:        position{line: 2595, col: 12, offset: 86300},
																		val:        "[<>&]",
																		chars:      []rune{'<', '>', '&'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 947, col: 23, offset: 29896},
											run: (*parser).callonSpecialCharactersGroup156,
											expr: &seqExpr{
												pos: position{line: 947, col: 23, offset: 29896},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 945, col: 32, offset: 29864},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
													&labeledExpr{
														pos:   position{line: 947, col: 51, offset: 29924},
														label: "ref",
														expr: &actionExpr{
															pos: position{line: 947, col: 56, offset: 29929},
															run: (*parser).callonSpecialCharactersGroup160,
															expr: &oneOrMoreExpr{
																pos: position{line: 947, col: 56, offset: 29929},
																expr: &charClassMatcher{
																	pos:        position{line: 947, col: 56, offset: 29929},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 945, col: 32, offset: 29864},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2835, col: 12, offset: 93828},
											run: (*parser).callonSpecialCharactersGroup164,
											expr: &anyMatcher{
												line: 2835, col: 12, offset: 93828,
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2890, col: 8, offset: 95285},
							expr: &anyMatcher{
								line: 2890, col: 9, offset: 95286,
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimGroup",
			pos:  position{line: 2512, col: 1, offset: 84199},
			expr: &actionExpr{
				pos: position{line: 2512, col: 18, offset: 84216},
				run: (*parser).callonVerbatimGroup1,
				expr: &seqExpr{
					pos: position{line: 2512, col: 18, offset: 84216},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2512, col: 18, offset: 84216},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2512, col: 27, offset: 84225},
								expr: &choiceExpr{
									pos: position{line: 2513, col: 5, offset: 84231},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 2820, col: 5, offset: 93371},
											run: (*parser).callonVerbatimGroup6,
											expr: &seqExpr{
												pos: position{line: 2820, col: 5, offset: 93371},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 2820, col: 5, offset: 93371},
														label: "content",
														expr: &actionExpr{
															pos: position{line: 2820, col: 14, offset: 93380},
															run: (*parser).callonVerbatimGroup9,
															expr: &oneOrMoreExpr{
																pos: position{line: 2820, col: 14, offset: 93380},
																expr: &charClassMatcher{
																	pos:        position{line: 2820, col: 14, offset: 93380},
																	val:        "[,?!;0-9\\pL]",
																	chars:      []rune{',', '?', '!', ';'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&andExpr{
														pos: position{line: 2823, col: 5, offset: 93461},
														expr: &choiceExpr{
															pos: position{line: 2823, col: 7, offset: 93463},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2878, col: 10, offset: 95044},
																	val:        " ",
																	ignoreCase: false,
																	want:       "\" \"",
																},
																&actionExpr{
																	pos: position{line: 2878, col: 16, offset: 95050},
																	run: (*parser).callonVerbatimGroup15,
																	expr: &litMatcher{
																		pos:        position{line: 2878, col: 16, offset: 95050},
																		val:        "\t",
																		ignoreCase: false,
																		want:       "\"\\t\"",
																	},
																},
																&charClassMatcher{
																	pos:        position{line: 2797, col: 13, offset: 92519},
																	val:        "[.�0-9\\pL]",
																	chars:      []rune{'.', '�'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&notExpr{
																	pos: position{line: 2890, col: 8, offset: 95285},
																	expr: &anyMatcher{
																		line: 2890, col: 9, offset: 95286,
																	},
																},
																&litMatcher{
																	pos:        position{line: 2886, col: 12, offset: 95178},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2886, col: 19, offset: 95185},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&actionExpr{
																	pos: position{line: 2886, col: 28, offset: 95194},
																	run: (*parser).callonVerbatimGroup22,
																	expr: &litMatcher{
																		pos:        position{line: 2886, col: 28, offset: 95194},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2809, col: 5, offset: 92974},
											run: (*parser).callonVerbatimGroup24,
											expr: &seqExpr{
												pos: position{line: 2809, col: 5, offset: 92974},
												exprs: []interface{}{
													&oneOrMoreExpr{
														pos: position{line: 2809, col: 5, offset: 92974},
														expr: &charClassMatcher{
															pos:        position{line: 2809, col: 5, offset: 92974},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&andExpr{
														pos: position{line: 2809, col: 15, offset: 92984},
														expr: &choiceExpr{
															pos: position{line: 2809, col: 17, offset: 92986},
															alternatives: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2809, col: 17, offset: 92986},
																	val:        "[\\r\\n ,]]",
																	chars:      []rune{'\r', '\n', ' ', ',', ']'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&notExpr{
																	pos: position{line: 2890, col: 8, offset: 95285},
																	expr: &anyMatcher{
																		line: 2890, col: 9, offset: 95286,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2811, col: 9, offset: 93068},
											run: (*parser).callonVerbatimGroup33,
											expr: &seqExpr{
												pos: position{line: 2811, col: 9, offset: 93068},
												exprs: []interface{}{
													&oneOrMoreExpr{
														pos: position{line: 2811, col: 9, offset: 93068},
														expr: &charClassMatcher{
															pos:        position{line: 2811, col: 9, offset: 93068},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&oneOrMoreExpr{
														pos: position{line: 2811, col: 19, offset: 93078},
														expr: &seqExpr{
															pos: position{line: 2811, col: 20, offset: 93079},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2811, col: 20, offset: 93079},
																	val:        "[=*_`]",
																	chars:      []rune{'=', '*', '_', '`'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&oneOrMoreExpr{
																	pos: position{line: 2811, col: 27, offset: 93086},
																	expr: &charClassMatcher{
																		pos:        position{line: 2811, col: 27, offset: 93086},
																		val:        "[0-9\\pL]",
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2829, col: 16, offset: 93605},
											run: (*parser).callonVerbatimGroup42,
											expr: &seqExpr{
												pos: position{line: 2829, col: 16, offset: 93605},
												exprs: []interface{}{
													&charClassMatcher{
														pos:        position{line: 2829, col: 17, offset: 93606},
														val:        "[.,;!?]",
														chars:      []rune{'.', ',', ';', '!', '?'},
														ignoreCase: false,
														inverted:   false,
													},
													&andExpr{
														pos: position{line: 2829, col: 46, offset: 93635},
														expr: &choiceExpr{
															pos: position{line: 2829, col: 48, offset: 93637},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2878, col: 10, offset: 95044},
																	val:        " ",
																	ignoreCase: false,
																	want:       "\" \"",
																},
																&actionExpr{
																	pos: position{line: 2878, col: 16, offset: 95050},
																	run: (*parser).callonVerbatimGroup48,
																	expr: &litMatcher{
																		pos:        position{line: 2878, col: 16, offset: 95050},
																		val:        "\t",
																		ignoreCase: false,
																		want:       "\"\\t\"",
																	},
																},
																&notExpr{
																	pos: position{line: 2890, col: 8, offset: 95285},
																	expr: &anyMatcher{
																		line: 2890, col: 9, offset: 95286,
																	},
																},
																&litMatcher{
																	pos:        position{line: 2886, col: 12, offset: 95178},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2886, col: 19, offset: 95185},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&actionExpr{
																	pos: position{line: 2886, col: 28, offset: 95194},
																	run: (*parser).callonVerbatimGroup54,
																	expr: &litMatcher{
																		pos:        position{line: 2886, col: 28, offset: 95194},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2514, col: 7, offset: 84248},
											name: "Callout",
										},
										&actionExpr{
											pos: position{line: 2587, col: 5, offset: 86026},
											run: (*parser).callonVerbatimGroup57,
											expr: &seqExpr{
												pos: position{line: 2587, col: 5, offset: 86026},
												exprs: []interface{}{
													&andCodeExpr{
														pos: position{line: 2587, col: 5, offset: 86026},
														run: (*parser).callonVerbatimGroup59,
													},
													&labeledExpr{
														pos:   position{line: 2590, col: 5, offset: 86097},
														label: "element",
														expr: &choiceExpr{
															pos: position{line: 2592, col: 9, offset: 86195},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 2592, col: 9, offset: 86195},
																	run: (*parser).callonVerbatimGroup62,
																	expr: &choiceExpr{
																		pos: position{line: 491, col: 27, offset: 15997},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 491, col: 27, offset: 15997},
																				run: (*parser).callonVerbatimGroup64,
																				expr: &seqExpr{
																					pos: position{line: 491, col: 27, offset: 15997},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 491, col: 27, offset: 15997},
																							val:        "<<",
																							ignoreCase: false,
																							want:       "\"<<\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 491, col: 32, offset: 16002},
																							label: "id",
																							expr: &actionExpr{
																								pos: position{line: 2866, col: 7, offset: 94768},
																								run: (*parser).callonVerbatimGroup68,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 2866, col: 7, offset: 94768},
																									expr: &charClassMatcher{
																										pos:        position{line: 2866, col: 7, offset: 94768},
																										val:        "[^[]<>,]",
																										chars:      []rune{'[', ']', '<', '>', ','},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 491, col: 40, offset: 16010},
																							expr: &choiceExpr{
																								pos: position{line: 2878, col: 10, offset: 95044},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2878, col: 10, offset: 95044},
																										val:        " ",
																										ignoreCase: false,
																										want:       "\" \"",
																									},
																									&actionExpr{
																										pos: position{line: 2878, col: 16, offset: 95050},
																										run: (*parser).callonVerbatimGroup74,
																										expr: &litMatcher{
																											pos:        position{line: 2878, col: 16, offset: 95050},
																											val:        "\t",
																											ignoreCase: false,
																											want:       "\"\\t\"",
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 491, col: 47, offset: 16017},
																							val:        ",",
																							ignoreCase: false,
																							want:       "\",\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 491, col: 51, offset: 16021},
																							label: "label",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 501, col: 24, offset: 16434},
																								expr: &choiceExpr{
																									pos: position{line: 502, col: 5, offset: 16440},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 502, col: 6, offset: 16441},
																											run: (*parser).callonVerbatimGroup80,
																											expr: &seqExpr{
																												pos: position{line: 502, col: 6, offset: 16441},
																												exprs: []interface{}{
																													&charClassMatcher{
																														pos:        position{line: 502, col: 6, offset: 16441},
																														val:        "[0-9\\pL]",
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&oneOrMoreExpr{
																														pos: position{line: 502, col: 14, offset: 16449},
																														expr: &charClassMatcher{
																															pos:        position{line: 502, col: 14, offset: 16449},
																															val:        "[^\\r\\n{<>]",
																															chars:      []rune{'\r', '\n', '{', '<', '>'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 449, col: 5, offset: 14443},
																											run: (*parser).callonVerbatimGroup85,
																											expr: &seqExpr{
																												pos: position{line: 449, col: 5, offset: 14443},
																												exprs: []interface{}{
																													&andCodeExpr{
																														pos: position{line: 449, col: 5, offset: 14443},
																														run: (*parser).callonVerbatimGroup87,
																													},
																													&labeledExpr{
																														pos:   position{line: 452, col: 5, offset: 14507},
																														label: "element",
																														expr: &choiceExpr{
																															pos: position{line: 452, col: 14, offset: 14516},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 463, col: 25, offset: 14978},
																																	run: (*parser).callonVerbatimGroup90,
																																	expr: &seqExpr{
																																		pos: position{line: 463, col: 25, offset: 14978},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 463, col: 25, offset: 14978},
																																				val:        "{counter:",
																																				ignoreCase: false,
																																				want:       "\"{counter:\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 463, col: 37, offset: 14990},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 118, col: 18, offset: 3399},
																																					run: (*parser).callonVerbatimGroup94,
																																					expr: &seqExpr{
																																						pos: position{line: 118, col: 18, offset: 3399},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 118, col: 18, offset: 3399},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 118, col: 28, offset: 3409},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 118, col: 29, offset: 3410},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 463, col: 56, offset: 15009},
																																				label: "start",
																																				expr: &zeroOrOneExpr{
																																					pos: position{line: 463, col: 62, offset: 15015},
																																					expr: &actionExpr{
																																						pos: position{line: 471, col: 17, offset: 15278},
																																						run: (*parser).callonVerbatimGroup101,
																																						expr: &seqExpr{
																																							pos: position{line: 471, col: 17, offset: 15278},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 471, col: 17, offset: 15278},
																																									val:        ":",
																																									ignoreCase: false,
																																									want:       "\":\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 471, col: 21, offset: 15282},
																																									label: "start",
																																									expr: &choiceExpr{
																																										pos: position{line: 471, col: 28, offset: 15289},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 471, col: 28, offset: 15289},
																																												run: (*parser).callonVerbatimGroup106,
																																												expr: &charClassMatcher{
																																													pos:        position{line: 471, col: 28, offset: 15289},
																																													val:        "[A-Za-z]",
																																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 473, col: 9, offset: 15343},
																																												run: (*parser).callonVerbatimGroup108,
																																												expr: &oneOrMoreExpr{
																																													pos: position{line: 473, col: 9, offset: 15343},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 473, col: 9, offset: 15343},
																																														val:        "[0-9]",
																																														ranges:     []rune{'0', '9'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 463, col: 78, offset: 15031},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 467, col: 25, offset: 15133},
																																	run: (*parser).callonVerbatimGroup112,
																																	expr: &seqExpr{
																																		pos: position{line: 467, col: 25, offset: 15133},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 467, col: 25, offset: 15133},
																																				val:        "{counter2:",
																																				ignoreCase: false,
																																				want:       "\"{counter2:\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 467, col: 38, offset: 15146},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 118, col: 18, offset: 3399},
																																					run: (*parser).callonVerbatimGroup116,
																																					expr: &seqExpr{
																																						pos: position{line: 118, col: 18, offset: 3399},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 118, col: 18, offset: 3399},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 118, col: 28, offset: 3409},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 118, col: 29, offset: 3410},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 467, col: 57, offset: 15165},
																																				label: "start",
																																				expr: &zeroOrOneExpr{
																																					pos: position{line: 467, col: 63, offset: 15171},
																																					expr: &actionExpr{
																																						pos: position{line: 471, col: 17, offset: 15278},
																																						run: (*parser).callonVerbatimGroup123,
																																						expr: &seqExpr{
																																							pos: position{line: 471, col: 17, offset: 15278},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 471, col: 17, offset: 15278},
																																									val:        ":",
																																									ignoreCase: false,
																																									want:       "\":\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 471, col: 21, offset: 15282},
																																									label: "start",
																																									expr: &choiceExpr{
																																										pos: position{line: 471, col: 28, offset: 15289},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 471, col: 28, offset: 15289},
																																												run: (*parser).callonVerbatimGroup128,
																																												expr: &charClassMatcher{
																																													pos:        position{line: 471, col: 28, offset: 15289},
																																													val:        "[A-Za-z]",
																																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 473, col: 9, offset: 15343},
																																												run: (*parser).callonVerbatimGroup130,
																																												expr: &oneOrMoreExpr{
																																													pos: position{line: 473, col: 9, offset: 15343},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 473, col: 9, offset: 15343},
																																														val:        "[0-9]",
																																														ranges:     []rune{'0', '9'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 467, col: 79, offset: 15187},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 456, col: 31, offset: 14633},
																																	run: (*parser).callonVerbatimGroup134,
																																	expr: &seqExpr{
																																		pos: position{line: 456, col: 31, offset: 14633},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 456, col: 31, offset: 14633},
																																				val:        "{",
																																				ignoreCase: false,
																																				want:       "\"{\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 456, col: 35, offset: 14637},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 118, col: 18, offset: 3399},
																																					run: (*parser).callonVerbatimGroup138,
																																					expr: &seqExpr{
																																						pos: position{line: 118, col: 18, offset: 3399},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 118, col: 18, offset: 3399},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 118, col: 28, offset: 3409},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 118, col: 29, offset: 3410},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 456, col: 54, offset: 14656},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 506, col: 8, offset: 16673},
																											run: (*parser).callonVerbatimGroup144,
																											expr: &litMatcher{
																												pos:        position{line: 506, col: 8, offset: 16673},
																												val:        "{",
																												ignoreCase: false,
																												want:       "\"{\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 491, col: 79, offset: 16049},
																							val:        ">>",
																							ignoreCase: false,
																							want:       "\">>\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 493, col: 9, offset: 16122},
																				run: (*parser).callonVerbatimGroup147,
																				expr: &seqExpr{
																					pos: position{line: 493, col: 9, offset: 16122},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 493, col: 9, offset: 16122},
																							val:        "<<",
																							ignoreCase: false,
																							want:       "\"<<\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 493, col: 14, offset: 16127},
																							label: "id",
																							expr: &actionExpr{
																								pos: position{line: 2866, col: 7, offset: 94768},
																								run: (*parser).callonVerbatimGroup151,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 2866, col: 7, offset: 94768},
																									expr: &charClassMatcher{
																										pos:        position{line: 2866, col: 7, offset: 94768},
																										val:        "[^[]<>,]",
																										chars:      []rune{'[', ']', '<', '>', ','},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 493, col: 22, offset: 16135},
																							val:        ">>",
																							ignoreCase: false,
																							want:       "\">>\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2595, col: 11, offset: 86299},
																	run: (*parser).callonVerbatimGroup155,
																	expr: &charClassMatcher{
																		pos:        position{line: 2595, col: 12, offset: 86300},
																		val:        "[<>&]",
																		chars:      []rune{'<', '>', '&'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 947, col: 23, offset: 29896},
											run: (*parser).callonVerbatimGroup157,
											expr: &seqExpr{
												pos: position{line: 947, col: 23, offset: 29896},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 945, col: 32, offset: 29864},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
													&labeledExpr{
														pos:   position{line: 947, col: 51, offset: 29924},
														label: "ref",
														expr: &actionExpr{
															pos: position{line: 947, col: 56, offset: 29929},
															run: (*parser).callonVerbatimGroup161,
															expr: &oneOrMoreExpr{
																pos: position{line: 947, col: 56, offset: 29929},
																expr: &charClassMatcher{
																	pos:        position{line: 947, col: 56, offset: 29929},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 945, col: 32, offset: 29864},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2835, col: 12, offset: 93828},
											run: (*parser).callonVerbatimGroup165,
											expr: &anyMatcher{
												line: 2835, col: 12, offset: 93828,
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2890, col: 8, offset: 95285},
							expr: &anyMatcher{
								line: 2890, col: 9, offset: 95286,
							},
						},
					},
				},
			},
		},
		{
			name: "InlineMacro",
			pos:  position{line: 2521, col: 1, offset: 84510},
			expr: &actionExpr{
				pos: position{line: 2523, col: 5, offset: 84592},
				run: (*parser).callonInlineMacro1,
				expr: &seqExpr{
					pos: position{line: 2523, col: 5, offset: 84592},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 2523, col: 5, offset: 84592},
							run: (*parser).callonInlineMacro3,
						},
						&labeledExpr{
							pos:   position{line: 2526, col: 5, offset: 84652},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2527, col: 9, offset: 84670},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2527, col: 9, offset: 84670},
										name: "InlineIcon",
									},
									&ruleRefExpr{
										pos:  position{line: 2528, col: 11, offset: 84691},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 2529, col: 11, offset: 84714},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 2530, col: 11, offset: 84730},
										name: "InlinePassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 2531, col: 11, offset: 84759},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 2532, col: 11, offset: 84785},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 2533, col: 11, offset: 84811},
										name: "InlineUserMacro",
									},
									&actionExpr{
										pos: position{line: 1125, col: 20, offset: 35773},
										run: (*parser).callonInlineMacro13,
										expr: &seqExpr{
											pos: position{line: 1125, col: 20, offset: 35773},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1125, col: 20, offset: 35773},
													val:        "[[",
													ignoreCase: false,
													want:       "\"[[\"",
												},
												&labeledExpr{
													pos:   position{line: 1125, col: 25, offset: 35778},
													label: "id",
													expr: &actionExpr{
														pos: position{line: 2866, col: 7, offset: 94768},
														run: (*parser).callonInlineMacro17,
														expr: &oneOrMoreExpr{
															pos: position{line: 2866, col: 7, offset: 94768},
															expr: &charClassMatcher{
																pos:        position{line: 2866, col: 7, offset: 94768},
																val:        "[^[]<>,]",
																chars:      []rune{'[', ']', '<', '>', ','},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1125, col: 33, offset: 35786},
													val:        "]]",
													ignoreCase: false,
													want:       "\"]]\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1125, col: 38, offset: 35791},
													expr: &choiceExpr{
														pos: position{line: 2878, col: 10, offset: 95044},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2878, col: 10, offset: 95044},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2878, col: 16, offset: 95050},
																run: (*parser).callonInlineMacro24,
																expr: &litMatcher{
																	pos:        position{line: 2878, col: 16, offset: 95050},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1142, col: 23, offset: 36485},
										run: (*parser).callonInlineMacro26,
										expr: &seqExpr{
											pos: position{line: 1142, col: 23, offset: 36485},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1142, col: 23, offset: 36485},
													val:        "(((",
													ignoreCase: false,
													want:       "\"(((\"",
												},
												&labeledExpr{
													pos:   position{line: 1142, col: 29, offset: 36491},
													label: "term1",
													expr: &actionExpr{
														pos: position{line: 1149, col: 30, offset: 36822},
														run: (*parser).callonInlineMacro30,
														expr: &oneOrMoreExpr{
															pos: position{line: 1149, col: 30, offset: 36822},
															expr: &choiceExpr{
																pos: position{line: 1149, col: 31, offset: 36823},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 2797, col: 13, offset: 92519},
																		val:        "[ 0-9\\pL]",
																		chars:      []rune{' '},
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&actionExpr{
																		pos: position{line: 2878, col: 16, offset: 95050},
																		run: (*parser).callonInlineMacro34,
																		expr: &litMatcher{
																			pos:        position{line: 2878, col: 16, offset: 95050},
																			val:        "\t",
																			ignoreCase: false,
																			want:       "\"\\t\"",
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1143, col: 5, offset: 36530},
													label: "term2",
													expr: &zeroOrOneExpr{
														pos: position{line: 1143, col: 11, offset: 36536},
														expr: &actionExpr{
															pos: position{line: 1143, col: 12, offset: 36537},
															run: (*parser).callonInlineMacro38,
															expr: &seqExpr{
																pos: position{line: 1143, col: 12, offset: 36537},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 1143, col: 12, offset: 36537},
																		expr: &choiceExpr{
																			pos: position{line: 2878, col: 10, offset: 95044},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2878, col: 10, offset: 95044},
																					val:        " ",
																					ignoreCase: false,
																					want:       "\" \"",
																				},
																				&actionExpr{
																					pos: position{line: 2878, col: 16, offset: 95050},
																					run: (*parser).callonInlineMacro43,
																					expr: &litMatcher{
																						pos:        position{line: 2878, col: 16, offset: 95050},
																						val:        "\t",
																						ignoreCase: false,
																						want:       "\"\\t\"",
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1143, col: 19, offset: 36544},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1143, col: 23, offset: 36548},
																		expr: &choiceExpr{
																			pos: position{line: 2878, col: 10, offset: 95044},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2878, col: 10, offset: 95044},
																					val:        " ",
																					ignoreCase: false,
																					want:       "\" \"",
																				},
																				&actionExpr{
																					pos: position{line: 2878, col: 16, offset: 95050},
																					run: (*parser).callonInlineMacro49,
																					expr: &litMatcher{
																						pos:        position{line: 2878, col: 16, offset: 95050},
																						val:        "\t",
																						ignoreCase: false,
																						want:       "\"\\t\"",
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1143, col: 30, offset: 36555},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 1149, col: 30, offset: 36822},
																			run: (*parser).callonInlineMacro52,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1149, col: 30, offset: 36822},
																				expr: &choiceExpr{
																					pos: position{line: 1149, col: 31, offset: 36823},
																					alternatives: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 2797, col: 13, offset: 92519},
																							val:        "[ 0-9\\pL]",
																							chars:      []rune{' '},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&actionExpr{
																							pos: position{line: 2878, col: 16, offset: 95050},
																							run: (*parser).callonInlineMacro56,
																							expr: &litMatcher{
																								pos:        position{line: 2878, col: 16, offset: 95050},
																								val:        "\t",
																								ignoreCase: false,
																								want:       "\"\\t\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1144, col: 5, offset: 36622},
													label: "term3",
													expr: &zeroOrOneExpr{
														pos: position{line: 1144, col: 11, offset: 36628},
														expr: &actionExpr{
															pos: position{line: 1144, col: 12, offset: 36629},
															run: (*parser).callonInlineMacro60,
															expr: &seqExpr{
																pos: position{line: 1144, col: 12, offset: 36629},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 1144, col: 12, offset: 36629},
																		expr: &choiceExpr{
																			pos: position{line: 2878, col: 10, offset: 95044},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2878, col: 10, offset: 95044},
																					val:        " ",
																					ignoreCase: false,
																					want:       "\" \"",
																				},
																				&actionExpr{
																					pos: position{line: 2878, col: 16, offset: 95050},
																					run: (*parser).callonInlineMacro65,
																					expr: &litMatcher{
																						pos:        position{line: 2878, col: 16, offset: 95050},
																						val:        "\t",
																						ignoreCase: false,
																						want:       "\"\\t\"",
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1144, col: 19, offset: 36636},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1144, col: 23, offset: 36640},
																		expr: &choiceExpr{
																			pos: position{line: 2878, col: 10, offset: 95044},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2878, col: 10, offset: 95044},
																					val:        " ",
																					ignoreCase: false,
																					want:       "\" \"",
																				},
																				&actionExpr{
																					pos: position{line: 2878, col: 16, offset: 95050},
																					run: (*parser).callonInlineMacro71,
																					expr: &litMatcher{
																						pos:        position{line: 2878, col: 16, offset: 95050},
																						val:        "\t",
																						ignoreCase: false,
																						want:       "\"\\t\"",
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1144, col: 30, offset: 36647},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 1149, col: 30, offset: 36822},
																			run: (*parser).callonInlineMacro74,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1149, col: 30, offset: 36822},
																				expr: &choiceExpr{
																					pos: position{line: 1149, col: 31, offset: 36823},
																					alternatives: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 2797, col: 13, offset: 92519},
																							val:        "[ 0-9\\pL]",
																							chars:      []rune{' '},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&actionExpr{
																							pos: position{line: 2878, col: 16, offset: 95050},
																							run: (*parser).callonInlineMacro78,
																							expr: &litMatcher{
																								pos:        position{line: 2878, col: 16, offset: 95050},
																								val:        "\t",
																								ignoreCase: false,
																								want:       "\"\\t\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1145, col: 5, offset: 36714},
													val:        ")))",
													ignoreCase: false,
													want:       "\")))\"",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2536, col: 11, offset: 84893},
										name: "IndexTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 2537, col: 11, offset: 84913},
										name: "InlineUserMacro",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 2541, col: 1, offset: 84975},
			expr: &actionExpr{
				pos: position{line: 2543, col: 5, offset: 85063},
				run: (*parser).callonInlinePassthrough1,
				expr: &seqExpr{
					pos: position{line: 2543, col: 5, offset: 85063},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 2543, col: 5, offset: 85063},
							run: (*parser).callonInlinePassthrough3,
						},
						&labeledExpr{
							pos:   position{line: 2546, col: 5, offset: 85135},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2547, col: 9, offset: 85153},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1211, col: 26, offset: 40004},
										run: (*parser).callonInlinePassthrough6,
										expr: &seqExpr{
											pos: position{line: 1211, col: 26, offset: 40004},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1209, col: 32, offset: 39972},
													val:        "+++",
													ignoreCase: false,
													want:       "\"+++\"",
												},
												&labeledExpr{
													pos:   position{line: 1211, col: 54, offset: 40032},
													label: "content",
													expr: &choiceExpr{
														pos: position{line: 1215, col: 33, offset: 40245},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 1215, col: 34, offset: 40246},
																run: (*parser).callonInlinePassthrough11,
																expr: &zeroOrMoreExpr{
																	pos: position{line: 1215, col: 34, offset: 40246},
																	expr: &seqExpr{
																		pos: position{line: 1215, col: 35, offset: 40247},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 1215, col: 35, offset: 40247},
																				expr: &litMatcher{
																					pos:        position{line: 1209, col: 32, offset: 39972},
																					val:        "+++",
																					ignoreCase: false,
																					want:       "\"+++\"",
																				},
																			},
																			&anyMatcher{
																				line: 1215, col: 64, offset: 40276,
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1217, col: 11, offset: 40449},
																run: (*parser).callonInlinePassthrough17,
																expr: &zeroOrOneExpr{
																	pos: position{line: 1217, col: 11, offset: 40449},
																	expr: &seqExpr{
																		pos: position{line: 1217, col: 12, offset: 40450},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 1217, col: 12, offset: 40450},
																				expr: &choiceExpr{
																					pos: position{line: 2878, col: 10, offset: 95044},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2878, col: 10, offset: 95044},
																							val:        " ",
																							ignoreCase: false,
																							want:       "\" \"",
																						},
																						&actionExpr{
																							pos: position{line: 2878, col: 16, offset: 95050},
																							run: (*parser).callonInlinePassthrough23,
																							expr: &litMatcher{
																								pos:        position{line: 2878, col: 16, offset: 95050},
																								val:        "\t",
																								ignoreCase: false,
																								want:       "\"\\t\"",
																							},
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 1217, col: 19, offset: 40457},
																				expr: &choiceExpr{
																					pos: position{line: 2886, col: 12, offset: 95178},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2886, col: 12, offset: 95178},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2886, col: 19, offset: 95185},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&actionExpr{
																							pos: position{line: 2886, col: 28, offset: 95194},
																							run: (*parser).callonInlinePassthrough29,
																							expr: &litMatcher{
																								pos:        position{line: 2886, col: 28, offset: 95194},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 1217, col: 28, offset: 40466},
																				expr: &litMatcher{
																					pos:        position{line: 1209, col: 32, offset: 39972},
																					val:        "+++",
																					ignoreCase: false,
																					want:       "\"+++\"",
																				},
																			},
																			&anyMatcher{
																				line: 1217, col: 57, offset: 40495,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1209, col: 32, offset: 39972},
													val:        "+++",
													ignoreCase: false,
													want:       "\"+++\"",
												},
												&notExpr{
													pos: position{line: 1211, col: 121, offset: 40099},
													expr: &charClassMatcher{
														pos:        position{line: 2797, col: 13, offset: 92519},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1199, col: 26, offset: 39287},
										run: (*parser).callonInlinePassthrough37,
										expr: &seqExpr{
											pos: position{line: 1199, col: 26, offset: 39287},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1197, col: 32, offset: 39257},
													val:        "+",
													ignoreCase: false,
													want:       "\"+\"",
												},
												&labeledExpr{
													pos:   position{line: 1199, col: 54, offset: 39315},
													label: "content",
													expr: &choiceExpr{
														pos: position{line: 1203, col: 33, offset: 39528},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 1203, col: 34, offset: 39529},
																run: (*parser).callonInlinePassthrough42,
																expr: &seqExpr{
																	pos: position{line: 1203, col: 34, offset: 39529},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 1203, col: 35, offset: 39530},
																			expr: &litMatcher{
																				pos:        position{line: 1197, col: 32, offset: 39257},
																				val:        "+",
																				ignoreCase: false,
																				want:       "\"+\"",
																			},
																		},
																		&notExpr{
																			pos: position{line: 1203, col: 64, offset: 39559},
																			expr: &choiceExpr{
																				pos: position{line: 2878, col: 10, offset: 95044},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2878, col: 10, offset: 95044},
																						val:        " ",
																						ignoreCase: false,
																						want:       "\" \"",
																					},
																					&actionExpr{
																						pos: position{line: 2878, col: 16, offset: 95050},
																						run: (*parser).callonInlinePassthrough49,
																						expr: &litMatcher{
																							pos:        position{line: 2878, col: 16, offset: 95050},
																							val:        "\t",
																							ignoreCase: false,
																							want:       "\"\\t\"",
																						},
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 1203, col: 71, offset: 39566},
																			expr: &choiceExpr{
																				pos: position{line: 2886, col: 12, offset: 95178},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2886, col: 12, offset: 95178},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2886, col: 19, offset: 95185},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&actionExpr{
																						pos: position{line: 2886, col: 28, offset: 95194},
																						run: (*parser).callonInlinePassthrough55,
																						expr: &litMatcher{
																							pos:        position{line: 2886, col: 28, offset: 95194},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																		},
																		&anyMatcher{
																			line: 1203, col: 80, offset: 39575,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1203, col: 83, offset: 39578},
																			expr: &seqExpr{
																				pos: position{line: 1203, col: 84, offset: 39579},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 1203, col: 84, offset: 39579},
																						expr: &seqExpr{
																							pos: position{line: 1203, col: 86, offset: 39581},
																							exprs: []interface{}{
																								&actionExpr{
																									pos: position{line: 2882, col: 11, offset: 95109},
																									run: (*parser).callonInlinePassthrough62,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 2882, col: 11, offset: 95109},
																										expr: &charClassMatcher{
																											pos:        position{line: 2882, col: 12, offset: 95110},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 1197, col: 32, offset: 39257},
																									val:        "+",
																									ignoreCase: false,
																									want:       "\"+\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 1203, col: 122, offset: 39617},
																						expr: &litMatcher{
																							pos:        position{line: 1197, col: 32, offset: 39257},
																							val:        "+",
																							ignoreCase: false,
																							want:       "\"+\"",
																						},
																					},
																					&notExpr{
																						pos: position{line: 1203, col: 151, offset: 39646},
																						expr: &choiceExpr{
																							pos: position{line: 2886, col: 12, offset: 95178},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2886, col: 12, offset: 95178},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2886, col: 19, offset: 95185},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&actionExpr{
																									pos: position{line: 2886, col: 28, offset: 95194},
																									run: (*parser).callonInlinePassthrough72,
																									expr: &litMatcher{
																										pos:        position{line: 2886, col: 28, offset: 95194},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																					},
																					&anyMatcher{
																						line: 1203, col: 160, offset: 39655,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1205, col: 11, offset: 39805},
																run: (*parser).callonInlinePassthrough75,
																expr: &seqExpr{
																	pos: position{line: 1205, col: 12, offset: 39806},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 1205, col: 12, offset: 39806},
																			expr: &choiceExpr{
																				pos: position{line: 2878, col: 10, offset: 95044},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2878, col: 10, offset: 95044},
																						val:        " ",
																						ignoreCase: false,
																						want:       "\" \"",
																					},
																					&actionExpr{
																						pos: position{line: 2878, col: 16, offset: 95050},
																						run: (*parser).callonInlinePassthrough80,
																						expr: &litMatcher{
																							pos:        position{line: 2878, col: 16, offset: 95050},
																							val:        "\t",
																							ignoreCase: false,
																							want:       "\"\\t\"",
																						},
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 1205, col: 19, offset: 39813},
																			expr: &choiceExpr{
																				pos: position{line: 2886, col: 12, offset: 95178},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2886, col: 12, offset: 95178},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2886, col: 19, offset: 95185},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&actionExpr{
																						pos: position{line: 2886, col: 28, offset: 95194},
																						run: (*parser).callonInlinePassthrough86,
																						expr: &litMatcher{
																							pos:        position{line: 2886, col: 28, offset: 95194},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 1205, col: 28, offset: 39822},
																			expr: &litMatcher{
																				pos:        position{line: 1197, col: 32, offset: 39257},
																				val:        "+",
																				ignoreCase: false,
																				want:       "\"+\"",
																			},
																		},
																		&anyMatcher{
																			line: 1205, col: 57, offset: 39851,
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1197, col: 32, offset: 39257},
													val:        "+",
													ignoreCase: false,
													want:       "\"+\"",
												},
												&notExpr{
													pos: position{line: 1199, col: 121, offset: 39382},
													expr: &charClassMatcher{
														pos:        position{line: 2797, col: 13, offset: 92519},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2547, col: 57, offset: 85201},
										name: "PassthroughMacro",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Quote",
			pos:  position{line: 2563, col: 1, offset: 85488},
			expr: &actionExpr{
				pos: position{line: 2565, col: 5, offset: 85564},
				run: (*parser).callonQuote1,
				expr: &seqExpr{
					pos: position{line: 2565, col: 5, offset: 85564},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 2565, col: 5, offset: 85564},
							run: (*parser).callonQuote3,
						},
						&labeledExpr{
							pos:   position{line: 2568, col: 5, offset: 85624},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2569, col: 9, offset: 85642},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2569, col: 9, offset: 85642},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 2570, col: 11, offset: 85664},
										name: "QuotedString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableColumnsAttribute",
			pos:  position{line: 2715, col: 1, offset: 89672},
			expr: &actionExpr{
				pos: position{line: 2715, col: 26, offset: 89697},
				run: (*parser).callonTableColumnsAttribute1,
				expr: &seqExpr{
					pos: position{line: 2715, col: 26, offset: 89697},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2715, col: 26, offset: 89697},
							label: "cols",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2715, col: 31, offset: 89702},
								expr: &actionExpr{
									pos: position{line: 2720, col: 5, offset: 89765},
									run: (*parser).callonTableColumnsAttribute5,
									expr: &seqExpr{
										pos: position{line: 2720, col: 5, offset: 89765},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2720, col: 5, offset: 89765},
												expr: &notExpr{
													pos: position{line: 2890, col: 8, offset: 95285},
													expr: &anyMatcher{
														line: 2890, col: 9, offset: 95286,
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2723, col: 5, offset: 89889},
												label: "multiplier",
												expr: &zeroOrOneExpr{
													pos: position{line: 2723, col: 16, offset: 89900},
													expr: &actionExpr{
														pos: position{line: 2723, col: 17, offset: 89901},
														run: (*parser).callonTableColumnsAttribute12,
														expr: &seqExpr{
															pos: position{line: 2723, col: 17, offset: 89901},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 2723, col: 17, offset: 89901},
																	label: "n",
																	expr: &actionExpr{
																		pos: position{line: 2874, col: 11, offset: 94970},
																		run: (*parser).callonTableColumnsAttribute15,
																		expr: &seqExpr{
																			pos: position{line: 2874, col: 11, offset: 94970},
																			exprs: []interface{}{
																				&zeroOrOneExpr{
																					pos: position{line: 2874, col: 11, offset: 94970},
																					expr: &litMatcher{
																						pos:        position{line: 2874, col: 11, offset: 94970},
																						val:        "-",
																						ignoreCase: false,
																						want:       "\"-\"",
																					},
																				},
																				&oneOrMoreExpr{
																					pos: position{line: 2874, col: 16, offset: 94975},
																					expr: &actionExpr{
																						pos: position{line: 2870, col: 10, offset: 94910},
																						run: (*parser).callonTableColumnsAttribute20,
																						expr: &charClassMatcher{
																							pos:        position{line: 2870, col: 10, offset: 94910},
																							val:        "[0-9]",
																							ranges:     []rune{'0', '9'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2723, col: 26, offset: 89910},
																	val:        "*",
																	ignoreCase: false,
																	want:       "\"*\"",
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2724, col: 5, offset: 89938},
												label: "halign",
												expr: &zeroOrOneExpr{
													pos: position{line: 2724, col: 12, offset: 89945},
													expr: &choiceExpr{
														pos: position{line: 2725, col: 9, offset: 89955},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2725, col: 9, offset: 89955},
																run: (*parser).callonTableColumnsAttribute26,
																expr: &litMatcher{
																	pos:        position{line: 2725, col: 9, offset: 89955},
																	val:        "<",
																	ignoreCase: false,
																	want:       "\"<\"",
																},
															},
															&actionExpr{
																pos: position{line: 2726, col: 11, offset: 90002},
																run: (*parser).callonTableColumnsAttribute28,
																expr: &litMatcher{
																	pos:        position{line: 2726, col: 11, offset: 90002},
																	val:        ">",
																	ignoreCase: false,
																	want:       "\">\"",
																},
															},
															&actionExpr{
																pos: position{line: 2727, col: 11, offset: 90050},
																run: (*parser).callonTableColumnsAttribute30,
																expr: &litMatcher{
																	pos:        position{line: 2727, col: 11, offset: 90050},
																	val:        "^",
																	ignoreCase: false,
																	want:       "\"^\"",
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2729, col: 5, offset: 90100},
												label: "valign",
												expr: &zeroOrOneExpr{
													pos: position{line: 2729, col: 12, offset: 90107},
													expr: &choiceExpr{
														pos: position{line: 2730, col: 9, offset: 90117},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2730, col: 9, offset: 90117},
																run: (*parser).callonTableColumnsAttribute35,
																expr: &litMatcher{
																	pos:        position{line: 2730, col: 9, offset: 90117},
																	val:        ".<",
																	ignoreCase: false,
																	want:       "\".<\"",
																},
															},
															&actionExpr{
																pos: position{line: 2731, col: 11, offset: 90164},
																run: (*parser).callonTableColumnsAttribute37,
																expr: &litMatcher{
																	pos:        position{line: 2731, col: 11, offset: 90164},
																	val:        ".>",
																	ignoreCase: false,
																	want:       "\".>\"",
																},
															},
															&actionExpr{
																pos: position{line: 2732, col: 11, offset: 90214},
																run: (*parser).callonTableColumnsAttribute39,
																expr: &litMatcher{
																	pos:        position{line: 2732, col: 11, offset: 90214},
																	val:        ".^",
																	ignoreCase: false,
																	want:       "\".^\"",
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2734, col: 5, offset: 90265},
												label: "weight",
												expr: &zeroOrOneExpr{
													pos: position{line: 2734, col: 12, offset: 90272},
													expr: &choiceExpr{
														pos: position{line: 2734, col: 13, offset: 90273},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2874, col: 11, offset: 94970},
																run: (*parser).callonTableColumnsAttribute44,
																expr: &seqExpr{
																	pos: position{line: 2874, col: 11, offset: 94970},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 2874, col: 11, offset: 94970},
																			expr: &litMatcher{
																				pos:        position{line: 2874, col: 11, offset: 94970},
																				val:        "-",
																				ignoreCase: false,
																				want:       "\"-\"",
																			},
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 2874, col: 16, offset: 94975},
																			expr: &actionExpr{
																				pos: position{line: 2870, col: 10, offset: 94910},
																				run: (*parser).callonTableColumnsAttribute49,
																				expr: &charClassMatcher{
																					pos:        position{line: 2870, col: 10, offset: 94910},
																					val:        "[0-9]",
																					ranges:     []rune{'0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2734, col: 23, offset: 90283},
																run: (*parser).callonTableColumnsAttribute51,
																expr: &litMatcher{
																	pos:        position{line: 2734, col: 23, offset: 90283},
																	val:        "~",
																	ignoreCase: false,
																	want:       "\"~\"",
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2735, col: 5, offset: 90325},
												label: "style",
												expr: &zeroOrOneExpr{
													pos: position{line: 2735, col: 11, offset: 90331},
													expr: &actionExpr{
														pos: position{line: 2735, col: 12, offset: 90332},
														run: (*parser).callonTableColumnsAttribute55,
														expr: &charClassMatcher{
															pos:        position{line: 2735, col: 12, offset: 90332},
															val:        "[adehlms]",
															chars:      []rune{'a', 'd', 'e', 'h', 'l', 'm', 's'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2737, col: 5, offset: 90462},
												label: "comma",
												expr: &zeroOrOneExpr{
													pos: position{line: 2737, col: 11, offset: 90468},
													expr: &litMatcher{
														pos:        position{line: 2737, col: 12, offset: 90469},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
											},
											&andCodeExpr{
												pos: position{line: 2738, col: 5, offset: 90479},
												run: (*parser).callonTableColumnsAttribute60,
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2890, col: 8, offset: 95285},
							expr: &anyMatcher{
								line: 2890, col: 9, offset: 95286,
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 2762, col: 1, offset: 91409},
			expr: &actionExpr{
				pos: position{line: 2763, col: 5, offset: 91432},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 2763, col: 5, offset: 91432},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2763, col: 5, offset: 91432},
							label: "name",
							expr: &actionExpr{
								pos: position{line: 2786, col: 18, offset: 92183},
								run: (*parser).callonUserMacroBlock4,
								expr: &oneOrMoreExpr{
									pos: position{line: 2786, col: 19, offset: 92184},
									expr: &charClassMatcher{
										pos:        position{line: 2786, col: 19, offset: 92184},
										val:        "[_-0-9\\pL]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2764, col: 5, offset: 91458},
							run: (*parser).callonUserMacroBlock7,
						},
						&litMatcher{
							pos:        position{line: 2768, col: 5, offset: 91598},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 2769, col: 5, offset: 91608},
							label: "value",
							expr: &actionExpr{
								pos: position{line: 2790, col: 19, offset: 92259},
								run: (*parser).callonUserMacroBlock10,
								expr: &zeroOrMoreExpr{
									pos: position{line: 2790, col: 19, offset: 92259},
									expr: &charClassMatcher{
										pos:        position{line: 2790, col: 19, offset: 92259},
										val:        "[^:[ \\r\\n]",
										chars:      []rune{':', '[', ' ', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2770, col: 5, offset: 91636},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 2770, col: 23, offset: 91654},
								name: "InlineAttributes",
							},
						},
						&choiceExpr{
							pos: position{line: 2893, col: 8, offset: 95335},
							alternatives: []interface{}{
								&notExpr{
									pos: position{line: 2890, col: 8, offset: 95285},
									expr: &anyMatcher{
										line: 2890, col: 9, offset: 95286,
									},
								},
								&litMatcher{
									pos:        position{line: 2886, col: 12, offset: 95178},
									val:        "\n",
									ignoreCase: false,
									want:       "\"\\n\"",
								},
								&litMatcher{
									pos:        position{line: 2886, col: 19, offset: 95185},
									val:        "\r\n",
									ignoreCase: false,
									want:       "\"\\r\\n\"",
								},
								&actionExpr{
									pos: position{line: 2886, col: 28, offset: 95194},
									run: (*parser).callonUserMacroBlock20,
									expr: &litMatcher{
										pos:        position{line: 2886, col: 28, offset: 95194},
										val:        "\r",
										ignoreCase: false,
										want:       "\"\\r\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 2774, col: 1, offset: 91789},
			expr: &actionExpr{
				pos: position{line: 2775, col: 5, offset: 91813},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 2775, col: 5, offset: 91813},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2775, col: 5, offset: 91813},
							label: "name",
							expr: &actionExpr{
								pos: position{line: 2786, col: 18, offset: 92183},
								run: (*parser).callonInlineUserMacro4,
								expr: &oneOrMoreExpr{
									pos: position{line: 2786, col: 19, offset: 92184},
									expr: &charClassMatcher{
										pos:        position{line: 2786, col: 19, offset: 92184},
										val:        "[_-0-9\\pL]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2776, col: 5, offset: 91839},
							run: (*parser).callonInlineUserMacro7,
						},
						&litMatcher{
							pos:        position{line: 2780, col: 5, offset: 91979},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 2781, col: 5, offset: 91988},
							label: "value",
							expr: &actionExpr{
								pos: position{line: 2790, col: 19, offset: 92259},
								run: (*parser).callonInlineUserMacro10,
								expr: &zeroOrMoreExpr{
									pos: position{line: 2790, col: 19, offset: 92259},
									expr: &charClassMatcher{
										pos:        position{line: 2790, col: 19, offset: 92259},
										val:        "[^:[ \\r\\n]",
										chars:      []rune{':', '[', ' ', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2782, col: 5, offset: 92016},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 2782, col: 23, offset: 92034},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 2839, col: 1, offset: 93895},
			expr: &actionExpr{
				pos: position{line: 2839, col: 17, offset: 93911},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2839, col: 17, offset: 93911},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2839, col: 22, offset: 93916},
						expr: &choiceExpr{
							pos: position{line: 2839, col: 23, offset: 93917},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2851, col: 13, offset: 94316},
									run: (*parser).callonFileLocation5,
									expr: &labeledExpr{
										pos:   position{line: 2851, col: 13, offset: 94316},
										label: "elements",
										expr: &oneOrMoreExpr{
											pos: position{line: 2851, col: 22, offset: 94325},
											expr: &choiceExpr{
												pos: position{line: 2852, col: 5, offset: 94331},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 2852, col: 5, offset: 94331},
														run: (*parser).callonFileLocation9,
														expr: &oneOrMoreExpr{
															pos: position{line: 2852, col: 5, offset: 94331},
															expr: &charClassMatcher{
																pos:        position{line: 2852, col: 6, offset: 94332},
																val:        "[^\\r\\n[]�&<>{ ]",
																chars:      []rune{'\r', '\n', '[', ']', '�', '&', '<', '>', '{', ' '},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
													&actionExpr{
														pos: position{line: 449, col: 5, offset: 14443},
														run: (*parser).callonFileLocation12,
														expr: &seqExpr{
															pos: position{line: 449, col: 5, offset: 14443},
															exprs: []interface{}{
																&andCodeExpr{
																	pos: position{line: 449, col: 5, offset: 14443},
																	run: (*parser).callonFileLocation14,
																},
																&labeledExpr{
																	pos:   position{line: 452, col: 5, offset: 14507},
																	label: "element",
																	expr: &choiceExpr{
																		pos: position{line: 452, col: 14, offset: 14516},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 463, col: 25, offset: 14978},
																				run: (*parser).callonFileLocation17,
																				expr: &seqExpr{
																					pos: position{line: 463, col: 25, offset: 14978},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 463, col: 25, offset: 14978},
																							val:        "{counter:",
																							ignoreCase: false,
																							want:       "\"{counter:\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 463, col: 37, offset: 14990},
																							label: "name",
																							expr: &actionExpr{
																								pos: position{line: 118, col: 18, offset: 3399},
																								run: (*parser).callonFileLocation21,
																								expr: &seqExpr{
																									pos: position{line: 118, col: 18, offset: 3399},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 118, col: 18, offset: 3399},
																											val:        "[_0-9\\pL]",
																											chars:      []rune{'_'},
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 118, col: 28, offset: 3409},
																											expr: &charClassMatcher{
																												pos:        position{line: 118, col: 29, offset: 3410},
																												val:        "[-0-9\\pL]",
																												chars:      []rune{'-'},
																												ranges:     []rune{'0', '9'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 463, col: 56, offset: 15009},
																							label: "start",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 463, col: 62, offset: 15015},
																								expr: &actionExpr{
																									pos: position{line: 471, col: 17, offset: 15278},
																									run: (*parser).callonFileLocation28,
																									expr: &seqExpr{
																										pos: position{line: 471, col: 17, offset: 15278},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 471, col: 17, offset: 15278},
																												val:        ":",
																												ignoreCase: false,
																												want:       "\":\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 471, col: 21, offset: 15282},
																												label: "start",
																												expr: &choiceExpr{
																													pos: position{line: 471, col: 28, offset: 15289},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 471, col: 28, offset: 15289},
																															run: (*parser).callonFileLocation33,
																															expr: &charClassMatcher{
																																pos:        position{line: 471, col: 28, offset: 15289},
																																val:        "[A-Za-z]",
																																ranges:     []rune{'A', 'Z', 'a', 'z'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&actionExpr{
																															pos: position{line: 473, col: 9, offset: 15343},
																															run: (*parser).callonFileLocation35,
																															expr: &oneOrMoreExpr{
																																pos: position{line: 473, col: 9, offset: 15343},
																																expr: &charClassMatcher{
																																	pos:        position{line: 473, col: 9, offset: 15343},
																																	val:        "[0-9]",
																																	ranges:     []rune{'0', '9'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 463, col: 78, offset: 15031},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 467, col: 25, offset: 15133},
																				run: (*parser).callonFileLocation39,
																				expr: &seqExpr{
																					pos: position{line: 467, col: 25, offset: 15133},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 467, col: 25, offset: 15133},
																							val:        "{counter2:",
																							ignoreCase: false,
																							want:       "\"{counter2:\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 467, col: 38, offset: 15146},
																							label: "name",
																							expr: &actionExpr{
																								pos: position{line: 118, col: 18, offset: 3399},
																								run: (*parser).callonFileLocation43,
																								expr: &seqExpr{
																									pos: position{line: 118, col: 18, offset: 3399},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 118, col: 18, offset: 3399},
																											val:        "[_0-9\\pL]",
																											chars:      []rune{'_'},
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 118, col: 28, offset: 3409},
																											expr: &charClassMatcher{
																												pos:        position{line: 118, col: 29, offset: 3410},
																												val:        "[-0-9\\pL]",
																												chars:      []rune{'-'},
																												ranges:     []rune{'0', '9'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 467, col: 57, offset: 15165},
																							label: "start",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 467, col: 63, offset: 15171},
																								expr: &actionExpr{
																									pos: position{line: 471, col: 17, offset: 15278},
																									run: (*parser).callonFileLocation50,
																									expr: &seqExpr{
																										pos: position{line: 471, col: 17, offset: 15278},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 471, col: 17, offset: 15278},
																												val:        ":",
																												ignoreCase: false,
																												want:       "\":\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 471, col: 21, offset: 15282},
																												label: "start",
																												expr: &choiceExpr{
																													pos: position{line: 471, col: 28, offset: 15289},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 471, col: 28, offset: 15289},
																															run: (*parser).callonFileLocation55,
																															expr: &charClassMatcher{
																																pos:        position{line: 471, col: 28, offset: 15289},
																																val:        "[A-Za-z]",
																																ranges:     []rune{'A', 'Z', 'a', 'z'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&actionExpr{
																															pos: position{line: 473, col: 9, offset: 15343},
																															run: (*parser).callonFileLocation57,
																															expr: &oneOrMoreExpr{
																																pos: position{line: 473, col: 9, offset: 15343},
																																expr: &charClassMatcher{
																																	pos:        position{line: 473, col: 9, offset: 15343},
																																	val:        "[0-9]",
																																	ranges:     []rune{'0', '9'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 467, col: 79, offset: 15187},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 456, col: 31, offset: 14633},
																				run: (*parser).callonFileLocation61,
																				expr: &seqExpr{
																					pos: position{line: 456, col: 31, offset: 14633},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 456, col: 31, offset: 14633},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 456, col: 35, offset: 14637},
																							label: "name",
																							expr: &actionExpr{
																								pos: position{line: 118, col: 18, offset: 3399},
																								run: (*parser).callonFileLocation65,
																								expr: &seqExpr{
																									pos: position{line: 118, col: 18, offset: 3399},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 118, col: 18, offset: 3399},
																											val:        "[_0-9\\pL]",
																											chars:      []rune{'_'},
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 118, col: 28, offset: 3409},
																											expr: &charClassMatcher{
																												pos:        position{line: 118, col: 29, offset: 3410},
																												val:        "[-0-9\\pL]",
																												chars:      []rune{'-'},
																												ranges:     []rune{'0', '9'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 456, col: 54, offset: 14656},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 2587, col: 5, offset: 86026},
														run: (*parser).callonFileLocation71,
														expr: &seqExpr{
															pos: position{line: 2587, col: 5, offset: 86026},
															exprs: []interface{}{
																&andCodeExpr{
																	pos: position{line: 2587, col: 5, offset: 86026},
																	run: (*parser).callonFileLocation73,
																},
																&labeledExpr{
																	pos:   position{line: 2590, col: 5, offset: 86097},
																	label: "element",
																	expr: &choiceExpr{
																		pos: position{line: 2592, col: 9, offset: 86195},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2592, col: 9, offset: 86195},
																				run: (*parser).callonFileLocation76,
																				expr: &choiceExpr{
																					pos: position{line: 491, col: 27, offset: 15997},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 491, col: 27, offset: 15997},
																							run: (*parser).callonFileLocation78,
																							expr: &seqExpr{
																								pos: position{line: 491, col: 27, offset: 15997},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 491, col: 27, offset: 15997},
																										val:        "<<",
																										ignoreCase: false,
																										want:       "\"<<\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 491, col: 32, offset: 16002},
																										label: "id",
																										expr: &actionExpr{
																											pos: position{line: 2866, col: 7, offset: 94768},
																											run: (*parser).callonFileLocation82,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 2866, col: 7, offset: 94768},
																												expr: &charClassMatcher{
																													pos:        position{line: 2866, col: 7, offset: 94768},
																													val:        "[^[]<>,]",
																													chars:      []rune{'[', ']', '<', '>', ','},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 491, col: 40, offset: 16010},
																										expr: &choiceExpr{
																											pos: position{line: 2878, col: 10, offset: 95044},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2878, col: 10, offset: 95044},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2878, col: 16, offset: 95050},
																													run: (*parser).callonFileLocation88,
																													expr: &litMatcher{
																														pos:        position{line: 2878, col: 16, offset: 95050},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 491, col: 47, offset: 16017},
																										val:        ",",
																										ignoreCase: false,
																										want:       "\",\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 491, col: 51, offset: 16021},
																										label: "label",
																										expr: &oneOrMoreExpr{
																											pos: position{line: 501, col: 24, offset: 16434},
																											expr: &choiceExpr{
																												pos: position{line: 502, col: 5, offset: 16440},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 502, col: 6, offset: 16441},
																														run: (*parser).callonFileLocation94,
																														expr: &seqExpr{
																															pos: position{line: 502, col: 6, offset: 16441},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 502, col: 6, offset: 16441},
																																	val:        "[0-9\\pL]",
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&oneOrMoreExpr{
																																	pos: position{line: 502, col: 14, offset: 16449},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 502, col: 14, offset: 16449},
																																		val:        "[^\\r\\n{<>]",
																																		chars:      []rune{'\r', '\n', '{', '<', '>'},
																																		ignoreCase: false,
																																		inverted:   true,
																																	},
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 449, col: 5, offset: 14443},
																														run: (*parser).callonFileLocation99,
																														expr: &seqExpr{
																															pos: position{line: 449, col: 5, offset: 14443},
																															exprs: []interface{}{
																																&andCodeExpr{
																																	pos: position{line: 449, col: 5, offset: 14443},
																																	run: (*parser).callonFileLocation101,
																																},
																																&labeledExpr{
																																	pos:   position{line: 452, col: 5, offset: 14507},
																																	label: "element",
																																	expr: &choiceExpr{
																																		pos: position{line: 452, col: 14, offset: 14516},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 463, col: 25, offset: 14978},
																																				run: (*parser).callonFileLocation104,
																																				expr: &seqExpr{
																																					pos: position{line: 463, col: 25, offset: 14978},
																																					exprs: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 463, col: 25, offset: 14978},
																																							val:        "{counter:",
																																							ignoreCase: false,
																																							want:       "\"{counter:\"",
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 463, col: 37, offset: 14990},
																																							label: "name",
																																							expr: &actionExpr{
																																								pos: position{line: 118, col: 18, offset: 3399},
																																								run: (*parser).callonFileLocation108,
																																								expr: &seqExpr{
																																									pos: position{line: 118, col: 18, offset: 3399},
																																									exprs: []interface{}{
																																										&charClassMatcher{
																																											pos:        position{line: 118, col: 18, offset: 3399},
																																											val:        "[_0-9\\pL]",
																																											chars:      []rune{'_'},
																																											ranges:     []rune{'0', '9'},
																																											classes:    []*unicode.RangeTable{rangeTable("L")},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&zeroOrMoreExpr{
																																											pos: position{line: 118, col: 28, offset: 3409},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 118, col: 29, offset: 3410},
																																												val:        "[-0-9\\pL]",
																																												chars:      []rune{'-'},
																																												ranges:     []rune{'0', '9'},
																																												classes:    []*unicode.RangeTable{rangeTable("L")},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 463, col: 56, offset: 15009},
																																							label: "start",
																																							expr: &zeroOrOneExpr{
																																								pos: position{line: 463, col: 62, offset: 15015},
																																								expr: &actionExpr{
																																									pos: position{line: 471, col: 17, offset: 15278},
																																									run: (*parser).callonFileLocation115,
																																									expr: &seqExpr{
																																										pos: position{line: 471, col: 17, offset: 15278},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 471, col: 17, offset: 15278},
																																												val:        ":",
																																												ignoreCase: false,
																																												want:       "\":\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 471, col: 21, offset: 15282},
																																												label: "start",
																																												expr: &choiceExpr{
																																													pos: position{line: 471, col: 28, offset: 15289},
																																													alternatives: []interface{}{
																																														&actionExpr{
																																															pos: position{line: 471, col: 28, offset: 15289},
																																															run: (*parser).callonFileLocation120,
																																															expr: &charClassMatcher{
																																																pos:        position{line: 471, col: 28, offset: 15289},
																																																val:        "[A-Za-z]",
																																																ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																														},
																																														&actionExpr{
																																															pos: position{line: 473, col: 9, offset: 15343},
																																															run: (*parser).callonFileLocation122,
																																															expr: &oneOrMoreExpr{
																																																pos: position{line: 473, col: 9, offset: 15343},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 473, col: 9, offset: 15343},
																																																	val:        "[0-9]",
																																																	ranges:     []rune{'0', '9'},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																						&litMatcher{
																																							pos:        position{line: 463, col: 78, offset: 15031},
																																							val:        "}",
																																							ignoreCase: false,
																																							want:       "\"}\"",
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 467, col: 25, offset: 15133},
																																				run: (*parser).callonFileLocation126,
																																				expr: &seqExpr{
																																					pos: position{line: 467, col: 25, offset: 15133},
																																					exprs: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 467, col: 25, offset: 15133},
																																							val:        "{counter2:",
																																							ignoreCase: false,
																																							want:       "\"{counter2:\"",
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 467, col: 38, offset: 15146},
																																							label: "name",
																																							expr: &actionExpr{
																																								pos: position{line: 118, col: 18, offset: 3399},
																																								run: (*parser).callonFileLocation130,
																																								expr: &seqExpr{
																																									pos: position{line: 118, col: 18, offset: 3399},
																																									exprs: []interface{}{
																																										&charClassMatcher{
																																											pos:        position{line: 118, col: 18, offset: 3399},
																																											val:        "[_0-9\\pL]",
																																											chars:      []rune{'_'},
																																											ranges:     []rune{'0', '9'},
																																											classes:    []*unicode.RangeTable{rangeTable("L")},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&zeroOrMoreExpr{
																																											pos: position{line: 118, col: 28, offset: 3409},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 118, col: 29, offset: 3410},
																																												val:        "[-0-9\\pL]",
																																												chars:      []rune{'-'},
																																												ranges:     []rune{'0', '9'},
																																												classes:    []*unicode.RangeTable{rangeTable("L")},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 467, col: 57, offset: 15165},
																																							label: "start",
																																							expr: &zeroOrOneExpr{
																																								pos: position{line: 467, col: 63, offset: 15171},
																																								expr: &actionExpr{
																																									pos: position{line: 471, col: 17, offset: 15278},
																																									run: (*parser).callonFileLocation137,
																																									expr: &seqExpr{
																																										pos: position{line: 471, col: 17, offset: 15278},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 471, col: 17, offset: 15278},
																																												val:        ":",
																																												ignoreCase: false,
																																												want:       "\":\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 471, col: 21, offset: 15282},
																																												label: "start",
																																												expr: &choiceExpr{
																																													pos: position{line: 471, col: 28, offset: 15289},
																																													alternatives: []interface{}{
																																														&actionExpr{
																																															pos: position{line: 471, col: 28, offset: 15289},
																																															run: (*parser).callonFileLocation142,
																																															expr: &charClassMatcher{
																																																pos:        position{line: 471, col: 28, offset: 15289},
																																																val:        "[A-Za-z]",
																																																ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																														},
																																														&actionExpr{
																																															pos: position{line: 473, col: 9, offset: 15343},
																																															run: (*parser).callonFileLocation144,
																																															expr: &oneOrMoreExpr{
																																																pos: position{line: 473, col: 9, offset: 15343},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 473, col: 9, offset: 15343},
																																																	val:        "[0-9]",
																																																	ranges:     []rune{'0', '9'},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																						&litMatcher{
																																							pos:        position{line: 467, col: 79, offset: 15187},
																																							val:        "}",
																																							ignoreCase: false,
																																							want:       "\"}\"",
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 456, col: 31, offset: 14633},
																																				run: (*parser).callonFileLocation148,
																																				expr: &seqExpr{
																																					pos: position{line: 456, col: 31, offset: 14633},
																																					exprs: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 456, col: 31, offset: 14633},
																																							val:        "{",
																																							ignoreCase: false,
																																							want:       "\"{\"",
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 456, col: 35, offset: 14637},
																																							label: "name",
																																							expr: &actionExpr{
																																								pos: position{line: 118, col: 18, offset: 3399},
																																								run: (*parser).callonFileLocation152,
																																								expr: &seqExpr{
																																									pos: position{line: 118, col: 18, offset: 3399},
																																									exprs: []interface{}{
																																										&charClassMatcher{
																																											pos:        position{line: 118, col: 18, offset: 3399},
																																											val:        "[_0-9\\pL]",
																																											chars:      []rune{'_'},
																																											ranges:     []rune{'0', '9'},
																																											classes:    []*unicode.RangeTable{rangeTable("L")},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&zeroOrMoreExpr{
																																											pos: position{line: 118, col: 28, offset: 3409},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 118, col: 29, offset: 3410},
																																												val:        "[-0-9\\pL]",
																																												chars:      []rune{'-'},
																																												ranges:     []rune{'0', '9'},
																																												classes:    []*unicode.RangeTable{rangeTable("L")},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																						&litMatcher{
																																							pos:        position{line: 456, col: 54, offset: 14656},
																																							val:        "}",
																																							ignoreCase: false,
																																							want:       "\"}\"",
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 506, col: 8, offset: 16673},
																														run: (*parser).callonFileLocation158,
																														expr: &litMatcher{
																															pos:        position{line: 506, col: 8, offset: 16673},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																													},
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 491, col: 79, offset: 16049},
																										val:        ">>",
																										ignoreCase: false,
																										want:       "\">>\"",
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 493, col: 9, offset: 16122},
																							run: (*parser).callonFileLocation161,
																							expr: &seqExpr{
																								pos: position{line: 493, col: 9, offset: 16122},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 493, col: 9, offset: 16122},
																										val:        "<<",
																										ignoreCase: false,
																										want:       "\"<<\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 493, col: 14, offset: 16127},
																										label: "id",
																										expr: &actionExpr{
																											pos: position{line: 2866, col: 7, offset: 94768},
																											run: (*parser).callonFileLocation165,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 2866, col: 7, offset: 94768},
																												expr: &charClassMatcher{
																													pos:        position{line: 2866, col: 7, offset: 94768},
																													val:        "[^[]<>,]",
																													chars:      []rune{'[', ']', '<', '>', ','},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 493, col: 22, offset: 16135},
																										val:        ">>",
																										ignoreCase: false,
																										want:       "\">>\"",
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2595, col: 11, offset: 86299},
																				run: (*parser).callonFileLocation169,
																				expr: &charClassMatcher{
																					pos:        position{line: 2595, col: 12, offset: 86300},
																					val:        "[<>&]",
																					chars:      []rune{'<', '>', '&'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 2858, col: 7, offset: 94556},
														run: (*parser).callonFileLocation171,
														expr: &litMatcher{
															pos:        position{line: 2858, col: 7, offset: 94556},
															val:        "{",
															ignoreCase: false,
															want:       "\"{\"",
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 947, col: 23, offset: 29896},
									run: (*parser).callonFileLocation173,
									expr: &seqExpr{
										pos: position{line: 947, col: 23, offset: 29896},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 945, col: 32, offset: 29864},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
											&labeledExpr{
												pos:   position{line: 947, col: 51, offset: 29924},
												label: "ref",
												expr: &actionExpr{
													pos: position{line: 947, col: 56, offset: 29929},
													run: (*parser).callonFileLocation177,
													expr: &oneOrMoreExpr{
														pos: position{line: 947, col: 56, offset: 29929},
														expr: &charClassMatcher{
															pos:        position{line: 947, col: 56, offset: 29929},
															val:        "[0-9]",
															ranges:     []rune{'0', '9'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 945, col: 32, offset: 29864},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
	},
}

func (c *current) onDocumentFragment10() (bool, error) {
	return c.isFrontMatterAllowed(), nil

}

func (p *parser) callonDocumentFragment10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment10()
}

func (c *current) onDocumentFragment18() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment18()
}

func (c *current) onDocumentFragment25() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragment25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment25()
}

func (c *current) onDocumentFragment39() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment39()
}

func (c *current) onDocumentFragment46() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragment46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment46()
}

func (c *current) onDocumentFragment29() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment29()
}

func (c *current) onDocumentFragment53() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment53()
}

func (c *current) onDocumentFragment60() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragment60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment60()
}

func (c *current) onDocumentFragment12(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonDocumentFragment12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment12(stack["content"])
}

func (c *current) onDocumentFragment8(frontmatter interface{}) (interface{}, error) {
	c.setFrontMatterAllowed(false) // not allowed anymore
	return frontmatter, nil

}

func (p *parser) callonDocumentFragment8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment8(stack["frontmatter"])
}

func (c *current) onDocumentFragment64() (bool, error) {
	return c.isDocumentHeaderAllowed(), nil

}

func (p *parser) callonDocumentFragment64() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment64()
}

func (c *current) onDocumentFragment74() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment74()
}

func (c *current) onDocumentFragment81() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragment81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment81()
}

func (c *current) onDocumentFragment66() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment66()
}

func (c *current) onDocumentFragment87() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment87()
}

func (c *current) onDocumentFragment91() (interface{}, error) {

	return []interface{}{
		types.RawLine(c.text),
	}, nil
}

func (p *parser) callonDocumentFragment91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment91()
}

func (c *current) onDocumentFragment99() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragment99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment99()
}

func (c *current) onDocumentFragment84(title interface{}) (interface{}, error) {
	return title, nil

}

func (p *parser) callonDocumentFragment84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment84(stack["title"])
}

func (c *current) onDocumentFragment114() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment114()
}

func (c *current) onDocumentFragment121() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragment121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment121()
}

func (c *current) onDocumentFragment106() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment106()
}

func (c *current) onDocumentFragment131() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment131()
}

func (c *current) onDocumentFragment139() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragment139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment139()
}

func (c *current) onDocumentFragment125(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonDocumentFragment125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment125(stack["content"])
}

func (c *current) onDocumentFragment143() (bool, error) {
	// only accept if not already in a delimited block of this kind
	return !c.isWithinDelimitedBlockOfKind(types.Comment), nil

}

func (p *parser) callonDocumentFragment143() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment143()
}

func (c *current) onDocumentFragment148() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment148()
}

func (c *current) onDocumentFragment155() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragment155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment155()
}

func (c *current) onDocumentFragment157() (bool, error) {
	// only accept if the delimiter matches the current delimited block or if no kind is registered yet
	c.setWithinDelimitedBlockOfKind(types.Comment)
	return true, nil

}

func (p *parser) callonDocumentFragment157() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment157()
}

func (c *current) onDocumentFragment169() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment169()
}

func (c *current) onDocumentFragment176() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragment176() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment176()
}

func (c *current) onDocumentFragment187() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment187() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment187()
}

func (c *current) onDocumentFragment195() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragment195() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment195()
}

func (c *current) onDocumentFragment181(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment181(stack["content"])
}

func (c *current) onDocumentFragment160(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment160(stack["line"])
}

func (c *current) onDocumentFragment204() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment204() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment204()
}

func (c *current) onDocumentFragment211() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragment211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment211()
}

func (c *current) onDocumentFragment141(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}))

}

func (p *parser) callonDocumentFragment141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment141(stack["content"])
}

func (c *current) onDocumentFragment221() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment221() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment221()
}

func (c *current) onDocumentFragment238() (interface{}, error) {
	// no space allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment238() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment238()
}

func (c *current) onDocumentFragment244() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment244() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment244()
}

func (c *current) onDocumentFragment248() (interface{}, error) {
	// no space allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment248() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment248()
}

func (c *current) onDocumentFragment254() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment254() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment254()
}

func (c *current) onDocumentFragment258() (interface{}, error) {
	// spaces allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment258() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment258()
}

func (c *current) onDocumentFragment264() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment264() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment264()
}

func (c *current) onDocumentFragment235(part1, part2, part3 interface{}) (interface{}, error) {
	return types.NewDocumentAuthorFullName(part1.(string), part2, part3)

}

func (p *parser) callonDocumentFragment235() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment235(stack["part1"], stack["part2"], stack["part3"])
}

func (c *current) onDocumentFragment275() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment275() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment275()
}

func (c *current) onDocumentFragment268(email interface{}) (interface{}, error) {
	return email, nil

}

func (p *parser) callonDocumentFragment268() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment268(stack["email"])
}

func (c *current) onDocumentFragment282() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment282() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment282()
}

func (c *current) onDocumentFragment289() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment289() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment289()
}

func (c *current) onDocumentFragment291(fullName, email interface{}) (bool, error) {
	// at least 1 of [fullName, email] must be defined
	return fullName != nil || email != nil, nil

}

func (p *parser) callonDocumentFragment291() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment291(stack["fullName"], stack["email"])
}

func (c *current) onDocumentFragment231(fullName, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullName, email)

}

func (p *parser) callonDocumentFragment231() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment231(stack["fullName"], stack["email"])
}

func (c *current) onDocumentFragment225(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{})...)
}

func (p *parser) callonDocumentFragment225() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment225(stack["authors"])
}

func (c *current) onDocumentFragment298() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment298() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment298()
}

func (c *current) onDocumentFragment308() (interface{}, error) {
	// no space allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment308() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment308()
}

func (c *current) onDocumentFragment314() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment314() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment314()
}

func (c *current) onDocumentFragment318() (interface{}, error) {
	// no space allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment318() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment318()
}

func (c *current) onDocumentFragment324() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment324() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment324()
}

func (c *current) onDocumentFragment328() (interface{}, error) {
	// spaces allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment328() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment328()
}

func (c *current) onDocumentFragment334() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment334() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment334()
}

func (c *current) onDocumentFragment305(part1, part2, part3 interface{}) (interface{}, error) {
	return types.NewDocumentAuthorFullName(part1.(string), part2, part3)

}

func (p *parser) callonDocumentFragment305() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment305(stack["part1"], stack["part2"], stack["part3"])
}

func (c *current) onDocumentFragment345() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment345() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment345()
}

func (c *current) onDocumentFragment338(email interface{}) (interface{}, error) {
	return email, nil

}

func (p *parser) callonDocumentFragment338() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment338(stack["email"])
}

func (c *current) onDocumentFragment352() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment352() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment352()
}

func (c *current) onDocumentFragment359() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment359() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment359()
}

func (c *current) onDocumentFragment361(fullName, email interface{}) (bool, error) {
	// at least 1 of [fullName, email] must be defined
	return fullName != nil || email != nil, nil

}

func (p *parser) callonDocumentFragment361() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment361(stack["fullName"], stack["email"])
}

func (c *current) onDocumentFragment301(fullName, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullName, email)

}

func (p *parser) callonDocumentFragment301() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment301(stack["fullName"], stack["email"])
}

func (c *current) onDocumentFragment292(author interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(author)
}

func (p *parser) callonDocumentFragment292() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment292(stack["author"])
}

func (c *current) onDocumentFragment367() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragment367() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment367()
}

func (c *current) onDocumentFragment216(authors interface{}) (interface{}, error) {
	return authors, nil
}

func (p *parser) callonDocumentFragment216() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment216(stack["authors"])
}

func (c *current) onDocumentFragment377() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment377() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment377()
}

func (c *current) onDocumentFragment385() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragment385() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment385()
}

func (c *current) onDocumentFragment371(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonDocumentFragment371() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment371(stack["content"])
}

func (c *current) onDocumentFragment389() (bool, error) {
	// only accept if not already in a delimited block of this kind
	return !c.isWithinDelimitedBlockOfKind(types.Comment), nil

}

func (p *parser) callonDocumentFragment389() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment389()
}

func (c *current) onDocumentFragment394() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment394() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment394()
}

func (c *current) onDocumentFragment401() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragment401() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment401()
}

func (c *current) onDocumentFragment403() (bool, error) {
	// only accept if the delimiter matches the current delimited block or if no kind is registered yet
	c.setWithinDelimitedBlockOfKind(types.Comment)
	return true, nil

}

func (p *parser) callonDocumentFragment403() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment403()
}

func (c *current) onDocumentFragment415() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment415() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment415()
}

func (c *current) onDocumentFragment422() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragment422() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment422()
}

func (c *current) onDocumentFragment433() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment433() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment433()
}

func (c *current) onDocumentFragment441() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragment441() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment441()
}

func (c *current) onDocumentFragment427(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment427() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment427(stack["content"])
}

func (c *current) onDocumentFragment406(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment406() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment406(stack["line"])
}

func (c *current) onDocumentFragment450() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment450() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment450()
}

func (c *current) onDocumentFragment457() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragment457() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment457()
}

func (c *current) onDocumentFragment387(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}))

}

func (p *parser) callonDocumentFragment387() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment387(stack["content"])
}

func (c *current) onDocumentFragment468() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment468() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment468()
}

func (c *current) onDocumentFragment481() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment481() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment481()
}

func (c *current) onDocumentFragment478() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment478() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment478()
}

func (c *current) onDocumentFragment489() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment489() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment489()
}

func (c *current) onDocumentFragment496() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment496() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment496()
}

func (c *current) onDocumentFragment485() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment485() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment485()
}

func (c *current) onDocumentFragment504() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment504() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment504()
}

func (c *current) onDocumentFragment511() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment511() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment511()
}

func (c *current) onDocumentFragment474(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentFragment474() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment474(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentFragment517() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment517() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment517()
}

func (c *current) onDocumentFragment524() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment524() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment524()
}

func (c *current) onDocumentFragment514(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentFragment514() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment514(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentFragment532() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragment532() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment532()
}

func (c *current) onDocumentFragment463(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentFragment463() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment463(stack["revision"])
}

func (c *current) onDocumentFragment103(authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentInformation(authors.(types.DocumentAuthors), revision)

}

func (p *parser) callonDocumentFragment103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment103(stack["authors"], stack["revision"])
}

func (c *current) onDocumentFragment541() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment541() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment541()
}

func (c *current) onDocumentFragment551() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment551() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment551()
}

func (c *current) onDocumentFragment564() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragment564() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment564()
}

func (c *current) onDocumentFragment568() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDocumentFragment568() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment568()
}

func (c *current) onDocumentFragment573() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonDocumentFragment573() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment573()
}

func (c *current) onDocumentFragment580() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment580() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment580()
}

func (c *current) onDocumentFragment592() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment592() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment592()
}

func (c *current) onDocumentFragment594() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDocumentFragment594() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment594()
}

func (c *current) onDocumentFragment587(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDocumentFragment587() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment587(stack["start"])
}

func (c *current) onDocumentFragment576(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonDocumentFragment576() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment576(stack["name"], stack["start"])
}

func (c *current) onDocumentFragment602() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment602() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment602()
}

func (c *current) onDocumentFragment614() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment614() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment614()
}

func (c *current) onDocumentFragment616() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDocumentFragment616() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment616()
}

func (c *current) onDocumentFragment609(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDocumentFragment609() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment609(stack["start"])
}

func (c *current) onDocumentFragment598(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonDocumentFragment598() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment598(stack["name"], stack["start"])
}

func (c *current) onDocumentFragment624() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment624() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment624()
}

func (c *current) onDocumentFragment620(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonDocumentFragment620() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment620(stack["name"])
}

func (c *current) onDocumentFragment571(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDocumentFragment571() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment571(stack["element"])
}

func (c *current) onDocumentFragment630() (interface{}, error) {
	// standalone '{'
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDocumentFragment630() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment630()
}

func (c *current) onDocumentFragment556(element interface{}) (interface{}, error) {

	return element, nil

}

func (p *parser) callonDocumentFragment556() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment556(stack["element"])
}

func (c *current) onDocumentFragment549(elements interface{}) (interface{}, error) {
	return types.Reduce(elements.([]interface{}), strings.TrimSpace), nil

}

func (p *parser) callonDocumentFragment549() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment549(stack["elements"])
}

func (c *current) onDocumentFragment637() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragment637() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment637()
}

func (c *current) onDocumentFragment537(name, value interface{}) (interface{}, error) {
	d := types.NewAttributeDeclaration(name.(string), types.Reduce(value, strings.TrimSpace))
	return d, nil

}

func (p *parser) callonDocumentFragment537() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment537(stack["name"], stack["value"])
}

func (c *current) onDocumentFragment643() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment643() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment643()
}

func (c *current) onDocumentFragment652() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment652() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment652()
}

func (c *current) onDocumentFragment659() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragment659() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment659()
}

func (c *current) onDocumentFragment639(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonDocumentFragment639() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment639(stack["name"])
}

func (c *current) onDocumentFragment665() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment665() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment665()
}

func (c *current) onDocumentFragment674() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment674() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment674()
}

func (c *current) onDocumentFragment681() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragment681() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment681()
}

func (c *current) onDocumentFragment661(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonDocumentFragment661() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment661(stack["name"])
}

func (c *current) onDocumentFragment62(title, info, extraAttrs interface{}) (interface{}, error) {
	c.setFrontMatterAllowed(false)    // not allowed anymore
	c.setDocumentHeaderAllowed(false) // not allowed anymore
	return types.NewDocumentHeader(title.([]interface{}), info, extraAttrs.([]interface{}))

}

func (p *parser) callonDocumentFragment62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment62(stack["title"], stack["info"], stack["extraAttrs"])
}

func (c *current) onDocumentFragment691() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment691() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment691()
}

func (c *current) onDocumentFragment698() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragment698() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment698()
}

func (c *current) onDocumentFragment683() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment683() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment683()
}

func (c *current) onDocumentFragment704() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment704() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment704()
}

func (c *current) onDocumentFragment714() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment714() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment714()
}

func (c *current) onDocumentFragment727() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragment727() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment727()
}

func (c *current) onDocumentFragment731() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDocumentFragment731() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment731()
}

func (c *current) onDocumentFragment736() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonDocumentFragment736() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment736()
}

func (c *current) onDocumentFragment743() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment743() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment743()
}

func (c *current) onDocumentFragment755() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment755() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment755()
}

func (c *current) onDocumentFragment757() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDocumentFragment757() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment757()
}

func (c *current) onDocumentFragment750(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDocumentFragment750() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment750(stack["start"])
}

func (c *current) onDocumentFragment739(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonDocumentFragment739() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment739(stack["name"], stack["start"])
}

func (c *current) onDocumentFragment765() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment765() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment765()
}

func (c *current) onDocumentFragment777() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment777() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment777()
}

func (c *current) onDocumentFragment779() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDocumentFragment779() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment779()
}

func (c *current) onDocumentFragment772(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDocumentFragment772() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment772(stack["start"])
}

func (c *current) onDocumentFragment761(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonDocumentFragment761() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment761(stack["name"], stack["start"])
}

func (c *current) onDocumentFragment787() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment787() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment787()
}

func (c *current) onDocumentFragment783(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonDocumentFragment783() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment783(stack["name"])
}

func (c *current) onDocumentFragment734(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDocumentFragment734() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment734(stack["element"])
}

func (c *current) onDocumentFragment793() (interface{}, error) {
	// standalone '{'
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDocumentFragment793() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment793()
}

func (c *current) onDocumentFragment719(element interface{}) (interface{}, error) {

	return element, nil

}

func (p *parser) callonDocumentFragment719() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment719(stack["element"])
}

func (c *current) onDocumentFragment712(elements interface{}) (interface{}, error) {
	return types.Reduce(elements.([]interface{}), strings.TrimSpace), nil

}

func (p *parser) callonDocumentFragment712() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment712(stack["elements"])
}

func (c *current) onDocumentFragment800() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragment800() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment800()
}

func (c *current) onDocumentFragment700(name, value interface{}) (interface{}, error) {
	d := types.NewAttributeDeclaration(name.(string), types.Reduce(value, strings.TrimSpace))
	return d, nil

}

func (p *parser) callonDocumentFragment700() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment700(stack["name"], stack["value"])
}

func (c *current) onDocumentFragment806() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment806() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment806()
}

func (c *current) onDocumentFragment815() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment815() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment815()
}

func (c *current) onDocumentFragment822() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragment822() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment822()
}

func (c *current) onDocumentFragment802(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonDocumentFragment802() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment802(stack["name"])
}

func (c *current) onDocumentFragment828() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment828() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment828()
}

func (c *current) onDocumentFragment837() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment837() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment837()
}

func (c *current) onDocumentFragment844() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragment844() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment844()
}

func (c *current) onDocumentFragment824(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonDocumentFragment824() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment824(stack["name"])
}

func (c *current) onDocumentFragment849() (bool, error) {

	return !c.isWithinDelimitedBlock(), nil

}

func (p *parser) callonDocumentFragment849() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment849()
}

func (c *current) onDocumentFragment851() (interface{}, error) {

	// `=` is level 0, `==` is level 1, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonDocumentFragment851() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment851()
}

func (c *current) onDocumentFragment854(level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonDocumentFragment854() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment854(stack["level"])
}

func (c *current) onDocumentFragment855(level interface{}) (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment855() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment855(stack["level"])
}

func (c *current) onDocumentFragment859() (interface{}, error) {

	return []interface{}{
		types.RawLine(c.text),
	}, nil
}

func (p *parser) callonDocumentFragment859() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment859()
}

func (c *current) onDocumentFragment867() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragment867() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment867()
}

func (c *current) onDocumentFragment847(level, title interface{}) (interface{}, error) {
	return types.NewRawSection(level.(int), title.([]interface{}))

}

func (p *parser) callonDocumentFragment847() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment847(stack["level"], stack["title"])
}

func (c *current) onDocumentFragment869() (interface{}, error) {
	// TODO: Space* before EOF
	return types.NewThematicBreak()

}

func (p *parser) callonDocumentFragment869() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment869()
}

func (c *current) onDocumentFragment889() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment889() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment889()
}

func (c *current) onDocumentFragment896() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragment896() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment896()
}

func (c *current) onDocumentFragment910() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment910() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment910()
}

func (c *current) onDocumentFragment916() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment916() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment916()
}

func (c *current) onDocumentFragment914(content interface{}) (interface{}, error) {
	return types.NewRawContent(content.(string))

}

func (p *parser) callonDocumentFragment914() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment914(stack["content"])
}

func (c *current) onDocumentFragment904(content interface{}) (interface{}, error) {
	return types.NewTableCell(content.(types.RawContent))

}

func (p *parser) callonDocumentFragment904() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment904(stack["content"])
}

func (c *current) onDocumentFragment924() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragment924() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment924()
}

func (c *current) onDocumentFragment935() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment935() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment935()
}

func (c *current) onDocumentFragment942() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragment942() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment942()
}

func (c *current) onDocumentFragment927() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment927() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment927()
}

func (c *current) onDocumentFragment900(cells interface{}) (interface{}, error) {
	return types.NewTableRow(cells.([]interface{}))

}

func (p *parser) callonDocumentFragment900() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment900(stack["cells"])
}

func (c *current) onDocumentFragment956() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment956() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment956()
}

func (c *current) onDocumentFragment963() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragment963() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment963()
}

func (c *current) onDocumentFragment981() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment981() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment981()
}

func (c *current) onDocumentFragment988() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragment988() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment988()
}

func (c *current) onDocumentFragment1001() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1001() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1001()
}

func (c *current) onDocumentFragment1008() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragment1008() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1008()
}

func (c *current) onDocumentFragment993() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment993() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment993()
}

func (c *current) onDocumentFragment1014() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1014() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1014()
}

func (c *current) onDocumentFragment1020() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1020() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1020()
}

func (c *current) onDocumentFragment1018(content interface{}) (interface{}, error) {
	return types.NewRawContent(content.(string))

}

func (p *parser) callonDocumentFragment1018() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1018(stack["content"])
}

func (c *current) onDocumentFragment972(content interface{}) (interface{}, error) {
	return types.NewTableCell(content.(types.RawContent))

}

func (p *parser) callonDocumentFragment972() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment972(stack["content"])
}

func (c *current) onDocumentFragment1028() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragment1028() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1028()
}

func (c *current) onDocumentFragment969(cell interface{}) (interface{}, error) {
	return cell, nil

}

func (p *parser) callonDocumentFragment969() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment969(stack["cell"])
}

func (c *current) onDocumentFragment1040() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1040() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1040()
}

func (c *current) onDocumentFragment1047() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragment1047() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1047()
}

func (c *current) onDocumentFragment1032() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment1032() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1032()
}

func (c *current) onDocumentFragment1056() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1056() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1056()
}

func (c *current) onDocumentFragment1063() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragment1063() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1063()
}

func (c *current) onDocumentFragment947(cells interface{}) (interface{}, error) {
	return types.NewTableRow(cells.([]interface{}))

}

func (p *parser) callonDocumentFragment947() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment947(stack["cells"])
}

func (c *current) onDocumentFragment1076() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1076() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1076()
}

func (c *current) onDocumentFragment1083() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragment1083() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1083()
}

func (c *current) onDocumentFragment1098() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1098() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1098()
}

func (c *current) onDocumentFragment1105() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragment1105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1105()
}

func (c *current) onDocumentFragment1118() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1118()
}

func (c *current) onDocumentFragment1125() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragment1125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1125()
}

func (c *current) onDocumentFragment1110() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment1110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1110()
}

func (c *current) onDocumentFragment1131() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1131()
}

func (c *current) onDocumentFragment1137() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1137()
}

func (c *current) onDocumentFragment1135(content interface{}) (interface{}, error) {
	return types.NewRawContent(content.(string))

}

func (p *parser) callonDocumentFragment1135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1135(stack["content"])
}

func (c *current) onDocumentFragment1089(content interface{}) (interface{}, error) {
	return types.NewTableCell(content.(types.RawContent))

}

func (p *parser) callonDocumentFragment1089() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1089(stack["content"])
}

func (c *current) onDocumentFragment1145() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragment1145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1145()
}

func (c *current) onDocumentFragment1156() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1156()
}

func (c *current) onDocumentFragment1163() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragment1163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1163()
}

func (c *current) onDocumentFragment1148() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment1148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1148()
}

func (c *current) onDocumentFragment1067(cells interface{}) (interface{}, error) {
	return types.NewTableRow(cells.([]interface{}))

}

func (p *parser) callonDocumentFragment1067() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1067(stack["cells"])
}

func (c *current) onDocumentFragment1171() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1171()
}

func (c *current) onDocumentFragment1178() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragment1178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1178()
}

func (c *current) onDocumentFragment883(header, rows interface{}) (interface{}, error) {
	return types.NewTable(header, rows.([]interface{}))

}

func (p *parser) callonDocumentFragment883() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment883(stack["header"], stack["rows"])
}

func (c *current) onDocumentFragment1188() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1188()
}

func (c *current) onDocumentFragment1196() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragment1196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1196()
}

func (c *current) onDocumentFragment1182(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonDocumentFragment1182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1182(stack["content"])
}

func (c *current) onDocumentFragment1202() (interface{}, error) {
	return types.Tip, nil
}

func (p *parser) callonDocumentFragment1202() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1202()
}

func (c *current) onDocumentFragment1204() (interface{}, error) {
	return types.Note, nil
}

func (p *parser) callonDocumentFragment1204() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1204()
}

func (c *current) onDocumentFragment1206() (interface{}, error) {
	return types.Important, nil
}

func (p *parser) callonDocumentFragment1206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1206()
}

func (c *current) onDocumentFragment1208() (interface{}, error) {
	return types.Warning, nil
}

func (p *parser) callonDocumentFragment1208() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1208()
}

func (c *current) onDocumentFragment1210() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonDocumentFragment1210() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1210()
}

func (c *current) onDocumentFragment1217() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1217() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1217()
}

func (c *current) onDocumentFragment1220(content interface{}) (bool, error) {
	return len(strings.TrimSpace(string(c.text))) > 0, nil

}

func (p *parser) callonDocumentFragment1220() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1220(stack["content"])
}

func (c *current) onDocumentFragment1226() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragment1226() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1226()
}

func (c *current) onDocumentFragment1214(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment1214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1214(stack["content"])
}

func (c *current) onDocumentFragment1238() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1238() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1238()
}

func (c *current) onDocumentFragment1243() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragment1243() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1243()
}

func (c *current) onDocumentFragment1253() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1253() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1253()
}

func (c *current) onDocumentFragment1261() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragment1261() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1261()
}

func (c *current) onDocumentFragment1247(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonDocumentFragment1247() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1247(stack["content"])
}

func (c *current) onDocumentFragment1266() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1266() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1266()
}

func (c *current) onDocumentFragment1269(content interface{}) (bool, error) {
	return len(strings.TrimSpace(string(c.text))) > 0, nil

}

func (p *parser) callonDocumentFragment1269() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1269(stack["content"])
}

func (c *current) onDocumentFragment1275() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragment1275() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1275()
}

func (c *current) onDocumentFragment1263(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment1263() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1263(stack["content"])
}

func (c *current) onDocumentFragment1230(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment1230() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1230(stack["line"])
}

func (c *current) onDocumentFragment1198(kind, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(kind.(string), append([]interface{}{firstLine}, otherLines.([]interface{})...))

}

func (p *parser) callonDocumentFragment1198() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1198(stack["kind"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onDocumentFragment1285() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1285() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1285()
}

func (c *current) onDocumentFragment1283() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1283() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1283()
}

func (c *current) onDocumentFragment1290(content interface{}) (bool, error) {
	return len(strings.TrimSpace(string(c.text))) > 0, nil

}

func (p *parser) callonDocumentFragment1290() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1290(stack["content"])
}

func (c *current) onDocumentFragment1296() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragment1296() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1296()
}

func (c *current) onDocumentFragment1280(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment1280() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1280(stack["content"])
}

func (c *current) onDocumentFragment1307() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1307() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1307()
}

func (c *current) onDocumentFragment1315() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragment1315() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1315()
}

func (c *current) onDocumentFragment1301(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonDocumentFragment1301() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1301(stack["content"])
}

func (c *current) onDocumentFragment1320() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1320() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1320()
}

func (c *current) onDocumentFragment1323(content interface{}) (bool, error) {
	return len(strings.TrimSpace(string(c.text))) > 0, nil

}

func (p *parser) callonDocumentFragment1323() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1323(stack["content"])
}

func (c *current) onDocumentFragment1329() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragment1329() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1329()
}

func (c *current) onDocumentFragment1317(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment1317() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1317(stack["content"])
}

func (c *current) onDocumentFragment1277(firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewLiteralParagraph(types.LiteralBlockWithSpacesOnFirstLine, append([]interface{}{firstLine}, otherLines.([]interface{})...))

}

func (p *parser) callonDocumentFragment1277() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1277(stack["firstLine"], stack["otherLines"])
}

func (c *current) onDocumentFragment1338() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1338() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1338()
}

func (c *current) onDocumentFragment1341(content interface{}) (bool, error) {
	return len(strings.TrimSpace(string(c.text))) > 0, nil

}

func (p *parser) callonDocumentFragment1341() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1341(stack["content"])
}

func (c *current) onDocumentFragment1347() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragment1347() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1347()
}

func (c *current) onDocumentFragment1335(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment1335() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1335(stack["content"])
}

func (c *current) onDocumentFragment1362() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1362() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1362()
}

func (c *current) onDocumentFragment1367() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragment1367() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1367()
}

func (c *current) onDocumentFragment1377() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1377() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1377()
}

func (c *current) onDocumentFragment1385() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragment1385() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1385()
}

func (c *current) onDocumentFragment1371(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonDocumentFragment1371() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1371(stack["content"])
}

func (c *current) onDocumentFragment1390() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1390() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1390()
}

func (c *current) onDocumentFragment1393(content interface{}) (bool, error) {
	return len(strings.TrimSpace(string(c.text))) > 0, nil

}

func (p *parser) callonDocumentFragment1393() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1393(stack["content"])
}

func (c *current) onDocumentFragment1399() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragment1399() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1399()
}

func (c *current) onDocumentFragment1387(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment1387() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1387(stack["content"])
}

func (c *current) onDocumentFragment1351(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment1351() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1351(stack["line"])
}

func (c *current) onDocumentFragment1332(firstLine, otherLines interface{}) (interface{}, error) {
	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...)...)

}

func (p *parser) callonDocumentFragment1332() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1332(stack["firstLine"], stack["otherLines"])
}

func (c *current) onDocumentFragment1(attributes, element interface{}) (interface{}, error) {
	c.setFrontMatterAllowed(false)    // not allowed anymore
	c.setDocumentHeaderAllowed(false) // not allowed anymore

	if element, ok := element.(types.BlockWithAttributes); ok && attributes != nil {
		element.AddAttributes(attributes.(types.Attributes))
	}
	return element, nil

}

func (p *parser) callonDocumentFragment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1(stack["attributes"], stack["element"])
}

func (c *current) onDocumentFragmentWithinVerbatimBlock13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragmentWithinVerbatimBlock13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragmentWithinVerbatimBlock13()
}

func (c *current) onDocumentFragmentWithinVerbatimBlock21() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentFragmentWithinVerbatimBlock21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragmentWithinVerbatimBlock21()
}

func (c *current) onDocumentFragmentWithinVerbatimBlock7(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragmentWithinVerbatimBlock7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragmentWithinVerbatimBlock7(stack["content"])
}

func (c *current) onDocumentFragmentWithinVerbatimBlock1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonDocumentFragmentWithinVerbatimBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragmentWithinVerbatimBlock1(stack["elements"])
}

func (c *current) onDelimitedBlockElements10() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDelimitedBlockElements10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlockElements10()
}

func (c *current) onDelimitedBlockElements6(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonDelimitedBlockElements6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlockElements6(stack["ref"])
}

func (c *current) onDelimitedBlockElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonDelimitedBlockElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlockElements1(stack["elements"])
}

func (c *current) onBlockAttributes16() (interface{}, error) {
	// spaces, commas and dots are allowed in this syntax
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonBlockAttributes16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes16()
}

func (c *current) onBlockAttributes23() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes23()
}

func (c *current) onBlockAttributes19(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonBlockAttributes19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes19(stack["ref"])
}

func (c *current) onBlockAttributes29() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonBlockAttributes29() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes29()
}

func (c *current) onBlockAttributes36() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes36()
}

func (c *current) onBlockAttributes48() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes48()
}

func (c *current) onBlockAttributes50() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonBlockAttributes50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes50()
}

func (c *current) onBlockAttributes43(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonBlockAttributes43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes43(stack["start"])
}

func (c *current) onBlockAttributes32(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonBlockAttributes32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes32(stack["name"], stack["start"])
}

func (c *current) onBlockAttributes58() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes58()
}

func (c *current) onBlockAttributes70() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes70()
}

func (c *current) onBlockAttributes72() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonBlockAttributes72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes72()
}

func (c *current) onBlockAttributes65(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonBlockAttributes65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes65(stack["start"])
}

func (c *current) onBlockAttributes54(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonBlockAttributes54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes54(stack["name"], stack["start"])
}

func (c *current) onBlockAttributes80() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes80()
}

func (c *current) onBlockAttributes76(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonBlockAttributes76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes76(stack["name"])
}

func (c *current) onBlockAttributes27(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonBlockAttributes27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes27(stack["element"])
}

func (c *current) onBlockAttributes86() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonBlockAttributes86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes86()
}

func (c *current) onBlockAttributes12(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonBlockAttributes12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes12(stack["elements"])
}

func (c *current) onBlockAttributes8(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonBlockAttributes8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes8(stack["id"])
}

func (c *current) onBlockAttributes92() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes92()
}

func (c *current) onBlockAttributes99() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonBlockAttributes99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes99()
}

func (c *current) onBlockAttributes5(anchor interface{}) (interface{}, error) {
	return anchor, nil

}

func (p *parser) callonBlockAttributes5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes5(stack["anchor"])
}

func (c *current) onBlockAttributes115() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonBlockAttributes115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes115()
}

func (c *current) onBlockAttributes122() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes122()
}

func (c *current) onBlockAttributes118(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonBlockAttributes118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes118(stack["ref"])
}

func (c *current) onBlockAttributes128() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonBlockAttributes128() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes128()
}

func (c *current) onBlockAttributes135() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes135()
}

func (c *current) onBlockAttributes147() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes147()
}

func (c *current) onBlockAttributes149() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonBlockAttributes149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes149()
}

func (c *current) onBlockAttributes142(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonBlockAttributes142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes142(stack["start"])
}

func (c *current) onBlockAttributes131(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonBlockAttributes131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes131(stack["name"], stack["start"])
}

func (c *current) onBlockAttributes157() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes157()
}

func (c *current) onBlockAttributes169() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes169()
}

func (c *current) onBlockAttributes171() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonBlockAttributes171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes171()
}

func (c *current) onBlockAttributes164(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonBlockAttributes164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes164(stack["start"])
}

func (c *current) onBlockAttributes153(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonBlockAttributes153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes153(stack["name"], stack["start"])
}

func (c *current) onBlockAttributes179() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes179() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes179()
}

func (c *current) onBlockAttributes175(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonBlockAttributes175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes175(stack["name"])
}

func (c *current) onBlockAttributes126(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonBlockAttributes126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes126(stack["element"])
}

func (c *current) onBlockAttributes185() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonBlockAttributes185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes185()
}

func (c *current) onBlockAttributes108(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonBlockAttributes108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes108(stack["elements"])
}

func (c *current) onBlockAttributes104(title interface{}) (interface{}, error) {
	return types.NewTitleAttribute(title)

}

func (p *parser) callonBlockAttributes104() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes104(stack["title"])
}

func (c *current) onBlockAttributes190() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes190()
}

func (c *current) onBlockAttributes197() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonBlockAttributes197() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes197()
}

func (c *current) onBlockAttributes101(title interface{}) (interface{}, error) {
	return title, nil

}

func (p *parser) callonBlockAttributes101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes101(stack["title"])
}

func (c *current) onBlockAttributes206() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes206()
}

func (c *current) onBlockAttributes213() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonBlockAttributes213() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes213()
}

func (c *current) onBlockAttributes199(attributes interface{}) (interface{}, error) {
	return attributes, nil

}

func (p *parser) callonBlockAttributes199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes199(stack["attributes"])
}

func (c *current) onBlockAttributes1(attributes interface{}) (interface{}, error) {
	// c.unsetCurrentSubstitution()
	return types.MergeAttributes(attributes.([]interface{})...)

}

func (p *parser) callonBlockAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes1(stack["attributes"])
}

func (c *current) onInlineAttributes6(attribute interface{}) (interface{}, error) {
	return attribute, nil

}

func (p *parser) callonInlineAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes6(stack["attribute"])
}

func (c *current) onInlineAttributes1(attributes interface{}) (interface{}, error) {
	return types.NewAttributes(attributes.([]interface{})...)

}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attributes"])
}

func (c *current) onLongHandAttributes25() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes25()
}

func (c *current) onLongHandAttributes29() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes29()
}

func (c *current) onLongHandAttributes33() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonLongHandAttributes33() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes33()
}

func (c *current) onLongHandAttributes40() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes40()
}

func (c *current) onLongHandAttributes52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes52()
}

func (c *current) onLongHandAttributes54() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes54()
}

func (c *current) onLongHandAttributes47(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes47(stack["start"])
}

func (c *current) onLongHandAttributes36(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonLongHandAttributes36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes36(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes62() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes62()
}

func (c *current) onLongHandAttributes74() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes74()
}

func (c *current) onLongHandAttributes76() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes76()
}

func (c *current) onLongHandAttributes69(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes69(stack["start"])
}

func (c *current) onLongHandAttributes58(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonLongHandAttributes58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes58(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes84() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes84()
}

func (c *current) onLongHandAttributes80(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonLongHandAttributes80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes80(stack["name"])
}

func (c *current) onLongHandAttributes31(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLongHandAttributes31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes31(stack["element"])
}

func (c *current) onLongHandAttributes90() (interface{}, error) {

	return types.NewStringElement(`'`) // escaped single quote

}

func (p *parser) callonLongHandAttributes90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes90()
}

func (c *current) onLongHandAttributes94() (interface{}, error) {
	// quoted string delimiters or standalone backslash
	return types.NewStringElement(string(c.text)) // keep as-is for now

}

func (p *parser) callonLongHandAttributes94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes94()
}

func (c *current) onLongHandAttributes96() (interface{}, error) {
	// = and , signs are allowed within '' quoted values
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes96()
}

func (c *current) onLongHandAttributes21(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonLongHandAttributes21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes21(stack["elements"])
}

func (c *current) onLongHandAttributes15(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonLongHandAttributes15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes15(stack["content"])
}

func (c *current) onLongHandAttributes110() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes110()
}

func (c *current) onLongHandAttributes114() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes114()
}

func (c *current) onLongHandAttributes118() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonLongHandAttributes118() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes118()
}

func (c *current) onLongHandAttributes125() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes125()
}

func (c *current) onLongHandAttributes137() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes137()
}

func (c *current) onLongHandAttributes139() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes139()
}

func (c *current) onLongHandAttributes132(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes132(stack["start"])
}

func (c *current) onLongHandAttributes121(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonLongHandAttributes121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes121(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes147() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes147()
}

func (c *current) onLongHandAttributes159() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes159()
}

func (c *current) onLongHandAttributes161() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes161()
}

func (c *current) onLongHandAttributes154(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes154(stack["start"])
}

func (c *current) onLongHandAttributes143(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonLongHandAttributes143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes143(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes169() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes169()
}

func (c *current) onLongHandAttributes165(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonLongHandAttributes165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes165(stack["name"])
}

func (c *current) onLongHandAttributes116(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLongHandAttributes116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes116(stack["element"])
}

func (c *current) onLongHandAttributes175() (interface{}, error) {

	return types.NewStringElement(`"`) // escaped double quote

}

func (p *parser) callonLongHandAttributes175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes175()
}

func (c *current) onLongHandAttributes180() (interface{}, error) {
	// quoted string delimiters or standalone backslash or standalone backtick
	return types.NewStringElement(string(c.text)) // keep as-is for now

}

func (p *parser) callonLongHandAttributes180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes180()
}

func (c *current) onLongHandAttributes182() (interface{}, error) {
	// = and , signs are allowed within " quoted values
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes182()
}

func (c *current) onLongHandAttributes106(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonLongHandAttributes106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes106(stack["elements"])
}

func (c *current) onLongHandAttributes192() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes192() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes192()
}

func (c *current) onLongHandAttributes100(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonLongHandAttributes100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes100(stack["content"])
}

func (c *current) onLongHandAttributes200() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes200() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes200()
}

func (c *current) onLongHandAttributes207() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLongHandAttributes207() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes207()
}

func (c *current) onLongHandAttributes203(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonLongHandAttributes203() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes203(stack["ref"])
}

func (c *current) onLongHandAttributes213() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonLongHandAttributes213() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes213()
}

func (c *current) onLongHandAttributes220() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes220() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes220()
}

func (c *current) onLongHandAttributes232() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes232() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes232()
}

func (c *current) onLongHandAttributes234() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes234() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes234()
}

func (c *current) onLongHandAttributes227(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes227() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes227(stack["start"])
}

func (c *current) onLongHandAttributes216(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonLongHandAttributes216() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes216(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes242() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes242() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes242()
}

func (c *current) onLongHandAttributes254() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes254() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes254()
}

func (c *current) onLongHandAttributes256() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes256() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes256()
}

func (c *current) onLongHandAttributes249(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes249() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes249(stack["start"])
}

func (c *current) onLongHandAttributes238(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonLongHandAttributes238() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes238(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes264() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes264() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes264()
}

func (c *current) onLongHandAttributes260(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonLongHandAttributes260() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes260(stack["name"])
}

func (c *current) onLongHandAttributes211(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLongHandAttributes211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes211(stack["element"])
}

func (c *current) onLongHandAttributes270() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes270() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes270()
}

func (c *current) onLongHandAttributes278() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes278() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes278()
}

func (c *current) onLongHandAttributes195(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonLongHandAttributes195() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes195(stack["elements"])
}

func (c *current) onLongHandAttributes12(value interface{}) (interface{}, error) {
	return types.NewPositionalAttribute(value)

}

func (p *parser) callonLongHandAttributes12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes12(stack["value"])
}

func (c *current) onLongHandAttributes306() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes306() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes306()
}

func (c *current) onLongHandAttributes310() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes310() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes310()
}

func (c *current) onLongHandAttributes314() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonLongHandAttributes314() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes314()
}

func (c *current) onLongHandAttributes321() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes321() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes321()
}

func (c *current) onLongHandAttributes333() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes333() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes333()
}

func (c *current) onLongHandAttributes335() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes335() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes335()
}

func (c *current) onLongHandAttributes328(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes328() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes328(stack["start"])
}

func (c *current) onLongHandAttributes317(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonLongHandAttributes317() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes317(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes343() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes343() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes343()
}

func (c *current) onLongHandAttributes355() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes355() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes355()
}

func (c *current) onLongHandAttributes357() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes357() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes357()
}

func (c *current) onLongHandAttributes350(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes350() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes350(stack["start"])
}

func (c *current) onLongHandAttributes339(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonLongHandAttributes339() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes339(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes365() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes365() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes365()
}

func (c *current) onLongHandAttributes361(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonLongHandAttributes361() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes361(stack["name"])
}

func (c *current) onLongHandAttributes312(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLongHandAttributes312() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes312(stack["element"])
}

func (c *current) onLongHandAttributes371() (interface{}, error) {

	return types.NewStringElement(`'`) // escaped single quote

}

func (p *parser) callonLongHandAttributes371() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes371()
}

func (c *current) onLongHandAttributes375() (interface{}, error) {
	// quoted string delimiters or standalone backslash
	return types.NewStringElement(string(c.text)) // keep as-is for now

}

func (p *parser) callonLongHandAttributes375() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes375()
}

func (c *current) onLongHandAttributes377() (interface{}, error) {
	// = and , signs are allowed within '' quoted values
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes377() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes377()
}

func (c *current) onLongHandAttributes302(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonLongHandAttributes302() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes302(stack["elements"])
}

func (c *current) onLongHandAttributes296(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonLongHandAttributes296() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes296(stack["content"])
}

func (c *current) onLongHandAttributes391() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes391() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes391()
}

func (c *current) onLongHandAttributes395() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes395() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes395()
}

func (c *current) onLongHandAttributes399() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonLongHandAttributes399() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes399()
}

func (c *current) onLongHandAttributes406() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes406() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes406()
}

func (c *current) onLongHandAttributes418() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes418() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes418()
}

func (c *current) onLongHandAttributes420() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes420() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes420()
}

func (c *current) onLongHandAttributes413(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes413() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes413(stack["start"])
}

func (c *current) onLongHandAttributes402(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonLongHandAttributes402() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes402(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes428() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes428() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes428()
}

func (c *current) onLongHandAttributes440() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes440() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes440()
}

func (c *current) onLongHandAttributes442() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes442() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes442()
}

func (c *current) onLongHandAttributes435(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes435() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes435(stack["start"])
}

func (c *current) onLongHandAttributes424(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonLongHandAttributes424() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes424(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes450() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes450() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes450()
}

func (c *current) onLongHandAttributes446(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonLongHandAttributes446() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes446(stack["name"])
}

func (c *current) onLongHandAttributes397(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLongHandAttributes397() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes397(stack["element"])
}

func (c *current) onLongHandAttributes456() (interface{}, error) {

	return types.NewStringElement(`"`) // escaped double quote

}

func (p *parser) callonLongHandAttributes456() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes456()
}

func (c *current) onLongHandAttributes461() (interface{}, error) {
	// quoted string delimiters or standalone backslash or standalone backtick
	return types.NewStringElement(string(c.text)) // keep as-is for now

}

func (p *parser) callonLongHandAttributes461() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes461()
}

func (c *current) onLongHandAttributes463() (interface{}, error) {
	// = and , signs are allowed within " quoted values
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes463() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes463()
}

func (c *current) onLongHandAttributes387(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonLongHandAttributes387() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes387(stack["elements"])
}

func (c *current) onLongHandAttributes473() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes473() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes473()
}

func (c *current) onLongHandAttributes381(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonLongHandAttributes381() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes381(stack["content"])
}

func (c *current) onLongHandAttributes481() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes481() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes481()
}

func (c *current) onLongHandAttributes488() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLongHandAttributes488() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes488()
}

func (c *current) onLongHandAttributes484(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonLongHandAttributes484() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes484(stack["ref"])
}

func (c *current) onLongHandAttributes494() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonLongHandAttributes494() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes494()
}

func (c *current) onLongHandAttributes501() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes501() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes501()
}

func (c *current) onLongHandAttributes513() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes513() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes513()
}

func (c *current) onLongHandAttributes515() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes515() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes515()
}

func (c *current) onLongHandAttributes508(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes508() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes508(stack["start"])
}

func (c *current) onLongHandAttributes497(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonLongHandAttributes497() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes497(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes523() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes523() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes523()
}

func (c *current) onLongHandAttributes535() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes535() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes535()
}

func (c *current) onLongHandAttributes537() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes537() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes537()
}

func (c *current) onLongHandAttributes530(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes530() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes530(stack["start"])
}

func (c *current) onLongHandAttributes519(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonLongHandAttributes519() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes519(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes545() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes545() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes545()
}

func (c *current) onLongHandAttributes541(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonLongHandAttributes541() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes541(stack["name"])
}

func (c *current) onLongHandAttributes492(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLongHandAttributes492() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes492(stack["element"])
}

func (c *current) onLongHandAttributes551() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes551() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes551()
}

func (c *current) onLongHandAttributes559() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes559() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes559()
}

func (c *current) onLongHandAttributes476(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonLongHandAttributes476() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes476(stack["elements"])
}

func (c *current) onLongHandAttributes291(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonLongHandAttributes291() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes291(stack["id"])
}

func (c *current) onLongHandAttributes577() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes577() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes577()
}

func (c *current) onLongHandAttributes581() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes581() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes581()
}

func (c *current) onLongHandAttributes585() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonLongHandAttributes585() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes585()
}

func (c *current) onLongHandAttributes592() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes592() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes592()
}

func (c *current) onLongHandAttributes604() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes604() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes604()
}

func (c *current) onLongHandAttributes606() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes606() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes606()
}

func (c *current) onLongHandAttributes599(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes599() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes599(stack["start"])
}

func (c *current) onLongHandAttributes588(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonLongHandAttributes588() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes588(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes614() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes614() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes614()
}

func (c *current) onLongHandAttributes626() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes626() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes626()
}

func (c *current) onLongHandAttributes628() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes628() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes628()
}

func (c *current) onLongHandAttributes621(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes621() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes621(stack["start"])
}

func (c *current) onLongHandAttributes610(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonLongHandAttributes610() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes610(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes636() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes636() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes636()
}

func (c *current) onLongHandAttributes632(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonLongHandAttributes632() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes632(stack["name"])
}

func (c *current) onLongHandAttributes583(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLongHandAttributes583() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes583(stack["element"])
}

func (c *current) onLongHandAttributes642() (interface{}, error) {

	return types.NewStringElement(`'`) // escaped single quote

}

func (p *parser) callonLongHandAttributes642() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes642()
}

func (c *current) onLongHandAttributes646() (interface{}, error) {
	// quoted string delimiters or standalone backslash
	return types.NewStringElement(string(c.text)) // keep as-is for now

}

func (p *parser) callonLongHandAttributes646() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes646()
}

func (c *current) onLongHandAttributes648() (interface{}, error) {
	// = and , signs are allowed within '' quoted values
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes648() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes648()
}

func (c *current) onLongHandAttributes573(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonLongHandAttributes573() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes573(stack["elements"])
}

func (c *current) onLongHandAttributes567(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonLongHandAttributes567() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes567(stack["content"])
}

func (c *current) onLongHandAttributes662() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes662() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes662()
}

func (c *current) onLongHandAttributes666() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes666() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes666()
}

func (c *current) onLongHandAttributes670() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonLongHandAttributes670() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes670()
}

func (c *current) onLongHandAttributes677() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes677() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes677()
}

func (c *current) onLongHandAttributes689() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes689() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes689()
}

func (c *current) onLongHandAttributes691() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes691() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes691()
}

func (c *current) onLongHandAttributes684(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes684() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes684(stack["start"])
}

func (c *current) onLongHandAttributes673(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonLongHandAttributes673() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes673(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes699() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes699() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes699()
}

func (c *current) onLongHandAttributes711() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes711() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes711()
}

func (c *current) onLongHandAttributes713() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes713() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes713()
}

func (c *current) onLongHandAttributes706(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes706() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes706(stack["start"])
}

func (c *current) onLongHandAttributes695(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonLongHandAttributes695() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes695(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes721() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes721() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes721()
}

func (c *current) onLongHandAttributes717(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonLongHandAttributes717() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes717(stack["name"])
}

func (c *current) onLongHandAttributes668(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLongHandAttributes668() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes668(stack["element"])
}

func (c *current) onLongHandAttributes727() (interface{}, error) {

	return types.NewStringElement(`"`) // escaped double quote

}

func (p *parser) callonLongHandAttributes727() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes727()
}

func (c *current) onLongHandAttributes732() (interface{}, error) {
	// quoted string delimiters or standalone backslash or standalone backtick
	return types.NewStringElement(string(c.text)) // keep as-is for now

}

func (p *parser) callonLongHandAttributes732() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes732()
}

func (c *current) onLongHandAttributes734() (interface{}, error) {
	// = and , signs are allowed within " quoted values
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes734() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes734()
}

func (c *current) onLongHandAttributes658(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonLongHandAttributes658() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes658(stack["elements"])
}

func (c *current) onLongHandAttributes744() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes744() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes744()
}

func (c *current) onLongHandAttributes652(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonLongHandAttributes652() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes652(stack["content"])
}

func (c *current) onLongHandAttributes752() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes752() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes752()
}

func (c *current) onLongHandAttributes759() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLongHandAttributes759() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes759()
}

func (c *current) onLongHandAttributes755(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonLongHandAttributes755() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes755(stack["ref"])
}

func (c *current) onLongHandAttributes765() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonLongHandAttributes765() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes765()
}

func (c *current) onLongHandAttributes772() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes772() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes772()
}

func (c *current) onLongHandAttributes784() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes784() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes784()
}

func (c *current) onLongHandAttributes786() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes786() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes786()
}

func (c *current) onLongHandAttributes779(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes779() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes779(stack["start"])
}

func (c *current) onLongHandAttributes768(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonLongHandAttributes768() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes768(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes794() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes794() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes794()
}

func (c *current) onLongHandAttributes806() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes806() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes806()
}

func (c *current) onLongHandAttributes808() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes808() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes808()
}

func (c *current) onLongHandAttributes801(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes801() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes801(stack["start"])
}

func (c *current) onLongHandAttributes790(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonLongHandAttributes790() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes790(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes816() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes816() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes816()
}

func (c *current) onLongHandAttributes812(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonLongHandAttributes812() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes812(stack["name"])
}

func (c *current) onLongHandAttributes763(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLongHandAttributes763() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes763(stack["element"])
}

func (c *current) onLongHandAttributes822() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes822() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes822()
}

func (c *current) onLongHandAttributes830() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes830() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes830()
}

func (c *current) onLongHandAttributes747(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonLongHandAttributes747() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes747(stack["elements"])
}

func (c *current) onLongHandAttributes562(option interface{}) (interface{}, error) {
	return types.NewOptionAttribute(option)

}

func (p *parser) callonLongHandAttributes562() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes562(stack["option"])
}

func (c *current) onLongHandAttributes848() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes848() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes848()
}

func (c *current) onLongHandAttributes852() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes852() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes852()
}

func (c *current) onLongHandAttributes856() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonLongHandAttributes856() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes856()
}

func (c *current) onLongHandAttributes863() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes863() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes863()
}

func (c *current) onLongHandAttributes875() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes875() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes875()
}

func (c *current) onLongHandAttributes877() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes877() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes877()
}

func (c *current) onLongHandAttributes870(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes870() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes870(stack["start"])
}

func (c *current) onLongHandAttributes859(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonLongHandAttributes859() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes859(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes885() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes885() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes885()
}

func (c *current) onLongHandAttributes897() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes897() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes897()
}

func (c *current) onLongHandAttributes899() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes899() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes899()
}

func (c *current) onLongHandAttributes892(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes892() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes892(stack["start"])
}

func (c *current) onLongHandAttributes881(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonLongHandAttributes881() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes881(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes907() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes907() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes907()
}

func (c *current) onLongHandAttributes903(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonLongHandAttributes903() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes903(stack["name"])
}

func (c *current) onLongHandAttributes854(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLongHandAttributes854() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes854(stack["element"])
}

func (c *current) onLongHandAttributes913() (interface{}, error) {

	return types.NewStringElement(`'`) // escaped single quote

}

func (p *parser) callonLongHandAttributes913() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes913()
}

func (c *current) onLongHandAttributes917() (interface{}, error) {
	// quoted string delimiters or standalone backslash
	return types.NewStringElement(string(c.text)) // keep as-is for now

}

func (p *parser) callonLongHandAttributes917() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes917()
}

func (c *current) onLongHandAttributes919() (interface{}, error) {
	// = and , signs are allowed within '' quoted values
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes919() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes919()
}

func (c *current) onLongHandAttributes844(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonLongHandAttributes844() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes844(stack["elements"])
}

func (c *current) onLongHandAttributes838(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonLongHandAttributes838() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes838(stack["content"])
}

func (c *current) onLongHandAttributes933() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes933() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes933()
}

func (c *current) onLongHandAttributes937() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes937() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes937()
}

func (c *current) onLongHandAttributes941() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonLongHandAttributes941() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes941()
}

func (c *current) onLongHandAttributes948() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes948() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes948()
}

func (c *current) onLongHandAttributes960() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes960() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes960()
}

func (c *current) onLongHandAttributes962() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes962() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes962()
}

func (c *current) onLongHandAttributes955(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes955() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes955(stack["start"])
}

func (c *current) onLongHandAttributes944(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonLongHandAttributes944() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes944(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes970() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes970() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes970()
}

func (c *current) onLongHandAttributes982() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes982() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes982()
}

func (c *current) onLongHandAttributes984() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes984() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes984()
}

func (c *current) onLongHandAttributes977(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes977() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes977(stack["start"])
}

func (c *current) onLongHandAttributes966(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonLongHandAttributes966() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes966(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes992() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes992() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes992()
}

func (c *current) onLongHandAttributes988(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonLongHandAttributes988() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes988(stack["name"])
}

func (c *current) onLongHandAttributes939(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLongHandAttributes939() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes939(stack["element"])
}

func (c *current) onLongHandAttributes998() (interface{}, error) {

	return types.NewStringElement(`"`) // escaped double quote

}

func (p *parser) callonLongHandAttributes998() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes998()
}

func (c *current) onLongHandAttributes1003() (interface{}, error) {
	// quoted string delimiters or standalone backslash or standalone backtick
	return types.NewStringElement(string(c.text)) // keep as-is for now

}

func (p *parser) callonLongHandAttributes1003() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1003()
}

func (c *current) onLongHandAttributes1005() (interface{}, error) {
	// = and , signs are allowed within " quoted values
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes1005() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1005()
}

func (c *current) onLongHandAttributes929(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonLongHandAttributes929() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes929(stack["elements"])
}

func (c *current) onLongHandAttributes1015() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes1015() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1015()
}

func (c *current) onLongHandAttributes923(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonLongHandAttributes923() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes923(stack["content"])
}

func (c *current) onLongHandAttributes1023() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes1023() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1023()
}

func (c *current) onLongHandAttributes1030() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLongHandAttributes1030() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1030()
}

func (c *current) onLongHandAttributes1026(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonLongHandAttributes1026() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1026(stack["ref"])
}

func (c *current) onLongHandAttributes1036() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonLongHandAttributes1036() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1036()
}

func (c *current) onLongHandAttributes1043() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes1043() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1043()
}

func (c *current) onLongHandAttributes1055() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes1055() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1055()
}

func (c *current) onLongHandAttributes1057() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes1057() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1057()
}

func (c *current) onLongHandAttributes1050(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes1050() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1050(stack["start"])
}

func (c *current) onLongHandAttributes1039(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonLongHandAttributes1039() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1039(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes1065() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes1065() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1065()
}

func (c *current) onLongHandAttributes1077() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes1077() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1077()
}

func (c *current) onLongHandAttributes1079() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes1079() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1079()
}

func (c *current) onLongHandAttributes1072(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes1072() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1072(stack["start"])
}

func (c *current) onLongHandAttributes1061(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonLongHandAttributes1061() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1061(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes1087() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes1087() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1087()
}

func (c *current) onLongHandAttributes1083(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonLongHandAttributes1083() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1083(stack["name"])
}

func (c *current) onLongHandAttributes1034(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLongHandAttributes1034() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1034(stack["element"])
}

func (c *current) onLongHandAttributes1093() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes1093() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1093()
}

func (c *current) onLongHandAttributes1101() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes1101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1101()
}

func (c *current) onLongHandAttributes1018(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonLongHandAttributes1018() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1018(stack["elements"])
}

func (c *current) onLongHandAttributes833(role interface{}) (interface{}, error) {
	return types.NewRoleAttribute(role)

}

func (p *parser) callonLongHandAttributes833() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes833(stack["role"])
}

func (c *current) onLongHandAttributes283(extra interface{}) (interface{}, error) {
	return extra, nil

}

func (p *parser) callonLongHandAttributes283() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes283(stack["extra"])
}

func (c *current) onLongHandAttributes1110() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes1110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1110()
}

func (c *current) onLongHandAttributes1112(main, extras interface{}) (bool, error) {
	// make sure there was a match
	return main != nil || len(extras.([]interface{})) > 0, nil

}

func (p *parser) callonLongHandAttributes1112() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1112(stack["main"], stack["extras"])
}

func (c *current) onLongHandAttributes8(main, extras interface{}) (interface{}, error) {
	attrs := []interface{}{}
	if main != nil {
		attrs = append(attrs, main)
	}
	if len(extras.([]interface{})) > 0 {
		attrs = append(attrs, extras.([]interface{})...)
	}
	return attrs, nil

}

func (p *parser) callonLongHandAttributes8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes8(stack["main"], stack["extras"])
}

func (c *current) onLongHandAttributes1(firstPositionalAttributes, otherAttributes interface{}) (interface{}, error) {
	attributes := []interface{}{}
	if firstPositionalAttributes != nil {
		attributes = append(attributes, firstPositionalAttributes.([]interface{})...)
	}
	if len(otherAttributes.([]interface{})) > 0 {
		attributes = append(attributes, otherAttributes.([]interface{})...)
	}
	return types.NewAttributes(attributes...)

}

func (p *parser) callonLongHandAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1(stack["firstPositionalAttributes"], stack["otherAttributes"])
}

func (c *current) onPositionalAttribute13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonPositionalAttribute13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute13()
}

func (c *current) onPositionalAttribute2(value interface{}) (interface{}, error) {
	// TODO: see if we can just use `((",")? / &"]")` instead (ie, no need to check for Space*)
	return types.NewPositionalAttribute(value)

}

func (p *parser) callonPositionalAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute2(stack["value"])
}

func (c *current) onPositionalAttribute24() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonPositionalAttribute24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute24()
}

func (c *current) onPositionalAttribute32() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonPositionalAttribute32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute32()
}

func (c *current) onPositionalAttribute36(value interface{}) (bool, error) {
	// here we can't rely on `c.text` if the content is empty
	// (in such a case, `c.text` contains the char sequence of the previous
	// rule that matched)
	return !types.AllNilEntries(value.([]interface{})), nil

}

func (p *parser) callonPositionalAttribute36() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute36(stack["value"])
}

func (c *current) onPositionalAttribute17(value interface{}) (interface{}, error) {

	return types.NewPositionalAttribute(nil)

}

func (p *parser) callonPositionalAttribute17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute17(stack["value"])
}

func (c *current) onNamedAttribute9() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNamedAttribute9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute9()
}

func (c *current) onNamedAttribute16() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNamedAttribute16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute16()
}

func (c *current) onNamedAttribute4() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil

}

func (p *parser) callonNamedAttribute4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute4()
}

func (c *current) onNamedAttribute22() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNamedAttribute22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute22()
}

func (c *current) onNamedAttribute32() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNamedAttribute32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute32()
}

func (c *current) onNamedAttribute1(key, value interface{}) (interface{}, error) {
	// TODO: include `,` or expect `]`
	return types.NewNamedAttribute(key.(string), value)

}

func (p *parser) callonNamedAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute1(stack["key"], stack["value"])
}

func (c *current) onAttributeRawValue15() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeRawValue15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue15()
}

func (c *current) onAttributeRawValue19() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeRawValue19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue19()
}

func (c *current) onAttributeRawValue23() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonAttributeRawValue23() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue23()
}

func (c *current) onAttributeRawValue30() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeRawValue30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue30()
}

func (c *current) onAttributeRawValue42() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeRawValue42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue42()
}

func (c *current) onAttributeRawValue44() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonAttributeRawValue44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue44()
}

func (c *current) onAttributeRawValue37(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonAttributeRawValue37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue37(stack["start"])
}

func (c *current) onAttributeRawValue26(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonAttributeRawValue26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue26(stack["name"], stack["start"])
}

func (c *current) onAttributeRawValue52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeRawValue52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue52()
}

func (c *current) onAttributeRawValue64() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeRawValue64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue64()
}

func (c *current) onAttributeRawValue66() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonAttributeRawValue66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue66()
}

func (c *current) onAttributeRawValue59(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonAttributeRawValue59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue59(stack["start"])
}

func (c *current) onAttributeRawValue48(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonAttributeRawValue48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue48(stack["name"], stack["start"])
}

func (c *current) onAttributeRawValue74() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeRawValue74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue74()
}

func (c *current) onAttributeRawValue70(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttributeRawValue70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue70(stack["name"])
}

func (c *current) onAttributeRawValue21(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonAttributeRawValue21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue21(stack["element"])
}

func (c *current) onAttributeRawValue80() (interface{}, error) {

	return types.NewStringElement(`'`) // escaped single quote

}

func (p *parser) callonAttributeRawValue80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue80()
}

func (c *current) onAttributeRawValue84() (interface{}, error) {
	// quoted string delimiters or standalone backslash
	return types.NewStringElement(string(c.text)) // keep as-is for now

}

func (p *parser) callonAttributeRawValue84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue84()
}

func (c *current) onAttributeRawValue86() (interface{}, error) {
	// = and , signs are allowed within '' quoted values
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeRawValue86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue86()
}

func (c *current) onAttributeRawValue11(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonAttributeRawValue11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue11(stack["elements"])
}

func (c *current) onAttributeRawValue5(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonAttributeRawValue5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue5(stack["content"])
}

func (c *current) onAttributeRawValue100() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeRawValue100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue100()
}

func (c *current) onAttributeRawValue104() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeRawValue104() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue104()
}

func (c *current) onAttributeRawValue108() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonAttributeRawValue108() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue108()
}

func (c *current) onAttributeRawValue115() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeRawValue115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue115()
}

func (c *current) onAttributeRawValue127() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeRawValue127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue127()
}

func (c *current) onAttributeRawValue129() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonAttributeRawValue129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue129()
}

func (c *current) onAttributeRawValue122(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonAttributeRawValue122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue122(stack["start"])
}

func (c *current) onAttributeRawValue111(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonAttributeRawValue111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue111(stack["name"], stack["start"])
}

func (c *current) onAttributeRawValue137() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeRawValue137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue137()
}

func (c *current) onAttributeRawValue149() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeRawValue149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue149()
}

func (c *current) onAttributeRawValue151() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonAttributeRawValue151() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue151()
}

func (c *current) onAttributeRawValue144(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonAttributeRawValue144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue144(stack["start"])
}

func (c *current) onAttributeRawValue133(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonAttributeRawValue133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue133(stack["name"], stack["start"])
}

func (c *current) onAttributeRawValue159() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeRawValue159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue159()
}

func (c *current) onAttributeRawValue155(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttributeRawValue155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue155(stack["name"])
}

func (c *current) onAttributeRawValue106(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonAttributeRawValue106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue106(stack["element"])
}

func (c *current) onAttributeRawValue165() (interface{}, error) {

	return types.NewStringElement(`"`) // escaped double quote

}

func (p *parser) callonAttributeRawValue165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue165()
}

func (c *current) onAttributeRawValue170() (interface{}, error) {
	// quoted string delimiters or standalone backslash or standalone backtick
	return types.NewStringElement(string(c.text)) // keep as-is for now

}

func (p *parser) callonAttributeRawValue170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue170()
}

func (c *current) onAttributeRawValue172() (interface{}, error) {
	// = and , signs are allowed within " quoted values
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeRawValue172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue172()
}

func (c *current) onAttributeRawValue96(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonAttributeRawValue96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue96(stack["elements"])
}

func (c *current) onAttributeRawValue182() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeRawValue182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue182()
}

func (c *current) onAttributeRawValue90(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonAttributeRawValue90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue90(stack["content"])
}

func (c *current) onAttributeRawValue192() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeRawValue192() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue192()
}

func (c *current) onAttributeRawValue1(value interface{}) (interface{}, error) {
	return value, nil

}

func (p *parser) callonAttributeRawValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue1(stack["value"])
}

func (c *current) onUnquotedAttributeRawValue6() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeRawValue6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue6()
}

func (c *current) onUnquotedAttributeRawValue19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUnquotedAttributeRawValue19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue19()
}

func (c *current) onUnquotedAttributeRawValue15(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonUnquotedAttributeRawValue15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue15(stack["ref"])
}

func (c *current) onUnquotedAttributeRawValue25() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonUnquotedAttributeRawValue25() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue25()
}

func (c *current) onUnquotedAttributeRawValue32() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeRawValue32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue32()
}

func (c *current) onUnquotedAttributeRawValue44() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeRawValue44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue44()
}

func (c *current) onUnquotedAttributeRawValue46() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonUnquotedAttributeRawValue46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue46()
}

func (c *current) onUnquotedAttributeRawValue39(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonUnquotedAttributeRawValue39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue39(stack["start"])
}

func (c *current) onUnquotedAttributeRawValue28(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonUnquotedAttributeRawValue28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue28(stack["name"], stack["start"])
}

func (c *current) onUnquotedAttributeRawValue54() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeRawValue54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue54()
}

func (c *current) onUnquotedAttributeRawValue66() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeRawValue66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue66()
}

func (c *current) onUnquotedAttributeRawValue68() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonUnquotedAttributeRawValue68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue68()
}

func (c *current) onUnquotedAttributeRawValue61(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonUnquotedAttributeRawValue61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue61(stack["start"])
}

func (c *current) onUnquotedAttributeRawValue50(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonUnquotedAttributeRawValue50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue50(stack["name"], stack["start"])
}

func (c *current) onUnquotedAttributeRawValue76() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeRawValue76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue76()
}

func (c *current) onUnquotedAttributeRawValue72(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonUnquotedAttributeRawValue72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue72(stack["name"])
}

func (c *current) onUnquotedAttributeRawValue23(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonUnquotedAttributeRawValue23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue23(stack["element"])
}

func (c *current) onUnquotedAttributeRawValue82() (interface{}, error) {
	// not within brackets and stop on space
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeRawValue82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue82()
}

func (c *current) onUnquotedAttributeRawValue86() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeRawValue86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue86()
}

func (c *current) onUnquotedAttributeRawValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonUnquotedAttributeRawValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue1(stack["elements"])
}

func (c *current) onCrossReference6() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonCrossReference6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference6()
}

func (c *current) onCrossReference12() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCrossReference12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference12()
}

func (c *current) onCrossReference18() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReference18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference18()
}

func (c *current) onCrossReference25() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonCrossReference25() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference25()
}

func (c *current) onCrossReference32() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCrossReference32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference32()
}

func (c *current) onCrossReference44() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCrossReference44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference44()
}

func (c *current) onCrossReference46() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonCrossReference46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference46()
}

func (c *current) onCrossReference39(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonCrossReference39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference39(stack["start"])
}

func (c *current) onCrossReference28(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonCrossReference28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference28(stack["name"], stack["start"])
}

func (c *current) onCrossReference54() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCrossReference54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference54()
}

func (c *current) onCrossReference66() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCrossReference66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference66()
}

func (c *current) onCrossReference68() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonCrossReference68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference68()
}

func (c *current) onCrossReference61(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonCrossReference61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference61(stack["start"])
}

func (c *current) onCrossReference50(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonCrossReference50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference50(stack["name"], stack["start"])
}

func (c *current) onCrossReference76() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCrossReference76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference76()
}

func (c *current) onCrossReference72(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonCrossReference72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference72(stack["name"])
}

func (c *current) onCrossReference23(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonCrossReference23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference23(stack["element"])
}

func (c *current) onCrossReference82() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReference82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference82()
}

func (c *current) onCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference2(stack["id"], stack["label"])
}

func (c *current) onCrossReference89() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonCrossReference89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference89()
}

func (c *current) onCrossReference85(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonCrossReference85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference85(stack["id"])
}

func (c *current) onExternalCrossReference13() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]"
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference13()
}

func (c *current) onExternalCrossReference18() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonExternalCrossReference18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference18()
}

func (c *current) onExternalCrossReference25() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference25()
}

func (c *current) onExternalCrossReference37() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference37()
}

func (c *current) onExternalCrossReference39() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalCrossReference39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference39()
}

func (c *current) onExternalCrossReference32(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalCrossReference32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference32(stack["start"])
}

func (c *current) onExternalCrossReference21(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonExternalCrossReference21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference21(stack["name"], stack["start"])
}

func (c *current) onExternalCrossReference47() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference47()
}

func (c *current) onExternalCrossReference59() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference59()
}

func (c *current) onExternalCrossReference61() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalCrossReference61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference61()
}

func (c *current) onExternalCrossReference54(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalCrossReference54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference54(stack["start"])
}

func (c *current) onExternalCrossReference43(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonExternalCrossReference43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference43(stack["name"], stack["start"])
}

func (c *current) onExternalCrossReference69() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference69()
}

func (c *current) onExternalCrossReference65(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonExternalCrossReference65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference65(stack["name"])
}

func (c *current) onExternalCrossReference16(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExternalCrossReference16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference16(stack["element"])
}

func (c *current) onExternalCrossReference77() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonExternalCrossReference77() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference77()
}

func (c *current) onExternalCrossReference86() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference86()
}

func (c *current) onExternalCrossReference92() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference92()
}

func (c *current) onExternalCrossReference98() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalCrossReference98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference98()
}

func (c *current) onExternalCrossReference105() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonExternalCrossReference105() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference105()
}

func (c *current) onExternalCrossReference112() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference112()
}

func (c *current) onExternalCrossReference124() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference124()
}

func (c *current) onExternalCrossReference126() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalCrossReference126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference126()
}

func (c *current) onExternalCrossReference119(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalCrossReference119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference119(stack["start"])
}

func (c *current) onExternalCrossReference108(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonExternalCrossReference108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference108(stack["name"], stack["start"])
}

func (c *current) onExternalCrossReference134() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference134()
}

func (c *current) onExternalCrossReference146() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference146()
}

func (c *current) onExternalCrossReference148() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalCrossReference148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference148()
}

func (c *current) onExternalCrossReference141(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalCrossReference141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference141(stack["start"])
}

func (c *current) onExternalCrossReference130(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonExternalCrossReference130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference130(stack["name"], stack["start"])
}

func (c *current) onExternalCrossReference156() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference156()
}

func (c *current) onExternalCrossReference152(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonExternalCrossReference152() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference152(stack["name"])
}

func (c *current) onExternalCrossReference103(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExternalCrossReference103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference103(stack["element"])
}

func (c *current) onExternalCrossReference162() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalCrossReference162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference162()
}

func (c *current) onExternalCrossReference82(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonExternalCrossReference82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference82(stack["id"], stack["label"])
}

func (c *current) onExternalCrossReference169() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference169()
}

func (c *current) onExternalCrossReference165(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonExternalCrossReference165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference165(stack["id"])
}

func (c *current) onExternalCrossReference80() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalCrossReference80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference80()
}

func (c *current) onExternalCrossReference173() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonExternalCrossReference173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference173()
}

func (c *current) onExternalCrossReference75(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExternalCrossReference75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference75(stack["element"])
}

func (c *current) onExternalCrossReference175() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalCrossReference175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference175()
}

func (c *current) onExternalCrossReference9(elements interface{}) (interface{}, error) {
	return types.Merge(elements.([]interface{})...), nil

}

func (p *parser) callonExternalCrossReference9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference9(stack["elements"])
}

func (c *current) onExternalCrossReference181() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExternalCrossReference181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference181()
}

func (c *current) onExternalCrossReference177(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonExternalCrossReference177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference177(stack["ref"])
}

func (c *current) onExternalCrossReference5(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))

}

func (p *parser) callonExternalCrossReference5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference5(stack["path"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(*types.Location), inlineAttributes.(types.Attributes))

}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onDelimitedBlock4() (bool, error) {
	// only accept if not already in a delimited block of this kind
	return !c.isWithinDelimitedBlockOfKind(types.Comment), nil

}

func (p *parser) callonDelimitedBlock4() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock4()
}

func (c *current) onDelimitedBlock9() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDelimitedBlock9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock9()
}

func (c *current) onDelimitedBlock16() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDelimitedBlock16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock16()
}

func (c *current) onDelimitedBlock18() (bool, error) {
	// only accept if the delimiter matches the current delimited block or if no kind is registered yet
	c.setWithinDelimitedBlockOfKind(types.Comment)
	return true, nil

}

func (p *parser) callonDelimitedBlock18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock18()
}

func (c *current) onDelimitedBlock30() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDelimitedBlock30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock30()
}

func (c *current) onDelimitedBlock37() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDelimitedBlock37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock37()
}

func (c *current) onDelimitedBlock48() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonDelimitedBlock48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock48()
}

func (c *current) onDelimitedBlock56() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDelimitedBlock56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock56()
}

func (c *current) onDelimitedBlock42(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDelimitedBlock42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock42(stack["content"])
}

func (c *current) onDelimitedBlock21(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDelimitedBlock21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock21(stack["line"])
}

func (c *current) onDelimitedBlock65() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDelimitedBlock65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock65()
}

func (c *current) onDelimitedBlock72() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDelimitedBlock72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock72()
}

func (c *current) onDelimitedBlock2(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}))

}

func (p *parser) callonDelimitedBlock2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock2(stack["content"])
}

func (c *current) onDelimitedBlock94() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDelimitedBlock94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock94()
}

func (c *current) onDelimitedBlock101() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDelimitedBlock101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock101()
}

func (c *current) onDelimitedBlock86() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDelimitedBlock86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock86()
}

func (c *current) onDelimitedBlock105() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDelimitedBlock105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock105()
}

func (c *current) onDelimitedBlock113() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDelimitedBlock113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock113()
}

func (c *current) onDelimitedBlock83(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDelimitedBlock83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock83(stack["content"])
}

func (c *current) onDelimitedBlock129() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDelimitedBlock129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock129()
}

func (c *current) onDelimitedBlock136() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDelimitedBlock136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock136()
}

func (c *current) onDelimitedBlock121() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDelimitedBlock121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock121()
}

func (c *current) onDelimitedBlock140() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDelimitedBlock140() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock140()
}

func (c *current) onDelimitedBlock148() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDelimitedBlock148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock148()
}

func (c *current) onDelimitedBlock118(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDelimitedBlock118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock118(stack["content"])
}

func (c *current) onDelimitedBlock153() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDelimitedBlock153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock153()
}

func (c *current) onDelimitedBlock156(content interface{}) (bool, error) {
	return len(strings.TrimSpace(string(c.text))) > 0, nil

}

func (p *parser) callonDelimitedBlock156() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock156(stack["content"])
}

func (c *current) onDelimitedBlock162() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDelimitedBlock162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock162()
}

func (c *current) onDelimitedBlock150(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDelimitedBlock150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock150(stack["content"])
}

func (c *current) onDelimitedBlock80(firstLine, otherLines interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.MarkdownQuote, append([]interface{}{firstLine}, otherLines.([]interface{})...))

}

func (p *parser) callonDelimitedBlock80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock80(stack["firstLine"], stack["otherLines"])
}

func (c *current) onExampleBlock3() (bool, error) {
	// only accept if not already in a delimited block of this kind
	return !c.isWithinDelimitedBlockOfKind(types.Example), nil

}

func (p *parser) callonExampleBlock3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock3()
}

func (c *current) onExampleBlock8() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExampleBlock8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock8()
}

func (c *current) onExampleBlock15() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonExampleBlock15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock15()
}

func (c *current) onExampleBlock17() (bool, error) {
	// only accept if the delimiter matches the current delimited block or if no kind is registered yet
	c.setWithinDelimitedBlockOfKind(types.Example)
	return true, nil

}

func (p *parser) callonExampleBlock17() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock17()
}

func (c *current) onExampleBlock26() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExampleBlock26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock26()
}

func (c *current) onExampleBlock33() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonExampleBlock33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock33()
}

func (c *current) onExampleBlock1(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Example, content.([]interface{}))

}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["content"])
}

func (c *current) onExampleBlockContent11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExampleBlockContent11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockContent11()
}

func (c *current) onExampleBlockContent18() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonExampleBlockContent18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockContent18()
}

func (c *current) onExampleBlockContent31() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonExampleBlockContent31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockContent31()
}

func (c *current) onExampleBlockContent39() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonExampleBlockContent39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockContent39()
}

func (c *current) onExampleBlockContent25(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonExampleBlockContent25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockContent25(stack["content"])
}

func (c *current) onExampleBlockContent2(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonExampleBlockContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockContent2(stack["line"])
}

func (c *current) onFencedBlock3() (bool, error) {
	// only accept if not already in a delimited block of this kind
	return !c.isWithinDelimitedBlockOfKind(types.Fenced), nil

}

func (p *parser) callonFencedBlock3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock3()
}

func (c *current) onFencedBlock8() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFencedBlock8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock8()
}

func (c *current) onFencedBlock15() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonFencedBlock15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock15()
}

func (c *current) onFencedBlock17() (bool, error) {
	// only accept if the delimiter matches the current delimited block or if no kind is registered yet
	c.setWithinDelimitedBlockOfKind(types.Fenced)
	return true, nil

}

func (p *parser) callonFencedBlock17() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock17()
}

func (c *current) onFencedBlock26() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFencedBlock26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock26()
}

func (c *current) onFencedBlock33() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonFencedBlock33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock33()
}

func (c *current) onFencedBlock1(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}))

}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["content"])
}

func (c *current) onFencedBlockContent11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFencedBlockContent11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockContent11()
}

func (c *current) onFencedBlockContent18() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonFencedBlockContent18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockContent18()
}

func (c *current) onFencedBlockContent31() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonFencedBlockContent31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockContent31()
}

func (c *current) onFencedBlockContent39() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonFencedBlockContent39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockContent39()
}

func (c *current) onFencedBlockContent25(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonFencedBlockContent25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockContent25(stack["content"])
}

func (c *current) onFencedBlockContent2(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonFencedBlockContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockContent2(stack["line"])
}

func (c *current) onListingBlock3() (bool, error) {
	// only accept if not already in a delimited block of this kind
	return !c.isWithinDelimitedBlockOfKind(types.Listing), nil

}

func (p *parser) callonListingBlock3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock3()
}

func (c *current) onListingBlock8() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListingBlock8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock8()
}

func (c *current) onListingBlock15() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonListingBlock15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock15()
}

func (c *current) onListingBlock17() (bool, error) {
	// only accept if the delimiter matches the current delimited block or if no kind is registered yet
	c.setWithinDelimitedBlockOfKind(types.Listing)
	return true, nil

}

func (p *parser) callonListingBlock17() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock17()
}

func (c *current) onListingBlock26() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListingBlock26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock26()
}

func (c *current) onListingBlock33() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonListingBlock33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock33()
}

func (c *current) onListingBlock1(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Listing, content.([]interface{}))

}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["content"])
}

func (c *current) onListingBlockContent11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListingBlockContent11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockContent11()
}

func (c *current) onListingBlockContent18() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonListingBlockContent18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockContent18()
}

func (c *current) onListingBlockContent31() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonListingBlockContent31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockContent31()
}

func (c *current) onListingBlockContent39() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonListingBlockContent39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockContent39()
}

func (c *current) onListingBlockContent25(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListingBlockContent25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockContent25(stack["content"])
}

func (c *current) onListingBlockContent2(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListingBlockContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockContent2(stack["line"])
}

func (c *current) onLiteralBlock7() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLiteralBlock7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlock7()
}

func (c *current) onLiteralBlock14() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonLiteralBlock14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlock14()
}

func (c *current) onLiteralBlock16() (bool, error) {
	// only accept if not already in a delimited block of this kind
	return !c.isWithinDelimitedBlockOfKind(types.Literal), nil

}

func (p *parser) callonLiteralBlock16() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlock16()
}

func (c *current) onLiteralBlock19(content interface{}) (bool, error) {
	// only accept if the delimiter matches the current delimited block or if no kind is registered yet
	c.setWithinDelimitedBlockOfKind(types.Literal)
	return true, nil

}

func (p *parser) callonLiteralBlock19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlock19(stack["content"])
}

func (c *current) onLiteralBlock27() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLiteralBlock27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlock27()
}

func (c *current) onLiteralBlock34() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonLiteralBlock34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlock34()
}

func (c *current) onLiteralBlock1(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Literal, content.([]interface{}))

}

func (p *parser) callonLiteralBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlock1(stack["content"])
}

func (c *current) onLiteralBlockContent11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLiteralBlockContent11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlockContent11()
}

func (c *current) onLiteralBlockContent18() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonLiteralBlockContent18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlockContent18()
}

func (c *current) onLiteralBlockContent31() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonLiteralBlockContent31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlockContent31()
}

func (c *current) onLiteralBlockContent39() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonLiteralBlockContent39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlockContent39()
}

func (c *current) onLiteralBlockContent25(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonLiteralBlockContent25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlockContent25(stack["content"])
}

func (c *current) onLiteralBlockContent2(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonLiteralBlockContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlockContent2(stack["line"])
}

func (c *current) onMarkdownQuoteAttribution5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonMarkdownQuoteAttribution5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution5()
}

func (c *current) onMarkdownQuoteAttribution13() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonMarkdownQuoteAttribution13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution13()
}

func (c *current) onMarkdownQuoteAttribution1(author interface{}) (interface{}, error) {
	return author, nil

}

func (p *parser) callonMarkdownQuoteAttribution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution1(stack["author"])
}

func (c *current) onPassthroughBlock3() (bool, error) {
	// only accept if not already in a delimited block of this kind
	return !c.isWithinDelimitedBlockOfKind(types.Passthrough), nil

}

func (p *parser) callonPassthroughBlock3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock3()
}

func (c *current) onPassthroughBlock8() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonPassthroughBlock8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock8()
}

func (c *current) onPassthroughBlock15() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughBlock15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock15()
}

func (c *current) onPassthroughBlock17() (bool, error) {
	// only accept if the delimiter matches the current delimited block or if no kind is registered yet
	c.setWithinDelimitedBlockOfKind(types.Passthrough)
	return true, nil

}

func (p *parser) callonPassthroughBlock17() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock17()
}

func (c *current) onPassthroughBlock27() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonPassthroughBlock27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock27()
}

func (c *current) onPassthroughBlock34() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughBlock34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock34()
}

func (c *current) onPassthroughBlock1(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}))

}

func (p *parser) callonPassthroughBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock1(stack["content"])
}

func (c *current) onPassthroughBlockContent11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonPassthroughBlockContent11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockContent11()
}

func (c *current) onPassthroughBlockContent18() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughBlockContent18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockContent18()
}

func (c *current) onPassthroughBlockContent31() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonPassthroughBlockContent31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockContent31()
}

func (c *current) onPassthroughBlockContent39() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughBlockContent39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockContent39()
}

func (c *current) onPassthroughBlockContent25(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonPassthroughBlockContent25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockContent25(stack["content"])
}

func (c *current) onPassthroughBlockContent2(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonPassthroughBlockContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockContent2(stack["line"])
}

func (c *current) onQuoteBlock3() (bool, error) {
	// only accept if not already in a delimited block of this kind
	return !c.isWithinDelimitedBlockOfKind(types.Quote), nil

}

func (p *parser) callonQuoteBlock3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock3()
}

func (c *current) onQuoteBlock8() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonQuoteBlock8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock8()
}

func (c *current) onQuoteBlock15() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonQuoteBlock15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock15()
}

func (c *current) onQuoteBlock17() (bool, error) {
	// only accept if the delimiter matches the current delimited block or if no kind is registered yet
	c.setWithinDelimitedBlockOfKind(types.Quote)
	return true, nil

}

func (p *parser) callonQuoteBlock17() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock17()
}

func (c *current) onQuoteBlock26() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonQuoteBlock26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock26()
}

func (c *current) onQuoteBlock33() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonQuoteBlock33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock33()
}

func (c *current) onQuoteBlock1(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Quote, content.([]interface{}))

}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["content"])
}

func (c *current) onQuoteBlockContent11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonQuoteBlockContent11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockContent11()
}

func (c *current) onQuoteBlockContent18() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonQuoteBlockContent18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockContent18()
}

func (c *current) onQuoteBlockContent31() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonQuoteBlockContent31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockContent31()
}

func (c *current) onQuoteBlockContent39() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonQuoteBlockContent39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockContent39()
}

func (c *current) onQuoteBlockContent25(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonQuoteBlockContent25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockContent25(stack["content"])
}

func (c *current) onQuoteBlockContent2(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonQuoteBlockContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockContent2(stack["line"])
}

func (c *current) onSidebarBlock3() (bool, error) {
	// only accept if not already in a delimited block of this kind
	return !c.isWithinDelimitedBlockOfKind(types.Sidebar), nil

}

func (p *parser) callonSidebarBlock3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock3()
}

func (c *current) onSidebarBlock8() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSidebarBlock8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock8()
}

func (c *current) onSidebarBlock15() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSidebarBlock15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock15()
}

func (c *current) onSidebarBlock17() (bool, error) {
	// only accept if the delimiter matches the current delimited block or if no kind is registered yet
	c.setWithinDelimitedBlockOfKind(types.Sidebar)
	return true, nil

}

func (p *parser) callonSidebarBlock17() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock17()
}

func (c *current) onSidebarBlock26() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSidebarBlock26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock26()
}

func (c *current) onSidebarBlock33() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSidebarBlock33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock33()
}

func (c *current) onSidebarBlock1(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}))

}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["content"])
}

func (c *current) onSidebarBlockContent11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSidebarBlockContent11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockContent11()
}

func (c *current) onSidebarBlockContent18() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSidebarBlockContent18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockContent18()
}

func (c *current) onSidebarBlockContent31() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonSidebarBlockContent31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockContent31()
}

func (c *current) onSidebarBlockContent39() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSidebarBlockContent39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockContent39()
}

func (c *current) onSidebarBlockContent25(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonSidebarBlockContent25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockContent25(stack["content"])
}

func (c *current) onSidebarBlockContent2(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonSidebarBlockContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockContent2(stack["line"])
}

func (c *current) onFileInclusion3() (bool, error) {
	// skip if disabled
	return c.isRuleEnabled(FileInclusion)

}

func (p *parser) callonFileInclusion3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion3()
}

func (c *current) onFileInclusion4() error {
	// force/enable attribute substitution
	// log.Debug("entering FileInclusion rule")
	return c.setCurrentSubstitution("attributes")

}

func (p *parser) callonFileInclusion4() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4()
}

func (c *current) onFileInclusion18() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]"
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileInclusion18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion18()
}

func (c *current) onFileInclusion23() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonFileInclusion23() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion23()
}

func (c *current) onFileInclusion30() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion30()
}

func (c *current) onFileInclusion42() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion42()
}

func (c *current) onFileInclusion44() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileInclusion44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion44()
}

func (c *current) onFileInclusion37(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonFileInclusion37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion37(stack["start"])
}

func (c *current) onFileInclusion26(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonFileInclusion26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion26(stack["name"], stack["start"])
}

func (c *current) onFileInclusion52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion52()
}

func (c *current) onFileInclusion64() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion64()
}

func (c *current) onFileInclusion66() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileInclusion66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion66()
}

func (c *current) onFileInclusion59(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonFileInclusion59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion59(stack["start"])
}

func (c *current) onFileInclusion48(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonFileInclusion48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion48(stack["name"], stack["start"])
}

func (c *current) onFileInclusion74() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion74()
}

func (c *current) onFileInclusion70(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonFileInclusion70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion70(stack["name"])
}

func (c *current) onFileInclusion21(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonFileInclusion21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion21(stack["element"])
}

func (c *current) onFileInclusion82() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonFileInclusion82() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion82()
}

func (c *current) onFileInclusion91() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonFileInclusion91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion91()
}

func (c *current) onFileInclusion97() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion97()
}

func (c *current) onFileInclusion103() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileInclusion103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion103()
}

func (c *current) onFileInclusion110() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonFileInclusion110() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion110()
}

func (c *current) onFileInclusion117() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion117() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion117()
}

func (c *current) onFileInclusion129() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion129()
}

func (c *current) onFileInclusion131() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileInclusion131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion131()
}

func (c *current) onFileInclusion124(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonFileInclusion124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion124(stack["start"])
}

func (c *current) onFileInclusion113(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonFileInclusion113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion113(stack["name"], stack["start"])
}

func (c *current) onFileInclusion139() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion139()
}

func (c *current) onFileInclusion151() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion151() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion151()
}

func (c *current) onFileInclusion153() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileInclusion153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion153()
}

func (c *current) onFileInclusion146(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonFileInclusion146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion146(stack["start"])
}

func (c *current) onFileInclusion135(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonFileInclusion135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion135(stack["name"], stack["start"])
}

func (c *current) onFileInclusion161() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion161()
}

func (c *current) onFileInclusion157(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonFileInclusion157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion157(stack["name"])
}

func (c *current) onFileInclusion108(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonFileInclusion108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion108(stack["element"])
}

func (c *current) onFileInclusion167() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileInclusion167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion167()
}

func (c *current) onFileInclusion87(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonFileInclusion87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion87(stack["id"], stack["label"])
}

func (c *current) onFileInclusion174() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonFileInclusion174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion174()
}

func (c *current) onFileInclusion170(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonFileInclusion170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion170(stack["id"])
}

func (c *current) onFileInclusion85() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileInclusion85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion85()
}

func (c *current) onFileInclusion178() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonFileInclusion178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion178()
}

func (c *current) onFileInclusion80(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonFileInclusion80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion80(stack["element"])
}

func (c *current) onFileInclusion180() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileInclusion180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion180()
}

func (c *current) onFileInclusion14(elements interface{}) (interface{}, error) {
	return types.Merge(elements.([]interface{})...), nil

}

func (p *parser) callonFileInclusion14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion14(stack["elements"])
}

func (c *current) onFileInclusion186() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFileInclusion186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion186()
}

func (c *current) onFileInclusion182(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonFileInclusion182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion182(stack["ref"])
}

func (c *current) onFileInclusion10(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))

}

func (p *parser) callonFileInclusion10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion10(stack["path"])
}

func (c *current) onFileInclusion6(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(*types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion6(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion195() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion195() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion195()
}

func (c *current) onFileInclusion202() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonFileInclusion202() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion202()
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(*types.FileInclusion), nil

}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onLineRanges17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLineRanges17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges17()
}

func (c *current) onLineRanges12() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges12()
}

func (c *current) onLineRanges26() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLineRanges26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges26()
}

func (c *current) onLineRanges21() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges21()
}

func (c *current) onLineRanges9(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))

}

func (p *parser) callonLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges9(stack["start"], stack["end"])
}

func (c *current) onLineRanges35() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLineRanges35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges35()
}

func (c *current) onLineRanges30() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges30()
}

func (c *current) onLineRanges28(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))

}

func (p *parser) callonLineRanges28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges28(stack["singleline"])
}

func (c *current) onLineRanges52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLineRanges52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges52()
}

func (c *current) onLineRanges47() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges47()
}

func (c *current) onLineRanges61() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLineRanges61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges61()
}

func (c *current) onLineRanges56() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges56()
}

func (c *current) onLineRanges44(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))

}

func (p *parser) callonLineRanges44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges44(stack["start"], stack["end"])
}

func (c *current) onLineRanges70() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLineRanges70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges70()
}

func (c *current) onLineRanges65() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges65()
}

func (c *current) onLineRanges63(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))

}

func (p *parser) callonLineRanges63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges63(stack["singleline"])
}

func (c *current) onLineRanges39(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonLineRanges39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges39(stack["other"])
}

func (c *current) onLineRanges5(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonLineRanges5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges5(stack["first"], stack["others"])
}

func (c *current) onLineRanges80() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLineRanges80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges80()
}

func (c *current) onLineRanges75() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges75()
}

func (c *current) onLineRanges89() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLineRanges89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges89()
}

func (c *current) onLineRanges84() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges84()
}

func (c *current) onLineRanges72(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))

}

func (p *parser) callonLineRanges72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges72(stack["start"], stack["end"])
}

func (c *current) onLineRanges98() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLineRanges98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges98()
}

func (c *current) onLineRanges93() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges93()
}

func (c *current) onLineRanges91(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))

}

func (p *parser) callonLineRanges91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges91(stack["singleline"])
}

func (c *current) onLineRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil

}

func (p *parser) callonLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges1(stack["value"])
}

func (c *current) onTagRanges11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges11()
}

func (c *current) onTagRanges17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges17()
}

func (c *current) onTagRanges20(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagRanges20() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges20(stack["stars"])
}

func (c *current) onTagRanges14(stars interface{}) (interface{}, error) {
	return stars, nil

}

func (p *parser) callonTagRanges14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges14(stack["stars"])
}

func (c *current) onTagRanges8(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)

}

func (p *parser) callonTagRanges8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges8(stack["tag"])
}

func (c *current) onTagRanges26() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges26()
}

func (c *current) onTagRanges32() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges32()
}

func (c *current) onTagRanges35(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagRanges35() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges35(stack["stars"])
}

func (c *current) onTagRanges29(stars interface{}) (interface{}, error) {
	return stars, nil

}

func (p *parser) callonTagRanges29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges29(stack["stars"])
}

func (c *current) onTagRanges21(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)

}

func (p *parser) callonTagRanges21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges21(stack["tag"])
}

func (c *current) onTagRanges46() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges46()
}

func (c *current) onTagRanges52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges52()
}

func (c *current) onTagRanges55(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagRanges55() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges55(stack["stars"])
}

func (c *current) onTagRanges49(stars interface{}) (interface{}, error) {
	return stars, nil

}

func (p *parser) callonTagRanges49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges49(stack["stars"])
}

func (c *current) onTagRanges43(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)

}

func (p *parser) callonTagRanges43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges43(stack["tag"])
}

func (c *current) onTagRanges61() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges61()
}

func (c *current) onTagRanges67() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges67()
}

func (c *current) onTagRanges70(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagRanges70() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges70(stack["stars"])
}

func (c *current) onTagRanges64(stars interface{}) (interface{}, error) {
	return stars, nil

}

func (p *parser) callonTagRanges64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges64(stack["stars"])
}

func (c *current) onTagRanges56(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)

}

func (p *parser) callonTagRanges56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges56(stack["tag"])
}

func (c *current) onTagRanges38(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonTagRanges38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges38(stack["other"])
}

func (c *current) onTagRanges4(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonTagRanges4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges4(stack["first"], stack["others"])
}

func (c *current) onTagRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil

}

func (p *parser) callonTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges1(stack["value"])
}

func (c *current) onIncludedFileLine11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIncludedFileLine11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine11()
}

func (c *current) onIncludedFileLine10() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine10()
}

func (c *current) onIncludedFileLine6(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))

}

func (p *parser) callonIncludedFileLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine6(stack["tag"])
}

func (c *current) onIncludedFileLine20() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIncludedFileLine20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine20()
}

func (c *current) onIncludedFileLine19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine19()
}

func (c *current) onIncludedFileLine15(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))

}

func (p *parser) callonIncludedFileLine15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine15(stack["tag"])
}

func (c *current) onIncludedFileLine24() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine24()
}

func (c *current) onIncludedFileLine31() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonIncludedFileLine31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine31()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))

}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onInlineElement7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement7()
}

func (c *current) onInlineElement13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement13()
}

func (c *current) onInlineElement20() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonInlineElement20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement20()
}

func (c *current) onInlineElement4(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonInlineElement4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement4(stack["content"])
}

func (c *current) onInlineElement22() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineElement22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement22()
}

func (c *current) onInlineElement31() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineElement31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement31()
}

func (c *current) onInlineElement46() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement46()
}

func (c *current) onInlineElement52() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonInlineElement52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement52()
}

func (c *current) onInlineElement40() (interface{}, error) {
	return types.NewString(string(c.text))
}

func (p *parser) callonInlineElement40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement40()
}

func (c *current) onInlineElement58() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement58()
}

func (c *current) onInlineElement64() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement64()
}

func (c *current) onInlineElement72() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonInlineElement72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement72()
}

func (c *current) onInlineElement54() (interface{}, error) {
	return types.NewLineBreak()

}

func (p *parser) callonInlineElement54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement54()
}

func (c *current) onInlineElement74() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement74()
}

func (c *current) onInlineElement84() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonInlineElement84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement84()
}

func (c *current) onInlineElement89() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonInlineElement89() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement89()
}

func (c *current) onInlineElement98() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonInlineElement98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement98()
}

func (c *current) onInlineElement104() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement104() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement104()
}

func (c *current) onInlineElement110() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineElement110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement110()
}

func (c *current) onInlineElement117() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonInlineElement117() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement117()
}

func (c *current) onInlineElement124() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement124()
}

func (c *current) onInlineElement136() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement136()
}

func (c *current) onInlineElement138() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonInlineElement138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement138()
}

func (c *current) onInlineElement131(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonInlineElement131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement131(stack["start"])
}

func (c *current) onInlineElement120(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonInlineElement120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement120(stack["name"], stack["start"])
}

func (c *current) onInlineElement146() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement146()
}

func (c *current) onInlineElement158() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement158()
}

func (c *current) onInlineElement160() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonInlineElement160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement160()
}

func (c *current) onInlineElement153(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonInlineElement153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement153(stack["start"])
}

func (c *current) onInlineElement142(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonInlineElement142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement142(stack["name"], stack["start"])
}

func (c *current) onInlineElement168() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement168()
}

func (c *current) onInlineElement164(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonInlineElement164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement164(stack["name"])
}

func (c *current) onInlineElement115(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineElement115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement115(stack["element"])
}

func (c *current) onInlineElement174() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineElement174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement174()
}

func (c *current) onInlineElement94(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonInlineElement94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement94(stack["id"], stack["label"])
}

func (c *current) onInlineElement181() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonInlineElement181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement181()
}

func (c *current) onInlineElement177(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonInlineElement177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement177(stack["id"])
}

func (c *current) onInlineElement92() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineElement92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement92()
}

func (c *current) onInlineElement185() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonInlineElement185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement185()
}

func (c *current) onInlineElement87(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineElement87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement87(stack["element"])
}

func (c *current) onInlineElement190() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonInlineElement190() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement190()
}

func (c *current) onInlineElement197() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement197() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement197()
}

func (c *current) onInlineElement209() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement209() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement209()
}

func (c *current) onInlineElement211() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonInlineElement211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement211()
}

func (c *current) onInlineElement204(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonInlineElement204() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement204(stack["start"])
}

func (c *current) onInlineElement193(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonInlineElement193() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement193(stack["name"], stack["start"])
}

func (c *current) onInlineElement219() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement219() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement219()
}

func (c *current) onInlineElement231() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement231() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement231()
}

func (c *current) onInlineElement233() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonInlineElement233() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement233()
}

func (c *current) onInlineElement226(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonInlineElement226() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement226(stack["start"])
}

func (c *current) onInlineElement215(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonInlineElement215() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement215(stack["name"], stack["start"])
}

func (c *current) onInlineElement241() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement241() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement241()
}

func (c *current) onInlineElement237(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonInlineElement237() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement237(stack["name"])
}

func (c *current) onInlineElement188(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineElement188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement188(stack["element"])
}

func (c *current) onInlineElement249() (bool, error) {
	return c.isSubstitutionEnabled(Replacements)

}

func (p *parser) callonInlineElement249() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement249()
}

func (c *current) onInlineElement252() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonInlineElement252() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement252()
}

func (c *current) onInlineElement254() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonInlineElement254() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement254()
}

func (c *current) onInlineElement256() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonInlineElement256() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement256()
}

func (c *current) onInlineElement258() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonInlineElement258() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement258()
}

func (c *current) onInlineElement260() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonInlineElement260() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement260()
}

func (c *current) onInlineElement262() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonInlineElement262() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement262()
}

func (c *current) onInlineElement247(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineElement247() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement247(stack["element"])
}

func (c *current) onInlineElement271() (bool, error) {
	return c.isSubstitutionEnabled(PostReplacements)

}

func (p *parser) callonInlineElement271() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement271()
}

func (c *current) onInlineElement277() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement277() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement277()
}

func (c *current) onInlineElement283() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement283() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement283()
}

func (c *current) onInlineElement291() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonInlineElement291() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement291()
}

func (c *current) onInlineElement273() (interface{}, error) {
	return types.NewLineBreak()

}

func (p *parser) callonInlineElement273() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement273()
}

func (c *current) onInlineElement269(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineElement269() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement269(stack["element"])
}

func (c *current) onInlineElement297() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineElement297() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement297()
}

func (c *current) onInlineElement293(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonInlineElement293() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement293(stack["ref"])
}

func (c *current) onInlineElement301() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineElement301() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement301()
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.(types.InlineElements))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent5() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonIndexTermContent5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent5()
}

func (c *current) onIndexTermContent14() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonIndexTermContent14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent14()
}

func (c *current) onIndexTermContent26() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent26()
}

func (c *current) onIndexTermContent30() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonIndexTermContent30() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent30()
}

func (c *current) onIndexTermContent39() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent39()
}

func (c *current) onIndexTermContent45() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent45()
}

func (c *current) onIndexTermContent51() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonIndexTermContent51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent51()
}

func (c *current) onIndexTermContent58() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonIndexTermContent58() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent58()
}

func (c *current) onIndexTermContent65() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent65()
}

func (c *current) onIndexTermContent77() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent77()
}

func (c *current) onIndexTermContent79() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonIndexTermContent79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent79()
}

func (c *current) onIndexTermContent72(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonIndexTermContent72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent72(stack["start"])
}

func (c *current) onIndexTermContent61(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonIndexTermContent61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent61(stack["name"], stack["start"])
}

func (c *current) onIndexTermContent87() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent87()
}

func (c *current) onIndexTermContent99() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent99()
}

func (c *current) onIndexTermContent101() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonIndexTermContent101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent101()
}

func (c *current) onIndexTermContent94(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonIndexTermContent94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent94(stack["start"])
}

func (c *current) onIndexTermContent83(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonIndexTermContent83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent83(stack["name"], stack["start"])
}

func (c *current) onIndexTermContent109() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent109()
}

func (c *current) onIndexTermContent105(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonIndexTermContent105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent105(stack["name"])
}

func (c *current) onIndexTermContent56(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonIndexTermContent56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent56(stack["element"])
}

func (c *current) onIndexTermContent115() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonIndexTermContent115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent115()
}

func (c *current) onIndexTermContent35(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonIndexTermContent35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent35(stack["id"], stack["label"])
}

func (c *current) onIndexTermContent122() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent122()
}

func (c *current) onIndexTermContent118(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonIndexTermContent118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent118(stack["id"])
}

func (c *current) onIndexTermContent33() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonIndexTermContent33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent33()
}

func (c *current) onIndexTermContent126() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonIndexTermContent126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent126()
}

func (c *current) onIndexTermContent28(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonIndexTermContent28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent28(stack["element"])
}

func (c *current) onIndexTermContent132() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent132()
}

func (c *current) onIndexTermContent128(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonIndexTermContent128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent128(stack["ref"])
}

func (c *current) onIndexTermContent136() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent136()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onImageBlock3() (bool, error) {
	// AttrPositional1 must not be set
	return types.HasNotAttribute(c.globalStore.getAttributes(), types.AttrPositional1), nil

}

func (p *parser) callonImageBlock3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock3()
}

func (c *current) onImageBlock23() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]"
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonImageBlock23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock23()
}

func (c *current) onImageBlock28() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonImageBlock28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock28()
}

func (c *current) onImageBlock35() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock35()
}

func (c *current) onImageBlock47() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock47()
}

func (c *current) onImageBlock49() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonImageBlock49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock49()
}

func (c *current) onImageBlock42(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonImageBlock42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock42(stack["start"])
}

func (c *current) onImageBlock31(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonImageBlock31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock31(stack["name"], stack["start"])
}

func (c *current) onImageBlock57() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock57()
}

func (c *current) onImageBlock69() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock69()
}

func (c *current) onImageBlock71() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonImageBlock71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock71()
}

func (c *current) onImageBlock64(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonImageBlock64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock64(stack["start"])
}

func (c *current) onImageBlock53(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonImageBlock53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock53(stack["name"], stack["start"])
}

func (c *current) onImageBlock79() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock79()
}

func (c *current) onImageBlock75(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonImageBlock75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock75(stack["name"])
}

func (c *current) onImageBlock26(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonImageBlock26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock26(stack["element"])
}

func (c *current) onImageBlock87() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonImageBlock87() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock87()
}

func (c *current) onImageBlock96() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonImageBlock96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock96()
}

func (c *current) onImageBlock102() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock102()
}

func (c *current) onImageBlock108() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonImageBlock108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock108()
}

func (c *current) onImageBlock115() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonImageBlock115() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock115()
}

func (c *current) onImageBlock122() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock122()
}

func (c *current) onImageBlock134() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock134()
}

func (c *current) onImageBlock136() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonImageBlock136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock136()
}

func (c *current) onImageBlock129(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonImageBlock129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock129(stack["start"])
}

func (c *current) onImageBlock118(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonImageBlock118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock118(stack["name"], stack["start"])
}

func (c *current) onImageBlock144() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock144()
}

func (c *current) onImageBlock156() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock156()
}

func (c *current) onImageBlock158() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonImageBlock158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock158()
}

func (c *current) onImageBlock151(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonImageBlock151() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock151(stack["start"])
}

func (c *current) onImageBlock140(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonImageBlock140() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock140(stack["name"], stack["start"])
}

func (c *current) onImageBlock166() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock166() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock166()
}

func (c *current) onImageBlock162(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonImageBlock162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock162(stack["name"])
}

func (c *current) onImageBlock113(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonImageBlock113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock113(stack["element"])
}

func (c *current) onImageBlock172() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonImageBlock172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock172()
}

func (c *current) onImageBlock92(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonImageBlock92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock92(stack["id"], stack["label"])
}

func (c *current) onImageBlock179() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonImageBlock179() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock179()
}

func (c *current) onImageBlock175(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonImageBlock175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock175(stack["id"])
}

func (c *current) onImageBlock90() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonImageBlock90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock90()
}

func (c *current) onImageBlock183() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonImageBlock183() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock183()
}

func (c *current) onImageBlock85(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonImageBlock85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock85(stack["element"])
}

func (c *current) onImageBlock185() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonImageBlock185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock185()
}

func (c *current) onImageBlock19(elements interface{}) (interface{}, error) {
	return types.Merge(elements.([]interface{})...), nil

}

func (p *parser) callonImageBlock19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock19(stack["elements"])
}

func (c *current) onImageBlock191() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonImageBlock191() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock191()
}

func (c *current) onImageBlock187(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonImageBlock187() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock187(stack["ref"])
}

func (c *current) onImageBlock6(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonImageBlock6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock6(stack["scheme"], stack["path"])
}

func (c *current) onImageBlock200() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock200() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock200()
}

func (c *current) onImageBlock207() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonImageBlock207() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock207()
}

func (c *current) onImageBlock1(path, inlineAttributes interface{}) (interface{}, error) {
	// c.unsetCurrentSubstitution()
	// 'imagesdir' attribute is added after applying the attribute substitutions on the image location
	return types.NewImageBlock(path.(*types.Location), inlineAttributes.(types.Attributes), c.globalStore.getAttributes())

}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage24() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]"
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineImage24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage24()
}

func (c *current) onInlineImage29() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonInlineImage29() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage29()
}

func (c *current) onInlineImage36() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage36()
}

func (c *current) onInlineImage48() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage48()
}

func (c *current) onInlineImage50() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonInlineImage50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage50()
}

func (c *current) onInlineImage43(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonInlineImage43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage43(stack["start"])
}

func (c *current) onInlineImage32(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonInlineImage32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage32(stack["name"], stack["start"])
}

func (c *current) onInlineImage58() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage58()
}

func (c *current) onInlineImage70() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage70()
}

func (c *current) onInlineImage72() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonInlineImage72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage72()
}

func (c *current) onInlineImage65(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonInlineImage65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage65(stack["start"])
}

func (c *current) onInlineImage54(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonInlineImage54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage54(stack["name"], stack["start"])
}

func (c *current) onInlineImage80() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage80()
}

func (c *current) onInlineImage76(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonInlineImage76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage76(stack["name"])
}

func (c *current) onInlineImage27(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineImage27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage27(stack["element"])
}

func (c *current) onInlineImage88() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonInlineImage88() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage88()
}

func (c *current) onInlineImage97() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonInlineImage97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage97()
}

func (c *current) onInlineImage103() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage103()
}

func (c *current) onInlineImage109() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineImage109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage109()
}

func (c *current) onInlineImage116() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonInlineImage116() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage116()
}

func (c *current) onInlineImage123() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage123()
}

func (c *current) onInlineImage135() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage135()
}

func (c *current) onInlineImage137() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonInlineImage137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage137()
}

func (c *current) onInlineImage130(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonInlineImage130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage130(stack["start"])
}

func (c *current) onInlineImage119(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonInlineImage119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage119(stack["name"], stack["start"])
}

func (c *current) onInlineImage145() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage145()
}

func (c *current) onInlineImage157() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage157()
}

func (c *current) onInlineImage159() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonInlineImage159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage159()
}

func (c *current) onInlineImage152(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonInlineImage152() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage152(stack["start"])
}

func (c *current) onInlineImage141(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonInlineImage141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage141(stack["name"], stack["start"])
}

func (c *current) onInlineImage167() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage167()
}

func (c *current) onInlineImage163(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonInlineImage163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage163(stack["name"])
}

func (c *current) onInlineImage114(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineImage114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage114(stack["element"])
}

func (c *current) onInlineImage173() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineImage173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage173()
}

func (c *current) onInlineImage93(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonInlineImage93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage93(stack["id"], stack["label"])
}

func (c *current) onInlineImage180() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonInlineImage180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage180()
}

func (c *current) onInlineImage176(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonInlineImage176() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage176(stack["id"])
}

func (c *current) onInlineImage91() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineImage91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage91()
}

func (c *current) onInlineImage184() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonInlineImage184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage184()
}

func (c *current) onInlineImage86(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineImage86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage86(stack["element"])
}

func (c *current) onInlineImage186() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineImage186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage186()
}

func (c *current) onInlineImage20(elements interface{}) (interface{}, error) {
	return types.Merge(elements.([]interface{})...), nil

}

func (p *parser) callonInlineImage20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage20(stack["elements"])
}

func (c *current) onInlineImage192() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineImage192() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage192()
}

func (c *current) onInlineImage188(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonInlineImage188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage188(stack["ref"])
}

func (c *current) onInlineImage7(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonInlineImage7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage7(stack["scheme"], stack["path"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(*types.Location), inlineAttributes.(types.Attributes), c.globalStore["imagesdir"])

}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(icon, attributes interface{}) (interface{}, error) {
	return types.NewIcon(icon.(string), attributes)

}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["icon"], stack["attributes"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content)

}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote12() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineFootnote12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote12()
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	// TODO: use only this rule with `ref:(FootnoteRef)?`
	return types.NewFootnote(ref.(string), content)

}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onPassthroughMacro7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonPassthroughMacro7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro7()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})

}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro17() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonPassthroughMacro17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro17()
}

func (c *current) onPassthroughMacro10(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))

}

func (p *parser) callonPassthroughMacro10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro10(stack["content"])
}

func (c *current) onRelativeLink22() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]"
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRelativeLink22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink22()
}

func (c *current) onRelativeLink27() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonRelativeLink27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink27()
}

func (c *current) onRelativeLink34() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink34()
}

func (c *current) onRelativeLink46() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink46()
}

func (c *current) onRelativeLink48() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonRelativeLink48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink48()
}

func (c *current) onRelativeLink41(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonRelativeLink41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink41(stack["start"])
}

func (c *current) onRelativeLink30(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonRelativeLink30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink30(stack["name"], stack["start"])
}

func (c *current) onRelativeLink56() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink56()
}

func (c *current) onRelativeLink68() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink68()
}

func (c *current) onRelativeLink70() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonRelativeLink70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink70()
}

func (c *current) onRelativeLink63(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonRelativeLink63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink63(stack["start"])
}

func (c *current) onRelativeLink52(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonRelativeLink52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink52(stack["name"], stack["start"])
}

func (c *current) onRelativeLink78() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink78()
}

func (c *current) onRelativeLink74(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonRelativeLink74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink74(stack["name"])
}

func (c *current) onRelativeLink25(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonRelativeLink25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink25(stack["element"])
}

func (c *current) onRelativeLink86() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonRelativeLink86() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink86()
}

func (c *current) onRelativeLink95() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonRelativeLink95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink95()
}

func (c *current) onRelativeLink101() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink101()
}

func (c *current) onRelativeLink107() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRelativeLink107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink107()
}

func (c *current) onRelativeLink114() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonRelativeLink114() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink114()
}

func (c *current) onRelativeLink121() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink121()
}

func (c *current) onRelativeLink133() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink133()
}

func (c *current) onRelativeLink135() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonRelativeLink135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink135()
}

func (c *current) onRelativeLink128(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonRelativeLink128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink128(stack["start"])
}

func (c *current) onRelativeLink117(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonRelativeLink117() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink117(stack["name"], stack["start"])
}

func (c *current) onRelativeLink143() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink143()
}

func (c *current) onRelativeLink155() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink155()
}

func (c *current) onRelativeLink157() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonRelativeLink157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink157()
}

func (c *current) onRelativeLink150(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonRelativeLink150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink150(stack["start"])
}

func (c *current) onRelativeLink139(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonRelativeLink139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink139(stack["name"], stack["start"])
}

func (c *current) onRelativeLink165() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink165()
}

func (c *current) onRelativeLink161(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonRelativeLink161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink161(stack["name"])
}

func (c *current) onRelativeLink112(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonRelativeLink112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink112(stack["element"])
}

func (c *current) onRelativeLink171() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRelativeLink171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink171()
}

func (c *current) onRelativeLink91(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonRelativeLink91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink91(stack["id"], stack["label"])
}

func (c *current) onRelativeLink178() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonRelativeLink178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink178()
}

func (c *current) onRelativeLink174(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonRelativeLink174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink174(stack["id"])
}

func (c *current) onRelativeLink89() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRelativeLink89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink89()
}

func (c *current) onRelativeLink182() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonRelativeLink182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink182()
}

func (c *current) onRelativeLink84(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonRelativeLink84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink84(stack["element"])
}

func (c *current) onRelativeLink184() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRelativeLink184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink184()
}

func (c *current) onRelativeLink18(elements interface{}) (interface{}, error) {
	return types.Merge(elements.([]interface{})...), nil

}

func (p *parser) callonRelativeLink18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink18(stack["elements"])
}

func (c *current) onRelativeLink190() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeLink190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink190()
}

func (c *current) onRelativeLink186(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonRelativeLink186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink186(stack["ref"])
}

func (c *current) onRelativeLink5(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonRelativeLink5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink5(stack["scheme"], stack["path"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(*types.Location), inlineAttributes.(types.Attributes))

}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink20() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]"
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalLink20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink20()
}

func (c *current) onExternalLink25() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonExternalLink25() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink25()
}

func (c *current) onExternalLink32() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink32()
}

func (c *current) onExternalLink44() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink44()
}

func (c *current) onExternalLink46() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalLink46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink46()
}

func (c *current) onExternalLink39(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalLink39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink39(stack["start"])
}

func (c *current) onExternalLink28(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonExternalLink28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink28(stack["name"], stack["start"])
}

func (c *current) onExternalLink54() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink54()
}

func (c *current) onExternalLink66() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink66()
}

func (c *current) onExternalLink68() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalLink68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink68()
}

func (c *current) onExternalLink61(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalLink61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink61(stack["start"])
}

func (c *current) onExternalLink50(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonExternalLink50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink50(stack["name"], stack["start"])
}

func (c *current) onExternalLink76() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink76()
}

func (c *current) onExternalLink72(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonExternalLink72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink72(stack["name"])
}

func (c *current) onExternalLink23(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExternalLink23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink23(stack["element"])
}

func (c *current) onExternalLink84() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonExternalLink84() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink84()
}

func (c *current) onExternalLink93() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonExternalLink93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink93()
}

func (c *current) onExternalLink99() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink99()
}

func (c *current) onExternalLink105() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalLink105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink105()
}

func (c *current) onExternalLink112() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonExternalLink112() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink112()
}

func (c *current) onExternalLink119() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink119()
}

func (c *current) onExternalLink131() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink131()
}

func (c *current) onExternalLink133() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalLink133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink133()
}

func (c *current) onExternalLink126(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalLink126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink126(stack["start"])
}

func (c *current) onExternalLink115(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonExternalLink115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink115(stack["name"], stack["start"])
}

func (c *current) onExternalLink141() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink141()
}

func (c *current) onExternalLink153() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink153()
}

func (c *current) onExternalLink155() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalLink155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink155()
}

func (c *current) onExternalLink148(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalLink148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink148(stack["start"])
}

func (c *current) onExternalLink137(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonExternalLink137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink137(stack["name"], stack["start"])
}

func (c *current) onExternalLink163() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink163()
}

func (c *current) onExternalLink159(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonExternalLink159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink159(stack["name"])
}

func (c *current) onExternalLink110(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExternalLink110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink110(stack["element"])
}

func (c *current) onExternalLink169() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalLink169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink169()
}

func (c *current) onExternalLink89(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonExternalLink89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink89(stack["id"], stack["label"])
}

func (c *current) onExternalLink176() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonExternalLink176() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink176()
}

func (c *current) onExternalLink172(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonExternalLink172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink172(stack["id"])
}

func (c *current) onExternalLink87() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalLink87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink87()
}

func (c *current) onExternalLink180() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonExternalLink180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink180()
}

func (c *current) onExternalLink82(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExternalLink82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink82(stack["element"])
}

func (c *current) onExternalLink182() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalLink182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink182()
}

func (c *current) onExternalLink16(elements interface{}) (interface{}, error) {
	return types.Merge(elements.([]interface{})...), nil

}

func (p *parser) callonExternalLink16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink16(stack["elements"])
}

func (c *current) onExternalLink188() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExternalLink188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink188()
}

func (c *current) onExternalLink184(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonExternalLink184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink184(stack["ref"])
}

func (c *current) onExternalLink4(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonExternalLink4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink4(stack["scheme"], stack["path"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(*types.Location), inlineAttributes)

}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onListElements13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements13()
}

func (c *current) onListElements20() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonListElements20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements20()
}

func (c *current) onListElements23(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonListElements23() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements23(stack["depth"])
}

func (c *current) onListElements17(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonListElements17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements17(stack["depth"])
}

func (c *current) onListElements24() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonListElements24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements24()
}

func (c *current) onListElements29() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonListElements29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements29()
}

func (c *current) onListElements33() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonListElements33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements33()
}

func (c *current) onListElements37() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonListElements37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements37()
}

func (c *current) onListElements42() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonListElements42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements42()
}

func (c *current) onListElements47(prefix interface{}) (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements47(stack["prefix"])
}

func (c *current) onListElements8(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonListElements8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements8(stack["prefix"])
}

func (c *current) onListElements54() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElements54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements54()
}

func (c *current) onListElements62() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonListElements62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements62()
}

func (c *current) onListElements51(rawline interface{}) (interface{}, error) {
	return types.NewParagraph(rawline)

}

func (p *parser) callonListElements51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements51(stack["rawline"])
}

func (c *current) onListElements5(prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListElement(prefix.(types.OrderedListElementPrefix), content)

}

func (p *parser) callonListElements5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements5(stack["prefix"], stack["content"])
}

func (c *current) onListElements72() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements72()
}

func (c *current) onListElements79() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonListElements79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements79()
}

func (c *current) onListElements82(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonListElements82() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements82(stack["depth"])
}

func (c *current) onListElements76(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonListElements76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements76(stack["depth"])
}

func (c *current) onListElements84() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonListElements84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements84()
}

func (c *current) onListElements86(prefix interface{}) (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements86(stack["prefix"])
}

func (c *current) onListElements67(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonListElements67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements67(stack["prefix"])
}

func (c *current) onListElements97() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonListElements97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements97()
}

func (c *current) onListElements99() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonListElements99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements99()
}

func (c *current) onListElements101() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonListElements101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements101()
}

func (c *current) onListElements103(style interface{}) (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements103(stack["style"])
}

func (c *current) onListElements91(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonListElements91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements91(stack["style"])
}

func (c *current) onListElements110() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElements110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements110()
}

func (c *current) onListElements118() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonListElements118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements118()
}

func (c *current) onListElements107(rawline interface{}) (interface{}, error) {
	return types.NewParagraph(rawline)

}

func (p *parser) callonListElements107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements107(stack["rawline"])
}

func (c *current) onListElements64(prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListElement(prefix.(types.UnorderedListElementPrefix), checkstyle, content)

}

func (p *parser) callonListElements64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements64(stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onListElements127() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonListElements127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements127()
}

func (c *current) onListElements131(ref interface{}) (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements131(stack["ref"])
}

func (c *current) onListElements123(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonListElements123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements123(stack["ref"])
}

func (c *current) onListElements138() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements138()
}

func (c *current) onListElements146() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonListElements146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements146()
}

func (c *current) onListElements135(rawline interface{}) (interface{}, error) {
	return types.NewRawLine(rawline.(string))

}

func (p *parser) callonListElements135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements135(stack["rawline"])
}

func (c *current) onListElements120(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListElement(ref.(int), description.(types.RawLine))

}

func (p *parser) callonListElements120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements120(stack["ref"], stack["description"])
}

func (c *current) onListElements158() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElements158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements158()
}

func (c *current) onListElements161(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListElements161() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements161(stack["separator"])
}

func (c *current) onListElements155(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListElements155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements155(stack["separator"])
}

func (c *current) onListElements168() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonListElements168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements168()
}

func (c *current) onListElements151() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElements151() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements151()
}

func (c *current) onListElements175() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElements175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements175()
}

func (c *current) onListElements178(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListElements178() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements178(stack["separator"])
}

func (c *current) onListElements172(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListElements172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements172(stack["separator"])
}

func (c *current) onListElements186() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements186()
}

func (c *current) onListElements193() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonListElements193() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements193()
}

func (c *current) onListElements204() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements204() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements204()
}

func (c *current) onListElements211() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonListElements211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements211()
}

func (c *current) onListElements196() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElements196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements196()
}

func (c *current) onListElements226() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements226() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements226()
}

func (c *current) onListElements233() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonListElements233() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements233()
}

func (c *current) onListElements218() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElements218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements218()
}

func (c *current) onListElements241() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements241() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements241()
}

func (c *current) onListElements246() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonListElements246() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements246()
}

func (c *current) onListElements254() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements254() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements254()
}

func (c *current) onListElements261() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonListElements261() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements261()
}

func (c *current) onListElements264(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonListElements264() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements264(stack["depth"])
}

func (c *current) onListElements258(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonListElements258() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements258(stack["depth"])
}

func (c *current) onListElements265() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonListElements265() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements265()
}

func (c *current) onListElements270() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonListElements270() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements270()
}

func (c *current) onListElements274() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonListElements274() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements274()
}

func (c *current) onListElements278() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonListElements278() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements278()
}

func (c *current) onListElements283() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonListElements283() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements283()
}

func (c *current) onListElements288(prefix interface{}) (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements288() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements288(stack["prefix"])
}

func (c *current) onListElements249(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonListElements249() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements249(stack["prefix"])
}

func (c *current) onListElements297() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements297() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements297()
}

func (c *current) onListElements304() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonListElements304() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements304()
}

func (c *current) onListElements307(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonListElements307() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements307(stack["depth"])
}

func (c *current) onListElements301(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonListElements301() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements301(stack["depth"])
}

func (c *current) onListElements309() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonListElements309() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements309()
}

func (c *current) onListElements311(prefix interface{}) (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements311() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements311(stack["prefix"])
}

func (c *current) onListElements292(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonListElements292() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements292(stack["prefix"])
}

func (c *current) onListElements319() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonListElements319() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements319()
}

func (c *current) onListElements323(ref interface{}) (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements323() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements323(stack["ref"])
}

func (c *current) onListElements315(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonListElements315() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements315(stack["ref"])
}

func (c *current) onListElements335() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElements335() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements335()
}

func (c *current) onListElements338(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListElements338() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements338(stack["separator"])
}

func (c *current) onListElements332(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListElements332() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements332(stack["separator"])
}

func (c *current) onListElements345() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonListElements345() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements345()
}

func (c *current) onListElements328() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElements328() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements328()
}

func (c *current) onListElements351() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElements351() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements351()
}

func (c *current) onListElements354(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListElements354() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements354(stack["separator"])
}

func (c *current) onListElements348(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListElements348() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements348(stack["separator"])
}

func (c *current) onListElements367() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements367() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements367()
}

func (c *current) onListElements374() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonListElements374() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements374()
}

func (c *current) onListElements381() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements381() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements381()
}

func (c *current) onListElements388() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonListElements388() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements388()
}

func (c *current) onListElements395() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements395() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements395()
}

func (c *current) onListElements402() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonListElements402() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements402()
}

func (c *current) onListElements409() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements409() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements409()
}

func (c *current) onListElements416() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonListElements416() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements416()
}

func (c *current) onListElements423() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements423() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements423()
}

func (c *current) onListElements430() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonListElements430() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements430()
}

func (c *current) onListElements437() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements437() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements437()
}

func (c *current) onListElements444() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonListElements444() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements444()
}

func (c *current) onListElements451() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements451() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements451()
}

func (c *current) onListElements458() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonListElements458() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements458()
}

func (c *current) onListElements465() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements465() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements465()
}

func (c *current) onListElements472() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonListElements472() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements472()
}

func (c *current) onListElements356(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonListElements356() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements356(stack["delimiter"])
}

func (c *current) onListElements475() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil

}

func (p *parser) callonListElements475() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements475()
}

func (c *current) onListElements483() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonListElements483() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements483()
}

func (c *current) onListElements215(content interface{}) (interface{}, error) {
	// do not retain the EOL chars
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElements215() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements215(stack["content"])
}

func (c *current) onListElements181(content interface{}) (interface{}, error) {
	if content == nil {
		return nil, nil
	}
	return types.NewParagraph(content)

}

func (p *parser) callonListElements181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements181(stack["content"])
}

func (c *current) onListElements487() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements487() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements487()
}

func (c *current) onListElements491() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElements491() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements491()
}

func (c *current) onListElements499() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonListElements499() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements499()
}

func (c *current) onListElements485(content interface{}) (interface{}, error) {
	return types.NewParagraph(content)

}

func (p *parser) callonListElements485() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements485(stack["content"])
}

func (c *current) onListElements148(term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListElement(len(separator.(string))-1, term, description)

}

func (p *parser) callonListElements148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements148(stack["term"], stack["separator"], stack["description"])
}

func (c *current) onListElements1(firstElement, otherElements interface{}) (interface{}, error) {
	return types.NewListElements(append([]interface{}{firstElement}, otherElements.([]interface{})...))

}

func (p *parser) callonListElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements1(stack["firstElement"], stack["otherElements"])
}

func (c *current) onOtherListElements1(otherElements interface{}) (interface{}, error) {
	return types.Flatten(otherElements.([]interface{})), nil
}

func (p *parser) callonOtherListElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElements1(stack["otherElements"])
}

func (c *current) onOtherListElement19() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement19()
}

func (c *current) onOtherListElement26() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherListElement26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement26()
}

func (c *current) onOtherListElement11() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonOtherListElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement11()
}

func (c *current) onOtherListElement37() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement37()
}

func (c *current) onOtherListElement44() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOtherListElement44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement44()
}

func (c *current) onOtherListElement47(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOtherListElement47() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement47(stack["depth"])
}

func (c *current) onOtherListElement41(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonOtherListElement41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement41(stack["depth"])
}

func (c *current) onOtherListElement48() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonOtherListElement48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement48()
}

func (c *current) onOtherListElement53() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonOtherListElement53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement53()
}

func (c *current) onOtherListElement57() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonOtherListElement57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement57()
}

func (c *current) onOtherListElement61() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonOtherListElement61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement61()
}

func (c *current) onOtherListElement66() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonOtherListElement66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement66()
}

func (c *current) onOtherListElement71(prefix interface{}) (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement71(stack["prefix"])
}

func (c *current) onOtherListElement32(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOtherListElement32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement32(stack["prefix"])
}

func (c *current) onOtherListElement78() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonOtherListElement78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement78()
}

func (c *current) onOtherListElement86() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherListElement86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement86()
}

func (c *current) onOtherListElement75(rawline interface{}) (interface{}, error) {
	return types.NewParagraph(rawline)

}

func (p *parser) callonOtherListElement75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement75(stack["rawline"])
}

func (c *current) onOtherListElement29(prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListElement(prefix.(types.OrderedListElementPrefix), content)

}

func (p *parser) callonOtherListElement29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement29(stack["prefix"], stack["content"])
}

func (c *current) onOtherListElement8(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonOtherListElement8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement8(stack["element"])
}

func (c *current) onOtherListElement102() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement102()
}

func (c *current) onOtherListElement109() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOtherListElement109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement109()
}

func (c *current) onOtherListElement112(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOtherListElement112() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement112(stack["depth"])
}

func (c *current) onOtherListElement106(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonOtherListElement106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement106(stack["depth"])
}

func (c *current) onOtherListElement113() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonOtherListElement113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement113()
}

func (c *current) onOtherListElement118() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonOtherListElement118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement118()
}

func (c *current) onOtherListElement122() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonOtherListElement122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement122()
}

func (c *current) onOtherListElement126() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonOtherListElement126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement126()
}

func (c *current) onOtherListElement131() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonOtherListElement131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement131()
}

func (c *current) onOtherListElement136(prefix interface{}) (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement136(stack["prefix"])
}

func (c *current) onOtherListElement97(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOtherListElement97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement97(stack["prefix"])
}

func (c *current) onOtherListElement143() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonOtherListElement143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement143()
}

func (c *current) onOtherListElement151() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherListElement151() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement151()
}

func (c *current) onOtherListElement140(rawline interface{}) (interface{}, error) {
	return types.NewParagraph(rawline)

}

func (p *parser) callonOtherListElement140() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement140(stack["rawline"])
}

func (c *current) onOtherListElement94(prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListElement(prefix.(types.OrderedListElementPrefix), content)

}

func (p *parser) callonOtherListElement94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement94(stack["prefix"], stack["content"])
}

func (c *current) onOtherListElement88(attributes, element interface{}) (interface{}, error) {
	return append(attributes.([]interface{}), element), nil

}

func (p *parser) callonOtherListElement88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement88(stack["attributes"], stack["element"])
}

func (c *current) onOtherListElement164() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement164()
}

func (c *current) onOtherListElement171() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherListElement171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement171()
}

func (c *current) onOtherListElement156() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonOtherListElement156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement156()
}

func (c *current) onOtherListElement182() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement182()
}

func (c *current) onOtherListElement189() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOtherListElement189() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement189()
}

func (c *current) onOtherListElement192(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOtherListElement192() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement192(stack["depth"])
}

func (c *current) onOtherListElement186(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonOtherListElement186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement186(stack["depth"])
}

func (c *current) onOtherListElement194() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonOtherListElement194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement194()
}

func (c *current) onOtherListElement196(prefix interface{}) (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement196(stack["prefix"])
}

func (c *current) onOtherListElement177(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOtherListElement177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement177(stack["prefix"])
}

func (c *current) onOtherListElement207() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonOtherListElement207() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement207()
}

func (c *current) onOtherListElement209() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonOtherListElement209() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement209()
}

func (c *current) onOtherListElement211() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonOtherListElement211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement211()
}

func (c *current) onOtherListElement213(style interface{}) (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement213() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement213(stack["style"])
}

func (c *current) onOtherListElement201(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonOtherListElement201() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement201(stack["style"])
}

func (c *current) onOtherListElement220() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonOtherListElement220() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement220()
}

func (c *current) onOtherListElement228() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherListElement228() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement228()
}

func (c *current) onOtherListElement217(rawline interface{}) (interface{}, error) {
	return types.NewParagraph(rawline)

}

func (p *parser) callonOtherListElement217() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement217(stack["rawline"])
}

func (c *current) onOtherListElement174(prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListElement(prefix.(types.UnorderedListElementPrefix), checkstyle, content)

}

func (p *parser) callonOtherListElement174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement174(stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onOtherListElement153(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonOtherListElement153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement153(stack["element"])
}

func (c *current) onOtherListElement244() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement244() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement244()
}

func (c *current) onOtherListElement251() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOtherListElement251() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement251()
}

func (c *current) onOtherListElement254(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOtherListElement254() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement254(stack["depth"])
}

func (c *current) onOtherListElement248(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonOtherListElement248() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement248(stack["depth"])
}

func (c *current) onOtherListElement256() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonOtherListElement256() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement256()
}

func (c *current) onOtherListElement258(prefix interface{}) (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement258() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement258(stack["prefix"])
}

func (c *current) onOtherListElement239(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOtherListElement239() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement239(stack["prefix"])
}

func (c *current) onOtherListElement269() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonOtherListElement269() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement269()
}

func (c *current) onOtherListElement271() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonOtherListElement271() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement271()
}

func (c *current) onOtherListElement273() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonOtherListElement273() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement273()
}

func (c *current) onOtherListElement275(style interface{}) (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement275() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement275(stack["style"])
}

func (c *current) onOtherListElement263(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonOtherListElement263() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement263(stack["style"])
}

func (c *current) onOtherListElement282() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonOtherListElement282() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement282()
}

func (c *current) onOtherListElement290() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherListElement290() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement290()
}

func (c *current) onOtherListElement279(rawline interface{}) (interface{}, error) {
	return types.NewParagraph(rawline)

}

func (p *parser) callonOtherListElement279() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement279(stack["rawline"])
}

func (c *current) onOtherListElement236(prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListElement(prefix.(types.UnorderedListElementPrefix), checkstyle, content)

}

func (p *parser) callonOtherListElement236() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement236(stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onOtherListElement230(attributes, element interface{}) (interface{}, error) {
	return append(attributes.([]interface{}), element), nil

}

func (p *parser) callonOtherListElement230() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement230(stack["attributes"], stack["element"])
}

func (c *current) onOtherListElement303() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement303() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement303()
}

func (c *current) onOtherListElement310() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherListElement310() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement310()
}

func (c *current) onOtherListElement295() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonOtherListElement295() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement295()
}

func (c *current) onOtherListElement320() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonOtherListElement320() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement320()
}

func (c *current) onOtherListElement324(ref interface{}) (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement324() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement324(stack["ref"])
}

func (c *current) onOtherListElement316(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonOtherListElement316() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement316(stack["ref"])
}

func (c *current) onOtherListElement331() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement331() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement331()
}

func (c *current) onOtherListElement339() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherListElement339() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement339()
}

func (c *current) onOtherListElement328(rawline interface{}) (interface{}, error) {
	return types.NewRawLine(rawline.(string))

}

func (p *parser) callonOtherListElement328() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement328(stack["rawline"])
}

func (c *current) onOtherListElement313(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListElement(ref.(int), description.(types.RawLine))

}

func (p *parser) callonOtherListElement313() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement313(stack["ref"], stack["description"])
}

func (c *current) onOtherListElement292(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonOtherListElement292() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement292(stack["element"])
}

func (c *current) onOtherListElement354() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonOtherListElement354() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement354()
}

func (c *current) onOtherListElement358(ref interface{}) (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement358() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement358(stack["ref"])
}

func (c *current) onOtherListElement350(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonOtherListElement350() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement350(stack["ref"])
}

func (c *current) onOtherListElement365() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement365() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement365()
}

func (c *current) onOtherListElement373() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherListElement373() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement373()
}

func (c *current) onOtherListElement362(rawline interface{}) (interface{}, error) {
	return types.NewRawLine(rawline.(string))

}

func (p *parser) callonOtherListElement362() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement362(stack["rawline"])
}

func (c *current) onOtherListElement347(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListElement(ref.(int), description.(types.RawLine))

}

func (p *parser) callonOtherListElement347() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement347(stack["ref"], stack["description"])
}

func (c *current) onOtherListElement341(attributes, element interface{}) (interface{}, error) {
	return append(attributes.([]interface{}), element), nil

}

func (p *parser) callonOtherListElement341() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement341(stack["attributes"], stack["element"])
}

func (c *current) onOtherListElement387() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement387() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement387()
}

func (c *current) onOtherListElement394() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherListElement394() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement394()
}

func (c *current) onOtherListElement379() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonOtherListElement379() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement379()
}

func (c *current) onOtherListElement407() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonOtherListElement407() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement407()
}

func (c *current) onOtherListElement410(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonOtherListElement410() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement410(stack["separator"])
}

func (c *current) onOtherListElement404(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonOtherListElement404() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement404(stack["separator"])
}

func (c *current) onOtherListElement417() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherListElement417() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement417()
}

func (c *current) onOtherListElement400() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonOtherListElement400() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement400()
}

func (c *current) onOtherListElement424() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonOtherListElement424() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement424()
}

func (c *current) onOtherListElement427(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonOtherListElement427() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement427(stack["separator"])
}

func (c *current) onOtherListElement421(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonOtherListElement421() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement421(stack["separator"])
}

func (c *current) onOtherListElement435() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement435() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement435()
}

func (c *current) onOtherListElement442() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherListElement442() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement442()
}

func (c *current) onOtherListElement453() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement453() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement453()
}

func (c *current) onOtherListElement460() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherListElement460() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement460()
}

func (c *current) onOtherListElement445() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonOtherListElement445() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement445()
}

func (c *current) onOtherListElement475() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement475() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement475()
}

func (c *current) onOtherListElement482() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherListElement482() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement482()
}

func (c *current) onOtherListElement467() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonOtherListElement467() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement467()
}

func (c *current) onOtherListElement490() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement490() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement490()
}

func (c *current) onOtherListElement495() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherListElement495() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement495()
}

func (c *current) onOtherListElement503() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement503() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement503()
}

func (c *current) onOtherListElement510() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOtherListElement510() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement510()
}

func (c *current) onOtherListElement513(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOtherListElement513() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement513(stack["depth"])
}

func (c *current) onOtherListElement507(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonOtherListElement507() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement507(stack["depth"])
}

func (c *current) onOtherListElement514() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonOtherListElement514() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement514()
}

func (c *current) onOtherListElement519() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonOtherListElement519() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement519()
}

func (c *current) onOtherListElement523() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonOtherListElement523() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement523()
}

func (c *current) onOtherListElement527() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonOtherListElement527() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement527()
}

func (c *current) onOtherListElement532() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonOtherListElement532() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement532()
}

func (c *current) onOtherListElement537(prefix interface{}) (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement537() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement537(stack["prefix"])
}

func (c *current) onOtherListElement498(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOtherListElement498() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement498(stack["prefix"])
}

func (c *current) onOtherListElement546() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement546() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement546()
}

func (c *current) onOtherListElement553() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOtherListElement553() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement553()
}

func (c *current) onOtherListElement556(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOtherListElement556() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement556(stack["depth"])
}

func (c *current) onOtherListElement550(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonOtherListElement550() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement550(stack["depth"])
}

func (c *current) onOtherListElement558() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonOtherListElement558() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement558()
}

func (c *current) onOtherListElement560(prefix interface{}) (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement560() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement560(stack["prefix"])
}

func (c *current) onOtherListElement541(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOtherListElement541() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement541(stack["prefix"])
}

func (c *current) onOtherListElement568() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonOtherListElement568() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement568()
}

func (c *current) onOtherListElement572(ref interface{}) (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement572() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement572(stack["ref"])
}

func (c *current) onOtherListElement564(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonOtherListElement564() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement564(stack["ref"])
}

func (c *current) onOtherListElement584() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonOtherListElement584() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement584()
}

func (c *current) onOtherListElement587(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonOtherListElement587() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement587(stack["separator"])
}

func (c *current) onOtherListElement581(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonOtherListElement581() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement581(stack["separator"])
}

func (c *current) onOtherListElement594() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherListElement594() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement594()
}

func (c *current) onOtherListElement577() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonOtherListElement577() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement577()
}

func (c *current) onOtherListElement600() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonOtherListElement600() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement600()
}

func (c *current) onOtherListElement603(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonOtherListElement603() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement603(stack["separator"])
}

func (c *current) onOtherListElement597(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonOtherListElement597() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement597(stack["separator"])
}

func (c *current) onOtherListElement616() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement616() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement616()
}

func (c *current) onOtherListElement623() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherListElement623() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement623()
}

func (c *current) onOtherListElement630() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement630() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement630()
}

func (c *current) onOtherListElement637() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherListElement637() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement637()
}

func (c *current) onOtherListElement644() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement644() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement644()
}

func (c *current) onOtherListElement651() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherListElement651() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement651()
}

func (c *current) onOtherListElement658() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement658() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement658()
}

func (c *current) onOtherListElement665() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherListElement665() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement665()
}

func (c *current) onOtherListElement672() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement672() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement672()
}

func (c *current) onOtherListElement679() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherListElement679() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement679()
}

func (c *current) onOtherListElement686() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement686() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement686()
}

func (c *current) onOtherListElement693() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherListElement693() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement693()
}

func (c *current) onOtherListElement700() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement700() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement700()
}

func (c *current) onOtherListElement707() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherListElement707() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement707()
}

func (c *current) onOtherListElement714() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement714() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement714()
}

func (c *current) onOtherListElement721() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherListElement721() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement721()
}

func (c *current) onOtherListElement605(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonOtherListElement605() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement605(stack["delimiter"])
}

func (c *current) onOtherListElement724() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil

}

func (p *parser) callonOtherListElement724() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement724()
}

func (c *current) onOtherListElement732() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherListElement732() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement732()
}

func (c *current) onOtherListElement464(content interface{}) (interface{}, error) {
	// do not retain the EOL chars
	return types.NewRawLine(content.(string))

}

func (p *parser) callonOtherListElement464() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement464(stack["content"])
}

func (c *current) onOtherListElement430(content interface{}) (interface{}, error) {
	if content == nil {
		return nil, nil
	}
	return types.NewParagraph(content)

}

func (p *parser) callonOtherListElement430() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement430(stack["content"])
}

func (c *current) onOtherListElement736() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement736() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement736()
}

func (c *current) onOtherListElement740() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonOtherListElement740() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement740()
}

func (c *current) onOtherListElement748() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherListElement748() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement748()
}

func (c *current) onOtherListElement734(content interface{}) (interface{}, error) {
	return types.NewParagraph(content)

}

func (p *parser) callonOtherListElement734() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement734(stack["content"])
}

func (c *current) onOtherListElement397(term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListElement(len(separator.(string))-1, term, description)

}

func (p *parser) callonOtherListElement397() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement397(stack["term"], stack["separator"], stack["description"])
}

func (c *current) onOtherListElement376(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonOtherListElement376() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement376(stack["element"])
}

func (c *current) onOtherListElement766() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonOtherListElement766() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement766()
}

func (c *current) onOtherListElement769(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonOtherListElement769() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement769(stack["separator"])
}

func (c *current) onOtherListElement763(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonOtherListElement763() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement763(stack["separator"])
}

func (c *current) onOtherListElement776() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherListElement776() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement776()
}

func (c *current) onOtherListElement759() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonOtherListElement759() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement759()
}

func (c *current) onOtherListElement783() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonOtherListElement783() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement783()
}

func (c *current) onOtherListElement786(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonOtherListElement786() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement786(stack["separator"])
}

func (c *current) onOtherListElement780(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonOtherListElement780() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement780(stack["separator"])
}

func (c *current) onOtherListElement794() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement794() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement794()
}

func (c *current) onOtherListElement801() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherListElement801() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement801()
}

func (c *current) onOtherListElement812() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement812() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement812()
}

func (c *current) onOtherListElement819() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherListElement819() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement819()
}

func (c *current) onOtherListElement804() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonOtherListElement804() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement804()
}

func (c *current) onOtherListElement834() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement834() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement834()
}

func (c *current) onOtherListElement841() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherListElement841() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement841()
}

func (c *current) onOtherListElement826() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonOtherListElement826() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement826()
}

func (c *current) onOtherListElement849() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement849() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement849()
}

func (c *current) onOtherListElement854() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherListElement854() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement854()
}

func (c *current) onOtherListElement862() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement862() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement862()
}

func (c *current) onOtherListElement869() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOtherListElement869() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement869()
}

func (c *current) onOtherListElement872(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOtherListElement872() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement872(stack["depth"])
}

func (c *current) onOtherListElement866(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonOtherListElement866() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement866(stack["depth"])
}

func (c *current) onOtherListElement873() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonOtherListElement873() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement873()
}

func (c *current) onOtherListElement878() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonOtherListElement878() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement878()
}

func (c *current) onOtherListElement882() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonOtherListElement882() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement882()
}

func (c *current) onOtherListElement886() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonOtherListElement886() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement886()
}

func (c *current) onOtherListElement891() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonOtherListElement891() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement891()
}

func (c *current) onOtherListElement896(prefix interface{}) (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement896() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement896(stack["prefix"])
}

func (c *current) onOtherListElement857(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOtherListElement857() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement857(stack["prefix"])
}

func (c *current) onOtherListElement905() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement905() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement905()
}

func (c *current) onOtherListElement912() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOtherListElement912() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement912()
}

func (c *current) onOtherListElement915(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOtherListElement915() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement915(stack["depth"])
}

func (c *current) onOtherListElement909(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonOtherListElement909() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement909(stack["depth"])
}

func (c *current) onOtherListElement917() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonOtherListElement917() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement917()
}

func (c *current) onOtherListElement919(prefix interface{}) (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement919() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement919(stack["prefix"])
}

func (c *current) onOtherListElement900(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOtherListElement900() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement900(stack["prefix"])
}

func (c *current) onOtherListElement927() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonOtherListElement927() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement927()
}

func (c *current) onOtherListElement931(ref interface{}) (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement931() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement931(stack["ref"])
}

func (c *current) onOtherListElement923(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonOtherListElement923() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement923(stack["ref"])
}

func (c *current) onOtherListElement943() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonOtherListElement943() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement943()
}

func (c *current) onOtherListElement946(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonOtherListElement946() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement946(stack["separator"])
}

func (c *current) onOtherListElement940(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonOtherListElement940() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement940(stack["separator"])
}

func (c *current) onOtherListElement953() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherListElement953() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement953()
}

func (c *current) onOtherListElement936() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonOtherListElement936() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement936()
}

func (c *current) onOtherListElement959() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonOtherListElement959() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement959()
}

func (c *current) onOtherListElement962(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonOtherListElement962() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement962(stack["separator"])
}

func (c *current) onOtherListElement956(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonOtherListElement956() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement956(stack["separator"])
}

func (c *current) onOtherListElement975() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement975() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement975()
}

func (c *current) onOtherListElement982() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherListElement982() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement982()
}

func (c *current) onOtherListElement989() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement989() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement989()
}

func (c *current) onOtherListElement996() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherListElement996() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement996()
}

func (c *current) onOtherListElement1003() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement1003() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1003()
}

func (c *current) onOtherListElement1010() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherListElement1010() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1010()
}

func (c *current) onOtherListElement1017() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement1017() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1017()
}

func (c *current) onOtherListElement1024() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherListElement1024() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1024()
}

func (c *current) onOtherListElement1031() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement1031() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1031()
}

func (c *current) onOtherListElement1038() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherListElement1038() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1038()
}

func (c *current) onOtherListElement1045() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement1045() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1045()
}

func (c *current) onOtherListElement1052() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherListElement1052() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1052()
}

func (c *current) onOtherListElement1059() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement1059() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1059()
}

func (c *current) onOtherListElement1066() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherListElement1066() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1066()
}

func (c *current) onOtherListElement1073() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement1073() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1073()
}

func (c *current) onOtherListElement1080() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherListElement1080() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1080()
}

func (c *current) onOtherListElement964(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonOtherListElement964() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement964(stack["delimiter"])
}

func (c *current) onOtherListElement1083() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil

}

func (p *parser) callonOtherListElement1083() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1083()
}

func (c *current) onOtherListElement1091() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherListElement1091() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1091()
}

func (c *current) onOtherListElement823(content interface{}) (interface{}, error) {
	// do not retain the EOL chars
	return types.NewRawLine(content.(string))

}

func (p *parser) callonOtherListElement823() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement823(stack["content"])
}

func (c *current) onOtherListElement789(content interface{}) (interface{}, error) {
	if content == nil {
		return nil, nil
	}
	return types.NewParagraph(content)

}

func (p *parser) callonOtherListElement789() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement789(stack["content"])
}

func (c *current) onOtherListElement1095() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement1095() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1095()
}

func (c *current) onOtherListElement1099() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonOtherListElement1099() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1099()
}

func (c *current) onOtherListElement1107() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherListElement1107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1107()
}

func (c *current) onOtherListElement1093(content interface{}) (interface{}, error) {
	return types.NewParagraph(content)

}

func (p *parser) callonOtherListElement1093() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1093(stack["content"])
}

func (c *current) onOtherListElement756(term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListElement(len(separator.(string))-1, term, description)

}

func (p *parser) callonOtherListElement756() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement756(stack["term"], stack["separator"], stack["description"])
}

func (c *current) onOtherListElement750(attributes, element interface{}) (interface{}, error) {
	return append(attributes.([]interface{}), element), nil

}

func (p *parser) callonOtherListElement750() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement750(stack["attributes"], stack["element"])
}

func (c *current) onOtherListElement1115() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement1115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1115()
}

func (c *current) onOtherListElement1123() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherListElement1123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1123()
}

func (c *current) onOtherListElement1109(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonOtherListElement1109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1109(stack["content"])
}

func (c *current) onOtherListElement1138() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement1138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1138()
}

func (c *current) onOtherListElement1145() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherListElement1145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1145()
}

func (c *current) onOtherListElement1130() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonOtherListElement1130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1130()
}

func (c *current) onOtherListElement1153() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement1153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1153()
}

func (c *current) onOtherListElement1158() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherListElement1158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1158()
}

func (c *current) onOtherListElement1166() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement1166() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1166()
}

func (c *current) onOtherListElement1173() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOtherListElement1173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1173()
}

func (c *current) onOtherListElement1176(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOtherListElement1176() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1176(stack["depth"])
}

func (c *current) onOtherListElement1170(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonOtherListElement1170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1170(stack["depth"])
}

func (c *current) onOtherListElement1177() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonOtherListElement1177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1177()
}

func (c *current) onOtherListElement1182() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonOtherListElement1182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1182()
}

func (c *current) onOtherListElement1186() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonOtherListElement1186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1186()
}

func (c *current) onOtherListElement1190() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonOtherListElement1190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1190()
}

func (c *current) onOtherListElement1195() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonOtherListElement1195() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1195()
}

func (c *current) onOtherListElement1200(prefix interface{}) (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement1200() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1200(stack["prefix"])
}

func (c *current) onOtherListElement1161(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOtherListElement1161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1161(stack["prefix"])
}

func (c *current) onOtherListElement1209() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement1209() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1209()
}

func (c *current) onOtherListElement1216() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOtherListElement1216() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1216()
}

func (c *current) onOtherListElement1219(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOtherListElement1219() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1219(stack["depth"])
}

func (c *current) onOtherListElement1213(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonOtherListElement1213() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1213(stack["depth"])
}

func (c *current) onOtherListElement1221() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonOtherListElement1221() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1221()
}

func (c *current) onOtherListElement1223(prefix interface{}) (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement1223() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1223(stack["prefix"])
}

func (c *current) onOtherListElement1204(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOtherListElement1204() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1204(stack["prefix"])
}

func (c *current) onOtherListElement1231() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonOtherListElement1231() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1231()
}

func (c *current) onOtherListElement1235(ref interface{}) (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement1235() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1235(stack["ref"])
}

func (c *current) onOtherListElement1227(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonOtherListElement1227() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1227(stack["ref"])
}

func (c *current) onOtherListElement1247() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonOtherListElement1247() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1247()
}

func (c *current) onOtherListElement1250(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonOtherListElement1250() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1250(stack["separator"])
}

func (c *current) onOtherListElement1244(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonOtherListElement1244() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1244(stack["separator"])
}

func (c *current) onOtherListElement1257() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherListElement1257() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1257()
}

func (c *current) onOtherListElement1240() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonOtherListElement1240() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1240()
}

func (c *current) onOtherListElement1263() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonOtherListElement1263() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1263()
}

func (c *current) onOtherListElement1266(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonOtherListElement1266() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1266(stack["separator"])
}

func (c *current) onOtherListElement1260(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonOtherListElement1260() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1260(stack["separator"])
}

func (c *current) onOtherListElement1279() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement1279() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1279()
}

func (c *current) onOtherListElement1286() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherListElement1286() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1286()
}

func (c *current) onOtherListElement1293() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement1293() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1293()
}

func (c *current) onOtherListElement1300() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherListElement1300() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1300()
}

func (c *current) onOtherListElement1307() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement1307() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1307()
}

func (c *current) onOtherListElement1314() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherListElement1314() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1314()
}

func (c *current) onOtherListElement1321() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement1321() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1321()
}

func (c *current) onOtherListElement1328() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherListElement1328() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1328()
}

func (c *current) onOtherListElement1335() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement1335() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1335()
}

func (c *current) onOtherListElement1342() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherListElement1342() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1342()
}

func (c *current) onOtherListElement1349() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement1349() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1349()
}

func (c *current) onOtherListElement1356() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherListElement1356() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1356()
}

func (c *current) onOtherListElement1363() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement1363() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1363()
}

func (c *current) onOtherListElement1370() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherListElement1370() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1370()
}

func (c *current) onOtherListElement1377() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOtherListElement1377() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1377()
}

func (c *current) onOtherListElement1384() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherListElement1384() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1384()
}

func (c *current) onOtherListElement1268(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonOtherListElement1268() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1268(stack["delimiter"])
}

func (c *current) onOtherListElement1387() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil

}

func (p *parser) callonOtherListElement1387() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1387()
}

func (c *current) onOtherListElement1395() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherListElement1395() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1395()
}

func (c *current) onOtherListElement1127(content interface{}) (interface{}, error) {
	// do not retain the EOL chars
	return types.NewRawLine(content.(string))

}

func (p *parser) callonOtherListElement1127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1127(stack["content"])
}

func (c *current) onOtherListElement1125(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonOtherListElement1125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1125(stack["element"])
}

func (c *current) onOtherListElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonOtherListElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherListElement1(stack["element"])
}

func (c *current) onListElementContinuation9() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuation9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuation9()
}

func (c *current) onListElementContinuation14() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonListElementContinuation14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuation14()
}

func (c *current) onListElementContinuation20() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuation20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuation20()
}

func (c *current) onListElementContinuation25() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonListElementContinuation25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuation25()
}

func (c *current) onListElementContinuation1(offset, element interface{}) (interface{}, error) {
	return types.NewListElementContinuation(len(offset.([]interface{})), element)

}

func (p *parser) callonListElementContinuation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuation1(stack["offset"], stack["element"])
}

func (c *current) onListElementContinuationElement19() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement19()
}

func (c *current) onListElementContinuationElement26() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonListElementContinuationElement26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement26()
}

func (c *current) onListElementContinuationElement11() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElementContinuationElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement11()
}

func (c *current) onListElementContinuationElement32() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement32()
}

func (c *current) onListElementContinuationElement42() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement42()
}

func (c *current) onListElementContinuationElement55() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonListElementContinuationElement55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement55()
}

func (c *current) onListElementContinuationElement59() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonListElementContinuationElement59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement59()
}

func (c *current) onListElementContinuationElement64() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonListElementContinuationElement64() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement64()
}

func (c *current) onListElementContinuationElement71() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement71()
}

func (c *current) onListElementContinuationElement83() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement83()
}

func (c *current) onListElementContinuationElement85() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonListElementContinuationElement85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement85()
}

func (c *current) onListElementContinuationElement78(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonListElementContinuationElement78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement78(stack["start"])
}

func (c *current) onListElementContinuationElement67(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonListElementContinuationElement67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement67(stack["name"], stack["start"])
}

func (c *current) onListElementContinuationElement93() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement93()
}

func (c *current) onListElementContinuationElement105() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement105()
}

func (c *current) onListElementContinuationElement107() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonListElementContinuationElement107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement107()
}

func (c *current) onListElementContinuationElement100(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonListElementContinuationElement100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement100(stack["start"])
}

func (c *current) onListElementContinuationElement89(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonListElementContinuationElement89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement89(stack["name"], stack["start"])
}

func (c *current) onListElementContinuationElement115() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement115()
}

func (c *current) onListElementContinuationElement111(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonListElementContinuationElement111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement111(stack["name"])
}

func (c *current) onListElementContinuationElement62(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonListElementContinuationElement62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement62(stack["element"])
}

func (c *current) onListElementContinuationElement121() (interface{}, error) {
	// standalone '{'
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonListElementContinuationElement121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement121()
}

func (c *current) onListElementContinuationElement47(element interface{}) (interface{}, error) {

	return element, nil

}

func (p *parser) callonListElementContinuationElement47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement47(stack["element"])
}

func (c *current) onListElementContinuationElement40(elements interface{}) (interface{}, error) {
	return types.Reduce(elements.([]interface{}), strings.TrimSpace), nil

}

func (p *parser) callonListElementContinuationElement40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement40(stack["elements"])
}

func (c *current) onListElementContinuationElement128() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonListElementContinuationElement128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement128()
}

func (c *current) onListElementContinuationElement28(name, value interface{}) (interface{}, error) {
	d := types.NewAttributeDeclaration(name.(string), types.Reduce(value, strings.TrimSpace))
	return d, nil

}

func (p *parser) callonListElementContinuationElement28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement28(stack["name"], stack["value"])
}

func (c *current) onListElementContinuationElement134() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement134()
}

func (c *current) onListElementContinuationElement143() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement143()
}

func (c *current) onListElementContinuationElement150() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonListElementContinuationElement150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement150()
}

func (c *current) onListElementContinuationElement130(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonListElementContinuationElement130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement130(stack["name"])
}

func (c *current) onListElementContinuationElement156() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement156()
}

func (c *current) onListElementContinuationElement165() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement165()
}

func (c *current) onListElementContinuationElement172() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonListElementContinuationElement172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement172()
}

func (c *current) onListElementContinuationElement152(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonListElementContinuationElement152() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement152(stack["name"])
}

func (c *current) onListElementContinuationElement175() (interface{}, error) {
	// TODO: Space* before EOF
	return types.NewThematicBreak()

}

func (p *parser) callonListElementContinuationElement175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement175()
}

func (c *current) onListElementContinuationElement195() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement195() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement195()
}

func (c *current) onListElementContinuationElement202() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonListElementContinuationElement202() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement202()
}

func (c *current) onListElementContinuationElement216() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement216() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement216()
}

func (c *current) onListElementContinuationElement222() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement222() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement222()
}

func (c *current) onListElementContinuationElement220(content interface{}) (interface{}, error) {
	return types.NewRawContent(content.(string))

}

func (p *parser) callonListElementContinuationElement220() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement220(stack["content"])
}

func (c *current) onListElementContinuationElement210(content interface{}) (interface{}, error) {
	return types.NewTableCell(content.(types.RawContent))

}

func (p *parser) callonListElementContinuationElement210() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement210(stack["content"])
}

func (c *current) onListElementContinuationElement230() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonListElementContinuationElement230() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement230()
}

func (c *current) onListElementContinuationElement241() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement241() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement241()
}

func (c *current) onListElementContinuationElement248() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonListElementContinuationElement248() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement248()
}

func (c *current) onListElementContinuationElement233() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElementContinuationElement233() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement233()
}

func (c *current) onListElementContinuationElement206(cells interface{}) (interface{}, error) {
	return types.NewTableRow(cells.([]interface{}))

}

func (p *parser) callonListElementContinuationElement206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement206(stack["cells"])
}

func (c *current) onListElementContinuationElement262() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement262() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement262()
}

func (c *current) onListElementContinuationElement269() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonListElementContinuationElement269() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement269()
}

func (c *current) onListElementContinuationElement287() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement287() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement287()
}

func (c *current) onListElementContinuationElement294() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonListElementContinuationElement294() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement294()
}

func (c *current) onListElementContinuationElement307() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement307() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement307()
}

func (c *current) onListElementContinuationElement314() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonListElementContinuationElement314() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement314()
}

func (c *current) onListElementContinuationElement299() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElementContinuationElement299() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement299()
}

func (c *current) onListElementContinuationElement320() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement320() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement320()
}

func (c *current) onListElementContinuationElement326() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement326() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement326()
}

func (c *current) onListElementContinuationElement324(content interface{}) (interface{}, error) {
	return types.NewRawContent(content.(string))

}

func (p *parser) callonListElementContinuationElement324() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement324(stack["content"])
}

func (c *current) onListElementContinuationElement278(content interface{}) (interface{}, error) {
	return types.NewTableCell(content.(types.RawContent))

}

func (p *parser) callonListElementContinuationElement278() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement278(stack["content"])
}

func (c *current) onListElementContinuationElement334() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonListElementContinuationElement334() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement334()
}

func (c *current) onListElementContinuationElement275(cell interface{}) (interface{}, error) {
	return cell, nil

}

func (p *parser) callonListElementContinuationElement275() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement275(stack["cell"])
}

func (c *current) onListElementContinuationElement346() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement346() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement346()
}

func (c *current) onListElementContinuationElement353() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonListElementContinuationElement353() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement353()
}

func (c *current) onListElementContinuationElement338() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElementContinuationElement338() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement338()
}

func (c *current) onListElementContinuationElement362() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement362() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement362()
}

func (c *current) onListElementContinuationElement369() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonListElementContinuationElement369() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement369()
}

func (c *current) onListElementContinuationElement253(cells interface{}) (interface{}, error) {
	return types.NewTableRow(cells.([]interface{}))

}

func (p *parser) callonListElementContinuationElement253() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement253(stack["cells"])
}

func (c *current) onListElementContinuationElement382() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement382() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement382()
}

func (c *current) onListElementContinuationElement389() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonListElementContinuationElement389() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement389()
}

func (c *current) onListElementContinuationElement404() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement404() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement404()
}

func (c *current) onListElementContinuationElement411() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonListElementContinuationElement411() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement411()
}

func (c *current) onListElementContinuationElement424() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement424() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement424()
}

func (c *current) onListElementContinuationElement431() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonListElementContinuationElement431() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement431()
}

func (c *current) onListElementContinuationElement416() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElementContinuationElement416() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement416()
}

func (c *current) onListElementContinuationElement437() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement437() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement437()
}

func (c *current) onListElementContinuationElement443() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement443() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement443()
}

func (c *current) onListElementContinuationElement441(content interface{}) (interface{}, error) {
	return types.NewRawContent(content.(string))

}

func (p *parser) callonListElementContinuationElement441() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement441(stack["content"])
}

func (c *current) onListElementContinuationElement395(content interface{}) (interface{}, error) {
	return types.NewTableCell(content.(types.RawContent))

}

func (p *parser) callonListElementContinuationElement395() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement395(stack["content"])
}

func (c *current) onListElementContinuationElement451() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonListElementContinuationElement451() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement451()
}

func (c *current) onListElementContinuationElement462() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement462() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement462()
}

func (c *current) onListElementContinuationElement469() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonListElementContinuationElement469() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement469()
}

func (c *current) onListElementContinuationElement454() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElementContinuationElement454() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement454()
}

func (c *current) onListElementContinuationElement373(cells interface{}) (interface{}, error) {
	return types.NewTableRow(cells.([]interface{}))

}

func (p *parser) callonListElementContinuationElement373() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement373(stack["cells"])
}

func (c *current) onListElementContinuationElement477() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement477() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement477()
}

func (c *current) onListElementContinuationElement484() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonListElementContinuationElement484() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement484()
}

func (c *current) onListElementContinuationElement189(header, rows interface{}) (interface{}, error) {
	return types.NewTable(header, rows.([]interface{}))

}

func (p *parser) callonListElementContinuationElement189() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement189(stack["header"], stack["rows"])
}

func (c *current) onListElementContinuationElement494() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement494() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement494()
}

func (c *current) onListElementContinuationElement502() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonListElementContinuationElement502() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement502()
}

func (c *current) onListElementContinuationElement488(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonListElementContinuationElement488() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement488(stack["content"])
}

func (c *current) onListElementContinuationElement508() (interface{}, error) {
	return types.Tip, nil
}

func (p *parser) callonListElementContinuationElement508() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement508()
}

func (c *current) onListElementContinuationElement510() (interface{}, error) {
	return types.Note, nil
}

func (p *parser) callonListElementContinuationElement510() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement510()
}

func (c *current) onListElementContinuationElement512() (interface{}, error) {
	return types.Important, nil
}

func (p *parser) callonListElementContinuationElement512() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement512()
}

func (c *current) onListElementContinuationElement514() (interface{}, error) {
	return types.Warning, nil
}

func (p *parser) callonListElementContinuationElement514() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement514()
}

func (c *current) onListElementContinuationElement516() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonListElementContinuationElement516() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement516()
}

func (c *current) onListElementContinuationElement523() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement523() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement523()
}

func (c *current) onListElementContinuationElement526(content interface{}) (bool, error) {
	return len(strings.TrimSpace(string(c.text))) > 0, nil

}

func (p *parser) callonListElementContinuationElement526() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement526(stack["content"])
}

func (c *current) onListElementContinuationElement532() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonListElementContinuationElement532() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement532()
}

func (c *current) onListElementContinuationElement520(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement520() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement520(stack["content"])
}

func (c *current) onListElementContinuationElement544() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement544() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement544()
}

func (c *current) onListElementContinuationElement549() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonListElementContinuationElement549() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement549()
}

func (c *current) onListElementContinuationElement559() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement559() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement559()
}

func (c *current) onListElementContinuationElement567() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonListElementContinuationElement567() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement567()
}

func (c *current) onListElementContinuationElement553(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonListElementContinuationElement553() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement553(stack["content"])
}

func (c *current) onListElementContinuationElement572() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement572() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement572()
}

func (c *current) onListElementContinuationElement575(content interface{}) (bool, error) {
	return len(strings.TrimSpace(string(c.text))) > 0, nil

}

func (p *parser) callonListElementContinuationElement575() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement575(stack["content"])
}

func (c *current) onListElementContinuationElement581() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonListElementContinuationElement581() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement581()
}

func (c *current) onListElementContinuationElement569(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement569() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement569(stack["content"])
}

func (c *current) onListElementContinuationElement536(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListElementContinuationElement536() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement536(stack["line"])
}

func (c *current) onListElementContinuationElement504(kind, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(kind.(string), append([]interface{}{firstLine}, otherLines.([]interface{})...))

}

func (p *parser) callonListElementContinuationElement504() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement504(stack["kind"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onListElementContinuationElement591() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement591() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement591()
}

func (c *current) onListElementContinuationElement589() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement589() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement589()
}

func (c *current) onListElementContinuationElement596(content interface{}) (bool, error) {
	return len(strings.TrimSpace(string(c.text))) > 0, nil

}

func (p *parser) callonListElementContinuationElement596() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement596(stack["content"])
}

func (c *current) onListElementContinuationElement602() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonListElementContinuationElement602() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement602()
}

func (c *current) onListElementContinuationElement586(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement586() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement586(stack["content"])
}

func (c *current) onListElementContinuationElement613() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement613() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement613()
}

func (c *current) onListElementContinuationElement621() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonListElementContinuationElement621() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement621()
}

func (c *current) onListElementContinuationElement607(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonListElementContinuationElement607() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement607(stack["content"])
}

func (c *current) onListElementContinuationElement626() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement626() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement626()
}

func (c *current) onListElementContinuationElement629(content interface{}) (bool, error) {
	return len(strings.TrimSpace(string(c.text))) > 0, nil

}

func (p *parser) callonListElementContinuationElement629() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement629(stack["content"])
}

func (c *current) onListElementContinuationElement635() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonListElementContinuationElement635() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement635()
}

func (c *current) onListElementContinuationElement623(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement623() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement623(stack["content"])
}

func (c *current) onListElementContinuationElement583(firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewLiteralParagraph(types.LiteralBlockWithSpacesOnFirstLine, append([]interface{}{firstLine}, otherLines.([]interface{})...))

}

func (p *parser) callonListElementContinuationElement583() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement583(stack["firstLine"], stack["otherLines"])
}

func (c *current) onListElementContinuationElement640() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement640() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement640()
}

func (c *current) onListElementContinuationElement648() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonListElementContinuationElement648() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement648()
}

func (c *current) onListElementContinuationElement637(content interface{}) (interface{}, error) {
	// do not retain the EOL chars
	return types.NewParagraph(types.RawLine(content.(string)))

}

func (p *parser) callonListElementContinuationElement637() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement637(stack["content"])
}

func (c *current) onListElementContinuationElement1(attributes, element interface{}) (interface{}, error) {
	if element, ok := element.(types.BlockWithAttributes); ok && attributes != nil {
		element.AddAttributes(attributes.(types.Attributes))
	}
	// if log.IsLevelEnabled(log.DebugLevel) {
	//     log.Debugf("returning element '%s'\n", spew.Sdump(element))
	// }
	return element, nil

}

func (p *parser) callonListElementContinuationElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1(stack["attributes"], stack["element"])
}

func (c *current) onCallout3() (bool, error) {
	return c.isSubstitutionEnabled(Callouts)

}

func (p *parser) callonCallout3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout3()
}

func (c *current) onCallout6() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout6()
}

func (c *current) onCallout13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCallout13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout13()
}

func (c *current) onCallout21() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonCallout21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout21()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {
	return types.NewCallout(ref.(int))

}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onQuotedText2(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedText2(stack["attributes"], stack["text"])
}

func (c *current) onEscapedQuotedText1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonEscapedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedQuotedText1(stack["element"])
}

func (c *current) onDoubleQuoteBoldText1(elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.DoubleQuoteBold, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextElement14() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement14()
}

func (c *current) onDoubleQuoteBoldTextElement7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement7()
}

func (c *current) onDoubleQuoteBoldTextElement17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement17()
}

func (c *current) onDoubleQuoteBoldTextElement24() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextElement24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement24()
}

func (c *current) onDoubleQuoteBoldTextElement30() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextElement30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement30()
}

func (c *current) onDoubleQuoteBoldTextElement34() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonDoubleQuoteBoldTextElement34() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement34()
}

func (c *current) onDoubleQuoteBoldTextElement41() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement41()
}

func (c *current) onDoubleQuoteBoldTextElement53() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement53()
}

func (c *current) onDoubleQuoteBoldTextElement55() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement55()
}

func (c *current) onDoubleQuoteBoldTextElement48(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement48(stack["start"])
}

func (c *current) onDoubleQuoteBoldTextElement37(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonDoubleQuoteBoldTextElement37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement37(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteBoldTextElement63() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement63()
}

func (c *current) onDoubleQuoteBoldTextElement75() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement75()
}

func (c *current) onDoubleQuoteBoldTextElement77() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement77()
}

func (c *current) onDoubleQuoteBoldTextElement70(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement70(stack["start"])
}

func (c *current) onDoubleQuoteBoldTextElement59(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonDoubleQuoteBoldTextElement59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement59(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteBoldTextElement85() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement85()
}

func (c *current) onDoubleQuoteBoldTextElement81(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonDoubleQuoteBoldTextElement81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement81(stack["name"])
}

func (c *current) onDoubleQuoteBoldTextElement32(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement32(stack["element"])
}

func (c *current) onDoubleQuoteBoldTextElement93() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonDoubleQuoteBoldTextElement93() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement93()
}

func (c *current) onDoubleQuoteBoldTextElement102() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement102()
}

func (c *current) onDoubleQuoteBoldTextElement108() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement108()
}

func (c *current) onDoubleQuoteBoldTextElement114() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement114()
}

func (c *current) onDoubleQuoteBoldTextElement121() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonDoubleQuoteBoldTextElement121() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement121()
}

func (c *current) onDoubleQuoteBoldTextElement128() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement128()
}

func (c *current) onDoubleQuoteBoldTextElement140() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement140() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement140()
}

func (c *current) onDoubleQuoteBoldTextElement142() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement142()
}

func (c *current) onDoubleQuoteBoldTextElement135(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement135(stack["start"])
}

func (c *current) onDoubleQuoteBoldTextElement124(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonDoubleQuoteBoldTextElement124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement124(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteBoldTextElement150() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement150()
}

func (c *current) onDoubleQuoteBoldTextElement162() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement162()
}

func (c *current) onDoubleQuoteBoldTextElement164() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement164()
}

func (c *current) onDoubleQuoteBoldTextElement157(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement157(stack["start"])
}

func (c *current) onDoubleQuoteBoldTextElement146(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonDoubleQuoteBoldTextElement146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement146(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteBoldTextElement172() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement172()
}

func (c *current) onDoubleQuoteBoldTextElement168(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonDoubleQuoteBoldTextElement168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement168(stack["name"])
}

func (c *current) onDoubleQuoteBoldTextElement119(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement119(stack["element"])
}

func (c *current) onDoubleQuoteBoldTextElement178() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement178()
}

func (c *current) onDoubleQuoteBoldTextElement98(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonDoubleQuoteBoldTextElement98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement98(stack["id"], stack["label"])
}

func (c *current) onDoubleQuoteBoldTextElement185() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement185()
}

func (c *current) onDoubleQuoteBoldTextElement181(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonDoubleQuoteBoldTextElement181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement181(stack["id"])
}

func (c *current) onDoubleQuoteBoldTextElement96() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement96()
}

func (c *current) onDoubleQuoteBoldTextElement189() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement189() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement189()
}

func (c *current) onDoubleQuoteBoldTextElement91(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement91(stack["element"])
}

func (c *current) onDoubleQuoteBoldTextElement191() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonDoubleQuoteBoldTextElement191() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement191()
}

func (c *current) onDoubleQuoteBoldTextElement193() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonDoubleQuoteBoldTextElement193() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement193()
}

func (c *current) onDoubleQuoteBoldTextElement195() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonDoubleQuoteBoldTextElement195() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement195()
}

func (c *current) onDoubleQuoteBoldTextElement197() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonDoubleQuoteBoldTextElement197() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement197()
}

func (c *current) onDoubleQuoteBoldTextElement199() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonDoubleQuoteBoldTextElement199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement199()
}

func (c *current) onDoubleQuoteBoldTextElement201() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonDoubleQuoteBoldTextElement201() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement201()
}

func (c *current) onDoubleQuoteBoldTextElement214() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteBoldTextElement214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement214()
}

func (c *current) onDoubleQuoteBoldTextElement210(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonDoubleQuoteBoldTextElement210() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement210(stack["ref"])
}

func (c *current) onDoubleQuoteBoldTextElement222() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement222() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement222()
}

func (c *current) onDoubleQuoteBoldTextElement219() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement219() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement219()
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteBoldText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteBoldText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteBoldText1(elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.SingleQuoteBold, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText1(stack["elements"])
}

func (c *current) onSingleQuoteBoldTextElements9() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElements9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElements9()
}

func (c *current) onSingleQuoteBoldTextElements14(elements interface{}) (bool, error) {
	return validateSingleQuoteElements(elements.([]interface{})) // cannot end with spaces

}

func (p *parser) callonSingleQuoteBoldTextElements14() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElements14(stack["elements"])
}

func (c *current) onSingleQuoteBoldTextElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonSingleQuoteBoldTextElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElements1(stack["elements"])
}

func (c *current) onSingleQuoteBoldTextElement9() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement9()
}

func (c *current) onSingleQuoteBoldTextElement2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement2()
}

func (c *current) onSingleQuoteBoldTextElement12() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement12()
}

func (c *current) onSingleQuoteBoldTextElement19() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextElement19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement19()
}

func (c *current) onSingleQuoteBoldTextElement25() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextElement25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement25()
}

func (c *current) onSingleQuoteBoldTextElement29() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonSingleQuoteBoldTextElement29() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement29()
}

func (c *current) onSingleQuoteBoldTextElement36() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement36()
}

func (c *current) onSingleQuoteBoldTextElement48() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement48()
}

func (c *current) onSingleQuoteBoldTextElement50() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement50()
}

func (c *current) onSingleQuoteBoldTextElement43(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteBoldTextElement43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement43(stack["start"])
}

func (c *current) onSingleQuoteBoldTextElement32(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonSingleQuoteBoldTextElement32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement32(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteBoldTextElement58() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement58()
}

func (c *current) onSingleQuoteBoldTextElement70() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement70()
}

func (c *current) onSingleQuoteBoldTextElement72() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement72()
}

func (c *current) onSingleQuoteBoldTextElement65(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteBoldTextElement65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement65(stack["start"])
}

func (c *current) onSingleQuoteBoldTextElement54(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonSingleQuoteBoldTextElement54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement54(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteBoldTextElement80() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement80()
}

func (c *current) onSingleQuoteBoldTextElement76(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonSingleQuoteBoldTextElement76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement76(stack["name"])
}

func (c *current) onSingleQuoteBoldTextElement27(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteBoldTextElement27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement27(stack["element"])
}

func (c *current) onSingleQuoteBoldTextElement88() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonSingleQuoteBoldTextElement88() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement88()
}

func (c *current) onSingleQuoteBoldTextElement97() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement97()
}

func (c *current) onSingleQuoteBoldTextElement103() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement103()
}

func (c *current) onSingleQuoteBoldTextElement109() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement109()
}

func (c *current) onSingleQuoteBoldTextElement116() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonSingleQuoteBoldTextElement116() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement116()
}

func (c *current) onSingleQuoteBoldTextElement123() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement123()
}

func (c *current) onSingleQuoteBoldTextElement135() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement135()
}

func (c *current) onSingleQuoteBoldTextElement137() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement137()
}

func (c *current) onSingleQuoteBoldTextElement130(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteBoldTextElement130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement130(stack["start"])
}

func (c *current) onSingleQuoteBoldTextElement119(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonSingleQuoteBoldTextElement119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement119(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteBoldTextElement145() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement145()
}

func (c *current) onSingleQuoteBoldTextElement157() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement157()
}

func (c *current) onSingleQuoteBoldTextElement159() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement159()
}

func (c *current) onSingleQuoteBoldTextElement152(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteBoldTextElement152() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement152(stack["start"])
}

func (c *current) onSingleQuoteBoldTextElement141(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonSingleQuoteBoldTextElement141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement141(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteBoldTextElement167() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement167()
}

func (c *current) onSingleQuoteBoldTextElement163(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonSingleQuoteBoldTextElement163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement163(stack["name"])
}

func (c *current) onSingleQuoteBoldTextElement114(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteBoldTextElement114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement114(stack["element"])
}

func (c *current) onSingleQuoteBoldTextElement173() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement173()
}

func (c *current) onSingleQuoteBoldTextElement93(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonSingleQuoteBoldTextElement93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement93(stack["id"], stack["label"])
}

func (c *current) onSingleQuoteBoldTextElement180() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement180()
}

func (c *current) onSingleQuoteBoldTextElement176(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonSingleQuoteBoldTextElement176() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement176(stack["id"])
}

func (c *current) onSingleQuoteBoldTextElement91() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement91()
}

func (c *current) onSingleQuoteBoldTextElement184() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement184()
}

func (c *current) onSingleQuoteBoldTextElement86(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteBoldTextElement86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement86(stack["element"])
}

func (c *current) onSingleQuoteBoldTextElement186() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonSingleQuoteBoldTextElement186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement186()
}

func (c *current) onSingleQuoteBoldTextElement188() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonSingleQuoteBoldTextElement188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement188()
}

func (c *current) onSingleQuoteBoldTextElement190() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonSingleQuoteBoldTextElement190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement190()
}

func (c *current) onSingleQuoteBoldTextElement192() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonSingleQuoteBoldTextElement192() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement192()
}

func (c *current) onSingleQuoteBoldTextElement194() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonSingleQuoteBoldTextElement194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement194()
}

func (c *current) onSingleQuoteBoldTextElement196() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonSingleQuoteBoldTextElement196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement196()
}

func (c *current) onSingleQuoteBoldTextElement209() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteBoldTextElement209() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement209()
}

func (c *current) onSingleQuoteBoldTextElement205(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonSingleQuoteBoldTextElement205() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement205(stack["ref"])
}

func (c *current) onSingleQuoteBoldTextElement217() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement217() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement217()
}

func (c *current) onSingleQuoteBoldTextElement214() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement214()
}

func (c *current) onQuotedTextInSingleQuoteBoldText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteBoldText1(stack["attributes"], stack["text"])
}

func (c *current) onEscapedBoldText5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedBoldText5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText5()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedBoldText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText17()
}

func (c *current) onEscapedBoldText14(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText14(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText27() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedBoldText27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText27()
}

func (c *current) onEscapedBoldText24(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText24(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.DoubleQuoteItalic, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextElement14() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement14()
}

func (c *current) onDoubleQuoteItalicTextElement7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement7()
}

func (c *current) onDoubleQuoteItalicTextElement17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement17()
}

func (c *current) onDoubleQuoteItalicTextElement24() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextElement24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement24()
}

func (c *current) onDoubleQuoteItalicTextElement30() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextElement30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement30()
}

func (c *current) onDoubleQuoteItalicTextElement34() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonDoubleQuoteItalicTextElement34() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement34()
}

func (c *current) onDoubleQuoteItalicTextElement41() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement41()
}

func (c *current) onDoubleQuoteItalicTextElement53() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement53()
}

func (c *current) onDoubleQuoteItalicTextElement55() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement55()
}

func (c *current) onDoubleQuoteItalicTextElement48(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement48(stack["start"])
}

func (c *current) onDoubleQuoteItalicTextElement37(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonDoubleQuoteItalicTextElement37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement37(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteItalicTextElement63() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement63()
}

func (c *current) onDoubleQuoteItalicTextElement75() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement75()
}

func (c *current) onDoubleQuoteItalicTextElement77() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement77()
}

func (c *current) onDoubleQuoteItalicTextElement70(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement70(stack["start"])
}

func (c *current) onDoubleQuoteItalicTextElement59(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonDoubleQuoteItalicTextElement59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement59(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteItalicTextElement85() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement85()
}

func (c *current) onDoubleQuoteItalicTextElement81(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonDoubleQuoteItalicTextElement81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement81(stack["name"])
}

func (c *current) onDoubleQuoteItalicTextElement32(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement32(stack["element"])
}

func (c *current) onDoubleQuoteItalicTextElement93() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonDoubleQuoteItalicTextElement93() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement93()
}

func (c *current) onDoubleQuoteItalicTextElement102() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement102()
}

func (c *current) onDoubleQuoteItalicTextElement108() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement108()
}

func (c *current) onDoubleQuoteItalicTextElement114() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement114()
}

func (c *current) onDoubleQuoteItalicTextElement121() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonDoubleQuoteItalicTextElement121() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement121()
}

func (c *current) onDoubleQuoteItalicTextElement128() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement128()
}

func (c *current) onDoubleQuoteItalicTextElement140() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement140() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement140()
}

func (c *current) onDoubleQuoteItalicTextElement142() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement142()
}

func (c *current) onDoubleQuoteItalicTextElement135(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement135(stack["start"])
}

func (c *current) onDoubleQuoteItalicTextElement124(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonDoubleQuoteItalicTextElement124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement124(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteItalicTextElement150() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement150()
}

func (c *current) onDoubleQuoteItalicTextElement162() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement162()
}

func (c *current) onDoubleQuoteItalicTextElement164() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement164()
}

func (c *current) onDoubleQuoteItalicTextElement157(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement157(stack["start"])
}

func (c *current) onDoubleQuoteItalicTextElement146(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonDoubleQuoteItalicTextElement146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement146(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteItalicTextElement172() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement172()
}

func (c *current) onDoubleQuoteItalicTextElement168(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonDoubleQuoteItalicTextElement168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement168(stack["name"])
}

func (c *current) onDoubleQuoteItalicTextElement119(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement119(stack["element"])
}

func (c *current) onDoubleQuoteItalicTextElement178() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement178()
}

func (c *current) onDoubleQuoteItalicTextElement98(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonDoubleQuoteItalicTextElement98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement98(stack["id"], stack["label"])
}

func (c *current) onDoubleQuoteItalicTextElement185() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement185()
}

func (c *current) onDoubleQuoteItalicTextElement181(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonDoubleQuoteItalicTextElement181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement181(stack["id"])
}

func (c *current) onDoubleQuoteItalicTextElement96() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement96()
}

func (c *current) onDoubleQuoteItalicTextElement189() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement189() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement189()
}

func (c *current) onDoubleQuoteItalicTextElement91(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement91(stack["element"])
}

func (c *current) onDoubleQuoteItalicTextElement191() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonDoubleQuoteItalicTextElement191() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement191()
}

func (c *current) onDoubleQuoteItalicTextElement193() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonDoubleQuoteItalicTextElement193() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement193()
}

func (c *current) onDoubleQuoteItalicTextElement195() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonDoubleQuoteItalicTextElement195() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement195()
}

func (c *current) onDoubleQuoteItalicTextElement197() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonDoubleQuoteItalicTextElement197() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement197()
}

func (c *current) onDoubleQuoteItalicTextElement199() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonDoubleQuoteItalicTextElement199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement199()
}

func (c *current) onDoubleQuoteItalicTextElement201() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonDoubleQuoteItalicTextElement201() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement201()
}

func (c *current) onDoubleQuoteItalicTextElement214() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteItalicTextElement214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement214()
}

func (c *current) onDoubleQuoteItalicTextElement210(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonDoubleQuoteItalicTextElement210() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement210(stack["ref"])
}

func (c *current) onDoubleQuoteItalicTextElement222() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement222() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement222()
}

func (c *current) onDoubleQuoteItalicTextElement219() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement219() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement219()
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteItalicText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteItalicText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteItalicText1(elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.SingleQuoteItalic, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText1(stack["elements"])
}

func (c *current) onSingleQuoteItalicTextElements9() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElements9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElements9()
}

func (c *current) onSingleQuoteItalicTextElements14(elements interface{}) (bool, error) {
	return validateSingleQuoteElements(elements.([]interface{})) // cannot end with spaces

}

func (p *parser) callonSingleQuoteItalicTextElements14() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElements14(stack["elements"])
}

func (c *current) onSingleQuoteItalicTextElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonSingleQuoteItalicTextElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElements1(stack["elements"])
}

func (c *current) onSingleQuoteItalicTextElement9() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement9()
}

func (c *current) onSingleQuoteItalicTextElement2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement2()
}

func (c *current) onSingleQuoteItalicTextElement12() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement12()
}

func (c *current) onSingleQuoteItalicTextElement19() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextElement19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement19()
}

func (c *current) onSingleQuoteItalicTextElement25() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextElement25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement25()
}

func (c *current) onSingleQuoteItalicTextElement29() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonSingleQuoteItalicTextElement29() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement29()
}

func (c *current) onSingleQuoteItalicTextElement36() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement36()
}

func (c *current) onSingleQuoteItalicTextElement48() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement48()
}

func (c *current) onSingleQuoteItalicTextElement50() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement50()
}

func (c *current) onSingleQuoteItalicTextElement43(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteItalicTextElement43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement43(stack["start"])
}

func (c *current) onSingleQuoteItalicTextElement32(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonSingleQuoteItalicTextElement32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement32(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteItalicTextElement58() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement58()
}

func (c *current) onSingleQuoteItalicTextElement70() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement70()
}

func (c *current) onSingleQuoteItalicTextElement72() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement72()
}

func (c *current) onSingleQuoteItalicTextElement65(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteItalicTextElement65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement65(stack["start"])
}

func (c *current) onSingleQuoteItalicTextElement54(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonSingleQuoteItalicTextElement54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement54(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteItalicTextElement80() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement80()
}

func (c *current) onSingleQuoteItalicTextElement76(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonSingleQuoteItalicTextElement76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement76(stack["name"])
}

func (c *current) onSingleQuoteItalicTextElement27(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteItalicTextElement27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement27(stack["element"])
}

func (c *current) onSingleQuoteItalicTextElement88() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonSingleQuoteItalicTextElement88() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement88()
}

func (c *current) onSingleQuoteItalicTextElement97() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement97()
}

func (c *current) onSingleQuoteItalicTextElement103() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement103()
}

func (c *current) onSingleQuoteItalicTextElement109() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement109()
}

func (c *current) onSingleQuoteItalicTextElement116() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonSingleQuoteItalicTextElement116() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement116()
}

func (c *current) onSingleQuoteItalicTextElement123() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement123()
}

func (c *current) onSingleQuoteItalicTextElement135() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement135()
}

func (c *current) onSingleQuoteItalicTextElement137() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement137()
}

func (c *current) onSingleQuoteItalicTextElement130(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteItalicTextElement130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement130(stack["start"])
}

func (c *current) onSingleQuoteItalicTextElement119(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonSingleQuoteItalicTextElement119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement119(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteItalicTextElement145() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement145()
}

func (c *current) onSingleQuoteItalicTextElement157() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement157()
}

func (c *current) onSingleQuoteItalicTextElement159() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement159()
}

func (c *current) onSingleQuoteItalicTextElement152(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteItalicTextElement152() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement152(stack["start"])
}

func (c *current) onSingleQuoteItalicTextElement141(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonSingleQuoteItalicTextElement141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement141(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteItalicTextElement167() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement167()
}

func (c *current) onSingleQuoteItalicTextElement163(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonSingleQuoteItalicTextElement163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement163(stack["name"])
}

func (c *current) onSingleQuoteItalicTextElement114(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteItalicTextElement114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement114(stack["element"])
}

func (c *current) onSingleQuoteItalicTextElement173() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement173()
}

func (c *current) onSingleQuoteItalicTextElement93(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonSingleQuoteItalicTextElement93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement93(stack["id"], stack["label"])
}

func (c *current) onSingleQuoteItalicTextElement180() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement180()
}

func (c *current) onSingleQuoteItalicTextElement176(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonSingleQuoteItalicTextElement176() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement176(stack["id"])
}

func (c *current) onSingleQuoteItalicTextElement91() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement91()
}

func (c *current) onSingleQuoteItalicTextElement184() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement184()
}

func (c *current) onSingleQuoteItalicTextElement86(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteItalicTextElement86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement86(stack["element"])
}

func (c *current) onSingleQuoteItalicTextElement186() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonSingleQuoteItalicTextElement186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement186()
}

func (c *current) onSingleQuoteItalicTextElement188() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonSingleQuoteItalicTextElement188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement188()
}

func (c *current) onSingleQuoteItalicTextElement190() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonSingleQuoteItalicTextElement190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement190()
}

func (c *current) onSingleQuoteItalicTextElement192() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonSingleQuoteItalicTextElement192() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement192()
}

func (c *current) onSingleQuoteItalicTextElement194() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonSingleQuoteItalicTextElement194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement194()
}

func (c *current) onSingleQuoteItalicTextElement196() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonSingleQuoteItalicTextElement196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement196()
}

func (c *current) onSingleQuoteItalicTextElement209() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteItalicTextElement209() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement209()
}

func (c *current) onSingleQuoteItalicTextElement205(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonSingleQuoteItalicTextElement205() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement205(stack["ref"])
}

func (c *current) onSingleQuoteItalicTextElement217() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement217() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement217()
}

func (c *current) onSingleQuoteItalicTextElement214() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement214()
}

func (c *current) onQuotedTextInSingleQuoteItalicText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteItalicText1(stack["attributes"], stack["text"])
}

func (c *current) onEscapedItalicText5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedItalicText5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText5()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedItalicText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText17()
}

func (c *current) onEscapedItalicText14(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText14(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText27() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedItalicText27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText27()
}

func (c *current) onEscapedItalicText24(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText24(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.DoubleQuoteMonospace, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextElement14() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement14()
}

func (c *current) onDoubleQuoteMonospaceTextElement7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement7()
}

func (c *current) onDoubleQuoteMonospaceTextElement17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement17()
}

func (c *current) onDoubleQuoteMonospaceTextElement24() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextElement24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement24()
}

func (c *current) onDoubleQuoteMonospaceTextElement30() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextElement30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement30()
}

func (c *current) onDoubleQuoteMonospaceTextElement34() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonDoubleQuoteMonospaceTextElement34() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement34()
}

func (c *current) onDoubleQuoteMonospaceTextElement41() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement41()
}

func (c *current) onDoubleQuoteMonospaceTextElement53() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement53()
}

func (c *current) onDoubleQuoteMonospaceTextElement55() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement55()
}

func (c *current) onDoubleQuoteMonospaceTextElement48(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement48(stack["start"])
}

func (c *current) onDoubleQuoteMonospaceTextElement37(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonDoubleQuoteMonospaceTextElement37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement37(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteMonospaceTextElement63() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement63()
}

func (c *current) onDoubleQuoteMonospaceTextElement75() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement75()
}

func (c *current) onDoubleQuoteMonospaceTextElement77() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement77()
}

func (c *current) onDoubleQuoteMonospaceTextElement70(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement70(stack["start"])
}

func (c *current) onDoubleQuoteMonospaceTextElement59(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonDoubleQuoteMonospaceTextElement59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement59(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteMonospaceTextElement85() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement85()
}

func (c *current) onDoubleQuoteMonospaceTextElement81(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonDoubleQuoteMonospaceTextElement81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement81(stack["name"])
}

func (c *current) onDoubleQuoteMonospaceTextElement32(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement32(stack["element"])
}

func (c *current) onDoubleQuoteMonospaceTextElement93() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonDoubleQuoteMonospaceTextElement93() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement93()
}

func (c *current) onDoubleQuoteMonospaceTextElement102() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement102()
}

func (c *current) onDoubleQuoteMonospaceTextElement108() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement108()
}

func (c *current) onDoubleQuoteMonospaceTextElement114() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement114()
}

func (c *current) onDoubleQuoteMonospaceTextElement121() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonDoubleQuoteMonospaceTextElement121() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement121()
}

func (c *current) onDoubleQuoteMonospaceTextElement128() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement128()
}

func (c *current) onDoubleQuoteMonospaceTextElement140() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement140() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement140()
}

func (c *current) onDoubleQuoteMonospaceTextElement142() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement142()
}

func (c *current) onDoubleQuoteMonospaceTextElement135(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement135(stack["start"])
}

func (c *current) onDoubleQuoteMonospaceTextElement124(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonDoubleQuoteMonospaceTextElement124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement124(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteMonospaceTextElement150() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement150()
}

func (c *current) onDoubleQuoteMonospaceTextElement162() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement162()
}

func (c *current) onDoubleQuoteMonospaceTextElement164() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement164()
}

func (c *current) onDoubleQuoteMonospaceTextElement157(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement157(stack["start"])
}

func (c *current) onDoubleQuoteMonospaceTextElement146(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonDoubleQuoteMonospaceTextElement146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement146(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteMonospaceTextElement172() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement172()
}

func (c *current) onDoubleQuoteMonospaceTextElement168(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonDoubleQuoteMonospaceTextElement168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement168(stack["name"])
}

func (c *current) onDoubleQuoteMonospaceTextElement119(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement119(stack["element"])
}

func (c *current) onDoubleQuoteMonospaceTextElement178() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement178()
}

func (c *current) onDoubleQuoteMonospaceTextElement98(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonDoubleQuoteMonospaceTextElement98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement98(stack["id"], stack["label"])
}

func (c *current) onDoubleQuoteMonospaceTextElement185() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement185()
}

func (c *current) onDoubleQuoteMonospaceTextElement181(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonDoubleQuoteMonospaceTextElement181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement181(stack["id"])
}

func (c *current) onDoubleQuoteMonospaceTextElement96() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement96()
}

func (c *current) onDoubleQuoteMonospaceTextElement189() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement189() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement189()
}

func (c *current) onDoubleQuoteMonospaceTextElement91(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement91(stack["element"])
}

func (c *current) onDoubleQuoteMonospaceTextElement191() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement191() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement191()
}

func (c *current) onDoubleQuoteMonospaceTextElement193() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement193() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement193()
}

func (c *current) onDoubleQuoteMonospaceTextElement195() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement195() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement195()
}

func (c *current) onDoubleQuoteMonospaceTextElement197() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement197() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement197()
}

func (c *current) onDoubleQuoteMonospaceTextElement199() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement199()
}

func (c *current) onDoubleQuoteMonospaceTextElement201() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement201() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement201()
}

func (c *current) onDoubleQuoteMonospaceTextElement215() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement215() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement215()
}

func (c *current) onDoubleQuoteMonospaceTextElement211(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonDoubleQuoteMonospaceTextElement211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement211(stack["ref"])
}

func (c *current) onDoubleQuoteMonospaceTextElement223() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement223() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement223()
}

func (c *current) onDoubleQuoteMonospaceTextElement220() (interface{}, error) {
	// ` or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement220() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement220()
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteMonospaceText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteMonospaceText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteMonospaceText1(elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.SingleQuoteMonospace, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText1(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextElements9() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElements9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElements9()
}

func (c *current) onSingleQuoteMonospaceTextElements14(elements interface{}) (bool, error) {
	return validateSingleQuoteElements(elements.([]interface{})) // cannot end with spaces

}

func (p *parser) callonSingleQuoteMonospaceTextElements14() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElements14(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElements1(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextElement2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement2()
}

func (c *current) onSingleQuoteMonospaceTextElement11() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement11()
}

func (c *current) onSingleQuoteMonospaceTextElement20() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement20()
}

func (c *current) onSingleQuoteMonospaceTextElement27() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextElement27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement27()
}

func (c *current) onSingleQuoteMonospaceTextElement33() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextElement33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement33()
}

func (c *current) onSingleQuoteMonospaceTextElement37() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonSingleQuoteMonospaceTextElement37() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement37()
}

func (c *current) onSingleQuoteMonospaceTextElement44() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement44()
}

func (c *current) onSingleQuoteMonospaceTextElement56() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement56()
}

func (c *current) onSingleQuoteMonospaceTextElement58() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement58()
}

func (c *current) onSingleQuoteMonospaceTextElement51(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement51(stack["start"])
}

func (c *current) onSingleQuoteMonospaceTextElement40(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonSingleQuoteMonospaceTextElement40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement40(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteMonospaceTextElement66() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement66()
}

func (c *current) onSingleQuoteMonospaceTextElement78() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement78()
}

func (c *current) onSingleQuoteMonospaceTextElement80() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement80()
}

func (c *current) onSingleQuoteMonospaceTextElement73(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement73(stack["start"])
}

func (c *current) onSingleQuoteMonospaceTextElement62(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonSingleQuoteMonospaceTextElement62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement62(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteMonospaceTextElement88() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement88()
}

func (c *current) onSingleQuoteMonospaceTextElement84(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonSingleQuoteMonospaceTextElement84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement84(stack["name"])
}

func (c *current) onSingleQuoteMonospaceTextElement35(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement35(stack["element"])
}

func (c *current) onSingleQuoteMonospaceTextElement96() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonSingleQuoteMonospaceTextElement96() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement96()
}

func (c *current) onSingleQuoteMonospaceTextElement105() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement105()
}

func (c *current) onSingleQuoteMonospaceTextElement111() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement111()
}

func (c *current) onSingleQuoteMonospaceTextElement117() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement117() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement117()
}

func (c *current) onSingleQuoteMonospaceTextElement124() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonSingleQuoteMonospaceTextElement124() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement124()
}

func (c *current) onSingleQuoteMonospaceTextElement131() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement131()
}

func (c *current) onSingleQuoteMonospaceTextElement143() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement143()
}

func (c *current) onSingleQuoteMonospaceTextElement145() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement145()
}

func (c *current) onSingleQuoteMonospaceTextElement138(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement138(stack["start"])
}

func (c *current) onSingleQuoteMonospaceTextElement127(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonSingleQuoteMonospaceTextElement127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement127(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteMonospaceTextElement153() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement153()
}

func (c *current) onSingleQuoteMonospaceTextElement165() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement165()
}

func (c *current) onSingleQuoteMonospaceTextElement167() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement167()
}

func (c *current) onSingleQuoteMonospaceTextElement160(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement160(stack["start"])
}

func (c *current) onSingleQuoteMonospaceTextElement149(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonSingleQuoteMonospaceTextElement149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement149(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteMonospaceTextElement175() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement175()
}

func (c *current) onSingleQuoteMonospaceTextElement171(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonSingleQuoteMonospaceTextElement171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement171(stack["name"])
}

func (c *current) onSingleQuoteMonospaceTextElement122(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement122(stack["element"])
}

func (c *current) onSingleQuoteMonospaceTextElement181() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement181()
}

func (c *current) onSingleQuoteMonospaceTextElement101(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonSingleQuoteMonospaceTextElement101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement101(stack["id"], stack["label"])
}

func (c *current) onSingleQuoteMonospaceTextElement188() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement188()
}

func (c *current) onSingleQuoteMonospaceTextElement184(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonSingleQuoteMonospaceTextElement184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement184(stack["id"])
}

func (c *current) onSingleQuoteMonospaceTextElement99() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement99()
}

func (c *current) onSingleQuoteMonospaceTextElement192() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement192() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement192()
}

func (c *current) onSingleQuoteMonospaceTextElement94(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement94(stack["element"])
}

func (c *current) onSingleQuoteMonospaceTextElement194() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonSingleQuoteMonospaceTextElement194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement194()
}

func (c *current) onSingleQuoteMonospaceTextElement196() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonSingleQuoteMonospaceTextElement196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement196()
}

func (c *current) onSingleQuoteMonospaceTextElement198() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonSingleQuoteMonospaceTextElement198() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement198()
}

func (c *current) onSingleQuoteMonospaceTextElement200() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonSingleQuoteMonospaceTextElement200() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement200()
}

func (c *current) onSingleQuoteMonospaceTextElement202() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonSingleQuoteMonospaceTextElement202() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement202()
}

func (c *current) onSingleQuoteMonospaceTextElement204() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonSingleQuoteMonospaceTextElement204() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement204()
}

func (c *current) onSingleQuoteMonospaceTextElement218() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMonospaceTextElement218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement218()
}

func (c *current) onSingleQuoteMonospaceTextElement214(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonSingleQuoteMonospaceTextElement214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement214(stack["ref"])
}

func (c *current) onSingleQuoteMonospaceTextElement227() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement227() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement227()
}

func (c *current) onSingleQuoteMonospaceTextElement222() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement222() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement222()
}

func (c *current) onQuotedTextInSingleQuoteMonospaceText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteMonospaceText1(stack["attributes"], stack["text"])
}

func (c *current) onEscapedMonospaceText5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMonospaceText5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText5()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMonospaceText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText17()
}

func (c *current) onEscapedMonospaceText14(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText14(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText27() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMonospaceText27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText27()
}

func (c *current) onEscapedMonospaceText24(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText24(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedText1(elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.DoubleQuoteMarked, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["elements"])
}

func (c *current) onDoubleQuoteMarkedTextElement14() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement14()
}

func (c *current) onDoubleQuoteMarkedTextElement7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement7()
}

func (c *current) onDoubleQuoteMarkedTextElement17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement17()
}

func (c *current) onDoubleQuoteMarkedTextElement24() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMarkedTextElement24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement24()
}

func (c *current) onDoubleQuoteMarkedTextElement30() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMarkedTextElement30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement30()
}

func (c *current) onDoubleQuoteMarkedTextElement34() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonDoubleQuoteMarkedTextElement34() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement34()
}

func (c *current) onDoubleQuoteMarkedTextElement41() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement41()
}

func (c *current) onDoubleQuoteMarkedTextElement53() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement53()
}

func (c *current) onDoubleQuoteMarkedTextElement55() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement55()
}

func (c *current) onDoubleQuoteMarkedTextElement48(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement48(stack["start"])
}

func (c *current) onDoubleQuoteMarkedTextElement37(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonDoubleQuoteMarkedTextElement37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement37(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteMarkedTextElement63() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement63()
}

func (c *current) onDoubleQuoteMarkedTextElement75() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement75()
}

func (c *current) onDoubleQuoteMarkedTextElement77() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement77()
}

func (c *current) onDoubleQuoteMarkedTextElement70(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement70(stack["start"])
}

func (c *current) onDoubleQuoteMarkedTextElement59(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonDoubleQuoteMarkedTextElement59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement59(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteMarkedTextElement85() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement85()
}

func (c *current) onDoubleQuoteMarkedTextElement81(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonDoubleQuoteMarkedTextElement81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement81(stack["name"])
}

func (c *current) onDoubleQuoteMarkedTextElement32(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement32(stack["element"])
}

func (c *current) onDoubleQuoteMarkedTextElement93() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonDoubleQuoteMarkedTextElement93() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement93()
}

func (c *current) onDoubleQuoteMarkedTextElement102() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement102()
}

func (c *current) onDoubleQuoteMarkedTextElement108() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement108()
}

func (c *current) onDoubleQuoteMarkedTextElement114() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement114()
}

func (c *current) onDoubleQuoteMarkedTextElement121() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonDoubleQuoteMarkedTextElement121() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement121()
}

func (c *current) onDoubleQuoteMarkedTextElement128() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement128()
}

func (c *current) onDoubleQuoteMarkedTextElement140() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement140() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement140()
}

func (c *current) onDoubleQuoteMarkedTextElement142() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement142()
}

func (c *current) onDoubleQuoteMarkedTextElement135(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement135(stack["start"])
}

func (c *current) onDoubleQuoteMarkedTextElement124(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonDoubleQuoteMarkedTextElement124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement124(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteMarkedTextElement150() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement150()
}

func (c *current) onDoubleQuoteMarkedTextElement162() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement162()
}

func (c *current) onDoubleQuoteMarkedTextElement164() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement164()
}

func (c *current) onDoubleQuoteMarkedTextElement157(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement157(stack["start"])
}

func (c *current) onDoubleQuoteMarkedTextElement146(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonDoubleQuoteMarkedTextElement146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement146(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteMarkedTextElement172() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement172()
}

func (c *current) onDoubleQuoteMarkedTextElement168(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonDoubleQuoteMarkedTextElement168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement168(stack["name"])
}

func (c *current) onDoubleQuoteMarkedTextElement119(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement119(stack["element"])
}

func (c *current) onDoubleQuoteMarkedTextElement178() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement178()
}

func (c *current) onDoubleQuoteMarkedTextElement98(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonDoubleQuoteMarkedTextElement98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement98(stack["id"], stack["label"])
}

func (c *current) onDoubleQuoteMarkedTextElement185() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement185()
}

func (c *current) onDoubleQuoteMarkedTextElement181(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonDoubleQuoteMarkedTextElement181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement181(stack["id"])
}

func (c *current) onDoubleQuoteMarkedTextElement96() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement96()
}

func (c *current) onDoubleQuoteMarkedTextElement189() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement189() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement189()
}

func (c *current) onDoubleQuoteMarkedTextElement91(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement91(stack["element"])
}

func (c *current) onDoubleQuoteMarkedTextElement191() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonDoubleQuoteMarkedTextElement191() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement191()
}

func (c *current) onDoubleQuoteMarkedTextElement193() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonDoubleQuoteMarkedTextElement193() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement193()
}

func (c *current) onDoubleQuoteMarkedTextElement195() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonDoubleQuoteMarkedTextElement195() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement195()
}

func (c *current) onDoubleQuoteMarkedTextElement197() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonDoubleQuoteMarkedTextElement197() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement197()
}

func (c *current) onDoubleQuoteMarkedTextElement199() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonDoubleQuoteMarkedTextElement199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement199()
}

func (c *current) onDoubleQuoteMarkedTextElement201() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonDoubleQuoteMarkedTextElement201() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement201()
}

func (c *current) onDoubleQuoteMarkedTextElement214() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMarkedTextElement214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement214()
}

func (c *current) onDoubleQuoteMarkedTextElement210(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonDoubleQuoteMarkedTextElement210() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement210(stack["ref"])
}

func (c *current) onDoubleQuoteMarkedTextElement222() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement222() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement222()
}

func (c *current) onDoubleQuoteMarkedTextElement219() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement219() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement219()
}

func (c *current) onDoubleQuoteMarkedTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleMarkedBoldText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleMarkedBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleMarkedBoldText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteMarkedText1(elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.SingleQuoteMarked, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText1(stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextElements9() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElements9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElements9()
}

func (c *current) onSingleQuoteMarkedTextElements14(elements interface{}) (bool, error) {
	return validateSingleQuoteElements(elements.([]interface{})) // cannot end with spaces

}

func (p *parser) callonSingleQuoteMarkedTextElements14() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElements14(stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonSingleQuoteMarkedTextElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElements1(stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextElement9() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement9()
}

func (c *current) onSingleQuoteMarkedTextElement2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement2()
}

func (c *current) onSingleQuoteMarkedTextElement12() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement12()
}

func (c *current) onSingleQuoteMarkedTextElement19() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMarkedTextElement19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement19()
}

func (c *current) onSingleQuoteMarkedTextElement25() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMarkedTextElement25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement25()
}

func (c *current) onSingleQuoteMarkedTextElement29() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonSingleQuoteMarkedTextElement29() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement29()
}

func (c *current) onSingleQuoteMarkedTextElement36() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement36()
}

func (c *current) onSingleQuoteMarkedTextElement48() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement48()
}

func (c *current) onSingleQuoteMarkedTextElement50() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement50()
}

func (c *current) onSingleQuoteMarkedTextElement43(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteMarkedTextElement43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement43(stack["start"])
}

func (c *current) onSingleQuoteMarkedTextElement32(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonSingleQuoteMarkedTextElement32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement32(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteMarkedTextElement58() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement58()
}

func (c *current) onSingleQuoteMarkedTextElement70() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement70()
}

func (c *current) onSingleQuoteMarkedTextElement72() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement72()
}

func (c *current) onSingleQuoteMarkedTextElement65(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteMarkedTextElement65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement65(stack["start"])
}

func (c *current) onSingleQuoteMarkedTextElement54(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonSingleQuoteMarkedTextElement54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement54(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteMarkedTextElement80() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement80()
}

func (c *current) onSingleQuoteMarkedTextElement76(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonSingleQuoteMarkedTextElement76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement76(stack["name"])
}

func (c *current) onSingleQuoteMarkedTextElement27(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteMarkedTextElement27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement27(stack["element"])
}

func (c *current) onSingleQuoteMarkedTextElement88() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonSingleQuoteMarkedTextElement88() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement88()
}

func (c *current) onSingleQuoteMarkedTextElement97() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement97()
}

func (c *current) onSingleQuoteMarkedTextElement103() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement103()
}

func (c *current) onSingleQuoteMarkedTextElement109() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement109()
}

func (c *current) onSingleQuoteMarkedTextElement116() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonSingleQuoteMarkedTextElement116() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement116()
}

func (c *current) onSingleQuoteMarkedTextElement123() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement123()
}

func (c *current) onSingleQuoteMarkedTextElement135() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement135()
}

func (c *current) onSingleQuoteMarkedTextElement137() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement137()
}

func (c *current) onSingleQuoteMarkedTextElement130(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteMarkedTextElement130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement130(stack["start"])
}

func (c *current) onSingleQuoteMarkedTextElement119(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonSingleQuoteMarkedTextElement119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement119(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteMarkedTextElement145() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement145()
}

func (c *current) onSingleQuoteMarkedTextElement157() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement157()
}

func (c *current) onSingleQuoteMarkedTextElement159() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement159()
}

func (c *current) onSingleQuoteMarkedTextElement152(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteMarkedTextElement152() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement152(stack["start"])
}

func (c *current) onSingleQuoteMarkedTextElement141(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonSingleQuoteMarkedTextElement141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement141(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteMarkedTextElement167() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement167()
}

func (c *current) onSingleQuoteMarkedTextElement163(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonSingleQuoteMarkedTextElement163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement163(stack["name"])
}

func (c *current) onSingleQuoteMarkedTextElement114(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteMarkedTextElement114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement114(stack["element"])
}

func (c *current) onSingleQuoteMarkedTextElement173() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement173()
}

func (c *current) onSingleQuoteMarkedTextElement93(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonSingleQuoteMarkedTextElement93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement93(stack["id"], stack["label"])
}

func (c *current) onSingleQuoteMarkedTextElement180() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement180()
}

func (c *current) onSingleQuoteMarkedTextElement176(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonSingleQuoteMarkedTextElement176() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement176(stack["id"])
}

func (c *current) onSingleQuoteMarkedTextElement91() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement91()
}

func (c *current) onSingleQuoteMarkedTextElement184() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement184()
}

func (c *current) onSingleQuoteMarkedTextElement86(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteMarkedTextElement86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement86(stack["element"])
}

func (c *current) onSingleQuoteMarkedTextElement186() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonSingleQuoteMarkedTextElement186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement186()
}

func (c *current) onSingleQuoteMarkedTextElement188() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonSingleQuoteMarkedTextElement188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement188()
}

func (c *current) onSingleQuoteMarkedTextElement190() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonSingleQuoteMarkedTextElement190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement190()
}

func (c *current) onSingleQuoteMarkedTextElement192() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonSingleQuoteMarkedTextElement192() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement192()
}

func (c *current) onSingleQuoteMarkedTextElement194() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonSingleQuoteMarkedTextElement194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement194()
}

func (c *current) onSingleQuoteMarkedTextElement196() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonSingleQuoteMarkedTextElement196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement196()
}

func (c *current) onSingleQuoteMarkedTextElement209() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMarkedTextElement209() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement209()
}

func (c *current) onSingleQuoteMarkedTextElement205(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonSingleQuoteMarkedTextElement205() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement205(stack["ref"])
}

func (c *current) onSingleQuoteMarkedTextElement217() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement217() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement217()
}

func (c *current) onSingleQuoteMarkedTextElement214() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement214()
}

func (c *current) onQuotedTextInSingleQuoteMarkedText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteMarkedText1(stack["attributes"], stack["text"])
}

func (c *current) onEscapedMarkedText5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMarkedText5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText5()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMarkedText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText17()
}

func (c *current) onEscapedMarkedText14(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText14(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText27() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMarkedText27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText27()
}

func (c *current) onEscapedMarkedText24(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText24(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.SingleQuoteSubscript, element)

}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["element"])
}

func (c *current) onSubscriptTextElement3() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil

}

func (p *parser) callonSubscriptTextElement3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptTextElement3()
}

func (c *current) onEscapedSubscriptText4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedSubscriptText4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText4()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)

}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.SingleQuoteSuperscript, element)

}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["element"])
}

func (c *current) onSuperscriptTextElement3() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil

}

func (p *parser) callonSuperscriptTextElement3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptTextElement3()
}

func (c *current) onEscapedSuperscriptText4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedSuperscriptText4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText4()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)

}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.SingleQuote, elements.([]interface{}))

}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.Merge(elements), nil

}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onSingleQuotedStringElement14() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement14()
}

func (c *current) onSingleQuotedStringElement7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedStringElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement7()
}

func (c *current) onSingleQuotedStringElement21() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuotedStringElement21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement21()
}

func (c *current) onSingleQuotedStringElement27() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuotedStringElement27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement27()
}

func (c *current) onSingleQuotedStringElement31() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonSingleQuotedStringElement31() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement31()
}

func (c *current) onSingleQuotedStringElement38() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement38()
}

func (c *current) onSingleQuotedStringElement50() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement50()
}

func (c *current) onSingleQuotedStringElement52() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuotedStringElement52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement52()
}

func (c *current) onSingleQuotedStringElement45(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuotedStringElement45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement45(stack["start"])
}

func (c *current) onSingleQuotedStringElement34(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonSingleQuotedStringElement34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement34(stack["name"], stack["start"])
}

func (c *current) onSingleQuotedStringElement60() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement60()
}

func (c *current) onSingleQuotedStringElement72() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement72()
}

func (c *current) onSingleQuotedStringElement74() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuotedStringElement74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement74()
}

func (c *current) onSingleQuotedStringElement67(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuotedStringElement67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement67(stack["start"])
}

func (c *current) onSingleQuotedStringElement56(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonSingleQuotedStringElement56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement56(stack["name"], stack["start"])
}

func (c *current) onSingleQuotedStringElement82() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement82()
}

func (c *current) onSingleQuotedStringElement78(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonSingleQuotedStringElement78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement78(stack["name"])
}

func (c *current) onSingleQuotedStringElement29(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuotedStringElement29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement29(stack["element"])
}

func (c *current) onSingleQuotedStringElement90() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonSingleQuotedStringElement90() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement90()
}

func (c *current) onSingleQuotedStringElement99() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement99()
}

func (c *current) onSingleQuotedStringElement105() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement105()
}

func (c *current) onSingleQuotedStringElement111() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedStringElement111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement111()
}

func (c *current) onSingleQuotedStringElement118() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonSingleQuotedStringElement118() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement118()
}

func (c *current) onSingleQuotedStringElement125() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement125()
}

func (c *current) onSingleQuotedStringElement137() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement137()
}

func (c *current) onSingleQuotedStringElement139() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuotedStringElement139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement139()
}

func (c *current) onSingleQuotedStringElement132(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuotedStringElement132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement132(stack["start"])
}

func (c *current) onSingleQuotedStringElement121(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonSingleQuotedStringElement121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement121(stack["name"], stack["start"])
}

func (c *current) onSingleQuotedStringElement147() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement147()
}

func (c *current) onSingleQuotedStringElement159() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement159()
}

func (c *current) onSingleQuotedStringElement161() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuotedStringElement161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement161()
}

func (c *current) onSingleQuotedStringElement154(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuotedStringElement154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement154(stack["start"])
}

func (c *current) onSingleQuotedStringElement143(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonSingleQuotedStringElement143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement143(stack["name"], stack["start"])
}

func (c *current) onSingleQuotedStringElement169() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement169()
}

func (c *current) onSingleQuotedStringElement165(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonSingleQuotedStringElement165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement165(stack["name"])
}

func (c *current) onSingleQuotedStringElement116(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuotedStringElement116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement116(stack["element"])
}

func (c *current) onSingleQuotedStringElement175() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedStringElement175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement175()
}

func (c *current) onSingleQuotedStringElement95(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonSingleQuotedStringElement95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement95(stack["id"], stack["label"])
}

func (c *current) onSingleQuotedStringElement182() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement182()
}

func (c *current) onSingleQuotedStringElement178(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonSingleQuotedStringElement178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement178(stack["id"])
}

func (c *current) onSingleQuotedStringElement93() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedStringElement93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement93()
}

func (c *current) onSingleQuotedStringElement186() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSingleQuotedStringElement186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement186()
}

func (c *current) onSingleQuotedStringElement88(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuotedStringElement88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement88(stack["element"])
}

func (c *current) onSingleQuotedStringElement194() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement194()
}

func (c *current) onSingleQuotedStringElement200() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement200() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement200()
}

func (c *current) onSingleQuotedStringElement208() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuotedStringElement208() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement208()
}

func (c *current) onSingleQuotedStringElement190() (interface{}, error) {
	return types.NewLineBreak()

}

func (p *parser) callonSingleQuotedStringElement190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement190()
}

func (c *current) onSingleQuotedStringElement215() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement215() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement215()
}

func (c *current) onSingleQuotedStringElement219() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonSingleQuotedStringElement219() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement219()
}

func (c *current) onSingleQuotedStringElement221() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonSingleQuotedStringElement221() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement221()
}

func (c *current) onSingleQuotedStringElement223() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonSingleQuotedStringElement223() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement223()
}

func (c *current) onSingleQuotedStringElement225() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonSingleQuotedStringElement225() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement225()
}

func (c *current) onSingleQuotedStringElement227() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonSingleQuotedStringElement227() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement227()
}

func (c *current) onSingleQuotedStringElement229() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonSingleQuotedStringElement229() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement229()
}

func (c *current) onSingleQuotedStringElement238() (interface{}, error) {
	// '
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedStringElement238() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement238()
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onQuotedTextInSingleQuotedString10(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonQuotedTextInSingleQuotedString10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuotedString10(stack["element"])
}

func (c *current) onQuotedTextInSingleQuotedString1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuotedString1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.DoubleQuote, elements.([]interface{}))

}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.Merge(elements), nil

}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement14() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement14()
}

func (c *current) onDoubleQuotedStringElement7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedStringElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement7()
}

func (c *current) onDoubleQuotedStringElement22() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement22()
}

func (c *current) onDoubleQuotedStringElement28() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement28()
}

func (c *current) onDoubleQuotedStringElement36() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuotedStringElement36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement36()
}

func (c *current) onDoubleQuotedStringElement18() (interface{}, error) {
	return types.NewLineBreak()

}

func (p *parser) callonDoubleQuotedStringElement18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement18()
}

func (c *current) onDoubleQuotedStringElement43() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement43()
}

func (c *current) onDoubleQuotedStringElement51() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuotedStringElement51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement51()
}

func (c *current) onDoubleQuotedStringElement57() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuotedStringElement57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement57()
}

func (c *current) onDoubleQuotedStringElement61() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonDoubleQuotedStringElement61() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement61()
}

func (c *current) onDoubleQuotedStringElement68() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement68()
}

func (c *current) onDoubleQuotedStringElement80() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement80()
}

func (c *current) onDoubleQuotedStringElement82() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuotedStringElement82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement82()
}

func (c *current) onDoubleQuotedStringElement75(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuotedStringElement75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement75(stack["start"])
}

func (c *current) onDoubleQuotedStringElement64(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonDoubleQuotedStringElement64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement64(stack["name"], stack["start"])
}

func (c *current) onDoubleQuotedStringElement90() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement90()
}

func (c *current) onDoubleQuotedStringElement102() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement102()
}

func (c *current) onDoubleQuotedStringElement104() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuotedStringElement104() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement104()
}

func (c *current) onDoubleQuotedStringElement97(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuotedStringElement97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement97(stack["start"])
}

func (c *current) onDoubleQuotedStringElement86(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonDoubleQuotedStringElement86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement86(stack["name"], stack["start"])
}

func (c *current) onDoubleQuotedStringElement112() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement112()
}

func (c *current) onDoubleQuotedStringElement108(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonDoubleQuotedStringElement108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement108(stack["name"])
}

func (c *current) onDoubleQuotedStringElement59(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuotedStringElement59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement59(stack["element"])
}

func (c *current) onDoubleQuotedStringElement120() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonDoubleQuotedStringElement120() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement120()
}

func (c *current) onDoubleQuotedStringElement129() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement129()
}

func (c *current) onDoubleQuotedStringElement135() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement135()
}

func (c *current) onDoubleQuotedStringElement141() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedStringElement141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement141()
}

func (c *current) onDoubleQuotedStringElement148() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonDoubleQuotedStringElement148() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement148()
}

func (c *current) onDoubleQuotedStringElement155() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement155()
}

func (c *current) onDoubleQuotedStringElement167() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement167()
}

func (c *current) onDoubleQuotedStringElement169() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuotedStringElement169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement169()
}

func (c *current) onDoubleQuotedStringElement162(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuotedStringElement162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement162(stack["start"])
}

func (c *current) onDoubleQuotedStringElement151(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonDoubleQuotedStringElement151() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement151(stack["name"], stack["start"])
}

func (c *current) onDoubleQuotedStringElement177() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement177()
}

func (c *current) onDoubleQuotedStringElement189() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement189() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement189()
}

func (c *current) onDoubleQuotedStringElement191() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuotedStringElement191() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement191()
}

func (c *current) onDoubleQuotedStringElement184(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuotedStringElement184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement184(stack["start"])
}

func (c *current) onDoubleQuotedStringElement173(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonDoubleQuotedStringElement173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement173(stack["name"], stack["start"])
}

func (c *current) onDoubleQuotedStringElement199() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement199()
}

func (c *current) onDoubleQuotedStringElement195(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonDoubleQuotedStringElement195() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement195(stack["name"])
}

func (c *current) onDoubleQuotedStringElement146(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuotedStringElement146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement146(stack["element"])
}

func (c *current) onDoubleQuotedStringElement205() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedStringElement205() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement205()
}

func (c *current) onDoubleQuotedStringElement125(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonDoubleQuotedStringElement125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement125(stack["id"], stack["label"])
}

func (c *current) onDoubleQuotedStringElement212() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement212() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement212()
}

func (c *current) onDoubleQuotedStringElement208(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonDoubleQuotedStringElement208() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement208(stack["id"])
}

func (c *current) onDoubleQuotedStringElement123() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedStringElement123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement123()
}

func (c *current) onDoubleQuotedStringElement216() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonDoubleQuotedStringElement216() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement216()
}

func (c *current) onDoubleQuotedStringElement118(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuotedStringElement118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement118(stack["element"])
}

func (c *current) onDoubleQuotedStringElement221() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedStringElement221() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement221()
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuotedString10(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonQuotedTextInDoubleQuotedString10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuotedString10(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuotedString1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuotedString1(stack["attributes"], stack["text"])
}

func (c *current) onAttributesGroup6() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributesGroup6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup6()
}

func (c *current) onAttributesGroup10() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributesGroup10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup10()
}

func (c *current) onAttributesGroup14() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonAttributesGroup14() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup14()
}

func (c *current) onAttributesGroup23() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonAttributesGroup23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup23()
}

func (c *current) onAttributesGroup29() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributesGroup29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup29()
}

func (c *current) onAttributesGroup35() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributesGroup35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup35()
}

func (c *current) onAttributesGroup42() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonAttributesGroup42() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup42()
}

func (c *current) onAttributesGroup49() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributesGroup49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup49()
}

func (c *current) onAttributesGroup61() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributesGroup61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup61()
}

func (c *current) onAttributesGroup63() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonAttributesGroup63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup63()
}

func (c *current) onAttributesGroup56(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonAttributesGroup56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup56(stack["start"])
}

func (c *current) onAttributesGroup45(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonAttributesGroup45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup45(stack["name"], stack["start"])
}

func (c *current) onAttributesGroup71() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributesGroup71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup71()
}

func (c *current) onAttributesGroup83() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributesGroup83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup83()
}

func (c *current) onAttributesGroup85() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonAttributesGroup85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup85()
}

func (c *current) onAttributesGroup78(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonAttributesGroup78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup78(stack["start"])
}

func (c *current) onAttributesGroup67(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonAttributesGroup67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup67(stack["name"], stack["start"])
}

func (c *current) onAttributesGroup93() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributesGroup93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup93()
}

func (c *current) onAttributesGroup89(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttributesGroup89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup89(stack["name"])
}

func (c *current) onAttributesGroup40(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonAttributesGroup40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup40(stack["element"])
}

func (c *current) onAttributesGroup99() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributesGroup99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup99()
}

func (c *current) onAttributesGroup19(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonAttributesGroup19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup19(stack["id"], stack["label"])
}

func (c *current) onAttributesGroup106() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonAttributesGroup106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup106()
}

func (c *current) onAttributesGroup102(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonAttributesGroup102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup102(stack["id"])
}

func (c *current) onAttributesGroup17() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributesGroup17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup17()
}

func (c *current) onAttributesGroup110() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonAttributesGroup110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup110()
}

func (c *current) onAttributesGroup12(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonAttributesGroup12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup12(stack["element"])
}

func (c *current) onAttributesGroup116() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonAttributesGroup116() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup116()
}

func (c *current) onAttributesGroup123() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributesGroup123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup123()
}

func (c *current) onAttributesGroup135() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributesGroup135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup135()
}

func (c *current) onAttributesGroup137() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonAttributesGroup137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup137()
}

func (c *current) onAttributesGroup130(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonAttributesGroup130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup130(stack["start"])
}

func (c *current) onAttributesGroup119(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonAttributesGroup119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup119(stack["name"], stack["start"])
}

func (c *current) onAttributesGroup145() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributesGroup145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup145()
}

func (c *current) onAttributesGroup157() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributesGroup157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup157()
}

func (c *current) onAttributesGroup159() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonAttributesGroup159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup159()
}

func (c *current) onAttributesGroup152(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonAttributesGroup152() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup152(stack["start"])
}

func (c *current) onAttributesGroup141(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonAttributesGroup141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup141(stack["name"], stack["start"])
}

func (c *current) onAttributesGroup167() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributesGroup167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup167()
}

func (c *current) onAttributesGroup163(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttributesGroup163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup163(stack["name"])
}

func (c *current) onAttributesGroup114(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonAttributesGroup114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup114(stack["element"])
}

func (c *current) onAttributesGroup177() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributesGroup177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup177()
}

func (c *current) onAttributesGroup173(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonAttributesGroup173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup173(stack["ref"])
}

func (c *current) onAttributesGroup181() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributesGroup181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup181()
}

func (c *current) onAttributesGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonAttributesGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup1(stack["elements"])
}

func (c *current) onElementAttributesGroup9() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonElementAttributesGroup9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup9()
}

func (c *current) onElementAttributesGroup15() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonElementAttributesGroup15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup15()
}

func (c *current) onElementAttributesGroup22() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonElementAttributesGroup22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup22()
}

func (c *current) onElementAttributesGroup6(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonElementAttributesGroup6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup6(stack["content"])
}

func (c *current) onElementAttributesGroup24() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonElementAttributesGroup24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup24()
}

func (c *current) onElementAttributesGroup33() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonElementAttributesGroup33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup33()
}

func (c *current) onElementAttributesGroup48() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonElementAttributesGroup48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup48()
}

func (c *current) onElementAttributesGroup54() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonElementAttributesGroup54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup54()
}

func (c *current) onElementAttributesGroup42() (interface{}, error) {
	return types.NewString(string(c.text))
}

func (p *parser) callonElementAttributesGroup42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup42()
}

func (c *current) onElementAttributesGroup58() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonElementAttributesGroup58() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup58()
}

func (c *current) onElementAttributesGroup65() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonElementAttributesGroup65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup65()
}

func (c *current) onElementAttributesGroup77() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonElementAttributesGroup77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup77()
}

func (c *current) onElementAttributesGroup79() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonElementAttributesGroup79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup79()
}

func (c *current) onElementAttributesGroup72(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonElementAttributesGroup72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup72(stack["start"])
}

func (c *current) onElementAttributesGroup61(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonElementAttributesGroup61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup61(stack["name"], stack["start"])
}

func (c *current) onElementAttributesGroup87() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonElementAttributesGroup87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup87()
}

func (c *current) onElementAttributesGroup99() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonElementAttributesGroup99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup99()
}

func (c *current) onElementAttributesGroup101() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonElementAttributesGroup101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup101()
}

func (c *current) onElementAttributesGroup94(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonElementAttributesGroup94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup94(stack["start"])
}

func (c *current) onElementAttributesGroup83(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonElementAttributesGroup83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup83(stack["name"], stack["start"])
}

func (c *current) onElementAttributesGroup109() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonElementAttributesGroup109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup109()
}

func (c *current) onElementAttributesGroup105(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonElementAttributesGroup105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup105(stack["name"])
}

func (c *current) onElementAttributesGroup56(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonElementAttributesGroup56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup56(stack["element"])
}

func (c *current) onElementAttributesGroup118() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonElementAttributesGroup118() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup118()
}

func (c *current) onElementAttributesGroup127() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonElementAttributesGroup127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup127()
}

func (c *current) onElementAttributesGroup133() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonElementAttributesGroup133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup133()
}

func (c *current) onElementAttributesGroup139() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonElementAttributesGroup139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup139()
}

func (c *current) onElementAttributesGroup146() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonElementAttributesGroup146() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup146()
}

func (c *current) onElementAttributesGroup153() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonElementAttributesGroup153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup153()
}

func (c *current) onElementAttributesGroup165() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonElementAttributesGroup165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup165()
}

func (c *current) onElementAttributesGroup167() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonElementAttributesGroup167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup167()
}

func (c *current) onElementAttributesGroup160(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonElementAttributesGroup160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup160(stack["start"])
}

func (c *current) onElementAttributesGroup149(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonElementAttributesGroup149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup149(stack["name"], stack["start"])
}

func (c *current) onElementAttributesGroup175() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonElementAttributesGroup175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup175()
}

func (c *current) onElementAttributesGroup187() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonElementAttributesGroup187() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup187()
}

func (c *current) onElementAttributesGroup189() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonElementAttributesGroup189() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup189()
}

func (c *current) onElementAttributesGroup182(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonElementAttributesGroup182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup182(stack["start"])
}

func (c *current) onElementAttributesGroup171(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonElementAttributesGroup171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup171(stack["name"], stack["start"])
}

func (c *current) onElementAttributesGroup197() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonElementAttributesGroup197() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup197()
}

func (c *current) onElementAttributesGroup193(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonElementAttributesGroup193() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup193(stack["name"])
}

func (c *current) onElementAttributesGroup144(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonElementAttributesGroup144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup144(stack["element"])
}

func (c *current) onElementAttributesGroup203() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonElementAttributesGroup203() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup203()
}

func (c *current) onElementAttributesGroup123(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonElementAttributesGroup123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup123(stack["id"], stack["label"])
}

func (c *current) onElementAttributesGroup210() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonElementAttributesGroup210() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup210()
}

func (c *current) onElementAttributesGroup206(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonElementAttributesGroup206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup206(stack["id"])
}

func (c *current) onElementAttributesGroup121() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonElementAttributesGroup121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup121()
}

func (c *current) onElementAttributesGroup214() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonElementAttributesGroup214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup214()
}

func (c *current) onElementAttributesGroup116(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonElementAttributesGroup116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup116(stack["element"])
}

func (c *current) onElementAttributesGroup220() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementAttributesGroup220() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup220()
}

func (c *current) onElementAttributesGroup216(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonElementAttributesGroup216() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup216(stack["ref"])
}

func (c *current) onElementAttributesGroup224() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonElementAttributesGroup224() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup224()
}

func (c *current) onElementAttributesGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonElementAttributesGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup1(stack["elements"])
}

func (c *current) onHeaderGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonHeaderGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup1(stack["elements"])
}

func (c *current) onHeaderGroupElement11() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonHeaderGroupElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement11()
}

func (c *current) onHeaderGroupElement17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement17()
}

func (c *current) onHeaderGroupElement24() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonHeaderGroupElement24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement24()
}

func (c *current) onHeaderGroupElement8(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonHeaderGroupElement8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement8(stack["content"])
}

func (c *current) onHeaderGroupElement26() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonHeaderGroupElement26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement26()
}

func (c *current) onHeaderGroupElement35() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonHeaderGroupElement35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement35()
}

func (c *current) onHeaderGroupElement50() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement50()
}

func (c *current) onHeaderGroupElement56() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonHeaderGroupElement56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement56()
}

func (c *current) onHeaderGroupElement44() (interface{}, error) {
	return types.NewString(string(c.text))
}

func (p *parser) callonHeaderGroupElement44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement44()
}

func (c *current) onHeaderGroupElement59() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement59()
}

func (c *current) onHeaderGroupElement64() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonHeaderGroupElement64() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement64()
}

func (c *current) onHeaderGroupElement73() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement73()
}

func (c *current) onHeaderGroupElement79() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement79()
}

func (c *current) onHeaderGroupElement85() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonHeaderGroupElement85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement85()
}

func (c *current) onHeaderGroupElement92() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonHeaderGroupElement92() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement92()
}

func (c *current) onHeaderGroupElement99() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement99()
}

func (c *current) onHeaderGroupElement111() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement111()
}

func (c *current) onHeaderGroupElement113() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonHeaderGroupElement113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement113()
}

func (c *current) onHeaderGroupElement106(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonHeaderGroupElement106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement106(stack["start"])
}

func (c *current) onHeaderGroupElement95(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonHeaderGroupElement95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement95(stack["name"], stack["start"])
}

func (c *current) onHeaderGroupElement121() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement121()
}

func (c *current) onHeaderGroupElement133() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement133()
}

func (c *current) onHeaderGroupElement135() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonHeaderGroupElement135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement135()
}

func (c *current) onHeaderGroupElement128(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonHeaderGroupElement128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement128(stack["start"])
}

func (c *current) onHeaderGroupElement117(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonHeaderGroupElement117() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement117(stack["name"], stack["start"])
}

func (c *current) onHeaderGroupElement143() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement143()
}

func (c *current) onHeaderGroupElement139(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonHeaderGroupElement139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement139(stack["name"])
}

func (c *current) onHeaderGroupElement90(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonHeaderGroupElement90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement90(stack["element"])
}

func (c *current) onHeaderGroupElement149() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonHeaderGroupElement149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement149()
}

func (c *current) onHeaderGroupElement69(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonHeaderGroupElement69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement69(stack["id"], stack["label"])
}

func (c *current) onHeaderGroupElement156() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement156()
}

func (c *current) onHeaderGroupElement152(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonHeaderGroupElement152() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement152(stack["id"])
}

func (c *current) onHeaderGroupElement67() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonHeaderGroupElement67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement67()
}

func (c *current) onHeaderGroupElement160() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonHeaderGroupElement160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement160()
}

func (c *current) onHeaderGroupElement62(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonHeaderGroupElement62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement62(stack["element"])
}

func (c *current) onHeaderGroupElement167() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonHeaderGroupElement167() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement167()
}

func (c *current) onHeaderGroupElement174() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement174()
}

func (c *current) onHeaderGroupElement186() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement186()
}

func (c *current) onHeaderGroupElement188() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonHeaderGroupElement188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement188()
}

func (c *current) onHeaderGroupElement181(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonHeaderGroupElement181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement181(stack["start"])
}

func (c *current) onHeaderGroupElement170(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonHeaderGroupElement170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement170(stack["name"], stack["start"])
}

func (c *current) onHeaderGroupElement196() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement196()
}

func (c *current) onHeaderGroupElement208() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement208() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement208()
}

func (c *current) onHeaderGroupElement210() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonHeaderGroupElement210() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement210()
}

func (c *current) onHeaderGroupElement203(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonHeaderGroupElement203() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement203(stack["start"])
}

func (c *current) onHeaderGroupElement192(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonHeaderGroupElement192() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement192(stack["name"], stack["start"])
}

func (c *current) onHeaderGroupElement218() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement218()
}

func (c *current) onHeaderGroupElement214(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonHeaderGroupElement214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement214(stack["name"])
}

func (c *current) onHeaderGroupElement165(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonHeaderGroupElement165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement165(stack["element"])
}

func (c *current) onHeaderGroupElement228() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHeaderGroupElement228() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement228()
}

func (c *current) onHeaderGroupElement224(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonHeaderGroupElement224() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement224(stack["ref"])
}

func (c *current) onHeaderGroupElement234() (bool, error) {
	return c.isSubstitutionEnabled(Replacements)

}

func (p *parser) callonHeaderGroupElement234() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement234()
}

func (c *current) onHeaderGroupElement237() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonHeaderGroupElement237() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement237()
}

func (c *current) onHeaderGroupElement239() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonHeaderGroupElement239() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement239()
}

func (c *current) onHeaderGroupElement241() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonHeaderGroupElement241() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement241()
}

func (c *current) onHeaderGroupElement243() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonHeaderGroupElement243() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement243()
}

func (c *current) onHeaderGroupElement245() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonHeaderGroupElement245() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement245()
}

func (c *current) onHeaderGroupElement247() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonHeaderGroupElement247() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement247()
}

func (c *current) onHeaderGroupElement232(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonHeaderGroupElement232() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement232(stack["element"])
}

func (c *current) onHeaderGroupElement261() (interface{}, error) {
	// spaces, commas and dots are allowed in this syntax
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonHeaderGroupElement261() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement261()
}

func (c *current) onHeaderGroupElement268() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHeaderGroupElement268() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement268()
}

func (c *current) onHeaderGroupElement264(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonHeaderGroupElement264() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement264(stack["ref"])
}

func (c *current) onHeaderGroupElement274() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonHeaderGroupElement274() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement274()
}

func (c *current) onHeaderGroupElement281() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement281() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement281()
}

func (c *current) onHeaderGroupElement293() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement293() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement293()
}

func (c *current) onHeaderGroupElement295() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonHeaderGroupElement295() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement295()
}

func (c *current) onHeaderGroupElement288(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonHeaderGroupElement288() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement288(stack["start"])
}

func (c *current) onHeaderGroupElement277(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonHeaderGroupElement277() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement277(stack["name"], stack["start"])
}

func (c *current) onHeaderGroupElement303() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement303() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement303()
}

func (c *current) onHeaderGroupElement315() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement315() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement315()
}

func (c *current) onHeaderGroupElement317() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonHeaderGroupElement317() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement317()
}

func (c *current) onHeaderGroupElement310(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonHeaderGroupElement310() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement310(stack["start"])
}

func (c *current) onHeaderGroupElement299(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonHeaderGroupElement299() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement299(stack["name"], stack["start"])
}

func (c *current) onHeaderGroupElement325() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement325() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement325()
}

func (c *current) onHeaderGroupElement321(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonHeaderGroupElement321() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement321(stack["name"])
}

func (c *current) onHeaderGroupElement272(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonHeaderGroupElement272() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement272(stack["element"])
}

func (c *current) onHeaderGroupElement331() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonHeaderGroupElement331() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement331()
}

func (c *current) onHeaderGroupElement257(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonHeaderGroupElement257() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement257(stack["elements"])
}

func (c *current) onHeaderGroupElement253(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonHeaderGroupElement253() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement253(stack["id"])
}

func (c *current) onHeaderGroupElement335() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonHeaderGroupElement335() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement335()
}

func (c *current) onHeaderGroupElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonHeaderGroupElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement1(stack["element"])
}

func (c *current) onMacrosGroup9() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonMacrosGroup9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMacrosGroup9()
}

func (c *current) onMacrosGroup15() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonMacrosGroup15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMacrosGroup15()
}

func (c *current) onMacrosGroup22() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonMacrosGroup22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMacrosGroup22()
}

func (c *current) onMacrosGroup6(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonMacrosGroup6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMacrosGroup6(stack["content"])
}

func (c *current) onMacrosGroup24() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonMacrosGroup24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMacrosGroup24()
}

func (c *current) onMacrosGroup33() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonMacrosGroup33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMacrosGroup33()
}

func (c *current) onMacrosGroup48() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonMacrosGroup48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMacrosGroup48()
}

func (c *current) onMacrosGroup54() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonMacrosGroup54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMacrosGroup54()
}

func (c *current) onMacrosGroup42() (interface{}, error) {
	return types.NewString(string(c.text))
}

func (p *parser) callonMacrosGroup42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMacrosGroup42()
}

func (c *current) onMacrosGroup61() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMacrosGroup61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMacrosGroup61()
}

func (c *current) onMacrosGroup57(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonMacrosGroup57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMacrosGroup57(stack["ref"])
}

func (c *current) onMacrosGroup65() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonMacrosGroup65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMacrosGroup65()
}

func (c *current) onMacrosGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonMacrosGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMacrosGroup1(stack["elements"])
}

func (c *current) onNoneGroup16() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNoneGroup16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneGroup16()
}

func (c *current) onNoneGroup22() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNoneGroup22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneGroup22()
}

func (c *current) onNoneGroup29() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNoneGroup29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneGroup29()
}

func (c *current) onNoneGroup13(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonNoneGroup13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneGroup13(stack["content"])
}

func (c *current) onNoneGroup31() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNoneGroup31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneGroup31()
}

func (c *current) onNoneGroup40() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNoneGroup40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneGroup40()
}

func (c *current) onNoneGroup55() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNoneGroup55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneGroup55()
}

func (c *current) onNoneGroup61() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNoneGroup61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneGroup61()
}

func (c *current) onNoneGroup49() (interface{}, error) {
	return types.NewString(string(c.text))
}

func (p *parser) callonNoneGroup49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneGroup49()
}

func (c *current) onNoneGroup67() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonNoneGroup67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneGroup67()
}

func (c *current) onNoneGroup63(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonNoneGroup63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneGroup63(stack["ref"])
}

func (c *current) onNoneGroup71() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNoneGroup71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneGroup71()
}

func (c *current) onNoneGroup5(element interface{}) (interface{}, error) {

	return element, nil

}

func (p *parser) callonNoneGroup5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneGroup5(stack["element"])
}

func (c *current) onNoneGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonNoneGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneGroup1(stack["elements"])
}

func (c *current) onNormalGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonNormalGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup1(stack["elements"])
}

func (c *current) onNormalGroupElement11() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNormalGroupElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement11()
}

func (c *current) onNormalGroupElement17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement17()
}

func (c *current) onNormalGroupElement24() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNormalGroupElement24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement24()
}

func (c *current) onNormalGroupElement8(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonNormalGroupElement8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement8(stack["content"])
}

func (c *current) onNormalGroupElement26() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNormalGroupElement26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement26()
}

func (c *current) onNormalGroupElement35() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNormalGroupElement35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement35()
}

func (c *current) onNormalGroupElement50() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement50()
}

func (c *current) onNormalGroupElement56() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNormalGroupElement56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement56()
}

func (c *current) onNormalGroupElement44() (interface{}, error) {
	return types.NewString(string(c.text))
}

func (p *parser) callonNormalGroupElement44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement44()
}

func (c *current) onNormalGroupElement62() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement62()
}

func (c *current) onNormalGroupElement68() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement68()
}

func (c *current) onNormalGroupElement76() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNormalGroupElement76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement76()
}

func (c *current) onNormalGroupElement58() (interface{}, error) {
	return types.NewLineBreak()

}

func (p *parser) callonNormalGroupElement58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement58()
}

func (c *current) onNormalGroupElement79() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement79()
}

func (c *current) onNormalGroupElement83() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNormalGroupElement83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement83()
}

func (c *current) onNormalGroupElement90() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonNormalGroupElement90() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement90()
}

func (c *current) onNormalGroupElement99() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement99()
}

func (c *current) onNormalGroupElement105() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement105()
}

func (c *current) onNormalGroupElement111() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNormalGroupElement111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement111()
}

func (c *current) onNormalGroupElement118() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonNormalGroupElement118() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement118()
}

func (c *current) onNormalGroupElement125() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement125()
}

func (c *current) onNormalGroupElement137() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement137()
}

func (c *current) onNormalGroupElement139() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonNormalGroupElement139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement139()
}

func (c *current) onNormalGroupElement132(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonNormalGroupElement132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement132(stack["start"])
}

func (c *current) onNormalGroupElement121(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonNormalGroupElement121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement121(stack["name"], stack["start"])
}

func (c *current) onNormalGroupElement147() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement147()
}

func (c *current) onNormalGroupElement159() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement159()
}

func (c *current) onNormalGroupElement161() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonNormalGroupElement161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement161()
}

func (c *current) onNormalGroupElement154(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonNormalGroupElement154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement154(stack["start"])
}

func (c *current) onNormalGroupElement143(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonNormalGroupElement143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement143(stack["name"], stack["start"])
}

func (c *current) onNormalGroupElement169() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement169()
}

func (c *current) onNormalGroupElement165(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonNormalGroupElement165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement165(stack["name"])
}

func (c *current) onNormalGroupElement116(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonNormalGroupElement116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement116(stack["element"])
}

func (c *current) onNormalGroupElement175() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNormalGroupElement175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement175()
}

func (c *current) onNormalGroupElement95(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonNormalGroupElement95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement95(stack["id"], stack["label"])
}

func (c *current) onNormalGroupElement182() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement182()
}

func (c *current) onNormalGroupElement178(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonNormalGroupElement178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement178(stack["id"])
}

func (c *current) onNormalGroupElement93() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNormalGroupElement93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement93()
}

func (c *current) onNormalGroupElement186() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonNormalGroupElement186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement186()
}

func (c *current) onNormalGroupElement88(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonNormalGroupElement88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement88(stack["element"])
}

func (c *current) onNormalGroupElement190() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonNormalGroupElement190() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement190()
}

func (c *current) onNormalGroupElement197() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement197() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement197()
}

func (c *current) onNormalGroupElement209() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement209() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement209()
}

func (c *current) onNormalGroupElement211() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonNormalGroupElement211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement211()
}

func (c *current) onNormalGroupElement204(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonNormalGroupElement204() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement204(stack["start"])
}

func (c *current) onNormalGroupElement193(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonNormalGroupElement193() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement193(stack["name"], stack["start"])
}

func (c *current) onNormalGroupElement219() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement219() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement219()
}

func (c *current) onNormalGroupElement231() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement231() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement231()
}

func (c *current) onNormalGroupElement233() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonNormalGroupElement233() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement233()
}

func (c *current) onNormalGroupElement226(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonNormalGroupElement226() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement226(stack["start"])
}

func (c *current) onNormalGroupElement215(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonNormalGroupElement215() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement215(stack["name"], stack["start"])
}

func (c *current) onNormalGroupElement241() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement241() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement241()
}

func (c *current) onNormalGroupElement237(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonNormalGroupElement237() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement237(stack["name"])
}

func (c *current) onNormalGroupElement188(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonNormalGroupElement188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement188(stack["element"])
}

func (c *current) onNormalGroupElement249() (bool, error) {
	return c.isSubstitutionEnabled(Replacements)

}

func (p *parser) callonNormalGroupElement249() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement249()
}

func (c *current) onNormalGroupElement252() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonNormalGroupElement252() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement252()
}

func (c *current) onNormalGroupElement254() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonNormalGroupElement254() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement254()
}

func (c *current) onNormalGroupElement256() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonNormalGroupElement256() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement256()
}

func (c *current) onNormalGroupElement258() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonNormalGroupElement258() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement258()
}

func (c *current) onNormalGroupElement260() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonNormalGroupElement260() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement260()
}

func (c *current) onNormalGroupElement262() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonNormalGroupElement262() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement262()
}

func (c *current) onNormalGroupElement247(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonNormalGroupElement247() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement247(stack["element"])
}

func (c *current) onNormalGroupElement270() (bool, error) {
	return c.isSubstitutionEnabled(PostReplacements)

}

func (p *parser) callonNormalGroupElement270() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement270()
}

func (c *current) onNormalGroupElement276() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement276() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement276()
}

func (c *current) onNormalGroupElement282() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement282() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement282()
}

func (c *current) onNormalGroupElement290() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNormalGroupElement290() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement290()
}

func (c *current) onNormalGroupElement272() (interface{}, error) {
	return types.NewLineBreak()

}

func (p *parser) callonNormalGroupElement272() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement272()
}

func (c *current) onNormalGroupElement268(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonNormalGroupElement268() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement268(stack["element"])
}

func (c *current) onNormalGroupElement296() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonNormalGroupElement296() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement296()
}

func (c *current) onNormalGroupElement292(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonNormalGroupElement292() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement292(stack["ref"])
}

func (c *current) onNormalGroupElement300() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNormalGroupElement300() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement300()
}

func (c *current) onNormalGroupElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonNormalGroupElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement1(stack["element"])
}

func (c *current) onPostReplacementsGroup9() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonPostReplacementsGroup9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementsGroup9()
}

func (c *current) onPostReplacementsGroup15() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonPostReplacementsGroup15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementsGroup15()
}

func (c *current) onPostReplacementsGroup22() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPostReplacementsGroup22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementsGroup22()
}

func (c *current) onPostReplacementsGroup6(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonPostReplacementsGroup6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementsGroup6(stack["content"])
}

func (c *current) onPostReplacementsGroup24() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonPostReplacementsGroup24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementsGroup24()
}

func (c *current) onPostReplacementsGroup33() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonPostReplacementsGroup33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementsGroup33()
}

func (c *current) onPostReplacementsGroup48() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonPostReplacementsGroup48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementsGroup48()
}

func (c *current) onPostReplacementsGroup54() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPostReplacementsGroup54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementsGroup54()
}

func (c *current) onPostReplacementsGroup42() (interface{}, error) {
	return types.NewString(string(c.text))
}

func (p *parser) callonPostReplacementsGroup42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementsGroup42()
}

func (c *current) onPostReplacementsGroup60() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonPostReplacementsGroup60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementsGroup60()
}

func (c *current) onPostReplacementsGroup66() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonPostReplacementsGroup66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementsGroup66()
}

func (c *current) onPostReplacementsGroup74() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPostReplacementsGroup74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementsGroup74()
}

func (c *current) onPostReplacementsGroup56() (interface{}, error) {
	return types.NewLineBreak()

}

func (p *parser) callonPostReplacementsGroup56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementsGroup56()
}

func (c *current) onPostReplacementsGroup77() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonPostReplacementsGroup77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementsGroup77()
}

func (c *current) onPostReplacementsGroup81() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPostReplacementsGroup81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementsGroup81()
}

func (c *current) onPostReplacementsGroup87() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPostReplacementsGroup87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementsGroup87()
}

func (c *current) onPostReplacementsGroup83(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonPostReplacementsGroup83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementsGroup83(stack["ref"])
}

func (c *current) onPostReplacementsGroup91() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonPostReplacementsGroup91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementsGroup91()
}

func (c *current) onPostReplacementsGroup1(elements interface{}) (interface{}, error) {
	return types.Merge(elements), nil

}

func (p *parser) callonPostReplacementsGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementsGroup1(stack["elements"])
}

func (c *current) onQuotesGroup9() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonQuotesGroup9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotesGroup9()
}

func (c *current) onQuotesGroup15() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonQuotesGroup15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotesGroup15()
}

func (c *current) onQuotesGroup22() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonQuotesGroup22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotesGroup22()
}

func (c *current) onQuotesGroup6(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonQuotesGroup6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotesGroup6(stack["content"])
}

func (c *current) onQuotesGroup24() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonQuotesGroup24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotesGroup24()
}

func (c *current) onQuotesGroup33() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonQuotesGroup33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotesGroup33()
}

func (c *current) onQuotesGroup48() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonQuotesGroup48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotesGroup48()
}

func (c *current) onQuotesGroup54() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonQuotesGroup54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotesGroup54()
}

func (c *current) onQuotesGroup42() (interface{}, error) {
	return types.NewString(string(c.text))
}

func (p *parser) callonQuotesGroup42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotesGroup42()
}

func (c *current) onQuotesGroup61() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuotesGroup61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotesGroup61()
}

func (c *current) onQuotesGroup57(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonQuotesGroup57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotesGroup57(stack["ref"])
}

func (c *current) onQuotesGroup65() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonQuotesGroup65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotesGroup65()
}

func (c *current) onQuotesGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonQuotesGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotesGroup1(stack["elements"])
}

func (c *current) onReplacementsGroup9() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonReplacementsGroup9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup9()
}

func (c *current) onReplacementsGroup15() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonReplacementsGroup15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup15()
}

func (c *current) onReplacementsGroup22() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonReplacementsGroup22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup22()
}

func (c *current) onReplacementsGroup6(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonReplacementsGroup6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup6(stack["content"])
}

func (c *current) onReplacementsGroup24() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonReplacementsGroup24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup24()
}

func (c *current) onReplacementsGroup33() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonReplacementsGroup33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup33()
}

func (c *current) onReplacementsGroup48() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonReplacementsGroup48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup48()
}

func (c *current) onReplacementsGroup54() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonReplacementsGroup54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup54()
}

func (c *current) onReplacementsGroup42() (interface{}, error) {
	return types.NewString(string(c.text))
}

func (p *parser) callonReplacementsGroup42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup42()
}

func (c *current) onReplacementsGroup58() (bool, error) {
	return c.isSubstitutionEnabled(Replacements)

}

func (p *parser) callonReplacementsGroup58() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup58()
}

func (c *current) onReplacementsGroup61() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonReplacementsGroup61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup61()
}

func (c *current) onReplacementsGroup63() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonReplacementsGroup63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup63()
}

func (c *current) onReplacementsGroup65() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonReplacementsGroup65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup65()
}

func (c *current) onReplacementsGroup67() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonReplacementsGroup67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup67()
}

func (c *current) onReplacementsGroup69() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonReplacementsGroup69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup69()
}

func (c *current) onReplacementsGroup71() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonReplacementsGroup71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup71()
}

func (c *current) onReplacementsGroup56(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonReplacementsGroup56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup56(stack["element"])
}

func (c *current) onReplacementsGroup81() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonReplacementsGroup81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup81()
}

func (c *current) onReplacementsGroup77(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonReplacementsGroup77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup77(stack["ref"])
}

func (c *current) onReplacementsGroup85() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonReplacementsGroup85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup85()
}

func (c *current) onReplacementsGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonReplacementsGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup1(stack["elements"])
}

func (c *current) onSpecialCharactersGroup9() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharactersGroup9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup9()
}

func (c *current) onSpecialCharactersGroup15() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSpecialCharactersGroup15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup15()
}

func (c *current) onSpecialCharactersGroup22() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSpecialCharactersGroup22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup22()
}

func (c *current) onSpecialCharactersGroup6(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonSpecialCharactersGroup6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup6(stack["content"])
}

func (c *current) onSpecialCharactersGroup24() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharactersGroup24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup24()
}

func (c *current) onSpecialCharactersGroup33() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharactersGroup33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup33()
}

func (c *current) onSpecialCharactersGroup48() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSpecialCharactersGroup48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup48()
}

func (c *current) onSpecialCharactersGroup54() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSpecialCharactersGroup54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup54()
}

func (c *current) onSpecialCharactersGroup42() (interface{}, error) {
	return types.NewString(string(c.text))
}

func (p *parser) callonSpecialCharactersGroup42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup42()
}

func (c *current) onSpecialCharactersGroup58() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonSpecialCharactersGroup58() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup58()
}

func (c *current) onSpecialCharactersGroup67() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSpecialCharactersGroup67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup67()
}

func (c *current) onSpecialCharactersGroup73() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSpecialCharactersGroup73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup73()
}

func (c *current) onSpecialCharactersGroup79() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharactersGroup79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup79()
}

func (c *current) onSpecialCharactersGroup86() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonSpecialCharactersGroup86() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup86()
}

func (c *current) onSpecialCharactersGroup93() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSpecialCharactersGroup93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup93()
}

func (c *current) onSpecialCharactersGroup105() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSpecialCharactersGroup105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup105()
}

func (c *current) onSpecialCharactersGroup107() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSpecialCharactersGroup107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup107()
}

func (c *current) onSpecialCharactersGroup100(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSpecialCharactersGroup100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup100(stack["start"])
}

func (c *current) onSpecialCharactersGroup89(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonSpecialCharactersGroup89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup89(stack["name"], stack["start"])
}

func (c *current) onSpecialCharactersGroup115() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSpecialCharactersGroup115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup115()
}

func (c *current) onSpecialCharactersGroup127() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSpecialCharactersGroup127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup127()
}

func (c *current) onSpecialCharactersGroup129() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSpecialCharactersGroup129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup129()
}

func (c *current) onSpecialCharactersGroup122(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSpecialCharactersGroup122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup122(stack["start"])
}

func (c *current) onSpecialCharactersGroup111(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonSpecialCharactersGroup111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup111(stack["name"], stack["start"])
}

func (c *current) onSpecialCharactersGroup137() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSpecialCharactersGroup137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup137()
}

func (c *current) onSpecialCharactersGroup133(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonSpecialCharactersGroup133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup133(stack["name"])
}

func (c *current) onSpecialCharactersGroup84(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSpecialCharactersGroup84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup84(stack["element"])
}

func (c *current) onSpecialCharactersGroup143() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharactersGroup143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup143()
}

func (c *current) onSpecialCharactersGroup63(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonSpecialCharactersGroup63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup63(stack["id"], stack["label"])
}

func (c *current) onSpecialCharactersGroup150() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSpecialCharactersGroup150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup150()
}

func (c *current) onSpecialCharactersGroup146(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonSpecialCharactersGroup146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup146(stack["id"])
}

func (c *current) onSpecialCharactersGroup61() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharactersGroup61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup61()
}

func (c *current) onSpecialCharactersGroup154() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSpecialCharactersGroup154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup154()
}

func (c *current) onSpecialCharactersGroup56(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSpecialCharactersGroup56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup56(stack["element"])
}

func (c *current) onSpecialCharactersGroup160() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSpecialCharactersGroup160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup160()
}

func (c *current) onSpecialCharactersGroup156(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonSpecialCharactersGroup156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup156(stack["ref"])
}

func (c *current) onSpecialCharactersGroup164() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharactersGroup164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup164()
}

func (c *current) onSpecialCharactersGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonSpecialCharactersGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup1(stack["elements"])
}

func (c *current) onVerbatimGroup9() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonVerbatimGroup9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup9()
}

func (c *current) onVerbatimGroup15() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonVerbatimGroup15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup15()
}

func (c *current) onVerbatimGroup22() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonVerbatimGroup22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup22()
}

func (c *current) onVerbatimGroup6(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonVerbatimGroup6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup6(stack["content"])
}

func (c *current) onVerbatimGroup24() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonVerbatimGroup24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup24()
}

func (c *current) onVerbatimGroup33() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonVerbatimGroup33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup33()
}

func (c *current) onVerbatimGroup48() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonVerbatimGroup48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup48()
}

func (c *current) onVerbatimGroup54() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonVerbatimGroup54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup54()
}

func (c *current) onVerbatimGroup42() (interface{}, error) {
	return types.NewString(string(c.text))
}

func (p *parser) callonVerbatimGroup42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup42()
}

func (c *current) onVerbatimGroup59() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonVerbatimGroup59() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup59()
}

func (c *current) onVerbatimGroup68() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonVerbatimGroup68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup68()
}

func (c *current) onVerbatimGroup74() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonVerbatimGroup74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup74()
}

func (c *current) onVerbatimGroup80() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonVerbatimGroup80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup80()
}

func (c *current) onVerbatimGroup87() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonVerbatimGroup87() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup87()
}

func (c *current) onVerbatimGroup94() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonVerbatimGroup94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup94()
}

func (c *current) onVerbatimGroup106() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonVerbatimGroup106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup106()
}

func (c *current) onVerbatimGroup108() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonVerbatimGroup108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup108()
}

func (c *current) onVerbatimGroup101(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonVerbatimGroup101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup101(stack["start"])
}

func (c *current) onVerbatimGroup90(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonVerbatimGroup90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup90(stack["name"], stack["start"])
}

func (c *current) onVerbatimGroup116() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonVerbatimGroup116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup116()
}

func (c *current) onVerbatimGroup128() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonVerbatimGroup128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup128()
}

func (c *current) onVerbatimGroup130() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonVerbatimGroup130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup130()
}

func (c *current) onVerbatimGroup123(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonVerbatimGroup123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup123(stack["start"])
}

func (c *current) onVerbatimGroup112(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonVerbatimGroup112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup112(stack["name"], stack["start"])
}

func (c *current) onVerbatimGroup138() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonVerbatimGroup138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup138()
}

func (c *current) onVerbatimGroup134(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonVerbatimGroup134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup134(stack["name"])
}

func (c *current) onVerbatimGroup85(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonVerbatimGroup85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup85(stack["element"])
}

func (c *current) onVerbatimGroup144() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonVerbatimGroup144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup144()
}

func (c *current) onVerbatimGroup64(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonVerbatimGroup64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup64(stack["id"], stack["label"])
}

func (c *current) onVerbatimGroup151() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonVerbatimGroup151() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup151()
}

func (c *current) onVerbatimGroup147(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonVerbatimGroup147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup147(stack["id"])
}

func (c *current) onVerbatimGroup62() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonVerbatimGroup62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup62()
}

func (c *current) onVerbatimGroup155() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonVerbatimGroup155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup155()
}

func (c *current) onVerbatimGroup57(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonVerbatimGroup57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup57(stack["element"])
}

func (c *current) onVerbatimGroup161() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonVerbatimGroup161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup161()
}

func (c *current) onVerbatimGroup157(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonVerbatimGroup157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup157(stack["ref"])
}

func (c *current) onVerbatimGroup165() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonVerbatimGroup165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup165()
}

func (c *current) onVerbatimGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonVerbatimGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup1(stack["elements"])
}

func (c *current) onInlineMacro3() (bool, error) {
	return c.isSubstitutionEnabled(Macros)

}

func (p *parser) callonInlineMacro3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro3()
}

func (c *current) onInlineMacro17() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonInlineMacro17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro17()
}

func (c *current) onInlineMacro24() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineMacro24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro24()
}

func (c *current) onInlineMacro13(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineIDAttribute(id.(string))
}

func (p *parser) callonInlineMacro13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro13(stack["id"])
}

func (c *current) onInlineMacro34() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineMacro34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro34()
}

func (c *current) onInlineMacro30() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineMacro30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro30()
}

func (c *current) onInlineMacro43() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineMacro43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro43()
}

func (c *current) onInlineMacro49() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineMacro49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro49()
}

func (c *current) onInlineMacro56() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineMacro56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro56()
}

func (c *current) onInlineMacro52() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineMacro52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro52()
}

func (c *current) onInlineMacro38(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonInlineMacro38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro38(stack["content"])
}

func (c *current) onInlineMacro65() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineMacro65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro65()
}

func (c *current) onInlineMacro71() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineMacro71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro71()
}

func (c *current) onInlineMacro78() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineMacro78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro78()
}

func (c *current) onInlineMacro74() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineMacro74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro74()
}

func (c *current) onInlineMacro60(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonInlineMacro60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro60(stack["content"])
}

func (c *current) onInlineMacro26(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonInlineMacro26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro26(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onInlineMacro1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro1(stack["element"])
}

func (c *current) onInlinePassthrough3() (bool, error) {
	return c.isSubstitutionEnabled(InlinePassthroughs)

}

func (p *parser) callonInlinePassthrough3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough3()
}

func (c *current) onInlinePassthrough11() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlinePassthrough11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough11()
}

func (c *current) onInlinePassthrough23() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlinePassthrough23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough23()
}

func (c *current) onInlinePassthrough29() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonInlinePassthrough29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough29()
}

func (c *current) onInlinePassthrough17() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlinePassthrough17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough17()
}

func (c *current) onInlinePassthrough6(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})

}

func (p *parser) callonInlinePassthrough6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough6(stack["content"])
}

func (c *current) onInlinePassthrough49() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlinePassthrough49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough49()
}

func (c *current) onInlinePassthrough55() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonInlinePassthrough55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough55()
}

func (c *current) onInlinePassthrough62() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlinePassthrough62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough62()
}

func (c *current) onInlinePassthrough72() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonInlinePassthrough72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough72()
}

func (c *current) onInlinePassthrough42() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlinePassthrough42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough42()
}

func (c *current) onInlinePassthrough80() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlinePassthrough80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough80()
}

func (c *current) onInlinePassthrough86() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonInlinePassthrough86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough86()
}

func (c *current) onInlinePassthrough75() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlinePassthrough75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough75()
}

func (c *current) onInlinePassthrough37(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})

}

func (p *parser) callonInlinePassthrough37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough37(stack["content"])
}

func (c *current) onInlinePassthrough1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlinePassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough1(stack["element"])
}

func (c *current) onQuote3() (bool, error) {
	return c.isSubstitutionEnabled(Quotes)

}

func (p *parser) callonQuote3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuote3()
}

func (c *current) onQuote1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuote1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuote1(stack["element"])
}

func (c *current) onTableColumnsAttribute20() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTableColumnsAttribute20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute20()
}

func (c *current) onTableColumnsAttribute15() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonTableColumnsAttribute15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute15()
}

func (c *current) onTableColumnsAttribute12(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTableColumnsAttribute12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute12(stack["n"])
}

func (c *current) onTableColumnsAttribute26() (interface{}, error) {
	return types.HAlignLeft, nil
}

func (p *parser) callonTableColumnsAttribute26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute26()
}

func (c *current) onTableColumnsAttribute28() (interface{}, error) {
	return types.HAlignRight, nil
}

func (p *parser) callonTableColumnsAttribute28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute28()
}

func (c *current) onTableColumnsAttribute30() (interface{}, error) {
	return types.HAlignCenter, nil
}

func (p *parser) callonTableColumnsAttribute30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute30()
}

func (c *current) onTableColumnsAttribute35() (interface{}, error) {
	return types.VAlignTop, nil
}

func (p *parser) callonTableColumnsAttribute35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute35()
}

func (c *current) onTableColumnsAttribute37() (interface{}, error) {
	return types.VAlignBottom, nil
}

func (p *parser) callonTableColumnsAttribute37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute37()
}

func (c *current) onTableColumnsAttribute39() (interface{}, error) {
	return types.VAlignMiddle, nil
}

func (p *parser) callonTableColumnsAttribute39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute39()
}

func (c *current) onTableColumnsAttribute49() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTableColumnsAttribute49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute49()
}

func (c *current) onTableColumnsAttribute44() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonTableColumnsAttribute44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute44()
}

func (c *current) onTableColumnsAttribute51() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTableColumnsAttribute51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute51()
}

func (c *current) onTableColumnsAttribute55() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTableColumnsAttribute55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute55()
}

func (c *current) onTableColumnsAttribute60(multiplier, halign, valign, weight, style, comma interface{}) (bool, error) {
	// make sure that at least something was set
	// (otherwise the parser will run indefinitely)
	return multiplier != nil ||
		halign != nil ||
		valign != nil ||
		weight != nil ||
		style != nil ||
		comma != nil, nil

}

func (p *parser) callonTableColumnsAttribute60() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute60(stack["multiplier"], stack["halign"], stack["valign"], stack["weight"], stack["style"], stack["comma"])
}

func (c *current) onTableColumnsAttribute5(multiplier, halign, valign, weight, style, comma interface{}) (interface{}, error) {
	return types.NewTableColumn(multiplier, halign, valign, weight, style)

}

func (p *parser) callonTableColumnsAttribute5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute5(stack["multiplier"], stack["halign"], stack["valign"], stack["weight"], stack["style"], stack["comma"])
}

func (c *current) onTableColumnsAttribute1(cols interface{}) (interface{}, error) {
	return cols, nil

}

func (p *parser) callonTableColumnsAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute1(stack["cols"])
}

func (c *current) onUserMacroBlock4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUserMacroBlock4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock4()
}

func (c *current) onUserMacroBlock7(name interface{}) (bool, error) {
	// skip if no macro was registered under the given name
	return c.globalStore.hasUserMacro(name.(string)), nil

}

func (p *parser) callonUserMacroBlock7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock7(stack["name"])
}

func (c *current) onUserMacroBlock10() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUserMacroBlock10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock10()
}

func (c *current) onUserMacroBlock20() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonUserMacroBlock20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock20()
}

func (c *current) onUserMacroBlock1(name, value, inlineAttributes interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), inlineAttributes, string(c.text))

}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["inlineAttributes"])
}

func (c *current) onInlineUserMacro4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineUserMacro4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro4()
}

func (c *current) onInlineUserMacro7(name interface{}) (bool, error) {
	// skip if no macro was registered under the given name
	return c.globalStore.hasUserMacro(name.(string)), nil

}

func (p *parser) callonInlineUserMacro7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro7(stack["name"])
}

func (c *current) onInlineUserMacro10() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineUserMacro10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro10()
}

func (c *current) onInlineUserMacro1(name, value, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), inlineAttributes, string(c.text))

}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["inlineAttributes"])
}

func (c *current) onFileLocation9() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]"
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileLocation9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation9()
}

func (c *current) onFileLocation14() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonFileLocation14() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation14()
}

func (c *current) onFileLocation21() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation21()
}

func (c *current) onFileLocation33() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation33()
}

func (c *current) onFileLocation35() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileLocation35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation35()
}

func (c *current) onFileLocation28(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonFileLocation28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation28(stack["start"])
}

func (c *current) onFileLocation17(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonFileLocation17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation17(stack["name"], stack["start"])
}

func (c *current) onFileLocation43() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation43()
}

func (c *current) onFileLocation55() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation55()
}

func (c *current) onFileLocation57() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileLocation57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation57()
}

func (c *current) onFileLocation50(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonFileLocation50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation50(stack["start"])
}

func (c *current) onFileLocation39(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonFileLocation39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation39(stack["name"], stack["start"])
}

func (c *current) onFileLocation65() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation65()
}

func (c *current) onFileLocation61(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonFileLocation61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation61(stack["name"])
}

func (c *current) onFileLocation12(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonFileLocation12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation12(stack["element"])
}

func (c *current) onFileLocation73() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonFileLocation73() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation73()
}

func (c *current) onFileLocation82() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonFileLocation82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation82()
}

func (c *current) onFileLocation88() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation88()
}

func (c *current) onFileLocation94() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileLocation94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation94()
}

func (c *current) onFileLocation101() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonFileLocation101() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation101()
}

func (c *current) onFileLocation108() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation108()
}

func (c *current) onFileLocation120() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation120()
}

func (c *current) onFileLocation122() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileLocation122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation122()
}

func (c *current) onFileLocation115(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonFileLocation115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation115(stack["start"])
}

func (c *current) onFileLocation104(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonFileLocation104() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation104(stack["name"], stack["start"])
}

func (c *current) onFileLocation130() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation130()
}

func (c *current) onFileLocation142() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation142()
}

func (c *current) onFileLocation144() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileLocation144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation144()
}

func (c *current) onFileLocation137(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonFileLocation137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation137(stack["start"])
}

func (c *current) onFileLocation126(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonFileLocation126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation126(stack["name"], stack["start"])
}

func (c *current) onFileLocation152() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation152() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation152()
}

func (c *current) onFileLocation148(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonFileLocation148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation148(stack["name"])
}

func (c *current) onFileLocation99(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonFileLocation99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation99(stack["element"])
}

func (c *current) onFileLocation158() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileLocation158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation158()
}

func (c *current) onFileLocation78(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonFileLocation78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation78(stack["id"], stack["label"])
}

func (c *current) onFileLocation165() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonFileLocation165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation165()
}

func (c *current) onFileLocation161(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonFileLocation161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation161(stack["id"])
}

func (c *current) onFileLocation76() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileLocation76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation76()
}

func (c *current) onFileLocation169() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonFileLocation169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation169()
}

func (c *current) onFileLocation71(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonFileLocation71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation71(stack["element"])
}

func (c *current) onFileLocation171() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileLocation171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation171()
}

func (c *current) onFileLocation5(elements interface{}) (interface{}, error) {
	return types.Merge(elements.([]interface{})...), nil

}

func (p *parser) callonFileLocation5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation5(stack["elements"])
}

func (c *current) onFileLocation177() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFileLocation177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation177()
}

func (c *current) onFileLocation173(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonFileLocation173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation173(stack["ref"])
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))

}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

var statePool = &sync.Pool{
	New: func() interface{} { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
		p.restoreState(state)
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
