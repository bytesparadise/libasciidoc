// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "AsciidocRawDocument",
			pos:  position{line: 17, col: 1, offset: 335},
			expr: &actionExpr{
				pos: position{line: 17, col: 24, offset: 358},
				run: (*parser).callonAsciidocRawDocument1,
				expr: &seqExpr{
					pos: position{line: 17, col: 24, offset: 358},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 24, offset: 358},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 37, offset: 371},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 37, offset: 371},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 51, offset: 385},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 59, offset: 393},
								name: "RawDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 78, offset: 412},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "RawFile",
			pos:  position{line: 22, col: 1, offset: 536},
			expr: &actionExpr{
				pos: position{line: 22, col: 12, offset: 547},
				run: (*parser).callonRawFile1,
				expr: &seqExpr{
					pos: position{line: 22, col: 12, offset: 547},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 22, col: 12, offset: 547},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 22, col: 20, offset: 555},
								name: "RawFileContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 22, col: 36, offset: 571},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "TextDocument",
			pos:  position{line: 27, col: 1, offset: 687},
			expr: &actionExpr{
				pos: position{line: 27, col: 17, offset: 703},
				run: (*parser).callonTextDocument1,
				expr: &seqExpr{
					pos: position{line: 27, col: 17, offset: 703},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 27, col: 17, offset: 703},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 27, col: 25, offset: 711},
								name: "TextDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 27, col: 45, offset: 731},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "RawDocumentBlocks",
			pos:  position{line: 34, col: 1, offset: 912},
			expr: &actionExpr{
				pos: position{line: 34, col: 22, offset: 933},
				run: (*parser).callonRawDocumentBlocks1,
				expr: &seqExpr{
					pos: position{line: 34, col: 22, offset: 933},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 34, col: 22, offset: 933},
							expr: &ruleRefExpr{
								pos:  position{line: 34, col: 22, offset: 933},
								name: "Newline",
							},
						},
						&labeledExpr{
							pos:   position{line: 34, col: 31, offset: 942},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 34, col: 39, offset: 950},
								expr: &ruleRefExpr{
									pos:  position{line: 34, col: 39, offset: 950},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 34, col: 56, offset: 967},
							label: "blocks",
							expr: &zeroOrMoreExpr{
								pos: position{line: 34, col: 64, offset: 975},
								expr: &ruleRefExpr{
									pos:  position{line: 34, col: 64, offset: 975},
									name: "DocumentRawBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRawBlock",
			pos:  position{line: 43, col: 1, offset: 1227},
			expr: &choiceExpr{
				pos: position{line: 44, col: 9, offset: 1256},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 44, col: 9, offset: 1256},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 45, col: 11, offset: 1321},
						name: "ImageBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 46, col: 11, offset: 1342},
						name: "SimpleRawParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 47, col: 11, offset: 1371},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 48, col: 11, offset: 1423},
						name: "Section",
					},
					&ruleRefExpr{
						pos:  position{line: 49, col: 11, offset: 1441},
						name: "DelimitedBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 50, col: 11, offset: 1466},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 51, col: 11, offset: 1490},
						name: "RawVerseParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 52, col: 11, offset: 1518},
						name: "ThematicBreak",
					},
					&ruleRefExpr{
						pos:  position{line: 53, col: 11, offset: 1542},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 54, col: 11, offset: 1568},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 55, col: 11, offset: 1597},
						name: "CalloutListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 56, col: 11, offset: 1623},
						name: "ContinuedListItemElement",
					},
					&ruleRefExpr{
						pos:  position{line: 57, col: 11, offset: 1658},
						name: "LiteralBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 58, col: 11, offset: 1682},
						name: "AttributeDeclaration",
					},
					&ruleRefExpr{
						pos:  position{line: 59, col: 11, offset: 1714},
						name: "AttributeReset",
					},
					&ruleRefExpr{
						pos:  position{line: 60, col: 11, offset: 1740},
						name: "TableOfContentsPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 61, col: 11, offset: 1777},
						name: "UserMacroBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 62, col: 11, offset: 1802},
						name: "StandaloneAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 63, col: 11, offset: 1833},
						name: "RawParagraph",
					},
				},
			},
		},
		{
			name: "DocumentBlockWithinDelimitedBlock",
			pos:  position{line: 65, col: 1, offset: 1847},
			expr: &actionExpr{
				pos: position{line: 65, col: 38, offset: 1884},
				run: (*parser).callonDocumentBlockWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 65, col: 38, offset: 1884},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 65, col: 38, offset: 1884},
							expr: &ruleRefExpr{
								pos:  position{line: 65, col: 39, offset: 1885},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 66, col: 5, offset: 1894},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 67, col: 9, offset: 1910},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 67, col: 9, offset: 1910},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 68, col: 11, offset: 1931},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 69, col: 11, offset: 1956},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 70, col: 11, offset: 2007},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 71, col: 11, offset: 2031},
										name: "RawVerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 72, col: 11, offset: 2059},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 73, col: 11, offset: 2083},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 74, col: 11, offset: 2109},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 75, col: 11, offset: 2138},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 76, col: 11, offset: 2164},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 77, col: 11, offset: 2199},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 78, col: 11, offset: 2223},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 79, col: 11, offset: 2255},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 80, col: 11, offset: 2281},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 81, col: 11, offset: 2318},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 82, col: 11, offset: 2343},
										name: "RawParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextDocumentBlocks",
			pos:  position{line: 86, col: 1, offset: 2384},
			expr: &labeledExpr{
				pos:   position{line: 86, col: 23, offset: 2406},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 86, col: 30, offset: 2413},
					expr: &ruleRefExpr{
						pos:  position{line: 86, col: 31, offset: 2414},
						name: "TextDocumentBlock",
					},
				},
			},
		},
		{
			name: "TextDocumentBlock",
			pos:  position{line: 88, col: 1, offset: 2435},
			expr: &actionExpr{
				pos: position{line: 88, col: 22, offset: 2456},
				run: (*parser).callonTextDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 88, col: 22, offset: 2456},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 88, col: 22, offset: 2456},
							expr: &ruleRefExpr{
								pos:  position{line: 88, col: 23, offset: 2457},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 89, col: 5, offset: 2466},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 89, col: 12, offset: 2473},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 89, col: 12, offset: 2473},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 89, col: 24, offset: 2485},
										name: "RawParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 96, col: 1, offset: 2634},
			expr: &ruleRefExpr{
				pos:  position{line: 96, col: 16, offset: 2649},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 98, col: 1, offset: 2667},
			expr: &actionExpr{
				pos: position{line: 98, col: 20, offset: 2686},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 98, col: 20, offset: 2686},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 98, col: 20, offset: 2686},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 98, col: 41, offset: 2707},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 98, col: 49, offset: 2715},
								expr: &ruleRefExpr{
									pos:  position{line: 98, col: 50, offset: 2716},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 98, col: 75, offset: 2741},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 102, col: 1, offset: 2821},
			expr: &seqExpr{
				pos: position{line: 102, col: 26, offset: 2846},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 102, col: 26, offset: 2846},
						val:        "---",
						ignoreCase: false,
						want:       "\"---\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 102, col: 32, offset: 2852},
						expr: &ruleRefExpr{
							pos:  position{line: 102, col: 32, offset: 2852},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 102, col: 39, offset: 2859},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 104, col: 1, offset: 2864},
			expr: &actionExpr{
				pos: position{line: 104, col: 27, offset: 2890},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 104, col: 27, offset: 2890},
					expr: &oneOrMoreExpr{
						pos: position{line: 104, col: 28, offset: 2891},
						expr: &seqExpr{
							pos: position{line: 104, col: 29, offset: 2892},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 104, col: 29, offset: 2892},
									expr: &ruleRefExpr{
										pos:  position{line: 104, col: 30, offset: 2893},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 104, col: 51, offset: 2914,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 111, col: 1, offset: 3080},
			expr: &actionExpr{
				pos: position{line: 111, col: 19, offset: 3098},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 111, col: 19, offset: 3098},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 111, col: 19, offset: 3098},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 111, col: 23, offset: 3102},
							expr: &ruleRefExpr{
								pos:  position{line: 111, col: 23, offset: 3102},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 111, col: 30, offset: 3109},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 111, col: 37, offset: 3116},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 111, col: 52, offset: 3131},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 111, col: 56, offset: 3135},
								expr: &ruleRefExpr{
									pos:  position{line: 111, col: 56, offset: 3135},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 111, col: 74, offset: 3153},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 112, col: 9, offset: 3165},
							expr: &choiceExpr{
								pos: position{line: 112, col: 10, offset: 3166},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 112, col: 10, offset: 3166},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 112, col: 10, offset: 3166},
												expr: &ruleRefExpr{
													pos:  position{line: 112, col: 10, offset: 3166},
													name: "Space",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 112, col: 17, offset: 3173},
												name: "SingleLineComment",
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 112, col: 37, offset: 3193},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 113, col: 9, offset: 3216},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 113, col: 18, offset: 3225},
								expr: &ruleRefExpr{
									pos:  position{line: 113, col: 18, offset: 3225},
									name: "DocumentAuthors",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 114, col: 9, offset: 3252},
							expr: &choiceExpr{
								pos: position{line: 114, col: 10, offset: 3253},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 114, col: 10, offset: 3253},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 114, col: 10, offset: 3253},
												expr: &ruleRefExpr{
													pos:  position{line: 114, col: 10, offset: 3253},
													name: "Space",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 114, col: 17, offset: 3260},
												name: "SingleLineComment",
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 114, col: 37, offset: 3280},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 115, col: 9, offset: 3303},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 115, col: 19, offset: 3313},
								expr: &ruleRefExpr{
									pos:  position{line: 115, col: 19, offset: 3313},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 119, col: 1, offset: 3414},
			expr: &choiceExpr{
				pos: position{line: 119, col: 20, offset: 3433},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 119, col: 20, offset: 3433},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 119, col: 48, offset: 3461},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 121, col: 1, offset: 3491},
			expr: &actionExpr{
				pos: position{line: 121, col: 30, offset: 3520},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 121, col: 30, offset: 3520},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 121, col: 30, offset: 3520},
							expr: &ruleRefExpr{
								pos:  position{line: 121, col: 30, offset: 3520},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 121, col: 37, offset: 3527},
							expr: &litMatcher{
								pos:        position{line: 121, col: 38, offset: 3528},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 121, col: 42, offset: 3532},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 121, col: 51, offset: 3541},
								expr: &ruleRefExpr{
									pos:  position{line: 121, col: 51, offset: 3541},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 121, col: 68, offset: 3558},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 125, col: 1, offset: 3628},
			expr: &actionExpr{
				pos: position{line: 125, col: 33, offset: 3660},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 125, col: 33, offset: 3660},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 125, col: 33, offset: 3660},
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 33, offset: 3660},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 125, col: 40, offset: 3667},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 125, col: 51, offset: 3678},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 59, offset: 3686},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 125, col: 75, offset: 3702},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 129, col: 1, offset: 3781},
			expr: &actionExpr{
				pos: position{line: 129, col: 19, offset: 3799},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 129, col: 19, offset: 3799},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 129, col: 19, offset: 3799},
							expr: &ruleRefExpr{
								pos:  position{line: 129, col: 19, offset: 3799},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 129, col: 26, offset: 3806},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 129, col: 36, offset: 3816},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 129, col: 56, offset: 3836},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 129, col: 62, offset: 3842},
								expr: &ruleRefExpr{
									pos:  position{line: 129, col: 63, offset: 3843},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 129, col: 85, offset: 3865},
							expr: &ruleRefExpr{
								pos:  position{line: 129, col: 85, offset: 3865},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 129, col: 92, offset: 3872},
							expr: &litMatcher{
								pos:        position{line: 129, col: 92, offset: 3872},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 129, col: 97, offset: 3877},
							expr: &ruleRefExpr{
								pos:  position{line: 129, col: 97, offset: 3877},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 134, col: 1, offset: 4022},
			expr: &actionExpr{
				pos: position{line: 134, col: 23, offset: 4044},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 134, col: 23, offset: 4044},
					expr: &charClassMatcher{
						pos:        position{line: 134, col: 23, offset: 4044},
						val:        "[^<;\\r\\n]",
						chars:      []rune{'<', ';', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 138, col: 1, offset: 4091},
			expr: &actionExpr{
				pos: position{line: 138, col: 24, offset: 4114},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 138, col: 24, offset: 4114},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 138, col: 24, offset: 4114},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 138, col: 28, offset: 4118},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 138, col: 35, offset: 4125},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 138, col: 36, offset: 4126},
									expr: &charClassMatcher{
										pos:        position{line: 138, col: 36, offset: 4126},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 140, col: 4, offset: 4173},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 146, col: 1, offset: 4334},
			expr: &actionExpr{
				pos: position{line: 146, col: 21, offset: 4354},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 146, col: 21, offset: 4354},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 146, col: 21, offset: 4354},
							expr: &ruleRefExpr{
								pos:  position{line: 146, col: 21, offset: 4354},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 146, col: 28, offset: 4361},
							expr: &litMatcher{
								pos:        position{line: 146, col: 29, offset: 4362},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 146, col: 33, offset: 4366},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 147, col: 9, offset: 4385},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 147, col: 10, offset: 4386},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 147, col: 10, offset: 4386},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 147, col: 10, offset: 4386},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 147, col: 21, offset: 4397},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 147, col: 45, offset: 4421},
													expr: &litMatcher{
														pos:        position{line: 147, col: 45, offset: 4421},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 147, col: 50, offset: 4426},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 147, col: 58, offset: 4434},
														expr: &ruleRefExpr{
															pos:  position{line: 147, col: 59, offset: 4435},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 147, col: 82, offset: 4458},
													expr: &litMatcher{
														pos:        position{line: 147, col: 82, offset: 4458},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 147, col: 87, offset: 4463},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 147, col: 97, offset: 4473},
														expr: &ruleRefExpr{
															pos:  position{line: 147, col: 98, offset: 4474},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 149, col: 15, offset: 4591},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 149, col: 15, offset: 4591},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 149, col: 15, offset: 4591},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 149, col: 24, offset: 4600},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 149, col: 46, offset: 4622},
													expr: &litMatcher{
														pos:        position{line: 149, col: 46, offset: 4622},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 149, col: 51, offset: 4627},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 149, col: 61, offset: 4637},
														expr: &ruleRefExpr{
															pos:  position{line: 149, col: 62, offset: 4638},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 151, col: 13, offset: 4747},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 156, col: 1, offset: 4877},
			expr: &choiceExpr{
				pos: position{line: 156, col: 27, offset: 4903},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 156, col: 27, offset: 4903},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 156, col: 27, offset: 4903},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 156, col: 27, offset: 4903},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 156, col: 32, offset: 4908},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 156, col: 39, offset: 4915},
									expr: &charClassMatcher{
										pos:        position{line: 156, col: 39, offset: 4915},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 158, col: 5, offset: 4963},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 158, col: 5, offset: 4963},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 158, col: 5, offset: 4963},
									expr: &litMatcher{
										pos:        position{line: 158, col: 5, offset: 4963},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 158, col: 11, offset: 4969},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 158, col: 18, offset: 4976},
									expr: &charClassMatcher{
										pos:        position{line: 158, col: 18, offset: 4976},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 158, col: 29, offset: 4987},
									expr: &ruleRefExpr{
										pos:  position{line: 158, col: 29, offset: 4987},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 158, col: 36, offset: 4994},
									expr: &litMatcher{
										pos:        position{line: 158, col: 37, offset: 4995},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 162, col: 1, offset: 5035},
			expr: &actionExpr{
				pos: position{line: 162, col: 25, offset: 5059},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 162, col: 25, offset: 5059},
					expr: &charClassMatcher{
						pos:        position{line: 162, col: 25, offset: 5059},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 166, col: 1, offset: 5105},
			expr: &actionExpr{
				pos: position{line: 166, col: 27, offset: 5131},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 166, col: 27, offset: 5131},
					expr: &charClassMatcher{
						pos:        position{line: 166, col: 27, offset: 5131},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 173, col: 1, offset: 5284},
			expr: &actionExpr{
				pos: position{line: 173, col: 25, offset: 5308},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 173, col: 25, offset: 5308},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 173, col: 25, offset: 5308},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 173, col: 29, offset: 5312},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 173, col: 35, offset: 5318},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 173, col: 50, offset: 5333},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 174, col: 9, offset: 5346},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 174, col: 15, offset: 5352},
								expr: &actionExpr{
									pos: position{line: 174, col: 16, offset: 5353},
									run: (*parser).callonAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 174, col: 17, offset: 5354},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 174, col: 17, offset: 5354},
												expr: &ruleRefExpr{
													pos:  position{line: 174, col: 17, offset: 5354},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 174, col: 24, offset: 5361},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 174, col: 31, offset: 5368},
													name: "AttributeDeclarationValue",
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 176, col: 13, offset: 5442},
							expr: &ruleRefExpr{
								pos:  position{line: 176, col: 13, offset: 5442},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 176, col: 20, offset: 5449},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeName",
			pos:  position{line: 183, col: 1, offset: 5689},
			expr: &actionExpr{
				pos: position{line: 183, col: 18, offset: 5706},
				run: (*parser).callonAttributeName1,
				expr: &seqExpr{
					pos: position{line: 183, col: 18, offset: 5706},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 183, col: 18, offset: 5706},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 183, col: 28, offset: 5716},
							expr: &charClassMatcher{
								pos:        position{line: 183, col: 29, offset: 5717},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 187, col: 1, offset: 5765},
			expr: &actionExpr{
				pos: position{line: 187, col: 30, offset: 5794},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 187, col: 30, offset: 5794},
					expr: &charClassMatcher{
						pos:        position{line: 187, col: 30, offset: 5794},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 191, col: 1, offset: 5839},
			expr: &choiceExpr{
				pos: position{line: 191, col: 19, offset: 5857},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 191, col: 19, offset: 5857},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 191, col: 19, offset: 5857},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 191, col: 19, offset: 5857},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 191, col: 24, offset: 5862},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 191, col: 30, offset: 5868},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 191, col: 45, offset: 5883},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 191, col: 49, offset: 5887},
									expr: &ruleRefExpr{
										pos:  position{line: 191, col: 49, offset: 5887},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 191, col: 56, offset: 5894},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 193, col: 5, offset: 5954},
						run: (*parser).callonAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 193, col: 5, offset: 5954},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 193, col: 5, offset: 5954},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 193, col: 9, offset: 5958},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 193, col: 15, offset: 5964},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 193, col: 30, offset: 5979},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 193, col: 35, offset: 5984},
									expr: &ruleRefExpr{
										pos:  position{line: 193, col: 35, offset: 5984},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 193, col: 42, offset: 5991},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeSubstitution",
			pos:  position{line: 197, col: 1, offset: 6050},
			expr: &choiceExpr{
				pos: position{line: 197, col: 26, offset: 6075},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 197, col: 26, offset: 6075},
						name: "CounterSub",
					},
					&ruleRefExpr{
						pos:  position{line: 197, col: 39, offset: 6088},
						name: "AttrSub",
					},
				},
			},
		},
		{
			name: "AttrSub",
			pos:  position{line: 199, col: 1, offset: 6097},
			expr: &actionExpr{
				pos: position{line: 199, col: 12, offset: 6108},
				run: (*parser).callonAttrSub1,
				expr: &seqExpr{
					pos: position{line: 199, col: 12, offset: 6108},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 199, col: 12, offset: 6108},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 199, col: 16, offset: 6112},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 199, col: 21, offset: 6117},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 199, col: 35, offset: 6131},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSub",
			pos:  position{line: 203, col: 1, offset: 6197},
			expr: &choiceExpr{
				pos: position{line: 203, col: 15, offset: 6211},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 203, col: 15, offset: 6211},
						name: "CounterSub1",
					},
					&ruleRefExpr{
						pos:  position{line: 203, col: 29, offset: 6225},
						name: "CounterSub2",
					},
					&ruleRefExpr{
						pos:  position{line: 203, col: 43, offset: 6239},
						name: "CounterSubAlpha",
					},
					&ruleRefExpr{
						pos:  position{line: 203, col: 61, offset: 6257},
						name: "CounterSubAlpha2",
					},
					&ruleRefExpr{
						pos:  position{line: 203, col: 80, offset: 6276},
						name: "CounterSubStart",
					},
					&ruleRefExpr{
						pos:  position{line: 203, col: 98, offset: 6294},
						name: "CounterSubStart2",
					},
				},
			},
		},
		{
			name: "CounterSub1",
			pos:  position{line: 205, col: 1, offset: 6312},
			expr: &actionExpr{
				pos: position{line: 205, col: 16, offset: 6327},
				run: (*parser).callonCounterSub11,
				expr: &seqExpr{
					pos: position{line: 205, col: 16, offset: 6327},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 205, col: 16, offset: 6327},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 205, col: 28, offset: 6339},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 205, col: 33, offset: 6344},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 205, col: 47, offset: 6358},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSub2",
			pos:  position{line: 209, col: 1, offset: 6434},
			expr: &actionExpr{
				pos: position{line: 209, col: 16, offset: 6449},
				run: (*parser).callonCounterSub21,
				expr: &seqExpr{
					pos: position{line: 209, col: 16, offset: 6449},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 209, col: 16, offset: 6449},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 209, col: 29, offset: 6462},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 209, col: 34, offset: 6467},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 209, col: 48, offset: 6481},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubAlpha",
			pos:  position{line: 213, col: 1, offset: 6556},
			expr: &actionExpr{
				pos: position{line: 213, col: 20, offset: 6575},
				run: (*parser).callonCounterSubAlpha1,
				expr: &seqExpr{
					pos: position{line: 213, col: 20, offset: 6575},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 213, col: 20, offset: 6575},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 213, col: 32, offset: 6587},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 213, col: 37, offset: 6592},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 213, col: 51, offset: 6606},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 213, col: 55, offset: 6610},
							label: "start",
							expr: &charClassMatcher{
								pos:        position{line: 213, col: 61, offset: 6616},
								val:        "[A-Za-z]",
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 213, col: 70, offset: 6625},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubAlpha2",
			pos:  position{line: 217, col: 1, offset: 6703},
			expr: &actionExpr{
				pos: position{line: 217, col: 21, offset: 6723},
				run: (*parser).callonCounterSubAlpha21,
				expr: &seqExpr{
					pos: position{line: 217, col: 21, offset: 6723},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 217, col: 21, offset: 6723},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 217, col: 34, offset: 6736},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 217, col: 39, offset: 6741},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 217, col: 53, offset: 6755},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 217, col: 57, offset: 6759},
							label: "start",
							expr: &charClassMatcher{
								pos:        position{line: 217, col: 63, offset: 6765},
								val:        "[A-Za-z]",
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 217, col: 72, offset: 6774},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubStart",
			pos:  position{line: 221, col: 1, offset: 6851},
			expr: &actionExpr{
				pos: position{line: 221, col: 20, offset: 6870},
				run: (*parser).callonCounterSubStart1,
				expr: &seqExpr{
					pos: position{line: 221, col: 20, offset: 6870},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 221, col: 20, offset: 6870},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 221, col: 32, offset: 6882},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 221, col: 37, offset: 6887},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 221, col: 51, offset: 6901},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 221, col: 55, offset: 6905},
							label: "num",
							expr: &actionExpr{
								pos: position{line: 221, col: 60, offset: 6910},
								run: (*parser).callonCounterSubStart8,
								expr: &oneOrMoreExpr{
									pos: position{line: 221, col: 60, offset: 6910},
									expr: &charClassMatcher{
										pos:        position{line: 221, col: 60, offset: 6910},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 221, col: 108, offset: 6958},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubStart2",
			pos:  position{line: 225, col: 1, offset: 7040},
			expr: &actionExpr{
				pos: position{line: 225, col: 21, offset: 7060},
				run: (*parser).callonCounterSubStart21,
				expr: &seqExpr{
					pos: position{line: 225, col: 21, offset: 7060},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 225, col: 21, offset: 7060},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 225, col: 34, offset: 7073},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 225, col: 39, offset: 7078},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 225, col: 53, offset: 7092},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 225, col: 57, offset: 7096},
							label: "num",
							expr: &actionExpr{
								pos: position{line: 225, col: 62, offset: 7101},
								run: (*parser).callonCounterSubStart28,
								expr: &oneOrMoreExpr{
									pos: position{line: 225, col: 62, offset: 7101},
									expr: &charClassMatcher{
										pos:        position{line: 225, col: 62, offset: 7101},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 225, col: 110, offset: 7149},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "Attributes",
			pos:  position{line: 229, col: 1, offset: 7230},
			expr: &actionExpr{
				pos: position{line: 229, col: 15, offset: 7244},
				run: (*parser).callonAttributes1,
				expr: &seqExpr{
					pos: position{line: 229, col: 15, offset: 7244},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 229, col: 15, offset: 7244},
							label: "attrs",
							expr: &oneOrMoreExpr{
								pos: position{line: 229, col: 21, offset: 7250},
								expr: &ruleRefExpr{
									pos:  position{line: 229, col: 22, offset: 7251},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 229, col: 41, offset: 7270},
							expr: &ruleRefExpr{
								pos:  position{line: 229, col: 41, offset: 7270},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 233, col: 1, offset: 7340},
			expr: &actionExpr{
				pos: position{line: 233, col: 21, offset: 7360},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 233, col: 21, offset: 7360},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 233, col: 21, offset: 7360},
							expr: &choiceExpr{
								pos: position{line: 233, col: 23, offset: 7362},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 233, col: 23, offset: 7362},
										val:        "[",
										ignoreCase: false,
										want:       "\"[\"",
									},
									&litMatcher{
										pos:        position{line: 233, col: 29, offset: 7368},
										val:        ".",
										ignoreCase: false,
										want:       "\".\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 234, col: 5, offset: 7445},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 234, col: 11, offset: 7451},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 234, col: 11, offset: 7451},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 235, col: 9, offset: 7472},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 236, col: 9, offset: 7496},
										name: "ElementShortHandAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 237, col: 9, offset: 7533},
										name: "LiteralAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 238, col: 9, offset: 7561},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 239, col: 9, offset: 7589},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 240, col: 9, offset: 7616},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 241, col: 9, offset: 7643},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 242, col: 9, offset: 7680},
										name: "PassthroughBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 243, col: 9, offset: 7716},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 247, col: 1, offset: 7819},
			expr: &actionExpr{
				pos: position{line: 247, col: 14, offset: 7832},
				run: (*parser).callonElementID1,
				expr: &seqExpr{
					pos: position{line: 247, col: 14, offset: 7832},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 247, col: 14, offset: 7832},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 247, col: 19, offset: 7837},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 247, col: 23, offset: 7841},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 247, col: 27, offset: 7845},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 247, col: 32, offset: 7850},
							expr: &ruleRefExpr{
								pos:  position{line: 247, col: 32, offset: 7850},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 247, col: 39, offset: 7857},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 251, col: 1, offset: 7900},
			expr: &actionExpr{
				pos: position{line: 251, col: 20, offset: 7919},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 251, col: 20, offset: 7919},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 251, col: 20, offset: 7919},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 251, col: 25, offset: 7924},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 251, col: 29, offset: 7928},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 251, col: 33, offset: 7932},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 251, col: 38, offset: 7937},
							expr: &ruleRefExpr{
								pos:  position{line: 251, col: 38, offset: 7937},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 257, col: 1, offset: 8214},
			expr: &actionExpr{
				pos: position{line: 257, col: 17, offset: 8230},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 257, col: 17, offset: 8230},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 257, col: 17, offset: 8230},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 257, col: 21, offset: 8234},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 257, col: 28, offset: 8241},
								name: "ElementTitleContent",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 257, col: 49, offset: 8262},
							expr: &ruleRefExpr{
								pos:  position{line: 257, col: 49, offset: 8262},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 257, col: 56, offset: 8269},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementTitleContent",
			pos:  position{line: 261, col: 1, offset: 8327},
			expr: &actionExpr{
				pos: position{line: 261, col: 24, offset: 8350},
				run: (*parser).callonElementTitleContent1,
				expr: &seqExpr{
					pos: position{line: 261, col: 24, offset: 8350},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 261, col: 24, offset: 8350},
							val:        "[\\pL0-9]",
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 261, col: 32, offset: 8358},
							expr: &charClassMatcher{
								pos:        position{line: 261, col: 32, offset: 8358},
								val:        "[^\\r\\n<>]",
								chars:      []rune{'\r', '\n', '<', '>'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "ElementShortHandAttributes",
			pos:  position{line: 267, col: 1, offset: 8612},
			expr: &actionExpr{
				pos: position{line: 267, col: 31, offset: 8642},
				run: (*parser).callonElementShortHandAttributes1,
				expr: &seqExpr{
					pos: position{line: 267, col: 31, offset: 8642},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 267, col: 31, offset: 8642},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 267, col: 35, offset: 8646},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 267, col: 42, offset: 8653},
								exprs: []interface{}{
									&zeroOrMoreExpr{
										pos: position{line: 267, col: 42, offset: 8653},
										expr: &ruleRefExpr{
											pos:  position{line: 267, col: 42, offset: 8653},
											name: "ShortHandAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 267, col: 57, offset: 8668},
										expr: &ruleRefExpr{
											pos:  position{line: 267, col: 57, offset: 8668},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 267, col: 69, offset: 8680},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 267, col: 73, offset: 8684},
							expr: &ruleRefExpr{
								pos:  position{line: 267, col: 73, offset: 8684},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 267, col: 80, offset: 8691},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlockAttrs",
			pos:  position{line: 271, col: 1, offset: 8745},
			expr: &choiceExpr{
				pos: position{line: 271, col: 15, offset: 8759},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 271, col: 15, offset: 8759},
						name: "BlockAttrList",
					},
					&ruleRefExpr{
						pos:  position{line: 271, col: 31, offset: 8775},
						name: "ElementTitle",
					},
					&ruleRefExpr{
						pos:  position{line: 271, col: 46, offset: 8790},
						name: "ElementID",
					},
				},
			},
		},
		{
			name: "BlockAttrList",
			pos:  position{line: 275, col: 1, offset: 9018},
			expr: &actionExpr{
				pos: position{line: 275, col: 18, offset: 9035},
				run: (*parser).callonBlockAttrList1,
				expr: &seqExpr{
					pos: position{line: 275, col: 18, offset: 9035},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 275, col: 18, offset: 9035},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 275, col: 22, offset: 9039},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 275, col: 29, offset: 9046},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 275, col: 29, offset: 9046},
										expr: &ruleRefExpr{
											pos:  position{line: 275, col: 29, offset: 9046},
											name: "BlockAttrStyle",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 275, col: 45, offset: 9062},
										expr: &ruleRefExpr{
											pos:  position{line: 275, col: 45, offset: 9062},
											name: "ShortHandAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 275, col: 60, offset: 9077},
										expr: &ruleRefExpr{
											pos:  position{line: 275, col: 60, offset: 9077},
											name: "BlockAttrPositional2",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 275, col: 82, offset: 9099},
										expr: &ruleRefExpr{
											pos:  position{line: 275, col: 82, offset: 9099},
											name: "BlockAttrPositional3",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 275, col: 104, offset: 9121},
										expr: &ruleRefExpr{
											pos:  position{line: 275, col: 104, offset: 9121},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 275, col: 116, offset: 9133},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:  position{line: 275, col: 120, offset: 9137},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlockAttrStyle",
			pos:  position{line: 279, col: 1, offset: 9191},
			expr: &actionExpr{
				pos: position{line: 279, col: 19, offset: 9209},
				run: (*parser).callonBlockAttrStyle1,
				expr: &labeledExpr{
					pos:   position{line: 279, col: 19, offset: 9209},
					label: "style",
					expr: &ruleRefExpr{
						pos:  position{line: 279, col: 25, offset: 9215},
						name: "PositionalValue",
					},
				},
			},
		},
		{
			name: "BlockAttrPositional2",
			pos:  position{line: 283, col: 1, offset: 9276},
			expr: &actionExpr{
				pos: position{line: 283, col: 25, offset: 9300},
				run: (*parser).callonBlockAttrPositional21,
				expr: &seqExpr{
					pos: position{line: 283, col: 25, offset: 9300},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 283, col: 25, offset: 9300},
							expr: &ruleRefExpr{
								pos:  position{line: 283, col: 25, offset: 9300},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 283, col: 32, offset: 9307},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 283, col: 36, offset: 9311},
							expr: &ruleRefExpr{
								pos:  position{line: 283, col: 36, offset: 9311},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 283, col: 43, offset: 9318},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 283, col: 49, offset: 9324},
								expr: &ruleRefExpr{
									pos:  position{line: 283, col: 49, offset: 9324},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockAttrPositional3",
			pos:  position{line: 290, col: 1, offset: 9465},
			expr: &actionExpr{
				pos: position{line: 290, col: 25, offset: 9489},
				run: (*parser).callonBlockAttrPositional31,
				expr: &seqExpr{
					pos: position{line: 290, col: 25, offset: 9489},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 290, col: 25, offset: 9489},
							expr: &ruleRefExpr{
								pos:  position{line: 290, col: 25, offset: 9489},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 290, col: 32, offset: 9496},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 290, col: 36, offset: 9500},
							expr: &ruleRefExpr{
								pos:  position{line: 290, col: 36, offset: 9500},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 290, col: 43, offset: 9507},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 290, col: 49, offset: 9513},
								expr: &ruleRefExpr{
									pos:  position{line: 290, col: 49, offset: 9513},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralAttribute",
			pos:  position{line: 297, col: 1, offset: 9654},
			expr: &actionExpr{
				pos: position{line: 297, col: 21, offset: 9674},
				run: (*parser).callonLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 297, col: 21, offset: 9674},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 297, col: 21, offset: 9674},
							val:        "[literal]",
							ignoreCase: false,
							want:       "\"[literal]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 297, col: 33, offset: 9686},
							expr: &ruleRefExpr{
								pos:  position{line: 297, col: 33, offset: 9686},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 297, col: 40, offset: 9693},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockAttribute",
			pos:  position{line: 301, col: 1, offset: 9745},
			expr: &actionExpr{
				pos: position{line: 301, col: 30, offset: 9774},
				run: (*parser).callonPassthroughBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 301, col: 30, offset: 9774},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 301, col: 30, offset: 9774},
							val:        "[pass]",
							ignoreCase: false,
							want:       "\"[pass]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 301, col: 39, offset: 9783},
							expr: &ruleRefExpr{
								pos:  position{line: 301, col: 39, offset: 9783},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 301, col: 46, offset: 9790},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 306, col: 1, offset: 9931},
			expr: &actionExpr{
				pos: position{line: 306, col: 30, offset: 9960},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 306, col: 30, offset: 9960},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 306, col: 30, offset: 9960},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 306, col: 34, offset: 9964},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 306, col: 37, offset: 9967},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 306, col: 53, offset: 9983},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 306, col: 57, offset: 9987},
							expr: &ruleRefExpr{
								pos:  position{line: 306, col: 57, offset: 9987},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 306, col: 64, offset: 9994},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 311, col: 1, offset: 10149},
			expr: &actionExpr{
				pos: position{line: 311, col: 21, offset: 10169},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 311, col: 21, offset: 10169},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 311, col: 21, offset: 10169},
							val:        "[source",
							ignoreCase: false,
							want:       "\"[source\"",
						},
						&labeledExpr{
							pos:   position{line: 312, col: 5, offset: 10184},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 312, col: 14, offset: 10193},
								expr: &actionExpr{
									pos: position{line: 312, col: 15, offset: 10194},
									run: (*parser).callonSourceAttributes6,
									expr: &seqExpr{
										pos: position{line: 312, col: 15, offset: 10194},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 312, col: 15, offset: 10194},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 312, col: 19, offset: 10198},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 312, col: 24, offset: 10203},
													expr: &ruleRefExpr{
														pos:  position{line: 312, col: 25, offset: 10204},
														name: "StandaloneAttributeValue",
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 313, col: 5, offset: 10259},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 313, col: 12, offset: 10266},
								expr: &actionExpr{
									pos: position{line: 313, col: 13, offset: 10267},
									run: (*parser).callonSourceAttributes14,
									expr: &seqExpr{
										pos: position{line: 313, col: 13, offset: 10267},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 313, col: 13, offset: 10267},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 313, col: 17, offset: 10271},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 313, col: 22, offset: 10276},
													expr: &ruleRefExpr{
														pos:  position{line: 313, col: 23, offset: 10277},
														name: "GenericAttribute",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 314, col: 5, offset: 10324},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 314, col: 9, offset: 10328},
							expr: &ruleRefExpr{
								pos:  position{line: 314, col: 9, offset: 10328},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 314, col: 16, offset: 10335},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 319, col: 1, offset: 10486},
			expr: &actionExpr{
				pos: position{line: 319, col: 19, offset: 10504},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 319, col: 19, offset: 10504},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 319, col: 19, offset: 10504},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 319, col: 23, offset: 10508},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 319, col: 34, offset: 10519},
								expr: &ruleRefExpr{
									pos:  position{line: 319, col: 35, offset: 10520},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 319, col: 54, offset: 10539},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 319, col: 58, offset: 10543},
							expr: &ruleRefExpr{
								pos:  position{line: 319, col: 58, offset: 10543},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 319, col: 65, offset: 10550},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 323, col: 1, offset: 10622},
			expr: &choiceExpr{
				pos: position{line: 323, col: 21, offset: 10642},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 323, col: 21, offset: 10642},
						name: "GenericAttributeWithValue",
					},
					&ruleRefExpr{
						pos:  position{line: 323, col: 49, offset: 10670},
						name: "GenericAttributeWithoutValue",
					},
				},
			},
		},
		{
			name: "GenericAttributeWithValue",
			pos:  position{line: 325, col: 1, offset: 10700},
			expr: &actionExpr{
				pos: position{line: 325, col: 30, offset: 10729},
				run: (*parser).callonGenericAttributeWithValue1,
				expr: &seqExpr{
					pos: position{line: 325, col: 30, offset: 10729},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 325, col: 30, offset: 10729},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 325, col: 35, offset: 10734},
								name: "AttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 325, col: 49, offset: 10748},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 325, col: 53, offset: 10752},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 325, col: 59, offset: 10758},
								expr: &ruleRefExpr{
									pos:  position{line: 325, col: 60, offset: 10759},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 325, col: 77, offset: 10776},
							expr: &litMatcher{
								pos:        position{line: 325, col: 77, offset: 10776},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 325, col: 82, offset: 10781},
							expr: &ruleRefExpr{
								pos:  position{line: 325, col: 82, offset: 10781},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "GenericAttributeWithoutValue",
			pos:  position{line: 329, col: 1, offset: 10880},
			expr: &actionExpr{
				pos: position{line: 329, col: 33, offset: 10912},
				run: (*parser).callonGenericAttributeWithoutValue1,
				expr: &seqExpr{
					pos: position{line: 329, col: 33, offset: 10912},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 329, col: 33, offset: 10912},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 329, col: 38, offset: 10917},
								name: "AttributeKey",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 329, col: 52, offset: 10931},
							expr: &litMatcher{
								pos:        position{line: 329, col: 52, offset: 10931},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 329, col: 57, offset: 10936},
							expr: &ruleRefExpr{
								pos:  position{line: 329, col: 57, offset: 10936},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 333, col: 1, offset: 11024},
			expr: &actionExpr{
				pos: position{line: 333, col: 17, offset: 11040},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 333, col: 17, offset: 11040},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 333, col: 17, offset: 11040},
							expr: &litMatcher{
								pos:        position{line: 333, col: 18, offset: 11041},
								val:        "quote",
								ignoreCase: false,
								want:       "\"quote\"",
							},
						},
						&notExpr{
							pos: position{line: 333, col: 26, offset: 11049},
							expr: &litMatcher{
								pos:        position{line: 333, col: 27, offset: 11050},
								val:        "verse",
								ignoreCase: false,
								want:       "\"verse\"",
							},
						},
						&notExpr{
							pos: position{line: 333, col: 35, offset: 11058},
							expr: &litMatcher{
								pos:        position{line: 333, col: 36, offset: 11059},
								val:        "literal",
								ignoreCase: false,
								want:       "\"literal\"",
							},
						},
						&notExpr{
							pos: position{line: 333, col: 46, offset: 11069},
							expr: &oneOrMoreExpr{
								pos: position{line: 333, col: 48, offset: 11071},
								expr: &ruleRefExpr{
									pos:  position{line: 333, col: 48, offset: 11071},
									name: "Space",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 333, col: 56, offset: 11079},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 333, col: 61, offset: 11084},
								expr: &charClassMatcher{
									pos:        position{line: 333, col: 61, offset: 11084},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 333, col: 75, offset: 11098},
							expr: &ruleRefExpr{
								pos:  position{line: 333, col: 75, offset: 11098},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 337, col: 1, offset: 11141},
			expr: &actionExpr{
				pos: position{line: 337, col: 19, offset: 11159},
				run: (*parser).callonAttributeValue1,
				expr: &labeledExpr{
					pos:   position{line: 337, col: 19, offset: 11159},
					label: "value",
					expr: &oneOrMoreExpr{
						pos: position{line: 337, col: 26, offset: 11166},
						expr: &charClassMatcher{
							pos:        position{line: 337, col: 26, offset: 11166},
							val:        "[^\\r\\n=,\\]]",
							chars:      []rune{'\r', '\n', '=', ',', ']'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributeValue",
			pos:  position{line: 341, col: 1, offset: 11217},
			expr: &actionExpr{
				pos: position{line: 341, col: 29, offset: 11245},
				run: (*parser).callonStandaloneAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 341, col: 29, offset: 11245},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 341, col: 29, offset: 11245},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 341, col: 36, offset: 11252},
								expr: &charClassMatcher{
									pos:        position{line: 341, col: 36, offset: 11252},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&notExpr{
							pos: position{line: 341, col: 50, offset: 11266},
							expr: &litMatcher{
								pos:        position{line: 341, col: 51, offset: 11267},
								val:        "=",
								ignoreCase: false,
								want:       "\"=\"",
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 345, col: 1, offset: 11433},
			expr: &actionExpr{
				pos: position{line: 345, col: 20, offset: 11452},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 345, col: 20, offset: 11452},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 345, col: 20, offset: 11452},
							val:        "[quote",
							ignoreCase: false,
							want:       "\"[quote\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 345, col: 29, offset: 11461},
							expr: &ruleRefExpr{
								pos:  position{line: 345, col: 29, offset: 11461},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 345, col: 36, offset: 11468},
							expr: &litMatcher{
								pos:        position{line: 345, col: 36, offset: 11468},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 345, col: 41, offset: 11473},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 345, col: 48, offset: 11480},
								expr: &ruleRefExpr{
									pos:  position{line: 345, col: 49, offset: 11481},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 345, col: 66, offset: 11498},
							expr: &litMatcher{
								pos:        position{line: 345, col: 66, offset: 11498},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 345, col: 71, offset: 11503},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 345, col: 77, offset: 11509},
								expr: &ruleRefExpr{
									pos:  position{line: 345, col: 78, offset: 11510},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 345, col: 95, offset: 11527},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 345, col: 99, offset: 11531},
							expr: &ruleRefExpr{
								pos:  position{line: 345, col: 99, offset: 11531},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 345, col: 106, offset: 11538},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 349, col: 1, offset: 11607},
			expr: &actionExpr{
				pos: position{line: 349, col: 20, offset: 11626},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 349, col: 20, offset: 11626},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 349, col: 20, offset: 11626},
							val:        "[verse",
							ignoreCase: false,
							want:       "\"[verse\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 349, col: 29, offset: 11635},
							expr: &ruleRefExpr{
								pos:  position{line: 349, col: 29, offset: 11635},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 349, col: 36, offset: 11642},
							expr: &litMatcher{
								pos:        position{line: 349, col: 36, offset: 11642},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 349, col: 41, offset: 11647},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 349, col: 48, offset: 11654},
								expr: &ruleRefExpr{
									pos:  position{line: 349, col: 49, offset: 11655},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 349, col: 66, offset: 11672},
							expr: &litMatcher{
								pos:        position{line: 349, col: 66, offset: 11672},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 349, col: 71, offset: 11677},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 349, col: 77, offset: 11683},
								expr: &ruleRefExpr{
									pos:  position{line: 349, col: 78, offset: 11684},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 349, col: 95, offset: 11701},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 349, col: 99, offset: 11705},
							expr: &ruleRefExpr{
								pos:  position{line: 349, col: 99, offset: 11705},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 349, col: 106, offset: 11712},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 353, col: 1, offset: 11799},
			expr: &actionExpr{
				pos: position{line: 353, col: 19, offset: 11817},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 353, col: 20, offset: 11818},
					expr: &charClassMatcher{
						pos:        position{line: 353, col: 20, offset: 11818},
						val:        "[^\\r\\n,\\]]",
						chars:      []rune{'\r', '\n', ',', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "QuotedTextAttrs",
			pos:  position{line: 357, col: 1, offset: 11867},
			expr: &actionExpr{
				pos: position{line: 357, col: 20, offset: 11886},
				run: (*parser).callonQuotedTextAttrs1,
				expr: &seqExpr{
					pos: position{line: 357, col: 20, offset: 11886},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 357, col: 20, offset: 11886},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 357, col: 24, offset: 11890},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 357, col: 31, offset: 11897},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 357, col: 31, offset: 11897},
										expr: &ruleRefExpr{
											pos:  position{line: 357, col: 31, offset: 11897},
											name: "QuotedTextAttrRole",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 357, col: 51, offset: 11917},
										expr: &ruleRefExpr{
											pos:  position{line: 357, col: 51, offset: 11917},
											name: "ShortHandAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 357, col: 66, offset: 11932},
										expr: &ruleRefExpr{
											pos:  position{line: 357, col: 66, offset: 11932},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 357, col: 78, offset: 11944},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedTextAttrRole",
			pos:  position{line: 361, col: 1, offset: 11998},
			expr: &actionExpr{
				pos: position{line: 361, col: 23, offset: 12020},
				run: (*parser).callonQuotedTextAttrRole1,
				expr: &labeledExpr{
					pos:   position{line: 361, col: 23, offset: 12020},
					label: "role",
					expr: &ruleRefExpr{
						pos:  position{line: 361, col: 28, offset: 12025},
						name: "PositionalValue",
					},
				},
			},
		},
		{
			name: "StandaloneAttributes",
			pos:  position{line: 365, col: 1, offset: 12084},
			expr: &actionExpr{
				pos: position{line: 365, col: 25, offset: 12108},
				run: (*parser).callonStandaloneAttributes1,
				expr: &seqExpr{
					pos: position{line: 365, col: 25, offset: 12108},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 365, col: 25, offset: 12108},
							label: "attributes",
							expr: &oneOrMoreExpr{
								pos: position{line: 365, col: 36, offset: 12119},
								expr: &ruleRefExpr{
									pos:  position{line: 365, col: 37, offset: 12120},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 365, col: 56, offset: 12139},
							expr: &ruleRefExpr{
								pos:  position{line: 365, col: 56, offset: 12139},
								name: "BlankLine",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 365, col: 67, offset: 12150},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttr",
			pos:  position{line: 369, col: 1, offset: 12258},
			expr: &choiceExpr{
				pos: position{line: 369, col: 18, offset: 12275},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 369, col: 18, offset: 12275},
						name: "ShortHandAttrID",
					},
					&ruleRefExpr{
						pos:  position{line: 369, col: 36, offset: 12293},
						name: "ShortHandAttrOption",
					},
					&ruleRefExpr{
						pos:  position{line: 369, col: 58, offset: 12315},
						name: "ShortHandAttrRole",
					},
				},
			},
		},
		{
			name: "ShortHandAttrOption",
			pos:  position{line: 371, col: 1, offset: 12334},
			expr: &actionExpr{
				pos: position{line: 371, col: 24, offset: 12357},
				run: (*parser).callonShortHandAttrOption1,
				expr: &seqExpr{
					pos: position{line: 371, col: 24, offset: 12357},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 371, col: 24, offset: 12357},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 371, col: 28, offset: 12361},
							label: "option",
							expr: &ruleRefExpr{
								pos:  position{line: 371, col: 35, offset: 12368},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 371, col: 50, offset: 12383},
							expr: &charClassMatcher{
								pos:        position{line: 371, col: 51, offset: 12384},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttrID",
			pos:  position{line: 375, col: 1, offset: 12444},
			expr: &actionExpr{
				pos: position{line: 375, col: 20, offset: 12463},
				run: (*parser).callonShortHandAttrID1,
				expr: &seqExpr{
					pos: position{line: 375, col: 20, offset: 12463},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 375, col: 20, offset: 12463},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 375, col: 24, offset: 12467},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 375, col: 27, offset: 12470},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 375, col: 42, offset: 12485},
							expr: &charClassMatcher{
								pos:        position{line: 375, col: 43, offset: 12486},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttrRole",
			pos:  position{line: 379, col: 1, offset: 12538},
			expr: &actionExpr{
				pos: position{line: 379, col: 22, offset: 12559},
				run: (*parser).callonShortHandAttrRole1,
				expr: &seqExpr{
					pos: position{line: 379, col: 22, offset: 12559},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 379, col: 22, offset: 12559},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 379, col: 26, offset: 12563},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 379, col: 31, offset: 12568},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 379, col: 46, offset: 12583},
							expr: &charClassMatcher{
								pos:        position{line: 379, col: 47, offset: 12584},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PositionalValue",
			pos:  position{line: 384, col: 1, offset: 12684},
			expr: &actionExpr{
				pos: position{line: 384, col: 20, offset: 12703},
				run: (*parser).callonPositionalValue1,
				expr: &seqExpr{
					pos: position{line: 384, col: 20, offset: 12703},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 384, col: 20, offset: 12703},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 384, col: 26, offset: 12709},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 384, col: 41, offset: 12724},
							expr: &charClassMatcher{
								pos:        position{line: 384, col: 42, offset: 12725},
								val:        "[,#%.\\]]",
								chars:      []rune{',', '#', '%', '.', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "InlineVal",
			pos:  position{line: 388, col: 1, offset: 12761},
			expr: &choiceExpr{
				pos: position{line: 388, col: 14, offset: 12774},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 388, col: 14, offset: 12774},
						name: "AttrEmpty",
					},
					&ruleRefExpr{
						pos:  position{line: 388, col: 26, offset: 12786},
						name: "AttrValSQ",
					},
					&ruleRefExpr{
						pos:  position{line: 388, col: 38, offset: 12798},
						name: "AttrValDQ",
					},
					&ruleRefExpr{
						pos:  position{line: 388, col: 50, offset: 12810},
						name: "AttrValPosFB",
					},
				},
			},
		},
		{
			name: "NamedAttrs",
			pos:  position{line: 390, col: 1, offset: 12824},
			expr: &actionExpr{
				pos: position{line: 390, col: 15, offset: 12838},
				run: (*parser).callonNamedAttrs1,
				expr: &labeledExpr{
					pos:   position{line: 390, col: 15, offset: 12838},
					label: "attrs",
					expr: &zeroOrMoreExpr{
						pos: position{line: 390, col: 21, offset: 12844},
						expr: &ruleRefExpr{
							pos:  position{line: 390, col: 21, offset: 12844},
							name: "NamedAttrPair",
						},
					},
				},
			},
		},
		{
			name: "NamedAttrPair",
			pos:  position{line: 394, col: 1, offset: 12909},
			expr: &actionExpr{
				pos: position{line: 394, col: 18, offset: 12926},
				run: (*parser).callonNamedAttrPair1,
				expr: &seqExpr{
					pos: position{line: 394, col: 18, offset: 12926},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 394, col: 18, offset: 12926},
							expr: &litMatcher{
								pos:        position{line: 394, col: 18, offset: 12926},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 394, col: 23, offset: 12931},
							expr: &ruleRefExpr{
								pos:  position{line: 394, col: 23, offset: 12931},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 394, col: 30, offset: 12938},
							label: "n",
							expr: &ruleRefExpr{
								pos:  position{line: 394, col: 32, offset: 12940},
								name: "NamedAttrKey",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 394, col: 45, offset: 12953},
							expr: &ruleRefExpr{
								pos:  position{line: 394, col: 45, offset: 12953},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 394, col: 52, offset: 12960},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 394, col: 56, offset: 12964},
							label: "v",
							expr: &choiceExpr{
								pos: position{line: 394, col: 59, offset: 12967},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 394, col: 59, offset: 12967},
										name: "AttrValDQ",
									},
									&ruleRefExpr{
										pos:  position{line: 394, col: 71, offset: 12979},
										name: "AttrValSQ",
									},
									&ruleRefExpr{
										pos:  position{line: 394, col: 83, offset: 12991},
										name: "AttrValNamedFB",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttrEmpty",
			pos:  position{line: 399, col: 1, offset: 13180},
			expr: &actionExpr{
				pos: position{line: 399, col: 14, offset: 13193},
				run: (*parser).callonAttrEmpty1,
				expr: &seqExpr{
					pos: position{line: 399, col: 14, offset: 13193},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 399, col: 14, offset: 13193},
							expr: &charClassMatcher{
								pos:        position{line: 399, col: 14, offset: 13193},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&andExpr{
							pos: position{line: 399, col: 21, offset: 13200},
							expr: &charClassMatcher{
								pos:        position{line: 399, col: 22, offset: 13201},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValSQ",
			pos:  position{line: 405, col: 1, offset: 13337},
			expr: &actionExpr{
				pos: position{line: 405, col: 14, offset: 13350},
				run: (*parser).callonAttrValSQ1,
				expr: &seqExpr{
					pos: position{line: 405, col: 14, offset: 13350},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 405, col: 14, offset: 13350},
							expr: &ruleRefExpr{
								pos:  position{line: 405, col: 14, offset: 13350},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 405, col: 21, offset: 13357},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 405, col: 25, offset: 13361},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 405, col: 29, offset: 13365},
								name: "AttrValSQin",
							},
						},
						&litMatcher{
							pos:        position{line: 405, col: 41, offset: 13377},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 405, col: 45, offset: 13381},
							expr: &ruleRefExpr{
								pos:  position{line: 405, col: 45, offset: 13381},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 405, col: 52, offset: 13388},
							expr: &charClassMatcher{
								pos:        position{line: 405, col: 53, offset: 13389},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValSQin",
			pos:  position{line: 407, col: 1, offset: 13416},
			expr: &actionExpr{
				pos: position{line: 407, col: 16, offset: 13431},
				run: (*parser).callonAttrValSQin1,
				expr: &labeledExpr{
					pos:   position{line: 407, col: 16, offset: 13431},
					label: "val",
					expr: &zeroOrMoreExpr{
						pos: position{line: 407, col: 20, offset: 13435},
						expr: &choiceExpr{
							pos: position{line: 407, col: 22, offset: 13437},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 407, col: 22, offset: 13437},
									name: "AttrValSQEsc",
								},
								&oneOrMoreExpr{
									pos: position{line: 407, col: 37, offset: 13452},
									expr: &charClassMatcher{
										pos:        position{line: 407, col: 37, offset: 13452},
										val:        "[^\\r\\n'\\\\]",
										chars:      []rune{'\r', '\n', '\'', '\\'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&litMatcher{
									pos:        position{line: 407, col: 51, offset: 13466},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValSQEsc",
			pos:  position{line: 409, col: 1, offset: 13506},
			expr: &actionExpr{
				pos: position{line: 409, col: 17, offset: 13522},
				run: (*parser).callonAttrValSQEsc1,
				expr: &litMatcher{
					pos:        position{line: 409, col: 17, offset: 13522},
					val:        "\\'",
					ignoreCase: false,
					want:       "\"\\\\'\"",
				},
			},
		},
		{
			name: "AttrValDQ",
			pos:  position{line: 412, col: 1, offset: 13582},
			expr: &actionExpr{
				pos: position{line: 412, col: 14, offset: 13595},
				run: (*parser).callonAttrValDQ1,
				expr: &seqExpr{
					pos: position{line: 412, col: 14, offset: 13595},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 412, col: 14, offset: 13595},
							expr: &ruleRefExpr{
								pos:  position{line: 412, col: 14, offset: 13595},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 412, col: 21, offset: 13602},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 412, col: 25, offset: 13606},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 412, col: 29, offset: 13610},
								name: "AttrValDQin",
							},
						},
						&litMatcher{
							pos:        position{line: 412, col: 41, offset: 13622},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 412, col: 45, offset: 13626},
							expr: &ruleRefExpr{
								pos:  position{line: 412, col: 45, offset: 13626},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValDQin",
			pos:  position{line: 414, col: 1, offset: 13654},
			expr: &actionExpr{
				pos: position{line: 414, col: 16, offset: 13669},
				run: (*parser).callonAttrValDQin1,
				expr: &labeledExpr{
					pos:   position{line: 414, col: 16, offset: 13669},
					label: "val",
					expr: &zeroOrMoreExpr{
						pos: position{line: 414, col: 20, offset: 13673},
						expr: &choiceExpr{
							pos: position{line: 414, col: 22, offset: 13675},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 414, col: 22, offset: 13675},
									name: "AttrValDQEsc",
								},
								&oneOrMoreExpr{
									pos: position{line: 414, col: 37, offset: 13690},
									expr: &charClassMatcher{
										pos:        position{line: 414, col: 37, offset: 13690},
										val:        "[^\\r\\n\"\\\\]",
										chars:      []rune{'\r', '\n', '"', '\\'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&litMatcher{
									pos:        position{line: 414, col: 51, offset: 13704},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValDQEsc",
			pos:  position{line: 416, col: 1, offset: 13744},
			expr: &actionExpr{
				pos: position{line: 416, col: 17, offset: 13760},
				run: (*parser).callonAttrValDQEsc1,
				expr: &litMatcher{
					pos:        position{line: 416, col: 17, offset: 13760},
					val:        "\\\"",
					ignoreCase: false,
					want:       "\"\\\\\\\"\"",
				},
			},
		},
		{
			name: "AttrValPosFB",
			pos:  position{line: 419, col: 1, offset: 13851},
			expr: &actionExpr{
				pos: position{line: 419, col: 17, offset: 13867},
				run: (*parser).callonAttrValPosFB1,
				expr: &seqExpr{
					pos: position{line: 419, col: 17, offset: 13867},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 419, col: 17, offset: 13867},
							expr: &charClassMatcher{
								pos:        position{line: 419, col: 17, offset: 13867},
								val:        "[^,=\\r\\n\\]]",
								chars:      []rune{',', '=', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&andExpr{
							pos: position{line: 419, col: 30, offset: 13880},
							expr: &charClassMatcher{
								pos:        position{line: 419, col: 31, offset: 13881},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValNamedFB",
			pos:  position{line: 422, col: 1, offset: 13992},
			expr: &actionExpr{
				pos: position{line: 422, col: 19, offset: 14010},
				run: (*parser).callonAttrValNamedFB1,
				expr: &seqExpr{
					pos: position{line: 422, col: 19, offset: 14010},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 422, col: 19, offset: 14010},
							expr: &charClassMatcher{
								pos:        position{line: 422, col: 19, offset: 14010},
								val:        "[^,\\r\\n\\]]",
								chars:      []rune{',', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&andExpr{
							pos: position{line: 422, col: 31, offset: 14022},
							expr: &charClassMatcher{
								pos:        position{line: 422, col: 32, offset: 14023},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandValue",
			pos:  position{line: 424, col: 1, offset: 14080},
			expr: &choiceExpr{
				pos: position{line: 424, col: 19, offset: 14098},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 424, col: 19, offset: 14098},
						name: "ShortHandValuePlain",
					},
					&ruleRefExpr{
						pos:  position{line: 424, col: 41, offset: 14120},
						name: "AttrValueSingleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 424, col: 65, offset: 14144},
						name: "AttrValueDoubleQuoted",
					},
				},
			},
		},
		{
			name: "ShortHandValuePlain",
			pos:  position{line: 428, col: 1, offset: 14342},
			expr: &actionExpr{
				pos: position{line: 428, col: 24, offset: 14365},
				run: (*parser).callonShortHandValuePlain1,
				expr: &seqExpr{
					pos: position{line: 428, col: 24, offset: 14365},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 428, col: 24, offset: 14365},
							label: "first",
							expr: &actionExpr{
								pos: position{line: 428, col: 31, offset: 14372},
								run: (*parser).callonShortHandValuePlain4,
								expr: &charClassMatcher{
									pos:        position{line: 428, col: 31, offset: 14372},
									val:        "[^,\\r\\n\"' \\t.#%=\\]]",
									chars:      []rune{',', '\r', '\n', '"', '\'', ' ', '\t', '.', '#', '%', '=', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 431, col: 5, offset: 14458},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 431, col: 13, offset: 14466},
								expr: &choiceExpr{
									pos: position{line: 431, col: 14, offset: 14467},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 431, col: 14, offset: 14467},
											name: "ElementPlaceHolder",
										},
										&choiceExpr{
											pos: position{line: 432, col: 12, offset: 14498},
											alternatives: []interface{}{
												&charClassMatcher{
													pos:        position{line: 432, col: 12, offset: 14498},
													val:        "[^ \\t,\\r\\n\"'.#%=\\]]",
													chars:      []rune{' ', '\t', ',', '\r', '\n', '"', '\'', '.', '#', '%', '=', ']'},
													ignoreCase: false,
													inverted:   true,
												},
												&actionExpr{
													pos: position{line: 432, col: 34, offset: 14520},
													run: (*parser).callonShortHandValuePlain12,
													expr: &seqExpr{
														pos: position{line: 432, col: 34, offset: 14520},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 432, col: 34, offset: 14520},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 432, col: 39, offset: 14525},
																val:        "[^ \\t,\\r\\n\"'.#%=\\]]",
																chars:      []rune{' ', '\t', ',', '\r', '\n', '"', '\'', '.', '#', '%', '=', ']'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttr",
			pos:  position{line: 439, col: 1, offset: 14708},
			expr: &actionExpr{
				pos: position{line: 439, col: 13, offset: 14720},
				run: (*parser).callonNamedAttr1,
				expr: &seqExpr{
					pos: position{line: 439, col: 13, offset: 14720},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 439, col: 13, offset: 14720},
							expr: &seqExpr{
								pos: position{line: 439, col: 15, offset: 14722},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 439, col: 15, offset: 14722},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 439, col: 19, offset: 14726},
										expr: &ruleRefExpr{
											pos:  position{line: 439, col: 19, offset: 14726},
											name: "Space",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 439, col: 29, offset: 14736},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 439, col: 33, offset: 14740},
								name: "NamedAttrKey",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 439, col: 46, offset: 14753},
							expr: &ruleRefExpr{
								pos:  position{line: 439, col: 46, offset: 14753},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 439, col: 53, offset: 14760},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 439, col: 57, offset: 14764},
							expr: &ruleRefExpr{
								pos:  position{line: 439, col: 57, offset: 14764},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 439, col: 64, offset: 14771},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 439, col: 70, offset: 14777},
								name: "NamedAttrValue",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 439, col: 85, offset: 14792},
							expr: &ruleRefExpr{
								pos:  position{line: 439, col: 85, offset: 14792},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttrKey",
			pos:  position{line: 444, col: 1, offset: 14973},
			expr: &actionExpr{
				pos: position{line: 444, col: 17, offset: 14989},
				run: (*parser).callonNamedAttrKey1,
				expr: &seqExpr{
					pos: position{line: 444, col: 17, offset: 14989},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 444, col: 17, offset: 14989},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 444, col: 26, offset: 14998},
							expr: &charClassMatcher{
								pos:        position{line: 444, col: 26, offset: 14998},
								val:        "[\\pL0-9_-]",
								chars:      []rune{'_', '-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttrValue",
			pos:  position{line: 448, col: 1, offset: 15046},
			expr: &choiceExpr{
				pos: position{line: 448, col: 19, offset: 15064},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 448, col: 19, offset: 15064},
						name: "AttrValueNone",
					},
					&ruleRefExpr{
						pos:  position{line: 448, col: 35, offset: 15080},
						name: "AttrValueSingleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 448, col: 59, offset: 15104},
						name: "AttrValueDoubleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 448, col: 83, offset: 15128},
						name: "AttrValuePlain",
					},
				},
			},
		},
		{
			name: "AttrValuePlain",
			pos:  position{line: 450, col: 1, offset: 15144},
			expr: &actionExpr{
				pos: position{line: 450, col: 19, offset: 15162},
				run: (*parser).callonAttrValuePlain1,
				expr: &oneOrMoreExpr{
					pos: position{line: 450, col: 19, offset: 15162},
					expr: &charClassMatcher{
						pos:        position{line: 450, col: 19, offset: 15162},
						val:        "[^,\\r\\n\"' \\t\\]]",
						chars:      []rune{',', '\r', '\n', '"', '\'', ' ', '\t', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttrValueSingleQuoted",
			pos:  position{line: 454, col: 1, offset: 15215},
			expr: &actionExpr{
				pos: position{line: 454, col: 26, offset: 15240},
				run: (*parser).callonAttrValueSingleQuoted1,
				expr: &seqExpr{
					pos: position{line: 454, col: 26, offset: 15240},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 454, col: 26, offset: 15240},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 454, col: 30, offset: 15244},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 454, col: 39, offset: 15253},
								expr: &choiceExpr{
									pos: position{line: 455, col: 5, offset: 15259},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 455, col: 6, offset: 15260},
											run: (*parser).callonAttrValueSingleQuoted7,
											expr: &oneOrMoreExpr{
												pos: position{line: 455, col: 6, offset: 15260},
												expr: &charClassMatcher{
													pos:        position{line: 455, col: 6, offset: 15260},
													val:        "[^'\\r\\n\\uFFFD]",
													chars:      []rune{'\'', '\r', '\n', '�'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 457, col: 10, offset: 15342},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 457, col: 31, offset: 15363},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "AttrValueDoubleQuoted",
			pos:  position{line: 461, col: 1, offset: 15405},
			expr: &actionExpr{
				pos: position{line: 461, col: 26, offset: 15430},
				run: (*parser).callonAttrValueDoubleQuoted1,
				expr: &seqExpr{
					pos: position{line: 461, col: 26, offset: 15430},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 461, col: 26, offset: 15430},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 461, col: 31, offset: 15435},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 461, col: 40, offset: 15444},
								expr: &choiceExpr{
									pos: position{line: 462, col: 5, offset: 15450},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 462, col: 6, offset: 15451},
											run: (*parser).callonAttrValueDoubleQuoted7,
											expr: &oneOrMoreExpr{
												pos: position{line: 462, col: 6, offset: 15451},
												expr: &charClassMatcher{
													pos:        position{line: 462, col: 6, offset: 15451},
													val:        "[^\"\\r\\n\\uFFFD]",
													chars:      []rune{'"', '\r', '\n', '�'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 464, col: 10, offset: 15533},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 464, col: 31, offset: 15554},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "AttrValueNone",
			pos:  position{line: 470, col: 1, offset: 15794},
			expr: &actionExpr{
				pos: position{line: 470, col: 18, offset: 15811},
				run: (*parser).callonAttrValueNone1,
				expr: &litMatcher{
					pos:        position{line: 470, col: 18, offset: 15811},
					val:        "None",
					ignoreCase: false,
					want:       "\"None\"",
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 477, col: 1, offset: 15946},
			expr: &actionExpr{
				pos: position{line: 477, col: 12, offset: 15957},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 477, col: 12, offset: 15957},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 477, col: 12, offset: 15957},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 477, col: 23, offset: 15968},
								expr: &ruleRefExpr{
									pos:  position{line: 477, col: 24, offset: 15969},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 478, col: 5, offset: 15986},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 478, col: 12, offset: 15993},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 478, col: 12, offset: 15993},
									expr: &litMatcher{
										pos:        position{line: 478, col: 13, offset: 15994},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 482, col: 5, offset: 16085},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 486, col: 5, offset: 16237},
							expr: &ruleRefExpr{
								pos:  position{line: 486, col: 5, offset: 16237},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 486, col: 12, offset: 16244},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 486, col: 19, offset: 16251},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 486, col: 34, offset: 16266},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 486, col: 38, offset: 16270},
								expr: &ruleRefExpr{
									pos:  position{line: 486, col: 38, offset: 16270},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 486, col: 56, offset: 16288},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 490, col: 1, offset: 16394},
			expr: &actionExpr{
				pos: position{line: 490, col: 18, offset: 16411},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 490, col: 18, offset: 16411},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 490, col: 27, offset: 16420},
						expr: &seqExpr{
							pos: position{line: 490, col: 28, offset: 16421},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 490, col: 28, offset: 16421},
									expr: &ruleRefExpr{
										pos:  position{line: 490, col: 29, offset: 16422},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 490, col: 37, offset: 16430},
									expr: &ruleRefExpr{
										pos:  position{line: 490, col: 38, offset: 16431},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 490, col: 54, offset: 16447},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 494, col: 1, offset: 16568},
			expr: &actionExpr{
				pos: position{line: 494, col: 17, offset: 16584},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 494, col: 17, offset: 16584},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 494, col: 26, offset: 16593},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 494, col: 26, offset: 16593},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 495, col: 11, offset: 16608},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 496, col: 11, offset: 16653},
								expr: &ruleRefExpr{
									pos:  position{line: 496, col: 11, offset: 16653},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 497, col: 11, offset: 16671},
								name: "ElementPlaceHolder",
							},
							&ruleRefExpr{
								pos:  position{line: 498, col: 11, offset: 16700},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsPlaceHolder",
			pos:  position{line: 505, col: 1, offset: 16851},
			expr: &seqExpr{
				pos: position{line: 505, col: 31, offset: 16881},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 505, col: 31, offset: 16881},
						val:        "toc::[]",
						ignoreCase: false,
						want:       "\"toc::[]\"",
					},
					&ruleRefExpr{
						pos:  position{line: 505, col: 41, offset: 16891},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 510, col: 1, offset: 17002},
			expr: &actionExpr{
				pos: position{line: 510, col: 19, offset: 17020},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 510, col: 19, offset: 17020},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 510, col: 19, offset: 17020},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 510, col: 25, offset: 17026},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 510, col: 40, offset: 17041},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 510, col: 45, offset: 17046},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 510, col: 52, offset: 17053},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 510, col: 68, offset: 17069},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 510, col: 75, offset: 17076},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 514, col: 1, offset: 17191},
			expr: &actionExpr{
				pos: position{line: 514, col: 20, offset: 17210},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 514, col: 20, offset: 17210},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 514, col: 20, offset: 17210},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 514, col: 26, offset: 17216},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 514, col: 41, offset: 17231},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 514, col: 45, offset: 17235},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 514, col: 52, offset: 17242},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 514, col: 68, offset: 17258},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 514, col: 75, offset: 17265},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 518, col: 1, offset: 17381},
			expr: &actionExpr{
				pos: position{line: 518, col: 18, offset: 17398},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 518, col: 19, offset: 17399},
					expr: &charClassMatcher{
						pos:        position{line: 518, col: 19, offset: 17399},
						val:        "[\\pL0-9_-]",
						chars:      []rune{'_', '-'},
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 522, col: 1, offset: 17448},
			expr: &actionExpr{
				pos: position{line: 522, col: 19, offset: 17466},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 522, col: 19, offset: 17466},
					expr: &charClassMatcher{
						pos:        position{line: 522, col: 19, offset: 17466},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 526, col: 1, offset: 17514},
			expr: &actionExpr{
				pos: position{line: 526, col: 24, offset: 17537},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 526, col: 24, offset: 17537},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 526, col: 24, offset: 17537},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 526, col: 28, offset: 17541},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 526, col: 34, offset: 17547},
								expr: &ruleRefExpr{
									pos:  position{line: 526, col: 35, offset: 17548},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 526, col: 54, offset: 17567},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 533, col: 1, offset: 17749},
			expr: &actionExpr{
				pos: position{line: 533, col: 18, offset: 17766},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 533, col: 18, offset: 17766},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 533, col: 18, offset: 17766},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 533, col: 24, offset: 17772},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 533, col: 24, offset: 17772},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 533, col: 24, offset: 17772},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 533, col: 36, offset: 17784},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 533, col: 42, offset: 17790},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 533, col: 56, offset: 17804},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 533, col: 74, offset: 17822},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 535, col: 8, offset: 17969},
							expr: &ruleRefExpr{
								pos:  position{line: 535, col: 8, offset: 17969},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 535, col: 15, offset: 17976},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 539, col: 1, offset: 18028},
			expr: &actionExpr{
				pos: position{line: 539, col: 26, offset: 18053},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 539, col: 26, offset: 18053},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 539, col: 26, offset: 18053},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 539, col: 30, offset: 18057},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 539, col: 36, offset: 18063},
								expr: &choiceExpr{
									pos: position{line: 539, col: 37, offset: 18064},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 539, col: 37, offset: 18064},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 539, col: 59, offset: 18086},
											name: "TagRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 539, col: 80, offset: 18107},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 539, col: 99, offset: 18126},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 543, col: 1, offset: 18198},
			expr: &actionExpr{
				pos: position{line: 543, col: 24, offset: 18221},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 543, col: 24, offset: 18221},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 543, col: 24, offset: 18221},
							val:        "lines=",
							ignoreCase: false,
							want:       "\"lines=\"",
						},
						&labeledExpr{
							pos:   position{line: 543, col: 33, offset: 18230},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 543, col: 40, offset: 18237},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 543, col: 66, offset: 18263},
							expr: &litMatcher{
								pos:        position{line: 543, col: 66, offset: 18263},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 547, col: 1, offset: 18322},
			expr: &actionExpr{
				pos: position{line: 547, col: 29, offset: 18350},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 547, col: 29, offset: 18350},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 547, col: 29, offset: 18350},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 547, col: 36, offset: 18357},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 547, col: 36, offset: 18357},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 548, col: 11, offset: 18474},
										name: "MultipleQuotedLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 549, col: 11, offset: 18510},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 550, col: 11, offset: 18536},
										name: "MultiLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 551, col: 11, offset: 18568},
										name: "SingleLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 552, col: 11, offset: 18600},
										name: "SingleLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 553, col: 11, offset: 18627},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 553, col: 31, offset: 18647},
							expr: &ruleRefExpr{
								pos:  position{line: 553, col: 31, offset: 18647},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 553, col: 39, offset: 18655},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 553, col: 39, offset: 18655},
									expr: &litMatcher{
										pos:        position{line: 553, col: 40, offset: 18656},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 553, col: 46, offset: 18662},
									expr: &litMatcher{
										pos:        position{line: 553, col: 47, offset: 18663},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 557, col: 1, offset: 18695},
			expr: &actionExpr{
				pos: position{line: 557, col: 23, offset: 18717},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 557, col: 23, offset: 18717},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 557, col: 23, offset: 18717},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 557, col: 30, offset: 18724},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 557, col: 30, offset: 18724},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 557, col: 47, offset: 18741},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 558, col: 5, offset: 18763},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 558, col: 12, offset: 18770},
								expr: &actionExpr{
									pos: position{line: 558, col: 13, offset: 18771},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 558, col: 13, offset: 18771},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 558, col: 13, offset: 18771},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 558, col: 17, offset: 18775},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 558, col: 24, offset: 18782},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 558, col: 24, offset: 18782},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 558, col: 41, offset: 18799},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedLineRanges",
			pos:  position{line: 564, col: 1, offset: 18937},
			expr: &actionExpr{
				pos: position{line: 564, col: 29, offset: 18965},
				run: (*parser).callonMultipleQuotedLineRanges1,
				expr: &seqExpr{
					pos: position{line: 564, col: 29, offset: 18965},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 564, col: 29, offset: 18965},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 564, col: 34, offset: 18970},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 564, col: 41, offset: 18977},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 564, col: 41, offset: 18977},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 564, col: 58, offset: 18994},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 565, col: 5, offset: 19016},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 565, col: 12, offset: 19023},
								expr: &actionExpr{
									pos: position{line: 565, col: 13, offset: 19024},
									run: (*parser).callonMultipleQuotedLineRanges10,
									expr: &seqExpr{
										pos: position{line: 565, col: 13, offset: 19024},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 565, col: 13, offset: 19024},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 565, col: 17, offset: 19028},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 565, col: 24, offset: 19035},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 565, col: 24, offset: 19035},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 565, col: 41, offset: 19052},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 567, col: 9, offset: 19105},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 571, col: 1, offset: 19195},
			expr: &actionExpr{
				pos: position{line: 571, col: 19, offset: 19213},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 571, col: 19, offset: 19213},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 571, col: 19, offset: 19213},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 571, col: 26, offset: 19220},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 571, col: 34, offset: 19228},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 571, col: 39, offset: 19233},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 571, col: 44, offset: 19238},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineQuotedRange",
			pos:  position{line: 575, col: 1, offset: 19326},
			expr: &actionExpr{
				pos: position{line: 575, col: 25, offset: 19350},
				run: (*parser).callonMultiLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 575, col: 25, offset: 19350},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 575, col: 25, offset: 19350},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 575, col: 30, offset: 19355},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 575, col: 37, offset: 19362},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 575, col: 45, offset: 19370},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 575, col: 50, offset: 19375},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 575, col: 55, offset: 19380},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 575, col: 63, offset: 19388},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 579, col: 1, offset: 19473},
			expr: &actionExpr{
				pos: position{line: 579, col: 20, offset: 19492},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 579, col: 20, offset: 19492},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 579, col: 32, offset: 19504},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SingleLineQuotedRange",
			pos:  position{line: 583, col: 1, offset: 19599},
			expr: &actionExpr{
				pos: position{line: 583, col: 26, offset: 19624},
				run: (*parser).callonSingleLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 583, col: 26, offset: 19624},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 583, col: 26, offset: 19624},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 583, col: 31, offset: 19629},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 583, col: 43, offset: 19641},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 583, col: 51, offset: 19649},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 587, col: 1, offset: 19741},
			expr: &actionExpr{
				pos: position{line: 587, col: 23, offset: 19763},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 587, col: 23, offset: 19763},
					expr: &charClassMatcher{
						pos:        position{line: 587, col: 23, offset: 19763},
						val:        "[^\\], ]",
						chars:      []rune{']', ',', ' '},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "TagRangesAttribute",
			pos:  position{line: 591, col: 1, offset: 19808},
			expr: &actionExpr{
				pos: position{line: 591, col: 23, offset: 19830},
				run: (*parser).callonTagRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 591, col: 23, offset: 19830},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 591, col: 24, offset: 19831},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 591, col: 24, offset: 19831},
									val:        "tags=",
									ignoreCase: false,
									want:       "\"tags=\"",
								},
								&litMatcher{
									pos:        position{line: 591, col: 34, offset: 19841},
									val:        "tag=",
									ignoreCase: false,
									want:       "\"tag=\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 591, col: 42, offset: 19849},
							label: "tags",
							expr: &ruleRefExpr{
								pos:  position{line: 591, col: 48, offset: 19855},
								name: "TagRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 591, col: 73, offset: 19880},
							expr: &litMatcher{
								pos:        position{line: 591, col: 73, offset: 19880},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttributeValue",
			pos:  position{line: 595, col: 1, offset: 20029},
			expr: &actionExpr{
				pos: position{line: 595, col: 28, offset: 20056},
				run: (*parser).callonTagRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 595, col: 28, offset: 20056},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 595, col: 28, offset: 20056},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 595, col: 35, offset: 20063},
								name: "MultipleTagRanges",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 595, col: 54, offset: 20082},
							expr: &ruleRefExpr{
								pos:  position{line: 595, col: 54, offset: 20082},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 595, col: 62, offset: 20090},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 595, col: 62, offset: 20090},
									expr: &litMatcher{
										pos:        position{line: 595, col: 63, offset: 20091},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 595, col: 69, offset: 20097},
									expr: &litMatcher{
										pos:        position{line: 595, col: 70, offset: 20098},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 599, col: 1, offset: 20130},
			expr: &actionExpr{
				pos: position{line: 599, col: 22, offset: 20151},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 599, col: 22, offset: 20151},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 599, col: 22, offset: 20151},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 599, col: 29, offset: 20158},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 600, col: 5, offset: 20172},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 600, col: 12, offset: 20179},
								expr: &actionExpr{
									pos: position{line: 600, col: 13, offset: 20180},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 600, col: 13, offset: 20180},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 600, col: 13, offset: 20180},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 600, col: 17, offset: 20184},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 600, col: 24, offset: 20191},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 606, col: 1, offset: 20322},
			expr: &choiceExpr{
				pos: position{line: 606, col: 13, offset: 20334},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 606, col: 13, offset: 20334},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 606, col: 13, offset: 20334},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 606, col: 18, offset: 20339},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 606, col: 18, offset: 20339},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 606, col: 30, offset: 20351},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 608, col: 5, offset: 20419},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 608, col: 5, offset: 20419},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 608, col: 5, offset: 20419},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 608, col: 9, offset: 20423},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 608, col: 14, offset: 20428},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 608, col: 14, offset: 20428},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 608, col: 26, offset: 20440},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 612, col: 1, offset: 20508},
			expr: &actionExpr{
				pos: position{line: 612, col: 16, offset: 20523},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 612, col: 16, offset: 20523},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 612, col: 16, offset: 20523},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 612, col: 23, offset: 20530},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 612, col: 23, offset: 20530},
									expr: &litMatcher{
										pos:        position{line: 612, col: 24, offset: 20531},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 615, col: 5, offset: 20585},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "RawFileContent",
			pos:  position{line: 623, col: 1, offset: 20827},
			expr: &zeroOrMoreExpr{
				pos: position{line: 623, col: 19, offset: 20845},
				expr: &choiceExpr{
					pos: position{line: 623, col: 20, offset: 20846},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 623, col: 20, offset: 20846},
							name: "FileInclusion",
						},
						&ruleRefExpr{
							pos:  position{line: 623, col: 36, offset: 20862},
							name: "SingleLineComment",
						},
						&ruleRefExpr{
							pos:  position{line: 623, col: 56, offset: 20882},
							name: "RawLine",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 629, col: 1, offset: 21029},
			expr: &actionExpr{
				pos: position{line: 629, col: 21, offset: 21049},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 629, col: 21, offset: 21049},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 629, col: 21, offset: 21049},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 629, col: 29, offset: 21057},
								expr: &choiceExpr{
									pos: position{line: 629, col: 30, offset: 21058},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 629, col: 30, offset: 21058},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 629, col: 53, offset: 21081},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 629, col: 74, offset: 21102},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 629, col: 74, offset: 21102,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 629, col: 107, offset: 21135},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 633, col: 1, offset: 21206},
			expr: &actionExpr{
				pos: position{line: 633, col: 25, offset: 21230},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 633, col: 25, offset: 21230},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 633, col: 25, offset: 21230},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 633, col: 33, offset: 21238},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 633, col: 38, offset: 21243},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 633, col: 38, offset: 21243},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 633, col: 78, offset: 21283},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 637, col: 1, offset: 21348},
			expr: &actionExpr{
				pos: position{line: 637, col: 23, offset: 21370},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 637, col: 23, offset: 21370},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 637, col: 23, offset: 21370},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 637, col: 31, offset: 21378},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 637, col: 36, offset: 21383},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 637, col: 36, offset: 21383},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 637, col: 76, offset: 21423},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 644, col: 1, offset: 21587},
			expr: &choiceExpr{
				pos: position{line: 644, col: 18, offset: 21604},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 644, col: 18, offset: 21604},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 644, col: 18, offset: 21604},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 644, col: 27, offset: 21613},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 646, col: 9, offset: 21670},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 646, col: 9, offset: 21670},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 646, col: 15, offset: 21676},
								expr: &ruleRefExpr{
									pos:  position{line: 646, col: 16, offset: 21677},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 650, col: 1, offset: 21769},
			expr: &actionExpr{
				pos: position{line: 650, col: 22, offset: 21790},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 650, col: 22, offset: 21790},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 650, col: 22, offset: 21790},
							expr: &ruleRefExpr{
								pos:  position{line: 650, col: 23, offset: 21791},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 651, col: 5, offset: 21799},
							expr: &ruleRefExpr{
								pos:  position{line: 651, col: 6, offset: 21800},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 652, col: 5, offset: 21815},
							expr: &ruleRefExpr{
								pos:  position{line: 652, col: 6, offset: 21816},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 653, col: 5, offset: 21838},
							expr: &ruleRefExpr{
								pos:  position{line: 653, col: 6, offset: 21839},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 654, col: 5, offset: 21865},
							expr: &ruleRefExpr{
								pos:  position{line: 654, col: 6, offset: 21866},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 655, col: 5, offset: 21894},
							expr: &ruleRefExpr{
								pos:  position{line: 655, col: 6, offset: 21895},
								name: "CalloutListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 656, col: 5, offset: 21921},
							expr: &ruleRefExpr{
								pos:  position{line: 656, col: 6, offset: 21922},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 657, col: 5, offset: 21947},
							expr: &ruleRefExpr{
								pos:  position{line: 657, col: 6, offset: 21948},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 658, col: 5, offset: 21969},
							expr: &ruleRefExpr{
								pos:  position{line: 658, col: 6, offset: 21970},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 659, col: 5, offset: 21989},
							expr: &ruleRefExpr{
								pos:  position{line: 659, col: 6, offset: 21990},
								name: "LabeledListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 660, col: 5, offset: 22017},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 660, col: 11, offset: 22023},
								run: (*parser).callonListParagraphLine24,
								expr: &labeledExpr{
									pos:   position{line: 660, col: 11, offset: 22023},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 660, col: 20, offset: 22032},
										expr: &ruleRefExpr{
											pos:  position{line: 660, col: 21, offset: 22033},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 662, col: 12, offset: 22132},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 666, col: 1, offset: 22171},
			expr: &seqExpr{
				pos: position{line: 666, col: 25, offset: 22195},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 666, col: 25, offset: 22195},
						val:        "+",
						ignoreCase: false,
						want:       "\"+\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 666, col: 29, offset: 22199},
						expr: &ruleRefExpr{
							pos:  position{line: 666, col: 29, offset: 22199},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 666, col: 36, offset: 22206},
						name: "Newline",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 668, col: 1, offset: 22278},
			expr: &actionExpr{
				pos: position{line: 668, col: 29, offset: 22306},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 668, col: 29, offset: 22306},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 668, col: 29, offset: 22306},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 668, col: 50, offset: 22327},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 668, col: 58, offset: 22335},
								name: "ContinuedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedListItemContent",
			pos:  position{line: 672, col: 1, offset: 22441},
			expr: &actionExpr{
				pos: position{line: 672, col: 29, offset: 22469},
				run: (*parser).callonContinuedListItemContent1,
				expr: &seqExpr{
					pos: position{line: 672, col: 29, offset: 22469},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 672, col: 29, offset: 22469},
							expr: &ruleRefExpr{
								pos:  position{line: 672, col: 30, offset: 22470},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 673, col: 5, offset: 22479},
							label: "content",
							expr: &choiceExpr{
								pos: position{line: 673, col: 14, offset: 22488},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 673, col: 14, offset: 22488},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 674, col: 11, offset: 22513},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 675, col: 11, offset: 22537},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 676, col: 11, offset: 22558},
										name: "RawVerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 677, col: 11, offset: 22586},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 678, col: 11, offset: 22610},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 679, col: 11, offset: 22637},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 680, col: 11, offset: 22666},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 682, col: 11, offset: 22731},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 683, col: 11, offset: 22782},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 684, col: 11, offset: 22806},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 685, col: 11, offset: 22838},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 686, col: 11, offset: 22864},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 687, col: 11, offset: 22901},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 688, col: 11, offset: 22926},
										name: "ContinuedRawParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 695, col: 1, offset: 23092},
			expr: &actionExpr{
				pos: position{line: 695, col: 20, offset: 23111},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 695, col: 20, offset: 23111},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 695, col: 20, offset: 23111},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 695, col: 26, offset: 23117},
								expr: &ruleRefExpr{
									pos:  position{line: 695, col: 27, offset: 23118},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 695, col: 40, offset: 23131},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 695, col: 48, offset: 23139},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 695, col: 71, offset: 23162},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 695, col: 80, offset: 23171},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 699, col: 1, offset: 23306},
			expr: &actionExpr{
				pos: position{line: 700, col: 5, offset: 23336},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 700, col: 5, offset: 23336},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 700, col: 5, offset: 23336},
							expr: &ruleRefExpr{
								pos:  position{line: 700, col: 5, offset: 23336},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 700, col: 12, offset: 23343},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 702, col: 9, offset: 23406},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 702, col: 9, offset: 23406},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 702, col: 9, offset: 23406},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 702, col: 9, offset: 23406},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 702, col: 16, offset: 23413},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 702, col: 16, offset: 23413},
															expr: &litMatcher{
																pos:        position{line: 702, col: 17, offset: 23414},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 706, col: 9, offset: 23514},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 725, col: 11, offset: 24231},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 725, col: 11, offset: 24231},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 725, col: 11, offset: 24231},
													expr: &charClassMatcher{
														pos:        position{line: 725, col: 12, offset: 24232},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 725, col: 20, offset: 24240},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 727, col: 13, offset: 24351},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 727, col: 13, offset: 24351},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 727, col: 14, offset: 24352},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 727, col: 21, offset: 24359},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 729, col: 13, offset: 24473},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 729, col: 13, offset: 24473},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 729, col: 14, offset: 24474},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 729, col: 21, offset: 24481},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 731, col: 13, offset: 24595},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 731, col: 13, offset: 24595},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 731, col: 13, offset: 24595},
													expr: &charClassMatcher{
														pos:        position{line: 731, col: 14, offset: 24596},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 731, col: 22, offset: 24604},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 733, col: 13, offset: 24718},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 733, col: 13, offset: 24718},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 733, col: 13, offset: 24718},
													expr: &charClassMatcher{
														pos:        position{line: 733, col: 14, offset: 24719},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 733, col: 22, offset: 24727},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 735, col: 12, offset: 24840},
							expr: &ruleRefExpr{
								pos:  position{line: 735, col: 12, offset: 24840},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 739, col: 1, offset: 24875},
			expr: &actionExpr{
				pos: position{line: 739, col: 27, offset: 24901},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 739, col: 27, offset: 24901},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 739, col: 37, offset: 24911},
						expr: &ruleRefExpr{
							pos:  position{line: 739, col: 37, offset: 24911},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 746, col: 1, offset: 25111},
			expr: &actionExpr{
				pos: position{line: 746, col: 22, offset: 25132},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 746, col: 22, offset: 25132},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 746, col: 22, offset: 25132},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 746, col: 28, offset: 25138},
								expr: &ruleRefExpr{
									pos:  position{line: 746, col: 29, offset: 25139},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 746, col: 42, offset: 25152},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 746, col: 50, offset: 25160},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 746, col: 75, offset: 25185},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 746, col: 86, offset: 25196},
								expr: &ruleRefExpr{
									pos:  position{line: 746, col: 87, offset: 25197},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 746, col: 117, offset: 25227},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 746, col: 126, offset: 25236},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 750, col: 1, offset: 25389},
			expr: &actionExpr{
				pos: position{line: 751, col: 5, offset: 25421},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 751, col: 5, offset: 25421},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 751, col: 5, offset: 25421},
							expr: &ruleRefExpr{
								pos:  position{line: 751, col: 5, offset: 25421},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 751, col: 12, offset: 25428},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 751, col: 20, offset: 25436},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 753, col: 9, offset: 25493},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 753, col: 9, offset: 25493},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 753, col: 9, offset: 25493},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 753, col: 16, offset: 25500},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 753, col: 16, offset: 25500},
															expr: &litMatcher{
																pos:        position{line: 753, col: 17, offset: 25501},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 757, col: 9, offset: 25601},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 774, col: 14, offset: 26308},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 774, col: 21, offset: 26315},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 774, col: 22, offset: 26316},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 776, col: 13, offset: 26402},
							expr: &ruleRefExpr{
								pos:  position{line: 776, col: 13, offset: 26402},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 780, col: 1, offset: 26438},
			expr: &actionExpr{
				pos: position{line: 780, col: 32, offset: 26469},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 780, col: 32, offset: 26469},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 780, col: 32, offset: 26469},
							expr: &litMatcher{
								pos:        position{line: 780, col: 33, offset: 26470},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 780, col: 37, offset: 26474},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 781, col: 7, offset: 26488},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 781, col: 7, offset: 26488},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 781, col: 7, offset: 26488},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 782, col: 7, offset: 26533},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 782, col: 7, offset: 26533},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 783, col: 7, offset: 26576},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 783, col: 7, offset: 26576},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 784, col: 7, offset: 26618},
							expr: &ruleRefExpr{
								pos:  position{line: 784, col: 7, offset: 26618},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 788, col: 1, offset: 26660},
			expr: &actionExpr{
				pos: position{line: 788, col: 29, offset: 26688},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 788, col: 29, offset: 26688},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 788, col: 39, offset: 26698},
						expr: &ruleRefExpr{
							pos:  position{line: 788, col: 39, offset: 26698},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 795, col: 1, offset: 27014},
			expr: &actionExpr{
				pos: position{line: 795, col: 20, offset: 27033},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 795, col: 20, offset: 27033},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 795, col: 20, offset: 27033},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 795, col: 26, offset: 27039},
								expr: &ruleRefExpr{
									pos:  position{line: 795, col: 27, offset: 27040},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 795, col: 40, offset: 27053},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 795, col: 46, offset: 27059},
								name: "VerbatimLabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 795, col: 75, offset: 27088},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 795, col: 86, offset: 27099},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 795, col: 112, offset: 27125},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 795, col: 124, offset: 27137},
								expr: &ruleRefExpr{
									pos:  position{line: 795, col: 125, offset: 27138},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemPrefix",
			pos:  position{line: 799, col: 1, offset: 27279},
			expr: &seqExpr{
				pos: position{line: 799, col: 26, offset: 27304},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 799, col: 26, offset: 27304},
						name: "VerbatimLabeledListItemTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 799, col: 54, offset: 27332},
						name: "LabeledListItemSeparator",
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemChars",
			pos:  position{line: 801, col: 1, offset: 27358},
			expr: &choiceExpr{
				pos: position{line: 801, col: 33, offset: 27390},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 801, col: 33, offset: 27390},
						expr: &charClassMatcher{
							pos:        position{line: 801, col: 33, offset: 27390},
							val:        "[^:\\r\\n]",
							chars:      []rune{':', '\r', '\n'},
							ignoreCase: false,
							inverted:   true,
						},
					},
					&seqExpr{
						pos: position{line: 801, col: 45, offset: 27402},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 801, col: 45, offset: 27402},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
							&notExpr{
								pos: position{line: 801, col: 49, offset: 27406},
								expr: &litMatcher{
									pos:        position{line: 801, col: 50, offset: 27407},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemTerm",
			pos:  position{line: 802, col: 1, offset: 27411},
			expr: &actionExpr{
				pos: position{line: 802, col: 32, offset: 27442},
				run: (*parser).callonVerbatimLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 802, col: 32, offset: 27442},
					label: "content",
					expr: &actionExpr{
						pos: position{line: 802, col: 42, offset: 27452},
						run: (*parser).callonVerbatimLabeledListItemTerm3,
						expr: &oneOrMoreExpr{
							pos: position{line: 802, col: 42, offset: 27452},
							expr: &ruleRefExpr{
								pos:  position{line: 802, col: 42, offset: 27452},
								name: "VerbatimLabeledListItemChars",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 808, col: 1, offset: 27607},
			expr: &actionExpr{
				pos: position{line: 808, col: 24, offset: 27630},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 808, col: 24, offset: 27630},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 808, col: 33, offset: 27639},
						expr: &seqExpr{
							pos: position{line: 808, col: 34, offset: 27640},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 808, col: 34, offset: 27640},
									expr: &ruleRefExpr{
										pos:  position{line: 808, col: 35, offset: 27641},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 808, col: 43, offset: 27649},
									expr: &litMatcher{
										pos:        position{line: 808, col: 44, offset: 27650},
										val:        "::",
										ignoreCase: false,
										want:       "\"::\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 808, col: 49, offset: 27655},
									name: "LabeledListItemTermElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTermElement",
			pos:  position{line: 812, col: 1, offset: 27782},
			expr: &actionExpr{
				pos: position{line: 812, col: 31, offset: 27812},
				run: (*parser).callonLabeledListItemTermElement1,
				expr: &labeledExpr{
					pos:   position{line: 812, col: 31, offset: 27812},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 812, col: 40, offset: 27821},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 812, col: 40, offset: 27821},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 813, col: 11, offset: 27836},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 814, col: 11, offset: 27885},
								expr: &ruleRefExpr{
									pos:  position{line: 814, col: 11, offset: 27885},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 815, col: 11, offset: 27903},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 816, col: 11, offset: 27928},
								name: "ConcealedIndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 817, col: 11, offset: 27957},
								name: "IndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 818, col: 11, offset: 27977},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 819, col: 11, offset: 28066},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 820, col: 11, offset: 28087},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 821, col: 11, offset: 28110},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 822, col: 11, offset: 28125},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 823, col: 11, offset: 28150},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 824, col: 11, offset: 28173},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 825, col: 11, offset: 28194},
								name: "SpecialCharacter",
							},
							&ruleRefExpr{
								pos:  position{line: 826, col: 11, offset: 28221},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 827, col: 11, offset: 28238},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 828, col: 11, offset: 28270},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 832, col: 1, offset: 28309},
			expr: &actionExpr{
				pos: position{line: 833, col: 5, offset: 28342},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 833, col: 5, offset: 28342},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 833, col: 5, offset: 28342},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 833, col: 16, offset: 28353},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 833, col: 16, offset: 28353},
									expr: &litMatcher{
										pos:        position{line: 833, col: 17, offset: 28354},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 836, col: 5, offset: 28412},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 840, col: 6, offset: 28588},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 840, col: 6, offset: 28588},
									expr: &choiceExpr{
										pos: position{line: 840, col: 7, offset: 28589},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 840, col: 7, offset: 28589},
												name: "Space",
											},
											&ruleRefExpr{
												pos:  position{line: 840, col: 15, offset: 28597},
												name: "Newline",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 840, col: 27, offset: 28609},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 844, col: 1, offset: 28649},
			expr: &actionExpr{
				pos: position{line: 844, col: 31, offset: 28679},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 844, col: 31, offset: 28679},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 844, col: 40, offset: 28688},
						expr: &ruleRefExpr{
							pos:  position{line: 844, col: 41, offset: 28689},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 851, col: 1, offset: 28880},
			expr: &choiceExpr{
				pos: position{line: 851, col: 19, offset: 28898},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 851, col: 19, offset: 28898},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 851, col: 19, offset: 28898},
							val:        "TIP",
							ignoreCase: false,
							want:       "\"TIP\"",
						},
					},
					&actionExpr{
						pos: position{line: 853, col: 9, offset: 28944},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 853, col: 9, offset: 28944},
							val:        "NOTE",
							ignoreCase: false,
							want:       "\"NOTE\"",
						},
					},
					&actionExpr{
						pos: position{line: 855, col: 9, offset: 28992},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 855, col: 9, offset: 28992},
							val:        "IMPORTANT",
							ignoreCase: false,
							want:       "\"IMPORTANT\"",
						},
					},
					&actionExpr{
						pos: position{line: 857, col: 9, offset: 29050},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 857, col: 9, offset: 29050},
							val:        "WARNING",
							ignoreCase: false,
							want:       "\"WARNING\"",
						},
					},
					&actionExpr{
						pos: position{line: 859, col: 9, offset: 29104},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 859, col: 9, offset: 29104},
							val:        "CAUTION",
							ignoreCase: false,
							want:       "\"CAUTION\"",
						},
					},
				},
			},
		},
		{
			name: "RawParagraph",
			pos:  position{line: 870, col: 1, offset: 29420},
			expr: &choiceExpr{
				pos: position{line: 872, col: 5, offset: 29470},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 872, col: 5, offset: 29470},
						run: (*parser).callonRawParagraph2,
						expr: &seqExpr{
							pos: position{line: 872, col: 5, offset: 29470},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 872, col: 5, offset: 29470},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 872, col: 16, offset: 29481},
										expr: &ruleRefExpr{
											pos:  position{line: 872, col: 17, offset: 29482},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 872, col: 30, offset: 29495},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 872, col: 33, offset: 29498},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 872, col: 49, offset: 29514},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 872, col: 54, offset: 29519},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 872, col: 60, offset: 29525},
										expr: &choiceExpr{
											pos: position{line: 872, col: 61, offset: 29526},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 872, col: 61, offset: 29526},
													name: "SingleLineComment",
												},
												&ruleRefExpr{
													pos:  position{line: 872, col: 81, offset: 29546},
													name: "RawParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 876, col: 5, offset: 29729},
						run: (*parser).callonRawParagraph15,
						expr: &seqExpr{
							pos: position{line: 876, col: 5, offset: 29729},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 876, col: 5, offset: 29729},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 876, col: 16, offset: 29740},
										expr: &ruleRefExpr{
											pos:  position{line: 876, col: 17, offset: 29741},
											name: "Attributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 876, col: 30, offset: 29754},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
								&labeledExpr{
									pos:   position{line: 876, col: 35, offset: 29759},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 876, col: 44, offset: 29768},
										name: "MarkdownQuoteBlockRawContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 880, col: 5, offset: 29958},
						run: (*parser).callonRawParagraph23,
						expr: &seqExpr{
							pos: position{line: 880, col: 5, offset: 29958},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 880, col: 5, offset: 29958},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 880, col: 16, offset: 29969},
										expr: &ruleRefExpr{
											pos:  position{line: 880, col: 17, offset: 29970},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 880, col: 30, offset: 29983},
									run: (*parser).callonRawParagraph28,
								},
								&notExpr{
									pos: position{line: 887, col: 7, offset: 30262},
									expr: &ruleRefExpr{
										pos:  position{line: 887, col: 8, offset: 30263},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 887, col: 23, offset: 30278},
									label: "content",
									expr: &oneOrMoreExpr{
										pos: position{line: 887, col: 31, offset: 30286},
										expr: &ruleRefExpr{
											pos:  position{line: 887, col: 32, offset: 30287},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 891, col: 5, offset: 30470},
						run: (*parser).callonRawParagraph34,
						expr: &seqExpr{
							pos: position{line: 891, col: 5, offset: 30470},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 891, col: 5, offset: 30470},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 891, col: 16, offset: 30481},
										expr: &ruleRefExpr{
											pos:  position{line: 891, col: 17, offset: 30482},
											name: "Attributes",
										},
									},
								},
								&notExpr{
									pos: position{line: 891, col: 30, offset: 30495},
									expr: &ruleRefExpr{
										pos:  position{line: 891, col: 31, offset: 30496},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 891, col: 46, offset: 30511},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 891, col: 52, offset: 30517},
										expr: &choiceExpr{
											pos: position{line: 891, col: 53, offset: 30518},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 891, col: 53, offset: 30518},
													name: "SingleLineComment",
												},
												&ruleRefExpr{
													pos:  position{line: 891, col: 73, offset: 30538},
													name: "RawParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockRawContent",
			pos:  position{line: 895, col: 1, offset: 30636},
			expr: &oneOrMoreExpr{
				pos: position{line: 895, col: 33, offset: 30668},
				expr: &actionExpr{
					pos: position{line: 895, col: 34, offset: 30669},
					run: (*parser).callonMarkdownQuoteBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 895, col: 34, offset: 30669},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 895, col: 34, offset: 30669},
								expr: &ruleRefExpr{
									pos:  position{line: 895, col: 35, offset: 30670},
									name: "BlankLine",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 895, col: 45, offset: 30680},
								expr: &litMatcher{
									pos:        position{line: 895, col: 45, offset: 30680},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
							},
							&labeledExpr{
								pos:   position{line: 895, col: 51, offset: 30686},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 895, col: 60, offset: 30695},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawParagraphLine",
			pos:  position{line: 899, col: 1, offset: 30828},
			expr: &actionExpr{
				pos: position{line: 900, col: 5, offset: 30853},
				run: (*parser).callonRawParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 900, col: 5, offset: 30853},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 900, col: 5, offset: 30853},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 900, col: 14, offset: 30862},
								name: "RawParagraphLineContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 900, col: 39, offset: 30887},
							name: "EOL",
						},
						&andCodeExpr{
							pos: position{line: 900, col: 43, offset: 30891},
							run: (*parser).callonRawParagraphLine6,
						},
					},
				},
			},
		},
		{
			name: "RawParagraphLineContent",
			pos:  position{line: 910, col: 1, offset: 31126},
			expr: &actionExpr{
				pos: position{line: 910, col: 28, offset: 31153},
				run: (*parser).callonRawParagraphLineContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 910, col: 28, offset: 31153},
					expr: &charClassMatcher{
						pos:        position{line: 910, col: 28, offset: 31153},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SimpleRawParagraph",
			pos:  position{line: 915, col: 1, offset: 31270},
			expr: &actionExpr{
				pos: position{line: 915, col: 23, offset: 31292},
				run: (*parser).callonSimpleRawParagraph1,
				expr: &seqExpr{
					pos: position{line: 915, col: 23, offset: 31292},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 915, col: 23, offset: 31292},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 915, col: 34, offset: 31303},
								expr: &ruleRefExpr{
									pos:  position{line: 915, col: 35, offset: 31304},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 916, col: 5, offset: 31322},
							run: (*parser).callonSimpleRawParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 924, col: 5, offset: 31608},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 924, col: 16, offset: 31619},
								name: "FirstParagraphRawLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 925, col: 5, offset: 31645},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 925, col: 16, offset: 31656},
								expr: &choiceExpr{
									pos: position{line: 925, col: 17, offset: 31657},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 925, col: 17, offset: 31657},
											name: "SingleLineComment",
										},
										&ruleRefExpr{
											pos:  position{line: 925, col: 37, offset: 31677},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphRawLine",
			pos:  position{line: 929, col: 1, offset: 31809},
			expr: &actionExpr{
				pos: position{line: 930, col: 5, offset: 31839},
				run: (*parser).callonFirstParagraphRawLine1,
				expr: &seqExpr{
					pos: position{line: 930, col: 5, offset: 31839},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 930, col: 5, offset: 31839},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 930, col: 14, offset: 31848},
								run: (*parser).callonFirstParagraphRawLine4,
								expr: &seqExpr{
									pos: position{line: 930, col: 14, offset: 31848},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 930, col: 14, offset: 31848},
											label: "elements",
											expr: &ruleRefExpr{
												pos:  position{line: 930, col: 23, offset: 31857},
												name: "Word",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 930, col: 28, offset: 31862},
											expr: &charClassMatcher{
												pos:        position{line: 930, col: 28, offset: 31862},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 930, col: 68, offset: 31902},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 936, col: 1, offset: 32110},
			expr: &choiceExpr{
				pos: position{line: 938, col: 5, offset: 32157},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 938, col: 5, offset: 32157},
						run: (*parser).callonParagraph2,
						expr: &seqExpr{
							pos: position{line: 938, col: 5, offset: 32157},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 938, col: 5, offset: 32157},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 938, col: 16, offset: 32168},
										expr: &ruleRefExpr{
											pos:  position{line: 938, col: 17, offset: 32169},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 938, col: 30, offset: 32182},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 938, col: 33, offset: 32185},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 938, col: 49, offset: 32201},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 938, col: 54, offset: 32206},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 938, col: 60, offset: 32212},
										expr: &ruleRefExpr{
											pos:  position{line: 938, col: 61, offset: 32213},
											name: "ParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 942, col: 5, offset: 32399},
						run: (*parser).callonParagraph13,
						expr: &seqExpr{
							pos: position{line: 942, col: 5, offset: 32399},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 942, col: 5, offset: 32399},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 942, col: 16, offset: 32410},
										expr: &ruleRefExpr{
											pos:  position{line: 942, col: 17, offset: 32411},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 942, col: 30, offset: 32424},
									run: (*parser).callonParagraph18,
								},
								&notExpr{
									pos: position{line: 949, col: 7, offset: 32703},
									expr: &ruleRefExpr{
										pos:  position{line: 949, col: 8, offset: 32704},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 949, col: 23, offset: 32719},
									label: "content",
									expr: &oneOrMoreExpr{
										pos: position{line: 949, col: 31, offset: 32727},
										expr: &ruleRefExpr{
											pos:  position{line: 949, col: 32, offset: 32728},
											name: "ParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 953, col: 5, offset: 32908},
						run: (*parser).callonParagraph24,
						expr: &seqExpr{
							pos: position{line: 953, col: 5, offset: 32908},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 953, col: 5, offset: 32908},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 953, col: 16, offset: 32919},
										expr: &ruleRefExpr{
											pos:  position{line: 953, col: 17, offset: 32920},
											name: "Attributes",
										},
									},
								},
								&notExpr{
									pos: position{line: 953, col: 30, offset: 32933},
									expr: &ruleRefExpr{
										pos:  position{line: 953, col: 31, offset: 32934},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 953, col: 46, offset: 32949},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 953, col: 52, offset: 32955},
										expr: &ruleRefExpr{
											pos:  position{line: 953, col: 53, offset: 32956},
											name: "ParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphLine",
			pos:  position{line: 957, col: 1, offset: 33051},
			expr: &ruleRefExpr{
				pos:  position{line: 957, col: 18, offset: 33068},
				name: "InlineElements",
			},
		},
		{
			name: "ContinuedRawParagraph",
			pos:  position{line: 964, col: 1, offset: 33278},
			expr: &choiceExpr{
				pos: position{line: 966, col: 5, offset: 33337},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 966, col: 5, offset: 33337},
						run: (*parser).callonContinuedRawParagraph2,
						expr: &seqExpr{
							pos: position{line: 966, col: 5, offset: 33337},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 966, col: 5, offset: 33337},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 966, col: 16, offset: 33348},
										expr: &ruleRefExpr{
											pos:  position{line: 966, col: 17, offset: 33349},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 966, col: 30, offset: 33362},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 966, col: 33, offset: 33365},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 966, col: 49, offset: 33381},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 966, col: 54, offset: 33386},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 966, col: 61, offset: 33393},
										name: "ContinuedRawParagraphLines",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 970, col: 5, offset: 33596},
						run: (*parser).callonContinuedRawParagraph12,
						expr: &seqExpr{
							pos: position{line: 970, col: 5, offset: 33596},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 970, col: 5, offset: 33596},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 970, col: 16, offset: 33607},
										expr: &ruleRefExpr{
											pos:  position{line: 970, col: 17, offset: 33608},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 970, col: 30, offset: 33621},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 970, col: 37, offset: 33628},
										name: "ContinuedRawParagraphLines",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedRawParagraphLines",
			pos:  position{line: 974, col: 1, offset: 33732},
			expr: &actionExpr{
				pos: position{line: 974, col: 31, offset: 33762},
				run: (*parser).callonContinuedRawParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 974, col: 31, offset: 33762},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 974, col: 31, offset: 33762},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 974, col: 42, offset: 33773},
								name: "FirstParagraphRawLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 974, col: 65, offset: 33796},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 974, col: 76, offset: 33807},
								expr: &actionExpr{
									pos: position{line: 974, col: 77, offset: 33808},
									run: (*parser).callonContinuedRawParagraphLines7,
									expr: &seqExpr{
										pos: position{line: 974, col: 77, offset: 33808},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 974, col: 77, offset: 33808},
												expr: &ruleRefExpr{
													pos:  position{line: 974, col: 78, offset: 33809},
													name: "ListItemContinuation",
												},
											},
											&labeledExpr{
												pos:   position{line: 974, col: 99, offset: 33830},
												label: "line",
												expr: &choiceExpr{
													pos: position{line: 974, col: 105, offset: 33836},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 974, col: 105, offset: 33836},
															name: "SingleLineComment",
														},
														&ruleRefExpr{
															pos:  position{line: 974, col: 125, offset: 33856},
															name: "RawParagraphLine",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawVerseParagraph",
			pos:  position{line: 982, col: 1, offset: 34095},
			expr: &actionExpr{
				pos: position{line: 983, col: 5, offset: 34121},
				run: (*parser).callonRawVerseParagraph1,
				expr: &seqExpr{
					pos: position{line: 983, col: 5, offset: 34121},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 983, col: 5, offset: 34121},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 983, col: 16, offset: 34132},
								expr: &ruleRefExpr{
									pos:  position{line: 983, col: 17, offset: 34133},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 984, col: 5, offset: 34150},
							run: (*parser).callonRawVerseParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 991, col: 5, offset: 34355},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 991, col: 11, offset: 34361},
								expr: &ruleRefExpr{
									pos:  position{line: 991, col: 12, offset: 34362},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 999, col: 1, offset: 34568},
			expr: &actionExpr{
				pos: position{line: 999, col: 19, offset: 34586},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 999, col: 19, offset: 34586},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 999, col: 19, offset: 34586},
							expr: &ruleRefExpr{
								pos:  position{line: 999, col: 20, offset: 34587},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1000, col: 5, offset: 34601},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 1000, col: 15, offset: 34611},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1000, col: 15, offset: 34611},
										run: (*parser).callonInlineElements7,
										expr: &labeledExpr{
											pos:   position{line: 1000, col: 15, offset: 34611},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 1000, col: 24, offset: 34620},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 1002, col: 9, offset: 34712},
										run: (*parser).callonInlineElements10,
										expr: &seqExpr{
											pos: position{line: 1002, col: 9, offset: 34712},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1002, col: 9, offset: 34712},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 1002, col: 18, offset: 34721},
														expr: &ruleRefExpr{
															pos:  position{line: 1002, col: 19, offset: 34722},
															name: "InlineElement",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 1002, col: 35, offset: 34738},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 1008, col: 1, offset: 34855},
			expr: &actionExpr{
				pos: position{line: 1009, col: 5, offset: 34878},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 1009, col: 5, offset: 34878},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1009, col: 14, offset: 34887},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1009, col: 14, offset: 34887},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 1010, col: 11, offset: 34948},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 1011, col: 11, offset: 34993},
								expr: &ruleRefExpr{
									pos:  position{line: 1011, col: 11, offset: 34993},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 1012, col: 11, offset: 35011},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1012, col: 11, offset: 35011},
										expr: &ruleRefExpr{
											pos:  position{line: 1012, col: 12, offset: 35012},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 1013, col: 13, offset: 35030},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1013, col: 13, offset: 35030},
												name: "QuotedString",
											},
											&ruleRefExpr{
												pos:  position{line: 1014, col: 15, offset: 35057},
												name: "QuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 1015, col: 15, offset: 35082},
												name: "InlineIcon",
											},
											&ruleRefExpr{
												pos:  position{line: 1016, col: 15, offset: 35107},
												name: "InlineImage",
											},
											&ruleRefExpr{
												pos:  position{line: 1017, col: 15, offset: 35134},
												name: "Link",
											},
											&ruleRefExpr{
												pos:  position{line: 1018, col: 15, offset: 35154},
												name: "InlinePassthrough",
											},
											&ruleRefExpr{
												pos:  position{line: 1019, col: 15, offset: 35247},
												name: "InlineFootnote",
											},
											&ruleRefExpr{
												pos:  position{line: 1020, col: 15, offset: 35277},
												name: "CrossReference",
											},
											&ruleRefExpr{
												pos:  position{line: 1021, col: 15, offset: 35345},
												name: "SpecialCharacter",
											},
											&ruleRefExpr{
												pos:  position{line: 1022, col: 15, offset: 35376},
												name: "Symbol",
											},
											&ruleRefExpr{
												pos:  position{line: 1023, col: 15, offset: 35397},
												name: "InlineUserMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 1024, col: 15, offset: 35428},
												name: "AttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 1025, col: 15, offset: 35465},
												name: "InlineElementID",
											},
											&ruleRefExpr{
												pos:  position{line: 1026, col: 15, offset: 35495},
												name: "ConcealedIndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 1027, col: 15, offset: 35528},
												name: "IndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 1028, col: 15, offset: 35552},
												name: "ElementPlaceHolder",
											},
											&ruleRefExpr{
												pos:  position{line: 1029, col: 15, offset: 35585},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 1036, col: 1, offset: 35808},
			expr: &actionExpr{
				pos: position{line: 1036, col: 14, offset: 35821},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 1036, col: 14, offset: 35821},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1036, col: 14, offset: 35821},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 1036, col: 20, offset: 35827},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1036, col: 24, offset: 35831},
							expr: &ruleRefExpr{
								pos:  position{line: 1036, col: 24, offset: 35831},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1036, col: 31, offset: 35838},
							expr: &ruleRefExpr{
								pos:  position{line: 1036, col: 32, offset: 35839},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 1043, col: 1, offset: 36123},
			expr: &choiceExpr{
				pos: position{line: 1043, col: 15, offset: 36137},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1043, col: 15, offset: 36137},
						name: "UnconstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1043, col: 41, offset: 36163},
						name: "ConstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1043, col: 65, offset: 36187},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 1045, col: 1, offset: 36206},
			expr: &choiceExpr{
				pos: position{line: 1045, col: 32, offset: 36237},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1045, col: 32, offset: 36237},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1045, col: 32, offset: 36237},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 1045, col: 36, offset: 36241},
								expr: &litMatcher{
									pos:        position{line: 1045, col: 37, offset: 36242},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1045, col: 43, offset: 36248},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1045, col: 43, offset: 36248},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 1045, col: 47, offset: 36252},
								expr: &litMatcher{
									pos:        position{line: 1045, col: 48, offset: 36253},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1045, col: 54, offset: 36259},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1045, col: 54, offset: 36259},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
							&notExpr{
								pos: position{line: 1045, col: 58, offset: 36263},
								expr: &litMatcher{
									pos:        position{line: 1045, col: 59, offset: 36264},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1045, col: 65, offset: 36270},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1045, col: 65, offset: 36270},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 1045, col: 69, offset: 36274},
								expr: &litMatcher{
									pos:        position{line: 1045, col: 70, offset: 36275},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 1047, col: 1, offset: 36280},
			expr: &choiceExpr{
				pos: position{line: 1047, col: 34, offset: 36313},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1047, col: 34, offset: 36313},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 1047, col: 41, offset: 36320},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 1047, col: 48, offset: 36327},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 1047, col: 55, offset: 36334},
						val:        "##",
						ignoreCase: false,
						want:       "\"##\"",
					},
					&litMatcher{
						pos:        position{line: 1047, col: 62, offset: 36341},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 1047, col: 68, offset: 36347},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 1049, col: 1, offset: 36352},
			expr: &actionExpr{
				pos: position{line: 1049, col: 26, offset: 36377},
				run: (*parser).callonConstrainedQuotedText1,
				expr: &labeledExpr{
					pos:   position{line: 1049, col: 26, offset: 36377},
					label: "text",
					expr: &choiceExpr{
						pos: position{line: 1049, col: 32, offset: 36383},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1049, col: 32, offset: 36383},
								name: "SingleQuoteBoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1050, col: 15, offset: 36418},
								name: "SingleQuoteItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1051, col: 15, offset: 36454},
								name: "SingleQuoteMarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1052, col: 15, offset: 36490},
								name: "SingleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 1053, col: 15, offset: 36530},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1054, col: 15, offset: 36559},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1055, col: 15, offset: 36590},
								name: "SubscriptOrSuperscriptPrefix",
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 1059, col: 1, offset: 36744},
			expr: &choiceExpr{
				pos: position{line: 1059, col: 28, offset: 36771},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1059, col: 28, offset: 36771},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1060, col: 15, offset: 36805},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1061, col: 15, offset: 36841},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1062, col: 15, offset: 36877},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 1064, col: 1, offset: 36903},
			expr: &choiceExpr{
				pos: position{line: 1064, col: 22, offset: 36924},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1064, col: 22, offset: 36924},
						name: "EscapedBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1065, col: 15, offset: 36955},
						name: "EscapedItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1066, col: 15, offset: 36987},
						name: "EscapedMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1067, col: 15, offset: 37019},
						name: "EscapedMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1068, col: 15, offset: 37055},
						name: "EscapedSubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1069, col: 15, offset: 37091},
						name: "EscapedSuperscriptText",
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 1071, col: 1, offset: 37115},
			expr: &choiceExpr{
				pos: position{line: 1071, col: 33, offset: 37147},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1071, col: 33, offset: 37147},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 1071, col: 39, offset: 37153},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 1071, col: 39, offset: 37153},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 1075, col: 1, offset: 37286},
			expr: &actionExpr{
				pos: position{line: 1075, col: 25, offset: 37310},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1075, col: 25, offset: 37310},
					expr: &litMatcher{
						pos:        position{line: 1075, col: 25, offset: 37310},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 1079, col: 1, offset: 37351},
			expr: &actionExpr{
				pos: position{line: 1079, col: 25, offset: 37375},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 1079, col: 25, offset: 37375},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1079, col: 25, offset: 37375},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1079, col: 30, offset: 37380},
							expr: &litMatcher{
								pos:        position{line: 1079, col: 30, offset: 37380},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 1087, col: 1, offset: 37477},
			expr: &choiceExpr{
				pos: position{line: 1087, col: 13, offset: 37489},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1087, col: 13, offset: 37489},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1087, col: 35, offset: 37511},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1089, col: 1, offset: 37578},
			expr: &actionExpr{
				pos: position{line: 1089, col: 24, offset: 37601},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1089, col: 24, offset: 37601},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1089, col: 24, offset: 37601},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1089, col: 30, offset: 37607},
								expr: &ruleRefExpr{
									pos:  position{line: 1089, col: 31, offset: 37608},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1089, col: 49, offset: 37626},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 1089, col: 54, offset: 37631},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1089, col: 64, offset: 37641},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1089, col: 93, offset: 37670},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1093, col: 1, offset: 37757},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1093, col: 32, offset: 37788},
				expr: &ruleRefExpr{
					pos:  position{line: 1093, col: 32, offset: 37788},
					name: "DoubleQuoteBoldTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1095, col: 1, offset: 37819},
			expr: &actionExpr{
				pos: position{line: 1095, col: 31, offset: 37849},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 1095, col: 31, offset: 37849},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1095, col: 31, offset: 37849},
							expr: &litMatcher{
								pos:        position{line: 1095, col: 33, offset: 37851},
								val:        "**",
								ignoreCase: false,
								want:       "\"**\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1095, col: 39, offset: 37857},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1095, col: 48, offset: 37866},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1095, col: 48, offset: 37866},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1096, col: 11, offset: 37881},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1097, col: 11, offset: 37930},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1097, col: 11, offset: 37930},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1097, col: 19, offset: 37938},
												expr: &ruleRefExpr{
													pos:  position{line: 1097, col: 20, offset: 37939},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1098, col: 11, offset: 37957},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1099, col: 11, offset: 37987},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1100, col: 11, offset: 38010},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1101, col: 11, offset: 38031},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1102, col: 11, offset: 38052},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1103, col: 11, offset: 38076},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1104, col: 11, offset: 38100},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1105, col: 11, offset: 38126},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1106, col: 11, offset: 38155},
										name: "DoubleQuoteBoldTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1110, col: 1, offset: 38222},
			expr: &choiceExpr{
				pos: position{line: 1111, col: 5, offset: 38266},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1111, col: 5, offset: 38266},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1112, col: 7, offset: 38363},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1112, col: 7, offset: 38363},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1112, col: 7, offset: 38363},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1112, col: 12, offset: 38368},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1116, col: 1, offset: 38531},
			expr: &choiceExpr{
				pos: position{line: 1116, col: 24, offset: 38554},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1116, col: 24, offset: 38554},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 1116, col: 24, offset: 38554},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1116, col: 24, offset: 38554},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1116, col: 30, offset: 38560},
										expr: &ruleRefExpr{
											pos:  position{line: 1116, col: 31, offset: 38561},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1116, col: 51, offset: 38581},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1116, col: 51, offset: 38581},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1116, col: 55, offset: 38585},
											expr: &litMatcher{
												pos:        position{line: 1116, col: 56, offset: 38586},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1116, col: 61, offset: 38591},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1116, col: 71, offset: 38601},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1116, col: 100, offset: 38630},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 1116, col: 104, offset: 38634},
									expr: &notExpr{
										pos: position{line: 1116, col: 106, offset: 38636},
										expr: &ruleRefExpr{
											pos:  position{line: 1116, col: 107, offset: 38637},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1118, col: 5, offset: 38831},
						run: (*parser).callonSingleQuoteBoldText17,
						expr: &seqExpr{
							pos: position{line: 1118, col: 5, offset: 38831},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1118, col: 5, offset: 38831},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1118, col: 11, offset: 38837},
										expr: &ruleRefExpr{
											pos:  position{line: 1118, col: 12, offset: 38838},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1118, col: 30, offset: 38856},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1118, col: 34, offset: 38860},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1118, col: 44, offset: 38870},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1118, col: 44, offset: 38870},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1118, col: 48, offset: 38874},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1118, col: 77, offset: 38903},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1122, col: 1, offset: 39109},
			expr: &seqExpr{
				pos: position{line: 1122, col: 32, offset: 39140},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1122, col: 32, offset: 39140},
						expr: &ruleRefExpr{
							pos:  position{line: 1122, col: 33, offset: 39141},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1122, col: 39, offset: 39147},
						expr: &ruleRefExpr{
							pos:  position{line: 1122, col: 39, offset: 39147},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1124, col: 1, offset: 39176},
			expr: &choiceExpr{
				pos: position{line: 1124, col: 31, offset: 39206},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1124, col: 31, offset: 39206},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1125, col: 11, offset: 39221},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1125, col: 11, offset: 39221},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1125, col: 19, offset: 39229},
								expr: &ruleRefExpr{
									pos:  position{line: 1125, col: 20, offset: 39230},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1126, col: 11, offset: 39248},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1127, col: 11, offset: 39278},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1128, col: 11, offset: 39301},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1128, col: 11, offset: 39301},
								expr: &ruleRefExpr{
									pos:  position{line: 1128, col: 11, offset: 39301},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1128, col: 18, offset: 39308},
								expr: &seqExpr{
									pos: position{line: 1128, col: 19, offset: 39309},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1128, col: 19, offset: 39309},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1128, col: 23, offset: 39313},
											expr: &litMatcher{
												pos:        position{line: 1128, col: 24, offset: 39314},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1129, col: 11, offset: 39330},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1130, col: 11, offset: 39351},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1131, col: 11, offset: 39372},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1132, col: 11, offset: 39396},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1133, col: 11, offset: 39420},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1134, col: 11, offset: 39446},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1135, col: 11, offset: 39475},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1137, col: 1, offset: 39513},
			expr: &choiceExpr{
				pos: position{line: 1138, col: 5, offset: 39557},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1138, col: 5, offset: 39557},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1139, col: 7, offset: 39654},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1139, col: 7, offset: 39654},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1139, col: 7, offset: 39654},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1139, col: 11, offset: 39658},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1143, col: 1, offset: 39821},
			expr: &choiceExpr{
				pos: position{line: 1144, col: 5, offset: 39845},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1144, col: 5, offset: 39845},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1144, col: 5, offset: 39845},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1144, col: 5, offset: 39845},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1144, col: 18, offset: 39858},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1144, col: 40, offset: 39880},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1144, col: 45, offset: 39885},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1144, col: 55, offset: 39895},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1144, col: 84, offset: 39924},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1146, col: 9, offset: 40081},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 1146, col: 9, offset: 40081},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1146, col: 9, offset: 40081},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1146, col: 22, offset: 40094},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1146, col: 44, offset: 40116},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1146, col: 49, offset: 40121},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1146, col: 59, offset: 40131},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1146, col: 88, offset: 40160},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1149, col: 9, offset: 40360},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 1149, col: 9, offset: 40360},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1149, col: 9, offset: 40360},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1149, col: 22, offset: 40373},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1149, col: 44, offset: 40395},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1149, col: 48, offset: 40399},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1149, col: 58, offset: 40409},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1149, col: 87, offset: 40438},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1157, col: 1, offset: 40646},
			expr: &choiceExpr{
				pos: position{line: 1157, col: 15, offset: 40660},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1157, col: 15, offset: 40660},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1157, col: 39, offset: 40684},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1159, col: 1, offset: 40707},
			expr: &actionExpr{
				pos: position{line: 1159, col: 26, offset: 40732},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1159, col: 26, offset: 40732},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1159, col: 26, offset: 40732},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1159, col: 32, offset: 40738},
								expr: &ruleRefExpr{
									pos:  position{line: 1159, col: 33, offset: 40739},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1159, col: 51, offset: 40757},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1159, col: 56, offset: 40762},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1159, col: 66, offset: 40772},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1159, col: 97, offset: 40803},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1163, col: 1, offset: 40937},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1163, col: 34, offset: 40970},
				expr: &ruleRefExpr{
					pos:  position{line: 1163, col: 34, offset: 40970},
					name: "DoubleQuoteItalicTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1165, col: 1, offset: 41002},
			expr: &actionExpr{
				pos: position{line: 1165, col: 33, offset: 41034},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 1165, col: 33, offset: 41034},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1165, col: 33, offset: 41034},
							expr: &litMatcher{
								pos:        position{line: 1165, col: 35, offset: 41036},
								val:        "__",
								ignoreCase: false,
								want:       "\"__\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1165, col: 41, offset: 41042},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1165, col: 50, offset: 41051},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1165, col: 50, offset: 41051},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1166, col: 11, offset: 41066},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1167, col: 11, offset: 41115},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1167, col: 11, offset: 41115},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1167, col: 19, offset: 41123},
												expr: &ruleRefExpr{
													pos:  position{line: 1167, col: 20, offset: 41124},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1168, col: 11, offset: 41142},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1169, col: 11, offset: 41174},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1170, col: 11, offset: 41197},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1171, col: 11, offset: 41216},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1172, col: 11, offset: 41237},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1173, col: 11, offset: 41261},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1174, col: 11, offset: 41285},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1175, col: 11, offset: 41311},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1176, col: 11, offset: 41340},
										name: "DoubleQuoteItalicTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1180, col: 1, offset: 41409},
			expr: &choiceExpr{
				pos: position{line: 1181, col: 5, offset: 41455},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1181, col: 5, offset: 41455},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1182, col: 7, offset: 41554},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1182, col: 7, offset: 41554},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1182, col: 7, offset: 41554},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1182, col: 12, offset: 41559},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1186, col: 1, offset: 41724},
			expr: &choiceExpr{
				pos: position{line: 1186, col: 26, offset: 41749},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1186, col: 26, offset: 41749},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1186, col: 26, offset: 41749},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1186, col: 26, offset: 41749},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1186, col: 32, offset: 41755},
										expr: &ruleRefExpr{
											pos:  position{line: 1186, col: 33, offset: 41756},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1186, col: 52, offset: 41775},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1186, col: 52, offset: 41775},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1186, col: 56, offset: 41779},
											expr: &litMatcher{
												pos:        position{line: 1186, col: 57, offset: 41780},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1186, col: 62, offset: 41785},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1186, col: 72, offset: 41795},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1186, col: 103, offset: 41826},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1188, col: 5, offset: 42016},
						run: (*parser).callonSingleQuoteItalicText14,
						expr: &seqExpr{
							pos: position{line: 1188, col: 5, offset: 42016},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1188, col: 5, offset: 42016},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1188, col: 11, offset: 42022},
										expr: &ruleRefExpr{
											pos:  position{line: 1188, col: 12, offset: 42023},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1188, col: 30, offset: 42041},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1188, col: 34, offset: 42045},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1188, col: 44, offset: 42055},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1188, col: 44, offset: 42055},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1188, col: 48, offset: 42059},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1188, col: 79, offset: 42090},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1192, col: 1, offset: 42300},
			expr: &seqExpr{
				pos: position{line: 1192, col: 34, offset: 42333},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1192, col: 34, offset: 42333},
						expr: &ruleRefExpr{
							pos:  position{line: 1192, col: 35, offset: 42334},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1192, col: 41, offset: 42340},
						expr: &ruleRefExpr{
							pos:  position{line: 1192, col: 41, offset: 42340},
							name: "SingleQuoteItalicTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1194, col: 1, offset: 42371},
			expr: &choiceExpr{
				pos: position{line: 1194, col: 33, offset: 42403},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1194, col: 33, offset: 42403},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1195, col: 11, offset: 42418},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1195, col: 11, offset: 42418},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1195, col: 19, offset: 42426},
								expr: &ruleRefExpr{
									pos:  position{line: 1195, col: 20, offset: 42427},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1196, col: 11, offset: 42445},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1197, col: 11, offset: 42477},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1198, col: 11, offset: 42500},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1198, col: 11, offset: 42500},
								expr: &ruleRefExpr{
									pos:  position{line: 1198, col: 11, offset: 42500},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1198, col: 18, offset: 42507},
								expr: &seqExpr{
									pos: position{line: 1198, col: 19, offset: 42508},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1198, col: 19, offset: 42508},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1198, col: 23, offset: 42512},
											expr: &litMatcher{
												pos:        position{line: 1198, col: 24, offset: 42513},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1199, col: 11, offset: 42529},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1200, col: 11, offset: 42548},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1201, col: 11, offset: 42569},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1202, col: 11, offset: 42593},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1203, col: 11, offset: 42617},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1204, col: 11, offset: 42643},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1205, col: 11, offset: 42672},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1207, col: 1, offset: 42712},
			expr: &choiceExpr{
				pos: position{line: 1208, col: 5, offset: 42758},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1208, col: 5, offset: 42758},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1209, col: 7, offset: 42857},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1209, col: 7, offset: 42857},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1209, col: 7, offset: 42857},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1209, col: 11, offset: 42861},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1213, col: 1, offset: 43027},
			expr: &choiceExpr{
				pos: position{line: 1214, col: 5, offset: 43053},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1214, col: 5, offset: 43053},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1214, col: 5, offset: 43053},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1214, col: 5, offset: 43053},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1214, col: 18, offset: 43066},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1214, col: 40, offset: 43088},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1214, col: 45, offset: 43093},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1214, col: 55, offset: 43103},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1214, col: 86, offset: 43134},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1216, col: 9, offset: 43291},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1216, col: 9, offset: 43291},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1216, col: 9, offset: 43291},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1216, col: 22, offset: 43304},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1216, col: 44, offset: 43326},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1216, col: 49, offset: 43331},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1216, col: 59, offset: 43341},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1216, col: 90, offset: 43372},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1219, col: 9, offset: 43572},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1219, col: 9, offset: 43572},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1219, col: 9, offset: 43572},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1219, col: 22, offset: 43585},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1219, col: 44, offset: 43607},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1219, col: 48, offset: 43611},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1219, col: 58, offset: 43621},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1219, col: 89, offset: 43652},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1226, col: 1, offset: 43862},
			expr: &choiceExpr{
				pos: position{line: 1226, col: 18, offset: 43879},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1226, col: 18, offset: 43879},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1226, col: 45, offset: 43906},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1228, col: 1, offset: 43932},
			expr: &actionExpr{
				pos: position{line: 1228, col: 29, offset: 43960},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1228, col: 29, offset: 43960},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1228, col: 29, offset: 43960},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1228, col: 35, offset: 43966},
								expr: &ruleRefExpr{
									pos:  position{line: 1228, col: 36, offset: 43967},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1228, col: 54, offset: 43985},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1228, col: 59, offset: 43990},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1228, col: 69, offset: 44000},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1228, col: 103, offset: 44034},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1232, col: 1, offset: 44171},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1232, col: 37, offset: 44207},
				expr: &ruleRefExpr{
					pos:  position{line: 1232, col: 37, offset: 44207},
					name: "DoubleQuoteMonospaceTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1234, col: 1, offset: 44274},
			expr: &actionExpr{
				pos: position{line: 1234, col: 36, offset: 44309},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 1234, col: 36, offset: 44309},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1234, col: 36, offset: 44309},
							expr: &litMatcher{
								pos:        position{line: 1234, col: 38, offset: 44311},
								val:        "``",
								ignoreCase: false,
								want:       "\"``\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1234, col: 44, offset: 44317},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1234, col: 53, offset: 44326},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1234, col: 53, offset: 44326},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1235, col: 11, offset: 44341},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1236, col: 11, offset: 44390},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1236, col: 11, offset: 44390},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1236, col: 19, offset: 44398},
												expr: &ruleRefExpr{
													pos:  position{line: 1236, col: 20, offset: 44399},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1237, col: 11, offset: 44417},
										name: "QuotedString",
									},
									&actionExpr{
										pos: position{line: 1238, col: 11, offset: 44440},
										run: (*parser).callonDoubleQuoteMonospaceTextElement14,
										expr: &ruleRefExpr{
											pos:  position{line: 1238, col: 11, offset: 44440},
											name: "Apostrophe",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1242, col: 11, offset: 44624},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1243, col: 11, offset: 44659},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1244, col: 11, offset: 44678},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1245, col: 11, offset: 44699},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1246, col: 11, offset: 44720},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1247, col: 11, offset: 44744},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1248, col: 11, offset: 44770},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1249, col: 11, offset: 44799},
										name: "DoubleQuoteMonospaceTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1253, col: 1, offset: 44871},
			expr: &choiceExpr{
				pos: position{line: 1254, col: 5, offset: 44920},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1254, col: 5, offset: 44920},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1255, col: 7, offset: 45022},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1255, col: 7, offset: 45022},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1255, col: 7, offset: 45022},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1255, col: 12, offset: 45027},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1259, col: 1, offset: 45195},
			expr: &choiceExpr{
				pos: position{line: 1259, col: 29, offset: 45223},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1259, col: 29, offset: 45223},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1259, col: 29, offset: 45223},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1259, col: 29, offset: 45223},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1259, col: 35, offset: 45229},
										expr: &ruleRefExpr{
											pos:  position{line: 1259, col: 36, offset: 45230},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1259, col: 55, offset: 45249},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1259, col: 55, offset: 45249},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1259, col: 59, offset: 45253},
											expr: &litMatcher{
												pos:        position{line: 1259, col: 60, offset: 45254},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1259, col: 65, offset: 45259},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1259, col: 75, offset: 45269},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1259, col: 109, offset: 45303},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1261, col: 5, offset: 45496},
						run: (*parser).callonSingleQuoteMonospaceText14,
						expr: &seqExpr{
							pos: position{line: 1261, col: 5, offset: 45496},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1261, col: 5, offset: 45496},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1261, col: 11, offset: 45502},
										expr: &ruleRefExpr{
											pos:  position{line: 1261, col: 12, offset: 45503},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1261, col: 30, offset: 45521},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1261, col: 34, offset: 45525},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1261, col: 44, offset: 45535},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1261, col: 44, offset: 45535},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1261, col: 48, offset: 45539},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1261, col: 82, offset: 45573},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1265, col: 1, offset: 45787},
			expr: &seqExpr{
				pos: position{line: 1265, col: 37, offset: 45823},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1265, col: 37, offset: 45823},
						expr: &ruleRefExpr{
							pos:  position{line: 1265, col: 38, offset: 45824},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1265, col: 44, offset: 45830},
						expr: &ruleRefExpr{
							pos:  position{line: 1265, col: 44, offset: 45830},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1267, col: 1, offset: 45864},
			expr: &choiceExpr{
				pos: position{line: 1267, col: 37, offset: 45900},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1267, col: 37, offset: 45900},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1268, col: 11, offset: 45915},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1268, col: 11, offset: 45915},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1268, col: 19, offset: 45923},
								expr: &ruleRefExpr{
									pos:  position{line: 1268, col: 20, offset: 45924},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1269, col: 11, offset: 45942},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1270, col: 11, offset: 45977},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1271, col: 11, offset: 46000},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1271, col: 11, offset: 46000},
								expr: &ruleRefExpr{
									pos:  position{line: 1271, col: 11, offset: 46000},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1271, col: 18, offset: 46007},
								expr: &seqExpr{
									pos: position{line: 1271, col: 19, offset: 46008},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1271, col: 19, offset: 46008},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1271, col: 23, offset: 46012},
											expr: &litMatcher{
												pos:        position{line: 1271, col: 24, offset: 46013},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1272, col: 11, offset: 46141},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1273, col: 11, offset: 46160},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1274, col: 11, offset: 46181},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1275, col: 11, offset: 46202},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1276, col: 11, offset: 46226},
						name: "SuperscriptText",
					},
					&actionExpr{
						pos: position{line: 1277, col: 11, offset: 46252},
						run: (*parser).callonSingleQuoteMonospaceTextElement22,
						expr: &ruleRefExpr{
							pos:  position{line: 1277, col: 11, offset: 46252},
							name: "Apostrophe",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1281, col: 11, offset: 46393},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1282, col: 11, offset: 46422},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1284, col: 1, offset: 46465},
			expr: &choiceExpr{
				pos: position{line: 1285, col: 5, offset: 46514},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1285, col: 5, offset: 46514},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1286, col: 7, offset: 46616},
						run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1286, col: 7, offset: 46616},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1286, col: 7, offset: 46616},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1286, col: 11, offset: 46620},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1290, col: 1, offset: 46789},
			expr: &choiceExpr{
				pos: position{line: 1291, col: 5, offset: 46818},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1291, col: 5, offset: 46818},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1291, col: 5, offset: 46818},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1291, col: 5, offset: 46818},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1291, col: 18, offset: 46831},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1291, col: 40, offset: 46853},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1291, col: 45, offset: 46858},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1291, col: 55, offset: 46868},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1291, col: 89, offset: 46902},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1293, col: 9, offset: 47059},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1293, col: 9, offset: 47059},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1293, col: 9, offset: 47059},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1293, col: 22, offset: 47072},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1293, col: 44, offset: 47094},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1293, col: 49, offset: 47099},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1293, col: 59, offset: 47109},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1293, col: 93, offset: 47143},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1296, col: 9, offset: 47343},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1296, col: 9, offset: 47343},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1296, col: 9, offset: 47343},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1296, col: 22, offset: 47356},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1296, col: 44, offset: 47378},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1296, col: 48, offset: 47382},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1296, col: 58, offset: 47392},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1296, col: 92, offset: 47426},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1304, col: 1, offset: 47751},
			expr: &choiceExpr{
				pos: position{line: 1304, col: 17, offset: 47767},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1304, col: 17, offset: 47767},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1304, col: 38, offset: 47788},
						name: "DoubleQuotedString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 1306, col: 1, offset: 47808},
			expr: &actionExpr{
				pos: position{line: 1306, col: 23, offset: 47830},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1306, col: 23, offset: 47830},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1306, col: 23, offset: 47830},
							name: "SingleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1306, col: 46, offset: 47853},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1306, col: 55, offset: 47862},
								name: "SingleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1306, col: 82, offset: 47889},
							name: "SingleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 1310, col: 1, offset: 47993},
			expr: &actionExpr{
				pos: position{line: 1310, col: 31, offset: 48023},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1310, col: 31, offset: 48023},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1310, col: 41, offset: 48033},
						expr: &ruleRefExpr{
							pos:  position{line: 1310, col: 41, offset: 48033},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringStart",
			pos:  position{line: 1314, col: 1, offset: 48111},
			expr: &seqExpr{
				pos: position{line: 1314, col: 27, offset: 48137},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1314, col: 27, offset: 48137},
						val:        "'`",
						ignoreCase: false,
						want:       "\"'`\"",
					},
					&notExpr{
						pos: position{line: 1314, col: 32, offset: 48142},
						expr: &charClassMatcher{
							pos:        position{line: 1314, col: 33, offset: 48143},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringEnd",
			pos:  position{line: 1316, col: 1, offset: 48154},
			expr: &litMatcher{
				pos:        position{line: 1316, col: 25, offset: 48178},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 1319, col: 1, offset: 48266},
			expr: &actionExpr{
				pos: position{line: 1319, col: 30, offset: 48295},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1319, col: 30, offset: 48295},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1320, col: 9, offset: 48313},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1320, col: 9, offset: 48313},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1320, col: 9, offset: 48313},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1320, col: 19, offset: 48323},
										expr: &ruleRefExpr{
											pos:  position{line: 1320, col: 20, offset: 48324},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1321, col: 11, offset: 48380},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1321, col: 11, offset: 48380},
										expr: &ruleRefExpr{
											pos:  position{line: 1321, col: 11, offset: 48380},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1321, col: 18, offset: 48387},
										expr: &ruleRefExpr{
											pos:  position{line: 1321, col: 19, offset: 48388},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1322, col: 11, offset: 48419},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1322, col: 11, offset: 48419},
										expr: &litMatcher{
											pos:        position{line: 1322, col: 12, offset: 48420},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1322, col: 16, offset: 48424},
										name: "Symbol",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1323, col: 11, offset: 48472},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1324, col: 11, offset: 48491},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1325, col: 11, offset: 48512},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1326, col: 11, offset: 48533},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1327, col: 11, offset: 48557},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 1328, col: 11, offset: 48583},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1328, col: 11, offset: 48583},
										expr: &litMatcher{
											pos:        position{line: 1328, col: 12, offset: 48584},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1328, col: 17, offset: 48589},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1329, col: 11, offset: 48613},
								name: "DoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1330, col: 11, offset: 48642},
								name: "SingleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringFallbackCharacter",
			pos:  position{line: 1334, col: 1, offset: 48708},
			expr: &choiceExpr{
				pos: position{line: 1334, col: 41, offset: 48748},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1334, col: 41, offset: 48748},
						val:        "[^\\r\\n\\t `]",
						chars:      []rune{'\r', '\n', '\t', ' ', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1334, col: 55, offset: 48762},
						run: (*parser).callonSingleQuotedStringFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1334, col: 55, offset: 48762},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1334, col: 55, offset: 48762},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1334, col: 59, offset: 48766},
									expr: &litMatcher{
										pos:        position{line: 1334, col: 60, offset: 48767},
										val:        "'",
										ignoreCase: false,
										want:       "\"'\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 1338, col: 1, offset: 48826},
			expr: &actionExpr{
				pos: position{line: 1338, col: 23, offset: 48848},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1338, col: 23, offset: 48848},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1338, col: 23, offset: 48848},
							name: "DoubleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1338, col: 46, offset: 48871},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1338, col: 55, offset: 48880},
								name: "DoubleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1338, col: 82, offset: 48907},
							name: "DoubleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 1342, col: 1, offset: 49011},
			expr: &actionExpr{
				pos: position{line: 1342, col: 31, offset: 49041},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1342, col: 31, offset: 49041},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1342, col: 41, offset: 49051},
						expr: &ruleRefExpr{
							pos:  position{line: 1342, col: 41, offset: 49051},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 1347, col: 1, offset: 49211},
			expr: &actionExpr{
				pos: position{line: 1347, col: 30, offset: 49240},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1347, col: 30, offset: 49240},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1348, col: 9, offset: 49258},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1348, col: 9, offset: 49258},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1348, col: 9, offset: 49258},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1348, col: 19, offset: 49268},
										expr: &ruleRefExpr{
											pos:  position{line: 1348, col: 20, offset: 49269},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1349, col: 11, offset: 49325},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1349, col: 11, offset: 49325},
										expr: &ruleRefExpr{
											pos:  position{line: 1349, col: 11, offset: 49325},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1349, col: 18, offset: 49332},
										expr: &ruleRefExpr{
											pos:  position{line: 1349, col: 19, offset: 49333},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1350, col: 11, offset: 49364},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1351, col: 11, offset: 49383},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1352, col: 11, offset: 49404},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1353, col: 11, offset: 49425},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1354, col: 11, offset: 49449},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 1355, col: 11, offset: 49475},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1355, col: 11, offset: 49475},
										expr: &litMatcher{
											pos:        position{line: 1355, col: 12, offset: 49476},
											val:        "`\"",
											ignoreCase: false,
											want:       "\"`\\\"\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1355, col: 18, offset: 49482},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1356, col: 10, offset: 49505},
								name: "SingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1357, col: 11, offset: 49534},
								name: "DoubleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringStart",
			pos:  position{line: 1361, col: 1, offset: 49608},
			expr: &seqExpr{
				pos: position{line: 1361, col: 27, offset: 49634},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1361, col: 27, offset: 49634},
						val:        "\"`",
						ignoreCase: false,
						want:       "\"\\\"`\"",
					},
					&notExpr{
						pos: position{line: 1361, col: 33, offset: 49640},
						expr: &charClassMatcher{
							pos:        position{line: 1361, col: 34, offset: 49641},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringEnd",
			pos:  position{line: 1363, col: 1, offset: 49652},
			expr: &litMatcher{
				pos:        position{line: 1363, col: 25, offset: 49676},
				val:        "`\"",
				ignoreCase: false,
				want:       "\"`\\\"\"",
			},
		},
		{
			name: "DoubleQuotedStringFallbackCharacter",
			pos:  position{line: 1365, col: 1, offset: 49683},
			expr: &actionExpr{
				pos: position{line: 1365, col: 41, offset: 49723},
				run: (*parser).callonDoubleQuotedStringFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 1365, col: 42, offset: 49724},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1365, col: 42, offset: 49724},
							val:        "[^\\r\\n\\t `]",
							chars:      []rune{'\r', '\n', '\t', ' ', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 1365, col: 56, offset: 49738},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1365, col: 56, offset: 49738},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1365, col: 60, offset: 49742},
									expr: &litMatcher{
										pos:        position{line: 1365, col: 61, offset: 49743},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1374, col: 1, offset: 49863},
			expr: &choiceExpr{
				pos: position{line: 1374, col: 15, offset: 49877},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1374, col: 15, offset: 49877},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1374, col: 39, offset: 49901},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 1376, col: 1, offset: 49924},
			expr: &actionExpr{
				pos: position{line: 1376, col: 26, offset: 49949},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1376, col: 26, offset: 49949},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1376, col: 26, offset: 49949},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1376, col: 32, offset: 49955},
								expr: &ruleRefExpr{
									pos:  position{line: 1376, col: 33, offset: 49956},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1376, col: 51, offset: 49974},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1376, col: 56, offset: 49979},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1376, col: 66, offset: 49989},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1376, col: 97, offset: 50020},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 1380, col: 1, offset: 50154},
			expr: &seqExpr{
				pos: position{line: 1380, col: 34, offset: 50187},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1380, col: 34, offset: 50187},
						name: "DoubleQuoteMarkedTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1380, col: 63, offset: 50216},
						expr: &seqExpr{
							pos: position{line: 1380, col: 64, offset: 50217},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1380, col: 64, offset: 50217},
									expr: &litMatcher{
										pos:        position{line: 1380, col: 66, offset: 50219},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1380, col: 73, offset: 50226},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1380, col: 73, offset: 50226},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1380, col: 81, offset: 50234},
											name: "DoubleQuoteMarkedTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 1382, col: 1, offset: 50301},
			expr: &choiceExpr{
				pos: position{line: 1382, col: 33, offset: 50333},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1382, col: 33, offset: 50333},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1383, col: 11, offset: 50348},
						name: "SingleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1384, col: 11, offset: 50380},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1384, col: 11, offset: 50380},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1384, col: 19, offset: 50388},
								expr: &ruleRefExpr{
									pos:  position{line: 1384, col: 20, offset: 50389},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1385, col: 11, offset: 50407},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1386, col: 11, offset: 50430},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1387, col: 11, offset: 50449},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1388, col: 11, offset: 50470},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1389, col: 11, offset: 50494},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1390, col: 11, offset: 50518},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1391, col: 11, offset: 50544},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1392, col: 11, offset: 50573},
						name: "DoubleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1394, col: 1, offset: 50613},
			expr: &choiceExpr{
				pos: position{line: 1395, col: 5, offset: 50659},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1395, col: 5, offset: 50659},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1396, col: 7, offset: 50758},
						run: (*parser).callonDoubleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1396, col: 7, offset: 50758},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1396, col: 7, offset: 50758},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1396, col: 12, offset: 50763},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 1400, col: 1, offset: 50928},
			expr: &choiceExpr{
				pos: position{line: 1400, col: 26, offset: 50953},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1400, col: 26, offset: 50953},
						run: (*parser).callonSingleQuoteMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1400, col: 26, offset: 50953},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1400, col: 26, offset: 50953},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1400, col: 32, offset: 50959},
										expr: &ruleRefExpr{
											pos:  position{line: 1400, col: 33, offset: 50960},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1400, col: 52, offset: 50979},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1400, col: 52, offset: 50979},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1400, col: 56, offset: 50983},
											expr: &litMatcher{
												pos:        position{line: 1400, col: 57, offset: 50984},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1400, col: 62, offset: 50989},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1400, col: 72, offset: 50999},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1400, col: 103, offset: 51030},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1402, col: 5, offset: 51220},
						run: (*parser).callonSingleQuoteMarkedText14,
						expr: &seqExpr{
							pos: position{line: 1402, col: 5, offset: 51220},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1402, col: 5, offset: 51220},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1402, col: 11, offset: 51226},
										expr: &ruleRefExpr{
											pos:  position{line: 1402, col: 12, offset: 51227},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1402, col: 30, offset: 51245},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1402, col: 34, offset: 51249},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1402, col: 44, offset: 51259},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1402, col: 44, offset: 51259},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1402, col: 48, offset: 51263},
												name: "SingleQuoteMarkedTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1402, col: 79, offset: 51294},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 1406, col: 1, offset: 51503},
			expr: &seqExpr{
				pos: position{line: 1406, col: 34, offset: 51536},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1406, col: 34, offset: 51536},
						expr: &ruleRefExpr{
							pos:  position{line: 1406, col: 35, offset: 51537},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1406, col: 41, offset: 51543},
						expr: &ruleRefExpr{
							pos:  position{line: 1406, col: 41, offset: 51543},
							name: "SingleQuoteMarkedTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 1408, col: 1, offset: 51574},
			expr: &choiceExpr{
				pos: position{line: 1408, col: 33, offset: 51606},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1408, col: 33, offset: 51606},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1409, col: 11, offset: 51621},
						name: "DoubleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1410, col: 11, offset: 51653},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1410, col: 11, offset: 51653},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1410, col: 19, offset: 51661},
								expr: &ruleRefExpr{
									pos:  position{line: 1410, col: 20, offset: 51662},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1411, col: 11, offset: 51680},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1412, col: 11, offset: 51703},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1412, col: 11, offset: 51703},
								expr: &ruleRefExpr{
									pos:  position{line: 1412, col: 11, offset: 51703},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1412, col: 18, offset: 51710},
								expr: &seqExpr{
									pos: position{line: 1412, col: 19, offset: 51711},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1412, col: 19, offset: 51711},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1412, col: 23, offset: 51715},
											expr: &litMatcher{
												pos:        position{line: 1412, col: 24, offset: 51716},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1413, col: 11, offset: 51732},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1414, col: 11, offset: 51751},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1415, col: 11, offset: 51772},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1416, col: 11, offset: 51796},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1417, col: 11, offset: 51820},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1418, col: 11, offset: 51846},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1419, col: 11, offset: 51875},
						name: "SingleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1421, col: 1, offset: 51915},
			expr: &choiceExpr{
				pos: position{line: 1422, col: 5, offset: 51961},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1422, col: 5, offset: 51961},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1423, col: 7, offset: 52058},
						run: (*parser).callonSingleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1423, col: 7, offset: 52058},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1423, col: 7, offset: 52058},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1423, col: 11, offset: 52062},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 1427, col: 1, offset: 52225},
			expr: &choiceExpr{
				pos: position{line: 1428, col: 5, offset: 52250},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1428, col: 5, offset: 52250},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1428, col: 5, offset: 52250},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1428, col: 5, offset: 52250},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1428, col: 18, offset: 52263},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1428, col: 40, offset: 52285},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1428, col: 45, offset: 52290},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1428, col: 55, offset: 52300},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1428, col: 86, offset: 52331},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1430, col: 9, offset: 52488},
						run: (*parser).callonEscapedMarkedText10,
						expr: &seqExpr{
							pos: position{line: 1430, col: 9, offset: 52488},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1430, col: 9, offset: 52488},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1430, col: 22, offset: 52501},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1430, col: 44, offset: 52523},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1430, col: 49, offset: 52528},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1430, col: 59, offset: 52538},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1430, col: 90, offset: 52569},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1433, col: 9, offset: 52769},
						run: (*parser).callonEscapedMarkedText18,
						expr: &seqExpr{
							pos: position{line: 1433, col: 9, offset: 52769},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1433, col: 9, offset: 52769},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1433, col: 22, offset: 52782},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1433, col: 44, offset: 52804},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1433, col: 48, offset: 52808},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1433, col: 58, offset: 52818},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1433, col: 89, offset: 52849},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1438, col: 1, offset: 52999},
			expr: &actionExpr{
				pos: position{line: 1438, col: 18, offset: 53016},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1438, col: 18, offset: 53016},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1438, col: 18, offset: 53016},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1438, col: 24, offset: 53022},
								expr: &ruleRefExpr{
									pos:  position{line: 1438, col: 25, offset: 53023},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1438, col: 43, offset: 53041},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1438, col: 47, offset: 53045},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1438, col: 56, offset: 53054},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1438, col: 78, offset: 53076},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1442, col: 1, offset: 53172},
			expr: &choiceExpr{
				pos: position{line: 1442, col: 25, offset: 53196},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1442, col: 25, offset: 53196},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1442, col: 38, offset: 53209},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1444, col: 1, offset: 53228},
			expr: &actionExpr{
				pos: position{line: 1444, col: 21, offset: 53248},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1444, col: 21, offset: 53248},
					expr: &charClassMatcher{
						pos:        position{line: 1444, col: 21, offset: 53248},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1448, col: 1, offset: 53325},
			expr: &actionExpr{
				pos: position{line: 1448, col: 25, offset: 53349},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1448, col: 25, offset: 53349},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1448, col: 25, offset: 53349},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1448, col: 38, offset: 53362},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1448, col: 60, offset: 53384},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1448, col: 64, offset: 53388},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1448, col: 73, offset: 53397},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1448, col: 95, offset: 53419},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1452, col: 1, offset: 53548},
			expr: &actionExpr{
				pos: position{line: 1452, col: 20, offset: 53567},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1452, col: 20, offset: 53567},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1452, col: 20, offset: 53567},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1452, col: 26, offset: 53573},
								expr: &ruleRefExpr{
									pos:  position{line: 1452, col: 27, offset: 53574},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1452, col: 45, offset: 53592},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1452, col: 49, offset: 53596},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1452, col: 58, offset: 53605},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1452, col: 82, offset: 53629},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1456, col: 1, offset: 53727},
			expr: &choiceExpr{
				pos: position{line: 1456, col: 27, offset: 53753},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1456, col: 27, offset: 53753},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1456, col: 40, offset: 53766},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1458, col: 1, offset: 53787},
			expr: &actionExpr{
				pos: position{line: 1458, col: 23, offset: 53809},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1458, col: 23, offset: 53809},
					expr: &charClassMatcher{
						pos:        position{line: 1458, col: 23, offset: 53809},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1462, col: 1, offset: 53886},
			expr: &actionExpr{
				pos: position{line: 1462, col: 27, offset: 53912},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1462, col: 27, offset: 53912},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1462, col: 27, offset: 53912},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1462, col: 40, offset: 53925},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1462, col: 62, offset: 53947},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1462, col: 66, offset: 53951},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1462, col: 75, offset: 53960},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1462, col: 99, offset: 53984},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1469, col: 1, offset: 54226},
			expr: &choiceExpr{
				pos: position{line: 1469, col: 22, offset: 54247},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1469, col: 22, offset: 54247},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1469, col: 46, offset: 54271},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1469, col: 70, offset: 54295},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1471, col: 1, offset: 54313},
			expr: &litMatcher{
				pos:        position{line: 1471, col: 32, offset: 54344},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1473, col: 1, offset: 54349},
			expr: &actionExpr{
				pos: position{line: 1473, col: 26, offset: 54374},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1473, col: 26, offset: 54374},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1473, col: 26, offset: 54374},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1473, col: 54, offset: 54402},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1473, col: 63, offset: 54411},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1473, col: 93, offset: 54441},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1473, col: 121, offset: 54469},
							expr: &ruleRefExpr{
								pos:  position{line: 1473, col: 122, offset: 54470},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1477, col: 1, offset: 54575},
			expr: &choiceExpr{
				pos: position{line: 1477, col: 33, offset: 54607},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1477, col: 34, offset: 54608},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1477, col: 34, offset: 54608},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1477, col: 35, offset: 54609},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1477, col: 35, offset: 54609},
											expr: &ruleRefExpr{
												pos:  position{line: 1477, col: 36, offset: 54610},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1477, col: 64, offset: 54638},
											expr: &ruleRefExpr{
												pos:  position{line: 1477, col: 65, offset: 54639},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 1477, col: 71, offset: 54645},
											expr: &ruleRefExpr{
												pos:  position{line: 1477, col: 72, offset: 54646},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 1477, col: 80, offset: 54654,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1477, col: 83, offset: 54657},
									expr: &seqExpr{
										pos: position{line: 1477, col: 84, offset: 54658},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1477, col: 84, offset: 54658},
												expr: &seqExpr{
													pos: position{line: 1477, col: 86, offset: 54660},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1477, col: 86, offset: 54660},
															expr: &ruleRefExpr{
																pos:  position{line: 1477, col: 86, offset: 54660},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1477, col: 93, offset: 54667},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1477, col: 122, offset: 54696},
												expr: &ruleRefExpr{
													pos:  position{line: 1477, col: 123, offset: 54697},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1477, col: 151, offset: 54725},
												expr: &ruleRefExpr{
													pos:  position{line: 1477, col: 152, offset: 54726},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 1477, col: 160, offset: 54734,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1479, col: 7, offset: 54876},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1479, col: 8, offset: 54877},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1479, col: 8, offset: 54877},
									expr: &ruleRefExpr{
										pos:  position{line: 1479, col: 9, offset: 54878},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 1479, col: 15, offset: 54884},
									expr: &ruleRefExpr{
										pos:  position{line: 1479, col: 16, offset: 54885},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1479, col: 24, offset: 54893},
									expr: &ruleRefExpr{
										pos:  position{line: 1479, col: 25, offset: 54894},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1479, col: 53, offset: 54922,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1483, col: 1, offset: 55004},
			expr: &litMatcher{
				pos:        position{line: 1483, col: 32, offset: 55035},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1485, col: 1, offset: 55042},
			expr: &actionExpr{
				pos: position{line: 1485, col: 26, offset: 55067},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1485, col: 26, offset: 55067},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1485, col: 26, offset: 55067},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1485, col: 54, offset: 55095},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1485, col: 63, offset: 55104},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1485, col: 93, offset: 55134},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1485, col: 121, offset: 55162},
							expr: &ruleRefExpr{
								pos:  position{line: 1485, col: 122, offset: 55163},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1489, col: 1, offset: 55268},
			expr: &choiceExpr{
				pos: position{line: 1489, col: 33, offset: 55300},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1489, col: 34, offset: 55301},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1489, col: 34, offset: 55301},
							expr: &seqExpr{
								pos: position{line: 1489, col: 35, offset: 55302},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1489, col: 35, offset: 55302},
										expr: &ruleRefExpr{
											pos:  position{line: 1489, col: 36, offset: 55303},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1489, col: 64, offset: 55331,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1491, col: 7, offset: 55496},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1491, col: 7, offset: 55496},
							expr: &seqExpr{
								pos: position{line: 1491, col: 8, offset: 55497},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1491, col: 8, offset: 55497},
										expr: &ruleRefExpr{
											pos:  position{line: 1491, col: 9, offset: 55498},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1491, col: 15, offset: 55504},
										expr: &ruleRefExpr{
											pos:  position{line: 1491, col: 16, offset: 55505},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1491, col: 24, offset: 55513},
										expr: &ruleRefExpr{
											pos:  position{line: 1491, col: 25, offset: 55514},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1491, col: 53, offset: 55542,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1495, col: 1, offset: 55625},
			expr: &choiceExpr{
				pos: position{line: 1495, col: 21, offset: 55645},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1495, col: 21, offset: 55645},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1495, col: 21, offset: 55645},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1495, col: 21, offset: 55645},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1495, col: 30, offset: 55654},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1495, col: 38, offset: 55662},
										expr: &ruleRefExpr{
											pos:  position{line: 1495, col: 39, offset: 55663},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1495, col: 67, offset: 55691},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1497, col: 5, offset: 55787},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1497, col: 5, offset: 55787},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1497, col: 5, offset: 55787},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 1497, col: 15, offset: 55797},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1497, col: 23, offset: 55805},
										expr: &choiceExpr{
											pos: position{line: 1497, col: 24, offset: 55806},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1497, col: 24, offset: 55806},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1497, col: 37, offset: 55819},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1497, col: 65, offset: 55847},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1501, col: 1, offset: 55943},
			expr: &actionExpr{
				pos: position{line: 1501, col: 30, offset: 55972},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 1501, col: 30, offset: 55972},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1508, col: 1, offset: 56145},
			expr: &choiceExpr{
				pos: position{line: 1508, col: 19, offset: 56163},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1508, col: 19, offset: 56163},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1508, col: 44, offset: 56188},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1510, col: 1, offset: 56213},
			expr: &choiceExpr{
				pos: position{line: 1510, col: 27, offset: 56239},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1510, col: 27, offset: 56239},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1510, col: 27, offset: 56239},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1510, col: 27, offset: 56239},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1510, col: 32, offset: 56244},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1510, col: 36, offset: 56248},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1510, col: 40, offset: 56252},
									expr: &ruleRefExpr{
										pos:  position{line: 1510, col: 40, offset: 56252},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 1510, col: 47, offset: 56259},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 1510, col: 51, offset: 56263},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1510, col: 58, offset: 56270},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1510, col: 79, offset: 56291},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1512, col: 5, offset: 56374},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1512, col: 5, offset: 56374},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1512, col: 5, offset: 56374},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1512, col: 10, offset: 56379},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1512, col: 14, offset: 56383},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1512, col: 18, offset: 56387},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 1516, col: 1, offset: 56459},
			expr: &actionExpr{
				pos: position{line: 1516, col: 27, offset: 56485},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1516, col: 27, offset: 56485},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1516, col: 27, offset: 56485},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 1516, col: 35, offset: 56493},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1516, col: 40, offset: 56498},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1516, col: 54, offset: 56512},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1516, col: 72, offset: 56530},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1520, col: 1, offset: 56653},
			expr: &ruleRefExpr{
				pos:  position{line: 1520, col: 24, offset: 56676},
				name: "ElementTitleContent",
			},
		},
		{
			name: "Link",
			pos:  position{line: 1525, col: 1, offset: 56798},
			expr: &choiceExpr{
				pos: position{line: 1525, col: 9, offset: 56806},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1525, col: 9, offset: 56806},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1525, col: 24, offset: 56821},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1528, col: 1, offset: 56902},
			expr: &actionExpr{
				pos: position{line: 1528, col: 17, offset: 56918},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1528, col: 17, offset: 56918},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1528, col: 17, offset: 56918},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1528, col: 25, offset: 56926},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1528, col: 30, offset: 56931},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1528, col: 40, offset: 56941},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1528, col: 58, offset: 56959},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1532, col: 1, offset: 57070},
			expr: &actionExpr{
				pos: position{line: 1532, col: 17, offset: 57086},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1532, col: 17, offset: 57086},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1532, col: 17, offset: 57086},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1532, col: 22, offset: 57091},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 1532, col: 42, offset: 57111},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1532, col: 59, offset: 57128},
								expr: &ruleRefExpr{
									pos:  position{line: 1532, col: 60, offset: 57129},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1536, col: 1, offset: 57222},
			expr: &actionExpr{
				pos: position{line: 1536, col: 19, offset: 57240},
				run: (*parser).callonLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1536, col: 19, offset: 57240},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1536, col: 19, offset: 57240},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1536, col: 23, offset: 57244},
							label: "firstAttr",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1536, col: 33, offset: 57254},
								expr: &ruleRefExpr{
									pos:  position{line: 1536, col: 34, offset: 57255},
									name: "FirstLinkAttributeElement",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1537, col: 5, offset: 57287},
							expr: &ruleRefExpr{
								pos:  position{line: 1537, col: 5, offset: 57287},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1537, col: 12, offset: 57294},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1537, col: 23, offset: 57305},
								expr: &ruleRefExpr{
									pos:  position{line: 1537, col: 24, offset: 57306},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1537, col: 43, offset: 57325},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstLinkAttributeElement",
			pos:  position{line: 1541, col: 1, offset: 57442},
			expr: &actionExpr{
				pos: position{line: 1541, col: 30, offset: 57471},
				run: (*parser).callonFirstLinkAttributeElement1,
				expr: &labeledExpr{
					pos:   position{line: 1541, col: 30, offset: 57471},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1543, col: 5, offset: 57522},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 1543, col: 6, offset: 57523},
								run: (*parser).callonFirstLinkAttributeElement4,
								expr: &seqExpr{
									pos: position{line: 1543, col: 6, offset: 57523},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1543, col: 6, offset: 57523},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&labeledExpr{
											pos:   position{line: 1543, col: 11, offset: 57528},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1543, col: 20, offset: 57537},
												expr: &choiceExpr{
													pos: position{line: 1543, col: 21, offset: 57538},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1543, col: 21, offset: 57538},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1543, col: 36, offset: 57553},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1543, col: 49, offset: 57566},
															name: "ElementPlaceHolder",
														},
														&ruleRefExpr{
															pos:  position{line: 1543, col: 70, offset: 57587},
															name: "QuotedAttributeChar",
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 1543, col: 92, offset: 57609},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&andExpr{
											pos: position{line: 1543, col: 97, offset: 57614},
											expr: &notExpr{
												pos: position{line: 1543, col: 99, offset: 57616},
												expr: &litMatcher{
													pos:        position{line: 1543, col: 100, offset: 57617},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1543, col: 105, offset: 57622},
											expr: &litMatcher{
												pos:        position{line: 1543, col: 105, offset: 57622},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 1547, col: 6, offset: 57749},
								run: (*parser).callonFirstLinkAttributeElement20,
								expr: &seqExpr{
									pos: position{line: 1547, col: 6, offset: 57749},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1547, col: 6, offset: 57749},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1547, col: 15, offset: 57758},
												expr: &choiceExpr{
													pos: position{line: 1547, col: 16, offset: 57759},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1547, col: 16, offset: 57759},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1547, col: 31, offset: 57774},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1547, col: 44, offset: 57787},
															name: "ElementPlaceHolder",
														},
														&ruleRefExpr{
															pos:  position{line: 1547, col: 65, offset: 57808},
															name: "UnquotedAttributeChar",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 1547, col: 89, offset: 57832},
											expr: &notExpr{
												pos: position{line: 1547, col: 91, offset: 57834},
												expr: &litMatcher{
													pos:        position{line: 1547, col: 92, offset: 57835},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1547, col: 97, offset: 57840},
											expr: &litMatcher{
												pos:        position{line: 1547, col: 97, offset: 57840},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeChar",
			pos:  position{line: 1553, col: 1, offset: 57954},
			expr: &actionExpr{
				pos: position{line: 1553, col: 18, offset: 57971},
				run: (*parser).callonAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1553, col: 18, offset: 57971},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "QuotedAttributeChar",
			pos:  position{line: 1557, col: 1, offset: 58057},
			expr: &actionExpr{
				pos: position{line: 1557, col: 24, offset: 58080},
				run: (*parser).callonQuotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1557, col: 24, offset: 58080},
					val:        "[^\\r\\n\"=\\]]",
					chars:      []rune{'\r', '\n', '"', '=', ']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "UnquotedAttributeChar",
			pos:  position{line: 1561, col: 1, offset: 58173},
			expr: &actionExpr{
				pos: position{line: 1561, col: 26, offset: 58198},
				run: (*parser).callonUnquotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1561, col: 26, offset: 58198},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "InlineLinks",
			pos:  position{line: 1566, col: 1, offset: 58354},
			expr: &actionExpr{
				pos: position{line: 1567, col: 5, offset: 58373},
				run: (*parser).callonInlineLinks1,
				expr: &seqExpr{
					pos: position{line: 1567, col: 5, offset: 58373},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1567, col: 5, offset: 58373},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1567, col: 14, offset: 58382},
								expr: &choiceExpr{
									pos: position{line: 1567, col: 15, offset: 58383},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1567, col: 15, offset: 58383},
											name: "Word",
										},
										&ruleRefExpr{
											pos:  position{line: 1568, col: 11, offset: 58398},
											name: "SpecialCharacter",
										},
										&oneOrMoreExpr{
											pos: position{line: 1569, col: 11, offset: 58425},
											expr: &ruleRefExpr{
												pos:  position{line: 1569, col: 11, offset: 58425},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1570, col: 11, offset: 58443},
											name: "ResolvedLink",
										},
										&ruleRefExpr{
											pos:  position{line: 1571, col: 11, offset: 58467},
											name: "AnyChar",
										},
										&ruleRefExpr{
											pos:  position{line: 1572, col: 11, offset: 58485},
											name: "Newline",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1572, col: 21, offset: 58495},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ResolvedLink",
			pos:  position{line: 1576, col: 1, offset: 58565},
			expr: &choiceExpr{
				pos: position{line: 1576, col: 17, offset: 58581},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1576, col: 17, offset: 58581},
						name: "ResolvedRelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1576, col: 40, offset: 58604},
						name: "ResolvedExternalLink",
					},
				},
			},
		},
		{
			name: "ResolvedRelativeLink",
			pos:  position{line: 1579, col: 1, offset: 58732},
			expr: &actionExpr{
				pos: position{line: 1579, col: 25, offset: 58756},
				run: (*parser).callonResolvedRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1579, col: 25, offset: 58756},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1579, col: 25, offset: 58756},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1579, col: 33, offset: 58764},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1579, col: 38, offset: 58769},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1579, col: 38, offset: 58769},
										name: "ResolvedLocation",
									},
									&ruleRefExpr{
										pos:  position{line: 1579, col: 57, offset: 58788},
										name: "ResolvedFileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1579, col: 79, offset: 58810},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1579, col: 97, offset: 58828},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedExternalLink",
			pos:  position{line: 1583, col: 1, offset: 58939},
			expr: &actionExpr{
				pos: position{line: 1583, col: 25, offset: 58963},
				run: (*parser).callonResolvedExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1583, col: 25, offset: 58963},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1583, col: 25, offset: 58963},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1583, col: 30, offset: 58968},
								name: "ResolvedLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1583, col: 48, offset: 58986},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1583, col: 65, offset: 59003},
								expr: &ruleRefExpr{
									pos:  position{line: 1583, col: 66, offset: 59004},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1590, col: 1, offset: 59199},
			expr: &actionExpr{
				pos: position{line: 1590, col: 15, offset: 59213},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1590, col: 15, offset: 59213},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1590, col: 15, offset: 59213},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1590, col: 26, offset: 59224},
								expr: &ruleRefExpr{
									pos:  position{line: 1590, col: 27, offset: 59225},
									name: "BlockImageAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1590, col: 45, offset: 59243},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 1590, col: 55, offset: 59253},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1590, col: 61, offset: 59259},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1590, col: 71, offset: 59269},
							label: "inlineAttrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1590, col: 84, offset: 59282},
								name: "InlineImageAttrs",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1590, col: 102, offset: 59300},
							expr: &ruleRefExpr{
								pos:  position{line: 1590, col: 102, offset: 59300},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1590, col: 109, offset: 59307},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1595, col: 1, offset: 59517},
			expr: &actionExpr{
				pos: position{line: 1595, col: 16, offset: 59532},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1595, col: 16, offset: 59532},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1595, col: 16, offset: 59532},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 1595, col: 25, offset: 59541},
							expr: &litMatcher{
								pos:        position{line: 1595, col: 26, offset: 59542},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1595, col: 30, offset: 59546},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1595, col: 36, offset: 59552},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1595, col: 46, offset: 59562},
							label: "inlineAttrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1595, col: 59, offset: 59575},
								name: "InlineImageAttrs",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineImageAttrs",
			pos:  position{line: 1599, col: 1, offset: 59713},
			expr: &actionExpr{
				pos: position{line: 1599, col: 21, offset: 59733},
				run: (*parser).callonInlineImageAttrs1,
				expr: &seqExpr{
					pos: position{line: 1599, col: 21, offset: 59733},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1599, col: 21, offset: 59733},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1599, col: 25, offset: 59737},
							label: "alt",
							expr: &ruleRefExpr{
								pos:  position{line: 1599, col: 29, offset: 59741},
								name: "ImageAltInline",
							},
						},
						&labeledExpr{
							pos:   position{line: 1599, col: 44, offset: 59756},
							label: "w",
							expr: &ruleRefExpr{
								pos:  position{line: 1599, col: 46, offset: 59758},
								name: "ImageWidth",
							},
						},
						&labeledExpr{
							pos:   position{line: 1599, col: 57, offset: 59769},
							label: "h",
							expr: &ruleRefExpr{
								pos:  position{line: 1599, col: 59, offset: 59771},
								name: "ImageHeight",
							},
						},
						&labeledExpr{
							pos:   position{line: 1599, col: 71, offset: 59783},
							label: "nv",
							expr: &ruleRefExpr{
								pos:  position{line: 1599, col: 74, offset: 59786},
								name: "NamedAttrs",
							},
						},
						&litMatcher{
							pos:        position{line: 1599, col: 85, offset: 59797},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "BlockImageAttrs",
			pos:  position{line: 1603, col: 1, offset: 59859},
			expr: &choiceExpr{
				pos: position{line: 1603, col: 20, offset: 59878},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1603, col: 20, offset: 59878},
						name: "ImageAttrList",
					},
					&ruleRefExpr{
						pos:  position{line: 1603, col: 36, offset: 59894},
						name: "ElementTitle",
					},
					&ruleRefExpr{
						pos:  position{line: 1603, col: 51, offset: 59909},
						name: "ElementID",
					},
				},
			},
		},
		{
			name: "ImageAttrList",
			pos:  position{line: 1605, col: 1, offset: 59920},
			expr: &actionExpr{
				pos: position{line: 1605, col: 18, offset: 59937},
				run: (*parser).callonImageAttrList1,
				expr: &seqExpr{
					pos: position{line: 1605, col: 18, offset: 59937},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1605, col: 18, offset: 59937},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1605, col: 22, offset: 59941},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 1605, col: 29, offset: 59948},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 1605, col: 29, offset: 59948},
										expr: &ruleRefExpr{
											pos:  position{line: 1605, col: 29, offset: 59948},
											name: "ImageAltAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 1605, col: 43, offset: 59962},
										expr: &ruleRefExpr{
											pos:  position{line: 1605, col: 43, offset: 59962},
											name: "ShortHandAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 1605, col: 58, offset: 59977},
										expr: &ruleRefExpr{
											pos:  position{line: 1605, col: 58, offset: 59977},
											name: "ImageWidthAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 1605, col: 74, offset: 59993},
										expr: &ruleRefExpr{
											pos:  position{line: 1605, col: 74, offset: 59993},
											name: "ImageHeightAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 1605, col: 91, offset: 60010},
										expr: &ruleRefExpr{
											pos:  position{line: 1605, col: 91, offset: 60010},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1605, col: 103, offset: 60022},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1605, col: 107, offset: 60026},
							expr: &ruleRefExpr{
								pos:  position{line: 1605, col: 107, offset: 60026},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1605, col: 114, offset: 60033},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ImageAltInline",
			pos:  position{line: 1609, col: 1, offset: 60087},
			expr: &actionExpr{
				pos: position{line: 1609, col: 19, offset: 60105},
				run: (*parser).callonImageAltInline1,
				expr: &labeledExpr{
					pos:   position{line: 1609, col: 19, offset: 60105},
					label: "value",
					expr: &zeroOrOneExpr{
						pos: position{line: 1609, col: 25, offset: 60111},
						expr: &ruleRefExpr{
							pos:  position{line: 1609, col: 25, offset: 60111},
							name: "InlineVal",
						},
					},
				},
			},
		},
		{
			name: "ImageWidth",
			pos:  position{line: 1613, col: 1, offset: 60190},
			expr: &actionExpr{
				pos: position{line: 1613, col: 15, offset: 60204},
				run: (*parser).callonImageWidth1,
				expr: &seqExpr{
					pos: position{line: 1613, col: 15, offset: 60204},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1613, col: 15, offset: 60204},
							expr: &litMatcher{
								pos:        position{line: 1613, col: 15, offset: 60204},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1613, col: 20, offset: 60209},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1613, col: 26, offset: 60215},
								expr: &ruleRefExpr{
									pos:  position{line: 1613, col: 26, offset: 60215},
									name: "InlineVal",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageHeight",
			pos:  position{line: 1617, col: 1, offset: 60291},
			expr: &actionExpr{
				pos: position{line: 1617, col: 16, offset: 60306},
				run: (*parser).callonImageHeight1,
				expr: &seqExpr{
					pos: position{line: 1617, col: 16, offset: 60306},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1617, col: 16, offset: 60306},
							expr: &litMatcher{
								pos:        position{line: 1617, col: 16, offset: 60306},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1617, col: 21, offset: 60311},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1617, col: 27, offset: 60317},
								expr: &ruleRefExpr{
									pos:  position{line: 1617, col: 27, offset: 60317},
									name: "InlineVal",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAltAttr",
			pos:  position{line: 1621, col: 1, offset: 60399},
			expr: &actionExpr{
				pos: position{line: 1621, col: 17, offset: 60415},
				run: (*parser).callonImageAltAttr1,
				expr: &seqExpr{
					pos: position{line: 1621, col: 17, offset: 60415},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1621, col: 17, offset: 60415},
							expr: &ruleRefExpr{
								pos:  position{line: 1621, col: 17, offset: 60415},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1621, col: 24, offset: 60422},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1621, col: 30, offset: 60428},
								name: "PositionalValue",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1621, col: 46, offset: 60444},
							expr: &ruleRefExpr{
								pos:  position{line: 1621, col: 46, offset: 60444},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageWidthAttr",
			pos:  position{line: 1625, col: 1, offset: 60520},
			expr: &actionExpr{
				pos: position{line: 1625, col: 19, offset: 60538},
				run: (*parser).callonImageWidthAttr1,
				expr: &seqExpr{
					pos: position{line: 1625, col: 19, offset: 60538},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1625, col: 19, offset: 60538},
							expr: &ruleRefExpr{
								pos:  position{line: 1625, col: 19, offset: 60538},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1625, col: 26, offset: 60545},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1625, col: 30, offset: 60549},
							expr: &ruleRefExpr{
								pos:  position{line: 1625, col: 30, offset: 60549},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1625, col: 37, offset: 60556},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1625, col: 43, offset: 60562},
								expr: &ruleRefExpr{
									pos:  position{line: 1625, col: 43, offset: 60562},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageHeightAttr",
			pos:  position{line: 1632, col: 1, offset: 60697},
			expr: &actionExpr{
				pos: position{line: 1632, col: 20, offset: 60716},
				run: (*parser).callonImageHeightAttr1,
				expr: &seqExpr{
					pos: position{line: 1632, col: 20, offset: 60716},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1632, col: 20, offset: 60716},
							expr: &ruleRefExpr{
								pos:  position{line: 1632, col: 20, offset: 60716},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1632, col: 27, offset: 60723},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1632, col: 31, offset: 60727},
							expr: &ruleRefExpr{
								pos:  position{line: 1632, col: 31, offset: 60727},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1632, col: 38, offset: 60734},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1632, col: 44, offset: 60740},
								expr: &ruleRefExpr{
									pos:  position{line: 1632, col: 44, offset: 60740},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 1643, col: 1, offset: 61074},
			expr: &actionExpr{
				pos: position{line: 1643, col: 15, offset: 61088},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 1643, col: 15, offset: 61088},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1643, col: 15, offset: 61088},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 1643, col: 23, offset: 61096},
							label: "icon",
							expr: &actionExpr{
								pos: position{line: 1643, col: 29, offset: 61102},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1643, col: 29, offset: 61102},
									expr: &charClassMatcher{
										pos:        position{line: 1643, col: 29, offset: 61102},
										val:        "[\\pL0-9_-]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1643, col: 73, offset: 61146},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1643, col: 80, offset: 61153},
								name: "IconAttrs",
							},
						},
					},
				},
			},
		},
		{
			name: "IconAttrs",
			pos:  position{line: 1647, col: 1, offset: 61235},
			expr: &actionExpr{
				pos: position{line: 1647, col: 14, offset: 61248},
				run: (*parser).callonIconAttrs1,
				expr: &seqExpr{
					pos: position{line: 1647, col: 14, offset: 61248},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1647, col: 14, offset: 61248},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1647, col: 18, offset: 61252},
							label: "size",
							expr: &ruleRefExpr{
								pos:  position{line: 1647, col: 23, offset: 61257},
								name: "IconSize",
							},
						},
						&labeledExpr{
							pos:   position{line: 1647, col: 32, offset: 61266},
							label: "nv",
							expr: &ruleRefExpr{
								pos:  position{line: 1647, col: 35, offset: 61269},
								name: "NamedAttrs",
							},
						},
						&litMatcher{
							pos:        position{line: 1647, col: 46, offset: 61280},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "IconSize",
			pos:  position{line: 1651, col: 1, offset: 61337},
			expr: &actionExpr{
				pos: position{line: 1651, col: 13, offset: 61349},
				run: (*parser).callonIconSize1,
				expr: &labeledExpr{
					pos:   position{line: 1651, col: 13, offset: 61349},
					label: "value",
					expr: &zeroOrOneExpr{
						pos: position{line: 1651, col: 19, offset: 61355},
						expr: &ruleRefExpr{
							pos:  position{line: 1651, col: 19, offset: 61355},
							name: "InlineVal",
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1658, col: 1, offset: 61631},
			expr: &choiceExpr{
				pos: position{line: 1658, col: 19, offset: 61649},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1658, col: 19, offset: 61649},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1658, col: 19, offset: 61649},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1658, col: 19, offset: 61649},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1658, col: 32, offset: 61662},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1658, col: 41, offset: 61671},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1658, col: 58, offset: 61688},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1660, col: 5, offset: 61756},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1660, col: 5, offset: 61756},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1660, col: 5, offset: 61756},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 1660, col: 17, offset: 61768},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1660, col: 22, offset: 61773},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1660, col: 35, offset: 61786},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 1660, col: 39, offset: 61790},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 1660, col: 47, offset: 61798},
										expr: &ruleRefExpr{
											pos:  position{line: 1660, col: 48, offset: 61799},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1660, col: 66, offset: 61817},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1664, col: 1, offset: 61878},
			expr: &ruleRefExpr{
				pos:  position{line: 1664, col: 16, offset: 61893},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1666, col: 1, offset: 61904},
			expr: &actionExpr{
				pos: position{line: 1666, col: 20, offset: 61923},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1666, col: 20, offset: 61923},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1666, col: 29, offset: 61932},
						expr: &seqExpr{
							pos: position{line: 1666, col: 30, offset: 61933},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1666, col: 30, offset: 61933},
									expr: &litMatcher{
										pos:        position{line: 1666, col: 31, offset: 61934},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1666, col: 35, offset: 61938},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1673, col: 1, offset: 62262},
			expr: &actionExpr{
				pos: position{line: 1673, col: 19, offset: 62280},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1673, col: 19, offset: 62280},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1673, col: 19, offset: 62280},
							expr: &ruleRefExpr{
								pos:  position{line: 1673, col: 20, offset: 62281},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1674, col: 5, offset: 62369},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1674, col: 12, offset: 62376},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1674, col: 12, offset: 62376},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1675, col: 11, offset: 62399},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1676, col: 11, offset: 62423},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1677, col: 11, offset: 62447},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1678, col: 11, offset: 62468},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1679, col: 11, offset: 62491},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1680, col: 11, offset: 62519},
										name: "PassthroughBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1681, col: 11, offset: 62546},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1682, col: 11, offset: 62562},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1686, col: 1, offset: 62603},
			expr: &choiceExpr{
				pos: position{line: 1686, col: 19, offset: 62621},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1686, col: 19, offset: 62621},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1686, col: 19, offset: 62621},
								expr: &ruleRefExpr{
									pos:  position{line: 1686, col: 21, offset: 62623},
									name: "Alphanum",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1686, col: 31, offset: 62633},
								name: "LiteralBlockDelimiter",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1687, col: 19, offset: 62704},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1688, col: 19, offset: 62744},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1689, col: 19, offset: 62785},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1690, col: 19, offset: 62826},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1691, col: 19, offset: 62867},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1692, col: 19, offset: 62905},
						name: "SidebarBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1693, col: 19, offset: 62945},
						name: "PassthroughBlockDelimiter",
					},
				},
			},
		},
		{
			name: "DelimitedBlockRawLine",
			pos:  position{line: 1695, col: 1, offset: 62972},
			expr: &choiceExpr{
				pos: position{line: 1695, col: 26, offset: 62997},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1695, col: 26, offset: 62997},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1695, col: 42, offset: 63013},
						name: "RawLine",
					},
				},
			},
		},
		{
			name: "RawLine",
			pos:  position{line: 1697, col: 1, offset: 63022},
			expr: &actionExpr{
				pos: position{line: 1697, col: 12, offset: 63033},
				run: (*parser).callonRawLine1,
				expr: &seqExpr{
					pos: position{line: 1697, col: 12, offset: 63033},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1697, col: 12, offset: 63033},
							expr: &ruleRefExpr{
								pos:  position{line: 1697, col: 13, offset: 63034},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1697, col: 17, offset: 63038},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1697, col: 26, offset: 63047},
								name: "RawLineContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1697, col: 42, offset: 63063},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawLineContent",
			pos:  position{line: 1701, col: 1, offset: 63143},
			expr: &actionExpr{
				pos: position{line: 1701, col: 19, offset: 63161},
				run: (*parser).callonRawLineContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1701, col: 19, offset: 63161},
					expr: &charClassMatcher{
						pos:        position{line: 1701, col: 19, offset: 63161},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "CalloutListItem",
			pos:  position{line: 1705, col: 1, offset: 63208},
			expr: &actionExpr{
				pos: position{line: 1705, col: 20, offset: 63227},
				run: (*parser).callonCalloutListItem1,
				expr: &seqExpr{
					pos: position{line: 1705, col: 20, offset: 63227},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1705, col: 20, offset: 63227},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 1705, col: 25, offset: 63232},
								name: "CalloutListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1705, col: 48, offset: 63255},
							label: "description",
							expr: &oneOrMoreExpr{
								pos: position{line: 1705, col: 61, offset: 63268},
								expr: &ruleRefExpr{
									pos:  position{line: 1705, col: 61, offset: 63268},
									name: "ListParagraph",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItemPrefix",
			pos:  position{line: 1709, col: 1, offset: 63365},
			expr: &actionExpr{
				pos: position{line: 1709, col: 26, offset: 63390},
				run: (*parser).callonCalloutListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 1709, col: 26, offset: 63390},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1709, col: 26, offset: 63390},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1709, col: 30, offset: 63394},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1709, col: 35, offset: 63399},
								run: (*parser).callonCalloutListItemPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1709, col: 35, offset: 63399},
									expr: &charClassMatcher{
										pos:        position{line: 1709, col: 35, offset: 63399},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1709, col: 83, offset: 63447},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1709, col: 87, offset: 63451},
							expr: &ruleRefExpr{
								pos:  position{line: 1709, col: 87, offset: 63451},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1716, col: 1, offset: 63678},
			expr: &seqExpr{
				pos: position{line: 1716, col: 25, offset: 63702},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1716, col: 25, offset: 63702},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1716, col: 31, offset: 63708},
						expr: &ruleRefExpr{
							pos:  position{line: 1716, col: 31, offset: 63708},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1716, col: 38, offset: 63715},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockStartDelimiter",
			pos:  position{line: 1718, col: 1, offset: 63775},
			expr: &seqExpr{
				pos: position{line: 1718, col: 30, offset: 63804},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1718, col: 30, offset: 63804},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1718, col: 36, offset: 63810},
						expr: &ruleRefExpr{
							pos:  position{line: 1718, col: 36, offset: 63810},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1718, col: 43, offset: 63817},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockEndDelimiter",
			pos:  position{line: 1720, col: 1, offset: 63822},
			expr: &choiceExpr{
				pos: position{line: 1720, col: 28, offset: 63849},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1720, col: 29, offset: 63850},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1720, col: 29, offset: 63850},
								val:        "```",
								ignoreCase: false,
								want:       "\"```\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1720, col: 35, offset: 63856},
								expr: &ruleRefExpr{
									pos:  position{line: 1720, col: 35, offset: 63856},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1720, col: 42, offset: 63863},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1720, col: 49, offset: 63870},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1722, col: 1, offset: 63875},
			expr: &actionExpr{
				pos: position{line: 1722, col: 16, offset: 63890},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1722, col: 16, offset: 63890},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1722, col: 16, offset: 63890},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1722, col: 27, offset: 63901},
								expr: &ruleRefExpr{
									pos:  position{line: 1722, col: 28, offset: 63902},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1722, col: 41, offset: 63915},
							name: "FencedBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1722, col: 67, offset: 63941},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1722, col: 76, offset: 63950},
								name: "FencedBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1722, col: 99, offset: 63973},
							name: "FencedBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockRawContent",
			pos:  position{line: 1726, col: 1, offset: 64088},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1726, col: 26, offset: 64113},
				expr: &actionExpr{
					pos: position{line: 1726, col: 27, offset: 64114},
					run: (*parser).callonFencedBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1726, col: 27, offset: 64114},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1726, col: 27, offset: 64114},
								expr: &ruleRefExpr{
									pos:  position{line: 1726, col: 28, offset: 64115},
									name: "FencedBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1726, col: 52, offset: 64139},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1726, col: 58, offset: 64145},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1733, col: 1, offset: 64485},
			expr: &seqExpr{
				pos: position{line: 1733, col: 26, offset: 64510},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1733, col: 26, offset: 64510},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1733, col: 33, offset: 64517},
						expr: &ruleRefExpr{
							pos:  position{line: 1733, col: 33, offset: 64517},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1733, col: 40, offset: 64524},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockStartDelimiter",
			pos:  position{line: 1735, col: 1, offset: 64529},
			expr: &seqExpr{
				pos: position{line: 1735, col: 31, offset: 64559},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1735, col: 31, offset: 64559},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1735, col: 38, offset: 64566},
						expr: &ruleRefExpr{
							pos:  position{line: 1735, col: 38, offset: 64566},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1735, col: 45, offset: 64573},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockEndDelimiter",
			pos:  position{line: 1737, col: 1, offset: 64578},
			expr: &choiceExpr{
				pos: position{line: 1737, col: 29, offset: 64606},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1737, col: 30, offset: 64607},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1737, col: 30, offset: 64607},
								val:        "----",
								ignoreCase: false,
								want:       "\"----\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1737, col: 37, offset: 64614},
								expr: &ruleRefExpr{
									pos:  position{line: 1737, col: 37, offset: 64614},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1737, col: 44, offset: 64621},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1737, col: 51, offset: 64628},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1739, col: 1, offset: 64633},
			expr: &actionExpr{
				pos: position{line: 1739, col: 17, offset: 64649},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1739, col: 17, offset: 64649},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1739, col: 17, offset: 64649},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1739, col: 28, offset: 64660},
								expr: &ruleRefExpr{
									pos:  position{line: 1739, col: 29, offset: 64661},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1739, col: 42, offset: 64674},
							name: "ListingBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1739, col: 69, offset: 64701},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1739, col: 78, offset: 64710},
								name: "ListingBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1739, col: 102, offset: 64734},
							name: "ListingBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockRawContent",
			pos:  position{line: 1743, col: 1, offset: 64851},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1743, col: 27, offset: 64877},
				expr: &actionExpr{
					pos: position{line: 1743, col: 28, offset: 64878},
					run: (*parser).callonListingBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1743, col: 28, offset: 64878},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1743, col: 28, offset: 64878},
								expr: &ruleRefExpr{
									pos:  position{line: 1743, col: 29, offset: 64879},
									name: "ListingBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1743, col: 54, offset: 64904},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1743, col: 60, offset: 64910},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1750, col: 1, offset: 65250},
			expr: &seqExpr{
				pos: position{line: 1750, col: 26, offset: 65275},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1750, col: 26, offset: 65275},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1750, col: 33, offset: 65282},
						expr: &ruleRefExpr{
							pos:  position{line: 1750, col: 33, offset: 65282},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1750, col: 40, offset: 65289},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockStartDelimiter",
			pos:  position{line: 1752, col: 1, offset: 65294},
			expr: &seqExpr{
				pos: position{line: 1752, col: 31, offset: 65324},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1752, col: 31, offset: 65324},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1752, col: 38, offset: 65331},
						expr: &ruleRefExpr{
							pos:  position{line: 1752, col: 38, offset: 65331},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1752, col: 45, offset: 65338},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockEndDelimiter",
			pos:  position{line: 1754, col: 1, offset: 65343},
			expr: &choiceExpr{
				pos: position{line: 1754, col: 29, offset: 65371},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1754, col: 30, offset: 65372},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1754, col: 30, offset: 65372},
								val:        "====",
								ignoreCase: false,
								want:       "\"====\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1754, col: 37, offset: 65379},
								expr: &ruleRefExpr{
									pos:  position{line: 1754, col: 37, offset: 65379},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1754, col: 44, offset: 65386},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1754, col: 51, offset: 65393},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1756, col: 1, offset: 65398},
			expr: &actionExpr{
				pos: position{line: 1756, col: 17, offset: 65414},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1756, col: 17, offset: 65414},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1756, col: 17, offset: 65414},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1756, col: 28, offset: 65425},
								expr: &ruleRefExpr{
									pos:  position{line: 1756, col: 29, offset: 65426},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1756, col: 42, offset: 65439},
							name: "ExampleBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1756, col: 69, offset: 65466},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1756, col: 78, offset: 65475},
								name: "ExampleBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1756, col: 102, offset: 65499},
							name: "ExampleBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockRawContent",
			pos:  position{line: 1760, col: 1, offset: 65616},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1760, col: 27, offset: 65642},
				expr: &actionExpr{
					pos: position{line: 1760, col: 28, offset: 65643},
					run: (*parser).callonExampleBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1760, col: 28, offset: 65643},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1760, col: 28, offset: 65643},
								expr: &ruleRefExpr{
									pos:  position{line: 1760, col: 29, offset: 65644},
									name: "ExampleBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1760, col: 54, offset: 65669},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1760, col: 60, offset: 65675},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1767, col: 1, offset: 66013},
			expr: &seqExpr{
				pos: position{line: 1767, col: 24, offset: 66036},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1767, col: 24, offset: 66036},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1767, col: 31, offset: 66043},
						expr: &ruleRefExpr{
							pos:  position{line: 1767, col: 31, offset: 66043},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1767, col: 38, offset: 66050},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockStartDelimiter",
			pos:  position{line: 1769, col: 1, offset: 66080},
			expr: &seqExpr{
				pos: position{line: 1769, col: 29, offset: 66108},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1769, col: 29, offset: 66108},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1769, col: 36, offset: 66115},
						expr: &ruleRefExpr{
							pos:  position{line: 1769, col: 36, offset: 66115},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1769, col: 43, offset: 66122},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockEndDelimiter",
			pos:  position{line: 1771, col: 1, offset: 66152},
			expr: &choiceExpr{
				pos: position{line: 1771, col: 27, offset: 66178},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1771, col: 28, offset: 66179},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1771, col: 28, offset: 66179},
								val:        "____",
								ignoreCase: false,
								want:       "\"____\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1771, col: 35, offset: 66186},
								expr: &ruleRefExpr{
									pos:  position{line: 1771, col: 35, offset: 66186},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1771, col: 42, offset: 66193},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1771, col: 49, offset: 66200},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1773, col: 1, offset: 66230},
			expr: &actionExpr{
				pos: position{line: 1773, col: 15, offset: 66244},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1773, col: 15, offset: 66244},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1773, col: 15, offset: 66244},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1773, col: 26, offset: 66255},
								expr: &ruleRefExpr{
									pos:  position{line: 1773, col: 27, offset: 66256},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1773, col: 40, offset: 66269},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1773, col: 65, offset: 66294},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1773, col: 74, offset: 66303},
								name: "QuoteBlockVerbatimElement",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1773, col: 101, offset: 66330},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockVerbatimElement",
			pos:  position{line: 1777, col: 1, offset: 66443},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1777, col: 30, offset: 66472},
				expr: &actionExpr{
					pos: position{line: 1777, col: 31, offset: 66473},
					run: (*parser).callonQuoteBlockVerbatimElement2,
					expr: &seqExpr{
						pos: position{line: 1777, col: 31, offset: 66473},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1777, col: 31, offset: 66473},
								expr: &ruleRefExpr{
									pos:  position{line: 1777, col: 32, offset: 66474},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1777, col: 55, offset: 66497},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1777, col: 61, offset: 66503},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1784, col: 1, offset: 66843},
			expr: &seqExpr{
				pos: position{line: 1784, col: 26, offset: 66868},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1784, col: 26, offset: 66868},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1784, col: 33, offset: 66875},
						expr: &ruleRefExpr{
							pos:  position{line: 1784, col: 33, offset: 66875},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1784, col: 40, offset: 66882},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockStartDelimiter",
			pos:  position{line: 1786, col: 1, offset: 66887},
			expr: &seqExpr{
				pos: position{line: 1786, col: 31, offset: 66917},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1786, col: 31, offset: 66917},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1786, col: 38, offset: 66924},
						expr: &ruleRefExpr{
							pos:  position{line: 1786, col: 38, offset: 66924},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1786, col: 45, offset: 66931},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockEndDelimiter",
			pos:  position{line: 1788, col: 1, offset: 66936},
			expr: &choiceExpr{
				pos: position{line: 1788, col: 29, offset: 66964},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1788, col: 30, offset: 66965},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1788, col: 30, offset: 66965},
								val:        "****",
								ignoreCase: false,
								want:       "\"****\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1788, col: 37, offset: 66972},
								expr: &ruleRefExpr{
									pos:  position{line: 1788, col: 37, offset: 66972},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1788, col: 44, offset: 66979},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1788, col: 51, offset: 66986},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1790, col: 1, offset: 66991},
			expr: &actionExpr{
				pos: position{line: 1790, col: 17, offset: 67007},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1790, col: 17, offset: 67007},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1790, col: 17, offset: 67007},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1790, col: 28, offset: 67018},
								expr: &ruleRefExpr{
									pos:  position{line: 1790, col: 29, offset: 67019},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1790, col: 42, offset: 67032},
							name: "SidebarBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1790, col: 69, offset: 67059},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1790, col: 78, offset: 67068},
								name: "SidebarBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1790, col: 102, offset: 67092},
							name: "SidebarBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockRawContent",
			pos:  position{line: 1794, col: 1, offset: 67209},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1794, col: 27, offset: 67235},
				expr: &actionExpr{
					pos: position{line: 1794, col: 28, offset: 67236},
					run: (*parser).callonSidebarBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1794, col: 28, offset: 67236},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1794, col: 28, offset: 67236},
								expr: &ruleRefExpr{
									pos:  position{line: 1794, col: 29, offset: 67237},
									name: "SidebarBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1794, col: 54, offset: 67262},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1794, col: 60, offset: 67268},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockDelimiter",
			pos:  position{line: 1801, col: 1, offset: 67612},
			expr: &seqExpr{
				pos: position{line: 1801, col: 30, offset: 67641},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1801, col: 30, offset: 67641},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1801, col: 37, offset: 67648},
						expr: &ruleRefExpr{
							pos:  position{line: 1801, col: 37, offset: 67648},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1801, col: 44, offset: 67655},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockStartDelimiter",
			pos:  position{line: 1803, col: 1, offset: 67660},
			expr: &seqExpr{
				pos: position{line: 1803, col: 35, offset: 67694},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1803, col: 35, offset: 67694},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1803, col: 42, offset: 67701},
						expr: &ruleRefExpr{
							pos:  position{line: 1803, col: 42, offset: 67701},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1803, col: 49, offset: 67708},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockEndDelimiter",
			pos:  position{line: 1805, col: 1, offset: 67713},
			expr: &choiceExpr{
				pos: position{line: 1805, col: 33, offset: 67745},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1805, col: 34, offset: 67746},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1805, col: 34, offset: 67746},
								val:        "++++",
								ignoreCase: false,
								want:       "\"++++\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1805, col: 41, offset: 67753},
								expr: &ruleRefExpr{
									pos:  position{line: 1805, col: 41, offset: 67753},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1805, col: 48, offset: 67760},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1805, col: 55, offset: 67767},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PassthroughBlock",
			pos:  position{line: 1807, col: 1, offset: 67772},
			expr: &actionExpr{
				pos: position{line: 1807, col: 21, offset: 67792},
				run: (*parser).callonPassthroughBlock1,
				expr: &seqExpr{
					pos: position{line: 1807, col: 21, offset: 67792},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1807, col: 21, offset: 67792},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1807, col: 32, offset: 67803},
								expr: &ruleRefExpr{
									pos:  position{line: 1807, col: 33, offset: 67804},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1807, col: 46, offset: 67817},
							name: "PassthroughBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1807, col: 77, offset: 67848},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1807, col: 86, offset: 67857},
								name: "PassthroughBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1807, col: 114, offset: 67885},
							name: "PassthroughBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockRawContent",
			pos:  position{line: 1811, col: 1, offset: 68010},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1811, col: 31, offset: 68040},
				expr: &actionExpr{
					pos: position{line: 1811, col: 32, offset: 68041},
					run: (*parser).callonPassthroughBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1811, col: 32, offset: 68041},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1811, col: 32, offset: 68041},
								expr: &ruleRefExpr{
									pos:  position{line: 1811, col: 33, offset: 68042},
									name: "PassthroughBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1811, col: 62, offset: 68071},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1811, col: 68, offset: 68077},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ThematicBreak",
			pos:  position{line: 1816, col: 1, offset: 68239},
			expr: &actionExpr{
				pos: position{line: 1816, col: 18, offset: 68256},
				run: (*parser).callonThematicBreak1,
				expr: &seqExpr{
					pos: position{line: 1816, col: 18, offset: 68256},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1816, col: 19, offset: 68257},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1816, col: 19, offset: 68257},
									val:        "***",
									ignoreCase: false,
									want:       "\"***\"",
								},
								&litMatcher{
									pos:        position{line: 1816, col: 27, offset: 68265},
									val:        "* * *",
									ignoreCase: false,
									want:       "\"* * *\"",
								},
								&litMatcher{
									pos:        position{line: 1816, col: 37, offset: 68275},
									val:        "---",
									ignoreCase: false,
									want:       "\"---\"",
								},
								&litMatcher{
									pos:        position{line: 1816, col: 45, offset: 68283},
									val:        "- - -",
									ignoreCase: false,
									want:       "\"- - -\"",
								},
								&litMatcher{
									pos:        position{line: 1816, col: 55, offset: 68293},
									val:        "___",
									ignoreCase: false,
									want:       "\"___\"",
								},
								&litMatcher{
									pos:        position{line: 1816, col: 63, offset: 68301},
									val:        "_ _ _",
									ignoreCase: false,
									want:       "\"_ _ _\"",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1816, col: 72, offset: 68310},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineMacros",
			pos:  position{line: 1826, col: 1, offset: 68617},
			expr: &choiceExpr{
				pos: position{line: 1826, col: 17, offset: 68633},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1826, col: 17, offset: 68633},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1827, col: 19, offset: 68662},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1828, col: 19, offset: 68693},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1829, col: 19, offset: 68717},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1830, col: 19, offset: 68754},
						name: "InlineFootnote",
					},
					&ruleRefExpr{
						pos:  position{line: 1831, col: 19, offset: 68788},
						name: "CrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1832, col: 19, offset: 68822},
						name: "InlineUserMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1833, col: 19, offset: 68857},
						name: "InlineElementID",
					},
					&ruleRefExpr{
						pos:  position{line: 1834, col: 19, offset: 68891},
						name: "ConcealedIndexTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 1835, col: 19, offset: 68928},
						name: "IndexTerm",
					},
				},
			},
		},
		{
			name: "ElementPlaceHolder",
			pos:  position{line: 1837, col: 1, offset: 68939},
			expr: &actionExpr{
				pos: position{line: 1837, col: 23, offset: 68961},
				run: (*parser).callonElementPlaceHolder1,
				expr: &seqExpr{
					pos: position{line: 1837, col: 23, offset: 68961},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1837, col: 23, offset: 68961},
							val:        "�",
							ignoreCase: false,
							want:       "\"�\"",
						},
						&labeledExpr{
							pos:   position{line: 1837, col: 32, offset: 68970},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1837, col: 37, offset: 68975},
								run: (*parser).callonElementPlaceHolder5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1837, col: 37, offset: 68975},
									expr: &charClassMatcher{
										pos:        position{line: 1837, col: 37, offset: 68975},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1837, col: 76, offset: 69014},
							val:        "�",
							ignoreCase: false,
							want:       "\"�\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthroughSubs",
			pos:  position{line: 1842, col: 1, offset: 69166},
			expr: &seqExpr{
				pos: position{line: 1843, col: 5, offset: 69196},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1843, col: 5, offset: 69196},
						expr: &choiceExpr{
							pos: position{line: 1843, col: 6, offset: 69197},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1843, col: 6, offset: 69197},
									name: "InlinePassthrough",
								},
								&ruleRefExpr{
									pos:  position{line: 1844, col: 11, offset: 69226},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1845, col: 11, offset: 69287},
									name: "ElementPlaceHolder",
								},
								&oneOrMoreExpr{
									pos: position{line: 1846, col: 11, offset: 69316},
									expr: &ruleRefExpr{
										pos:  position{line: 1846, col: 11, offset: 69316},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1847, col: 11, offset: 69334},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1848, col: 11, offset: 69352},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1848, col: 21, offset: 69362},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SpecialCharacterSubs",
			pos:  position{line: 1851, col: 1, offset: 69483},
			expr: &seqExpr{
				pos: position{line: 1852, col: 5, offset: 69512},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1852, col: 5, offset: 69512},
						expr: &choiceExpr{
							pos: position{line: 1852, col: 6, offset: 69513},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1852, col: 6, offset: 69513},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1853, col: 11, offset: 69574},
									name: "SpecialCharacter",
								},
								&ruleRefExpr{
									pos:  position{line: 1854, col: 11, offset: 69601},
									name: "ElementPlaceHolder",
								},
								&oneOrMoreExpr{
									pos: position{line: 1855, col: 11, offset: 69630},
									expr: &ruleRefExpr{
										pos:  position{line: 1855, col: 11, offset: 69630},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1856, col: 11, offset: 69647},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1857, col: 11, offset: 69665},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1857, col: 21, offset: 69675},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuotedTextSubs",
			pos:  position{line: 1860, col: 1, offset: 69729},
			expr: &seqExpr{
				pos: position{line: 1861, col: 5, offset: 69752},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1861, col: 5, offset: 69752},
						expr: &choiceExpr{
							pos: position{line: 1861, col: 6, offset: 69753},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1861, col: 6, offset: 69753},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1862, col: 11, offset: 69814},
									expr: &ruleRefExpr{
										pos:  position{line: 1862, col: 11, offset: 69814},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1863, col: 11, offset: 69832},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 1864, col: 11, offset: 69854},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 1865, col: 11, offset: 69877},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1866, col: 11, offset: 69906},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1867, col: 11, offset: 69924},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1867, col: 21, offset: 69934},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "AttributeSubs",
			pos:  position{line: 1870, col: 1, offset: 69992},
			expr: &seqExpr{
				pos: position{line: 1871, col: 5, offset: 70014},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1871, col: 5, offset: 70014},
						expr: &choiceExpr{
							pos: position{line: 1871, col: 6, offset: 70015},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1871, col: 6, offset: 70015},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1872, col: 11, offset: 70076},
									expr: &ruleRefExpr{
										pos:  position{line: 1872, col: 11, offset: 70076},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1873, col: 11, offset: 70094},
									name: "AttributeSubstitution",
								},
								&ruleRefExpr{
									pos:  position{line: 1874, col: 11, offset: 70126},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1875, col: 11, offset: 70155},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1876, col: 11, offset: 70173},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1876, col: 21, offset: 70183},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "InlineMacroSubs",
			pos:  position{line: 1879, col: 1, offset: 70237},
			expr: &seqExpr{
				pos: position{line: 1880, col: 5, offset: 70261},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1880, col: 5, offset: 70261},
						expr: &choiceExpr{
							pos: position{line: 1880, col: 6, offset: 70262},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1880, col: 6, offset: 70262},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1881, col: 11, offset: 70323},
									expr: &ruleRefExpr{
										pos:  position{line: 1881, col: 11, offset: 70323},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1882, col: 11, offset: 70341},
									name: "InlineMacros",
								},
								&ruleRefExpr{
									pos:  position{line: 1883, col: 11, offset: 70364},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1884, col: 11, offset: 70393},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1885, col: 11, offset: 70411},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1885, col: 21, offset: 70421},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "NormalBlocks",
			pos:  position{line: 1887, col: 1, offset: 70426},
			expr: &actionExpr{
				pos: position{line: 1887, col: 17, offset: 70442},
				run: (*parser).callonNormalBlocks1,
				expr: &seqExpr{
					pos: position{line: 1887, col: 17, offset: 70442},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1887, col: 17, offset: 70442},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1887, col: 26, offset: 70451},
								expr: &choiceExpr{
									pos: position{line: 1887, col: 27, offset: 70452},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1887, col: 27, offset: 70452},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 1888, col: 15, offset: 70477},
											name: "FileInclusion",
										},
										&ruleRefExpr{
											pos:  position{line: 1889, col: 15, offset: 70505},
											name: "ImageBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1890, col: 15, offset: 70530},
											name: "ThematicBreak",
										},
										&ruleRefExpr{
											pos:  position{line: 1891, col: 15, offset: 70558},
											name: "OrderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1892, col: 15, offset: 70589},
											name: "UnorderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1893, col: 15, offset: 70622},
											name: "LabeledListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1894, col: 15, offset: 70653},
											name: "ContinuedListItemElement",
										},
										&ruleRefExpr{
											pos:  position{line: 1895, col: 15, offset: 70692},
											name: "DelimitedBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1896, col: 15, offset: 70721},
											name: "LiteralBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1897, col: 15, offset: 70749},
											name: "StandaloneAttributes",
										},
										&ruleRefExpr{
											pos:  position{line: 1898, col: 15, offset: 70784},
											name: "RawParagraph",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1898, col: 30, offset: 70799},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "VerseMacroSubs",
			pos:  position{line: 1903, col: 1, offset: 70908},
			expr: &seqExpr{
				pos: position{line: 1903, col: 19, offset: 70926},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1903, col: 19, offset: 70926},
						expr: &choiceExpr{
							pos: position{line: 1904, col: 9, offset: 70936},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1904, col: 9, offset: 70936},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1905, col: 11, offset: 70997},
									expr: &ruleRefExpr{
										pos:  position{line: 1905, col: 11, offset: 70997},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1906, col: 11, offset: 71015},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1907, col: 11, offset: 71044},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1908, col: 11, offset: 71062},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1908, col: 21, offset: 71072},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "MarkdownQuoteMacroSubs",
			pos:  position{line: 1911, col: 1, offset: 71153},
			expr: &actionExpr{
				pos: position{line: 1911, col: 27, offset: 71179},
				run: (*parser).callonMarkdownQuoteMacroSubs1,
				expr: &seqExpr{
					pos: position{line: 1911, col: 27, offset: 71179},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1911, col: 27, offset: 71179},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1911, col: 33, offset: 71185},
								expr: &ruleRefExpr{
									pos:  position{line: 1911, col: 34, offset: 71186},
									name: "MarkdownQuoteLine",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1911, col: 54, offset: 71206},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteLine",
			pos:  position{line: 1915, col: 1, offset: 71273},
			expr: &actionExpr{
				pos: position{line: 1916, col: 5, offset: 71299},
				run: (*parser).callonMarkdownQuoteLine1,
				expr: &seqExpr{
					pos: position{line: 1916, col: 5, offset: 71299},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1916, col: 5, offset: 71299},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1916, col: 14, offset: 71308},
								expr: &choiceExpr{
									pos: position{line: 1916, col: 15, offset: 71309},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1916, col: 15, offset: 71309},
											name: "InlineWord",
										},
										&oneOrMoreExpr{
											pos: position{line: 1917, col: 11, offset: 71370},
											expr: &ruleRefExpr{
												pos:  position{line: 1917, col: 11, offset: 71370},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1918, col: 11, offset: 71388},
											name: "InlineMacros",
										},
										&ruleRefExpr{
											pos:  position{line: 1919, col: 11, offset: 71411},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1920, col: 11, offset: 71440},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1920, col: 21, offset: 71450},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteAttribution",
			pos:  position{line: 1924, col: 1, offset: 71521},
			expr: &actionExpr{
				pos: position{line: 1924, col: 29, offset: 71549},
				run: (*parser).callonMarkdownQuoteAttribution1,
				expr: &seqExpr{
					pos: position{line: 1924, col: 29, offset: 71549},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1924, col: 29, offset: 71549},
							val:        "-- ",
							ignoreCase: false,
							want:       "\"-- \"",
						},
						&labeledExpr{
							pos:   position{line: 1924, col: 35, offset: 71555},
							label: "author",
							expr: &actionExpr{
								pos: position{line: 1924, col: 43, offset: 71563},
								run: (*parser).callonMarkdownQuoteAttribution5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1924, col: 44, offset: 71564},
									expr: &charClassMatcher{
										pos:        position{line: 1924, col: 44, offset: 71564},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1926, col: 8, offset: 71614},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ReplacementSubs",
			pos:  position{line: 1931, col: 1, offset: 71701},
			expr: &seqExpr{
				pos: position{line: 1932, col: 5, offset: 71725},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1932, col: 5, offset: 71725},
						expr: &choiceExpr{
							pos: position{line: 1932, col: 6, offset: 71726},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1932, col: 6, offset: 71726},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1933, col: 11, offset: 71787},
									expr: &ruleRefExpr{
										pos:  position{line: 1933, col: 11, offset: 71787},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1934, col: 11, offset: 71805},
									name: "Symbol",
								},
								&ruleRefExpr{
									pos:  position{line: 1935, col: 11, offset: 71823},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1936, col: 11, offset: 71852},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1937, col: 11, offset: 71870},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1937, col: 21, offset: 71880},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PostReplacementSubs",
			pos:  position{line: 1941, col: 1, offset: 72028},
			expr: &seqExpr{
				pos: position{line: 1941, col: 24, offset: 72051},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1941, col: 24, offset: 72051},
						expr: &choiceExpr{
							pos: position{line: 1942, col: 5, offset: 72057},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1942, col: 5, offset: 72057},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1943, col: 7, offset: 72114},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1944, col: 7, offset: 72139},
									name: "LineBreak",
								},
								&oneOrMoreExpr{
									pos: position{line: 1945, col: 7, offset: 72182},
									expr: &ruleRefExpr{
										pos:  position{line: 1945, col: 7, offset: 72182},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1946, col: 7, offset: 72196},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1947, col: 7, offset: 72210},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1947, col: 17, offset: 72220},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CalloutSubs",
			pos:  position{line: 1950, col: 1, offset: 72277},
			expr: &seqExpr{
				pos: position{line: 1951, col: 5, offset: 72297},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1951, col: 5, offset: 72297},
						expr: &choiceExpr{
							pos: position{line: 1951, col: 6, offset: 72298},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1951, col: 6, offset: 72298},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1952, col: 11, offset: 72359},
									name: "ElementPlaceHolder",
								},
								&oneOrMoreExpr{
									pos: position{line: 1953, col: 11, offset: 72388},
									expr: &ruleRefExpr{
										pos:  position{line: 1953, col: 11, offset: 72388},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1954, col: 11, offset: 72405},
									name: "Callout",
								},
								&ruleRefExpr{
									pos:  position{line: 1955, col: 11, offset: 72423},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1956, col: 11, offset: 72441},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1956, col: 21, offset: 72451},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1958, col: 1, offset: 72456},
			expr: &actionExpr{
				pos: position{line: 1958, col: 12, offset: 72467},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1958, col: 12, offset: 72467},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1958, col: 12, offset: 72467},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1958, col: 16, offset: 72471},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1958, col: 21, offset: 72476},
								run: (*parser).callonCallout5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1958, col: 21, offset: 72476},
									expr: &charClassMatcher{
										pos:        position{line: 1958, col: 21, offset: 72476},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1958, col: 69, offset: 72524},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1958, col: 73, offset: 72528},
							expr: &ruleRefExpr{
								pos:  position{line: 1958, col: 73, offset: 72528},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1958, col: 80, offset: 72535},
							expr: &choiceExpr{
								pos: position{line: 1958, col: 82, offset: 72537},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1958, col: 82, offset: 72537},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 1958, col: 88, offset: 72543},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NoneSubs",
			pos:  position{line: 1963, col: 1, offset: 72643},
			expr: &seqExpr{
				pos: position{line: 1963, col: 13, offset: 72655},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1963, col: 13, offset: 72655},
						expr: &choiceExpr{
							pos: position{line: 1964, col: 5, offset: 72661},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1964, col: 5, offset: 72661},
									name: "ElementPlaceHolder",
								},
								&actionExpr{
									pos: position{line: 1965, col: 8, offset: 72688},
									run: (*parser).callonNoneSubs5,
									expr: &seqExpr{
										pos: position{line: 1965, col: 8, offset: 72688},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1965, col: 8, offset: 72688},
												expr: &ruleRefExpr{
													pos:  position{line: 1965, col: 9, offset: 72689},
													name: "EOF",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 1965, col: 13, offset: 72693},
												expr: &charClassMatcher{
													pos:        position{line: 1965, col: 13, offset: 72693},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1965, col: 22, offset: 72702},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1967, col: 10, offset: 72807},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1972, col: 1, offset: 73000},
			expr: &actionExpr{
				pos: position{line: 1972, col: 10, offset: 73009},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1972, col: 10, offset: 73009},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1972, col: 10, offset: 73009},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1972, col: 16, offset: 73015},
								expr: &zeroOrMoreExpr{
									pos: position{line: 1972, col: 17, offset: 73016},
									expr: &ruleRefExpr{
										pos:  position{line: 1972, col: 17, offset: 73016},
										name: "BlockAttrs",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1972, col: 31, offset: 73030},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1973, col: 5, offset: 73049},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1973, col: 12, offset: 73056},
								expr: &ruleRefExpr{
									pos:  position{line: 1973, col: 13, offset: 73057},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1974, col: 5, offset: 73079},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1974, col: 11, offset: 73085},
								expr: &ruleRefExpr{
									pos:  position{line: 1974, col: 12, offset: 73086},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1975, col: 6, offset: 73103},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1975, col: 6, offset: 73103},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1975, col: 23, offset: 73120},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1979, col: 1, offset: 73230},
			expr: &seqExpr{
				pos: position{line: 1979, col: 23, offset: 73252},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1979, col: 23, offset: 73252},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1979, col: 27, offset: 73256},
						expr: &ruleRefExpr{
							pos:  position{line: 1979, col: 27, offset: 73256},
							name: "Space",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1981, col: 1, offset: 73264},
			expr: &seqExpr{
				pos: position{line: 1981, col: 19, offset: 73282},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1981, col: 19, offset: 73282},
						val:        "|===",
						ignoreCase: false,
						want:       "\"|===\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1981, col: 26, offset: 73289},
						expr: &ruleRefExpr{
							pos:  position{line: 1981, col: 26, offset: 73289},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1981, col: 33, offset: 73296},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1984, col: 1, offset: 73364},
			expr: &actionExpr{
				pos: position{line: 1984, col: 20, offset: 73383},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1984, col: 20, offset: 73383},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1984, col: 20, offset: 73383},
							expr: &ruleRefExpr{
								pos:  position{line: 1984, col: 21, offset: 73384},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1984, col: 36, offset: 73399},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1984, col: 42, offset: 73405},
								expr: &ruleRefExpr{
									pos:  position{line: 1984, col: 43, offset: 73406},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1984, col: 55, offset: 73418},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1984, col: 59, offset: 73422},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1988, col: 1, offset: 73490},
			expr: &actionExpr{
				pos: position{line: 1988, col: 14, offset: 73503},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1988, col: 14, offset: 73503},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1988, col: 14, offset: 73503},
							expr: &ruleRefExpr{
								pos:  position{line: 1988, col: 15, offset: 73504},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1988, col: 30, offset: 73519},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1988, col: 36, offset: 73525},
								expr: &ruleRefExpr{
									pos:  position{line: 1988, col: 37, offset: 73526},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1988, col: 49, offset: 73538},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1988, col: 53, offset: 73542},
							expr: &ruleRefExpr{
								pos:  position{line: 1988, col: 53, offset: 73542},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1992, col: 1, offset: 73611},
			expr: &actionExpr{
				pos: position{line: 1992, col: 14, offset: 73624},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1992, col: 14, offset: 73624},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1992, col: 14, offset: 73624},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1992, col: 33, offset: 73643},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1992, col: 42, offset: 73652},
								expr: &seqExpr{
									pos: position{line: 1992, col: 43, offset: 73653},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1992, col: 43, offset: 73653},
											expr: &ruleRefExpr{
												pos:  position{line: 1992, col: 44, offset: 73654},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1992, col: 63, offset: 73673},
											expr: &ruleRefExpr{
												pos:  position{line: 1992, col: 64, offset: 73674},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1992, col: 68, offset: 73678},
											expr: &ruleRefExpr{
												pos:  position{line: 1992, col: 68, offset: 73678},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1992, col: 75, offset: 73685},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1992, col: 89, offset: 73699},
											expr: &ruleRefExpr{
												pos:  position{line: 1992, col: 89, offset: 73699},
												name: "Space",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1999, col: 1, offset: 73948},
			expr: &seqExpr{
				pos: position{line: 1999, col: 26, offset: 73973},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1999, col: 26, offset: 73973},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1999, col: 33, offset: 73980},
						expr: &ruleRefExpr{
							pos:  position{line: 1999, col: 33, offset: 73980},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1999, col: 40, offset: 73987},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 2001, col: 1, offset: 73992},
			expr: &seqExpr{
				pos: position{line: 2001, col: 31, offset: 74022},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2001, col: 31, offset: 74022},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2001, col: 38, offset: 74029},
						expr: &ruleRefExpr{
							pos:  position{line: 2001, col: 38, offset: 74029},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2001, col: 45, offset: 74036},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 2003, col: 1, offset: 74041},
			expr: &choiceExpr{
				pos: position{line: 2003, col: 29, offset: 74069},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 2003, col: 30, offset: 74070},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 2003, col: 30, offset: 74070},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 2003, col: 37, offset: 74077},
								expr: &ruleRefExpr{
									pos:  position{line: 2003, col: 37, offset: 74077},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 2003, col: 44, offset: 74084},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2003, col: 51, offset: 74091},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 2005, col: 1, offset: 74096},
			expr: &actionExpr{
				pos: position{line: 2005, col: 17, offset: 74112},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 2005, col: 17, offset: 74112},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2005, col: 17, offset: 74112},
							name: "CommentBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 2005, col: 44, offset: 74139},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 2005, col: 53, offset: 74148},
								name: "CommentBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2005, col: 78, offset: 74173},
							name: "CommentBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockRawContent",
			pos:  position{line: 2009, col: 1, offset: 74283},
			expr: &zeroOrMoreExpr{
				pos: position{line: 2009, col: 27, offset: 74309},
				expr: &actionExpr{
					pos: position{line: 2009, col: 28, offset: 74310},
					run: (*parser).callonCommentBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 2009, col: 28, offset: 74310},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 2009, col: 28, offset: 74310},
								expr: &ruleRefExpr{
									pos:  position{line: 2009, col: 29, offset: 74311},
									name: "CommentBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 2009, col: 54, offset: 74336},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 2009, col: 60, offset: 74342},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 2013, col: 1, offset: 74486},
			expr: &actionExpr{
				pos: position{line: 2013, col: 22, offset: 74507},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 2013, col: 22, offset: 74507},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2013, col: 22, offset: 74507},
							expr: &ruleRefExpr{
								pos:  position{line: 2013, col: 23, offset: 74508},
								name: "CommentBlockDelimiter",
							},
						},
						&litMatcher{
							pos:        position{line: 2013, col: 45, offset: 74530},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 2013, col: 50, offset: 74535},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 2013, col: 59, offset: 74544},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2013, col: 85, offset: 74570},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 2017, col: 1, offset: 74635},
			expr: &actionExpr{
				pos: position{line: 2017, col: 29, offset: 74663},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 2017, col: 29, offset: 74663},
					expr: &charClassMatcher{
						pos:        position{line: 2017, col: 29, offset: 74663},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 2025, col: 1, offset: 74976},
			expr: &choiceExpr{
				pos: position{line: 2025, col: 17, offset: 74992},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2025, col: 17, offset: 74992},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 2025, col: 49, offset: 75024},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 2025, col: 78, offset: 75053},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 2027, col: 1, offset: 75089},
			expr: &litMatcher{
				pos:        position{line: 2027, col: 26, offset: 75114},
				val:        "....",
				ignoreCase: false,
				want:       "\"....\"",
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 2030, col: 1, offset: 75186},
			expr: &actionExpr{
				pos: position{line: 2030, col: 31, offset: 75216},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 2030, col: 31, offset: 75216},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2030, col: 31, offset: 75216},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2030, col: 42, offset: 75227},
								expr: &ruleRefExpr{
									pos:  position{line: 2030, col: 43, offset: 75228},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2030, col: 56, offset: 75241},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 2030, col: 63, offset: 75248},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 2035, col: 1, offset: 75478},
			expr: &actionExpr{
				pos: position{line: 2036, col: 5, offset: 75518},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 2036, col: 5, offset: 75518},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2036, col: 5, offset: 75518},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 2036, col: 16, offset: 75529},
								run: (*parser).callonParagraphWithHeadingSpacesLines4,
								expr: &seqExpr{
									pos: position{line: 2036, col: 16, offset: 75529},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 2036, col: 16, offset: 75529},
											expr: &ruleRefExpr{
												pos:  position{line: 2036, col: 16, offset: 75529},
												name: "Space",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 2036, col: 23, offset: 75536},
											expr: &charClassMatcher{
												pos:        position{line: 2036, col: 23, offset: 75536},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2038, col: 8, offset: 75589},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 2039, col: 5, offset: 75652},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2039, col: 16, offset: 75663},
								expr: &actionExpr{
									pos: position{line: 2040, col: 9, offset: 75673},
									run: (*parser).callonParagraphWithHeadingSpacesLines13,
									expr: &seqExpr{
										pos: position{line: 2040, col: 9, offset: 75673},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2040, col: 9, offset: 75673},
												expr: &ruleRefExpr{
													pos:  position{line: 2040, col: 10, offset: 75674},
													name: "BlankLine",
												},
											},
											&labeledExpr{
												pos:   position{line: 2041, col: 9, offset: 75693},
												label: "otherLine",
												expr: &actionExpr{
													pos: position{line: 2041, col: 20, offset: 75704},
													run: (*parser).callonParagraphWithHeadingSpacesLines18,
													expr: &oneOrMoreExpr{
														pos: position{line: 2041, col: 20, offset: 75704},
														expr: &charClassMatcher{
															pos:        position{line: 2041, col: 20, offset: 75704},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 2043, col: 12, offset: 75765},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 2050, col: 1, offset: 75995},
			expr: &actionExpr{
				pos: position{line: 2050, col: 39, offset: 76033},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 2050, col: 39, offset: 76033},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2050, col: 39, offset: 76033},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2050, col: 50, offset: 76044},
								expr: &ruleRefExpr{
									pos:  position{line: 2050, col: 51, offset: 76045},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2051, col: 9, offset: 76066},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 2051, col: 31, offset: 76088},
							expr: &ruleRefExpr{
								pos:  position{line: 2051, col: 31, offset: 76088},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2051, col: 38, offset: 76095},
							name: "Newline",
						},
						&labeledExpr{
							pos:   position{line: 2051, col: 46, offset: 76103},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 2051, col: 53, offset: 76110},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 2051, col: 95, offset: 76152},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 2051, col: 96, offset: 76153},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2051, col: 96, offset: 76153},
											name: "LiteralBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2051, col: 118, offset: 76175},
											expr: &ruleRefExpr{
												pos:  position{line: 2051, col: 118, offset: 76175},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2051, col: 125, offset: 76182},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2051, col: 132, offset: 76189},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 2056, col: 1, offset: 76348},
			expr: &actionExpr{
				pos: position{line: 2056, col: 44, offset: 76391},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 2056, col: 44, offset: 76391},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 2056, col: 50, offset: 76397},
						expr: &ruleRefExpr{
							pos:  position{line: 2056, col: 51, offset: 76398},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 2060, col: 1, offset: 76482},
			expr: &actionExpr{
				pos: position{line: 2061, col: 5, offset: 76537},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 2061, col: 5, offset: 76537},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2061, col: 5, offset: 76537},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 2061, col: 11, offset: 76543},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &seqExpr{
									pos: position{line: 2061, col: 11, offset: 76543},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 2061, col: 11, offset: 76543},
											expr: &ruleRefExpr{
												pos:  position{line: 2061, col: 12, offset: 76544},
												name: "LiteralBlockDelimiter",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 2061, col: 34, offset: 76566},
											expr: &charClassMatcher{
												pos:        position{line: 2061, col: 34, offset: 76566},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2063, col: 8, offset: 76619},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 2068, col: 1, offset: 76745},
			expr: &actionExpr{
				pos: position{line: 2069, col: 5, offset: 76783},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 2069, col: 5, offset: 76783},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2069, col: 5, offset: 76783},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2069, col: 16, offset: 76794},
								expr: &ruleRefExpr{
									pos:  position{line: 2069, col: 17, offset: 76795},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2070, col: 5, offset: 76812},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 2077, col: 5, offset: 77019},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 2077, col: 12, offset: 77026},
								name: "ParagraphWithLiteralAttributeLines",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 2081, col: 1, offset: 77176},
			expr: &actionExpr{
				pos: position{line: 2081, col: 16, offset: 77191},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 2081, col: 16, offset: 77191},
					val:        "literal",
					ignoreCase: false,
					want:       "\"literal\"",
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLines",
			pos:  position{line: 2086, col: 1, offset: 77274},
			expr: &actionExpr{
				pos: position{line: 2086, col: 39, offset: 77312},
				run: (*parser).callonParagraphWithLiteralAttributeLines1,
				expr: &labeledExpr{
					pos:   position{line: 2086, col: 39, offset: 77312},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 2086, col: 45, offset: 77318},
						expr: &ruleRefExpr{
							pos:  position{line: 2086, col: 46, offset: 77319},
							name: "ParagraphWithLiteralAttributeLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLine",
			pos:  position{line: 2090, col: 1, offset: 77399},
			expr: &actionExpr{
				pos: position{line: 2090, col: 38, offset: 77436},
				run: (*parser).callonParagraphWithLiteralAttributeLine1,
				expr: &seqExpr{
					pos: position{line: 2090, col: 38, offset: 77436},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2090, col: 38, offset: 77436},
							expr: &ruleRefExpr{
								pos:  position{line: 2090, col: 39, offset: 77437},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 2090, col: 49, offset: 77447},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 2090, col: 58, offset: 77456},
								run: (*parser).callonParagraphWithLiteralAttributeLine6,
								expr: &oneOrMoreExpr{
									pos: position{line: 2090, col: 58, offset: 77456},
									expr: &charClassMatcher{
										pos:        position{line: 2090, col: 58, offset: 77456},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2092, col: 4, offset: 77501},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 2099, col: 1, offset: 77687},
			expr: &actionExpr{
				pos: position{line: 2099, col: 14, offset: 77700},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 2099, col: 14, offset: 77700},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2099, col: 14, offset: 77700},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 2099, col: 19, offset: 77705},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 2099, col: 25, offset: 77711},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 2099, col: 43, offset: 77729},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 2103, col: 1, offset: 77794},
			expr: &actionExpr{
				pos: position{line: 2103, col: 21, offset: 77814},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 2103, col: 21, offset: 77814},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 2103, col: 30, offset: 77823},
						expr: &choiceExpr{
							pos: position{line: 2103, col: 31, offset: 77824},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2103, col: 31, offset: 77824},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 2103, col: 38, offset: 77831},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 2103, col: 53, offset: 77846},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 2103, col: 66, offset: 77859},
									name: "Space",
								},
								&ruleRefExpr{
									pos:  position{line: 2103, col: 74, offset: 77867},
									name: "SpecialCharacter",
								},
								&ruleRefExpr{
									pos:  position{line: 2103, col: 93, offset: 77886},
									name: "ElementPlaceHolder",
								},
								&actionExpr{
									pos: position{line: 2103, col: 114, offset: 77907},
									run: (*parser).callonIndexTermContent11,
									expr: &seqExpr{
										pos: position{line: 2103, col: 115, offset: 77908},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2103, col: 115, offset: 77908},
												expr: &litMatcher{
													pos:        position{line: 2103, col: 116, offset: 77909},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 2103, col: 121, offset: 77914,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 2109, col: 1, offset: 78020},
			expr: &actionExpr{
				pos: position{line: 2109, col: 23, offset: 78042},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 2109, col: 23, offset: 78042},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2109, col: 23, offset: 78042},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 2109, col: 29, offset: 78048},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 2109, col: 36, offset: 78055},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 2110, col: 5, offset: 78087},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 2110, col: 11, offset: 78093},
								expr: &actionExpr{
									pos: position{line: 2110, col: 12, offset: 78094},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 2110, col: 12, offset: 78094},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2110, col: 12, offset: 78094},
												expr: &ruleRefExpr{
													pos:  position{line: 2110, col: 12, offset: 78094},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 2110, col: 19, offset: 78101},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2110, col: 23, offset: 78105},
												expr: &ruleRefExpr{
													pos:  position{line: 2110, col: 23, offset: 78105},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 2110, col: 30, offset: 78112},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 2110, col: 39, offset: 78121},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2111, col: 5, offset: 78179},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 2111, col: 11, offset: 78185},
								expr: &actionExpr{
									pos: position{line: 2111, col: 12, offset: 78186},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 2111, col: 12, offset: 78186},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2111, col: 12, offset: 78186},
												expr: &ruleRefExpr{
													pos:  position{line: 2111, col: 12, offset: 78186},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 2111, col: 19, offset: 78193},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2111, col: 23, offset: 78197},
												expr: &ruleRefExpr{
													pos:  position{line: 2111, col: 23, offset: 78197},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 2111, col: 30, offset: 78204},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 2111, col: 39, offset: 78213},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 2112, col: 5, offset: 78271},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 2116, col: 1, offset: 78350},
			expr: &actionExpr{
				pos: position{line: 2116, col: 30, offset: 78379},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2116, col: 30, offset: 78379},
					expr: &choiceExpr{
						pos: position{line: 2116, col: 31, offset: 78380},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 2116, col: 31, offset: 78380},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 2116, col: 42, offset: 78391},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 2123, col: 1, offset: 78540},
			expr: &actionExpr{
				pos: position{line: 2123, col: 14, offset: 78553},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 2123, col: 14, offset: 78553},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2123, col: 14, offset: 78553},
							expr: &ruleRefExpr{
								pos:  position{line: 2123, col: 15, offset: 78554},
								name: "EOF",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2123, col: 19, offset: 78558},
							expr: &ruleRefExpr{
								pos:  position{line: 2123, col: 19, offset: 78558},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2123, col: 26, offset: 78565},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Symbol",
			pos:  position{line: 2131, col: 1, offset: 78710},
			expr: &choiceExpr{
				pos: position{line: 2131, col: 11, offset: 78720},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2131, col: 11, offset: 78720},
						name: "Apostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 2131, col: 24, offset: 78733},
						name: "Copyright",
					},
					&ruleRefExpr{
						pos:  position{line: 2131, col: 36, offset: 78745},
						name: "Trademark",
					},
					&ruleRefExpr{
						pos:  position{line: 2131, col: 48, offset: 78757},
						name: "Registered",
					},
					&ruleRefExpr{
						pos:  position{line: 2131, col: 61, offset: 78770},
						name: "Ellipsis",
					},
					&ruleRefExpr{
						pos:  position{line: 2131, col: 72, offset: 78781},
						name: "ImpliedApostrophe",
					},
				},
			},
		},
		{
			name: "Apostrophe",
			pos:  position{line: 2133, col: 1, offset: 78800},
			expr: &actionExpr{
				pos: position{line: 2133, col: 15, offset: 78814},
				run: (*parser).callonApostrophe1,
				expr: &litMatcher{
					pos:        position{line: 2133, col: 15, offset: 78814},
					val:        "`'",
					ignoreCase: false,
					want:       "\"`'\"",
				},
			},
		},
		{
			name: "Copyright",
			pos:  position{line: 2136, col: 1, offset: 78867},
			expr: &actionExpr{
				pos: position{line: 2136, col: 14, offset: 78880},
				run: (*parser).callonCopyright1,
				expr: &litMatcher{
					pos:        position{line: 2136, col: 14, offset: 78880},
					val:        "(C)",
					ignoreCase: false,
					want:       "\"(C)\"",
				},
			},
		},
		{
			name: "Trademark",
			pos:  position{line: 2139, col: 1, offset: 78934},
			expr: &actionExpr{
				pos: position{line: 2139, col: 14, offset: 78947},
				run: (*parser).callonTrademark1,
				expr: &litMatcher{
					pos:        position{line: 2139, col: 14, offset: 78947},
					val:        "(TM)",
					ignoreCase: false,
					want:       "\"(TM)\"",
				},
			},
		},
		{
			name: "Registered",
			pos:  position{line: 2142, col: 1, offset: 79002},
			expr: &actionExpr{
				pos: position{line: 2142, col: 15, offset: 79016},
				run: (*parser).callonRegistered1,
				expr: &litMatcher{
					pos:        position{line: 2142, col: 15, offset: 79016},
					val:        "(R)",
					ignoreCase: false,
					want:       "\"(R)\"",
				},
			},
		},
		{
			name: "Ellipsis",
			pos:  position{line: 2145, col: 1, offset: 79070},
			expr: &actionExpr{
				pos: position{line: 2145, col: 13, offset: 79082},
				run: (*parser).callonEllipsis1,
				expr: &litMatcher{
					pos:        position{line: 2145, col: 13, offset: 79082},
					val:        "...",
					ignoreCase: false,
					want:       "\"...\"",
				},
			},
		},
		{
			name: "ImpliedApostrophe",
			pos:  position{line: 2153, col: 1, offset: 79359},
			expr: &actionExpr{
				pos: position{line: 2153, col: 22, offset: 79380},
				run: (*parser).callonImpliedApostrophe1,
				expr: &seqExpr{
					pos: position{line: 2153, col: 22, offset: 79380},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2153, col: 22, offset: 79380},
							name: "Alphanum",
						},
						&litMatcher{
							pos:        position{line: 2153, col: 31, offset: 79389},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&andExpr{
							pos: position{line: 2153, col: 35, offset: 79393},
							expr: &charClassMatcher{
								pos:        position{line: 2153, col: 36, offset: 79394},
								val:        "[\\pL]",
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "SpecialCharacter",
			pos:  position{line: 2162, col: 1, offset: 79756},
			expr: &choiceExpr{
				pos: position{line: 2162, col: 21, offset: 79776},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2162, col: 21, offset: 79776},
						run: (*parser).callonSpecialCharacter2,
						expr: &ruleRefExpr{
							pos:  position{line: 2162, col: 21, offset: 79776},
							name: "InternalCrossReference",
						},
					},
					&actionExpr{
						pos: position{line: 2165, col: 9, offset: 79939},
						run: (*parser).callonSpecialCharacter4,
						expr: &choiceExpr{
							pos: position{line: 2165, col: 10, offset: 79940},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 2165, col: 10, offset: 79940},
									val:        "<",
									ignoreCase: false,
									want:       "\"<\"",
								},
								&litMatcher{
									pos:        position{line: 2165, col: 16, offset: 79946},
									val:        ">",
									ignoreCase: false,
									want:       "\">\"",
								},
								&litMatcher{
									pos:        position{line: 2165, col: 22, offset: 79952},
									val:        "&",
									ignoreCase: false,
									want:       "\"&\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 2172, col: 1, offset: 80130},
			expr: &charClassMatcher{
				pos:        position{line: 2172, col: 13, offset: 80142},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 2174, col: 1, offset: 80152},
			expr: &choiceExpr{
				pos: position{line: 2174, col: 16, offset: 80167},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2174, col: 16, offset: 80167},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 2174, col: 22, offset: 80173},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 2174, col: 28, offset: 80179},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 2174, col: 34, offset: 80185},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 2174, col: 40, offset: 80191},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 2174, col: 46, offset: 80197},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 2176, col: 1, offset: 80203},
			expr: &actionExpr{
				pos: position{line: 2176, col: 14, offset: 80216},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2176, col: 14, offset: 80216},
					expr: &charClassMatcher{
						pos:        position{line: 2176, col: 14, offset: 80216},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 2180, col: 1, offset: 80262},
			expr: &choiceExpr{
				pos: position{line: 2184, col: 5, offset: 80589},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2184, col: 5, offset: 80589},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 2184, col: 5, offset: 80589},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2184, col: 5, offset: 80589},
									expr: &charClassMatcher{
										pos:        position{line: 2184, col: 5, offset: 80589},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2184, col: 15, offset: 80599},
									expr: &choiceExpr{
										pos: position{line: 2184, col: 17, offset: 80601},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2184, col: 17, offset: 80601},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2184, col: 30, offset: 80614},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2186, col: 9, offset: 80684},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 2186, col: 9, offset: 80684},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2186, col: 9, offset: 80684},
									expr: &charClassMatcher{
										pos:        position{line: 2186, col: 9, offset: 80684},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 2186, col: 19, offset: 80694},
									expr: &seqExpr{
										pos: position{line: 2186, col: 20, offset: 80695},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2186, col: 20, offset: 80695},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 2186, col: 27, offset: 80702},
												expr: &charClassMatcher{
													pos:        position{line: 2186, col: 27, offset: 80702},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 2190, col: 1, offset: 80778},
			expr: &choiceExpr{
				pos: position{line: 2191, col: 5, offset: 80859},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2191, col: 5, offset: 80859},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 2191, col: 5, offset: 80859},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2191, col: 5, offset: 80859},
									expr: &charClassMatcher{
										pos:        position{line: 2191, col: 5, offset: 80859},
										val:        "[\\pL0-9,?!;]",
										chars:      []rune{',', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2191, col: 19, offset: 80873},
									expr: &choiceExpr{
										pos: position{line: 2191, col: 21, offset: 80875},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2191, col: 21, offset: 80875},
												val:        "[\\r\\n ]",
												chars:      []rune{'\r', '\n', ' '},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2191, col: 31, offset: 80885},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2193, col: 9, offset: 80954},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 2196, col: 1, offset: 81054},
			expr: &actionExpr{
				pos: position{line: 2196, col: 12, offset: 81065},
				run: (*parser).callonAnyChar1,
				expr: &charClassMatcher{
					pos:        position{line: 2196, col: 12, offset: 81065},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 2200, col: 1, offset: 81130},
			expr: &actionExpr{
				pos: position{line: 2200, col: 17, offset: 81146},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2200, col: 17, offset: 81146},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2200, col: 22, offset: 81151},
						expr: &choiceExpr{
							pos: position{line: 2200, col: 23, offset: 81152},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2200, col: 23, offset: 81152},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 2200, col: 34, offset: 81163},
									name: "ElementPlaceHolder",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedFileLocation",
			pos:  position{line: 2204, col: 1, offset: 81244},
			expr: &actionExpr{
				pos: position{line: 2204, col: 25, offset: 81268},
				run: (*parser).callonResolvedFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2204, col: 25, offset: 81268},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2204, col: 30, offset: 81273},
						expr: &charClassMatcher{
							pos:        position{line: 2204, col: 31, offset: 81274},
							val:        "[^\\r\\n []",
							chars:      []rune{'\r', '\n', ' ', '['},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 2208, col: 1, offset: 81346},
			expr: &actionExpr{
				pos: position{line: 2208, col: 13, offset: 81358},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 2208, col: 13, offset: 81358},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2208, col: 13, offset: 81358},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 2208, col: 20, offset: 81365},
								expr: &ruleRefExpr{
									pos:  position{line: 2208, col: 21, offset: 81366},
									name: "URL_SCHEME",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2208, col: 34, offset: 81379},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2208, col: 39, offset: 81384},
								expr: &choiceExpr{
									pos: position{line: 2208, col: 40, offset: 81385},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2208, col: 40, offset: 81385},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 2208, col: 52, offset: 81397},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 2212, col: 1, offset: 81482},
			expr: &actionExpr{
				pos: position{line: 2212, col: 23, offset: 81504},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 2212, col: 23, offset: 81504},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2212, col: 23, offset: 81504},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2212, col: 31, offset: 81512},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 2212, col: 43, offset: 81524},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2212, col: 48, offset: 81529},
								expr: &choiceExpr{
									pos: position{line: 2212, col: 49, offset: 81530},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2212, col: 49, offset: 81530},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 2212, col: 60, offset: 81541},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 2216, col: 1, offset: 81626},
			expr: &oneOrMoreExpr{
				pos: position{line: 2216, col: 13, offset: 81638},
				expr: &charClassMatcher{
					pos:        position{line: 2216, col: 14, offset: 81639},
					val:        "[^\\r\\n[\\]\\uFFFD ]",
					chars:      []rune{'\r', '\n', '[', ']', '�', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "ResolvedLocation",
			pos:  position{line: 2218, col: 1, offset: 81707},
			expr: &actionExpr{
				pos: position{line: 2218, col: 21, offset: 81727},
				run: (*parser).callonResolvedLocation1,
				expr: &seqExpr{
					pos: position{line: 2218, col: 21, offset: 81727},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2218, col: 21, offset: 81727},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2218, col: 29, offset: 81735},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 2218, col: 41, offset: 81747},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 2218, col: 47, offset: 81753},
								name: "RESOLVED_FILENAME",
							},
						},
					},
				},
			},
		},
		{
			name: "RESOLVED_FILENAME",
			pos:  position{line: 2223, col: 1, offset: 82001},
			expr: &oneOrMoreExpr{
				pos: position{line: 2223, col: 22, offset: 82022},
				expr: &charClassMatcher{
					pos:        position{line: 2223, col: 23, offset: 82023},
					val:        "[^\\r\\n[\\] ]",
					chars:      []rune{'\r', '\n', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 2225, col: 1, offset: 82155},
			expr: &actionExpr{
				pos: position{line: 2225, col: 9, offset: 82163},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2225, col: 9, offset: 82163},
					expr: &charClassMatcher{
						pos:        position{line: 2225, col: 9, offset: 82163},
						val:        "[^\\r\\n[\\]]",
						chars:      []rune{'\r', '\n', '[', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 2229, col: 1, offset: 82211},
			expr: &choiceExpr{
				pos: position{line: 2229, col: 15, offset: 82225},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2229, col: 15, offset: 82225},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 2229, col: 27, offset: 82237},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 2229, col: 40, offset: 82250},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 2229, col: 51, offset: 82261},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 2229, col: 62, offset: 82272},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 2231, col: 1, offset: 82283},
			expr: &actionExpr{
				pos: position{line: 2231, col: 7, offset: 82289},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2231, col: 7, offset: 82289},
					expr: &charClassMatcher{
						pos:        position{line: 2231, col: 7, offset: 82289},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 2235, col: 1, offset: 82414},
			expr: &actionExpr{
				pos: position{line: 2235, col: 10, offset: 82423},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 2235, col: 10, offset: 82423},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 2239, col: 1, offset: 82465},
			expr: &actionExpr{
				pos: position{line: 2239, col: 11, offset: 82475},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 2239, col: 11, offset: 82475},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 2239, col: 11, offset: 82475},
							expr: &litMatcher{
								pos:        position{line: 2239, col: 11, offset: 82475},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 2239, col: 16, offset: 82480},
							expr: &ruleRefExpr{
								pos:  position{line: 2239, col: 16, offset: 82480},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 2243, col: 1, offset: 82532},
			expr: &choiceExpr{
				pos: position{line: 2243, col: 10, offset: 82541},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2243, col: 10, offset: 82541},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 2243, col: 16, offset: 82547},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 2243, col: 16, offset: 82547},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 2247, col: 1, offset: 82588},
			expr: &choiceExpr{
				pos: position{line: 2247, col: 12, offset: 82599},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2247, col: 12, offset: 82599},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&litMatcher{
						pos:        position{line: 2247, col: 21, offset: 82608},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
					&litMatcher{
						pos:        position{line: 2247, col: 28, offset: 82615},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 2249, col: 1, offset: 82621},
			expr: &notExpr{
				pos: position{line: 2249, col: 8, offset: 82628},
				expr: &anyMatcher{
					line: 2249, col: 9, offset: 82629,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 2251, col: 1, offset: 82632},
			expr: &choiceExpr{
				pos: position{line: 2251, col: 8, offset: 82639},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2251, col: 8, offset: 82639},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 2251, col: 18, offset: 82649},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onAsciidocRawDocument1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewRawDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonAsciidocRawDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocRawDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onRawFile1(blocks interface{}) (interface{}, error) {
	return types.NewRawDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonRawFile1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawFile1(stack["blocks"])
}

func (c *current) onTextDocument1(blocks interface{}) (interface{}, error) {
	return types.NewRawDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonTextDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocument1(stack["blocks"])
}

func (c *current) onRawDocumentBlocks1(header, blocks interface{}) (interface{}, error) {
	if header != nil && blocks != nil {
		return append([]interface{}{header}, blocks.([]interface{})...), nil
	} else if blocks != nil {
		return blocks.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonRawDocumentBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawDocumentBlocks1(stack["header"], stack["blocks"])
}

func (c *current) onDocumentBlockWithinDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlockWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlockWithinDelimitedBlock1(stack["block"])
}

func (c *current) onTextDocumentBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonTextDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocumentBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentHeader(title.([]interface{}), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onAttributeDeclaration9(value interface{}) (interface{}, error) {

	return value, nil

}

func (p *parser) callonAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration9(stack["value"])
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	return types.NewAttributeDeclaration(name.(string), value)
}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeName1()
}

func (c *current) onAttributeDeclarationValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1()
}

func (c *current) onAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset11(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset11(stack["name"])
}

func (c *current) onAttrSub1(name interface{}) (interface{}, error) {
	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttrSub1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrSub1(stack["name"])
}

func (c *current) onCounterSub11(name interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, nil)
}

func (p *parser) callonCounterSub11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSub11(stack["name"])
}

func (c *current) onCounterSub21(name interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonCounterSub21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSub21(stack["name"])
}

func (c *current) onCounterSubAlpha1(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonCounterSubAlpha1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubAlpha1(stack["name"], stack["start"])
}

func (c *current) onCounterSubAlpha21(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, start)
}

func (p *parser) callonCounterSubAlpha21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubAlpha21(stack["name"], stack["start"])
}

func (c *current) onCounterSubStart8() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCounterSubStart8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart8()
}

func (c *current) onCounterSubStart1(name, num interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, num.(int))
}

func (p *parser) callonCounterSubStart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart1(stack["name"], stack["num"])
}

func (c *current) onCounterSubStart28() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCounterSubStart28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart28()
}

func (c *current) onCounterSubStart21(name, num interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, num.(int))
}

func (p *parser) callonCounterSubStart21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart21(stack["name"], stack["num"])
}

func (c *current) onAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {
	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID1(id interface{}) (interface{}, error) {
	return types.NewElementID(id)
}

func (p *parser) callonElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID1(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {
	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementTitleContent1() (interface{}, error) {
	// "<" and ">" characters are not allowed as they are used as cross-reference markers
	return string(c.text), nil
}

func (p *parser) callonElementTitleContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitleContent1()
}

func (c *current) onElementShortHandAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonElementShortHandAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementShortHandAttributes1(stack["attrs"])
}

func (c *current) onBlockAttrList1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonBlockAttrList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrList1(stack["attrs"])
}

func (c *current) onBlockAttrStyle1(style interface{}) (interface{}, error) {
	return types.NewElementStyle(style)
}

func (p *parser) callonBlockAttrStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrStyle1(stack["style"])
}

func (c *current) onBlockAttrPositional21(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewElementNamedAttr(types.AttrPositional2, value)
	}
	return nil, nil
}

func (p *parser) callonBlockAttrPositional21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrPositional21(stack["value"])
}

func (c *current) onBlockAttrPositional31(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewElementNamedAttr(types.AttrPositional3, value)
	}
	return nil, nil
}

func (p *parser) callonBlockAttrPositional31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrPositional31(stack["value"])
}

func (c *current) onLiteralAttribute1() (interface{}, error) {
	return types.NewLiteralAttribute()
}

func (p *parser) callonLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralAttribute1()
}

func (c *current) onPassthroughBlockAttribute1() (interface{}, error) {
	return types.NewPassthroughBlockAttribute()
}

func (p *parser) callonPassthroughBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {
	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes6(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes6(stack["attr"])
}

func (c *current) onSourceAttributes14(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes14(stack["attr"])
}

func (c *current) onSourceAttributes1(language, others interface{}) (interface{}, error) {
	return types.NewSourceAttributes(language, others.([]interface{})...)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["language"], stack["others"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttributeWithValue1(key, value interface{}) (interface{}, error) {
	// value is (optionally) set
	return types.NewGenericAttribute(key.(string), value)
}

func (p *parser) callonGenericAttributeWithValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithValue1(stack["key"], stack["value"])
}

func (c *current) onGenericAttributeWithoutValue1(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.(string), nil)
}

func (p *parser) callonGenericAttributeWithoutValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithoutValue1(stack["key"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onStandaloneAttributeValue1(value interface{}) (interface{}, error) {
	// standalone attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonStandaloneAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributeValue1(stack["value"])
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onQuotedTextAttrs1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonQuotedTextAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrs1(stack["attrs"])
}

func (c *current) onQuotedTextAttrRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role)
}

func (p *parser) callonQuotedTextAttrRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrRole1(stack["role"])
}

func (c *current) onStandaloneAttributes1(attributes interface{}) (interface{}, error) {
	// standalone attributes, i.e., with nothing afterwards
	return types.NewAttributes(attributes)
}

func (p *parser) callonStandaloneAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributes1(stack["attributes"])
}

func (c *current) onShortHandAttrOption1(option interface{}) (interface{}, error) {
	return types.NewElementOption(option)
}

func (p *parser) callonShortHandAttrOption1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrOption1(stack["option"])
}

func (c *current) onShortHandAttrID1(id interface{}) (interface{}, error) {
	return types.NewElementID(id)
}

func (p *parser) callonShortHandAttrID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrID1(stack["id"])
}

func (c *current) onShortHandAttrRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role)
}

func (p *parser) callonShortHandAttrRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrRole1(stack["role"])
}

func (c *current) onPositionalValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonPositionalValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalValue1(stack["value"])
}

func (c *current) onNamedAttrs1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonNamedAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrs1(stack["attrs"])
}

func (c *current) onNamedAttrPair1(n, v interface{}) (interface{}, error) {
	return types.NewElementNamedAttr(n.(string), v.(string))
}

func (p *parser) callonNamedAttrPair1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrPair1(stack["n"], stack["v"])
}

func (c *current) onAttrEmpty1() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonAttrEmpty1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrEmpty1()
}

func (c *current) onAttrValSQ1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonAttrValSQ1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValSQ1(stack["val"])
}

func (c *current) onAttrValSQin1(val interface{}) (interface{}, error) {
	return types.NewString(val)
}

func (p *parser) callonAttrValSQin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValSQin1(stack["val"])
}

func (c *current) onAttrValSQEsc1() (interface{}, error) {
	return `'`, nil
}

func (p *parser) callonAttrValSQEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValSQEsc1()
}

func (c *current) onAttrValDQ1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonAttrValDQ1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValDQ1(stack["val"])
}

func (c *current) onAttrValDQin1(val interface{}) (interface{}, error) {
	return types.NewString(val)
}

func (p *parser) callonAttrValDQin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValDQin1(stack["val"])
}

func (c *current) onAttrValDQEsc1() (interface{}, error) {
	return `"`, nil
}

func (p *parser) callonAttrValDQEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValDQEsc1()
}

func (c *current) onAttrValPosFB1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonAttrValPosFB1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValPosFB1()
}

func (c *current) onAttrValNamedFB1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonAttrValNamedFB1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValNamedFB1()
}

func (c *current) onShortHandValuePlain4() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandValuePlain4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandValuePlain4()
}

func (c *current) onShortHandValuePlain12() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandValuePlain12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandValuePlain12()
}

func (c *current) onShortHandValuePlain1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonShortHandValuePlain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandValuePlain1(stack["first"], stack["others"])
}

func (c *current) onNamedAttr1(key, value interface{}) (interface{}, error) {
	return types.NewElementNamedAttr(key.(string), value)
}

func (p *parser) callonNamedAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttr1(stack["key"], stack["value"])
}

func (c *current) onNamedAttrKey1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonNamedAttrKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrKey1()
}

func (c *current) onAttrValuePlain1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttrValuePlain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValuePlain1()
}

func (c *current) onAttrValueSingleQuoted7() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttrValueSingleQuoted7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueSingleQuoted7()
}

func (c *current) onAttrValueSingleQuoted1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonAttrValueSingleQuoted1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueSingleQuoted1(stack["elements"])
}

func (c *current) onAttrValueDoubleQuoted7() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttrValueDoubleQuoted7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueDoubleQuoted7()
}

func (c *current) onAttrValueDoubleQuoted1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonAttrValueDoubleQuoted1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueDoubleQuoted1(stack["elements"])
}

func (c *current) onAttrValueNone1() (interface{}, error) {
	return "", nil
}

func (p *parser) callonAttrValueNone1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueNone1()
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.([]interface{}), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedLineRanges10(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleQuotedLineRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges10(stack["other"])
}

func (c *current) onMultipleQuotedLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onMultiLineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onSingleLineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onTagRangesAttribute1(tags interface{}) (interface{}, error) {
	//TODO: check if 'tags'/'tag' is allowed for both single and multiple values
	return types.NewTagRangesAttribute(tags.([]interface{}))
}

func (p *parser) callonTagRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttribute1(stack["tags"])
}

func (c *current) onTagRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonTagRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {
	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(element interface{}) (interface{}, error) {
	return types.NewContinuedListItemElement(element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["element"])
}

func (c *current) onContinuedListItemContent1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonContinuedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent1(stack["content"])
}

func (c *current) onOrderedListItem1(attrs, prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attrs)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attrs"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attrs, prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attrs)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attrs"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {
	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attrs, term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListItem(len(separator.(string))-1, term.([]interface{}), description, attrs)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attrs"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onVerbatimLabeledListItemTerm3() (interface{}, error) {
	return types.NewStringElement(strings.TrimSpace(string(c.text)))
}

func (p *parser) callonVerbatimLabeledListItemTerm3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm3()
}

func (c *current) onVerbatimLabeledListItemTerm1(content interface{}) (interface{}, error) {
	return types.NewInlineElements(content)
}

func (p *parser) callonVerbatimLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm1(stack["content"])
}

func (c *current) onLabeledListItemTerm1(elements interface{}) (interface{}, error) {
	// rule as an extra entrypoint
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1(stack["elements"])
}

func (c *current) onLabeledListItemTermElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonLabeledListItemTermElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement1(stack["element"])
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil

}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil

}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil

}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil

}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onRawParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonRawParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onRawParagraph15(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.MarkdownQuote, content.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph15(stack["attributes"], stack["content"])
}

func (c *current) onRawParagraph28(attributes interface{}) (bool, error) {

	// verify that one of the attributes is `passthrough`
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return exists && kind == types.Passthrough, nil
	}
	return false, nil

}

func (p *parser) callonRawParagraph28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph28(stack["attributes"])
}

func (c *current) onRawParagraph23(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph23(stack["attributes"], stack["content"])
}

func (c *current) onRawParagraph34(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph34(stack["attributes"], stack["lines"])
}

func (c *current) onMarkdownQuoteBlockRawContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonMarkdownQuoteBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockRawContent2(stack["content"])
}

func (c *current) onRawParagraphLine6(content interface{}) (bool, error) {
	// exclude line if it is a blankline
	if strings.Trim(content.(string), " \t") == "" {
		return false, nil
	}
	return true, nil

}

func (p *parser) callonRawParagraphLine6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLine6(stack["content"])
}

func (c *current) onRawParagraphLine1(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonRawParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLine1(stack["content"])
}

func (c *current) onRawParagraphLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonRawParagraphLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLineContent1()
}

func (c *current) onSimpleRawParagraph6(attributes interface{}) (bool, error) {
	// skip if the '[literal]' attribute was set on this paragraph
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return !exists || kind != types.Literal, nil
	}
	return true, nil

}

func (p *parser) callonSimpleRawParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleRawParagraph6(stack["attributes"])
}

func (c *current) onSimpleRawParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleRawParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleRawParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphRawLine4(elements interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFirstParagraphRawLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphRawLine4(stack["elements"])
}

func (c *current) onFirstParagraphRawLine1(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))
}

func (p *parser) callonFirstParagraphRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphRawLine1(stack["content"])
}

func (c *current) onParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onParagraph18(attributes interface{}) (bool, error) {

	// verify that one of the attributes is `passthrough`
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return exists && kind == types.Passthrough, nil
	}
	return false, nil

}

func (p *parser) callonParagraph18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph18(stack["attributes"])
}

func (c *current) onParagraph13(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)

}

func (p *parser) callonParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph13(stack["attributes"], stack["content"])
}

func (c *current) onParagraph24(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonParagraph24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph24(stack["attributes"], stack["lines"])
}

func (c *current) onContinuedRawParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonContinuedRawParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onContinuedRawParagraph12(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonContinuedRawParagraph12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraph12(stack["attributes"], stack["lines"])
}

func (c *current) onContinuedRawParagraphLines7(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonContinuedRawParagraphLines7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraphLines7(stack["line"])
}

func (c *current) onContinuedRawParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {
	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonContinuedRawParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onRawVerseParagraph6(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonRawVerseParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawVerseParagraph6(stack["attributes"])
}

func (c *current) onRawVerseParagraph1(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonRawVerseParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawVerseParagraph1(stack["attributes"], stack["lines"])
}

func (c *current) onInlineElements7(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["comment"])
}

func (c *current) onInlineElements10(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements10(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onConstrainedQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonConstrainedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstrainedQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(attrs, elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldText17(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText17(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextElement14() (interface{}, error) {
	// must be before SingleQuoteMonospaceText
	// do not convert to apostrophe (yet)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement14()
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextElement22() (interface{}, error) {
	// do not convert to apostrophe (yet)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement22()
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.SingleQuote, elements.([]interface{}))
}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringFallbackCharacter3()
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.DoubleQuote, elements.([]interface{}))
}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringFallbackCharacter1()
}

func (c *current) onDoubleQuoteMarkedText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMarkedText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '##' to emphazise a portion of a word)
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation.
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteMarkedText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))
}

func (p *parser) callonEscapedMarkedText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, attrs, element)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, attrs, element)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), label.(string))
}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), nil)
}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onLinkAttributes1(firstAttr, otherattrs interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(append(firstAttr.([]interface{}), otherattrs.([]interface{})...))
}

func (p *parser) callonLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkAttributes1(stack["firstAttr"], stack["otherattrs"])
}

func (c *current) onFirstLinkAttributeElement4(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement4(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement20(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement20(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonFirstLinkAttributeElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement1(stack["element"])
}

func (c *current) onAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeChar1()
}

func (c *current) onQuotedAttributeChar1() (interface{}, error) {
	// does not exclude comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonQuotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedAttributeChar1()
}

func (c *current) onUnquotedAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonUnquotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeChar1()
}

func (c *current) onInlineLinks1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonInlineLinks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineLinks1(stack["elements"])
}

func (c *current) onResolvedRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonResolvedRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onResolvedExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonResolvedExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttrs interface{}) (interface{}, error) {
	// 'imagesdir' attribute is added after applying the attribute substitutions on the image location
	return types.NewImageBlock(path.(types.Location), inlineAttrs.(types.Attributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttrs"])
}

func (c *current) onInlineImage1(path, inlineAttrs interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(types.Location), inlineAttrs.(types.Attributes), c.globalStore["imagesdir"])
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttrs"])
}

func (c *current) onInlineImageAttrs1(alt, w, h, nv interface{}) (interface{}, error) {
	return types.NewElementAttributes(alt, w, h, nv)
}

func (p *parser) callonInlineImageAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImageAttrs1(stack["alt"], stack["w"], stack["h"], stack["nv"])
}

func (c *current) onImageAttrList1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonImageAttrList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttrList1(stack["attrs"])
}

func (c *current) onImageAltInline1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrImageAlt, value)
}

func (p *parser) callonImageAltInline1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAltInline1(stack["value"])
}

func (c *current) onImageWidth1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrWidth, value)
}

func (p *parser) callonImageWidth1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageWidth1(stack["value"])
}

func (c *current) onImageHeight1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrImageHeight, value)
}

func (p *parser) callonImageHeight1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageHeight1(stack["value"])
}

func (c *current) onImageAltAttr1(value interface{}) (interface{}, error) {
	return types.NewElementNamedAttr(types.AttrImageAlt, value)
}

func (p *parser) callonImageAltAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAltAttr1(stack["value"])
}

func (c *current) onImageWidthAttr1(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewElementNamedAttr(types.AttrWidth, value)
	}
	return nil, nil
}

func (p *parser) callonImageWidthAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageWidthAttr1(stack["value"])
}

func (c *current) onImageHeightAttr1(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewElementNamedAttr(types.AttrImageHeight, value)
	}
	return nil, nil
}

func (p *parser) callonImageHeightAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageHeightAttr1(stack["value"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(icon, attrs interface{}) (interface{}, error) {
	return types.NewIcon(icon.(string), attrs.(types.Attributes))
}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["icon"], stack["attrs"])
}

func (c *current) onIconAttrs1(size, nv interface{}) (interface{}, error) {
	return types.NewElementAttributes(size, nv)
}

func (p *parser) callonIconAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIconAttrs1(stack["size"], stack["nv"])
}

func (c *current) onIconSize1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrIconSize, value)
}

func (p *parser) callonIconSize1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIconSize1(stack["value"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.([]interface{}))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content)
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onRawLine1(content interface{}) (interface{}, error) {
	// line MAY have content
	return types.NewRawLine(content.(string))
}

func (p *parser) callonRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLine1(stack["content"])
}

func (c *current) onRawLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonRawLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLineContent1()
}

func (c *current) onCalloutListItem1(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListItem(ref.(int), description.([]interface{}))
}

func (p *parser) callonCalloutListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItem1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListItemPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListItemPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix5()
}

func (c *current) onCalloutListItemPrefix1(ref interface{}) (interface{}, error) {
	return ref, nil
}

func (p *parser) callonCalloutListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix1(stack["ref"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}), attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonFencedBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockRawContent2(stack["line"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Listing, content.([]interface{}), attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonListingBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockRawContent2(stack["line"])
}

func (c *current) onExampleBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Example, content.([]interface{}), attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["content"])
}

func (c *current) onExampleBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonExampleBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent2(stack["line"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Quote, content.([]interface{}), attributes)
}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockVerbatimElement2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonQuoteBlockVerbatimElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockVerbatimElement2(stack["line"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}), attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onSidebarBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonSidebarBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent2(stack["line"])
}

func (c *current) onPassthroughBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)
}

func (p *parser) callonPassthroughBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock1(stack["attributes"], stack["content"])
}

func (c *current) onPassthroughBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonPassthroughBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockRawContent2(stack["line"])
}

func (c *current) onThematicBreak1() (interface{}, error) {
	return types.NewThematicBreak()
}

func (p *parser) callonThematicBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThematicBreak1()
}

func (c *current) onElementPlaceHolder5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementPlaceHolder5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder5()
}

func (c *current) onElementPlaceHolder1(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonElementPlaceHolder1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder1(stack["ref"])
}

func (c *current) onNormalBlocks1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonNormalBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalBlocks1(stack["elements"])
}

func (c *current) onMarkdownQuoteMacroSubs1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonMarkdownQuoteMacroSubs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteMacroSubs1(stack["lines"])
}

func (c *current) onMarkdownQuoteLine1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonMarkdownQuoteLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteLine1(stack["elements"])
}

func (c *current) onMarkdownQuoteAttribution5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonMarkdownQuoteAttribution5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution5()
}

func (c *current) onMarkdownQuoteAttribution1(author interface{}) (interface{}, error) {
	return author, nil
}

func (p *parser) callonMarkdownQuoteAttribution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution1(stack["author"])
}

func (c *current) onCallout5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout5()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {
	return types.NewCallout(ref.(int))
}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onNoneSubs5() (interface{}, error) {
	// just text, including empty lines
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNoneSubs5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneSubs5()
}

func (c *current) onTable1(attrs, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attrs)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attrs"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}), nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonCommentBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockRawContent2(stack["line"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines4()
}

func (c *current) onParagraphWithHeadingSpacesLines18() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines18()
}

func (c *current) onParagraphWithHeadingSpacesLines13(otherLine interface{}) (interface{}, error) {
	return otherLine, nil // do not include the trailing 'EOL'

}

func (p *parser) callonParagraphWithHeadingSpacesLines13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines13(stack["otherLine"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Literal, nil
	}
	return false, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onParagraphWithLiteralAttributeLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralAttributeLine6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine6()
}

func (c *current) onParagraphWithLiteralAttributeLine1(content interface{}) (interface{}, error) {
	return content.(string), nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralAttributeLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine1(stack["content"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent11() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent11()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onApostrophe1() (interface{}, error) {
	return types.NewStringElement("\u2019")
}

func (p *parser) callonApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe1()
}

func (c *current) onCopyright1() (interface{}, error) {
	return types.NewStringElement("\u00a9")
}

func (p *parser) callonCopyright1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCopyright1()
}

func (c *current) onTrademark1() (interface{}, error) {
	return types.NewStringElement("\u2122")
}

func (p *parser) callonTrademark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTrademark1()
}

func (c *current) onRegistered1() (interface{}, error) {
	return types.NewStringElement("\u00ae")
}

func (p *parser) callonRegistered1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegistered1()
}

func (c *current) onEllipsis1() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")
}

func (p *parser) callonEllipsis1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEllipsis1()
}

func (c *current) onImpliedApostrophe1() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")
}

func (p *parser) callonImpliedApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImpliedApostrophe1()
}

func (c *current) onSpecialCharacter2() (interface{}, error) {
	// if we have a InternalCrossReference we just return a StringElement.
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharacter2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter2()
}

func (c *current) onSpecialCharacter4() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSpecialCharacter4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter4()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2()
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onResolvedFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonResolvedFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onResolvedLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonResolvedLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedLocation1(stack["scheme"], stack["path"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onSpace3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
