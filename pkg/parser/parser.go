// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "AsciidocDocument",
			pos:  position{line: 17, col: 1, offset: 319},
			expr: &actionExpr{
				pos: position{line: 17, col: 21, offset: 339},
				run: (*parser).callonAsciidocDocument1,
				expr: &seqExpr{
					pos: position{line: 17, col: 21, offset: 339},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 21, offset: 339},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 34, offset: 352},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 34, offset: 352},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 48, offset: 366},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 56, offset: 374},
								name: "AsciidocDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 80, offset: 398},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentWithinDelimitedBlock",
			pos:  position{line: 21, col: 1, offset: 478},
			expr: &actionExpr{
				pos: position{line: 21, col: 41, offset: 518},
				run: (*parser).callonAsciidocDocumentWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 21, col: 41, offset: 518},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 21, col: 41, offset: 518},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 21, col: 54, offset: 531},
								expr: &ruleRefExpr{
									pos:  position{line: 21, col: 54, offset: 531},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 21, col: 68, offset: 545},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 21, col: 76, offset: 553},
								name: "AsciidocDocumentBlocksWithinDelimitedBlock",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 120, offset: 597},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "TextDocument",
			pos:  position{line: 25, col: 1, offset: 677},
			expr: &actionExpr{
				pos: position{line: 25, col: 17, offset: 693},
				run: (*parser).callonTextDocument1,
				expr: &seqExpr{
					pos: position{line: 25, col: 17, offset: 693},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 25, col: 17, offset: 693},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 25, col: 25, offset: 701},
								name: "TextDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 25, col: 45, offset: 721},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocks",
			pos:  position{line: 32, col: 1, offset: 904},
			expr: &actionExpr{
				pos: position{line: 32, col: 27, offset: 930},
				run: (*parser).callonAsciidocDocumentBlocks1,
				expr: &seqExpr{
					pos: position{line: 32, col: 27, offset: 930},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 32, col: 27, offset: 930},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 32, col: 35, offset: 938},
								expr: &ruleRefExpr{
									pos:  position{line: 32, col: 35, offset: 938},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 32, col: 52, offset: 955},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 32, col: 60, offset: 963},
								expr: &ruleRefExpr{
									pos:  position{line: 32, col: 60, offset: 963},
									name: "DocumentBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentBlock",
			pos:  position{line: 41, col: 1, offset: 1212},
			expr: &actionExpr{
				pos: position{line: 41, col: 18, offset: 1229},
				run: (*parser).callonDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 41, col: 18, offset: 1229},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 41, col: 18, offset: 1229},
							expr: &ruleRefExpr{
								pos:  position{line: 41, col: 19, offset: 1230},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 42, col: 5, offset: 1239},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 42, col: 12, offset: 1246},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 42, col: 12, offset: 1246},
										name: "SimpleParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 43, col: 11, offset: 1272},
										name: "Section",
									},
									&ruleRefExpr{
										pos:  position{line: 44, col: 11, offset: 1291},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 45, col: 11, offset: 1316},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 46, col: 11, offset: 1340},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 47, col: 11, offset: 1394},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 48, col: 11, offset: 1416},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 49, col: 11, offset: 1435},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 50, col: 11, offset: 1486},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 51, col: 11, offset: 1510},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 52, col: 11, offset: 1550},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 53, col: 11, offset: 1584},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 54, col: 11, offset: 1621},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 55, col: 11, offset: 1646},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocksWithinDelimitedBlock",
			pos:  position{line: 59, col: 1, offset: 1684},
			expr: &labeledExpr{
				pos:   position{line: 59, col: 47, offset: 1730},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 59, col: 54, offset: 1737},
					expr: &ruleRefExpr{
						pos:  position{line: 59, col: 55, offset: 1738},
						name: "DocumentBlockWithinDelimitedBlock",
					},
				},
			},
		},
		{
			name: "DocumentBlockWithinDelimitedBlock",
			pos:  position{line: 61, col: 1, offset: 1775},
			expr: &actionExpr{
				pos: position{line: 61, col: 38, offset: 1812},
				run: (*parser).callonDocumentBlockWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 61, col: 38, offset: 1812},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 61, col: 38, offset: 1812},
							expr: &ruleRefExpr{
								pos:  position{line: 61, col: 39, offset: 1813},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 62, col: 5, offset: 1822},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 62, col: 12, offset: 1829},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 62, col: 12, offset: 1829},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 63, col: 11, offset: 1854},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 64, col: 11, offset: 1878},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 65, col: 11, offset: 1903},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 66, col: 11, offset: 1925},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 67, col: 11, offset: 1944},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 68, col: 11, offset: 1995},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 69, col: 11, offset: 2019},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 70, col: 11, offset: 2059},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 71, col: 11, offset: 2093},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 72, col: 11, offset: 2130},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 73, col: 11, offset: 2155},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextDocumentBlocks",
			pos:  position{line: 77, col: 1, offset: 2193},
			expr: &labeledExpr{
				pos:   position{line: 77, col: 23, offset: 2215},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 77, col: 30, offset: 2222},
					expr: &ruleRefExpr{
						pos:  position{line: 77, col: 31, offset: 2223},
						name: "TextDocumentBlock",
					},
				},
			},
		},
		{
			name: "TextDocumentBlock",
			pos:  position{line: 79, col: 1, offset: 2244},
			expr: &actionExpr{
				pos: position{line: 79, col: 22, offset: 2265},
				run: (*parser).callonTextDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 79, col: 22, offset: 2265},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 79, col: 22, offset: 2265},
							expr: &ruleRefExpr{
								pos:  position{line: 79, col: 23, offset: 2266},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 80, col: 5, offset: 2275},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 80, col: 12, offset: 2282},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 80, col: 12, offset: 2282},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 80, col: 24, offset: 2294},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 87, col: 1, offset: 2440},
			expr: &ruleRefExpr{
				pos:  position{line: 87, col: 16, offset: 2455},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 89, col: 1, offset: 2473},
			expr: &actionExpr{
				pos: position{line: 89, col: 20, offset: 2492},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 89, col: 20, offset: 2492},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 89, col: 20, offset: 2492},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 89, col: 41, offset: 2513},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 89, col: 49, offset: 2521},
								expr: &ruleRefExpr{
									pos:  position{line: 89, col: 50, offset: 2522},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 89, col: 75, offset: 2547},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 93, col: 1, offset: 2627},
			expr: &seqExpr{
				pos: position{line: 93, col: 26, offset: 2652},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 93, col: 26, offset: 2652},
						val:        "---",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 93, col: 32, offset: 2658},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 95, col: 1, offset: 2664},
			expr: &actionExpr{
				pos: position{line: 95, col: 27, offset: 2690},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 95, col: 27, offset: 2690},
					expr: &oneOrMoreExpr{
						pos: position{line: 95, col: 28, offset: 2691},
						expr: &seqExpr{
							pos: position{line: 95, col: 29, offset: 2692},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 95, col: 29, offset: 2692},
									expr: &ruleRefExpr{
										pos:  position{line: 95, col: 30, offset: 2693},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 95, col: 51, offset: 2714,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 102, col: 1, offset: 2880},
			expr: &actionExpr{
				pos: position{line: 102, col: 19, offset: 2898},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 102, col: 19, offset: 2898},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 102, col: 19, offset: 2898},
							val:        "=",
							ignoreCase: false,
						},
						&oneOrMoreExpr{
							pos: position{line: 102, col: 23, offset: 2902},
							expr: &ruleRefExpr{
								pos:  position{line: 102, col: 23, offset: 2902},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 102, col: 27, offset: 2906},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 102, col: 34, offset: 2913},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 102, col: 49, offset: 2928},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 102, col: 53, offset: 2932},
								expr: &ruleRefExpr{
									pos:  position{line: 102, col: 53, offset: 2932},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 102, col: 71, offset: 2950},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 103, col: 9, offset: 2962},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 103, col: 18, offset: 2971},
								expr: &ruleRefExpr{
									pos:  position{line: 103, col: 18, offset: 2971},
									name: "DocumentAuthors",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 104, col: 9, offset: 2998},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 104, col: 19, offset: 3008},
								expr: &ruleRefExpr{
									pos:  position{line: 104, col: 19, offset: 3008},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 108, col: 1, offset: 3109},
			expr: &choiceExpr{
				pos: position{line: 108, col: 20, offset: 3128},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 108, col: 20, offset: 3128},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 108, col: 48, offset: 3156},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 110, col: 1, offset: 3186},
			expr: &actionExpr{
				pos: position{line: 110, col: 30, offset: 3215},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 110, col: 30, offset: 3215},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 110, col: 30, offset: 3215},
							expr: &ruleRefExpr{
								pos:  position{line: 110, col: 30, offset: 3215},
								name: "WS",
							},
						},
						&notExpr{
							pos: position{line: 110, col: 34, offset: 3219},
							expr: &litMatcher{
								pos:        position{line: 110, col: 35, offset: 3220},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 110, col: 39, offset: 3224},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 110, col: 48, offset: 3233},
								expr: &ruleRefExpr{
									pos:  position{line: 110, col: 48, offset: 3233},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 110, col: 65, offset: 3250},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 114, col: 1, offset: 3320},
			expr: &actionExpr{
				pos: position{line: 114, col: 33, offset: 3352},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 114, col: 33, offset: 3352},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 114, col: 33, offset: 3352},
							expr: &ruleRefExpr{
								pos:  position{line: 114, col: 33, offset: 3352},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 114, col: 37, offset: 3356},
							val:        ":author:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 114, col: 48, offset: 3367},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 114, col: 56, offset: 3375},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 114, col: 72, offset: 3391},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 118, col: 1, offset: 3470},
			expr: &actionExpr{
				pos: position{line: 118, col: 19, offset: 3488},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 118, col: 19, offset: 3488},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 118, col: 19, offset: 3488},
							expr: &ruleRefExpr{
								pos:  position{line: 118, col: 19, offset: 3488},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 118, col: 23, offset: 3492},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 118, col: 33, offset: 3502},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 118, col: 53, offset: 3522},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 118, col: 59, offset: 3528},
								expr: &ruleRefExpr{
									pos:  position{line: 118, col: 60, offset: 3529},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 118, col: 82, offset: 3551},
							expr: &ruleRefExpr{
								pos:  position{line: 118, col: 82, offset: 3551},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 118, col: 86, offset: 3555},
							expr: &litMatcher{
								pos:        position{line: 118, col: 86, offset: 3555},
								val:        ";",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 118, col: 91, offset: 3560},
							expr: &ruleRefExpr{
								pos:  position{line: 118, col: 91, offset: 3560},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 123, col: 1, offset: 3702},
			expr: &actionExpr{
				pos: position{line: 123, col: 23, offset: 3724},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 123, col: 23, offset: 3724},
					expr: &choiceExpr{
						pos: position{line: 123, col: 24, offset: 3725},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 123, col: 24, offset: 3725},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 123, col: 37, offset: 3738},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 123, col: 37, offset: 3738},
										expr: &litMatcher{
											pos:        position{line: 123, col: 38, offset: 3739},
											val:        "<",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 123, col: 42, offset: 3743},
										expr: &litMatcher{
											pos:        position{line: 123, col: 43, offset: 3744},
											val:        ";",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 123, col: 47, offset: 3748},
										expr: &ruleRefExpr{
											pos:  position{line: 123, col: 48, offset: 3749},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 123, col: 56, offset: 3757,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 127, col: 1, offset: 3798},
			expr: &actionExpr{
				pos: position{line: 127, col: 24, offset: 3821},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 127, col: 24, offset: 3821},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 127, col: 24, offset: 3821},
							val:        "<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 127, col: 28, offset: 3825},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 127, col: 35, offset: 3832},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 127, col: 35, offset: 3832},
									expr: &choiceExpr{
										pos: position{line: 127, col: 36, offset: 3833},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 127, col: 36, offset: 3833},
												name: "Alphanums",
											},
											&seqExpr{
												pos: position{line: 127, col: 49, offset: 3846},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 127, col: 49, offset: 3846},
														expr: &litMatcher{
															pos:        position{line: 127, col: 50, offset: 3847},
															val:        ">",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 127, col: 54, offset: 3851},
														expr: &ruleRefExpr{
															pos:  position{line: 127, col: 55, offset: 3852},
															name: "EOL",
														},
													},
													&anyMatcher{
														line: 127, col: 60, offset: 3857,
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 129, col: 4, offset: 3898},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 135, col: 1, offset: 4059},
			expr: &actionExpr{
				pos: position{line: 135, col: 21, offset: 4079},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 135, col: 21, offset: 4079},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 135, col: 21, offset: 4079},
							expr: &ruleRefExpr{
								pos:  position{line: 135, col: 21, offset: 4079},
								name: "WS",
							},
						},
						&notExpr{
							pos: position{line: 135, col: 25, offset: 4083},
							expr: &litMatcher{
								pos:        position{line: 135, col: 26, offset: 4084},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 135, col: 30, offset: 4088},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 136, col: 9, offset: 4107},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 136, col: 10, offset: 4108},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 136, col: 10, offset: 4108},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 136, col: 10, offset: 4108},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 136, col: 21, offset: 4119},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 136, col: 45, offset: 4143},
													expr: &litMatcher{
														pos:        position{line: 136, col: 45, offset: 4143},
														val:        ",",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 136, col: 50, offset: 4148},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 136, col: 58, offset: 4156},
														expr: &ruleRefExpr{
															pos:  position{line: 136, col: 59, offset: 4157},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 136, col: 82, offset: 4180},
													expr: &litMatcher{
														pos:        position{line: 136, col: 82, offset: 4180},
														val:        ":",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 136, col: 87, offset: 4185},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 136, col: 97, offset: 4195},
														expr: &ruleRefExpr{
															pos:  position{line: 136, col: 98, offset: 4196},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 138, col: 15, offset: 4313},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 138, col: 15, offset: 4313},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 138, col: 15, offset: 4313},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 138, col: 24, offset: 4322},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 138, col: 46, offset: 4344},
													expr: &litMatcher{
														pos:        position{line: 138, col: 46, offset: 4344},
														val:        ":",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 138, col: 51, offset: 4349},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 138, col: 61, offset: 4359},
														expr: &ruleRefExpr{
															pos:  position{line: 138, col: 62, offset: 4360},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 140, col: 13, offset: 4469},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 145, col: 1, offset: 4599},
			expr: &choiceExpr{
				pos: position{line: 145, col: 27, offset: 4625},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 145, col: 27, offset: 4625},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 145, col: 27, offset: 4625},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 145, col: 27, offset: 4625},
									val:        "v",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 145, col: 32, offset: 4630},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 145, col: 39, offset: 4637},
									expr: &choiceExpr{
										pos: position{line: 145, col: 40, offset: 4638},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 145, col: 40, offset: 4638},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 145, col: 52, offset: 4650},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 145, col: 62, offset: 4660},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 145, col: 62, offset: 4660},
														expr: &ruleRefExpr{
															pos:  position{line: 145, col: 63, offset: 4661},
															name: "EOL",
														},
													},
													&notExpr{
														pos: position{line: 145, col: 67, offset: 4665},
														expr: &litMatcher{
															pos:        position{line: 145, col: 68, offset: 4666},
															val:        ",",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 145, col: 72, offset: 4670},
														expr: &litMatcher{
															pos:        position{line: 145, col: 73, offset: 4671},
															val:        ":",
															ignoreCase: false,
														},
													},
													&anyMatcher{
														line: 145, col: 78, offset: 4676,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 147, col: 5, offset: 4718},
						run: (*parser).callonDocumentRevisionNumber18,
						expr: &seqExpr{
							pos: position{line: 147, col: 5, offset: 4718},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 147, col: 5, offset: 4718},
									expr: &litMatcher{
										pos:        position{line: 147, col: 5, offset: 4718},
										val:        "v",
										ignoreCase: true,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 147, col: 11, offset: 4724},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 147, col: 18, offset: 4731},
									expr: &choiceExpr{
										pos: position{line: 147, col: 19, offset: 4732},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 147, col: 19, offset: 4732},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 147, col: 31, offset: 4744},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 147, col: 41, offset: 4754},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 147, col: 41, offset: 4754},
														expr: &ruleRefExpr{
															pos:  position{line: 147, col: 42, offset: 4755},
															name: "EOL",
														},
													},
													&notExpr{
														pos: position{line: 147, col: 46, offset: 4759},
														expr: &litMatcher{
															pos:        position{line: 147, col: 47, offset: 4760},
															val:        ",",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 147, col: 51, offset: 4764},
														expr: &litMatcher{
															pos:        position{line: 147, col: 52, offset: 4765},
															val:        ":",
															ignoreCase: false,
														},
													},
													&anyMatcher{
														line: 147, col: 57, offset: 4770,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 147, col: 62, offset: 4775},
									expr: &ruleRefExpr{
										pos:  position{line: 147, col: 62, offset: 4775},
										name: "WS",
									},
								},
								&andExpr{
									pos: position{line: 147, col: 66, offset: 4779},
									expr: &litMatcher{
										pos:        position{line: 147, col: 67, offset: 4780},
										val:        ",",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 151, col: 1, offset: 4820},
			expr: &actionExpr{
				pos: position{line: 151, col: 25, offset: 4844},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 151, col: 25, offset: 4844},
					expr: &choiceExpr{
						pos: position{line: 151, col: 26, offset: 4845},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 151, col: 26, offset: 4845},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 151, col: 38, offset: 4857},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 151, col: 48, offset: 4867},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 151, col: 48, offset: 4867},
										expr: &ruleRefExpr{
											pos:  position{line: 151, col: 49, offset: 4868},
											name: "EOL",
										},
									},
									&notExpr{
										pos: position{line: 151, col: 53, offset: 4872},
										expr: &litMatcher{
											pos:        position{line: 151, col: 54, offset: 4873},
											val:        ":",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 151, col: 59, offset: 4878,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 155, col: 1, offset: 4919},
			expr: &actionExpr{
				pos: position{line: 155, col: 27, offset: 4945},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 155, col: 27, offset: 4945},
					expr: &choiceExpr{
						pos: position{line: 155, col: 28, offset: 4946},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 155, col: 28, offset: 4946},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 155, col: 40, offset: 4958},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 155, col: 50, offset: 4968},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 155, col: 50, offset: 4968},
										expr: &ruleRefExpr{
											pos:  position{line: 155, col: 51, offset: 4969},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 155, col: 56, offset: 4974,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeDeclaration",
			pos:  position{line: 162, col: 1, offset: 5130},
			expr: &actionExpr{
				pos: position{line: 162, col: 33, offset: 5162},
				run: (*parser).callonDocumentAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 162, col: 33, offset: 5162},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 162, col: 33, offset: 5162},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 162, col: 37, offset: 5166},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 162, col: 43, offset: 5172},
								name: "DocumentAttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 162, col: 66, offset: 5195},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 162, col: 70, offset: 5199},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 162, col: 76, offset: 5205},
								expr: &actionExpr{
									pos: position{line: 162, col: 77, offset: 5206},
									run: (*parser).callonDocumentAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 162, col: 78, offset: 5207},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 162, col: 78, offset: 5207},
												expr: &ruleRefExpr{
													pos:  position{line: 162, col: 78, offset: 5207},
													name: "WS",
												},
											},
											&labeledExpr{
												pos:   position{line: 162, col: 82, offset: 5211},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 162, col: 89, offset: 5218},
													name: "DocumentAttributeValue",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 162, col: 138, offset: 5267},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeName",
			pos:  position{line: 169, col: 1, offset: 5516},
			expr: &actionExpr{
				pos: position{line: 169, col: 26, offset: 5541},
				run: (*parser).callonDocumentAttributeName1,
				expr: &seqExpr{
					pos: position{line: 169, col: 26, offset: 5541},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 169, col: 27, offset: 5542},
							alternatives: []interface{}{
								&charClassMatcher{
									pos:        position{line: 169, col: 27, offset: 5542},
									val:        "[A-Z]",
									ranges:     []rune{'A', 'Z'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 169, col: 35, offset: 5550},
									val:        "[a-z]",
									ranges:     []rune{'a', 'z'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 169, col: 43, offset: 5558},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 169, col: 51, offset: 5566},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 169, col: 56, offset: 5571},
							expr: &choiceExpr{
								pos: position{line: 169, col: 57, offset: 5572},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 169, col: 57, offset: 5572},
										val:        "[A-Z]",
										ranges:     []rune{'A', 'Z'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 169, col: 65, offset: 5580},
										val:        "[a-z]",
										ranges:     []rune{'a', 'z'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 169, col: 73, offset: 5588},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
									&litMatcher{
										pos:        position{line: 169, col: 81, offset: 5596},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeValue",
			pos:  position{line: 173, col: 1, offset: 5638},
			expr: &actionExpr{
				pos: position{line: 173, col: 27, offset: 5664},
				run: (*parser).callonDocumentAttributeValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 173, col: 27, offset: 5664},
					expr: &seqExpr{
						pos: position{line: 173, col: 28, offset: 5665},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 173, col: 28, offset: 5665},
								expr: &ruleRefExpr{
									pos:  position{line: 173, col: 29, offset: 5666},
									name: "NEWLINE",
								},
							},
							&anyMatcher{
								line: 173, col: 37, offset: 5674,
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeReset",
			pos:  position{line: 177, col: 1, offset: 5714},
			expr: &choiceExpr{
				pos: position{line: 177, col: 27, offset: 5740},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 177, col: 27, offset: 5740},
						run: (*parser).callonDocumentAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 177, col: 27, offset: 5740},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 177, col: 27, offset: 5740},
									val:        ":!",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 177, col: 32, offset: 5745},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 177, col: 38, offset: 5751},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 177, col: 61, offset: 5774},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 177, col: 65, offset: 5778},
									name: "EOLS",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 179, col: 5, offset: 5847},
						run: (*parser).callonDocumentAttributeReset9,
						expr: &seqExpr{
							pos: position{line: 179, col: 5, offset: 5847},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 179, col: 5, offset: 5847},
									val:        ":",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 179, col: 9, offset: 5851},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 179, col: 15, offset: 5857},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 179, col: 38, offset: 5880},
									val:        "!:",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 179, col: 43, offset: 5885},
									name: "EOLS",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeSubstitution",
			pos:  position{line: 183, col: 1, offset: 5953},
			expr: &actionExpr{
				pos: position{line: 183, col: 34, offset: 5986},
				run: (*parser).callonDocumentAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 183, col: 34, offset: 5986},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 183, col: 34, offset: 5986},
							val:        "{",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 183, col: 38, offset: 5990},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 183, col: 44, offset: 5996},
								name: "DocumentAttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 183, col: 67, offset: 6019},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ElementAttributes",
			pos:  position{line: 190, col: 1, offset: 6207},
			expr: &actionExpr{
				pos: position{line: 190, col: 22, offset: 6228},
				run: (*parser).callonElementAttributes1,
				expr: &labeledExpr{
					pos:   position{line: 190, col: 22, offset: 6228},
					label: "attrs",
					expr: &oneOrMoreExpr{
						pos: position{line: 190, col: 28, offset: 6234},
						expr: &ruleRefExpr{
							pos:  position{line: 190, col: 29, offset: 6235},
							name: "ElementAttribute",
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 194, col: 1, offset: 6325},
			expr: &actionExpr{
				pos: position{line: 194, col: 21, offset: 6345},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 194, col: 21, offset: 6345},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 194, col: 21, offset: 6345},
							expr: &choiceExpr{
								pos: position{line: 194, col: 23, offset: 6347},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 194, col: 23, offset: 6347},
										val:        "[",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 194, col: 29, offset: 6353},
										val:        ".",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 194, col: 35, offset: 6359},
										val:        "#",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 195, col: 5, offset: 6435},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 195, col: 11, offset: 6441},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 195, col: 11, offset: 6441},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 196, col: 9, offset: 6462},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 197, col: 9, offset: 6486},
										name: "ElementRole",
									},
									&ruleRefExpr{
										pos:  position{line: 198, col: 9, offset: 6509},
										name: "LiteralAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 199, col: 9, offset: 6537},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 200, col: 9, offset: 6565},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 201, col: 9, offset: 6592},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 202, col: 9, offset: 6619},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 203, col: 9, offset: 6656},
										name: "HorizontalLayout",
									},
									&ruleRefExpr{
										pos:  position{line: 204, col: 9, offset: 6684},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MasqueradeAttribute",
			pos:  position{line: 209, col: 1, offset: 6867},
			expr: &choiceExpr{
				pos: position{line: 209, col: 24, offset: 6890},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 209, col: 24, offset: 6890},
						name: "QuoteAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 209, col: 42, offset: 6908},
						name: "VerseAttributes",
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 211, col: 1, offset: 6925},
			expr: &choiceExpr{
				pos: position{line: 211, col: 14, offset: 6938},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 211, col: 14, offset: 6938},
						run: (*parser).callonElementID2,
						expr: &seqExpr{
							pos: position{line: 211, col: 14, offset: 6938},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 211, col: 14, offset: 6938},
									val:        "[[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 211, col: 19, offset: 6943},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 211, col: 23, offset: 6947},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 211, col: 27, offset: 6951},
									val:        "]]",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 211, col: 32, offset: 6956},
									name: "EOLS",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 213, col: 5, offset: 7010},
						run: (*parser).callonElementID9,
						expr: &seqExpr{
							pos: position{line: 213, col: 5, offset: 7010},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 213, col: 5, offset: 7010},
									val:        "[#",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 213, col: 10, offset: 7015},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 213, col: 14, offset: 7019},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 213, col: 18, offset: 7023},
									val:        "]",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 213, col: 23, offset: 7028},
									name: "EOLS",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 217, col: 1, offset: 7081},
			expr: &actionExpr{
				pos: position{line: 217, col: 20, offset: 7100},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 217, col: 20, offset: 7100},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 217, col: 20, offset: 7100},
							val:        "[[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 217, col: 25, offset: 7105},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 217, col: 29, offset: 7109},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 217, col: 33, offset: 7113},
							val:        "]]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 217, col: 38, offset: 7118},
							expr: &ruleRefExpr{
								pos:  position{line: 217, col: 38, offset: 7118},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 223, col: 1, offset: 7392},
			expr: &actionExpr{
				pos: position{line: 223, col: 17, offset: 7408},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 223, col: 17, offset: 7408},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 223, col: 17, offset: 7408},
							val:        ".",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 223, col: 21, offset: 7412},
							label: "title",
							expr: &actionExpr{
								pos: position{line: 223, col: 28, offset: 7419},
								run: (*parser).callonElementTitle5,
								expr: &seqExpr{
									pos: position{line: 223, col: 28, offset: 7419},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 223, col: 28, offset: 7419},
											name: "Alphanums",
										},
										&zeroOrMoreExpr{
											pos: position{line: 223, col: 38, offset: 7429},
											expr: &choiceExpr{
												pos: position{line: 223, col: 39, offset: 7430},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 223, col: 39, offset: 7430},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 223, col: 51, offset: 7442},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 223, col: 61, offset: 7452},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 223, col: 61, offset: 7452},
																expr: &ruleRefExpr{
																	pos:  position{line: 223, col: 62, offset: 7453},
																	name: "NEWLINE",
																},
															},
															&anyMatcher{
																line: 223, col: 70, offset: 7461,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 225, col: 4, offset: 7502},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementRole",
			pos:  position{line: 231, col: 1, offset: 7654},
			expr: &actionExpr{
				pos: position{line: 231, col: 16, offset: 7669},
				run: (*parser).callonElementRole1,
				expr: &seqExpr{
					pos: position{line: 231, col: 16, offset: 7669},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 231, col: 16, offset: 7669},
							val:        "[.",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 231, col: 21, offset: 7674},
							label: "role",
							expr: &actionExpr{
								pos: position{line: 231, col: 27, offset: 7680},
								run: (*parser).callonElementRole5,
								expr: &seqExpr{
									pos: position{line: 231, col: 27, offset: 7680},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 231, col: 27, offset: 7680},
											name: "Alphanums",
										},
										&zeroOrMoreExpr{
											pos: position{line: 231, col: 37, offset: 7690},
											expr: &choiceExpr{
												pos: position{line: 231, col: 38, offset: 7691},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 231, col: 38, offset: 7691},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 231, col: 50, offset: 7703},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 231, col: 60, offset: 7713},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 231, col: 60, offset: 7713},
																expr: &ruleRefExpr{
																	pos:  position{line: 231, col: 61, offset: 7714},
																	name: "NEWLINE",
																},
															},
															&notExpr{
																pos: position{line: 231, col: 69, offset: 7722},
																expr: &litMatcher{
																	pos:        position{line: 231, col: 70, offset: 7723},
																	val:        "]",
																	ignoreCase: false,
																},
															},
															&anyMatcher{
																line: 231, col: 74, offset: 7727,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 233, col: 4, offset: 7768},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 233, col: 8, offset: 7772},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "LiteralAttribute",
			pos:  position{line: 237, col: 1, offset: 7829},
			expr: &actionExpr{
				pos: position{line: 237, col: 21, offset: 7849},
				run: (*parser).callonLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 237, col: 21, offset: 7849},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 237, col: 21, offset: 7849},
							val:        "[literal]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 237, col: 33, offset: 7861},
							expr: &ruleRefExpr{
								pos:  position{line: 237, col: 33, offset: 7861},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 237, col: 37, offset: 7865},
							name: "NEWLINE",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 242, col: 1, offset: 7997},
			expr: &actionExpr{
				pos: position{line: 242, col: 30, offset: 8026},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 242, col: 30, offset: 8026},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 242, col: 30, offset: 8026},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 242, col: 34, offset: 8030},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 242, col: 37, offset: 8033},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 242, col: 53, offset: 8049},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 242, col: 57, offset: 8053},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 247, col: 1, offset: 8209},
			expr: &actionExpr{
				pos: position{line: 247, col: 21, offset: 8229},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 247, col: 21, offset: 8229},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 247, col: 21, offset: 8229},
							val:        "[source",
							ignoreCase: false,
						},
						&zeroOrOneExpr{
							pos: position{line: 247, col: 31, offset: 8239},
							expr: &litMatcher{
								pos:        position{line: 247, col: 31, offset: 8239},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 247, col: 36, offset: 8244},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 247, col: 45, offset: 8253},
								expr: &actionExpr{
									pos: position{line: 247, col: 46, offset: 8254},
									run: (*parser).callonSourceAttributes8,
									expr: &oneOrMoreExpr{
										pos: position{line: 247, col: 46, offset: 8254},
										expr: &choiceExpr{
											pos: position{line: 247, col: 47, offset: 8255},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 247, col: 47, offset: 8255},
													name: "Alphanums",
												},
												&ruleRefExpr{
													pos:  position{line: 247, col: 59, offset: 8267},
													name: "Spaces",
												},
												&seqExpr{
													pos: position{line: 247, col: 69, offset: 8277},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 247, col: 69, offset: 8277},
															expr: &ruleRefExpr{
																pos:  position{line: 247, col: 70, offset: 8278},
																name: "NEWLINE",
															},
														},
														&notExpr{
															pos: position{line: 247, col: 78, offset: 8286},
															expr: &litMatcher{
																pos:        position{line: 247, col: 79, offset: 8287},
																val:        "]",
																ignoreCase: false,
															},
														},
														&anyMatcher{
															line: 247, col: 83, offset: 8291,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 249, col: 9, offset: 8341},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 249, col: 13, offset: 8345},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 254, col: 1, offset: 8470},
			expr: &actionExpr{
				pos: position{line: 254, col: 19, offset: 8488},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 254, col: 19, offset: 8488},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 254, col: 19, offset: 8488},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 254, col: 23, offset: 8492},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 254, col: 34, offset: 8503},
								expr: &ruleRefExpr{
									pos:  position{line: 254, col: 35, offset: 8504},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 254, col: 54, offset: 8523},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 254, col: 58, offset: 8527},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 258, col: 1, offset: 8600},
			expr: &choiceExpr{
				pos: position{line: 259, col: 5, offset: 8625},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 259, col: 5, offset: 8625},
						run: (*parser).callonGenericAttribute2,
						expr: &seqExpr{
							pos: position{line: 259, col: 5, offset: 8625},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 259, col: 5, offset: 8625},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 259, col: 10, offset: 8630},
										name: "AttributeKey",
									},
								},
								&litMatcher{
									pos:        position{line: 259, col: 24, offset: 8644},
									val:        "=",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 259, col: 28, offset: 8648},
									label: "value",
									expr: &zeroOrOneExpr{
										pos: position{line: 259, col: 34, offset: 8654},
										expr: &ruleRefExpr{
											pos:  position{line: 259, col: 35, offset: 8655},
											name: "AttributeValue",
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 259, col: 52, offset: 8672},
									expr: &litMatcher{
										pos:        position{line: 259, col: 52, offset: 8672},
										val:        ",",
										ignoreCase: false,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 259, col: 57, offset: 8677},
									expr: &ruleRefExpr{
										pos:  position{line: 259, col: 57, offset: 8677},
										name: "WS",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 261, col: 9, offset: 8782},
						run: (*parser).callonGenericAttribute14,
						expr: &seqExpr{
							pos: position{line: 261, col: 9, offset: 8782},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 261, col: 9, offset: 8782},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 261, col: 14, offset: 8787},
										name: "AttributeKey",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 261, col: 28, offset: 8801},
									expr: &litMatcher{
										pos:        position{line: 261, col: 28, offset: 8801},
										val:        ",",
										ignoreCase: false,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 261, col: 33, offset: 8806},
									expr: &ruleRefExpr{
										pos:  position{line: 261, col: 33, offset: 8806},
										name: "WS",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 265, col: 1, offset: 8899},
			expr: &actionExpr{
				pos: position{line: 265, col: 17, offset: 8915},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 265, col: 17, offset: 8915},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 265, col: 17, offset: 8915},
							expr: &litMatcher{
								pos:        position{line: 265, col: 18, offset: 8916},
								val:        "quote",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 265, col: 26, offset: 8924},
							expr: &litMatcher{
								pos:        position{line: 265, col: 27, offset: 8925},
								val:        "verse",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 265, col: 35, offset: 8933},
							expr: &litMatcher{
								pos:        position{line: 265, col: 36, offset: 8934},
								val:        "literal",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 265, col: 46, offset: 8944},
							expr: &ruleRefExpr{
								pos:  position{line: 265, col: 47, offset: 8945},
								name: "Spaces",
							},
						},
						&labeledExpr{
							pos:   position{line: 265, col: 54, offset: 8952},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 265, col: 58, offset: 8956},
								expr: &choiceExpr{
									pos: position{line: 265, col: 59, offset: 8957},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 265, col: 59, offset: 8957},
											name: "Alphanums",
										},
										&ruleRefExpr{
											pos:  position{line: 265, col: 71, offset: 8969},
											name: "OtherAttributeChar",
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 265, col: 92, offset: 8990},
							expr: &ruleRefExpr{
								pos:  position{line: 265, col: 92, offset: 8990},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 269, col: 1, offset: 9030},
			expr: &actionExpr{
				pos: position{line: 269, col: 19, offset: 9048},
				run: (*parser).callonAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 269, col: 19, offset: 9048},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 269, col: 19, offset: 9048},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 269, col: 25, offset: 9054},
								expr: &choiceExpr{
									pos: position{line: 269, col: 26, offset: 9055},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 269, col: 26, offset: 9055},
											name: "Alphanums",
										},
										&ruleRefExpr{
											pos:  position{line: 269, col: 38, offset: 9067},
											name: "Spaces",
										},
										&ruleRefExpr{
											pos:  position{line: 269, col: 47, offset: 9076},
											name: "OtherAttributeChar",
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 269, col: 68, offset: 9097},
							expr: &litMatcher{
								pos:        position{line: 269, col: 69, offset: 9098},
								val:        "=",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "OtherAttributeChar",
			pos:  position{line: 273, col: 1, offset: 9253},
			expr: &seqExpr{
				pos: position{line: 273, col: 24, offset: 9276},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 273, col: 24, offset: 9276},
						expr: &litMatcher{
							pos:        position{line: 273, col: 25, offset: 9277},
							val:        "=",
							ignoreCase: false,
						},
					},
					&notExpr{
						pos: position{line: 273, col: 29, offset: 9281},
						expr: &litMatcher{
							pos:        position{line: 273, col: 30, offset: 9282},
							val:        ",",
							ignoreCase: false,
						},
					},
					&notExpr{
						pos: position{line: 273, col: 34, offset: 9286},
						expr: &litMatcher{
							pos:        position{line: 273, col: 35, offset: 9287},
							val:        "]",
							ignoreCase: false,
						},
					},
					&anyMatcher{
						line: 273, col: 39, offset: 9291,
					},
				},
			},
		},
		{
			name: "HorizontalLayout",
			pos:  position{line: 275, col: 1, offset: 9295},
			expr: &actionExpr{
				pos: position{line: 275, col: 21, offset: 9315},
				run: (*parser).callonHorizontalLayout1,
				expr: &seqExpr{
					pos: position{line: 275, col: 21, offset: 9315},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 275, col: 21, offset: 9315},
							val:        "[horizontal]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 275, col: 36, offset: 9330},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 279, col: 1, offset: 9404},
			expr: &actionExpr{
				pos: position{line: 279, col: 20, offset: 9423},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 279, col: 20, offset: 9423},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 279, col: 20, offset: 9423},
							val:        "[quote",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 279, col: 29, offset: 9432},
							expr: &ruleRefExpr{
								pos:  position{line: 279, col: 29, offset: 9432},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 279, col: 33, offset: 9436},
							expr: &litMatcher{
								pos:        position{line: 279, col: 33, offset: 9436},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 279, col: 38, offset: 9441},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 279, col: 45, offset: 9448},
								expr: &ruleRefExpr{
									pos:  position{line: 279, col: 46, offset: 9449},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 279, col: 63, offset: 9466},
							expr: &litMatcher{
								pos:        position{line: 279, col: 63, offset: 9466},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 279, col: 68, offset: 9471},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 279, col: 74, offset: 9477},
								expr: &ruleRefExpr{
									pos:  position{line: 279, col: 75, offset: 9478},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 279, col: 92, offset: 9495},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 279, col: 96, offset: 9499},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 283, col: 1, offset: 9569},
			expr: &actionExpr{
				pos: position{line: 283, col: 20, offset: 9588},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 283, col: 20, offset: 9588},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 283, col: 20, offset: 9588},
							val:        "[verse",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 283, col: 29, offset: 9597},
							expr: &ruleRefExpr{
								pos:  position{line: 283, col: 29, offset: 9597},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 283, col: 33, offset: 9601},
							expr: &litMatcher{
								pos:        position{line: 283, col: 33, offset: 9601},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 283, col: 38, offset: 9606},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 283, col: 45, offset: 9613},
								expr: &ruleRefExpr{
									pos:  position{line: 283, col: 46, offset: 9614},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 283, col: 63, offset: 9631},
							expr: &litMatcher{
								pos:        position{line: 283, col: 63, offset: 9631},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 283, col: 68, offset: 9636},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 283, col: 74, offset: 9642},
								expr: &ruleRefExpr{
									pos:  position{line: 283, col: 75, offset: 9643},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 283, col: 92, offset: 9660},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 283, col: 96, offset: 9664},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 287, col: 1, offset: 9752},
			expr: &actionExpr{
				pos: position{line: 287, col: 19, offset: 9770},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 287, col: 19, offset: 9770},
					expr: &choiceExpr{
						pos: position{line: 287, col: 20, offset: 9771},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 287, col: 20, offset: 9771},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 287, col: 32, offset: 9783},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 287, col: 42, offset: 9793},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 287, col: 42, offset: 9793},
										expr: &litMatcher{
											pos:        position{line: 287, col: 43, offset: 9794},
											val:        ",",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 287, col: 47, offset: 9798},
										expr: &litMatcher{
											pos:        position{line: 287, col: 48, offset: 9799},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 287, col: 52, offset: 9803},
										expr: &ruleRefExpr{
											pos:  position{line: 287, col: 53, offset: 9804},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 287, col: 57, offset: 9808,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 291, col: 1, offset: 9849},
			expr: &actionExpr{
				pos: position{line: 291, col: 21, offset: 9869},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 291, col: 21, offset: 9869},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 291, col: 21, offset: 9869},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 291, col: 25, offset: 9873},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 291, col: 31, offset: 9879},
								expr: &ruleRefExpr{
									pos:  position{line: 291, col: 32, offset: 9880},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 291, col: 51, offset: 9899},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 298, col: 1, offset: 10073},
			expr: &actionExpr{
				pos: position{line: 298, col: 12, offset: 10084},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 298, col: 12, offset: 10084},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 298, col: 12, offset: 10084},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 298, col: 23, offset: 10095},
								expr: &ruleRefExpr{
									pos:  position{line: 298, col: 24, offset: 10096},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 299, col: 5, offset: 10120},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 299, col: 12, offset: 10127},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 299, col: 12, offset: 10127},
									expr: &litMatcher{
										pos:        position{line: 299, col: 13, offset: 10128},
										val:        "=",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 303, col: 5, offset: 10219},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 307, col: 5, offset: 10371},
							expr: &ruleRefExpr{
								pos:  position{line: 307, col: 5, offset: 10371},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 307, col: 9, offset: 10375},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 307, col: 16, offset: 10382},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 307, col: 31, offset: 10397},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 307, col: 35, offset: 10401},
								expr: &ruleRefExpr{
									pos:  position{line: 307, col: 35, offset: 10401},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 307, col: 53, offset: 10419},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 311, col: 1, offset: 10525},
			expr: &actionExpr{
				pos: position{line: 311, col: 18, offset: 10542},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 311, col: 18, offset: 10542},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 311, col: 27, offset: 10551},
						expr: &seqExpr{
							pos: position{line: 311, col: 28, offset: 10552},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 311, col: 28, offset: 10552},
									expr: &ruleRefExpr{
										pos:  position{line: 311, col: 29, offset: 10553},
										name: "NEWLINE",
									},
								},
								&notExpr{
									pos: position{line: 311, col: 37, offset: 10561},
									expr: &ruleRefExpr{
										pos:  position{line: 311, col: 38, offset: 10562},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 311, col: 54, offset: 10578},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 315, col: 1, offset: 10699},
			expr: &actionExpr{
				pos: position{line: 315, col: 17, offset: 10715},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 315, col: 17, offset: 10715},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 315, col: 26, offset: 10724},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 315, col: 26, offset: 10724},
								name: "SimpleWord",
							},
							&ruleRefExpr{
								pos:  position{line: 316, col: 11, offset: 10745},
								name: "Spaces",
							},
							&ruleRefExpr{
								pos:  position{line: 317, col: 11, offset: 10763},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 318, col: 11, offset: 10788},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 319, col: 11, offset: 10810},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 320, col: 11, offset: 10833},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 321, col: 11, offset: 10848},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 322, col: 11, offset: 10873},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 323, col: 11, offset: 10894},
								name: "DocumentAttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 324, col: 11, offset: 10934},
								name: "LineBreak",
							},
							&ruleRefExpr{
								pos:  position{line: 325, col: 11, offset: 10954},
								name: "OtherWord",
							},
							&ruleRefExpr{
								pos:  position{line: 326, col: 11, offset: 10974},
								name: "Parenthesis",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsPlaceHolder",
			pos:  position{line: 333, col: 1, offset: 11129},
			expr: &seqExpr{
				pos: position{line: 333, col: 31, offset: 11159},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 333, col: 31, offset: 11159},
						val:        "toc::[]",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 333, col: 41, offset: 11169},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 338, col: 1, offset: 11280},
			expr: &actionExpr{
				pos: position{line: 338, col: 19, offset: 11298},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 338, col: 19, offset: 11298},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 338, col: 19, offset: 11298},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 338, col: 25, offset: 11304},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 338, col: 40, offset: 11319},
							val:        "::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 338, col: 45, offset: 11324},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 338, col: 52, offset: 11331},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 338, col: 68, offset: 11347},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 338, col: 75, offset: 11354},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 342, col: 1, offset: 11495},
			expr: &actionExpr{
				pos: position{line: 342, col: 20, offset: 11514},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 342, col: 20, offset: 11514},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 342, col: 20, offset: 11514},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 342, col: 26, offset: 11520},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 342, col: 41, offset: 11535},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 342, col: 45, offset: 11539},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 342, col: 52, offset: 11546},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 342, col: 68, offset: 11562},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 342, col: 75, offset: 11569},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 346, col: 1, offset: 11711},
			expr: &actionExpr{
				pos: position{line: 346, col: 18, offset: 11728},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 346, col: 18, offset: 11728},
					expr: &choiceExpr{
						pos: position{line: 346, col: 19, offset: 11729},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 346, col: 19, offset: 11729},
								val:        "[a-zA-Z0-9]",
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
							&litMatcher{
								pos:        position{line: 346, col: 33, offset: 11743},
								val:        "_",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 346, col: 39, offset: 11749},
								val:        "-",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 350, col: 1, offset: 11791},
			expr: &actionExpr{
				pos: position{line: 350, col: 19, offset: 11809},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 350, col: 19, offset: 11809},
					expr: &choiceExpr{
						pos: position{line: 350, col: 20, offset: 11810},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 350, col: 20, offset: 11810},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 350, col: 33, offset: 11823},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 350, col: 33, offset: 11823},
										expr: &ruleRefExpr{
											pos:  position{line: 350, col: 34, offset: 11824},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 350, col: 37, offset: 11827},
										expr: &litMatcher{
											pos:        position{line: 350, col: 38, offset: 11828},
											val:        ":",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 350, col: 42, offset: 11832},
										expr: &litMatcher{
											pos:        position{line: 350, col: 43, offset: 11833},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 350, col: 47, offset: 11837},
										expr: &ruleRefExpr{
											pos:  position{line: 350, col: 48, offset: 11838},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 350, col: 52, offset: 11842,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 354, col: 1, offset: 11883},
			expr: &actionExpr{
				pos: position{line: 354, col: 24, offset: 11906},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 354, col: 24, offset: 11906},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 354, col: 24, offset: 11906},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 354, col: 28, offset: 11910},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 354, col: 34, offset: 11916},
								expr: &ruleRefExpr{
									pos:  position{line: 354, col: 35, offset: 11917},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 354, col: 54, offset: 11936},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 361, col: 1, offset: 12116},
			expr: &actionExpr{
				pos: position{line: 361, col: 18, offset: 12133},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 361, col: 18, offset: 12133},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 361, col: 18, offset: 12133},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 361, col: 24, offset: 12139},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 361, col: 24, offset: 12139},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 361, col: 24, offset: 12139},
											val:        "include::",
											ignoreCase: false,
										},
										&labeledExpr{
											pos:   position{line: 361, col: 36, offset: 12151},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 361, col: 42, offset: 12157},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 361, col: 56, offset: 12171},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 361, col: 74, offset: 12189},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 363, col: 8, offset: 12343},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 367, col: 1, offset: 12396},
			expr: &actionExpr{
				pos: position{line: 367, col: 26, offset: 12421},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 367, col: 26, offset: 12421},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 367, col: 26, offset: 12421},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 367, col: 30, offset: 12425},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 367, col: 36, offset: 12431},
								expr: &choiceExpr{
									pos: position{line: 367, col: 37, offset: 12432},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 367, col: 37, offset: 12432},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 367, col: 59, offset: 12454},
											name: "TagRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 367, col: 80, offset: 12475},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 367, col: 99, offset: 12494},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 371, col: 1, offset: 12564},
			expr: &actionExpr{
				pos: position{line: 371, col: 24, offset: 12587},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 371, col: 24, offset: 12587},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 371, col: 24, offset: 12587},
							val:        "lines=",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 371, col: 33, offset: 12596},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 371, col: 40, offset: 12603},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 371, col: 66, offset: 12629},
							expr: &litMatcher{
								pos:        position{line: 371, col: 66, offset: 12629},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 375, col: 1, offset: 12688},
			expr: &actionExpr{
				pos: position{line: 375, col: 29, offset: 12716},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 375, col: 29, offset: 12716},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 375, col: 29, offset: 12716},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 375, col: 36, offset: 12723},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 375, col: 36, offset: 12723},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 376, col: 11, offset: 12840},
										name: "MultipleQuotedLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 377, col: 11, offset: 12876},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 378, col: 11, offset: 12902},
										name: "MultiLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 379, col: 11, offset: 12934},
										name: "SingleLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 380, col: 11, offset: 12966},
										name: "SingleLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 381, col: 11, offset: 12993},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 381, col: 31, offset: 13013},
							expr: &ruleRefExpr{
								pos:  position{line: 381, col: 31, offset: 13013},
								name: "WS",
							},
						},
						&choiceExpr{
							pos: position{line: 381, col: 36, offset: 13018},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 381, col: 36, offset: 13018},
									expr: &litMatcher{
										pos:        position{line: 381, col: 37, offset: 13019},
										val:        ",",
										ignoreCase: false,
									},
								},
								&andExpr{
									pos: position{line: 381, col: 43, offset: 13025},
									expr: &litMatcher{
										pos:        position{line: 381, col: 44, offset: 13026},
										val:        "]",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 385, col: 1, offset: 13058},
			expr: &actionExpr{
				pos: position{line: 385, col: 23, offset: 13080},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 385, col: 23, offset: 13080},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 385, col: 23, offset: 13080},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 385, col: 30, offset: 13087},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 385, col: 30, offset: 13087},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 385, col: 47, offset: 13104},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 386, col: 5, offset: 13126},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 386, col: 12, offset: 13133},
								expr: &actionExpr{
									pos: position{line: 386, col: 13, offset: 13134},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 386, col: 13, offset: 13134},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 386, col: 13, offset: 13134},
												val:        ";",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 386, col: 17, offset: 13138},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 386, col: 24, offset: 13145},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 386, col: 24, offset: 13145},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 386, col: 41, offset: 13162},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedLineRanges",
			pos:  position{line: 392, col: 1, offset: 13300},
			expr: &actionExpr{
				pos: position{line: 392, col: 29, offset: 13328},
				run: (*parser).callonMultipleQuotedLineRanges1,
				expr: &seqExpr{
					pos: position{line: 392, col: 29, offset: 13328},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 392, col: 29, offset: 13328},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 392, col: 34, offset: 13333},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 392, col: 41, offset: 13340},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 392, col: 41, offset: 13340},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 392, col: 58, offset: 13357},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 393, col: 5, offset: 13379},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 393, col: 12, offset: 13386},
								expr: &actionExpr{
									pos: position{line: 393, col: 13, offset: 13387},
									run: (*parser).callonMultipleQuotedLineRanges10,
									expr: &seqExpr{
										pos: position{line: 393, col: 13, offset: 13387},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 393, col: 13, offset: 13387},
												val:        ",",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 393, col: 17, offset: 13391},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 393, col: 24, offset: 13398},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 393, col: 24, offset: 13398},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 393, col: 41, offset: 13415},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 395, col: 9, offset: 13468},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 399, col: 1, offset: 13558},
			expr: &actionExpr{
				pos: position{line: 399, col: 19, offset: 13576},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 399, col: 19, offset: 13576},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 399, col: 19, offset: 13576},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 399, col: 26, offset: 13583},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 399, col: 34, offset: 13591},
							val:        "..",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 399, col: 39, offset: 13596},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 399, col: 44, offset: 13601},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineQuotedRange",
			pos:  position{line: 403, col: 1, offset: 13689},
			expr: &actionExpr{
				pos: position{line: 403, col: 25, offset: 13713},
				run: (*parser).callonMultiLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 403, col: 25, offset: 13713},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 403, col: 25, offset: 13713},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 403, col: 30, offset: 13718},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 403, col: 37, offset: 13725},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 403, col: 45, offset: 13733},
							val:        "..",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 403, col: 50, offset: 13738},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 403, col: 55, offset: 13743},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 403, col: 63, offset: 13751},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 407, col: 1, offset: 13836},
			expr: &actionExpr{
				pos: position{line: 407, col: 20, offset: 13855},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 407, col: 20, offset: 13855},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 407, col: 32, offset: 13867},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SingleLineQuotedRange",
			pos:  position{line: 411, col: 1, offset: 13962},
			expr: &actionExpr{
				pos: position{line: 411, col: 26, offset: 13987},
				run: (*parser).callonSingleLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 411, col: 26, offset: 13987},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 411, col: 26, offset: 13987},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 411, col: 31, offset: 13992},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 411, col: 43, offset: 14004},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 411, col: 51, offset: 14012},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 415, col: 1, offset: 14104},
			expr: &actionExpr{
				pos: position{line: 415, col: 23, offset: 14126},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 415, col: 23, offset: 14126},
					expr: &seqExpr{
						pos: position{line: 415, col: 24, offset: 14127},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 415, col: 24, offset: 14127},
								expr: &litMatcher{
									pos:        position{line: 415, col: 25, offset: 14128},
									val:        "]",
									ignoreCase: false,
								},
							},
							&notExpr{
								pos: position{line: 415, col: 29, offset: 14132},
								expr: &litMatcher{
									pos:        position{line: 415, col: 30, offset: 14133},
									val:        ",",
									ignoreCase: false,
								},
							},
							&notExpr{
								pos: position{line: 415, col: 34, offset: 14137},
								expr: &ruleRefExpr{
									pos:  position{line: 415, col: 35, offset: 14138},
									name: "WS",
								},
							},
							&anyMatcher{
								line: 415, col: 38, offset: 14141,
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttribute",
			pos:  position{line: 419, col: 1, offset: 14181},
			expr: &actionExpr{
				pos: position{line: 419, col: 23, offset: 14203},
				run: (*parser).callonTagRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 419, col: 23, offset: 14203},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 419, col: 24, offset: 14204},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 419, col: 24, offset: 14204},
									val:        "tags=",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 419, col: 34, offset: 14214},
									val:        "tag=",
									ignoreCase: false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 419, col: 42, offset: 14222},
							label: "tags",
							expr: &ruleRefExpr{
								pos:  position{line: 419, col: 48, offset: 14228},
								name: "TagRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 419, col: 73, offset: 14253},
							expr: &litMatcher{
								pos:        position{line: 419, col: 73, offset: 14253},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttributeValue",
			pos:  position{line: 423, col: 1, offset: 14402},
			expr: &actionExpr{
				pos: position{line: 423, col: 28, offset: 14429},
				run: (*parser).callonTagRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 423, col: 28, offset: 14429},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 423, col: 28, offset: 14429},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 423, col: 35, offset: 14436},
								name: "MultipleTagRanges",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 423, col: 54, offset: 14455},
							expr: &ruleRefExpr{
								pos:  position{line: 423, col: 54, offset: 14455},
								name: "WS",
							},
						},
						&choiceExpr{
							pos: position{line: 423, col: 59, offset: 14460},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 423, col: 59, offset: 14460},
									expr: &litMatcher{
										pos:        position{line: 423, col: 60, offset: 14461},
										val:        ",",
										ignoreCase: false,
									},
								},
								&andExpr{
									pos: position{line: 423, col: 66, offset: 14467},
									expr: &litMatcher{
										pos:        position{line: 423, col: 67, offset: 14468},
										val:        "]",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 427, col: 1, offset: 14500},
			expr: &actionExpr{
				pos: position{line: 427, col: 22, offset: 14521},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 427, col: 22, offset: 14521},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 427, col: 22, offset: 14521},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 427, col: 29, offset: 14528},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 428, col: 5, offset: 14542},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 428, col: 12, offset: 14549},
								expr: &actionExpr{
									pos: position{line: 428, col: 13, offset: 14550},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 428, col: 13, offset: 14550},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 428, col: 13, offset: 14550},
												val:        ";",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 428, col: 17, offset: 14554},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 428, col: 24, offset: 14561},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 434, col: 1, offset: 14692},
			expr: &choiceExpr{
				pos: position{line: 434, col: 13, offset: 14704},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 434, col: 13, offset: 14704},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 434, col: 13, offset: 14704},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 434, col: 18, offset: 14709},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 434, col: 18, offset: 14709},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 434, col: 30, offset: 14721},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 436, col: 5, offset: 14789},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 436, col: 5, offset: 14789},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 436, col: 5, offset: 14789},
									val:        "!",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 436, col: 9, offset: 14793},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 436, col: 14, offset: 14798},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 436, col: 14, offset: 14798},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 436, col: 26, offset: 14810},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 440, col: 1, offset: 14878},
			expr: &actionExpr{
				pos: position{line: 440, col: 16, offset: 14893},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 440, col: 16, offset: 14893},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 440, col: 16, offset: 14893},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 440, col: 23, offset: 14900},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 440, col: 23, offset: 14900},
									expr: &litMatcher{
										pos:        position{line: 440, col: 24, offset: 14901},
										val:        "*",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 443, col: 5, offset: 14955},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 453, col: 1, offset: 15249},
			expr: &actionExpr{
				pos: position{line: 453, col: 21, offset: 15269},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 453, col: 21, offset: 15269},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 453, col: 21, offset: 15269},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 453, col: 29, offset: 15277},
								expr: &choiceExpr{
									pos: position{line: 453, col: 30, offset: 15278},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 453, col: 30, offset: 15278},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 453, col: 53, offset: 15301},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 453, col: 74, offset: 15322},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 453, col: 74, offset: 15322,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 453, col: 107, offset: 15355},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 457, col: 1, offset: 15426},
			expr: &actionExpr{
				pos: position{line: 457, col: 25, offset: 15450},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 457, col: 25, offset: 15450},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 457, col: 25, offset: 15450},
							val:        "tag::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 457, col: 33, offset: 15458},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 457, col: 38, offset: 15463},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 457, col: 38, offset: 15463},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 457, col: 78, offset: 15503},
							val:        "[]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 461, col: 1, offset: 15568},
			expr: &actionExpr{
				pos: position{line: 461, col: 23, offset: 15590},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 461, col: 23, offset: 15590},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 461, col: 23, offset: 15590},
							val:        "end::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 461, col: 31, offset: 15598},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 461, col: 36, offset: 15603},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 461, col: 36, offset: 15603},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 461, col: 76, offset: 15643},
							val:        "[]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ListItems",
			pos:  position{line: 468, col: 1, offset: 15807},
			expr: &oneOrMoreExpr{
				pos: position{line: 468, col: 14, offset: 15820},
				expr: &ruleRefExpr{
					pos:  position{line: 468, col: 14, offset: 15820},
					name: "ListItem",
				},
			},
		},
		{
			name: "ListItem",
			pos:  position{line: 470, col: 1, offset: 15831},
			expr: &choiceExpr{
				pos: position{line: 470, col: 13, offset: 15843},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 470, col: 13, offset: 15843},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 470, col: 31, offset: 15861},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 470, col: 51, offset: 15881},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 470, col: 69, offset: 15899},
						name: "ContinuedListItemElement",
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 472, col: 1, offset: 15925},
			expr: &choiceExpr{
				pos: position{line: 472, col: 18, offset: 15942},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 472, col: 18, offset: 15942},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 472, col: 18, offset: 15942},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 472, col: 27, offset: 15951},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 474, col: 9, offset: 16008},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 474, col: 9, offset: 16008},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 474, col: 15, offset: 16014},
								expr: &ruleRefExpr{
									pos:  position{line: 474, col: 16, offset: 16015},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 478, col: 1, offset: 16107},
			expr: &actionExpr{
				pos: position{line: 478, col: 22, offset: 16128},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 478, col: 22, offset: 16128},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 478, col: 22, offset: 16128},
							expr: &ruleRefExpr{
								pos:  position{line: 478, col: 23, offset: 16129},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 479, col: 5, offset: 16137},
							expr: &ruleRefExpr{
								pos:  position{line: 479, col: 6, offset: 16138},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 480, col: 5, offset: 16153},
							expr: &ruleRefExpr{
								pos:  position{line: 480, col: 6, offset: 16154},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 481, col: 5, offset: 16176},
							expr: &ruleRefExpr{
								pos:  position{line: 481, col: 6, offset: 16177},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 482, col: 5, offset: 16203},
							expr: &ruleRefExpr{
								pos:  position{line: 482, col: 6, offset: 16204},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 483, col: 5, offset: 16232},
							expr: &seqExpr{
								pos: position{line: 483, col: 7, offset: 16234},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 483, col: 7, offset: 16234},
										name: "SimpleLabeledListItemTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 483, col: 33, offset: 16260},
										name: "LabeledListItemSeparator",
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 484, col: 5, offset: 16291},
							expr: &ruleRefExpr{
								pos:  position{line: 484, col: 6, offset: 16292},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 485, col: 5, offset: 16317},
							expr: &ruleRefExpr{
								pos:  position{line: 485, col: 6, offset: 16318},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 486, col: 5, offset: 16339},
							expr: &ruleRefExpr{
								pos:  position{line: 486, col: 6, offset: 16340},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 487, col: 5, offset: 16359},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 488, col: 9, offset: 16374},
								run: (*parser).callonListParagraphLine24,
								expr: &seqExpr{
									pos: position{line: 488, col: 9, offset: 16374},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 488, col: 9, offset: 16374},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 488, col: 18, offset: 16383},
												expr: &ruleRefExpr{
													pos:  position{line: 488, col: 19, offset: 16384},
													name: "InlineElement",
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 488, col: 35, offset: 16400},
											label: "linebreak",
											expr: &zeroOrOneExpr{
												pos: position{line: 488, col: 45, offset: 16410},
												expr: &ruleRefExpr{
													pos:  position{line: 488, col: 46, offset: 16411},
													name: "LineBreak",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 490, col: 12, offset: 16563},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 494, col: 1, offset: 16610},
			expr: &seqExpr{
				pos: position{line: 494, col: 25, offset: 16634},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 494, col: 25, offset: 16634},
						val:        "+",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 494, col: 29, offset: 16638},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 496, col: 1, offset: 16645},
			expr: &actionExpr{
				pos: position{line: 496, col: 29, offset: 16673},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 496, col: 29, offset: 16673},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 496, col: 29, offset: 16673},
							label: "blanklines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 496, col: 41, offset: 16685},
								expr: &ruleRefExpr{
									pos:  position{line: 496, col: 41, offset: 16685},
									name: "BlankLine",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 496, col: 53, offset: 16697},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 496, col: 74, offset: 16718},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 496, col: 82, offset: 16726},
								name: "DocumentBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 503, col: 1, offset: 16968},
			expr: &actionExpr{
				pos: position{line: 503, col: 20, offset: 16987},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 503, col: 20, offset: 16987},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 503, col: 20, offset: 16987},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 503, col: 31, offset: 16998},
								expr: &ruleRefExpr{
									pos:  position{line: 503, col: 32, offset: 16999},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 503, col: 52, offset: 17019},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 503, col: 60, offset: 17027},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 503, col: 83, offset: 17050},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 503, col: 92, offset: 17059},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 507, col: 1, offset: 17199},
			expr: &actionExpr{
				pos: position{line: 508, col: 5, offset: 17229},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 508, col: 5, offset: 17229},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 508, col: 5, offset: 17229},
							expr: &ruleRefExpr{
								pos:  position{line: 508, col: 5, offset: 17229},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 508, col: 9, offset: 17233},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 510, col: 9, offset: 17296},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 510, col: 9, offset: 17296},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 510, col: 9, offset: 17296},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 510, col: 9, offset: 17296},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 510, col: 16, offset: 17303},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 510, col: 16, offset: 17303},
															expr: &litMatcher{
																pos:        position{line: 510, col: 17, offset: 17304},
																val:        ".",
																ignoreCase: false,
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 514, col: 9, offset: 17404},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 533, col: 11, offset: 18121},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 533, col: 11, offset: 18121},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 533, col: 11, offset: 18121},
													expr: &charClassMatcher{
														pos:        position{line: 533, col: 12, offset: 18122},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 533, col: 20, offset: 18130},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 535, col: 13, offset: 18241},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 535, col: 13, offset: 18241},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 535, col: 14, offset: 18242},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 535, col: 21, offset: 18249},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 537, col: 13, offset: 18363},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 537, col: 13, offset: 18363},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 537, col: 14, offset: 18364},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 537, col: 21, offset: 18371},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 539, col: 13, offset: 18485},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 539, col: 13, offset: 18485},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 539, col: 13, offset: 18485},
													expr: &charClassMatcher{
														pos:        position{line: 539, col: 14, offset: 18486},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 539, col: 22, offset: 18494},
													val:        ")",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 541, col: 13, offset: 18608},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 541, col: 13, offset: 18608},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 541, col: 13, offset: 18608},
													expr: &charClassMatcher{
														pos:        position{line: 541, col: 14, offset: 18609},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 541, col: 22, offset: 18617},
													val:        ")",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 543, col: 12, offset: 18730},
							expr: &ruleRefExpr{
								pos:  position{line: 543, col: 12, offset: 18730},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 547, col: 1, offset: 18762},
			expr: &actionExpr{
				pos: position{line: 547, col: 27, offset: 18788},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 547, col: 27, offset: 18788},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 547, col: 37, offset: 18798},
						expr: &ruleRefExpr{
							pos:  position{line: 547, col: 37, offset: 18798},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 554, col: 1, offset: 18998},
			expr: &actionExpr{
				pos: position{line: 554, col: 22, offset: 19019},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 554, col: 22, offset: 19019},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 554, col: 22, offset: 19019},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 554, col: 33, offset: 19030},
								expr: &ruleRefExpr{
									pos:  position{line: 554, col: 34, offset: 19031},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 554, col: 54, offset: 19051},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 554, col: 62, offset: 19059},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 554, col: 87, offset: 19084},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 554, col: 98, offset: 19095},
								expr: &ruleRefExpr{
									pos:  position{line: 554, col: 99, offset: 19096},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 554, col: 129, offset: 19126},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 554, col: 138, offset: 19135},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 558, col: 1, offset: 19293},
			expr: &actionExpr{
				pos: position{line: 559, col: 5, offset: 19325},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 559, col: 5, offset: 19325},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 559, col: 5, offset: 19325},
							expr: &ruleRefExpr{
								pos:  position{line: 559, col: 5, offset: 19325},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 559, col: 9, offset: 19329},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 559, col: 17, offset: 19337},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 561, col: 9, offset: 19394},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 561, col: 9, offset: 19394},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 561, col: 9, offset: 19394},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 561, col: 16, offset: 19401},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 561, col: 16, offset: 19401},
															expr: &litMatcher{
																pos:        position{line: 561, col: 17, offset: 19402},
																val:        "*",
																ignoreCase: false,
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 565, col: 9, offset: 19502},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 582, col: 14, offset: 20209},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 582, col: 21, offset: 20216},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 582, col: 22, offset: 20217},
												val:        "-",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 584, col: 13, offset: 20303},
							expr: &ruleRefExpr{
								pos:  position{line: 584, col: 13, offset: 20303},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 588, col: 1, offset: 20336},
			expr: &actionExpr{
				pos: position{line: 588, col: 32, offset: 20367},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 588, col: 32, offset: 20367},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 588, col: 32, offset: 20367},
							expr: &litMatcher{
								pos:        position{line: 588, col: 33, offset: 20368},
								val:        "[",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 588, col: 37, offset: 20372},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 589, col: 7, offset: 20386},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 589, col: 7, offset: 20386},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 589, col: 7, offset: 20386},
											val:        "[ ]",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 590, col: 7, offset: 20431},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 590, col: 7, offset: 20431},
											val:        "[*]",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 591, col: 7, offset: 20474},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 591, col: 7, offset: 20474},
											val:        "[x]",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 592, col: 7, offset: 20516},
							expr: &ruleRefExpr{
								pos:  position{line: 592, col: 7, offset: 20516},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 596, col: 1, offset: 20555},
			expr: &actionExpr{
				pos: position{line: 596, col: 29, offset: 20583},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 596, col: 29, offset: 20583},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 596, col: 39, offset: 20593},
						expr: &ruleRefExpr{
							pos:  position{line: 596, col: 39, offset: 20593},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 603, col: 1, offset: 20909},
			expr: &actionExpr{
				pos: position{line: 603, col: 20, offset: 20928},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 603, col: 20, offset: 20928},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 603, col: 20, offset: 20928},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 603, col: 31, offset: 20939},
								expr: &ruleRefExpr{
									pos:  position{line: 603, col: 32, offset: 20940},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 603, col: 52, offset: 20960},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 603, col: 58, offset: 20966},
								name: "SimpleLabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 603, col: 85, offset: 20993},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 603, col: 96, offset: 21004},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 603, col: 122, offset: 21030},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 603, col: 134, offset: 21042},
								expr: &ruleRefExpr{
									pos:  position{line: 603, col: 135, offset: 21043},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SimpleLabeledListItemTerm",
			pos:  position{line: 607, col: 1, offset: 21189},
			expr: &actionExpr{
				pos: position{line: 607, col: 30, offset: 21218},
				run: (*parser).callonSimpleLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 607, col: 30, offset: 21218},
					label: "content",
					expr: &actionExpr{
						pos: position{line: 607, col: 39, offset: 21227},
						run: (*parser).callonSimpleLabeledListItemTerm3,
						expr: &oneOrMoreExpr{
							pos: position{line: 607, col: 39, offset: 21227},
							expr: &choiceExpr{
								pos: position{line: 607, col: 40, offset: 21228},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 607, col: 40, offset: 21228},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 607, col: 52, offset: 21240},
										name: "Spaces",
									},
									&seqExpr{
										pos: position{line: 607, col: 62, offset: 21250},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 607, col: 62, offset: 21250},
												expr: &ruleRefExpr{
													pos:  position{line: 607, col: 63, offset: 21251},
													name: "NEWLINE",
												},
											},
											&notExpr{
												pos: position{line: 607, col: 71, offset: 21259},
												expr: &ruleRefExpr{
													pos:  position{line: 607, col: 72, offset: 21260},
													name: "LabeledListItemSeparator",
												},
											},
											&anyMatcher{
												line: 607, col: 97, offset: 21285,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 613, col: 1, offset: 21414},
			expr: &actionExpr{
				pos: position{line: 613, col: 24, offset: 21437},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 613, col: 24, offset: 21437},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 613, col: 33, offset: 21446},
						expr: &seqExpr{
							pos: position{line: 613, col: 34, offset: 21447},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 613, col: 34, offset: 21447},
									expr: &ruleRefExpr{
										pos:  position{line: 613, col: 35, offset: 21448},
										name: "NEWLINE",
									},
								},
								&notExpr{
									pos: position{line: 613, col: 43, offset: 21456},
									expr: &ruleRefExpr{
										pos:  position{line: 613, col: 44, offset: 21457},
										name: "LabeledListItemSeparator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 613, col: 69, offset: 21482},
									name: "LabeledListItemTermElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTermElement",
			pos:  position{line: 617, col: 1, offset: 21617},
			expr: &actionExpr{
				pos: position{line: 617, col: 31, offset: 21647},
				run: (*parser).callonLabeledListItemTermElement1,
				expr: &labeledExpr{
					pos:   position{line: 617, col: 31, offset: 21647},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 617, col: 40, offset: 21656},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 617, col: 40, offset: 21656},
								name: "SimpleWord",
							},
							&ruleRefExpr{
								pos:  position{line: 618, col: 11, offset: 21677},
								name: "Spaces",
							},
							&ruleRefExpr{
								pos:  position{line: 619, col: 11, offset: 21695},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 620, col: 11, offset: 21720},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 621, col: 11, offset: 21742},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 622, col: 11, offset: 21765},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 623, col: 11, offset: 21780},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 624, col: 11, offset: 21805},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 625, col: 11, offset: 21826},
								name: "DocumentAttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 626, col: 11, offset: 21866},
								name: "LineBreak",
							},
							&ruleRefExpr{
								pos:  position{line: 627, col: 11, offset: 21886},
								name: "OtherWord",
							},
							&ruleRefExpr{
								pos:  position{line: 628, col: 11, offset: 21906},
								name: "Parenthesis",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 632, col: 1, offset: 21948},
			expr: &actionExpr{
				pos: position{line: 633, col: 5, offset: 21981},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 633, col: 5, offset: 21981},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 633, col: 5, offset: 21981},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 633, col: 16, offset: 21992},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 633, col: 16, offset: 21992},
									expr: &litMatcher{
										pos:        position{line: 633, col: 17, offset: 21993},
										val:        ":",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 636, col: 5, offset: 22051},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 640, col: 6, offset: 22227},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 640, col: 6, offset: 22227},
									expr: &choiceExpr{
										pos: position{line: 640, col: 7, offset: 22228},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 640, col: 7, offset: 22228},
												name: "WS",
											},
											&ruleRefExpr{
												pos:  position{line: 640, col: 12, offset: 22233},
												name: "NEWLINE",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 640, col: 24, offset: 22245},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 644, col: 1, offset: 22285},
			expr: &actionExpr{
				pos: position{line: 644, col: 31, offset: 22315},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 644, col: 31, offset: 22315},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 644, col: 40, offset: 22324},
						expr: &ruleRefExpr{
							pos:  position{line: 644, col: 41, offset: 22325},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 651, col: 1, offset: 22516},
			expr: &choiceExpr{
				pos: position{line: 651, col: 19, offset: 22534},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 651, col: 19, offset: 22534},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 651, col: 19, offset: 22534},
							val:        "TIP",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 653, col: 9, offset: 22580},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 653, col: 9, offset: 22580},
							val:        "NOTE",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 655, col: 9, offset: 22628},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 655, col: 9, offset: 22628},
							val:        "IMPORTANT",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 657, col: 9, offset: 22686},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 657, col: 9, offset: 22686},
							val:        "WARNING",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 659, col: 9, offset: 22740},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 659, col: 9, offset: 22740},
							val:        "CAUTION",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 668, col: 1, offset: 23047},
			expr: &choiceExpr{
				pos: position{line: 670, col: 5, offset: 23094},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 670, col: 5, offset: 23094},
						run: (*parser).callonParagraph2,
						expr: &seqExpr{
							pos: position{line: 670, col: 5, offset: 23094},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 670, col: 5, offset: 23094},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 670, col: 16, offset: 23105},
										expr: &ruleRefExpr{
											pos:  position{line: 670, col: 17, offset: 23106},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 670, col: 37, offset: 23126},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 670, col: 40, offset: 23129},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 670, col: 56, offset: 23145},
									val:        ": ",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 670, col: 61, offset: 23150},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 670, col: 67, offset: 23156},
										expr: &ruleRefExpr{
											pos:  position{line: 670, col: 68, offset: 23157},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 674, col: 5, offset: 23349},
						run: (*parser).callonParagraph13,
						expr: &seqExpr{
							pos: position{line: 674, col: 5, offset: 23349},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 674, col: 5, offset: 23349},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 674, col: 16, offset: 23360},
										expr: &ruleRefExpr{
											pos:  position{line: 674, col: 17, offset: 23361},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 674, col: 37, offset: 23381},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 674, col: 43, offset: 23387},
										expr: &ruleRefExpr{
											pos:  position{line: 674, col: 44, offset: 23388},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SimpleParagraph",
			pos:  position{line: 679, col: 1, offset: 23553},
			expr: &actionExpr{
				pos: position{line: 679, col: 20, offset: 23572},
				run: (*parser).callonSimpleParagraph1,
				expr: &seqExpr{
					pos: position{line: 679, col: 20, offset: 23572},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 679, col: 20, offset: 23572},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 679, col: 31, offset: 23583},
								expr: &ruleRefExpr{
									pos:  position{line: 679, col: 32, offset: 23584},
									name: "ElementAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 680, col: 5, offset: 23609},
							run: (*parser).callonSimpleParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 688, col: 5, offset: 23900},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 688, col: 16, offset: 23911},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 689, col: 5, offset: 23934},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 689, col: 16, offset: 23945},
								expr: &ruleRefExpr{
									pos:  position{line: 689, col: 17, offset: 23946},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphLines",
			pos:  position{line: 693, col: 1, offset: 24080},
			expr: &actionExpr{
				pos: position{line: 693, col: 19, offset: 24098},
				run: (*parser).callonParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 693, col: 19, offset: 24098},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 693, col: 19, offset: 24098},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 693, col: 30, offset: 24109},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 693, col: 50, offset: 24129},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 693, col: 61, offset: 24140},
								expr: &ruleRefExpr{
									pos:  position{line: 693, col: 62, offset: 24141},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphLine",
			pos:  position{line: 697, col: 1, offset: 24247},
			expr: &actionExpr{
				pos: position{line: 697, col: 23, offset: 24269},
				run: (*parser).callonFirstParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 697, col: 23, offset: 24269},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 697, col: 23, offset: 24269},
							expr: &seqExpr{
								pos: position{line: 697, col: 25, offset: 24271},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 697, col: 25, offset: 24271},
										name: "SimpleLabeledListItemTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 697, col: 51, offset: 24297},
										name: "LabeledListItemSeparator",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 698, col: 5, offset: 24327},
							label: "elements",
							expr: &seqExpr{
								pos: position{line: 698, col: 15, offset: 24337},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 698, col: 15, offset: 24337},
										name: "SimpleWord",
									},
									&zeroOrMoreExpr{
										pos: position{line: 698, col: 26, offset: 24348},
										expr: &ruleRefExpr{
											pos:  position{line: 698, col: 26, offset: 24348},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 698, col: 42, offset: 24364},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 698, col: 52, offset: 24374},
								expr: &ruleRefExpr{
									pos:  position{line: 698, col: 53, offset: 24375},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 698, col: 65, offset: 24387},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OtherParagraphLine",
			pos:  position{line: 702, col: 1, offset: 24477},
			expr: &actionExpr{
				pos: position{line: 702, col: 23, offset: 24499},
				run: (*parser).callonOtherParagraphLine1,
				expr: &labeledExpr{
					pos:   position{line: 702, col: 23, offset: 24499},
					label: "elements",
					expr: &ruleRefExpr{
						pos:  position{line: 702, col: 33, offset: 24509},
						name: "InlineElements",
					},
				},
			},
		},
		{
			name: "VerseParagraph",
			pos:  position{line: 706, col: 1, offset: 24555},
			expr: &choiceExpr{
				pos: position{line: 708, col: 5, offset: 24607},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 708, col: 5, offset: 24607},
						run: (*parser).callonVerseParagraph2,
						expr: &seqExpr{
							pos: position{line: 708, col: 5, offset: 24607},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 708, col: 5, offset: 24607},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 708, col: 16, offset: 24618},
										expr: &ruleRefExpr{
											pos:  position{line: 708, col: 17, offset: 24619},
											name: "ElementAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 709, col: 5, offset: 24643},
									run: (*parser).callonVerseParagraph7,
								},
								&labeledExpr{
									pos:   position{line: 716, col: 5, offset: 24855},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 716, col: 8, offset: 24858},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 716, col: 24, offset: 24874},
									val:        ": ",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 716, col: 29, offset: 24879},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 716, col: 35, offset: 24885},
										expr: &ruleRefExpr{
											pos:  position{line: 716, col: 36, offset: 24886},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 720, col: 5, offset: 25078},
						run: (*parser).callonVerseParagraph14,
						expr: &seqExpr{
							pos: position{line: 720, col: 5, offset: 25078},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 720, col: 5, offset: 25078},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 720, col: 16, offset: 25089},
										expr: &ruleRefExpr{
											pos:  position{line: 720, col: 17, offset: 25090},
											name: "ElementAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 721, col: 5, offset: 25114},
									run: (*parser).callonVerseParagraph19,
								},
								&labeledExpr{
									pos:   position{line: 728, col: 5, offset: 25326},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 728, col: 11, offset: 25332},
										expr: &ruleRefExpr{
											pos:  position{line: 728, col: 12, offset: 25333},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 732, col: 1, offset: 25434},
			expr: &actionExpr{
				pos: position{line: 732, col: 19, offset: 25452},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 732, col: 19, offset: 25452},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 732, col: 19, offset: 25452},
							expr: &ruleRefExpr{
								pos:  position{line: 732, col: 20, offset: 25453},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 732, col: 24, offset: 25457},
							expr: &ruleRefExpr{
								pos:  position{line: 732, col: 25, offset: 25458},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 733, col: 5, offset: 25472},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 733, col: 15, offset: 25482},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 733, col: 15, offset: 25482},
										run: (*parser).callonInlineElements9,
										expr: &labeledExpr{
											pos:   position{line: 733, col: 15, offset: 25482},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 733, col: 24, offset: 25491},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 735, col: 9, offset: 25583},
										run: (*parser).callonInlineElements12,
										expr: &seqExpr{
											pos: position{line: 735, col: 9, offset: 25583},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 735, col: 9, offset: 25583},
													expr: &ruleRefExpr{
														pos:  position{line: 735, col: 10, offset: 25584},
														name: "BlockDelimiter",
													},
												},
												&labeledExpr{
													pos:   position{line: 735, col: 25, offset: 25599},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 735, col: 34, offset: 25608},
														expr: &ruleRefExpr{
															pos:  position{line: 735, col: 35, offset: 25609},
															name: "InlineElement",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 735, col: 51, offset: 25625},
													label: "linebreak",
													expr: &zeroOrOneExpr{
														pos: position{line: 735, col: 61, offset: 25635},
														expr: &ruleRefExpr{
															pos:  position{line: 735, col: 62, offset: 25636},
															name: "LineBreak",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 735, col: 74, offset: 25648},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 741, col: 1, offset: 25784},
			expr: &actionExpr{
				pos: position{line: 741, col: 18, offset: 25801},
				run: (*parser).callonInlineElement1,
				expr: &seqExpr{
					pos: position{line: 741, col: 18, offset: 25801},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 741, col: 18, offset: 25801},
							expr: &ruleRefExpr{
								pos:  position{line: 741, col: 19, offset: 25802},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 741, col: 23, offset: 25806},
							expr: &ruleRefExpr{
								pos:  position{line: 741, col: 24, offset: 25807},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 742, col: 5, offset: 25822},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 742, col: 14, offset: 25831},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 742, col: 14, offset: 25831},
										name: "SimpleWord",
									},
									&ruleRefExpr{
										pos:  position{line: 743, col: 11, offset: 25852},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 744, col: 11, offset: 25870},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 745, col: 11, offset: 25893},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 746, col: 11, offset: 25909},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 747, col: 11, offset: 25932},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 748, col: 11, offset: 25958},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 749, col: 11, offset: 25980},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 750, col: 11, offset: 26006},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 751, col: 11, offset: 26033},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 752, col: 11, offset: 26074},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 753, col: 11, offset: 26101},
										name: "OtherWord",
									},
									&ruleRefExpr{
										pos:  position{line: 754, col: 11, offset: 26121},
										name: "ConceleadIndexTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 755, col: 11, offset: 26150},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementsWithoutSubtitution",
			pos:  position{line: 763, col: 1, offset: 26413},
			expr: &actionExpr{
				pos: position{line: 763, col: 37, offset: 26449},
				run: (*parser).callonInlineElementsWithoutSubtitution1,
				expr: &seqExpr{
					pos: position{line: 763, col: 37, offset: 26449},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 763, col: 37, offset: 26449},
							expr: &ruleRefExpr{
								pos:  position{line: 763, col: 38, offset: 26450},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 763, col: 48, offset: 26460},
							expr: &ruleRefExpr{
								pos:  position{line: 763, col: 49, offset: 26461},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 763, col: 64, offset: 26476},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 763, col: 73, offset: 26485},
								expr: &ruleRefExpr{
									pos:  position{line: 763, col: 74, offset: 26486},
									name: "InlineElementWithoutSubtitution",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 763, col: 108, offset: 26520},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 763, col: 118, offset: 26530},
								expr: &ruleRefExpr{
									pos:  position{line: 763, col: 119, offset: 26531},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 763, col: 131, offset: 26543},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineElementWithoutSubtitution",
			pos:  position{line: 767, col: 1, offset: 26634},
			expr: &actionExpr{
				pos: position{line: 767, col: 36, offset: 26669},
				run: (*parser).callonInlineElementWithoutSubtitution1,
				expr: &seqExpr{
					pos: position{line: 767, col: 36, offset: 26669},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 767, col: 36, offset: 26669},
							expr: &ruleRefExpr{
								pos:  position{line: 767, col: 37, offset: 26670},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 767, col: 41, offset: 26674},
							expr: &ruleRefExpr{
								pos:  position{line: 767, col: 42, offset: 26675},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 768, col: 5, offset: 26690},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 768, col: 14, offset: 26699},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 768, col: 14, offset: 26699},
										name: "SimpleWord",
									},
									&ruleRefExpr{
										pos:  position{line: 769, col: 11, offset: 26720},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 770, col: 11, offset: 26738},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 771, col: 11, offset: 26761},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 772, col: 11, offset: 26777},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 773, col: 11, offset: 26800},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 774, col: 11, offset: 26822},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 775, col: 11, offset: 26848},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 776, col: 11, offset: 26874},
										name: "OtherWord",
									},
									&ruleRefExpr{
										pos:  position{line: 777, col: 11, offset: 26894},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraph",
			pos:  position{line: 781, col: 1, offset: 26936},
			expr: &actionExpr{
				pos: position{line: 781, col: 22, offset: 26957},
				run: (*parser).callonVerbatimParagraph1,
				expr: &seqExpr{
					pos: position{line: 781, col: 22, offset: 26957},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 781, col: 22, offset: 26957},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 781, col: 33, offset: 26968},
								expr: &ruleRefExpr{
									pos:  position{line: 781, col: 34, offset: 26969},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 781, col: 54, offset: 26989},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 781, col: 60, offset: 26995},
								expr: &actionExpr{
									pos: position{line: 781, col: 61, offset: 26996},
									run: (*parser).callonVerbatimParagraph8,
									expr: &seqExpr{
										pos: position{line: 781, col: 61, offset: 26996},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 781, col: 61, offset: 26996},
												expr: &ruleRefExpr{
													pos:  position{line: 781, col: 62, offset: 26997},
													name: "EOF",
												},
											},
											&labeledExpr{
												pos:   position{line: 781, col: 66, offset: 27001},
												label: "line",
												expr: &ruleRefExpr{
													pos:  position{line: 781, col: 72, offset: 27007},
													name: "VerbatimParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraphLine",
			pos:  position{line: 787, col: 1, offset: 27127},
			expr: &actionExpr{
				pos: position{line: 787, col: 26, offset: 27152},
				run: (*parser).callonVerbatimParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 787, col: 26, offset: 27152},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 787, col: 26, offset: 27152},
							expr: &ruleRefExpr{
								pos:  position{line: 787, col: 27, offset: 27153},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 787, col: 42, offset: 27168},
							expr: &ruleRefExpr{
								pos:  position{line: 787, col: 43, offset: 27169},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 787, col: 53, offset: 27179},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 787, col: 62, offset: 27188},
								expr: &ruleRefExpr{
									pos:  position{line: 787, col: 63, offset: 27189},
									name: "VerbatimParagraphLineElement",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 787, col: 94, offset: 27220},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 787, col: 104, offset: 27230},
								expr: &ruleRefExpr{
									pos:  position{line: 787, col: 105, offset: 27231},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 787, col: 117, offset: 27243},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraphLineElement",
			pos:  position{line: 791, col: 1, offset: 27334},
			expr: &actionExpr{
				pos: position{line: 791, col: 33, offset: 27366},
				run: (*parser).callonVerbatimParagraphLineElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 791, col: 33, offset: 27366},
					expr: &seqExpr{
						pos: position{line: 791, col: 34, offset: 27367},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 791, col: 34, offset: 27367},
								expr: &ruleRefExpr{
									pos:  position{line: 791, col: 35, offset: 27368},
									name: "EOL",
								},
							},
							&notExpr{
								pos: position{line: 791, col: 39, offset: 27372},
								expr: &ruleRefExpr{
									pos:  position{line: 791, col: 40, offset: 27373},
									name: "LineBreak",
								},
							},
							&anyMatcher{
								line: 791, col: 50, offset: 27383,
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 798, col: 1, offset: 27607},
			expr: &actionExpr{
				pos: position{line: 798, col: 14, offset: 27620},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 798, col: 14, offset: 27620},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 798, col: 14, offset: 27620},
							name: "WS",
						},
						&litMatcher{
							pos:        position{line: 798, col: 17, offset: 27623},
							val:        "+",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 798, col: 21, offset: 27627},
							expr: &ruleRefExpr{
								pos:  position{line: 798, col: 21, offset: 27627},
								name: "WS",
							},
						},
						&andExpr{
							pos: position{line: 798, col: 25, offset: 27631},
							expr: &ruleRefExpr{
								pos:  position{line: 798, col: 26, offset: 27632},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 805, col: 1, offset: 27916},
			expr: &actionExpr{
				pos: position{line: 805, col: 15, offset: 27930},
				run: (*parser).callonQuotedText1,
				expr: &seqExpr{
					pos: position{line: 805, col: 15, offset: 27930},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 805, col: 15, offset: 27930},
							expr: &ruleRefExpr{
								pos:  position{line: 805, col: 16, offset: 27931},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 805, col: 19, offset: 27934},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 805, col: 25, offset: 27940},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 805, col: 25, offset: 27940},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 806, col: 15, offset: 27964},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 807, col: 15, offset: 27990},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 808, col: 15, offset: 28019},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 809, col: 15, offset: 28048},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 810, col: 15, offset: 28079},
										name: "EscapedBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 811, col: 15, offset: 28110},
										name: "EscapedItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 812, col: 15, offset: 28143},
										name: "EscapedMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 813, col: 15, offset: 28179},
										name: "EscapedSubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 814, col: 15, offset: 28215},
										name: "EscapedSuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 815, col: 15, offset: 28252},
										name: "SubscriptOrSuperscriptPrefix",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextPrefix",
			pos:  position{line: 819, col: 1, offset: 28406},
			expr: &choiceExpr{
				pos: position{line: 819, col: 21, offset: 28426},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 819, col: 21, offset: 28426},
						val:        "**",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 819, col: 28, offset: 28433},
						val:        "*",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 819, col: 34, offset: 28439},
						val:        "__",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 819, col: 41, offset: 28446},
						val:        "_",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 819, col: 47, offset: 28452},
						val:        "``",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 819, col: 54, offset: 28459},
						val:        "`",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 819, col: 60, offset: 28465},
						val:        "^",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 819, col: 66, offset: 28471},
						val:        "~",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 821, col: 1, offset: 28476},
			expr: &choiceExpr{
				pos: position{line: 821, col: 33, offset: 28508},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 821, col: 33, offset: 28508},
						val:        "^",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 821, col: 39, offset: 28514},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 821, col: 39, offset: 28514},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 825, col: 1, offset: 28647},
			expr: &actionExpr{
				pos: position{line: 825, col: 25, offset: 28671},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 825, col: 25, offset: 28671},
					expr: &litMatcher{
						pos:        position{line: 825, col: 25, offset: 28671},
						val:        "\\",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 829, col: 1, offset: 28712},
			expr: &actionExpr{
				pos: position{line: 829, col: 25, offset: 28736},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 829, col: 25, offset: 28736},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 829, col: 25, offset: 28736},
							val:        "\\\\",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 829, col: 30, offset: 28741},
							expr: &litMatcher{
								pos:        position{line: 829, col: 30, offset: 28741},
								val:        "\\",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 837, col: 1, offset: 28838},
			expr: &choiceExpr{
				pos: position{line: 837, col: 13, offset: 28850},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 837, col: 13, offset: 28850},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 837, col: 35, offset: 28872},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 839, col: 1, offset: 28893},
			expr: &actionExpr{
				pos: position{line: 839, col: 24, offset: 28916},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 839, col: 24, offset: 28916},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 839, col: 24, offset: 28916},
							expr: &litMatcher{
								pos:        position{line: 839, col: 25, offset: 28917},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 839, col: 30, offset: 28922},
							val:        "**",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 839, col: 35, offset: 28927},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 839, col: 45, offset: 28937},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 839, col: 74, offset: 28966},
							val:        "**",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 843, col: 1, offset: 29092},
			expr: &seqExpr{
				pos: position{line: 843, col: 32, offset: 29123},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 843, col: 32, offset: 29123},
						name: "DoubleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 843, col: 59, offset: 29150},
						expr: &seqExpr{
							pos: position{line: 843, col: 60, offset: 29151},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 843, col: 60, offset: 29151},
									expr: &litMatcher{
										pos:        position{line: 843, col: 62, offset: 29153},
										val:        "**",
										ignoreCase: false,
									},
								},
								&choiceExpr{
									pos: position{line: 843, col: 69, offset: 29160},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 843, col: 69, offset: 29160},
											name: "WS",
										},
										&ruleRefExpr{
											pos:  position{line: 843, col: 74, offset: 29165},
											name: "DoubleQuoteBoldTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 845, col: 1, offset: 29230},
			expr: &actionExpr{
				pos: position{line: 845, col: 31, offset: 29260},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 845, col: 31, offset: 29260},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 845, col: 31, offset: 29260},
							expr: &ruleRefExpr{
								pos:  position{line: 845, col: 32, offset: 29261},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 845, col: 40, offset: 29269},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 845, col: 49, offset: 29278},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 845, col: 49, offset: 29278},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 846, col: 11, offset: 29309},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 847, col: 11, offset: 29331},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 848, col: 11, offset: 29355},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 849, col: 11, offset: 29379},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 850, col: 11, offset: 29405},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 851, col: 11, offset: 29428},
										name: "QuotedLink",
									},
									&ruleRefExpr{
										pos:  position{line: 852, col: 11, offset: 29450},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 853, col: 11, offset: 29473},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 854, col: 11, offset: 29513},
										name: "NonDoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 855, col: 11, offset: 29546},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteBoldText",
			pos:  position{line: 859, col: 1, offset: 29691},
			expr: &actionExpr{
				pos: position{line: 859, col: 27, offset: 29717},
				run: (*parser).callonNonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 859, col: 27, offset: 29717},
					exprs: []interface{}{
						&anyMatcher{
							line: 859, col: 28, offset: 29718,
						},
						&zeroOrMoreExpr{
							pos: position{line: 859, col: 31, offset: 29721},
							expr: &seqExpr{
								pos: position{line: 859, col: 32, offset: 29722},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 859, col: 32, offset: 29722},
										expr: &litMatcher{
											pos:        position{line: 859, col: 33, offset: 29723},
											val:        "**",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 859, col: 38, offset: 29728},
										expr: &ruleRefExpr{
											pos:  position{line: 859, col: 39, offset: 29729},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 859, col: 42, offset: 29732},
										expr: &litMatcher{
											pos:        position{line: 859, col: 43, offset: 29733},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 859, col: 47, offset: 29737},
										expr: &litMatcher{
											pos:        position{line: 859, col: 48, offset: 29738},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 859, col: 52, offset: 29742},
										expr: &ruleRefExpr{
											pos:  position{line: 859, col: 53, offset: 29743},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 859, col: 61, offset: 29751},
										expr: &ruleRefExpr{
											pos:  position{line: 859, col: 62, offset: 29752},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 859, col: 74, offset: 29764,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 863, col: 1, offset: 29824},
			expr: &choiceExpr{
				pos: position{line: 863, col: 24, offset: 29847},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 863, col: 24, offset: 29847},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 863, col: 24, offset: 29847},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 863, col: 24, offset: 29847},
									expr: &litMatcher{
										pos:        position{line: 863, col: 25, offset: 29848},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 863, col: 29, offset: 29852},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 863, col: 33, offset: 29856},
									expr: &litMatcher{
										pos:        position{line: 863, col: 34, offset: 29857},
										val:        "*",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 863, col: 38, offset: 29861},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 863, col: 48, offset: 29871},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 863, col: 77, offset: 29900},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 865, col: 5, offset: 30081},
						run: (*parser).callonSingleQuoteBoldText12,
						expr: &seqExpr{
							pos: position{line: 865, col: 5, offset: 30081},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 865, col: 5, offset: 30081},
									expr: &litMatcher{
										pos:        position{line: 865, col: 6, offset: 30082},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 865, col: 11, offset: 30087},
									val:        "*",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 865, col: 15, offset: 30091},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 865, col: 25, offset: 30101},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 865, col: 25, offset: 30101},
												val:        "*",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 865, col: 29, offset: 30105},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 865, col: 58, offset: 30134},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 869, col: 1, offset: 30333},
			expr: &seqExpr{
				pos: position{line: 869, col: 32, offset: 30364},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 869, col: 32, offset: 30364},
						expr: &ruleRefExpr{
							pos:  position{line: 869, col: 33, offset: 30365},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 869, col: 36, offset: 30368},
						name: "SingleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 869, col: 63, offset: 30395},
						expr: &seqExpr{
							pos: position{line: 869, col: 64, offset: 30396},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 869, col: 64, offset: 30396},
									expr: &seqExpr{
										pos: position{line: 869, col: 66, offset: 30398},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 869, col: 66, offset: 30398},
												val:        "*",
												ignoreCase: false,
											},
											&notExpr{
												pos: position{line: 869, col: 70, offset: 30402},
												expr: &ruleRefExpr{
													pos:  position{line: 869, col: 71, offset: 30403},
													name: "Alphanum",
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 869, col: 81, offset: 30413},
									expr: &ruleRefExpr{
										pos:  position{line: 869, col: 81, offset: 30413},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 869, col: 85, offset: 30417},
									name: "SingleQuoteBoldTextElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 871, col: 1, offset: 30448},
			expr: &actionExpr{
				pos: position{line: 871, col: 31, offset: 30478},
				run: (*parser).callonSingleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 871, col: 31, offset: 30478},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 871, col: 31, offset: 30478},
							expr: &ruleRefExpr{
								pos:  position{line: 871, col: 32, offset: 30479},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 871, col: 40, offset: 30487},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 871, col: 49, offset: 30496},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 871, col: 49, offset: 30496},
										name: "DoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 872, col: 11, offset: 30526},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 873, col: 11, offset: 30548},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 874, col: 11, offset: 30572},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 875, col: 11, offset: 30596},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 876, col: 11, offset: 30622},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 877, col: 11, offset: 30645},
										name: "QuotedLink",
									},
									&ruleRefExpr{
										pos:  position{line: 878, col: 11, offset: 30667},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 879, col: 11, offset: 30690},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 880, col: 11, offset: 30730},
										name: "NonSingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 881, col: 11, offset: 30763},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteBoldText",
			pos:  position{line: 885, col: 1, offset: 30908},
			expr: &actionExpr{
				pos: position{line: 885, col: 27, offset: 30934},
				run: (*parser).callonNonSingleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 885, col: 27, offset: 30934},
					exprs: []interface{}{
						&anyMatcher{
							line: 885, col: 28, offset: 30935,
						},
						&zeroOrMoreExpr{
							pos: position{line: 885, col: 31, offset: 30938},
							expr: &seqExpr{
								pos: position{line: 885, col: 32, offset: 30939},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 885, col: 32, offset: 30939},
										expr: &litMatcher{
											pos:        position{line: 885, col: 33, offset: 30940},
											val:        "*",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 885, col: 37, offset: 30944},
										expr: &ruleRefExpr{
											pos:  position{line: 885, col: 38, offset: 30945},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 885, col: 41, offset: 30948},
										expr: &litMatcher{
											pos:        position{line: 885, col: 42, offset: 30949},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 885, col: 46, offset: 30953},
										expr: &litMatcher{
											pos:        position{line: 885, col: 47, offset: 30954},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 885, col: 51, offset: 30958},
										expr: &ruleRefExpr{
											pos:  position{line: 885, col: 52, offset: 30959},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 885, col: 60, offset: 30967},
										expr: &ruleRefExpr{
											pos:  position{line: 885, col: 61, offset: 30968},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 885, col: 73, offset: 30980,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 889, col: 1, offset: 31040},
			expr: &choiceExpr{
				pos: position{line: 890, col: 5, offset: 31064},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 890, col: 5, offset: 31064},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 890, col: 5, offset: 31064},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 890, col: 5, offset: 31064},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 890, col: 18, offset: 31077},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 890, col: 40, offset: 31099},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 890, col: 45, offset: 31104},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 890, col: 55, offset: 31114},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 890, col: 84, offset: 31143},
									val:        "**",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 892, col: 9, offset: 31300},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 892, col: 9, offset: 31300},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 892, col: 9, offset: 31300},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 892, col: 22, offset: 31313},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 892, col: 44, offset: 31335},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 892, col: 49, offset: 31340},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 892, col: 59, offset: 31350},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 892, col: 88, offset: 31379},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 895, col: 9, offset: 31579},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 895, col: 9, offset: 31579},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 895, col: 9, offset: 31579},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 895, col: 22, offset: 31592},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 895, col: 44, offset: 31614},
									val:        "*",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 895, col: 48, offset: 31618},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 895, col: 58, offset: 31628},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 895, col: 87, offset: 31657},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 903, col: 1, offset: 31865},
			expr: &choiceExpr{
				pos: position{line: 903, col: 15, offset: 31879},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 903, col: 15, offset: 31879},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 903, col: 39, offset: 31903},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 905, col: 1, offset: 31926},
			expr: &actionExpr{
				pos: position{line: 905, col: 26, offset: 31951},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 905, col: 26, offset: 31951},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 905, col: 26, offset: 31951},
							expr: &litMatcher{
								pos:        position{line: 905, col: 27, offset: 31952},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 905, col: 32, offset: 31957},
							val:        "__",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 905, col: 37, offset: 31962},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 905, col: 47, offset: 31972},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 905, col: 78, offset: 32003},
							val:        "__",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 909, col: 1, offset: 32130},
			expr: &seqExpr{
				pos: position{line: 909, col: 34, offset: 32163},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 909, col: 34, offset: 32163},
						name: "DoubleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 909, col: 63, offset: 32192},
						expr: &seqExpr{
							pos: position{line: 909, col: 64, offset: 32193},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 909, col: 64, offset: 32193},
									expr: &litMatcher{
										pos:        position{line: 909, col: 66, offset: 32195},
										val:        "__",
										ignoreCase: false,
									},
								},
								&choiceExpr{
									pos: position{line: 909, col: 73, offset: 32202},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 909, col: 73, offset: 32202},
											name: "WS",
										},
										&ruleRefExpr{
											pos:  position{line: 909, col: 78, offset: 32207},
											name: "DoubleQuoteItalicTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 911, col: 1, offset: 32274},
			expr: &actionExpr{
				pos: position{line: 911, col: 33, offset: 32306},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 911, col: 33, offset: 32306},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 911, col: 33, offset: 32306},
							expr: &ruleRefExpr{
								pos:  position{line: 911, col: 34, offset: 32307},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 911, col: 42, offset: 32315},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 911, col: 51, offset: 32324},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 911, col: 51, offset: 32324},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 912, col: 11, offset: 32357},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 913, col: 11, offset: 32377},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 914, col: 11, offset: 32401},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 915, col: 11, offset: 32425},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 916, col: 11, offset: 32451},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 917, col: 11, offset: 32474},
										name: "QuotedLink",
									},
									&ruleRefExpr{
										pos:  position{line: 918, col: 11, offset: 32496},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 919, col: 11, offset: 32519},
										name: "NonDoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 920, col: 11, offset: 32554},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteItalicText",
			pos:  position{line: 924, col: 1, offset: 32699},
			expr: &actionExpr{
				pos: position{line: 924, col: 29, offset: 32727},
				run: (*parser).callonNonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 924, col: 29, offset: 32727},
					exprs: []interface{}{
						&anyMatcher{
							line: 924, col: 30, offset: 32728,
						},
						&zeroOrMoreExpr{
							pos: position{line: 924, col: 33, offset: 32731},
							expr: &seqExpr{
								pos: position{line: 924, col: 34, offset: 32732},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 924, col: 34, offset: 32732},
										expr: &litMatcher{
											pos:        position{line: 924, col: 35, offset: 32733},
											val:        "__",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 924, col: 40, offset: 32738},
										expr: &litMatcher{
											pos:        position{line: 924, col: 41, offset: 32739},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 924, col: 45, offset: 32743},
										expr: &litMatcher{
											pos:        position{line: 924, col: 46, offset: 32744},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 924, col: 50, offset: 32748},
										expr: &ruleRefExpr{
											pos:  position{line: 924, col: 51, offset: 32749},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 924, col: 59, offset: 32757},
										expr: &ruleRefExpr{
											pos:  position{line: 924, col: 60, offset: 32758},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 924, col: 72, offset: 32770,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 928, col: 1, offset: 32830},
			expr: &choiceExpr{
				pos: position{line: 928, col: 26, offset: 32855},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 928, col: 26, offset: 32855},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 928, col: 26, offset: 32855},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 928, col: 26, offset: 32855},
									expr: &litMatcher{
										pos:        position{line: 928, col: 27, offset: 32856},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 928, col: 31, offset: 32860},
									val:        "_",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 928, col: 35, offset: 32864},
									expr: &litMatcher{
										pos:        position{line: 928, col: 36, offset: 32865},
										val:        "_",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 928, col: 40, offset: 32869},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 928, col: 50, offset: 32879},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 928, col: 81, offset: 32910},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 930, col: 5, offset: 33093},
						run: (*parser).callonSingleQuoteItalicText12,
						expr: &seqExpr{
							pos: position{line: 930, col: 5, offset: 33093},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 930, col: 5, offset: 33093},
									expr: &litMatcher{
										pos:        position{line: 930, col: 6, offset: 33094},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 930, col: 11, offset: 33099},
									val:        "_",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 930, col: 15, offset: 33103},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 930, col: 25, offset: 33113},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 930, col: 25, offset: 33113},
												val:        "_",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 930, col: 29, offset: 33117},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 930, col: 60, offset: 33148},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 934, col: 1, offset: 33351},
			expr: &seqExpr{
				pos: position{line: 934, col: 34, offset: 33384},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 934, col: 34, offset: 33384},
						expr: &ruleRefExpr{
							pos:  position{line: 934, col: 35, offset: 33385},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 934, col: 38, offset: 33388},
						name: "SingleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 934, col: 67, offset: 33417},
						expr: &seqExpr{
							pos: position{line: 934, col: 68, offset: 33418},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 934, col: 68, offset: 33418},
									expr: &seqExpr{
										pos: position{line: 934, col: 70, offset: 33420},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 934, col: 70, offset: 33420},
												val:        "_",
												ignoreCase: false,
											},
											&notExpr{
												pos: position{line: 934, col: 74, offset: 33424},
												expr: &ruleRefExpr{
													pos:  position{line: 934, col: 75, offset: 33425},
													name: "Alphanum",
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 934, col: 85, offset: 33435},
									expr: &ruleRefExpr{
										pos:  position{line: 934, col: 85, offset: 33435},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 934, col: 89, offset: 33439},
									name: "SingleQuoteItalicTextElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 936, col: 1, offset: 33471},
			expr: &actionExpr{
				pos: position{line: 936, col: 33, offset: 33503},
				run: (*parser).callonSingleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 936, col: 33, offset: 33503},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 936, col: 33, offset: 33503},
							expr: &ruleRefExpr{
								pos:  position{line: 936, col: 34, offset: 33504},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 936, col: 42, offset: 33512},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 936, col: 51, offset: 33521},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 936, col: 51, offset: 33521},
										name: "DoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 937, col: 11, offset: 33553},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 938, col: 11, offset: 33573},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 939, col: 11, offset: 33597},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 940, col: 11, offset: 33621},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 941, col: 11, offset: 33647},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 942, col: 11, offset: 33670},
										name: "QuotedLink",
									},
									&ruleRefExpr{
										pos:  position{line: 943, col: 11, offset: 33692},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 944, col: 11, offset: 33715},
										name: "NonSingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 945, col: 11, offset: 33750},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteItalicText",
			pos:  position{line: 949, col: 1, offset: 33895},
			expr: &actionExpr{
				pos: position{line: 949, col: 29, offset: 33923},
				run: (*parser).callonNonSingleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 949, col: 29, offset: 33923},
					exprs: []interface{}{
						&anyMatcher{
							line: 949, col: 30, offset: 33924,
						},
						&zeroOrMoreExpr{
							pos: position{line: 949, col: 33, offset: 33927},
							expr: &seqExpr{
								pos: position{line: 949, col: 34, offset: 33928},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 949, col: 34, offset: 33928},
										expr: &litMatcher{
											pos:        position{line: 949, col: 35, offset: 33929},
											val:        "_",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 949, col: 39, offset: 33933},
										expr: &ruleRefExpr{
											pos:  position{line: 949, col: 40, offset: 33934},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 949, col: 43, offset: 33937},
										expr: &litMatcher{
											pos:        position{line: 949, col: 44, offset: 33938},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 949, col: 48, offset: 33942},
										expr: &litMatcher{
											pos:        position{line: 949, col: 49, offset: 33943},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 949, col: 53, offset: 33947},
										expr: &ruleRefExpr{
											pos:  position{line: 949, col: 54, offset: 33948},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 949, col: 62, offset: 33956},
										expr: &ruleRefExpr{
											pos:  position{line: 949, col: 63, offset: 33957},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 949, col: 75, offset: 33969,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 953, col: 1, offset: 34029},
			expr: &choiceExpr{
				pos: position{line: 954, col: 5, offset: 34055},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 954, col: 5, offset: 34055},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 954, col: 5, offset: 34055},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 954, col: 5, offset: 34055},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 954, col: 18, offset: 34068},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 954, col: 40, offset: 34090},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 954, col: 45, offset: 34095},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 954, col: 55, offset: 34105},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 954, col: 86, offset: 34136},
									val:        "__",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 956, col: 9, offset: 34293},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 956, col: 9, offset: 34293},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 956, col: 9, offset: 34293},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 956, col: 22, offset: 34306},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 956, col: 44, offset: 34328},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 956, col: 49, offset: 34333},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 956, col: 59, offset: 34343},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 956, col: 90, offset: 34374},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 959, col: 9, offset: 34574},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 959, col: 9, offset: 34574},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 959, col: 9, offset: 34574},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 959, col: 22, offset: 34587},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 959, col: 44, offset: 34609},
									val:        "_",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 959, col: 48, offset: 34613},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 959, col: 58, offset: 34623},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 959, col: 89, offset: 34654},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 966, col: 1, offset: 34864},
			expr: &choiceExpr{
				pos: position{line: 966, col: 18, offset: 34881},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 966, col: 18, offset: 34881},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 966, col: 45, offset: 34908},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 968, col: 1, offset: 34934},
			expr: &actionExpr{
				pos: position{line: 968, col: 29, offset: 34962},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 968, col: 29, offset: 34962},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 968, col: 29, offset: 34962},
							expr: &litMatcher{
								pos:        position{line: 968, col: 30, offset: 34963},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 968, col: 35, offset: 34968},
							val:        "``",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 968, col: 40, offset: 34973},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 968, col: 50, offset: 34983},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 968, col: 84, offset: 35017},
							val:        "``",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 972, col: 1, offset: 35147},
			expr: &seqExpr{
				pos: position{line: 972, col: 37, offset: 35183},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 972, col: 37, offset: 35183},
						name: "DoubleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 972, col: 69, offset: 35215},
						expr: &seqExpr{
							pos: position{line: 972, col: 70, offset: 35216},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 972, col: 70, offset: 35216},
									expr: &litMatcher{
										pos:        position{line: 972, col: 72, offset: 35218},
										val:        "``",
										ignoreCase: false,
									},
								},
								&choiceExpr{
									pos: position{line: 972, col: 79, offset: 35225},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 972, col: 79, offset: 35225},
											name: "WS",
										},
										&ruleRefExpr{
											pos:  position{line: 972, col: 84, offset: 35230},
											name: "DoubleQuoteMonospaceTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 974, col: 1, offset: 35299},
			expr: &actionExpr{
				pos: position{line: 974, col: 36, offset: 35334},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 974, col: 36, offset: 35334},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 974, col: 36, offset: 35334},
							expr: &ruleRefExpr{
								pos:  position{line: 974, col: 37, offset: 35335},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 974, col: 45, offset: 35343},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 974, col: 54, offset: 35352},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 974, col: 54, offset: 35352},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 975, col: 11, offset: 35388},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 976, col: 11, offset: 35407},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 977, col: 11, offset: 35429},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 978, col: 11, offset: 35453},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 979, col: 11, offset: 35479},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 980, col: 11, offset: 35502},
										name: "QuotedLink",
									},
									&ruleRefExpr{
										pos:  position{line: 981, col: 11, offset: 35524},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 982, col: 11, offset: 35547},
										name: "NonDoubleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 983, col: 11, offset: 35585},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteMonospaceText",
			pos:  position{line: 987, col: 1, offset: 35730},
			expr: &actionExpr{
				pos: position{line: 987, col: 32, offset: 35761},
				run: (*parser).callonNonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 987, col: 32, offset: 35761},
					exprs: []interface{}{
						&anyMatcher{
							line: 987, col: 33, offset: 35762,
						},
						&zeroOrMoreExpr{
							pos: position{line: 987, col: 36, offset: 35765},
							expr: &seqExpr{
								pos: position{line: 987, col: 37, offset: 35766},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 987, col: 37, offset: 35766},
										expr: &litMatcher{
											pos:        position{line: 987, col: 38, offset: 35767},
											val:        "``",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 987, col: 43, offset: 35772},
										expr: &ruleRefExpr{
											pos:  position{line: 987, col: 44, offset: 35773},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 987, col: 47, offset: 35776},
										expr: &litMatcher{
											pos:        position{line: 987, col: 48, offset: 35777},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 987, col: 52, offset: 35781},
										expr: &litMatcher{
											pos:        position{line: 987, col: 53, offset: 35782},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 987, col: 57, offset: 35786},
										expr: &ruleRefExpr{
											pos:  position{line: 987, col: 58, offset: 35787},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 987, col: 66, offset: 35795},
										expr: &ruleRefExpr{
											pos:  position{line: 987, col: 67, offset: 35796},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 987, col: 79, offset: 35808,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 991, col: 1, offset: 35868},
			expr: &choiceExpr{
				pos: position{line: 991, col: 29, offset: 35896},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 991, col: 29, offset: 35896},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 991, col: 29, offset: 35896},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 991, col: 29, offset: 35896},
									expr: &litMatcher{
										pos:        position{line: 991, col: 30, offset: 35897},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 991, col: 34, offset: 35901},
									expr: &litMatcher{
										pos:        position{line: 991, col: 35, offset: 35902},
										val:        "``",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 991, col: 40, offset: 35907},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 991, col: 44, offset: 35911},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 991, col: 54, offset: 35921},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 991, col: 88, offset: 35955},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 993, col: 5, offset: 36141},
						run: (*parser).callonSingleQuoteMonospaceText12,
						expr: &seqExpr{
							pos: position{line: 993, col: 5, offset: 36141},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 993, col: 5, offset: 36141},
									expr: &litMatcher{
										pos:        position{line: 993, col: 6, offset: 36142},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 993, col: 11, offset: 36147},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 993, col: 15, offset: 36151},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 993, col: 25, offset: 36161},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 993, col: 25, offset: 36161},
												val:        "`",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 993, col: 29, offset: 36165},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 993, col: 63, offset: 36199},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 997, col: 1, offset: 36408},
			expr: &seqExpr{
				pos: position{line: 997, col: 37, offset: 36444},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 997, col: 37, offset: 36444},
						expr: &ruleRefExpr{
							pos:  position{line: 997, col: 38, offset: 36445},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 997, col: 41, offset: 36448},
						name: "SingleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 997, col: 73, offset: 36480},
						expr: &seqExpr{
							pos: position{line: 997, col: 74, offset: 36481},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 997, col: 74, offset: 36481},
									expr: &seqExpr{
										pos: position{line: 997, col: 76, offset: 36483},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 997, col: 76, offset: 36483},
												val:        "`",
												ignoreCase: false,
											},
											&notExpr{
												pos: position{line: 997, col: 80, offset: 36487},
												expr: &ruleRefExpr{
													pos:  position{line: 997, col: 81, offset: 36488},
													name: "Alphanum",
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 997, col: 91, offset: 36498},
									expr: &ruleRefExpr{
										pos:  position{line: 997, col: 91, offset: 36498},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 997, col: 95, offset: 36502},
									name: "SingleQuoteMonospaceTextElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 999, col: 1, offset: 36537},
			expr: &actionExpr{
				pos: position{line: 999, col: 37, offset: 36573},
				run: (*parser).callonSingleQuoteMonospaceTextElement1,
				expr: &labeledExpr{
					pos:   position{line: 999, col: 37, offset: 36573},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 999, col: 46, offset: 36582},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 999, col: 46, offset: 36582},
								name: "NEWLINE",
							},
							&ruleRefExpr{
								pos:  position{line: 1000, col: 11, offset: 36620},
								name: "DoubleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 1001, col: 11, offset: 36656},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1002, col: 11, offset: 36676},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1003, col: 11, offset: 36697},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1004, col: 11, offset: 36721},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1005, col: 11, offset: 36747},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 1006, col: 11, offset: 36770},
								name: "QuotedLink",
							},
							&ruleRefExpr{
								pos:  position{line: 1007, col: 11, offset: 36792},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 1008, col: 11, offset: 36815},
								name: "NonSingleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 1009, col: 11, offset: 36853},
								name: "Parenthesis",
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteMonospaceText",
			pos:  position{line: 1013, col: 1, offset: 36998},
			expr: &actionExpr{
				pos: position{line: 1013, col: 32, offset: 37029},
				run: (*parser).callonNonSingleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1013, col: 32, offset: 37029},
					exprs: []interface{}{
						&anyMatcher{
							line: 1013, col: 33, offset: 37030,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1013, col: 36, offset: 37033},
							expr: &seqExpr{
								pos: position{line: 1013, col: 37, offset: 37034},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1013, col: 37, offset: 37034},
										expr: &ruleRefExpr{
											pos:  position{line: 1013, col: 38, offset: 37035},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1013, col: 41, offset: 37038},
										expr: &litMatcher{
											pos:        position{line: 1013, col: 42, offset: 37039},
											val:        "`",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1013, col: 46, offset: 37043},
										expr: &litMatcher{
											pos:        position{line: 1013, col: 47, offset: 37044},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1013, col: 51, offset: 37048},
										expr: &litMatcher{
											pos:        position{line: 1013, col: 52, offset: 37049},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1013, col: 56, offset: 37053},
										expr: &ruleRefExpr{
											pos:  position{line: 1013, col: 57, offset: 37054},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 1013, col: 65, offset: 37062},
										expr: &ruleRefExpr{
											pos:  position{line: 1013, col: 66, offset: 37063},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 1013, col: 78, offset: 37075,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1017, col: 1, offset: 37156},
			expr: &choiceExpr{
				pos: position{line: 1018, col: 5, offset: 37185},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1018, col: 5, offset: 37185},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1018, col: 5, offset: 37185},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1018, col: 5, offset: 37185},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1018, col: 18, offset: 37198},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1018, col: 40, offset: 37220},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1018, col: 45, offset: 37225},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1018, col: 55, offset: 37235},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1018, col: 89, offset: 37269},
									val:        "``",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1020, col: 9, offset: 37426},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1020, col: 9, offset: 37426},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1020, col: 9, offset: 37426},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1020, col: 22, offset: 37439},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1020, col: 44, offset: 37461},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1020, col: 49, offset: 37466},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1020, col: 59, offset: 37476},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1020, col: 93, offset: 37510},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1023, col: 9, offset: 37710},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1023, col: 9, offset: 37710},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1023, col: 9, offset: 37710},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1023, col: 22, offset: 37723},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1023, col: 44, offset: 37745},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1023, col: 48, offset: 37749},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1023, col: 58, offset: 37759},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1023, col: 92, offset: 37793},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1027, col: 1, offset: 37943},
			expr: &actionExpr{
				pos: position{line: 1027, col: 18, offset: 37960},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1027, col: 18, offset: 37960},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1027, col: 18, offset: 37960},
							expr: &litMatcher{
								pos:        position{line: 1027, col: 19, offset: 37961},
								val:        "\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 1027, col: 23, offset: 37965},
							val:        "~",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1027, col: 27, offset: 37969},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1027, col: 36, offset: 37978},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1027, col: 58, offset: 38000},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1031, col: 1, offset: 38089},
			expr: &choiceExpr{
				pos: position{line: 1031, col: 25, offset: 38113},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1031, col: 25, offset: 38113},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1031, col: 38, offset: 38126},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1033, col: 1, offset: 38145},
			expr: &actionExpr{
				pos: position{line: 1033, col: 21, offset: 38165},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1033, col: 21, offset: 38165},
					expr: &seqExpr{
						pos: position{line: 1033, col: 22, offset: 38166},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1033, col: 22, offset: 38166},
								expr: &ruleRefExpr{
									pos:  position{line: 1033, col: 23, offset: 38167},
									name: "NEWLINE",
								},
							},
							&notExpr{
								pos: position{line: 1033, col: 31, offset: 38175},
								expr: &ruleRefExpr{
									pos:  position{line: 1033, col: 32, offset: 38176},
									name: "WS",
								},
							},
							&notExpr{
								pos: position{line: 1033, col: 35, offset: 38179},
								expr: &litMatcher{
									pos:        position{line: 1033, col: 36, offset: 38180},
									val:        "~",
									ignoreCase: false,
								},
							},
							&anyMatcher{
								line: 1033, col: 40, offset: 38184,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1037, col: 1, offset: 38217},
			expr: &actionExpr{
				pos: position{line: 1037, col: 25, offset: 38241},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1037, col: 25, offset: 38241},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1037, col: 25, offset: 38241},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1037, col: 38, offset: 38254},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1037, col: 60, offset: 38276},
							val:        "~",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1037, col: 64, offset: 38280},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1037, col: 73, offset: 38289},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1037, col: 95, offset: 38311},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1041, col: 1, offset: 38440},
			expr: &actionExpr{
				pos: position{line: 1041, col: 20, offset: 38459},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1041, col: 20, offset: 38459},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1041, col: 20, offset: 38459},
							expr: &litMatcher{
								pos:        position{line: 1041, col: 21, offset: 38460},
								val:        "\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 1041, col: 25, offset: 38464},
							val:        "^",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1041, col: 29, offset: 38468},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1041, col: 38, offset: 38477},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1041, col: 62, offset: 38501},
							val:        "^",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1045, col: 1, offset: 38592},
			expr: &choiceExpr{
				pos: position{line: 1045, col: 27, offset: 38618},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1045, col: 27, offset: 38618},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1045, col: 40, offset: 38631},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1047, col: 1, offset: 38652},
			expr: &actionExpr{
				pos: position{line: 1047, col: 23, offset: 38674},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1047, col: 23, offset: 38674},
					expr: &seqExpr{
						pos: position{line: 1047, col: 24, offset: 38675},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1047, col: 24, offset: 38675},
								expr: &ruleRefExpr{
									pos:  position{line: 1047, col: 25, offset: 38676},
									name: "NEWLINE",
								},
							},
							&notExpr{
								pos: position{line: 1047, col: 33, offset: 38684},
								expr: &ruleRefExpr{
									pos:  position{line: 1047, col: 34, offset: 38685},
									name: "WS",
								},
							},
							&notExpr{
								pos: position{line: 1047, col: 37, offset: 38688},
								expr: &litMatcher{
									pos:        position{line: 1047, col: 38, offset: 38689},
									val:        "^",
									ignoreCase: false,
								},
							},
							&anyMatcher{
								line: 1047, col: 42, offset: 38693,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1051, col: 1, offset: 38726},
			expr: &actionExpr{
				pos: position{line: 1051, col: 27, offset: 38752},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1051, col: 27, offset: 38752},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1051, col: 27, offset: 38752},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1051, col: 40, offset: 38765},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1051, col: 62, offset: 38787},
							val:        "^",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1051, col: 66, offset: 38791},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1051, col: 75, offset: 38800},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1051, col: 99, offset: 38824},
							val:        "^",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Passthrough",
			pos:  position{line: 1058, col: 1, offset: 39060},
			expr: &choiceExpr{
				pos: position{line: 1058, col: 16, offset: 39075},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1058, col: 16, offset: 39075},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1058, col: 40, offset: 39099},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1058, col: 64, offset: 39123},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1060, col: 1, offset: 39141},
			expr: &litMatcher{
				pos:        position{line: 1060, col: 32, offset: 39172},
				val:        "+",
				ignoreCase: false,
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1062, col: 1, offset: 39177},
			expr: &actionExpr{
				pos: position{line: 1062, col: 26, offset: 39202},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1062, col: 26, offset: 39202},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1062, col: 26, offset: 39202},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1062, col: 54, offset: 39230},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1062, col: 63, offset: 39239},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1062, col: 93, offset: 39269},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1062, col: 121, offset: 39297},
							expr: &ruleRefExpr{
								pos:  position{line: 1062, col: 122, offset: 39298},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1066, col: 1, offset: 39397},
			expr: &choiceExpr{
				pos: position{line: 1066, col: 33, offset: 39429},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1066, col: 34, offset: 39430},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1066, col: 34, offset: 39430},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1066, col: 35, offset: 39431},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1066, col: 35, offset: 39431},
											expr: &ruleRefExpr{
												pos:  position{line: 1066, col: 36, offset: 39432},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1066, col: 64, offset: 39460},
											expr: &ruleRefExpr{
												pos:  position{line: 1066, col: 65, offset: 39461},
												name: "WS",
											},
										},
										&notExpr{
											pos: position{line: 1066, col: 68, offset: 39464},
											expr: &ruleRefExpr{
												pos:  position{line: 1066, col: 69, offset: 39465},
												name: "NEWLINE",
											},
										},
										&anyMatcher{
											line: 1066, col: 77, offset: 39473,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1066, col: 80, offset: 39476},
									expr: &seqExpr{
										pos: position{line: 1066, col: 81, offset: 39477},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1066, col: 81, offset: 39477},
												expr: &seqExpr{
													pos: position{line: 1066, col: 83, offset: 39479},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1066, col: 83, offset: 39479},
															expr: &ruleRefExpr{
																pos:  position{line: 1066, col: 83, offset: 39479},
																name: "WS",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1066, col: 87, offset: 39483},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1066, col: 116, offset: 39512},
												expr: &ruleRefExpr{
													pos:  position{line: 1066, col: 117, offset: 39513},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1066, col: 145, offset: 39541},
												expr: &ruleRefExpr{
													pos:  position{line: 1066, col: 146, offset: 39542},
													name: "NEWLINE",
												},
											},
											&anyMatcher{
												line: 1066, col: 154, offset: 39550,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1068, col: 7, offset: 39692},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1068, col: 8, offset: 39693},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1068, col: 8, offset: 39693},
									expr: &ruleRefExpr{
										pos:  position{line: 1068, col: 9, offset: 39694},
										name: "WS",
									},
								},
								&notExpr{
									pos: position{line: 1068, col: 12, offset: 39697},
									expr: &ruleRefExpr{
										pos:  position{line: 1068, col: 13, offset: 39698},
										name: "NEWLINE",
									},
								},
								&notExpr{
									pos: position{line: 1068, col: 21, offset: 39706},
									expr: &ruleRefExpr{
										pos:  position{line: 1068, col: 22, offset: 39707},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1068, col: 50, offset: 39735,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1072, col: 1, offset: 39817},
			expr: &litMatcher{
				pos:        position{line: 1072, col: 32, offset: 39848},
				val:        "+++",
				ignoreCase: false,
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1074, col: 1, offset: 39855},
			expr: &actionExpr{
				pos: position{line: 1074, col: 26, offset: 39880},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1074, col: 26, offset: 39880},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1074, col: 26, offset: 39880},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1074, col: 54, offset: 39908},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1074, col: 63, offset: 39917},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1074, col: 93, offset: 39947},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1074, col: 121, offset: 39975},
							expr: &ruleRefExpr{
								pos:  position{line: 1074, col: 122, offset: 39976},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1078, col: 1, offset: 40075},
			expr: &choiceExpr{
				pos: position{line: 1078, col: 33, offset: 40107},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1078, col: 34, offset: 40108},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1078, col: 34, offset: 40108},
							expr: &seqExpr{
								pos: position{line: 1078, col: 35, offset: 40109},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1078, col: 35, offset: 40109},
										expr: &ruleRefExpr{
											pos:  position{line: 1078, col: 36, offset: 40110},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1078, col: 64, offset: 40138,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1080, col: 7, offset: 40303},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1080, col: 7, offset: 40303},
							expr: &seqExpr{
								pos: position{line: 1080, col: 8, offset: 40304},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1080, col: 8, offset: 40304},
										expr: &ruleRefExpr{
											pos:  position{line: 1080, col: 9, offset: 40305},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1080, col: 12, offset: 40308},
										expr: &ruleRefExpr{
											pos:  position{line: 1080, col: 13, offset: 40309},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 1080, col: 21, offset: 40317},
										expr: &ruleRefExpr{
											pos:  position{line: 1080, col: 22, offset: 40318},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1080, col: 50, offset: 40346,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1084, col: 1, offset: 40429},
			expr: &choiceExpr{
				pos: position{line: 1084, col: 21, offset: 40449},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1084, col: 21, offset: 40449},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1084, col: 21, offset: 40449},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1084, col: 21, offset: 40449},
									val:        "pass:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1084, col: 30, offset: 40458},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1084, col: 38, offset: 40466},
										expr: &ruleRefExpr{
											pos:  position{line: 1084, col: 39, offset: 40467},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1084, col: 67, offset: 40495},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1086, col: 5, offset: 40585},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1086, col: 5, offset: 40585},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1086, col: 5, offset: 40585},
									val:        "pass:q[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1086, col: 15, offset: 40595},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1086, col: 23, offset: 40603},
										expr: &choiceExpr{
											pos: position{line: 1086, col: 24, offset: 40604},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1086, col: 24, offset: 40604},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1086, col: 37, offset: 40617},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1086, col: 65, offset: 40645},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1090, col: 1, offset: 40735},
			expr: &choiceExpr{
				pos: position{line: 1090, col: 31, offset: 40765},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1090, col: 31, offset: 40765},
						name: "Alphanums",
					},
					&ruleRefExpr{
						pos:  position{line: 1090, col: 43, offset: 40777},
						name: "Spaces",
					},
					&actionExpr{
						pos: position{line: 1090, col: 52, offset: 40786},
						run: (*parser).callonPassthroughMacroCharacter4,
						expr: &seqExpr{
							pos: position{line: 1090, col: 53, offset: 40787},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1090, col: 53, offset: 40787},
									expr: &litMatcher{
										pos:        position{line: 1090, col: 54, offset: 40788},
										val:        "]",
										ignoreCase: false,
									},
								},
								&anyMatcher{
									line: 1090, col: 58, offset: 40792,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1097, col: 1, offset: 40962},
			expr: &choiceExpr{
				pos: position{line: 1097, col: 19, offset: 40980},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1097, col: 19, offset: 40980},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1097, col: 44, offset: 41005},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1099, col: 1, offset: 41030},
			expr: &choiceExpr{
				pos: position{line: 1099, col: 27, offset: 41056},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1099, col: 27, offset: 41056},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1099, col: 27, offset: 41056},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1099, col: 27, offset: 41056},
									val:        "<<",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1099, col: 32, offset: 41061},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1099, col: 36, offset: 41065},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1099, col: 40, offset: 41069},
									expr: &ruleRefExpr{
										pos:  position{line: 1099, col: 40, offset: 41069},
										name: "WS",
									},
								},
								&litMatcher{
									pos:        position{line: 1099, col: 44, offset: 41073},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1099, col: 48, offset: 41077},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1099, col: 55, offset: 41084},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1099, col: 76, offset: 41105},
									val:        ">>",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1101, col: 5, offset: 41188},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1101, col: 5, offset: 41188},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1101, col: 5, offset: 41188},
									val:        "<<",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1101, col: 10, offset: 41193},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1101, col: 14, offset: 41197},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1101, col: 18, offset: 41201},
									val:        ">>",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 1105, col: 1, offset: 41273},
			expr: &actionExpr{
				pos: position{line: 1105, col: 27, offset: 41299},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1105, col: 27, offset: 41299},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1105, col: 27, offset: 41299},
							val:        "xref:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1105, col: 35, offset: 41307},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1105, col: 40, offset: 41312},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1105, col: 54, offset: 41326},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1105, col: 72, offset: 41344},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1109, col: 1, offset: 41474},
			expr: &actionExpr{
				pos: position{line: 1109, col: 24, offset: 41497},
				run: (*parser).callonCrossReferenceLabel1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1109, col: 24, offset: 41497},
					expr: &choiceExpr{
						pos: position{line: 1109, col: 25, offset: 41498},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1109, col: 25, offset: 41498},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1109, col: 37, offset: 41510},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1109, col: 47, offset: 41520},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1109, col: 47, offset: 41520},
										expr: &litMatcher{
											pos:        position{line: 1109, col: 48, offset: 41521},
											val:        ">>",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1109, col: 54, offset: 41527,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 1116, col: 1, offset: 41669},
			expr: &choiceExpr{
				pos: position{line: 1116, col: 9, offset: 41677},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1116, col: 9, offset: 41677},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1116, col: 24, offset: 41692},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1119, col: 1, offset: 41773},
			expr: &actionExpr{
				pos: position{line: 1119, col: 17, offset: 41789},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1119, col: 17, offset: 41789},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1119, col: 17, offset: 41789},
							val:        "link:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1119, col: 25, offset: 41797},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1119, col: 30, offset: 41802},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1119, col: 30, offset: 41802},
										name: "Location",
									},
									&ruleRefExpr{
										pos:  position{line: 1119, col: 41, offset: 41813},
										name: "FileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1119, col: 55, offset: 41827},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1119, col: 73, offset: 41845},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1123, col: 1, offset: 41963},
			expr: &actionExpr{
				pos: position{line: 1123, col: 17, offset: 41979},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1123, col: 17, offset: 41979},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1123, col: 17, offset: 41979},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1123, col: 22, offset: 41984},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1123, col: 32, offset: 41994},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1123, col: 49, offset: 42011},
								expr: &ruleRefExpr{
									pos:  position{line: 1123, col: 50, offset: 42012},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1127, col: 1, offset: 42105},
			expr: &choiceExpr{
				pos: position{line: 1127, col: 19, offset: 42123},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1127, col: 19, offset: 42123},
						name: "TextOnlyLinkAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 1127, col: 44, offset: 42148},
						name: "TextAndMoreLinkAttributes",
					},
				},
			},
		},
		{
			name: "TextOnlyLinkAttributes",
			pos:  position{line: 1129, col: 1, offset: 42175},
			expr: &actionExpr{
				pos: position{line: 1129, col: 27, offset: 42201},
				run: (*parser).callonTextOnlyLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1129, col: 27, offset: 42201},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1129, col: 27, offset: 42201},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1129, col: 31, offset: 42205},
							label: "text",
							expr: &zeroOrOneExpr{
								pos: position{line: 1129, col: 36, offset: 42210},
								expr: &ruleRefExpr{
									pos:  position{line: 1129, col: 37, offset: 42211},
									name: "LinkTextWithCommaAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1129, col: 66, offset: 42240},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LinkTextWithCommaAttribute",
			pos:  position{line: 1133, col: 1, offset: 42302},
			expr: &choiceExpr{
				pos: position{line: 1135, col: 5, offset: 42374},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1135, col: 5, offset: 42374},
						run: (*parser).callonLinkTextWithCommaAttribute2,
						expr: &seqExpr{
							pos: position{line: 1135, col: 5, offset: 42374},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1135, col: 5, offset: 42374},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1135, col: 10, offset: 42379},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1135, col: 19, offset: 42388},
										expr: &seqExpr{
											pos: position{line: 1135, col: 20, offset: 42389},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1135, col: 20, offset: 42389},
													expr: &litMatcher{
														pos:        position{line: 1135, col: 21, offset: 42390},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1135, col: 25, offset: 42394},
													expr: &litMatcher{
														pos:        position{line: 1135, col: 26, offset: 42395},
														val:        "]",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1135, col: 30, offset: 42399},
													expr: &litMatcher{
														pos:        position{line: 1135, col: 31, offset: 42400},
														val:        "\"",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1135, col: 37, offset: 42406},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1135, col: 37, offset: 42406},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1135, col: 50, offset: 42419},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1135, col: 63, offset: 42432},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1135, col: 73, offset: 42442},
															run: (*parser).callonLinkTextWithCommaAttribute18,
															expr: &seqExpr{
																pos: position{line: 1135, col: 74, offset: 42443},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1135, col: 74, offset: 42443},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1135, col: 75, offset: 42444},
																			name: "WS",
																		},
																	},
																	&anyMatcher{
																		line: 1135, col: 78, offset: 42447,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1137, col: 11, offset: 42516},
									val:        "\"",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1137, col: 16, offset: 42521},
									expr: &ruleRefExpr{
										pos:  position{line: 1137, col: 16, offset: 42521},
										name: "Spaces",
									},
								},
								&andExpr{
									pos: position{line: 1137, col: 24, offset: 42529},
									expr: &notExpr{
										pos: position{line: 1137, col: 26, offset: 42531},
										expr: &litMatcher{
											pos:        position{line: 1137, col: 27, offset: 42532},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1141, col: 5, offset: 42657},
						run: (*parser).callonLinkTextWithCommaAttribute29,
						expr: &seqExpr{
							pos: position{line: 1141, col: 5, offset: 42657},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1141, col: 5, offset: 42657},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1141, col: 14, offset: 42666},
										expr: &seqExpr{
											pos: position{line: 1141, col: 15, offset: 42667},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1141, col: 15, offset: 42667},
													expr: &litMatcher{
														pos:        position{line: 1141, col: 16, offset: 42668},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1141, col: 20, offset: 42672},
													expr: &litMatcher{
														pos:        position{line: 1141, col: 21, offset: 42673},
														val:        "]",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1141, col: 26, offset: 42678},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1141, col: 26, offset: 42678},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1141, col: 39, offset: 42691},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1141, col: 52, offset: 42704},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1141, col: 62, offset: 42714},
															run: (*parser).callonLinkTextWithCommaAttribute42,
															expr: &seqExpr{
																pos: position{line: 1141, col: 63, offset: 42715},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1141, col: 63, offset: 42715},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1141, col: 64, offset: 42716},
																			name: "WS",
																		},
																	},
																	&anyMatcher{
																		line: 1141, col: 67, offset: 42719,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 1143, col: 11, offset: 42788},
									expr: &notExpr{
										pos: position{line: 1143, col: 13, offset: 42790},
										expr: &litMatcher{
											pos:        position{line: 1143, col: 14, offset: 42791},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextAndMoreLinkAttributes",
			pos:  position{line: 1148, col: 1, offset: 42871},
			expr: &actionExpr{
				pos: position{line: 1148, col: 30, offset: 42900},
				run: (*parser).callonTextAndMoreLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1148, col: 30, offset: 42900},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1148, col: 30, offset: 42900},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1148, col: 34, offset: 42904},
							label: "text",
							expr: &zeroOrOneExpr{
								pos: position{line: 1148, col: 39, offset: 42909},
								expr: &ruleRefExpr{
									pos:  position{line: 1148, col: 40, offset: 42910},
									name: "LinkTextAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1148, col: 60, offset: 42930},
							expr: &litMatcher{
								pos:        position{line: 1148, col: 60, offset: 42930},
								val:        ",",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1148, col: 65, offset: 42935},
							expr: &ruleRefExpr{
								pos:  position{line: 1148, col: 65, offset: 42935},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 1148, col: 69, offset: 42939},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1148, col: 80, offset: 42950},
								expr: &ruleRefExpr{
									pos:  position{line: 1148, col: 81, offset: 42951},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1148, col: 100, offset: 42970},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LinkTextAttribute",
			pos:  position{line: 1152, col: 1, offset: 43055},
			expr: &choiceExpr{
				pos: position{line: 1154, col: 5, offset: 43118},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1154, col: 5, offset: 43118},
						run: (*parser).callonLinkTextAttribute2,
						expr: &seqExpr{
							pos: position{line: 1154, col: 5, offset: 43118},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1154, col: 5, offset: 43118},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1154, col: 10, offset: 43123},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1154, col: 19, offset: 43132},
										expr: &seqExpr{
											pos: position{line: 1154, col: 20, offset: 43133},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1154, col: 20, offset: 43133},
													expr: &litMatcher{
														pos:        position{line: 1154, col: 21, offset: 43134},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1154, col: 25, offset: 43138},
													expr: &litMatcher{
														pos:        position{line: 1154, col: 26, offset: 43139},
														val:        "]",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1154, col: 30, offset: 43143},
													expr: &litMatcher{
														pos:        position{line: 1154, col: 31, offset: 43144},
														val:        "\"",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1154, col: 37, offset: 43150},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1154, col: 37, offset: 43150},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1154, col: 50, offset: 43163},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1154, col: 63, offset: 43176},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1154, col: 73, offset: 43186},
															run: (*parser).callonLinkTextAttribute18,
															expr: &seqExpr{
																pos: position{line: 1154, col: 74, offset: 43187},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1154, col: 74, offset: 43187},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1154, col: 75, offset: 43188},
																			name: "QuotedTextPrefix",
																		},
																	},
																	&anyMatcher{
																		line: 1154, col: 92, offset: 43205,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1156, col: 11, offset: 43274},
									val:        "\"",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1156, col: 16, offset: 43279},
									expr: &ruleRefExpr{
										pos:  position{line: 1156, col: 16, offset: 43279},
										name: "Spaces",
									},
								},
								&andExpr{
									pos: position{line: 1156, col: 24, offset: 43287},
									expr: &notExpr{
										pos: position{line: 1156, col: 26, offset: 43289},
										expr: &litMatcher{
											pos:        position{line: 1156, col: 27, offset: 43290},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1160, col: 5, offset: 43415},
						run: (*parser).callonLinkTextAttribute29,
						expr: &seqExpr{
							pos: position{line: 1160, col: 5, offset: 43415},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1160, col: 5, offset: 43415},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1160, col: 14, offset: 43424},
										expr: &seqExpr{
											pos: position{line: 1160, col: 15, offset: 43425},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1160, col: 15, offset: 43425},
													expr: &litMatcher{
														pos:        position{line: 1160, col: 16, offset: 43426},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1160, col: 20, offset: 43430},
													expr: &litMatcher{
														pos:        position{line: 1160, col: 21, offset: 43431},
														val:        ",",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1160, col: 25, offset: 43435},
													expr: &litMatcher{
														pos:        position{line: 1160, col: 26, offset: 43436},
														val:        "]",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1160, col: 31, offset: 43441},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1160, col: 31, offset: 43441},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1160, col: 44, offset: 43454},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1160, col: 57, offset: 43467},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1160, col: 67, offset: 43477},
															run: (*parser).callonLinkTextAttribute44,
															expr: &seqExpr{
																pos: position{line: 1160, col: 68, offset: 43478},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1160, col: 68, offset: 43478},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1160, col: 69, offset: 43479},
																			name: "QuotedTextPrefix",
																		},
																	},
																	&anyMatcher{
																		line: 1160, col: 86, offset: 43496,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 1162, col: 11, offset: 43565},
									expr: &notExpr{
										pos: position{line: 1162, col: 13, offset: 43567},
										expr: &litMatcher{
											pos:        position{line: 1162, col: 14, offset: 43568},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineLinks",
			pos:  position{line: 1167, col: 1, offset: 43718},
			expr: &actionExpr{
				pos: position{line: 1168, col: 5, offset: 43738},
				run: (*parser).callonInlineLinks1,
				expr: &seqExpr{
					pos: position{line: 1168, col: 5, offset: 43738},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1168, col: 5, offset: 43738},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1168, col: 14, offset: 43747},
								expr: &choiceExpr{
									pos: position{line: 1168, col: 15, offset: 43748},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1168, col: 15, offset: 43748},
											name: "SimpleWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1169, col: 11, offset: 43769},
											name: "Spaces",
										},
										&ruleRefExpr{
											pos:  position{line: 1170, col: 11, offset: 43787},
											name: "ResolvedLink",
										},
										&ruleRefExpr{
											pos:  position{line: 1171, col: 11, offset: 43811},
											name: "OtherWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1172, col: 11, offset: 43831},
											name: "Parenthesis",
										},
										&ruleRefExpr{
											pos:  position{line: 1173, col: 11, offset: 43853},
											name: "NEWLINE",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1173, col: 21, offset: 43863},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ResolvedLink",
			pos:  position{line: 1177, col: 1, offset: 43933},
			expr: &choiceExpr{
				pos: position{line: 1177, col: 17, offset: 43949},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1177, col: 17, offset: 43949},
						name: "ResolvedRelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1177, col: 40, offset: 43972},
						name: "ResolvedExternalLink",
					},
				},
			},
		},
		{
			name: "ResolvedRelativeLink",
			pos:  position{line: 1180, col: 1, offset: 44108},
			expr: &actionExpr{
				pos: position{line: 1180, col: 25, offset: 44132},
				run: (*parser).callonResolvedRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1180, col: 25, offset: 44132},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1180, col: 25, offset: 44132},
							val:        "link:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1180, col: 33, offset: 44140},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1180, col: 38, offset: 44145},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1180, col: 38, offset: 44145},
										name: "ResolvedLocation",
									},
									&ruleRefExpr{
										pos:  position{line: 1180, col: 57, offset: 44164},
										name: "ResolvedFileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1180, col: 79, offset: 44186},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1180, col: 97, offset: 44204},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedExternalLink",
			pos:  position{line: 1184, col: 1, offset: 44322},
			expr: &actionExpr{
				pos: position{line: 1184, col: 25, offset: 44346},
				run: (*parser).callonResolvedExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1184, col: 25, offset: 44346},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1184, col: 25, offset: 44346},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1184, col: 30, offset: 44351},
								name: "ResolvedLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1184, col: 48, offset: 44369},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1184, col: 65, offset: 44386},
								expr: &ruleRefExpr{
									pos:  position{line: 1184, col: 66, offset: 44387},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedLink",
			pos:  position{line: 1188, col: 1, offset: 44480},
			expr: &choiceExpr{
				pos: position{line: 1188, col: 15, offset: 44494},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1188, col: 15, offset: 44494},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1188, col: 30, offset: 44509},
						name: "ExternalQuotedLink",
					},
				},
			},
		},
		{
			name: "ExternalQuotedLink",
			pos:  position{line: 1190, col: 1, offset: 44529},
			expr: &actionExpr{
				pos: position{line: 1190, col: 23, offset: 44551},
				run: (*parser).callonExternalQuotedLink1,
				expr: &seqExpr{
					pos: position{line: 1190, col: 23, offset: 44551},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1190, col: 23, offset: 44551},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1190, col: 28, offset: 44556},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1190, col: 38, offset: 44566},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1190, col: 56, offset: 44584},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1197, col: 1, offset: 44919},
			expr: &actionExpr{
				pos: position{line: 1197, col: 15, offset: 44933},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1197, col: 15, offset: 44933},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1197, col: 15, offset: 44933},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1197, col: 26, offset: 44944},
								expr: &ruleRefExpr{
									pos:  position{line: 1197, col: 27, offset: 44945},
									name: "ElementAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1197, col: 47, offset: 44965},
							val:        "image::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1197, col: 57, offset: 44975},
							label: "path",
							expr: &choiceExpr{
								pos: position{line: 1197, col: 63, offset: 44981},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1197, col: 63, offset: 44981},
										name: "Location",
									},
									&ruleRefExpr{
										pos:  position{line: 1197, col: 74, offset: 44992},
										name: "FileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1197, col: 88, offset: 45006},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1197, col: 106, offset: 45024},
								name: "ImageAttributes",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1197, col: 123, offset: 45041},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1201, col: 1, offset: 45161},
			expr: &actionExpr{
				pos: position{line: 1201, col: 16, offset: 45176},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1201, col: 16, offset: 45176},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1201, col: 16, offset: 45176},
							val:        "image:",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1201, col: 25, offset: 45185},
							expr: &litMatcher{
								pos:        position{line: 1201, col: 26, offset: 45186},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1201, col: 30, offset: 45190},
							label: "path",
							expr: &choiceExpr{
								pos: position{line: 1201, col: 36, offset: 45196},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1201, col: 36, offset: 45196},
										name: "Location",
									},
									&ruleRefExpr{
										pos:  position{line: 1201, col: 47, offset: 45207},
										name: "FileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1201, col: 61, offset: 45221},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1201, col: 79, offset: 45239},
								name: "ImageAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAttributes",
			pos:  position{line: 1205, col: 1, offset: 45360},
			expr: &actionExpr{
				pos: position{line: 1205, col: 20, offset: 45379},
				run: (*parser).callonImageAttributes1,
				expr: &seqExpr{
					pos: position{line: 1205, col: 20, offset: 45379},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1205, col: 20, offset: 45379},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1205, col: 24, offset: 45383},
							label: "alt",
							expr: &zeroOrOneExpr{
								pos: position{line: 1205, col: 28, offset: 45387},
								expr: &ruleRefExpr{
									pos:  position{line: 1205, col: 29, offset: 45388},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1205, col: 46, offset: 45405},
							expr: &litMatcher{
								pos:        position{line: 1205, col: 46, offset: 45405},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1205, col: 51, offset: 45410},
							label: "width",
							expr: &zeroOrOneExpr{
								pos: position{line: 1205, col: 57, offset: 45416},
								expr: &ruleRefExpr{
									pos:  position{line: 1205, col: 58, offset: 45417},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1205, col: 75, offset: 45434},
							expr: &litMatcher{
								pos:        position{line: 1205, col: 75, offset: 45434},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1205, col: 80, offset: 45439},
							label: "height",
							expr: &zeroOrOneExpr{
								pos: position{line: 1205, col: 87, offset: 45446},
								expr: &ruleRefExpr{
									pos:  position{line: 1205, col: 88, offset: 45447},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1205, col: 105, offset: 45464},
							expr: &litMatcher{
								pos:        position{line: 1205, col: 105, offset: 45464},
								val:        ",",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1205, col: 110, offset: 45469},
							expr: &ruleRefExpr{
								pos:  position{line: 1205, col: 110, offset: 45469},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 1205, col: 114, offset: 45473},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1205, col: 125, offset: 45484},
								expr: &ruleRefExpr{
									pos:  position{line: 1205, col: 126, offset: 45485},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1205, col: 145, offset: 45504},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1212, col: 1, offset: 45794},
			expr: &choiceExpr{
				pos: position{line: 1212, col: 19, offset: 45812},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1212, col: 19, offset: 45812},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1212, col: 19, offset: 45812},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1212, col: 19, offset: 45812},
									val:        "footnote:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1212, col: 32, offset: 45825},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1212, col: 41, offset: 45834},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1212, col: 58, offset: 45851},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1214, col: 5, offset: 45919},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1214, col: 5, offset: 45919},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1214, col: 5, offset: 45919},
									val:        "footnoteref:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1214, col: 21, offset: 45935},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1214, col: 26, offset: 45940},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1214, col: 39, offset: 45953},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1214, col: 43, offset: 45957},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1214, col: 52, offset: 45966},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1214, col: 69, offset: 45983},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1216, col: 5, offset: 46061},
						run: (*parser).callonInlineFootnote17,
						expr: &seqExpr{
							pos: position{line: 1216, col: 5, offset: 46061},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1216, col: 5, offset: 46061},
									val:        "footnoteref:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1216, col: 21, offset: 46077},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1216, col: 26, offset: 46082},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1216, col: 39, offset: 46095},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1220, col: 1, offset: 46203},
			expr: &actionExpr{
				pos: position{line: 1220, col: 16, offset: 46218},
				run: (*parser).callonFootnoteRef1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1220, col: 16, offset: 46218},
					expr: &choiceExpr{
						pos: position{line: 1220, col: 17, offset: 46219},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1220, col: 17, offset: 46219},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1220, col: 29, offset: 46231},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1220, col: 39, offset: 46241},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1220, col: 39, offset: 46241},
										expr: &litMatcher{
											pos:        position{line: 1220, col: 40, offset: 46242},
											val:        ",",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1220, col: 44, offset: 46246},
										expr: &litMatcher{
											pos:        position{line: 1220, col: 45, offset: 46247},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1220, col: 49, offset: 46251},
										expr: &ruleRefExpr{
											pos:  position{line: 1220, col: 50, offset: 46252},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 1220, col: 55, offset: 46257,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1224, col: 1, offset: 46342},
			expr: &actionExpr{
				pos: position{line: 1224, col: 20, offset: 46361},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1224, col: 20, offset: 46361},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1224, col: 29, offset: 46370},
						expr: &seqExpr{
							pos: position{line: 1224, col: 30, offset: 46371},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1224, col: 30, offset: 46371},
									expr: &litMatcher{
										pos:        position{line: 1224, col: 31, offset: 46372},
										val:        "]",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 1224, col: 35, offset: 46376},
									expr: &ruleRefExpr{
										pos:  position{line: 1224, col: 36, offset: 46377},
										name: "EOL",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1224, col: 40, offset: 46381},
									expr: &ruleRefExpr{
										pos:  position{line: 1224, col: 40, offset: 46381},
										name: "WS",
									},
								},
								&notExpr{
									pos: position{line: 1224, col: 44, offset: 46385},
									expr: &ruleRefExpr{
										pos:  position{line: 1224, col: 45, offset: 46386},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1224, col: 61, offset: 46402},
									name: "InlineElement",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1224, col: 75, offset: 46416},
									expr: &ruleRefExpr{
										pos:  position{line: 1224, col: 75, offset: 46416},
										name: "WS",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1231, col: 1, offset: 46730},
			expr: &actionExpr{
				pos: position{line: 1231, col: 19, offset: 46748},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1231, col: 19, offset: 46748},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1231, col: 19, offset: 46748},
							expr: &ruleRefExpr{
								pos:  position{line: 1231, col: 20, offset: 46749},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1232, col: 5, offset: 46778},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1232, col: 12, offset: 46785},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1232, col: 12, offset: 46785},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1233, col: 11, offset: 46808},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1234, col: 11, offset: 46832},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1235, col: 11, offset: 46856},
										name: "VerseBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1236, col: 11, offset: 46878},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1237, col: 11, offset: 46900},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1238, col: 11, offset: 46923},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1239, col: 11, offset: 46951},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1240, col: 11, offset: 46967},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1244, col: 1, offset: 47008},
			expr: &choiceExpr{
				pos: position{line: 1244, col: 19, offset: 47026},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1244, col: 19, offset: 47026},
						name: "LiteralBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1245, col: 19, offset: 47067},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1246, col: 19, offset: 47107},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1247, col: 19, offset: 47148},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1248, col: 19, offset: 47189},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1249, col: 19, offset: 47230},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1250, col: 19, offset: 47268},
						name: "SidebarBlockDelimiter",
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1256, col: 1, offset: 47487},
			expr: &seqExpr{
				pos: position{line: 1256, col: 25, offset: 47511},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1256, col: 25, offset: 47511},
						val:        "```",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1256, col: 31, offset: 47517},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1258, col: 1, offset: 47523},
			expr: &actionExpr{
				pos: position{line: 1258, col: 16, offset: 47538},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1258, col: 16, offset: 47538},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1258, col: 16, offset: 47538},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1258, col: 27, offset: 47549},
								expr: &ruleRefExpr{
									pos:  position{line: 1258, col: 28, offset: 47550},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1258, col: 48, offset: 47570},
							name: "FencedBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1258, col: 69, offset: 47591},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1258, col: 77, offset: 47599},
								expr: &ruleRefExpr{
									pos:  position{line: 1258, col: 78, offset: 47600},
									name: "FencedBlockContent",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1258, col: 100, offset: 47622},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1258, col: 100, offset: 47622},
									name: "FencedBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1258, col: 123, offset: 47645},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockContent",
			pos:  position{line: 1262, col: 1, offset: 47753},
			expr: &choiceExpr{
				pos: position{line: 1262, col: 23, offset: 47775},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1262, col: 23, offset: 47775},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1262, col: 35, offset: 47787},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1262, col: 51, offset: 47803},
						name: "ListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 1262, col: 62, offset: 47814},
						name: "FencedBlockParagraph",
					},
				},
			},
		},
		{
			name: "FencedBlockParagraph",
			pos:  position{line: 1265, col: 1, offset: 47854},
			expr: &actionExpr{
				pos: position{line: 1265, col: 25, offset: 47878},
				run: (*parser).callonFencedBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1265, col: 25, offset: 47878},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1265, col: 31, offset: 47884},
						expr: &ruleRefExpr{
							pos:  position{line: 1265, col: 32, offset: 47885},
							name: "FencedBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockParagraphLine",
			pos:  position{line: 1269, col: 1, offset: 47998},
			expr: &actionExpr{
				pos: position{line: 1269, col: 29, offset: 48026},
				run: (*parser).callonFencedBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1269, col: 29, offset: 48026},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1269, col: 29, offset: 48026},
							expr: &ruleRefExpr{
								pos:  position{line: 1269, col: 30, offset: 48027},
								name: "FencedBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1269, col: 51, offset: 48048},
							expr: &ruleRefExpr{
								pos:  position{line: 1269, col: 52, offset: 48049},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1269, col: 62, offset: 48059},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1269, col: 68, offset: 48065},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1276, col: 1, offset: 48303},
			expr: &seqExpr{
				pos: position{line: 1276, col: 26, offset: 48328},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1276, col: 26, offset: 48328},
						val:        "----",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1276, col: 33, offset: 48335},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1278, col: 1, offset: 48341},
			expr: &actionExpr{
				pos: position{line: 1278, col: 17, offset: 48357},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1278, col: 17, offset: 48357},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1278, col: 17, offset: 48357},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1278, col: 28, offset: 48368},
								expr: &ruleRefExpr{
									pos:  position{line: 1278, col: 29, offset: 48369},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1278, col: 49, offset: 48389},
							name: "ListingBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1278, col: 71, offset: 48411},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1278, col: 79, offset: 48419},
								expr: &ruleRefExpr{
									pos:  position{line: 1278, col: 80, offset: 48420},
									name: "ListingBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1278, col: 103, offset: 48443},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1278, col: 103, offset: 48443},
									name: "ListingBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1278, col: 127, offset: 48467},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockElement",
			pos:  position{line: 1282, col: 1, offset: 48576},
			expr: &choiceExpr{
				pos: position{line: 1282, col: 24, offset: 48599},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1282, col: 24, offset: 48599},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1282, col: 40, offset: 48615},
						name: "ListingBlockParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 1282, col: 64, offset: 48639},
						name: "BlankLine",
					},
				},
			},
		},
		{
			name: "ListingBlockParagraph",
			pos:  position{line: 1284, col: 1, offset: 48650},
			expr: &actionExpr{
				pos: position{line: 1284, col: 26, offset: 48675},
				run: (*parser).callonListingBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1284, col: 26, offset: 48675},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1284, col: 32, offset: 48681},
						expr: &ruleRefExpr{
							pos:  position{line: 1284, col: 33, offset: 48682},
							name: "ListingBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockParagraphLine",
			pos:  position{line: 1288, col: 1, offset: 48801},
			expr: &actionExpr{
				pos: position{line: 1288, col: 30, offset: 48830},
				run: (*parser).callonListingBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1288, col: 30, offset: 48830},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1288, col: 30, offset: 48830},
							expr: &ruleRefExpr{
								pos:  position{line: 1288, col: 31, offset: 48831},
								name: "ListingBlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1288, col: 53, offset: 48853},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1288, col: 59, offset: 48859},
								run: (*parser).callonListingBlockParagraphLine6,
								expr: &seqExpr{
									pos: position{line: 1288, col: 59, offset: 48859},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1288, col: 59, offset: 48859},
											expr: &ruleRefExpr{
												pos:  position{line: 1288, col: 60, offset: 48860},
												name: "EOF",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1288, col: 64, offset: 48864},
											expr: &choiceExpr{
												pos: position{line: 1288, col: 65, offset: 48865},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1288, col: 65, offset: 48865},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1288, col: 77, offset: 48877},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 1288, col: 87, offset: 48887},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 1288, col: 87, offset: 48887},
																expr: &ruleRefExpr{
																	pos:  position{line: 1288, col: 88, offset: 48888},
																	name: "EOL",
																},
															},
															&anyMatcher{
																line: 1288, col: 92, offset: 48892,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1288, col: 128, offset: 48928},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1295, col: 1, offset: 49254},
			expr: &seqExpr{
				pos: position{line: 1295, col: 26, offset: 49279},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1295, col: 26, offset: 49279},
						val:        "====",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1295, col: 33, offset: 49286},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1297, col: 1, offset: 49292},
			expr: &actionExpr{
				pos: position{line: 1297, col: 17, offset: 49308},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1297, col: 17, offset: 49308},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1297, col: 17, offset: 49308},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1297, col: 28, offset: 49319},
								expr: &ruleRefExpr{
									pos:  position{line: 1297, col: 29, offset: 49320},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1297, col: 49, offset: 49340},
							name: "ExampleBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1297, col: 71, offset: 49362},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1297, col: 79, offset: 49370},
								expr: &choiceExpr{
									pos: position{line: 1297, col: 80, offset: 49371},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1297, col: 80, offset: 49371},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 1297, col: 92, offset: 49383},
											name: "FileInclusion",
										},
										&ruleRefExpr{
											pos:  position{line: 1297, col: 108, offset: 49399},
											name: "ListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1297, col: 119, offset: 49410},
											name: "ExampleBlockParagraph",
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1297, col: 145, offset: 49436},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1297, col: 145, offset: 49436},
									name: "ExampleBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1297, col: 169, offset: 49460},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockParagraph",
			pos:  position{line: 1302, col: 1, offset: 49587},
			expr: &actionExpr{
				pos: position{line: 1302, col: 26, offset: 49612},
				run: (*parser).callonExampleBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1302, col: 26, offset: 49612},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1302, col: 32, offset: 49618},
						expr: &ruleRefExpr{
							pos:  position{line: 1302, col: 33, offset: 49619},
							name: "ExampleBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockParagraphLine",
			pos:  position{line: 1306, col: 1, offset: 49733},
			expr: &actionExpr{
				pos: position{line: 1306, col: 30, offset: 49762},
				run: (*parser).callonExampleBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1306, col: 30, offset: 49762},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1306, col: 30, offset: 49762},
							expr: &ruleRefExpr{
								pos:  position{line: 1306, col: 31, offset: 49763},
								name: "ExampleBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1306, col: 53, offset: 49785},
							expr: &ruleRefExpr{
								pos:  position{line: 1306, col: 54, offset: 49786},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1306, col: 64, offset: 49796},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1306, col: 70, offset: 49802},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1313, col: 1, offset: 50038},
			expr: &seqExpr{
				pos: position{line: 1313, col: 24, offset: 50061},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1313, col: 24, offset: 50061},
						val:        "____",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1313, col: 31, offset: 50068},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1315, col: 1, offset: 50099},
			expr: &actionExpr{
				pos: position{line: 1315, col: 15, offset: 50113},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1315, col: 15, offset: 50113},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1315, col: 15, offset: 50113},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1315, col: 26, offset: 50124},
								expr: &ruleRefExpr{
									pos:  position{line: 1315, col: 27, offset: 50125},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1315, col: 47, offset: 50145},
							name: "QuoteBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1315, col: 67, offset: 50165},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1315, col: 75, offset: 50173},
								expr: &ruleRefExpr{
									pos:  position{line: 1315, col: 76, offset: 50174},
									name: "QuoteBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1315, col: 97, offset: 50195},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1315, col: 97, offset: 50195},
									name: "QuoteBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1315, col: 119, offset: 50217},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockElement",
			pos:  position{line: 1319, col: 1, offset: 50324},
			expr: &actionExpr{
				pos: position{line: 1320, col: 5, offset: 50350},
				run: (*parser).callonQuoteBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1320, col: 5, offset: 50350},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1320, col: 5, offset: 50350},
							expr: &ruleRefExpr{
								pos:  position{line: 1320, col: 6, offset: 50351},
								name: "QuoteBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1320, col: 26, offset: 50371},
							expr: &ruleRefExpr{
								pos:  position{line: 1320, col: 27, offset: 50372},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1320, col: 31, offset: 50376},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1320, col: 40, offset: 50385},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1320, col: 40, offset: 50385},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1321, col: 15, offset: 50410},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 1322, col: 15, offset: 50438},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1323, col: 15, offset: 50464},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1324, col: 15, offset: 50487},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1325, col: 15, offset: 50513},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1326, col: 15, offset: 50540},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1327, col: 15, offset: 50567},
										name: "CommentBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1328, col: 15, offset: 50594},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1329, col: 15, offset: 50626},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1330, col: 15, offset: 50652},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1331, col: 15, offset: 50679},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1332, col: 15, offset: 50700},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1333, col: 15, offset: 50728},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 1334, col: 15, offset: 50772},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 1335, col: 15, offset: 50810},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1336, col: 15, offset: 50851},
										name: "QuoteBlockParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockParagraph",
			pos:  position{line: 1340, col: 1, offset: 50910},
			expr: &actionExpr{
				pos: position{line: 1340, col: 24, offset: 50933},
				run: (*parser).callonQuoteBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1340, col: 24, offset: 50933},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1340, col: 30, offset: 50939},
						expr: &ruleRefExpr{
							pos:  position{line: 1340, col: 31, offset: 50940},
							name: "InlineElements",
						},
					},
				},
			},
		},
		{
			name: "VerseBlock",
			pos:  position{line: 1349, col: 1, offset: 51286},
			expr: &actionExpr{
				pos: position{line: 1349, col: 15, offset: 51300},
				run: (*parser).callonVerseBlock1,
				expr: &seqExpr{
					pos: position{line: 1349, col: 15, offset: 51300},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1349, col: 15, offset: 51300},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1349, col: 27, offset: 51312},
								name: "ElementAttributes",
							},
						},
						&andCodeExpr{
							pos: position{line: 1350, col: 5, offset: 51336},
							run: (*parser).callonVerseBlock5,
						},
						&ruleRefExpr{
							pos:  position{line: 1354, col: 5, offset: 51522},
							name: "QuoteBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1354, col: 25, offset: 51542},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1354, col: 33, offset: 51550},
								expr: &ruleRefExpr{
									pos:  position{line: 1354, col: 34, offset: 51551},
									name: "VerseBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1354, col: 55, offset: 51572},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1354, col: 55, offset: 51572},
									name: "QuoteBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1354, col: 77, offset: 51594},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockElement",
			pos:  position{line: 1358, col: 1, offset: 51709},
			expr: &choiceExpr{
				pos: position{line: 1358, col: 22, offset: 51730},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1358, col: 22, offset: 51730},
						name: "VerseFileInclude",
					},
					&ruleRefExpr{
						pos:  position{line: 1358, col: 41, offset: 51749},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1358, col: 53, offset: 51761},
						name: "VerseBlockParagraph",
					},
				},
			},
		},
		{
			name: "VerseFileInclude",
			pos:  position{line: 1360, col: 1, offset: 51782},
			expr: &actionExpr{
				pos: position{line: 1360, col: 21, offset: 51802},
				run: (*parser).callonVerseFileInclude1,
				expr: &seqExpr{
					pos: position{line: 1360, col: 21, offset: 51802},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1360, col: 21, offset: 51802},
							expr: &ruleRefExpr{
								pos:  position{line: 1360, col: 22, offset: 51803},
								name: "QuoteBlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1360, col: 42, offset: 51823},
							label: "include",
							expr: &ruleRefExpr{
								pos:  position{line: 1360, col: 51, offset: 51832},
								name: "FileInclusion",
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraph",
			pos:  position{line: 1365, col: 1, offset: 51894},
			expr: &actionExpr{
				pos: position{line: 1365, col: 24, offset: 51917},
				run: (*parser).callonVerseBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1365, col: 24, offset: 51917},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1365, col: 30, offset: 51923},
						expr: &ruleRefExpr{
							pos:  position{line: 1365, col: 31, offset: 51924},
							name: "VerseBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLine",
			pos:  position{line: 1369, col: 1, offset: 52014},
			expr: &actionExpr{
				pos: position{line: 1369, col: 28, offset: 52041},
				run: (*parser).callonVerseBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1369, col: 28, offset: 52041},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1369, col: 28, offset: 52041},
							expr: &ruleRefExpr{
								pos:  position{line: 1369, col: 29, offset: 52042},
								name: "QuoteBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1369, col: 49, offset: 52062},
							expr: &ruleRefExpr{
								pos:  position{line: 1369, col: 50, offset: 52063},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1369, col: 60, offset: 52073},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1369, col: 66, offset: 52079},
								run: (*parser).callonVerseBlockParagraphLine8,
								expr: &seqExpr{
									pos: position{line: 1369, col: 66, offset: 52079},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1369, col: 66, offset: 52079},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1369, col: 75, offset: 52088},
												expr: &ruleRefExpr{
													pos:  position{line: 1369, col: 76, offset: 52089},
													name: "VerseBlockParagraphLineElement",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1369, col: 109, offset: 52122},
											name: "EOL",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLineElement",
			pos:  position{line: 1375, col: 1, offset: 52218},
			expr: &actionExpr{
				pos: position{line: 1375, col: 35, offset: 52252},
				run: (*parser).callonVerseBlockParagraphLineElement1,
				expr: &seqExpr{
					pos: position{line: 1375, col: 35, offset: 52252},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1375, col: 35, offset: 52252},
							expr: &ruleRefExpr{
								pos:  position{line: 1375, col: 36, offset: 52253},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 1375, col: 40, offset: 52257},
							expr: &ruleRefExpr{
								pos:  position{line: 1375, col: 41, offset: 52258},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 1376, col: 5, offset: 52273},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1376, col: 14, offset: 52282},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1376, col: 14, offset: 52282},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 1377, col: 11, offset: 52300},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 1378, col: 11, offset: 52323},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 1379, col: 11, offset: 52339},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1380, col: 11, offset: 52362},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 1381, col: 11, offset: 52388},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1382, col: 11, offset: 52410},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 1383, col: 11, offset: 52436},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1384, col: 11, offset: 52463},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1385, col: 11, offset: 52504},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 1386, col: 11, offset: 52531},
										name: "OtherWord",
									},
									&ruleRefExpr{
										pos:  position{line: 1387, col: 11, offset: 52551},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1394, col: 1, offset: 52783},
			expr: &seqExpr{
				pos: position{line: 1394, col: 26, offset: 52808},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1394, col: 26, offset: 52808},
						val:        "****",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1394, col: 33, offset: 52815},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1396, col: 1, offset: 52821},
			expr: &actionExpr{
				pos: position{line: 1396, col: 17, offset: 52837},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1396, col: 17, offset: 52837},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1396, col: 17, offset: 52837},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1396, col: 28, offset: 52848},
								expr: &ruleRefExpr{
									pos:  position{line: 1396, col: 29, offset: 52849},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1396, col: 49, offset: 52869},
							name: "SidebarBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1396, col: 71, offset: 52891},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1396, col: 79, offset: 52899},
								expr: &ruleRefExpr{
									pos:  position{line: 1396, col: 80, offset: 52900},
									name: "SidebarBlockContent",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1396, col: 104, offset: 52924},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1396, col: 104, offset: 52924},
									name: "SidebarBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1396, col: 128, offset: 52948},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockContent",
			pos:  position{line: 1400, col: 1, offset: 53057},
			expr: &choiceExpr{
				pos: position{line: 1400, col: 24, offset: 53080},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1400, col: 24, offset: 53080},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1400, col: 36, offset: 53092},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1400, col: 52, offset: 53108},
						name: "ListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 1400, col: 63, offset: 53119},
						name: "NonSidebarBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 1400, col: 81, offset: 53137},
						name: "SidebarBlockParagraph",
					},
				},
			},
		},
		{
			name: "NonSidebarBlock",
			pos:  position{line: 1402, col: 1, offset: 53160},
			expr: &actionExpr{
				pos: position{line: 1402, col: 20, offset: 53179},
				run: (*parser).callonNonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1402, col: 20, offset: 53179},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1402, col: 20, offset: 53179},
							expr: &ruleRefExpr{
								pos:  position{line: 1402, col: 21, offset: 53180},
								name: "SidebarBlock",
							},
						},
						&labeledExpr{
							pos:   position{line: 1402, col: 34, offset: 53193},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1402, col: 43, offset: 53202},
								name: "DelimitedBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockParagraph",
			pos:  position{line: 1407, col: 1, offset: 53265},
			expr: &actionExpr{
				pos: position{line: 1407, col: 26, offset: 53290},
				run: (*parser).callonSidebarBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1407, col: 26, offset: 53290},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1407, col: 32, offset: 53296},
						expr: &ruleRefExpr{
							pos:  position{line: 1407, col: 33, offset: 53297},
							name: "SidebarBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockParagraphLine",
			pos:  position{line: 1411, col: 1, offset: 53411},
			expr: &actionExpr{
				pos: position{line: 1411, col: 30, offset: 53440},
				run: (*parser).callonSidebarBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1411, col: 30, offset: 53440},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1411, col: 30, offset: 53440},
							expr: &ruleRefExpr{
								pos:  position{line: 1411, col: 31, offset: 53441},
								name: "SidebarBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1411, col: 53, offset: 53463},
							expr: &ruleRefExpr{
								pos:  position{line: 1411, col: 54, offset: 53464},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1411, col: 64, offset: 53474},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1411, col: 70, offset: 53480},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1419, col: 1, offset: 53711},
			expr: &actionExpr{
				pos: position{line: 1419, col: 10, offset: 53720},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1419, col: 10, offset: 53720},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1419, col: 10, offset: 53720},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1419, col: 21, offset: 53731},
								expr: &ruleRefExpr{
									pos:  position{line: 1419, col: 22, offset: 53732},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1419, col: 42, offset: 53752},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1420, col: 5, offset: 53771},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1420, col: 12, offset: 53778},
								expr: &ruleRefExpr{
									pos:  position{line: 1420, col: 13, offset: 53779},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1421, col: 5, offset: 53801},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1421, col: 11, offset: 53807},
								expr: &ruleRefExpr{
									pos:  position{line: 1421, col: 12, offset: 53808},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1422, col: 6, offset: 53825},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1422, col: 6, offset: 53825},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1422, col: 23, offset: 53842},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1426, col: 1, offset: 53957},
			expr: &seqExpr{
				pos: position{line: 1426, col: 23, offset: 53979},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1426, col: 23, offset: 53979},
						val:        "|",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1426, col: 27, offset: 53983},
						expr: &ruleRefExpr{
							pos:  position{line: 1426, col: 27, offset: 53983},
							name: "WS",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1428, col: 1, offset: 53988},
			expr: &seqExpr{
				pos: position{line: 1428, col: 19, offset: 54006},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1428, col: 19, offset: 54006},
						val:        "|===",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1428, col: 26, offset: 54013},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1431, col: 1, offset: 54082},
			expr: &actionExpr{
				pos: position{line: 1431, col: 20, offset: 54101},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1431, col: 20, offset: 54101},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1431, col: 20, offset: 54101},
							expr: &ruleRefExpr{
								pos:  position{line: 1431, col: 21, offset: 54102},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1431, col: 36, offset: 54117},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1431, col: 42, offset: 54123},
								expr: &ruleRefExpr{
									pos:  position{line: 1431, col: 43, offset: 54124},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1431, col: 55, offset: 54136},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1431, col: 59, offset: 54140},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1435, col: 1, offset: 54208},
			expr: &actionExpr{
				pos: position{line: 1435, col: 14, offset: 54221},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1435, col: 14, offset: 54221},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1435, col: 14, offset: 54221},
							expr: &ruleRefExpr{
								pos:  position{line: 1435, col: 15, offset: 54222},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1435, col: 30, offset: 54237},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1435, col: 36, offset: 54243},
								expr: &ruleRefExpr{
									pos:  position{line: 1435, col: 37, offset: 54244},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1435, col: 49, offset: 54256},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1435, col: 53, offset: 54260},
							expr: &ruleRefExpr{
								pos:  position{line: 1435, col: 53, offset: 54260},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1439, col: 1, offset: 54329},
			expr: &actionExpr{
				pos: position{line: 1439, col: 14, offset: 54342},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1439, col: 14, offset: 54342},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1439, col: 14, offset: 54342},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1439, col: 33, offset: 54361},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1439, col: 42, offset: 54370},
								expr: &seqExpr{
									pos: position{line: 1439, col: 43, offset: 54371},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1439, col: 43, offset: 54371},
											expr: &ruleRefExpr{
												pos:  position{line: 1439, col: 44, offset: 54372},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1439, col: 63, offset: 54391},
											expr: &ruleRefExpr{
												pos:  position{line: 1439, col: 64, offset: 54392},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1439, col: 68, offset: 54396},
											expr: &ruleRefExpr{
												pos:  position{line: 1439, col: 68, offset: 54396},
												name: "WS",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1439, col: 72, offset: 54400},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1439, col: 86, offset: 54414},
											expr: &ruleRefExpr{
												pos:  position{line: 1439, col: 86, offset: 54414},
												name: "WS",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1446, col: 1, offset: 54660},
			expr: &litMatcher{
				pos:        position{line: 1446, col: 26, offset: 54685},
				val:        "////",
				ignoreCase: false,
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1448, col: 1, offset: 54693},
			expr: &actionExpr{
				pos: position{line: 1448, col: 17, offset: 54709},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1448, col: 17, offset: 54709},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1448, col: 17, offset: 54709},
							name: "CommentBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1448, col: 39, offset: 54731},
							expr: &ruleRefExpr{
								pos:  position{line: 1448, col: 39, offset: 54731},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1448, col: 43, offset: 54735},
							name: "NEWLINE",
						},
						&labeledExpr{
							pos:   position{line: 1448, col: 51, offset: 54743},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1448, col: 59, offset: 54751},
								expr: &ruleRefExpr{
									pos:  position{line: 1448, col: 60, offset: 54752},
									name: "CommentBlockLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1448, col: 81, offset: 54773},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1448, col: 82, offset: 54774},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1448, col: 82, offset: 54774},
											name: "CommentBlockDelimiter",
										},
										&ruleRefExpr{
											pos:  position{line: 1448, col: 104, offset: 54796},
											name: "EOLS",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1448, col: 112, offset: 54804},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockLine",
			pos:  position{line: 1452, col: 1, offset: 54910},
			expr: &actionExpr{
				pos: position{line: 1452, col: 21, offset: 54930},
				run: (*parser).callonCommentBlockLine1,
				expr: &seqExpr{
					pos: position{line: 1452, col: 21, offset: 54930},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1452, col: 21, offset: 54930},
							expr: &choiceExpr{
								pos: position{line: 1452, col: 22, offset: 54931},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1452, col: 22, offset: 54931},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 1452, col: 34, offset: 54943},
										name: "Spaces",
									},
									&seqExpr{
										pos: position{line: 1452, col: 44, offset: 54953},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1452, col: 44, offset: 54953},
												expr: &ruleRefExpr{
													pos:  position{line: 1452, col: 45, offset: 54954},
													name: "CommentBlockDelimiter",
												},
											},
											&notExpr{
												pos: position{line: 1452, col: 67, offset: 54976},
												expr: &ruleRefExpr{
													pos:  position{line: 1452, col: 68, offset: 54977},
													name: "EOL",
												},
											},
											&anyMatcher{
												line: 1452, col: 72, offset: 54981,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1452, col: 77, offset: 54986},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1456, col: 1, offset: 55026},
			expr: &actionExpr{
				pos: position{line: 1456, col: 22, offset: 55047},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1456, col: 22, offset: 55047},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1456, col: 22, offset: 55047},
							expr: &ruleRefExpr{
								pos:  position{line: 1456, col: 23, offset: 55048},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1456, col: 45, offset: 55070},
							expr: &ruleRefExpr{
								pos:  position{line: 1456, col: 45, offset: 55070},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 1456, col: 49, offset: 55074},
							val:        "//",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1456, col: 54, offset: 55079},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1456, col: 63, offset: 55088},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1456, col: 89, offset: 55114},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1460, col: 1, offset: 55179},
			expr: &actionExpr{
				pos: position{line: 1460, col: 29, offset: 55207},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1460, col: 29, offset: 55207},
					expr: &choiceExpr{
						pos: position{line: 1460, col: 30, offset: 55208},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1460, col: 30, offset: 55208},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1460, col: 42, offset: 55220},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1460, col: 52, offset: 55230},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1460, col: 52, offset: 55230},
										expr: &ruleRefExpr{
											pos:  position{line: 1460, col: 53, offset: 55231},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 1460, col: 58, offset: 55236,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 1468, col: 1, offset: 55545},
			expr: &choiceExpr{
				pos: position{line: 1468, col: 17, offset: 55561},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1468, col: 17, offset: 55561},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 1468, col: 49, offset: 55593},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 1468, col: 78, offset: 55622},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 1470, col: 1, offset: 55658},
			expr: &litMatcher{
				pos:        position{line: 1470, col: 26, offset: 55683},
				val:        "....",
				ignoreCase: false,
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 1473, col: 1, offset: 55755},
			expr: &actionExpr{
				pos: position{line: 1473, col: 31, offset: 55785},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 1473, col: 31, offset: 55785},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1473, col: 31, offset: 55785},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1473, col: 42, offset: 55796},
								expr: &ruleRefExpr{
									pos:  position{line: 1473, col: 43, offset: 55797},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1473, col: 63, offset: 55817},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1473, col: 70, offset: 55824},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 1478, col: 1, offset: 56054},
			expr: &actionExpr{
				pos: position{line: 1479, col: 5, offset: 56094},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 1479, col: 5, offset: 56094},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1479, col: 5, offset: 56094},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1479, col: 16, offset: 56105},
								run: (*parser).callonParagraphWithHeadingSpacesLines4,
								expr: &seqExpr{
									pos: position{line: 1479, col: 16, offset: 56105},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1479, col: 16, offset: 56105},
											name: "WS",
										},
										&oneOrMoreExpr{
											pos: position{line: 1479, col: 19, offset: 56108},
											expr: &choiceExpr{
												pos: position{line: 1479, col: 20, offset: 56109},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1479, col: 20, offset: 56109},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1479, col: 32, offset: 56121},
														name: "Spaces",
													},
													&actionExpr{
														pos: position{line: 1479, col: 41, offset: 56130},
														run: (*parser).callonParagraphWithHeadingSpacesLines11,
														expr: &seqExpr{
															pos: position{line: 1479, col: 42, offset: 56131},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 1479, col: 42, offset: 56131},
																	expr: &ruleRefExpr{
																		pos:  position{line: 1479, col: 43, offset: 56132},
																		name: "EOL",
																	},
																},
																&anyMatcher{
																	line: 1479, col: 48, offset: 56137,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1483, col: 8, offset: 56228},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 1484, col: 5, offset: 56291},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1484, col: 16, offset: 56302},
								expr: &actionExpr{
									pos: position{line: 1485, col: 9, offset: 56312},
									run: (*parser).callonParagraphWithHeadingSpacesLines19,
									expr: &seqExpr{
										pos: position{line: 1485, col: 9, offset: 56312},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1485, col: 9, offset: 56312},
												expr: &ruleRefExpr{
													pos:  position{line: 1485, col: 10, offset: 56313},
													name: "BlankLine",
												},
											},
											&labeledExpr{
												pos:   position{line: 1486, col: 9, offset: 56332},
												label: "otherLine",
												expr: &actionExpr{
													pos: position{line: 1486, col: 20, offset: 56343},
													run: (*parser).callonParagraphWithHeadingSpacesLines24,
													expr: &oneOrMoreExpr{
														pos: position{line: 1486, col: 20, offset: 56343},
														expr: &choiceExpr{
															pos: position{line: 1486, col: 21, offset: 56344},
															alternatives: []interface{}{
																&ruleRefExpr{
																	pos:  position{line: 1486, col: 21, offset: 56344},
																	name: "Alphanums",
																},
																&ruleRefExpr{
																	pos:  position{line: 1486, col: 33, offset: 56356},
																	name: "Spaces",
																},
																&seqExpr{
																	pos: position{line: 1486, col: 43, offset: 56366},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 1486, col: 43, offset: 56366},
																			expr: &ruleRefExpr{
																				pos:  position{line: 1486, col: 44, offset: 56367},
																				name: "EOL",
																			},
																		},
																		&anyMatcher{
																			line: 1486, col: 49, offset: 56372,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1488, col: 12, offset: 56429},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 1495, col: 1, offset: 56659},
			expr: &actionExpr{
				pos: position{line: 1495, col: 39, offset: 56697},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1495, col: 39, offset: 56697},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1495, col: 39, offset: 56697},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1495, col: 50, offset: 56708},
								expr: &ruleRefExpr{
									pos:  position{line: 1495, col: 51, offset: 56709},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1496, col: 9, offset: 56737},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1496, col: 31, offset: 56759},
							expr: &ruleRefExpr{
								pos:  position{line: 1496, col: 31, offset: 56759},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1496, col: 35, offset: 56763},
							name: "NEWLINE",
						},
						&labeledExpr{
							pos:   position{line: 1496, col: 43, offset: 56771},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1496, col: 50, offset: 56778},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 1496, col: 92, offset: 56820},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1496, col: 93, offset: 56821},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1496, col: 93, offset: 56821},
											name: "LiteralBlockDelimiter",
										},
										&ruleRefExpr{
											pos:  position{line: 1496, col: 115, offset: 56843},
											name: "EOLS",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1496, col: 123, offset: 56851},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 1501, col: 1, offset: 57010},
			expr: &actionExpr{
				pos: position{line: 1501, col: 44, offset: 57053},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 1501, col: 44, offset: 57053},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1501, col: 50, offset: 57059},
						expr: &ruleRefExpr{
							pos:  position{line: 1501, col: 51, offset: 57060},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 1505, col: 1, offset: 57144},
			expr: &actionExpr{
				pos: position{line: 1506, col: 5, offset: 57199},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 1506, col: 5, offset: 57199},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1506, col: 5, offset: 57199},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1506, col: 11, offset: 57205},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &zeroOrMoreExpr{
									pos: position{line: 1506, col: 11, offset: 57205},
									expr: &choiceExpr{
										pos: position{line: 1506, col: 12, offset: 57206},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1506, col: 12, offset: 57206},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 1506, col: 24, offset: 57218},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 1506, col: 34, offset: 57228},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 1506, col: 34, offset: 57228},
														expr: &ruleRefExpr{
															pos:  position{line: 1506, col: 35, offset: 57229},
															name: "LiteralBlockDelimiter",
														},
													},
													&notExpr{
														pos: position{line: 1506, col: 57, offset: 57251},
														expr: &ruleRefExpr{
															pos:  position{line: 1506, col: 58, offset: 57252},
															name: "EOL",
														},
													},
													&anyMatcher{
														line: 1506, col: 62, offset: 57256,
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1508, col: 8, offset: 57305},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 1513, col: 1, offset: 57431},
			expr: &actionExpr{
				pos: position{line: 1514, col: 5, offset: 57469},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 1514, col: 5, offset: 57469},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1514, col: 5, offset: 57469},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1514, col: 16, offset: 57480},
								expr: &ruleRefExpr{
									pos:  position{line: 1514, col: 17, offset: 57481},
									name: "ElementAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1515, col: 5, offset: 57505},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 1522, col: 5, offset: 57719},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1522, col: 12, offset: 57726},
								name: "ParagraphWithLiteralAttributeLines",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 1526, col: 1, offset: 57876},
			expr: &actionExpr{
				pos: position{line: 1526, col: 16, offset: 57891},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 1526, col: 16, offset: 57891},
					val:        "literal",
					ignoreCase: false,
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLines",
			pos:  position{line: 1531, col: 1, offset: 57974},
			expr: &actionExpr{
				pos: position{line: 1531, col: 39, offset: 58012},
				run: (*parser).callonParagraphWithLiteralAttributeLines1,
				expr: &labeledExpr{
					pos:   position{line: 1531, col: 39, offset: 58012},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1531, col: 45, offset: 58018},
						expr: &ruleRefExpr{
							pos:  position{line: 1531, col: 46, offset: 58019},
							name: "ParagraphWithLiteralAttributeLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLine",
			pos:  position{line: 1535, col: 1, offset: 58099},
			expr: &actionExpr{
				pos: position{line: 1535, col: 38, offset: 58136},
				run: (*parser).callonParagraphWithLiteralAttributeLine1,
				expr: &seqExpr{
					pos: position{line: 1535, col: 38, offset: 58136},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1535, col: 38, offset: 58136},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1535, col: 44, offset: 58142},
								run: (*parser).callonParagraphWithLiteralAttributeLine4,
								expr: &seqExpr{
									pos: position{line: 1535, col: 44, offset: 58142},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1535, col: 44, offset: 58142},
											expr: &ruleRefExpr{
												pos:  position{line: 1535, col: 46, offset: 58144},
												name: "BlankLine",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1535, col: 57, offset: 58155},
											expr: &choiceExpr{
												pos: position{line: 1535, col: 58, offset: 58156},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1535, col: 58, offset: 58156},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1535, col: 70, offset: 58168},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 1535, col: 80, offset: 58178},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 1535, col: 80, offset: 58178},
																expr: &ruleRefExpr{
																	pos:  position{line: 1535, col: 81, offset: 58179},
																	name: "EOL",
																},
															},
															&anyMatcher{
																line: 1535, col: 86, offset: 58184,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1537, col: 4, offset: 58225},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ConceleadIndexTerm",
			pos:  position{line: 1544, col: 1, offset: 58399},
			expr: &actionExpr{
				pos: position{line: 1544, col: 23, offset: 58421},
				run: (*parser).callonConceleadIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1544, col: 23, offset: 58421},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1544, col: 23, offset: 58421},
							val:        "(((",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1544, col: 29, offset: 58427},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 1544, col: 35, offset: 58433},
								name: "Alphanums",
							},
						},
						&labeledExpr{
							pos:   position{line: 1544, col: 45, offset: 58443},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 1544, col: 51, offset: 58449},
								expr: &actionExpr{
									pos: position{line: 1544, col: 52, offset: 58450},
									run: (*parser).callonConceleadIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 1544, col: 52, offset: 58450},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1544, col: 52, offset: 58450},
												expr: &ruleRefExpr{
													pos:  position{line: 1544, col: 52, offset: 58450},
													name: "WS",
												},
											},
											&litMatcher{
												pos:        position{line: 1544, col: 56, offset: 58454},
												val:        ",",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 1544, col: 60, offset: 58458},
												expr: &ruleRefExpr{
													pos:  position{line: 1544, col: 60, offset: 58458},
													name: "WS",
												},
											},
											&labeledExpr{
												pos:   position{line: 1544, col: 64, offset: 58462},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1544, col: 72, offset: 58470},
													name: "Alphanums",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1546, col: 9, offset: 58518},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 1546, col: 15, offset: 58524},
								expr: &actionExpr{
									pos: position{line: 1546, col: 16, offset: 58525},
									run: (*parser).callonConceleadIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 1546, col: 16, offset: 58525},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1546, col: 16, offset: 58525},
												expr: &ruleRefExpr{
													pos:  position{line: 1546, col: 16, offset: 58525},
													name: "WS",
												},
											},
											&litMatcher{
												pos:        position{line: 1546, col: 20, offset: 58529},
												val:        ",",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 1546, col: 24, offset: 58533},
												expr: &ruleRefExpr{
													pos:  position{line: 1546, col: 24, offset: 58533},
													name: "WS",
												},
											},
											&labeledExpr{
												pos:   position{line: 1546, col: 28, offset: 58537},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1546, col: 36, offset: 58545},
													name: "Alphanums",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1548, col: 9, offset: 58593},
							val:        ")))",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 1555, col: 1, offset: 58777},
			expr: &actionExpr{
				pos: position{line: 1555, col: 14, offset: 58790},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 1555, col: 14, offset: 58790},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1555, col: 14, offset: 58790},
							expr: &ruleRefExpr{
								pos:  position{line: 1555, col: 15, offset: 58791},
								name: "EOF",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1555, col: 19, offset: 58795},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 1562, col: 1, offset: 58943},
			expr: &charClassMatcher{
				pos:        position{line: 1562, col: 13, offset: 58955},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 1564, col: 1, offset: 58965},
			expr: &choiceExpr{
				pos: position{line: 1564, col: 16, offset: 58980},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1564, col: 16, offset: 58980},
						val:        "(",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1564, col: 22, offset: 58986},
						val:        ")",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1564, col: 28, offset: 58992},
						val:        "[",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1564, col: 34, offset: 58998},
						val:        "]",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1564, col: 40, offset: 59004},
						val:        "{",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1564, col: 46, offset: 59010},
						val:        "}",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 1566, col: 1, offset: 59016},
			expr: &actionExpr{
				pos: position{line: 1566, col: 14, offset: 59029},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1566, col: 14, offset: 59029},
					expr: &charClassMatcher{
						pos:        position{line: 1566, col: 14, offset: 59029},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Dot",
			pos:  position{line: 1570, col: 1, offset: 59075},
			expr: &litMatcher{
				pos:        position{line: 1570, col: 8, offset: 59082},
				val:        ".",
				ignoreCase: false,
			},
		},
		{
			name: "SimpleWord",
			pos:  position{line: 1572, col: 1, offset: 59087},
			expr: &actionExpr{
				pos: position{line: 1572, col: 15, offset: 59101},
				run: (*parser).callonSimpleWord1,
				expr: &seqExpr{
					pos: position{line: 1572, col: 15, offset: 59101},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1572, col: 15, offset: 59101},
							name: "Alphanums",
						},
						&andExpr{
							pos: position{line: 1572, col: 25, offset: 59111},
							expr: &choiceExpr{
								pos: position{line: 1572, col: 27, offset: 59113},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1572, col: 27, offset: 59113},
										name: "WS",
									},
									&ruleRefExpr{
										pos:  position{line: 1572, col: 32, offset: 59118},
										name: "EOL",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OtherWord",
			pos:  position{line: 1577, col: 1, offset: 59383},
			expr: &actionExpr{
				pos: position{line: 1577, col: 14, offset: 59396},
				run: (*parser).callonOtherWord1,
				expr: &choiceExpr{
					pos: position{line: 1577, col: 15, offset: 59397},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1577, col: 15, offset: 59397},
							name: "Alphanums",
						},
						&ruleRefExpr{
							pos:  position{line: 1577, col: 27, offset: 59409},
							name: "QuotedTextPrefix",
						},
						&oneOrMoreExpr{
							pos: position{line: 1577, col: 46, offset: 59428},
							expr: &actionExpr{
								pos: position{line: 1577, col: 47, offset: 59429},
								run: (*parser).callonOtherWord6,
								expr: &seqExpr{
									pos: position{line: 1577, col: 47, offset: 59429},
									exprs: []interface{}{
										&seqExpr{
											pos: position{line: 1577, col: 48, offset: 59430},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1577, col: 48, offset: 59430},
													expr: &ruleRefExpr{
														pos:  position{line: 1577, col: 49, offset: 59431},
														name: "NEWLINE",
													},
												},
												&notExpr{
													pos: position{line: 1577, col: 57, offset: 59439},
													expr: &ruleRefExpr{
														pos:  position{line: 1577, col: 58, offset: 59440},
														name: "WS",
													},
												},
												&notExpr{
													pos: position{line: 1577, col: 61, offset: 59443},
													expr: &ruleRefExpr{
														pos:  position{line: 1577, col: 62, offset: 59444},
														name: "Dot",
													},
												},
												&notExpr{
													pos: position{line: 1577, col: 66, offset: 59448},
													expr: &ruleRefExpr{
														pos:  position{line: 1577, col: 67, offset: 59449},
														name: "QuotedTextPrefix",
													},
												},
												&notExpr{
													pos: position{line: 1577, col: 84, offset: 59466},
													expr: &ruleRefExpr{
														pos:  position{line: 1577, col: 85, offset: 59467},
														name: "LabeledListItemSeparator",
													},
												},
												&notExpr{
													pos: position{line: 1577, col: 110, offset: 59492},
													expr: &ruleRefExpr{
														pos:  position{line: 1577, col: 111, offset: 59493},
														name: "Parenthesis",
													},
												},
												&anyMatcher{
													line: 1577, col: 123, offset: 59505,
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1577, col: 126, offset: 59508},
											expr: &ruleRefExpr{
												pos:  position{line: 1577, col: 126, offset: 59508},
												name: "Dot",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1579, col: 7, offset: 59617},
							expr: &litMatcher{
								pos:        position{line: 1579, col: 7, offset: 59617},
								val:        ".",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Spaces",
			pos:  position{line: 1583, col: 1, offset: 59798},
			expr: &oneOrMoreExpr{
				pos: position{line: 1583, col: 11, offset: 59808},
				expr: &ruleRefExpr{
					pos:  position{line: 1583, col: 11, offset: 59808},
					name: "WS",
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 1585, col: 1, offset: 59814},
			expr: &actionExpr{
				pos: position{line: 1585, col: 17, offset: 59830},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1585, col: 17, offset: 59830},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1585, col: 26, offset: 59839},
						expr: &choiceExpr{
							pos: position{line: 1585, col: 27, offset: 59840},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1585, col: 27, offset: 59840},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 1585, col: 38, offset: 59851},
									name: "DocumentAttributeSubstitution",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedFileLocation",
			pos:  position{line: 1589, col: 1, offset: 59943},
			expr: &actionExpr{
				pos: position{line: 1589, col: 25, offset: 59967},
				run: (*parser).callonResolvedFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1589, col: 25, offset: 59967},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1589, col: 34, offset: 59976},
						expr: &seqExpr{
							pos: position{line: 1589, col: 35, offset: 59977},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1589, col: 35, offset: 59977},
									expr: &ruleRefExpr{
										pos:  position{line: 1589, col: 36, offset: 59978},
										name: "EOL",
									},
								},
								&notExpr{
									pos: position{line: 1589, col: 40, offset: 59982},
									expr: &ruleRefExpr{
										pos:  position{line: 1589, col: 41, offset: 59983},
										name: "WS",
									},
								},
								&notExpr{
									pos: position{line: 1589, col: 44, offset: 59986},
									expr: &litMatcher{
										pos:        position{line: 1589, col: 45, offset: 59987},
										val:        "[",
										ignoreCase: false,
									},
								},
								&anyMatcher{
									line: 1589, col: 49, offset: 59991,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 1593, col: 1, offset: 60055},
			expr: &actionExpr{
				pos: position{line: 1593, col: 13, offset: 60067},
				run: (*parser).callonLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1593, col: 13, offset: 60067},
					label: "elements",
					expr: &seqExpr{
						pos: position{line: 1593, col: 23, offset: 60077},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1593, col: 23, offset: 60077},
								name: "URL_SCHEME",
							},
							&oneOrMoreExpr{
								pos: position{line: 1593, col: 34, offset: 60088},
								expr: &choiceExpr{
									pos: position{line: 1593, col: 35, offset: 60089},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1593, col: 35, offset: 60089},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 1593, col: 46, offset: 60100},
											name: "DocumentAttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 1597, col: 1, offset: 60193},
			expr: &oneOrMoreExpr{
				pos: position{line: 1597, col: 13, offset: 60205},
				expr: &choiceExpr{
					pos: position{line: 1597, col: 14, offset: 60206},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1597, col: 14, offset: 60206},
							val:        "[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789~:/?#@!$&;=()*+,_%]",
							chars:      []rune{'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '~', ':', '/', '?', '#', '@', '!', '$', '&', ';', '=', '(', ')', '*', '+', ',', '_', '%'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 1597, col: 99, offset: 60291},
							val:        "-",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1597, col: 105, offset: 60297},
							val:        ".",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ResolvedLocation",
			pos:  position{line: 1599, col: 1, offset: 60418},
			expr: &actionExpr{
				pos: position{line: 1599, col: 21, offset: 60438},
				run: (*parser).callonResolvedLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1599, col: 21, offset: 60438},
					label: "elements",
					expr: &seqExpr{
						pos: position{line: 1599, col: 31, offset: 60448},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1599, col: 31, offset: 60448},
								name: "URL_SCHEME",
							},
							&ruleRefExpr{
								pos:  position{line: 1599, col: 42, offset: 60459},
								name: "RESOLVED_FILENAME",
							},
						},
					},
				},
			},
		},
		{
			name: "RESOLVED_FILENAME",
			pos:  position{line: 1603, col: 1, offset: 60538},
			expr: &oneOrMoreExpr{
				pos: position{line: 1603, col: 22, offset: 60559},
				expr: &choiceExpr{
					pos: position{line: 1603, col: 23, offset: 60560},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1603, col: 23, offset: 60560},
							val:        "[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789~:/?#@!$&;=()*+_,%{}]",
							chars:      []rune{'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '~', ':', '/', '?', '#', '@', '!', '$', '&', ';', '=', '(', ')', '*', '+', '_', ',', '%', '{', '}'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 1603, col: 110, offset: 60647},
							val:        "-",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1603, col: 116, offset: 60653},
							val:        ".",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 1605, col: 1, offset: 60702},
			expr: &actionExpr{
				pos: position{line: 1605, col: 8, offset: 60709},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1605, col: 8, offset: 60709},
					expr: &choiceExpr{
						pos: position{line: 1605, col: 9, offset: 60710},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1605, col: 9, offset: 60710},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 1605, col: 22, offset: 60723},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1605, col: 22, offset: 60723},
										expr: &ruleRefExpr{
											pos:  position{line: 1605, col: 23, offset: 60724},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 1605, col: 31, offset: 60732},
										expr: &ruleRefExpr{
											pos:  position{line: 1605, col: 32, offset: 60733},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1605, col: 35, offset: 60736},
										expr: &litMatcher{
											pos:        position{line: 1605, col: 36, offset: 60737},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1605, col: 40, offset: 60741},
										expr: &litMatcher{
											pos:        position{line: 1605, col: 41, offset: 60742},
											val:        "]",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1605, col: 46, offset: 60747,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 1609, col: 1, offset: 60788},
			expr: &choiceExpr{
				pos: position{line: 1609, col: 15, offset: 60802},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1609, col: 15, offset: 60802},
						val:        "http://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1609, col: 27, offset: 60814},
						val:        "https://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1609, col: 40, offset: 60827},
						val:        "ftp://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1609, col: 51, offset: 60838},
						val:        "irc://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1609, col: 62, offset: 60849},
						val:        "mailto:",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 1611, col: 1, offset: 60860},
			expr: &actionExpr{
				pos: position{line: 1611, col: 7, offset: 60866},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1611, col: 7, offset: 60866},
					expr: &choiceExpr{
						pos: position{line: 1611, col: 8, offset: 60867},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1611, col: 8, offset: 60867},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 1611, col: 21, offset: 60880},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1611, col: 21, offset: 60880},
										expr: &ruleRefExpr{
											pos:  position{line: 1611, col: 22, offset: 60881},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 1611, col: 30, offset: 60889},
										expr: &ruleRefExpr{
											pos:  position{line: 1611, col: 31, offset: 60890},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1611, col: 34, offset: 60893},
										expr: &litMatcher{
											pos:        position{line: 1611, col: 35, offset: 60894},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1611, col: 39, offset: 60898},
										expr: &litMatcher{
											pos:        position{line: 1611, col: 40, offset: 60899},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1611, col: 44, offset: 60903},
										expr: &litMatcher{
											pos:        position{line: 1611, col: 45, offset: 60904},
											val:        "<<",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1611, col: 50, offset: 60909},
										expr: &litMatcher{
											pos:        position{line: 1611, col: 51, offset: 60910},
											val:        ">>",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1611, col: 56, offset: 60915},
										expr: &litMatcher{
											pos:        position{line: 1611, col: 57, offset: 60916},
											val:        ",",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1611, col: 62, offset: 60921,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 1615, col: 1, offset: 60962},
			expr: &actionExpr{
				pos: position{line: 1615, col: 10, offset: 60971},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 1615, col: 10, offset: 60971},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 1619, col: 1, offset: 61013},
			expr: &actionExpr{
				pos: position{line: 1619, col: 11, offset: 61023},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 1619, col: 11, offset: 61023},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1619, col: 11, offset: 61023},
							expr: &litMatcher{
								pos:        position{line: 1619, col: 11, offset: 61023},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1619, col: 16, offset: 61028},
							expr: &ruleRefExpr{
								pos:  position{line: 1619, col: 16, offset: 61028},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "WS",
			pos:  position{line: 1623, col: 1, offset: 61080},
			expr: &choiceExpr{
				pos: position{line: 1623, col: 7, offset: 61086},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1623, col: 7, offset: 61086},
						val:        " ",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1623, col: 13, offset: 61092},
						run: (*parser).callonWS3,
						expr: &litMatcher{
							pos:        position{line: 1623, col: 13, offset: 61092},
							val:        "\t",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NEWLINE",
			pos:  position{line: 1627, col: 1, offset: 61133},
			expr: &choiceExpr{
				pos: position{line: 1627, col: 12, offset: 61144},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1627, col: 12, offset: 61144},
						val:        "\r\n",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1627, col: 21, offset: 61153},
						val:        "\r",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1627, col: 28, offset: 61160},
						val:        "\n",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1629, col: 1, offset: 61166},
			expr: &notExpr{
				pos: position{line: 1629, col: 8, offset: 61173},
				expr: &anyMatcher{
					line: 1629, col: 9, offset: 61174,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1631, col: 1, offset: 61177},
			expr: &choiceExpr{
				pos: position{line: 1631, col: 8, offset: 61184},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1631, col: 8, offset: 61184},
						name: "NEWLINE",
					},
					&ruleRefExpr{
						pos:  position{line: 1631, col: 18, offset: 61194},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOLS",
			pos:  position{line: 1633, col: 1, offset: 61199},
			expr: &seqExpr{
				pos: position{line: 1633, col: 9, offset: 61207},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1633, col: 9, offset: 61207},
						expr: &ruleRefExpr{
							pos:  position{line: 1633, col: 9, offset: 61207},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1633, col: 13, offset: 61211},
						name: "EOL",
					},
				},
			},
		},
	},
}

func (c *current) onAsciidocDocument1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonAsciidocDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onAsciidocDocumentWithinDelimitedBlock1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonAsciidocDocumentWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocumentWithinDelimitedBlock1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onTextDocument1(blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonTextDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocument1(stack["blocks"])
}

func (c *current) onAsciidocDocumentBlocks1(header, others interface{}) (interface{}, error) {
	if header != nil && others != nil {
		return append([]interface{}{header}, others.([]interface{})...), nil
	} else if others != nil {
		return others.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonAsciidocDocumentBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocumentBlocks1(stack["header"], stack["others"])
}

func (c *current) onDocumentBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock1(stack["block"])
}

func (c *current) onDocumentBlockWithinDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlockWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlockWithinDelimitedBlock1(stack["block"])
}

func (c *current) onTextDocumentBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonTextDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocumentBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentHeader(title.([]interface{}), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber18() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber18()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onDocumentAttributeDeclaration9(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonDocumentAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclaration9(stack["value"])
}

func (c *current) onDocumentAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	return types.NewDocumentAttributeDeclaration(name.(string), value)
}

func (p *parser) callonDocumentAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onDocumentAttributeName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeName1()
}

func (c *current) onDocumentAttributeValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeValue1()
}

func (c *current) onDocumentAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.(string))
}

func (p *parser) callonDocumentAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeReset2(stack["name"])
}

func (c *current) onDocumentAttributeReset9(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.(string))
}

func (p *parser) callonDocumentAttributeReset9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeReset9(stack["name"])
}

func (c *current) onDocumentAttributeSubstitution1(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeSubstitution(name.(string))
}

func (p *parser) callonDocumentAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeSubstitution1(stack["name"])
}

func (c *current) onElementAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs.([]interface{})), nil
}

func (p *parser) callonElementAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {
	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID2(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID2(stack["id"])
}

func (c *current) onElementID9(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID9(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementTitle5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle5()
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {
	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementRole5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementRole5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole5()
}

func (c *current) onElementRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role.(string))
}

func (p *parser) callonElementRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole1(stack["role"])
}

func (c *current) onLiteralAttribute1() (interface{}, error) {
	return types.NewLiteralAttribute()
}

func (p *parser) callonLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {
	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes8() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSourceAttributes8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes8()
}

func (c *current) onSourceAttributes1(language interface{}) (interface{}, error) {
	return types.NewSourceAttributes(language)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["language"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttribute2(key, value interface{}) (interface{}, error) {
	// value is (optionally) set
	return types.NewGenericAttribute(key.(string), value)

}

func (p *parser) callonGenericAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttribute2(stack["key"], stack["value"])
}

func (c *current) onGenericAttribute14(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.(string), nil)

}

func (p *parser) callonGenericAttribute14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttribute14(stack["key"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {
	// attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onHorizontalLayout1() (interface{}, error) {
	return types.ElementAttributes{"layout": "horizontal"}, nil
}

func (p *parser) callonHorizontalLayout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHorizontalLayout1()
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onInlineAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attrs"])
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.([]interface{}), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), attrs.(types.ElementAttributes), string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), attrs.(types.ElementAttributes), string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.ElementAttributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedLineRanges10(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleQuotedLineRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges10(stack["other"])
}

func (c *current) onMultipleQuotedLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onMultiLineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onSingleLineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onTagRangesAttribute1(tags interface{}) (interface{}, error) {
	//TODO: check if 'tags'/'tag' is allowed for both single and multiple values
	return types.NewTagRangesAttribute(tags.([]interface{}))
}

func (p *parser) callonTagRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttribute1(stack["tags"])
}

func (c *current) onTagRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonTagRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {
	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements, linebreak interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(append(elements.([]interface{}), linebreak))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"], stack["linebreak"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(blanklines, element interface{}) (interface{}, error) {
	return types.NewContinuedListItemElement(-len(blanklines.([]interface{})), element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["blanklines"], stack["element"])
}

func (c *current) onOrderedListItem1(attributes, prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attributes)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attributes"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attributes, prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attributes)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attributes"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {
	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attributes, term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListItem(len(separator.(string))-1, term.([]interface{}), description, attributes)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attributes"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onSimpleLabeledListItemTerm3() (interface{}, error) {
	return types.NewStringElement(strings.TrimSpace(string(c.text)))
}

func (p *parser) callonSimpleLabeledListItemTerm3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleLabeledListItemTerm3()
}

func (c *current) onSimpleLabeledListItemTerm1(content interface{}) (interface{}, error) {
	return types.NewInlineElements(content)
}

func (p *parser) callonSimpleLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleLabeledListItemTerm1(stack["content"])
}

func (c *current) onLabeledListItemTerm1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1(stack["elements"])
}

func (c *current) onLabeledListItemTermElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonLabeledListItemTermElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement1(stack["element"])
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil

}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil

}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil

}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil

}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onParagraph13(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph13(stack["attributes"], stack["lines"])
}

func (c *current) onSimpleParagraph6(attributes interface{}) (bool, error) {
	// skip if the '[literal]' attribute was set on this paragraph
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, found := attrs[types.AttrKind]
		return !found || kind != types.Literal, nil
	}
	return true, nil

}

func (p *parser) callonSimpleParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph6(stack["attributes"])
}

func (c *current) onSimpleParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {
	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphLine1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonFirstParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphLine1(stack["elements"], stack["linebreak"])
}

func (c *current) onOtherParagraphLine1(elements interface{}) (interface{}, error) {
	return elements, nil
}

func (p *parser) callonOtherParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherParagraphLine1(stack["elements"])
}

func (c *current) onVerseParagraph7(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph7(stack["attributes"])
}

func (c *current) onVerseParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonVerseParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onVerseParagraph19(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph19(stack["attributes"])
}

func (c *current) onVerseParagraph14(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonVerseParagraph14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph14(stack["attributes"], stack["lines"])
}

func (c *current) onInlineElements9(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements9(stack["comment"])
}

func (c *current) onInlineElements12(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))

}

func (p *parser) callonInlineElements12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements12(stack["elements"], stack["linebreak"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onInlineElementsWithoutSubtitution1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonInlineElementsWithoutSubtitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementsWithoutSubtitution1(stack["elements"], stack["linebreak"])
}

func (c *current) onInlineElementWithoutSubtitution1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElementWithoutSubtitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementWithoutSubtitution1(stack["element"])
}

func (c *current) onVerbatimParagraph8(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonVerbatimParagraph8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraph8(stack["line"])
}

func (c *current) onVerbatimParagraph1(attributes, lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonVerbatimParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraph1(stack["attributes"], stack["lines"])
}

func (c *current) onVerbatimParagraphLine1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonVerbatimParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraphLine1(stack["elements"], stack["linebreak"])
}

func (c *current) onVerbatimParagraphLineElement1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonVerbatimParagraphLineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraphLineElement1()
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Bold, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteBoldText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteBoldText1()
}

func (c *current) onSingleQuoteBoldText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["elements"])
}

func (c *current) onSingleQuoteBoldText12(elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText12(stack["elements"])
}

func (c *current) onSingleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteBoldText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteBoldText1()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteItalicText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteItalicText1()
}

func (c *current) onSingleQuoteItalicText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["elements"])
}

func (c *current) onSingleQuoteItalicText12(elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText12(stack["elements"])
}

func (c *current) onSingleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteItalicText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteItalicText1()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteMonospaceText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteMonospaceText1()
}

func (c *current) onSingleQuoteMonospaceText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText12(elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText12(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteMonospaceText1() (interface{}, error) {
	// break at multiline
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteMonospaceText1()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, element)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {

	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, element)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {

	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter4() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter4()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), label.(string))
}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), nil)
}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onCrossReferenceLabel1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonCrossReferenceLabel1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel1()
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onTextOnlyLinkAttributes1(text interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(text, nil)
}

func (p *parser) callonTextOnlyLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextOnlyLinkAttributes1(stack["text"])
}

func (c *current) onLinkTextWithCommaAttribute18() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextWithCommaAttribute18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute18()
}

func (c *current) onLinkTextWithCommaAttribute2(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextWithCommaAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute2(stack["elements"])
}

func (c *current) onLinkTextWithCommaAttribute42() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextWithCommaAttribute42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute42()
}

func (c *current) onLinkTextWithCommaAttribute29(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextWithCommaAttribute29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute29(stack["elements"])
}

func (c *current) onTextAndMoreLinkAttributes1(text, otherattrs interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(text, otherattrs.([]interface{}))
}

func (p *parser) callonTextAndMoreLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextAndMoreLinkAttributes1(stack["text"], stack["otherattrs"])
}

func (c *current) onLinkTextAttribute18() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextAttribute18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute18()
}

func (c *current) onLinkTextAttribute2(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute2(stack["elements"])
}

func (c *current) onLinkTextAttribute44() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextAttribute44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute44()
}

func (c *current) onLinkTextAttribute29(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextAttribute29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute29(stack["elements"])
}

func (c *current) onInlineLinks1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonInlineLinks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineLinks1(stack["elements"])
}

func (c *current) onResolvedRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonResolvedRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onResolvedExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonResolvedExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalQuotedLink1(url, inlineAttributes interface{}) (interface{}, error) {
	// here attributes are required, so we can safely use the `_` and `*` characters in the URL without messing with the bold or italic markers.
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalQuotedLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalQuotedLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewImageBlock(path.(types.Location), inlineAttributes.(types.ElementAttributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onImageAttributes1(alt, width, height, otherattrs interface{}) (interface{}, error) {
	return types.NewImageAttributes(alt, width, height, otherattrs.([]interface{}))
}

func (p *parser) callonImageAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttributes1(stack["alt"], stack["width"], stack["height"], stack["otherattrs"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.([]interface{}))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content.([]interface{}))
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onInlineFootnote17(ref interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), []interface{}{}) // foot note referring to another note
}

func (p *parser) callonInlineFootnote17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote17(stack["ref"])
}

func (c *current) onFootnoteRef1() (interface{}, error) {
	// footnote ID not may span multiple lines
	return string(c.text), nil
}

func (p *parser) callonFootnoteRef1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteRef1()
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonFencedBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockParagraph1(stack["lines"])
}

func (c *current) onFencedBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonFencedBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockParagraphLine1(stack["line"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Listing, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), nil) // no attributes supported
}

func (p *parser) callonListingBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraph1(stack["lines"])
}

func (c *current) onListingBlockParagraphLine6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonListingBlockParagraphLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraphLine6()
}

func (c *current) onListingBlockParagraphLine1(line interface{}) (interface{}, error) {
	// skip EOL in line content, and stop when quote block delimiter is encountered
	return types.NewInlineElements(line)
}

func (p *parser) callonListingBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraphLine1(stack["line"])
}

func (c *current) onExampleBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Example, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["content"])
}

func (c *current) onExampleBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonExampleBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockParagraph1(stack["lines"])
}

func (c *current) onExampleBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonExampleBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockParagraphLine1(stack["line"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Quote, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuoteBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockElement1(stack["element"])
}

func (c *current) onQuoteBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonQuoteBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlock5(attributes interface{}) (bool, error) {

	kind := attributes.(types.ElementAttributes).GetAsString("kind") // once we got the attributes, check that `[verse]`  was set
	return kind == "verse", nil

}

func (p *parser) callonVerseBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock5(stack["attributes"])
}

func (c *current) onVerseBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Verse, content.([]interface{}), types.None, attributes)

}

func (p *parser) callonVerseBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock1(stack["attributes"], stack["content"])
}

func (c *current) onVerseFileInclude1(include interface{}) (interface{}, error) {
	return include, nil
}

func (p *parser) callonVerseFileInclude1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseFileInclude1(stack["include"])
}

func (c *current) onVerseBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonVerseBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlockParagraphLine8(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonVerseBlockParagraphLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine8(stack["elements"])
}

func (c *current) onVerseBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonVerseBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine1(stack["line"])
}

func (c *current) onVerseBlockParagraphLineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonVerseBlockParagraphLineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLineElement1(stack["element"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onNonSidebarBlock1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonNonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSidebarBlock1(stack["content"])
}

func (c *current) onSidebarBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonSidebarBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockParagraph1(stack["lines"])
}

func (c *current) onSidebarBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonSidebarBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockParagraphLine1(stack["line"])
}

func (c *current) onTable1(attributes, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attributes)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attributes"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}), types.Verbatim, nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockLine1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonCommentBlockLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockLine1()
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines11()
}

func (c *current) onParagraphWithHeadingSpacesLines4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines4()
}

func (c *current) onParagraphWithHeadingSpacesLines24() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines24()
}

func (c *current) onParagraphWithHeadingSpacesLines19(otherLine interface{}) (interface{}, error) {
	return otherLine, nil // do not include the trailing 'EOL'

}

func (p *parser) callonParagraphWithHeadingSpacesLines19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines19(stack["otherLine"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Literal, nil
	}
	return false, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onParagraphWithLiteralAttributeLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralAttributeLine4() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine4()
}

func (c *current) onParagraphWithLiteralAttributeLine1(line interface{}) (interface{}, error) {
	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralAttributeLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine1(stack["line"])
}

func (c *current) onConceleadIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonConceleadIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConceleadIndexTerm8(stack["content"])
}

func (c *current) onConceleadIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonConceleadIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConceleadIndexTerm19(stack["content"])
}

func (c *current) onConceleadIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConceleadIndexTerm(term1, term2, term3)

}

func (p *parser) callonConceleadIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConceleadIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onSimpleWord1() (interface{}, error) {
	// very straightforward content: alphanums followed by spaces but not the "+" signs because it needs a heading space to become a LineBreak element
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSimpleWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleWord1()
}

func (c *current) onOtherWord6() (interface{}, error) {
	// TODO: remove check on parenthesis and dot?
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherWord6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherWord6()
}

func (c *current) onOtherWord1() (interface{}, error) {
	// word cannot contain parenthesis. Dots and ellipsis are treated as independent words (but will be combined afterwards)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherWord1()
}

func (c *current) onFileLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["elements"])
}

func (c *current) onResolvedFileLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonResolvedFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedFileLocation1(stack["elements"])
}

func (c *current) onLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["elements"])
}

func (c *current) onResolvedLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonResolvedLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedLocation1(stack["elements"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onWS3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonWS3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWS3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := string(strconv.AppendQuote([]byte{}, lit.val)) + ignoreCase // wrap 'lit.val' with double quotes
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
