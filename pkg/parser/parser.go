// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "AsciidocDocument",
			pos:  position{line: 17, col: 1, offset: 319},
			expr: &actionExpr{
				pos: position{line: 17, col: 21, offset: 339},
				run: (*parser).callonAsciidocDocument1,
				expr: &seqExpr{
					pos: position{line: 17, col: 21, offset: 339},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 21, offset: 339},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 34, offset: 352},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 34, offset: 352},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 48, offset: 366},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 56, offset: 374},
								name: "AsciidocDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 80, offset: 398},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentWithinDelimitedBlock",
			pos:  position{line: 21, col: 1, offset: 478},
			expr: &actionExpr{
				pos: position{line: 21, col: 41, offset: 518},
				run: (*parser).callonAsciidocDocumentWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 21, col: 41, offset: 518},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 21, col: 41, offset: 518},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 21, col: 54, offset: 531},
								expr: &ruleRefExpr{
									pos:  position{line: 21, col: 54, offset: 531},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 21, col: 68, offset: 545},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 21, col: 76, offset: 553},
								name: "AsciidocDocumentBlocksWithinDelimitedBlock",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 120, offset: 597},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "TextDocument",
			pos:  position{line: 25, col: 1, offset: 677},
			expr: &actionExpr{
				pos: position{line: 25, col: 17, offset: 693},
				run: (*parser).callonTextDocument1,
				expr: &seqExpr{
					pos: position{line: 25, col: 17, offset: 693},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 25, col: 17, offset: 693},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 25, col: 25, offset: 701},
								name: "TextDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 25, col: 45, offset: 721},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocks",
			pos:  position{line: 32, col: 1, offset: 904},
			expr: &actionExpr{
				pos: position{line: 32, col: 27, offset: 930},
				run: (*parser).callonAsciidocDocumentBlocks1,
				expr: &seqExpr{
					pos: position{line: 32, col: 27, offset: 930},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 32, col: 27, offset: 930},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 32, col: 35, offset: 938},
								expr: &ruleRefExpr{
									pos:  position{line: 32, col: 35, offset: 938},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 32, col: 52, offset: 955},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 32, col: 60, offset: 963},
								expr: &ruleRefExpr{
									pos:  position{line: 32, col: 60, offset: 963},
									name: "DocumentBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentBlock",
			pos:  position{line: 41, col: 1, offset: 1212},
			expr: &actionExpr{
				pos: position{line: 41, col: 18, offset: 1229},
				run: (*parser).callonDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 41, col: 18, offset: 1229},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 41, col: 18, offset: 1229},
							expr: &ruleRefExpr{
								pos:  position{line: 41, col: 19, offset: 1230},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 42, col: 5, offset: 1239},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 42, col: 12, offset: 1246},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 42, col: 12, offset: 1246},
										name: "SimpleParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 43, col: 11, offset: 1272},
										name: "Section",
									},
									&ruleRefExpr{
										pos:  position{line: 44, col: 11, offset: 1291},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 45, col: 11, offset: 1316},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 46, col: 11, offset: 1340},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 47, col: 11, offset: 1394},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 48, col: 11, offset: 1416},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 49, col: 11, offset: 1435},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 50, col: 11, offset: 1486},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 51, col: 11, offset: 1510},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 52, col: 11, offset: 1550},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 53, col: 11, offset: 1584},
										name: "TableOfContentsMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 54, col: 11, offset: 1615},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 55, col: 11, offset: 1640},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocksWithinDelimitedBlock",
			pos:  position{line: 59, col: 1, offset: 1678},
			expr: &labeledExpr{
				pos:   position{line: 59, col: 47, offset: 1724},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 59, col: 54, offset: 1731},
					expr: &ruleRefExpr{
						pos:  position{line: 59, col: 55, offset: 1732},
						name: "DocumentBlockWithinDelimitedBlock",
					},
				},
			},
		},
		{
			name: "DocumentBlockWithinDelimitedBlock",
			pos:  position{line: 61, col: 1, offset: 1769},
			expr: &actionExpr{
				pos: position{line: 61, col: 38, offset: 1806},
				run: (*parser).callonDocumentBlockWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 61, col: 38, offset: 1806},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 61, col: 38, offset: 1806},
							expr: &ruleRefExpr{
								pos:  position{line: 61, col: 39, offset: 1807},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 62, col: 5, offset: 1816},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 62, col: 12, offset: 1823},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 62, col: 12, offset: 1823},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 63, col: 11, offset: 1848},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 64, col: 11, offset: 1872},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 65, col: 11, offset: 1897},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 66, col: 11, offset: 1919},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 67, col: 11, offset: 1938},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 68, col: 11, offset: 1989},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 69, col: 11, offset: 2013},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 70, col: 11, offset: 2053},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 71, col: 11, offset: 2087},
										name: "TableOfContentsMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 72, col: 11, offset: 2118},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 73, col: 11, offset: 2143},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextDocumentBlocks",
			pos:  position{line: 77, col: 1, offset: 2181},
			expr: &labeledExpr{
				pos:   position{line: 77, col: 23, offset: 2203},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 77, col: 30, offset: 2210},
					expr: &ruleRefExpr{
						pos:  position{line: 77, col: 31, offset: 2211},
						name: "TextDocumentBlock",
					},
				},
			},
		},
		{
			name: "TextDocumentBlock",
			pos:  position{line: 79, col: 1, offset: 2232},
			expr: &actionExpr{
				pos: position{line: 79, col: 22, offset: 2253},
				run: (*parser).callonTextDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 79, col: 22, offset: 2253},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 79, col: 22, offset: 2253},
							expr: &ruleRefExpr{
								pos:  position{line: 79, col: 23, offset: 2254},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 80, col: 5, offset: 2263},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 80, col: 12, offset: 2270},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 80, col: 12, offset: 2270},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 80, col: 24, offset: 2282},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 87, col: 1, offset: 2428},
			expr: &ruleRefExpr{
				pos:  position{line: 87, col: 16, offset: 2443},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 89, col: 1, offset: 2461},
			expr: &actionExpr{
				pos: position{line: 89, col: 20, offset: 2480},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 89, col: 20, offset: 2480},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 89, col: 20, offset: 2480},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 89, col: 41, offset: 2501},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 89, col: 49, offset: 2509},
								expr: &ruleRefExpr{
									pos:  position{line: 89, col: 50, offset: 2510},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 89, col: 75, offset: 2535},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 93, col: 1, offset: 2615},
			expr: &seqExpr{
				pos: position{line: 93, col: 26, offset: 2640},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 93, col: 26, offset: 2640},
						val:        "---",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 93, col: 32, offset: 2646},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 95, col: 1, offset: 2652},
			expr: &actionExpr{
				pos: position{line: 95, col: 27, offset: 2678},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 95, col: 27, offset: 2678},
					expr: &oneOrMoreExpr{
						pos: position{line: 95, col: 28, offset: 2679},
						expr: &seqExpr{
							pos: position{line: 95, col: 29, offset: 2680},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 95, col: 29, offset: 2680},
									expr: &ruleRefExpr{
										pos:  position{line: 95, col: 30, offset: 2681},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 95, col: 51, offset: 2702,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 102, col: 1, offset: 2868},
			expr: &actionExpr{
				pos: position{line: 102, col: 19, offset: 2886},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 102, col: 19, offset: 2886},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 102, col: 19, offset: 2886},
							val:        "=",
							ignoreCase: false,
						},
						&oneOrMoreExpr{
							pos: position{line: 102, col: 23, offset: 2890},
							expr: &ruleRefExpr{
								pos:  position{line: 102, col: 23, offset: 2890},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 102, col: 27, offset: 2894},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 102, col: 34, offset: 2901},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 102, col: 49, offset: 2916},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 102, col: 53, offset: 2920},
								expr: &ruleRefExpr{
									pos:  position{line: 102, col: 53, offset: 2920},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 102, col: 71, offset: 2938},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 103, col: 9, offset: 2950},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 103, col: 18, offset: 2959},
								expr: &ruleRefExpr{
									pos:  position{line: 103, col: 18, offset: 2959},
									name: "DocumentAuthors",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 104, col: 9, offset: 2986},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 104, col: 19, offset: 2996},
								expr: &ruleRefExpr{
									pos:  position{line: 104, col: 19, offset: 2996},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 108, col: 1, offset: 3097},
			expr: &choiceExpr{
				pos: position{line: 108, col: 20, offset: 3116},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 108, col: 20, offset: 3116},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 108, col: 48, offset: 3144},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 110, col: 1, offset: 3174},
			expr: &actionExpr{
				pos: position{line: 110, col: 30, offset: 3203},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 110, col: 30, offset: 3203},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 110, col: 30, offset: 3203},
							expr: &ruleRefExpr{
								pos:  position{line: 110, col: 30, offset: 3203},
								name: "WS",
							},
						},
						&notExpr{
							pos: position{line: 110, col: 34, offset: 3207},
							expr: &litMatcher{
								pos:        position{line: 110, col: 35, offset: 3208},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 110, col: 39, offset: 3212},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 110, col: 48, offset: 3221},
								expr: &ruleRefExpr{
									pos:  position{line: 110, col: 48, offset: 3221},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 110, col: 65, offset: 3238},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 114, col: 1, offset: 3308},
			expr: &actionExpr{
				pos: position{line: 114, col: 33, offset: 3340},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 114, col: 33, offset: 3340},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 114, col: 33, offset: 3340},
							expr: &ruleRefExpr{
								pos:  position{line: 114, col: 33, offset: 3340},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 114, col: 37, offset: 3344},
							val:        ":author:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 114, col: 48, offset: 3355},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 114, col: 56, offset: 3363},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 114, col: 72, offset: 3379},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 118, col: 1, offset: 3458},
			expr: &actionExpr{
				pos: position{line: 118, col: 19, offset: 3476},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 118, col: 19, offset: 3476},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 118, col: 19, offset: 3476},
							expr: &ruleRefExpr{
								pos:  position{line: 118, col: 19, offset: 3476},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 118, col: 23, offset: 3480},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 118, col: 33, offset: 3490},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 118, col: 53, offset: 3510},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 118, col: 59, offset: 3516},
								expr: &ruleRefExpr{
									pos:  position{line: 118, col: 60, offset: 3517},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 118, col: 82, offset: 3539},
							expr: &ruleRefExpr{
								pos:  position{line: 118, col: 82, offset: 3539},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 118, col: 86, offset: 3543},
							expr: &litMatcher{
								pos:        position{line: 118, col: 86, offset: 3543},
								val:        ";",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 118, col: 91, offset: 3548},
							expr: &ruleRefExpr{
								pos:  position{line: 118, col: 91, offset: 3548},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 123, col: 1, offset: 3690},
			expr: &actionExpr{
				pos: position{line: 123, col: 23, offset: 3712},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 123, col: 23, offset: 3712},
					expr: &choiceExpr{
						pos: position{line: 123, col: 24, offset: 3713},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 123, col: 24, offset: 3713},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 123, col: 37, offset: 3726},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 123, col: 37, offset: 3726},
										expr: &litMatcher{
											pos:        position{line: 123, col: 38, offset: 3727},
											val:        "<",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 123, col: 42, offset: 3731},
										expr: &litMatcher{
											pos:        position{line: 123, col: 43, offset: 3732},
											val:        ";",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 123, col: 47, offset: 3736},
										expr: &ruleRefExpr{
											pos:  position{line: 123, col: 48, offset: 3737},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 123, col: 56, offset: 3745,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 127, col: 1, offset: 3786},
			expr: &actionExpr{
				pos: position{line: 127, col: 24, offset: 3809},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 127, col: 24, offset: 3809},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 127, col: 24, offset: 3809},
							val:        "<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 127, col: 28, offset: 3813},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 127, col: 35, offset: 3820},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 127, col: 35, offset: 3820},
									expr: &choiceExpr{
										pos: position{line: 127, col: 36, offset: 3821},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 127, col: 36, offset: 3821},
												name: "Alphanums",
											},
											&seqExpr{
												pos: position{line: 127, col: 49, offset: 3834},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 127, col: 49, offset: 3834},
														expr: &litMatcher{
															pos:        position{line: 127, col: 50, offset: 3835},
															val:        ">",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 127, col: 54, offset: 3839},
														expr: &ruleRefExpr{
															pos:  position{line: 127, col: 55, offset: 3840},
															name: "EOL",
														},
													},
													&anyMatcher{
														line: 127, col: 60, offset: 3845,
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 129, col: 4, offset: 3886},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 135, col: 1, offset: 4047},
			expr: &actionExpr{
				pos: position{line: 135, col: 21, offset: 4067},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 135, col: 21, offset: 4067},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 135, col: 21, offset: 4067},
							expr: &ruleRefExpr{
								pos:  position{line: 135, col: 21, offset: 4067},
								name: "WS",
							},
						},
						&notExpr{
							pos: position{line: 135, col: 25, offset: 4071},
							expr: &litMatcher{
								pos:        position{line: 135, col: 26, offset: 4072},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 135, col: 30, offset: 4076},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 136, col: 9, offset: 4095},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 136, col: 10, offset: 4096},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 136, col: 10, offset: 4096},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 136, col: 10, offset: 4096},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 136, col: 21, offset: 4107},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 136, col: 45, offset: 4131},
													expr: &litMatcher{
														pos:        position{line: 136, col: 45, offset: 4131},
														val:        ",",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 136, col: 50, offset: 4136},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 136, col: 58, offset: 4144},
														expr: &ruleRefExpr{
															pos:  position{line: 136, col: 59, offset: 4145},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 136, col: 82, offset: 4168},
													expr: &litMatcher{
														pos:        position{line: 136, col: 82, offset: 4168},
														val:        ":",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 136, col: 87, offset: 4173},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 136, col: 97, offset: 4183},
														expr: &ruleRefExpr{
															pos:  position{line: 136, col: 98, offset: 4184},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 138, col: 15, offset: 4301},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 138, col: 15, offset: 4301},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 138, col: 15, offset: 4301},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 138, col: 24, offset: 4310},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 138, col: 46, offset: 4332},
													expr: &litMatcher{
														pos:        position{line: 138, col: 46, offset: 4332},
														val:        ":",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 138, col: 51, offset: 4337},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 138, col: 61, offset: 4347},
														expr: &ruleRefExpr{
															pos:  position{line: 138, col: 62, offset: 4348},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 140, col: 13, offset: 4457},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 145, col: 1, offset: 4587},
			expr: &choiceExpr{
				pos: position{line: 145, col: 27, offset: 4613},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 145, col: 27, offset: 4613},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 145, col: 27, offset: 4613},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 145, col: 27, offset: 4613},
									val:        "v",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 145, col: 32, offset: 4618},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 145, col: 39, offset: 4625},
									expr: &choiceExpr{
										pos: position{line: 145, col: 40, offset: 4626},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 145, col: 40, offset: 4626},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 145, col: 52, offset: 4638},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 145, col: 62, offset: 4648},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 145, col: 62, offset: 4648},
														expr: &ruleRefExpr{
															pos:  position{line: 145, col: 63, offset: 4649},
															name: "EOL",
														},
													},
													&notExpr{
														pos: position{line: 145, col: 67, offset: 4653},
														expr: &litMatcher{
															pos:        position{line: 145, col: 68, offset: 4654},
															val:        ",",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 145, col: 72, offset: 4658},
														expr: &litMatcher{
															pos:        position{line: 145, col: 73, offset: 4659},
															val:        ":",
															ignoreCase: false,
														},
													},
													&anyMatcher{
														line: 145, col: 78, offset: 4664,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 147, col: 5, offset: 4706},
						run: (*parser).callonDocumentRevisionNumber18,
						expr: &seqExpr{
							pos: position{line: 147, col: 5, offset: 4706},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 147, col: 5, offset: 4706},
									expr: &litMatcher{
										pos:        position{line: 147, col: 5, offset: 4706},
										val:        "v",
										ignoreCase: true,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 147, col: 11, offset: 4712},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 147, col: 18, offset: 4719},
									expr: &choiceExpr{
										pos: position{line: 147, col: 19, offset: 4720},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 147, col: 19, offset: 4720},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 147, col: 31, offset: 4732},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 147, col: 41, offset: 4742},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 147, col: 41, offset: 4742},
														expr: &ruleRefExpr{
															pos:  position{line: 147, col: 42, offset: 4743},
															name: "EOL",
														},
													},
													&notExpr{
														pos: position{line: 147, col: 46, offset: 4747},
														expr: &litMatcher{
															pos:        position{line: 147, col: 47, offset: 4748},
															val:        ",",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 147, col: 51, offset: 4752},
														expr: &litMatcher{
															pos:        position{line: 147, col: 52, offset: 4753},
															val:        ":",
															ignoreCase: false,
														},
													},
													&anyMatcher{
														line: 147, col: 57, offset: 4758,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 147, col: 62, offset: 4763},
									expr: &ruleRefExpr{
										pos:  position{line: 147, col: 62, offset: 4763},
										name: "WS",
									},
								},
								&andExpr{
									pos: position{line: 147, col: 66, offset: 4767},
									expr: &litMatcher{
										pos:        position{line: 147, col: 67, offset: 4768},
										val:        ",",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 151, col: 1, offset: 4808},
			expr: &actionExpr{
				pos: position{line: 151, col: 25, offset: 4832},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 151, col: 25, offset: 4832},
					expr: &choiceExpr{
						pos: position{line: 151, col: 26, offset: 4833},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 151, col: 26, offset: 4833},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 151, col: 38, offset: 4845},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 151, col: 48, offset: 4855},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 151, col: 48, offset: 4855},
										expr: &ruleRefExpr{
											pos:  position{line: 151, col: 49, offset: 4856},
											name: "EOL",
										},
									},
									&notExpr{
										pos: position{line: 151, col: 53, offset: 4860},
										expr: &litMatcher{
											pos:        position{line: 151, col: 54, offset: 4861},
											val:        ":",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 151, col: 59, offset: 4866,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 155, col: 1, offset: 4907},
			expr: &actionExpr{
				pos: position{line: 155, col: 27, offset: 4933},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 155, col: 27, offset: 4933},
					expr: &choiceExpr{
						pos: position{line: 155, col: 28, offset: 4934},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 155, col: 28, offset: 4934},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 155, col: 40, offset: 4946},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 155, col: 50, offset: 4956},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 155, col: 50, offset: 4956},
										expr: &ruleRefExpr{
											pos:  position{line: 155, col: 51, offset: 4957},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 155, col: 56, offset: 4962,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeDeclaration",
			pos:  position{line: 162, col: 1, offset: 5118},
			expr: &actionExpr{
				pos: position{line: 162, col: 33, offset: 5150},
				run: (*parser).callonDocumentAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 162, col: 33, offset: 5150},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 162, col: 33, offset: 5150},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 162, col: 37, offset: 5154},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 162, col: 43, offset: 5160},
								name: "DocumentAttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 162, col: 66, offset: 5183},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 162, col: 70, offset: 5187},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 162, col: 76, offset: 5193},
								expr: &actionExpr{
									pos: position{line: 162, col: 77, offset: 5194},
									run: (*parser).callonDocumentAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 162, col: 78, offset: 5195},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 162, col: 78, offset: 5195},
												expr: &ruleRefExpr{
													pos:  position{line: 162, col: 78, offset: 5195},
													name: "WS",
												},
											},
											&labeledExpr{
												pos:   position{line: 162, col: 82, offset: 5199},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 162, col: 89, offset: 5206},
													name: "DocumentAttributeValue",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 162, col: 138, offset: 5255},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeName",
			pos:  position{line: 169, col: 1, offset: 5504},
			expr: &actionExpr{
				pos: position{line: 169, col: 26, offset: 5529},
				run: (*parser).callonDocumentAttributeName1,
				expr: &seqExpr{
					pos: position{line: 169, col: 26, offset: 5529},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 169, col: 27, offset: 5530},
							alternatives: []interface{}{
								&charClassMatcher{
									pos:        position{line: 169, col: 27, offset: 5530},
									val:        "[A-Z]",
									ranges:     []rune{'A', 'Z'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 169, col: 35, offset: 5538},
									val:        "[a-z]",
									ranges:     []rune{'a', 'z'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 169, col: 43, offset: 5546},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 169, col: 51, offset: 5554},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 169, col: 56, offset: 5559},
							expr: &choiceExpr{
								pos: position{line: 169, col: 57, offset: 5560},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 169, col: 57, offset: 5560},
										val:        "[A-Z]",
										ranges:     []rune{'A', 'Z'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 169, col: 65, offset: 5568},
										val:        "[a-z]",
										ranges:     []rune{'a', 'z'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 169, col: 73, offset: 5576},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
									&litMatcher{
										pos:        position{line: 169, col: 81, offset: 5584},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeValue",
			pos:  position{line: 173, col: 1, offset: 5626},
			expr: &actionExpr{
				pos: position{line: 173, col: 27, offset: 5652},
				run: (*parser).callonDocumentAttributeValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 173, col: 27, offset: 5652},
					expr: &seqExpr{
						pos: position{line: 173, col: 28, offset: 5653},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 173, col: 28, offset: 5653},
								expr: &ruleRefExpr{
									pos:  position{line: 173, col: 29, offset: 5654},
									name: "NEWLINE",
								},
							},
							&anyMatcher{
								line: 173, col: 37, offset: 5662,
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeReset",
			pos:  position{line: 177, col: 1, offset: 5702},
			expr: &choiceExpr{
				pos: position{line: 177, col: 27, offset: 5728},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 177, col: 27, offset: 5728},
						run: (*parser).callonDocumentAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 177, col: 27, offset: 5728},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 177, col: 27, offset: 5728},
									val:        ":!",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 177, col: 32, offset: 5733},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 177, col: 38, offset: 5739},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 177, col: 61, offset: 5762},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 177, col: 65, offset: 5766},
									name: "EOLS",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 179, col: 5, offset: 5835},
						run: (*parser).callonDocumentAttributeReset9,
						expr: &seqExpr{
							pos: position{line: 179, col: 5, offset: 5835},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 179, col: 5, offset: 5835},
									val:        ":",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 179, col: 9, offset: 5839},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 179, col: 15, offset: 5845},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 179, col: 38, offset: 5868},
									val:        "!:",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 179, col: 43, offset: 5873},
									name: "EOLS",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeSubstitution",
			pos:  position{line: 183, col: 1, offset: 5941},
			expr: &actionExpr{
				pos: position{line: 183, col: 34, offset: 5974},
				run: (*parser).callonDocumentAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 183, col: 34, offset: 5974},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 183, col: 34, offset: 5974},
							val:        "{",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 183, col: 38, offset: 5978},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 183, col: 44, offset: 5984},
								name: "DocumentAttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 183, col: 67, offset: 6007},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ElementAttributes",
			pos:  position{line: 190, col: 1, offset: 6195},
			expr: &actionExpr{
				pos: position{line: 190, col: 22, offset: 6216},
				run: (*parser).callonElementAttributes1,
				expr: &labeledExpr{
					pos:   position{line: 190, col: 22, offset: 6216},
					label: "attrs",
					expr: &oneOrMoreExpr{
						pos: position{line: 190, col: 28, offset: 6222},
						expr: &ruleRefExpr{
							pos:  position{line: 190, col: 29, offset: 6223},
							name: "ElementAttribute",
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 194, col: 1, offset: 6313},
			expr: &actionExpr{
				pos: position{line: 194, col: 21, offset: 6333},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 194, col: 21, offset: 6333},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 194, col: 21, offset: 6333},
							expr: &choiceExpr{
								pos: position{line: 194, col: 23, offset: 6335},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 194, col: 23, offset: 6335},
										val:        "[",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 194, col: 29, offset: 6341},
										val:        ".",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 194, col: 35, offset: 6347},
										val:        "#",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 195, col: 5, offset: 6423},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 195, col: 11, offset: 6429},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 195, col: 11, offset: 6429},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 196, col: 9, offset: 6450},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 197, col: 9, offset: 6474},
										name: "ElementRole",
									},
									&ruleRefExpr{
										pos:  position{line: 198, col: 9, offset: 6497},
										name: "LiteralAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 199, col: 9, offset: 6525},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 200, col: 9, offset: 6553},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 201, col: 9, offset: 6580},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 202, col: 9, offset: 6607},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 203, col: 9, offset: 6644},
										name: "HorizontalLayout",
									},
									&ruleRefExpr{
										pos:  position{line: 204, col: 9, offset: 6672},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MasqueradeAttribute",
			pos:  position{line: 209, col: 1, offset: 6855},
			expr: &choiceExpr{
				pos: position{line: 209, col: 24, offset: 6878},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 209, col: 24, offset: 6878},
						name: "QuoteAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 209, col: 42, offset: 6896},
						name: "VerseAttributes",
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 211, col: 1, offset: 6913},
			expr: &choiceExpr{
				pos: position{line: 211, col: 14, offset: 6926},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 211, col: 14, offset: 6926},
						run: (*parser).callonElementID2,
						expr: &seqExpr{
							pos: position{line: 211, col: 14, offset: 6926},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 211, col: 14, offset: 6926},
									val:        "[[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 211, col: 19, offset: 6931},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 211, col: 23, offset: 6935},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 211, col: 27, offset: 6939},
									val:        "]]",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 211, col: 32, offset: 6944},
									name: "EOLS",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 213, col: 5, offset: 6998},
						run: (*parser).callonElementID9,
						expr: &seqExpr{
							pos: position{line: 213, col: 5, offset: 6998},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 213, col: 5, offset: 6998},
									val:        "[#",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 213, col: 10, offset: 7003},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 213, col: 14, offset: 7007},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 213, col: 18, offset: 7011},
									val:        "]",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 213, col: 23, offset: 7016},
									name: "EOLS",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 217, col: 1, offset: 7069},
			expr: &actionExpr{
				pos: position{line: 217, col: 20, offset: 7088},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 217, col: 20, offset: 7088},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 217, col: 20, offset: 7088},
							val:        "[[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 217, col: 25, offset: 7093},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 217, col: 29, offset: 7097},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 217, col: 33, offset: 7101},
							val:        "]]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 217, col: 38, offset: 7106},
							expr: &ruleRefExpr{
								pos:  position{line: 217, col: 38, offset: 7106},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 223, col: 1, offset: 7380},
			expr: &actionExpr{
				pos: position{line: 223, col: 17, offset: 7396},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 223, col: 17, offset: 7396},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 223, col: 17, offset: 7396},
							val:        ".",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 223, col: 21, offset: 7400},
							label: "title",
							expr: &actionExpr{
								pos: position{line: 223, col: 28, offset: 7407},
								run: (*parser).callonElementTitle5,
								expr: &seqExpr{
									pos: position{line: 223, col: 28, offset: 7407},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 223, col: 28, offset: 7407},
											name: "Alphanums",
										},
										&zeroOrMoreExpr{
											pos: position{line: 223, col: 38, offset: 7417},
											expr: &choiceExpr{
												pos: position{line: 223, col: 39, offset: 7418},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 223, col: 39, offset: 7418},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 223, col: 51, offset: 7430},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 223, col: 61, offset: 7440},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 223, col: 61, offset: 7440},
																expr: &ruleRefExpr{
																	pos:  position{line: 223, col: 62, offset: 7441},
																	name: "NEWLINE",
																},
															},
															&anyMatcher{
																line: 223, col: 70, offset: 7449,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 225, col: 4, offset: 7490},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementRole",
			pos:  position{line: 231, col: 1, offset: 7642},
			expr: &actionExpr{
				pos: position{line: 231, col: 16, offset: 7657},
				run: (*parser).callonElementRole1,
				expr: &seqExpr{
					pos: position{line: 231, col: 16, offset: 7657},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 231, col: 16, offset: 7657},
							val:        "[.",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 231, col: 21, offset: 7662},
							label: "role",
							expr: &actionExpr{
								pos: position{line: 231, col: 27, offset: 7668},
								run: (*parser).callonElementRole5,
								expr: &seqExpr{
									pos: position{line: 231, col: 27, offset: 7668},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 231, col: 27, offset: 7668},
											name: "Alphanums",
										},
										&zeroOrMoreExpr{
											pos: position{line: 231, col: 37, offset: 7678},
											expr: &choiceExpr{
												pos: position{line: 231, col: 38, offset: 7679},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 231, col: 38, offset: 7679},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 231, col: 50, offset: 7691},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 231, col: 60, offset: 7701},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 231, col: 60, offset: 7701},
																expr: &ruleRefExpr{
																	pos:  position{line: 231, col: 61, offset: 7702},
																	name: "NEWLINE",
																},
															},
															&notExpr{
																pos: position{line: 231, col: 69, offset: 7710},
																expr: &litMatcher{
																	pos:        position{line: 231, col: 70, offset: 7711},
																	val:        "]",
																	ignoreCase: false,
																},
															},
															&anyMatcher{
																line: 231, col: 74, offset: 7715,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 233, col: 4, offset: 7756},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 233, col: 8, offset: 7760},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "LiteralAttribute",
			pos:  position{line: 237, col: 1, offset: 7817},
			expr: &actionExpr{
				pos: position{line: 237, col: 21, offset: 7837},
				run: (*parser).callonLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 237, col: 21, offset: 7837},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 237, col: 21, offset: 7837},
							val:        "[literal]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 237, col: 33, offset: 7849},
							expr: &ruleRefExpr{
								pos:  position{line: 237, col: 33, offset: 7849},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 237, col: 37, offset: 7853},
							name: "NEWLINE",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 242, col: 1, offset: 7985},
			expr: &actionExpr{
				pos: position{line: 242, col: 30, offset: 8014},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 242, col: 30, offset: 8014},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 242, col: 30, offset: 8014},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 242, col: 34, offset: 8018},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 242, col: 37, offset: 8021},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 242, col: 53, offset: 8037},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 242, col: 57, offset: 8041},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 247, col: 1, offset: 8197},
			expr: &actionExpr{
				pos: position{line: 247, col: 21, offset: 8217},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 247, col: 21, offset: 8217},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 247, col: 21, offset: 8217},
							val:        "[source",
							ignoreCase: false,
						},
						&zeroOrOneExpr{
							pos: position{line: 247, col: 31, offset: 8227},
							expr: &litMatcher{
								pos:        position{line: 247, col: 31, offset: 8227},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 247, col: 36, offset: 8232},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 247, col: 45, offset: 8241},
								expr: &actionExpr{
									pos: position{line: 247, col: 46, offset: 8242},
									run: (*parser).callonSourceAttributes8,
									expr: &oneOrMoreExpr{
										pos: position{line: 247, col: 46, offset: 8242},
										expr: &choiceExpr{
											pos: position{line: 247, col: 47, offset: 8243},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 247, col: 47, offset: 8243},
													name: "Alphanums",
												},
												&ruleRefExpr{
													pos:  position{line: 247, col: 59, offset: 8255},
													name: "Spaces",
												},
												&seqExpr{
													pos: position{line: 247, col: 69, offset: 8265},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 247, col: 69, offset: 8265},
															expr: &ruleRefExpr{
																pos:  position{line: 247, col: 70, offset: 8266},
																name: "NEWLINE",
															},
														},
														&notExpr{
															pos: position{line: 247, col: 78, offset: 8274},
															expr: &litMatcher{
																pos:        position{line: 247, col: 79, offset: 8275},
																val:        "]",
																ignoreCase: false,
															},
														},
														&anyMatcher{
															line: 247, col: 83, offset: 8279,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 249, col: 9, offset: 8329},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 249, col: 13, offset: 8333},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 254, col: 1, offset: 8458},
			expr: &actionExpr{
				pos: position{line: 254, col: 19, offset: 8476},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 254, col: 19, offset: 8476},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 254, col: 19, offset: 8476},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 254, col: 23, offset: 8480},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 254, col: 34, offset: 8491},
								expr: &ruleRefExpr{
									pos:  position{line: 254, col: 35, offset: 8492},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 254, col: 54, offset: 8511},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 254, col: 58, offset: 8515},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 258, col: 1, offset: 8588},
			expr: &choiceExpr{
				pos: position{line: 259, col: 5, offset: 8613},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 259, col: 5, offset: 8613},
						run: (*parser).callonGenericAttribute2,
						expr: &seqExpr{
							pos: position{line: 259, col: 5, offset: 8613},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 259, col: 5, offset: 8613},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 259, col: 10, offset: 8618},
										name: "AttributeKey",
									},
								},
								&litMatcher{
									pos:        position{line: 259, col: 24, offset: 8632},
									val:        "=",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 259, col: 28, offset: 8636},
									label: "value",
									expr: &zeroOrOneExpr{
										pos: position{line: 259, col: 34, offset: 8642},
										expr: &ruleRefExpr{
											pos:  position{line: 259, col: 35, offset: 8643},
											name: "AttributeValue",
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 259, col: 52, offset: 8660},
									expr: &litMatcher{
										pos:        position{line: 259, col: 52, offset: 8660},
										val:        ",",
										ignoreCase: false,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 259, col: 57, offset: 8665},
									expr: &ruleRefExpr{
										pos:  position{line: 259, col: 57, offset: 8665},
										name: "WS",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 261, col: 9, offset: 8770},
						run: (*parser).callonGenericAttribute14,
						expr: &seqExpr{
							pos: position{line: 261, col: 9, offset: 8770},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 261, col: 9, offset: 8770},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 261, col: 14, offset: 8775},
										name: "AttributeKey",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 261, col: 28, offset: 8789},
									expr: &litMatcher{
										pos:        position{line: 261, col: 28, offset: 8789},
										val:        ",",
										ignoreCase: false,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 261, col: 33, offset: 8794},
									expr: &ruleRefExpr{
										pos:  position{line: 261, col: 33, offset: 8794},
										name: "WS",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 265, col: 1, offset: 8887},
			expr: &actionExpr{
				pos: position{line: 265, col: 17, offset: 8903},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 265, col: 17, offset: 8903},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 265, col: 17, offset: 8903},
							expr: &litMatcher{
								pos:        position{line: 265, col: 18, offset: 8904},
								val:        "quote",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 265, col: 26, offset: 8912},
							expr: &litMatcher{
								pos:        position{line: 265, col: 27, offset: 8913},
								val:        "verse",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 265, col: 35, offset: 8921},
							expr: &litMatcher{
								pos:        position{line: 265, col: 36, offset: 8922},
								val:        "literal",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 265, col: 46, offset: 8932},
							expr: &ruleRefExpr{
								pos:  position{line: 265, col: 47, offset: 8933},
								name: "Spaces",
							},
						},
						&labeledExpr{
							pos:   position{line: 265, col: 54, offset: 8940},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 265, col: 58, offset: 8944},
								expr: &choiceExpr{
									pos: position{line: 265, col: 59, offset: 8945},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 265, col: 59, offset: 8945},
											name: "Alphanums",
										},
										&ruleRefExpr{
											pos:  position{line: 265, col: 71, offset: 8957},
											name: "OtherAttributeChar",
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 265, col: 92, offset: 8978},
							expr: &ruleRefExpr{
								pos:  position{line: 265, col: 92, offset: 8978},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 269, col: 1, offset: 9018},
			expr: &actionExpr{
				pos: position{line: 269, col: 19, offset: 9036},
				run: (*parser).callonAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 269, col: 19, offset: 9036},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 269, col: 19, offset: 9036},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 269, col: 25, offset: 9042},
								expr: &choiceExpr{
									pos: position{line: 269, col: 26, offset: 9043},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 269, col: 26, offset: 9043},
											name: "Alphanums",
										},
										&ruleRefExpr{
											pos:  position{line: 269, col: 38, offset: 9055},
											name: "Spaces",
										},
										&ruleRefExpr{
											pos:  position{line: 269, col: 47, offset: 9064},
											name: "OtherAttributeChar",
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 269, col: 68, offset: 9085},
							expr: &litMatcher{
								pos:        position{line: 269, col: 69, offset: 9086},
								val:        "=",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "OtherAttributeChar",
			pos:  position{line: 273, col: 1, offset: 9241},
			expr: &seqExpr{
				pos: position{line: 273, col: 24, offset: 9264},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 273, col: 24, offset: 9264},
						expr: &litMatcher{
							pos:        position{line: 273, col: 25, offset: 9265},
							val:        "=",
							ignoreCase: false,
						},
					},
					&notExpr{
						pos: position{line: 273, col: 29, offset: 9269},
						expr: &litMatcher{
							pos:        position{line: 273, col: 30, offset: 9270},
							val:        ",",
							ignoreCase: false,
						},
					},
					&notExpr{
						pos: position{line: 273, col: 34, offset: 9274},
						expr: &litMatcher{
							pos:        position{line: 273, col: 35, offset: 9275},
							val:        "]",
							ignoreCase: false,
						},
					},
					&anyMatcher{
						line: 273, col: 39, offset: 9279,
					},
				},
			},
		},
		{
			name: "HorizontalLayout",
			pos:  position{line: 275, col: 1, offset: 9283},
			expr: &actionExpr{
				pos: position{line: 275, col: 21, offset: 9303},
				run: (*parser).callonHorizontalLayout1,
				expr: &seqExpr{
					pos: position{line: 275, col: 21, offset: 9303},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 275, col: 21, offset: 9303},
							val:        "[horizontal]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 275, col: 36, offset: 9318},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 279, col: 1, offset: 9392},
			expr: &actionExpr{
				pos: position{line: 279, col: 20, offset: 9411},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 279, col: 20, offset: 9411},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 279, col: 20, offset: 9411},
							val:        "[quote",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 279, col: 29, offset: 9420},
							expr: &ruleRefExpr{
								pos:  position{line: 279, col: 29, offset: 9420},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 279, col: 33, offset: 9424},
							expr: &litMatcher{
								pos:        position{line: 279, col: 33, offset: 9424},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 279, col: 38, offset: 9429},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 279, col: 45, offset: 9436},
								expr: &ruleRefExpr{
									pos:  position{line: 279, col: 46, offset: 9437},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 279, col: 63, offset: 9454},
							expr: &litMatcher{
								pos:        position{line: 279, col: 63, offset: 9454},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 279, col: 68, offset: 9459},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 279, col: 74, offset: 9465},
								expr: &ruleRefExpr{
									pos:  position{line: 279, col: 75, offset: 9466},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 279, col: 92, offset: 9483},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 279, col: 96, offset: 9487},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 283, col: 1, offset: 9557},
			expr: &actionExpr{
				pos: position{line: 283, col: 20, offset: 9576},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 283, col: 20, offset: 9576},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 283, col: 20, offset: 9576},
							val:        "[verse",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 283, col: 29, offset: 9585},
							expr: &ruleRefExpr{
								pos:  position{line: 283, col: 29, offset: 9585},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 283, col: 33, offset: 9589},
							expr: &litMatcher{
								pos:        position{line: 283, col: 33, offset: 9589},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 283, col: 38, offset: 9594},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 283, col: 45, offset: 9601},
								expr: &ruleRefExpr{
									pos:  position{line: 283, col: 46, offset: 9602},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 283, col: 63, offset: 9619},
							expr: &litMatcher{
								pos:        position{line: 283, col: 63, offset: 9619},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 283, col: 68, offset: 9624},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 283, col: 74, offset: 9630},
								expr: &ruleRefExpr{
									pos:  position{line: 283, col: 75, offset: 9631},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 283, col: 92, offset: 9648},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 283, col: 96, offset: 9652},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 287, col: 1, offset: 9740},
			expr: &actionExpr{
				pos: position{line: 287, col: 19, offset: 9758},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 287, col: 19, offset: 9758},
					expr: &choiceExpr{
						pos: position{line: 287, col: 20, offset: 9759},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 287, col: 20, offset: 9759},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 287, col: 32, offset: 9771},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 287, col: 42, offset: 9781},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 287, col: 42, offset: 9781},
										expr: &litMatcher{
											pos:        position{line: 287, col: 43, offset: 9782},
											val:        ",",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 287, col: 47, offset: 9786},
										expr: &litMatcher{
											pos:        position{line: 287, col: 48, offset: 9787},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 287, col: 52, offset: 9791},
										expr: &ruleRefExpr{
											pos:  position{line: 287, col: 53, offset: 9792},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 287, col: 57, offset: 9796,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 291, col: 1, offset: 9837},
			expr: &actionExpr{
				pos: position{line: 291, col: 21, offset: 9857},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 291, col: 21, offset: 9857},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 291, col: 21, offset: 9857},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 291, col: 25, offset: 9861},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 291, col: 31, offset: 9867},
								expr: &ruleRefExpr{
									pos:  position{line: 291, col: 32, offset: 9868},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 291, col: 51, offset: 9887},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 298, col: 1, offset: 10061},
			expr: &actionExpr{
				pos: position{line: 298, col: 12, offset: 10072},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 298, col: 12, offset: 10072},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 298, col: 12, offset: 10072},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 298, col: 23, offset: 10083},
								expr: &ruleRefExpr{
									pos:  position{line: 298, col: 24, offset: 10084},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 299, col: 5, offset: 10108},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 299, col: 12, offset: 10115},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 299, col: 12, offset: 10115},
									expr: &litMatcher{
										pos:        position{line: 299, col: 13, offset: 10116},
										val:        "=",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 303, col: 5, offset: 10207},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 307, col: 5, offset: 10359},
							expr: &ruleRefExpr{
								pos:  position{line: 307, col: 5, offset: 10359},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 307, col: 9, offset: 10363},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 307, col: 16, offset: 10370},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 307, col: 31, offset: 10385},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 307, col: 35, offset: 10389},
								expr: &ruleRefExpr{
									pos:  position{line: 307, col: 35, offset: 10389},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 307, col: 53, offset: 10407},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 311, col: 1, offset: 10513},
			expr: &actionExpr{
				pos: position{line: 311, col: 18, offset: 10530},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 311, col: 18, offset: 10530},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 311, col: 27, offset: 10539},
						expr: &seqExpr{
							pos: position{line: 311, col: 28, offset: 10540},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 311, col: 28, offset: 10540},
									expr: &ruleRefExpr{
										pos:  position{line: 311, col: 29, offset: 10541},
										name: "NEWLINE",
									},
								},
								&notExpr{
									pos: position{line: 311, col: 37, offset: 10549},
									expr: &ruleRefExpr{
										pos:  position{line: 311, col: 38, offset: 10550},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 311, col: 54, offset: 10566},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 315, col: 1, offset: 10687},
			expr: &actionExpr{
				pos: position{line: 315, col: 17, offset: 10703},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 315, col: 17, offset: 10703},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 315, col: 26, offset: 10712},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 315, col: 26, offset: 10712},
								name: "SimpleWord",
							},
							&ruleRefExpr{
								pos:  position{line: 316, col: 11, offset: 10733},
								name: "Spaces",
							},
							&ruleRefExpr{
								pos:  position{line: 317, col: 11, offset: 10751},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 318, col: 11, offset: 10776},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 319, col: 11, offset: 10798},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 320, col: 11, offset: 10821},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 321, col: 11, offset: 10836},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 322, col: 11, offset: 10861},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 323, col: 11, offset: 10882},
								name: "DocumentAttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 324, col: 11, offset: 10922},
								name: "LineBreak",
							},
							&ruleRefExpr{
								pos:  position{line: 325, col: 11, offset: 10942},
								name: "OtherWord",
							},
							&ruleRefExpr{
								pos:  position{line: 326, col: 11, offset: 10962},
								name: "Parenthesis",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsMacro",
			pos:  position{line: 333, col: 1, offset: 11117},
			expr: &seqExpr{
				pos: position{line: 333, col: 25, offset: 11141},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 333, col: 25, offset: 11141},
						val:        "toc::[]",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 333, col: 35, offset: 11151},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 338, col: 1, offset: 11262},
			expr: &actionExpr{
				pos: position{line: 338, col: 19, offset: 11280},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 338, col: 19, offset: 11280},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 338, col: 19, offset: 11280},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 338, col: 25, offset: 11286},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 338, col: 40, offset: 11301},
							val:        "::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 338, col: 45, offset: 11306},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 338, col: 52, offset: 11313},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 338, col: 68, offset: 11329},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 338, col: 75, offset: 11336},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 342, col: 1, offset: 11477},
			expr: &actionExpr{
				pos: position{line: 342, col: 20, offset: 11496},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 342, col: 20, offset: 11496},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 342, col: 20, offset: 11496},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 342, col: 26, offset: 11502},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 342, col: 41, offset: 11517},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 342, col: 45, offset: 11521},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 342, col: 52, offset: 11528},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 342, col: 68, offset: 11544},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 342, col: 75, offset: 11551},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 346, col: 1, offset: 11693},
			expr: &actionExpr{
				pos: position{line: 346, col: 18, offset: 11710},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 346, col: 18, offset: 11710},
					expr: &choiceExpr{
						pos: position{line: 346, col: 19, offset: 11711},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 346, col: 19, offset: 11711},
								val:        "[a-zA-Z0-9]",
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
							&litMatcher{
								pos:        position{line: 346, col: 33, offset: 11725},
								val:        "_",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 346, col: 39, offset: 11731},
								val:        "-",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 350, col: 1, offset: 11773},
			expr: &actionExpr{
				pos: position{line: 350, col: 19, offset: 11791},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 350, col: 19, offset: 11791},
					expr: &choiceExpr{
						pos: position{line: 350, col: 20, offset: 11792},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 350, col: 20, offset: 11792},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 350, col: 33, offset: 11805},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 350, col: 33, offset: 11805},
										expr: &ruleRefExpr{
											pos:  position{line: 350, col: 34, offset: 11806},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 350, col: 37, offset: 11809},
										expr: &litMatcher{
											pos:        position{line: 350, col: 38, offset: 11810},
											val:        ":",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 350, col: 42, offset: 11814},
										expr: &litMatcher{
											pos:        position{line: 350, col: 43, offset: 11815},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 350, col: 47, offset: 11819},
										expr: &ruleRefExpr{
											pos:  position{line: 350, col: 48, offset: 11820},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 350, col: 52, offset: 11824,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 354, col: 1, offset: 11865},
			expr: &actionExpr{
				pos: position{line: 354, col: 24, offset: 11888},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 354, col: 24, offset: 11888},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 354, col: 24, offset: 11888},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 354, col: 28, offset: 11892},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 354, col: 34, offset: 11898},
								expr: &ruleRefExpr{
									pos:  position{line: 354, col: 35, offset: 11899},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 354, col: 54, offset: 11918},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 361, col: 1, offset: 12098},
			expr: &actionExpr{
				pos: position{line: 361, col: 18, offset: 12115},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 361, col: 18, offset: 12115},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 361, col: 18, offset: 12115},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 361, col: 24, offset: 12121},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 361, col: 24, offset: 12121},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 361, col: 24, offset: 12121},
											val:        "include::",
											ignoreCase: false,
										},
										&labeledExpr{
											pos:   position{line: 361, col: 36, offset: 12133},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 361, col: 42, offset: 12139},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 361, col: 56, offset: 12153},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 361, col: 74, offset: 12171},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 363, col: 8, offset: 12325},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 367, col: 1, offset: 12378},
			expr: &actionExpr{
				pos: position{line: 367, col: 26, offset: 12403},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 367, col: 26, offset: 12403},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 367, col: 26, offset: 12403},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 367, col: 30, offset: 12407},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 367, col: 36, offset: 12413},
								expr: &choiceExpr{
									pos: position{line: 367, col: 37, offset: 12414},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 367, col: 37, offset: 12414},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 367, col: 59, offset: 12436},
											name: "TagRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 367, col: 80, offset: 12457},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 367, col: 99, offset: 12476},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 371, col: 1, offset: 12546},
			expr: &actionExpr{
				pos: position{line: 371, col: 24, offset: 12569},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 371, col: 24, offset: 12569},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 371, col: 24, offset: 12569},
							val:        "lines=",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 371, col: 33, offset: 12578},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 371, col: 40, offset: 12585},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 371, col: 66, offset: 12611},
							expr: &litMatcher{
								pos:        position{line: 371, col: 66, offset: 12611},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 375, col: 1, offset: 12670},
			expr: &actionExpr{
				pos: position{line: 375, col: 29, offset: 12698},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 375, col: 29, offset: 12698},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 375, col: 29, offset: 12698},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 375, col: 36, offset: 12705},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 375, col: 36, offset: 12705},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 376, col: 11, offset: 12822},
										name: "MultipleQuotedLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 377, col: 11, offset: 12858},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 378, col: 11, offset: 12884},
										name: "MultiLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 379, col: 11, offset: 12916},
										name: "SingleLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 380, col: 11, offset: 12948},
										name: "SingleLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 381, col: 11, offset: 12975},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 381, col: 31, offset: 12995},
							expr: &ruleRefExpr{
								pos:  position{line: 381, col: 31, offset: 12995},
								name: "WS",
							},
						},
						&choiceExpr{
							pos: position{line: 381, col: 36, offset: 13000},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 381, col: 36, offset: 13000},
									expr: &litMatcher{
										pos:        position{line: 381, col: 37, offset: 13001},
										val:        ",",
										ignoreCase: false,
									},
								},
								&andExpr{
									pos: position{line: 381, col: 43, offset: 13007},
									expr: &litMatcher{
										pos:        position{line: 381, col: 44, offset: 13008},
										val:        "]",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 385, col: 1, offset: 13040},
			expr: &actionExpr{
				pos: position{line: 385, col: 23, offset: 13062},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 385, col: 23, offset: 13062},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 385, col: 23, offset: 13062},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 385, col: 30, offset: 13069},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 385, col: 30, offset: 13069},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 385, col: 47, offset: 13086},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 386, col: 5, offset: 13108},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 386, col: 12, offset: 13115},
								expr: &actionExpr{
									pos: position{line: 386, col: 13, offset: 13116},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 386, col: 13, offset: 13116},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 386, col: 13, offset: 13116},
												val:        ";",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 386, col: 17, offset: 13120},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 386, col: 24, offset: 13127},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 386, col: 24, offset: 13127},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 386, col: 41, offset: 13144},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedLineRanges",
			pos:  position{line: 392, col: 1, offset: 13282},
			expr: &actionExpr{
				pos: position{line: 392, col: 29, offset: 13310},
				run: (*parser).callonMultipleQuotedLineRanges1,
				expr: &seqExpr{
					pos: position{line: 392, col: 29, offset: 13310},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 392, col: 29, offset: 13310},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 392, col: 34, offset: 13315},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 392, col: 41, offset: 13322},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 392, col: 41, offset: 13322},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 392, col: 58, offset: 13339},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 393, col: 5, offset: 13361},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 393, col: 12, offset: 13368},
								expr: &actionExpr{
									pos: position{line: 393, col: 13, offset: 13369},
									run: (*parser).callonMultipleQuotedLineRanges10,
									expr: &seqExpr{
										pos: position{line: 393, col: 13, offset: 13369},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 393, col: 13, offset: 13369},
												val:        ",",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 393, col: 17, offset: 13373},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 393, col: 24, offset: 13380},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 393, col: 24, offset: 13380},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 393, col: 41, offset: 13397},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 395, col: 9, offset: 13450},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 399, col: 1, offset: 13540},
			expr: &actionExpr{
				pos: position{line: 399, col: 19, offset: 13558},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 399, col: 19, offset: 13558},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 399, col: 19, offset: 13558},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 399, col: 26, offset: 13565},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 399, col: 34, offset: 13573},
							val:        "..",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 399, col: 39, offset: 13578},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 399, col: 44, offset: 13583},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineQuotedRange",
			pos:  position{line: 403, col: 1, offset: 13671},
			expr: &actionExpr{
				pos: position{line: 403, col: 25, offset: 13695},
				run: (*parser).callonMultiLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 403, col: 25, offset: 13695},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 403, col: 25, offset: 13695},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 403, col: 30, offset: 13700},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 403, col: 37, offset: 13707},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 403, col: 45, offset: 13715},
							val:        "..",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 403, col: 50, offset: 13720},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 403, col: 55, offset: 13725},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 403, col: 63, offset: 13733},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 407, col: 1, offset: 13818},
			expr: &actionExpr{
				pos: position{line: 407, col: 20, offset: 13837},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 407, col: 20, offset: 13837},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 407, col: 32, offset: 13849},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SingleLineQuotedRange",
			pos:  position{line: 411, col: 1, offset: 13944},
			expr: &actionExpr{
				pos: position{line: 411, col: 26, offset: 13969},
				run: (*parser).callonSingleLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 411, col: 26, offset: 13969},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 411, col: 26, offset: 13969},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 411, col: 31, offset: 13974},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 411, col: 43, offset: 13986},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 411, col: 51, offset: 13994},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 415, col: 1, offset: 14086},
			expr: &actionExpr{
				pos: position{line: 415, col: 23, offset: 14108},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 415, col: 23, offset: 14108},
					expr: &seqExpr{
						pos: position{line: 415, col: 24, offset: 14109},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 415, col: 24, offset: 14109},
								expr: &litMatcher{
									pos:        position{line: 415, col: 25, offset: 14110},
									val:        "]",
									ignoreCase: false,
								},
							},
							&notExpr{
								pos: position{line: 415, col: 29, offset: 14114},
								expr: &litMatcher{
									pos:        position{line: 415, col: 30, offset: 14115},
									val:        ",",
									ignoreCase: false,
								},
							},
							&notExpr{
								pos: position{line: 415, col: 34, offset: 14119},
								expr: &ruleRefExpr{
									pos:  position{line: 415, col: 35, offset: 14120},
									name: "WS",
								},
							},
							&anyMatcher{
								line: 415, col: 38, offset: 14123,
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttribute",
			pos:  position{line: 419, col: 1, offset: 14163},
			expr: &actionExpr{
				pos: position{line: 419, col: 23, offset: 14185},
				run: (*parser).callonTagRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 419, col: 23, offset: 14185},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 419, col: 24, offset: 14186},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 419, col: 24, offset: 14186},
									val:        "tags=",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 419, col: 34, offset: 14196},
									val:        "tag=",
									ignoreCase: false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 419, col: 42, offset: 14204},
							label: "tags",
							expr: &ruleRefExpr{
								pos:  position{line: 419, col: 48, offset: 14210},
								name: "TagRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 419, col: 73, offset: 14235},
							expr: &litMatcher{
								pos:        position{line: 419, col: 73, offset: 14235},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttributeValue",
			pos:  position{line: 423, col: 1, offset: 14384},
			expr: &actionExpr{
				pos: position{line: 423, col: 28, offset: 14411},
				run: (*parser).callonTagRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 423, col: 28, offset: 14411},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 423, col: 28, offset: 14411},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 423, col: 35, offset: 14418},
								name: "MultipleTagRanges",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 423, col: 54, offset: 14437},
							expr: &ruleRefExpr{
								pos:  position{line: 423, col: 54, offset: 14437},
								name: "WS",
							},
						},
						&choiceExpr{
							pos: position{line: 423, col: 59, offset: 14442},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 423, col: 59, offset: 14442},
									expr: &litMatcher{
										pos:        position{line: 423, col: 60, offset: 14443},
										val:        ",",
										ignoreCase: false,
									},
								},
								&andExpr{
									pos: position{line: 423, col: 66, offset: 14449},
									expr: &litMatcher{
										pos:        position{line: 423, col: 67, offset: 14450},
										val:        "]",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 427, col: 1, offset: 14482},
			expr: &actionExpr{
				pos: position{line: 427, col: 22, offset: 14503},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 427, col: 22, offset: 14503},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 427, col: 22, offset: 14503},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 427, col: 29, offset: 14510},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 428, col: 5, offset: 14524},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 428, col: 12, offset: 14531},
								expr: &actionExpr{
									pos: position{line: 428, col: 13, offset: 14532},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 428, col: 13, offset: 14532},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 428, col: 13, offset: 14532},
												val:        ";",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 428, col: 17, offset: 14536},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 428, col: 24, offset: 14543},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 434, col: 1, offset: 14674},
			expr: &choiceExpr{
				pos: position{line: 434, col: 13, offset: 14686},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 434, col: 13, offset: 14686},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 434, col: 13, offset: 14686},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 434, col: 18, offset: 14691},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 434, col: 18, offset: 14691},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 434, col: 30, offset: 14703},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 436, col: 5, offset: 14771},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 436, col: 5, offset: 14771},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 436, col: 5, offset: 14771},
									val:        "!",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 436, col: 9, offset: 14775},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 436, col: 14, offset: 14780},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 436, col: 14, offset: 14780},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 436, col: 26, offset: 14792},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 440, col: 1, offset: 14860},
			expr: &actionExpr{
				pos: position{line: 440, col: 16, offset: 14875},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 440, col: 16, offset: 14875},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 440, col: 16, offset: 14875},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 440, col: 23, offset: 14882},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 440, col: 23, offset: 14882},
									expr: &litMatcher{
										pos:        position{line: 440, col: 24, offset: 14883},
										val:        "*",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 443, col: 5, offset: 14937},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 453, col: 1, offset: 15231},
			expr: &actionExpr{
				pos: position{line: 453, col: 21, offset: 15251},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 453, col: 21, offset: 15251},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 453, col: 21, offset: 15251},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 453, col: 29, offset: 15259},
								expr: &choiceExpr{
									pos: position{line: 453, col: 30, offset: 15260},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 453, col: 30, offset: 15260},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 453, col: 53, offset: 15283},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 453, col: 74, offset: 15304},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 453, col: 74, offset: 15304,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 453, col: 107, offset: 15337},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 457, col: 1, offset: 15408},
			expr: &actionExpr{
				pos: position{line: 457, col: 25, offset: 15432},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 457, col: 25, offset: 15432},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 457, col: 25, offset: 15432},
							val:        "tag::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 457, col: 33, offset: 15440},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 457, col: 38, offset: 15445},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 457, col: 38, offset: 15445},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 457, col: 78, offset: 15485},
							val:        "[]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 461, col: 1, offset: 15550},
			expr: &actionExpr{
				pos: position{line: 461, col: 23, offset: 15572},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 461, col: 23, offset: 15572},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 461, col: 23, offset: 15572},
							val:        "end::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 461, col: 31, offset: 15580},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 461, col: 36, offset: 15585},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 461, col: 36, offset: 15585},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 461, col: 76, offset: 15625},
							val:        "[]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ListItems",
			pos:  position{line: 468, col: 1, offset: 15789},
			expr: &oneOrMoreExpr{
				pos: position{line: 468, col: 14, offset: 15802},
				expr: &ruleRefExpr{
					pos:  position{line: 468, col: 14, offset: 15802},
					name: "ListItem",
				},
			},
		},
		{
			name: "ListItem",
			pos:  position{line: 470, col: 1, offset: 15813},
			expr: &choiceExpr{
				pos: position{line: 470, col: 13, offset: 15825},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 470, col: 13, offset: 15825},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 470, col: 31, offset: 15843},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 470, col: 51, offset: 15863},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 470, col: 69, offset: 15881},
						name: "ContinuedListItemElement",
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 472, col: 1, offset: 15907},
			expr: &choiceExpr{
				pos: position{line: 472, col: 18, offset: 15924},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 472, col: 18, offset: 15924},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 472, col: 18, offset: 15924},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 472, col: 27, offset: 15933},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 474, col: 9, offset: 15990},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 474, col: 9, offset: 15990},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 474, col: 15, offset: 15996},
								expr: &ruleRefExpr{
									pos:  position{line: 474, col: 16, offset: 15997},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 478, col: 1, offset: 16089},
			expr: &actionExpr{
				pos: position{line: 478, col: 22, offset: 16110},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 478, col: 22, offset: 16110},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 478, col: 22, offset: 16110},
							expr: &ruleRefExpr{
								pos:  position{line: 478, col: 23, offset: 16111},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 479, col: 5, offset: 16119},
							expr: &ruleRefExpr{
								pos:  position{line: 479, col: 6, offset: 16120},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 480, col: 5, offset: 16135},
							expr: &ruleRefExpr{
								pos:  position{line: 480, col: 6, offset: 16136},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 481, col: 5, offset: 16158},
							expr: &ruleRefExpr{
								pos:  position{line: 481, col: 6, offset: 16159},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 482, col: 5, offset: 16185},
							expr: &ruleRefExpr{
								pos:  position{line: 482, col: 6, offset: 16186},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 483, col: 5, offset: 16214},
							expr: &seqExpr{
								pos: position{line: 483, col: 7, offset: 16216},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 483, col: 7, offset: 16216},
										name: "LabeledListItemTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 483, col: 27, offset: 16236},
										name: "LabeledListItemSeparator",
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 484, col: 5, offset: 16267},
							expr: &ruleRefExpr{
								pos:  position{line: 484, col: 6, offset: 16268},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 485, col: 5, offset: 16293},
							expr: &ruleRefExpr{
								pos:  position{line: 485, col: 6, offset: 16294},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 486, col: 5, offset: 16315},
							expr: &ruleRefExpr{
								pos:  position{line: 486, col: 6, offset: 16316},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 487, col: 5, offset: 16335},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 488, col: 9, offset: 16350},
								run: (*parser).callonListParagraphLine24,
								expr: &seqExpr{
									pos: position{line: 488, col: 9, offset: 16350},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 488, col: 9, offset: 16350},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 488, col: 18, offset: 16359},
												expr: &ruleRefExpr{
													pos:  position{line: 488, col: 19, offset: 16360},
													name: "InlineElement",
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 488, col: 35, offset: 16376},
											label: "linebreak",
											expr: &zeroOrOneExpr{
												pos: position{line: 488, col: 45, offset: 16386},
												expr: &ruleRefExpr{
													pos:  position{line: 488, col: 46, offset: 16387},
													name: "LineBreak",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 490, col: 12, offset: 16539},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 494, col: 1, offset: 16586},
			expr: &seqExpr{
				pos: position{line: 494, col: 25, offset: 16610},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 494, col: 25, offset: 16610},
						val:        "+",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 494, col: 29, offset: 16614},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 496, col: 1, offset: 16621},
			expr: &actionExpr{
				pos: position{line: 496, col: 29, offset: 16649},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 496, col: 29, offset: 16649},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 496, col: 29, offset: 16649},
							label: "blanklines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 496, col: 41, offset: 16661},
								expr: &ruleRefExpr{
									pos:  position{line: 496, col: 41, offset: 16661},
									name: "BlankLine",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 496, col: 53, offset: 16673},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 496, col: 74, offset: 16694},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 496, col: 82, offset: 16702},
								name: "DocumentBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 503, col: 1, offset: 16944},
			expr: &actionExpr{
				pos: position{line: 503, col: 20, offset: 16963},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 503, col: 20, offset: 16963},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 503, col: 20, offset: 16963},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 503, col: 31, offset: 16974},
								expr: &ruleRefExpr{
									pos:  position{line: 503, col: 32, offset: 16975},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 503, col: 52, offset: 16995},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 503, col: 60, offset: 17003},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 503, col: 83, offset: 17026},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 503, col: 92, offset: 17035},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 507, col: 1, offset: 17175},
			expr: &actionExpr{
				pos: position{line: 508, col: 5, offset: 17205},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 508, col: 5, offset: 17205},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 508, col: 5, offset: 17205},
							expr: &ruleRefExpr{
								pos:  position{line: 508, col: 5, offset: 17205},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 508, col: 9, offset: 17209},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 510, col: 9, offset: 17272},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 510, col: 9, offset: 17272},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 510, col: 9, offset: 17272},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 510, col: 9, offset: 17272},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 510, col: 16, offset: 17279},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 510, col: 16, offset: 17279},
															expr: &litMatcher{
																pos:        position{line: 510, col: 17, offset: 17280},
																val:        ".",
																ignoreCase: false,
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 514, col: 9, offset: 17380},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 533, col: 11, offset: 18097},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 533, col: 11, offset: 18097},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 533, col: 11, offset: 18097},
													expr: &charClassMatcher{
														pos:        position{line: 533, col: 12, offset: 18098},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 533, col: 20, offset: 18106},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 535, col: 13, offset: 18217},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 535, col: 13, offset: 18217},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 535, col: 14, offset: 18218},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 535, col: 21, offset: 18225},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 537, col: 13, offset: 18339},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 537, col: 13, offset: 18339},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 537, col: 14, offset: 18340},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 537, col: 21, offset: 18347},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 539, col: 13, offset: 18461},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 539, col: 13, offset: 18461},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 539, col: 13, offset: 18461},
													expr: &charClassMatcher{
														pos:        position{line: 539, col: 14, offset: 18462},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 539, col: 22, offset: 18470},
													val:        ")",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 541, col: 13, offset: 18584},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 541, col: 13, offset: 18584},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 541, col: 13, offset: 18584},
													expr: &charClassMatcher{
														pos:        position{line: 541, col: 14, offset: 18585},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 541, col: 22, offset: 18593},
													val:        ")",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 543, col: 12, offset: 18706},
							expr: &ruleRefExpr{
								pos:  position{line: 543, col: 12, offset: 18706},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 547, col: 1, offset: 18738},
			expr: &actionExpr{
				pos: position{line: 547, col: 27, offset: 18764},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 547, col: 27, offset: 18764},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 547, col: 37, offset: 18774},
						expr: &ruleRefExpr{
							pos:  position{line: 547, col: 37, offset: 18774},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 554, col: 1, offset: 18974},
			expr: &actionExpr{
				pos: position{line: 554, col: 22, offset: 18995},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 554, col: 22, offset: 18995},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 554, col: 22, offset: 18995},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 554, col: 33, offset: 19006},
								expr: &ruleRefExpr{
									pos:  position{line: 554, col: 34, offset: 19007},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 554, col: 54, offset: 19027},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 554, col: 62, offset: 19035},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 554, col: 87, offset: 19060},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 554, col: 98, offset: 19071},
								expr: &ruleRefExpr{
									pos:  position{line: 554, col: 99, offset: 19072},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 554, col: 129, offset: 19102},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 554, col: 138, offset: 19111},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 558, col: 1, offset: 19269},
			expr: &actionExpr{
				pos: position{line: 559, col: 5, offset: 19301},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 559, col: 5, offset: 19301},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 559, col: 5, offset: 19301},
							expr: &ruleRefExpr{
								pos:  position{line: 559, col: 5, offset: 19301},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 559, col: 9, offset: 19305},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 559, col: 17, offset: 19313},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 561, col: 9, offset: 19370},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 561, col: 9, offset: 19370},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 561, col: 9, offset: 19370},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 561, col: 16, offset: 19377},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 561, col: 16, offset: 19377},
															expr: &litMatcher{
																pos:        position{line: 561, col: 17, offset: 19378},
																val:        "*",
																ignoreCase: false,
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 565, col: 9, offset: 19478},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 582, col: 14, offset: 20185},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 582, col: 21, offset: 20192},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 582, col: 22, offset: 20193},
												val:        "-",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 584, col: 13, offset: 20279},
							expr: &ruleRefExpr{
								pos:  position{line: 584, col: 13, offset: 20279},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 588, col: 1, offset: 20312},
			expr: &actionExpr{
				pos: position{line: 588, col: 32, offset: 20343},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 588, col: 32, offset: 20343},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 588, col: 32, offset: 20343},
							expr: &litMatcher{
								pos:        position{line: 588, col: 33, offset: 20344},
								val:        "[",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 588, col: 37, offset: 20348},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 589, col: 7, offset: 20362},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 589, col: 7, offset: 20362},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 589, col: 7, offset: 20362},
											val:        "[ ]",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 590, col: 7, offset: 20407},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 590, col: 7, offset: 20407},
											val:        "[*]",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 591, col: 7, offset: 20450},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 591, col: 7, offset: 20450},
											val:        "[x]",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 592, col: 7, offset: 20492},
							expr: &ruleRefExpr{
								pos:  position{line: 592, col: 7, offset: 20492},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 596, col: 1, offset: 20531},
			expr: &actionExpr{
				pos: position{line: 596, col: 29, offset: 20559},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 596, col: 29, offset: 20559},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 596, col: 39, offset: 20569},
						expr: &ruleRefExpr{
							pos:  position{line: 596, col: 39, offset: 20569},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 603, col: 1, offset: 20885},
			expr: &actionExpr{
				pos: position{line: 603, col: 20, offset: 20904},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 603, col: 20, offset: 20904},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 603, col: 20, offset: 20904},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 603, col: 31, offset: 20915},
								expr: &ruleRefExpr{
									pos:  position{line: 603, col: 32, offset: 20916},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 603, col: 52, offset: 20936},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 603, col: 58, offset: 20942},
								name: "LabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 603, col: 79, offset: 20963},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 603, col: 90, offset: 20974},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 603, col: 116, offset: 21000},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 603, col: 128, offset: 21012},
								expr: &ruleRefExpr{
									pos:  position{line: 603, col: 129, offset: 21013},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 607, col: 1, offset: 21152},
			expr: &actionExpr{
				pos: position{line: 607, col: 24, offset: 21175},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &oneOrMoreExpr{
					pos: position{line: 607, col: 24, offset: 21175},
					expr: &choiceExpr{
						pos: position{line: 607, col: 25, offset: 21176},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 607, col: 25, offset: 21176},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 607, col: 37, offset: 21188},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 607, col: 47, offset: 21198},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 607, col: 47, offset: 21198},
										expr: &ruleRefExpr{
											pos:  position{line: 607, col: 48, offset: 21199},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 607, col: 56, offset: 21207},
										expr: &litMatcher{
											pos:        position{line: 607, col: 57, offset: 21208},
											val:        "::",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 607, col: 62, offset: 21213,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 611, col: 1, offset: 21255},
			expr: &actionExpr{
				pos: position{line: 612, col: 5, offset: 21288},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 612, col: 5, offset: 21288},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 612, col: 5, offset: 21288},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 612, col: 16, offset: 21299},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 612, col: 16, offset: 21299},
									expr: &litMatcher{
										pos:        position{line: 612, col: 17, offset: 21300},
										val:        ":",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 615, col: 5, offset: 21358},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 619, col: 6, offset: 21534},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 619, col: 6, offset: 21534},
									expr: &choiceExpr{
										pos: position{line: 619, col: 7, offset: 21535},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 619, col: 7, offset: 21535},
												name: "WS",
											},
											&ruleRefExpr{
												pos:  position{line: 619, col: 12, offset: 21540},
												name: "NEWLINE",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 619, col: 24, offset: 21552},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 623, col: 1, offset: 21592},
			expr: &actionExpr{
				pos: position{line: 623, col: 31, offset: 21622},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 623, col: 31, offset: 21622},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 623, col: 40, offset: 21631},
						expr: &ruleRefExpr{
							pos:  position{line: 623, col: 41, offset: 21632},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 630, col: 1, offset: 21823},
			expr: &choiceExpr{
				pos: position{line: 630, col: 19, offset: 21841},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 630, col: 19, offset: 21841},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 630, col: 19, offset: 21841},
							val:        "TIP",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 632, col: 9, offset: 21887},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 632, col: 9, offset: 21887},
							val:        "NOTE",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 634, col: 9, offset: 21935},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 634, col: 9, offset: 21935},
							val:        "IMPORTANT",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 636, col: 9, offset: 21993},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 636, col: 9, offset: 21993},
							val:        "WARNING",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 638, col: 9, offset: 22047},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 638, col: 9, offset: 22047},
							val:        "CAUTION",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 647, col: 1, offset: 22354},
			expr: &choiceExpr{
				pos: position{line: 649, col: 5, offset: 22401},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 649, col: 5, offset: 22401},
						run: (*parser).callonParagraph2,
						expr: &seqExpr{
							pos: position{line: 649, col: 5, offset: 22401},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 649, col: 5, offset: 22401},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 649, col: 16, offset: 22412},
										expr: &ruleRefExpr{
											pos:  position{line: 649, col: 17, offset: 22413},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 649, col: 37, offset: 22433},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 649, col: 40, offset: 22436},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 649, col: 56, offset: 22452},
									val:        ": ",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 649, col: 61, offset: 22457},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 649, col: 67, offset: 22463},
										expr: &ruleRefExpr{
											pos:  position{line: 649, col: 68, offset: 22464},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 653, col: 5, offset: 22656},
						run: (*parser).callonParagraph13,
						expr: &seqExpr{
							pos: position{line: 653, col: 5, offset: 22656},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 653, col: 5, offset: 22656},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 653, col: 16, offset: 22667},
										expr: &ruleRefExpr{
											pos:  position{line: 653, col: 17, offset: 22668},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 653, col: 37, offset: 22688},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 653, col: 43, offset: 22694},
										expr: &ruleRefExpr{
											pos:  position{line: 653, col: 44, offset: 22695},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SimpleParagraph",
			pos:  position{line: 658, col: 1, offset: 22860},
			expr: &actionExpr{
				pos: position{line: 658, col: 20, offset: 22879},
				run: (*parser).callonSimpleParagraph1,
				expr: &seqExpr{
					pos: position{line: 658, col: 20, offset: 22879},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 658, col: 20, offset: 22879},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 658, col: 31, offset: 22890},
								expr: &ruleRefExpr{
									pos:  position{line: 658, col: 32, offset: 22891},
									name: "ElementAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 659, col: 5, offset: 22916},
							run: (*parser).callonSimpleParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 667, col: 5, offset: 23207},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 667, col: 16, offset: 23218},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 668, col: 5, offset: 23241},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 668, col: 16, offset: 23252},
								expr: &ruleRefExpr{
									pos:  position{line: 668, col: 17, offset: 23253},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphLines",
			pos:  position{line: 672, col: 1, offset: 23387},
			expr: &actionExpr{
				pos: position{line: 672, col: 19, offset: 23405},
				run: (*parser).callonParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 672, col: 19, offset: 23405},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 672, col: 19, offset: 23405},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 672, col: 30, offset: 23416},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 672, col: 50, offset: 23436},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 672, col: 61, offset: 23447},
								expr: &ruleRefExpr{
									pos:  position{line: 672, col: 62, offset: 23448},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphLine",
			pos:  position{line: 676, col: 1, offset: 23554},
			expr: &actionExpr{
				pos: position{line: 676, col: 23, offset: 23576},
				run: (*parser).callonFirstParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 676, col: 23, offset: 23576},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 676, col: 23, offset: 23576},
							expr: &seqExpr{
								pos: position{line: 676, col: 25, offset: 23578},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 676, col: 25, offset: 23578},
										name: "LabeledListItemTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 676, col: 45, offset: 23598},
										name: "LabeledListItemSeparator",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 677, col: 5, offset: 23628},
							label: "elements",
							expr: &seqExpr{
								pos: position{line: 677, col: 15, offset: 23638},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 677, col: 15, offset: 23638},
										name: "SimpleWord",
									},
									&zeroOrMoreExpr{
										pos: position{line: 677, col: 26, offset: 23649},
										expr: &ruleRefExpr{
											pos:  position{line: 677, col: 26, offset: 23649},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 677, col: 42, offset: 23665},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 677, col: 52, offset: 23675},
								expr: &ruleRefExpr{
									pos:  position{line: 677, col: 53, offset: 23676},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 677, col: 65, offset: 23688},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OtherParagraphLine",
			pos:  position{line: 681, col: 1, offset: 23778},
			expr: &actionExpr{
				pos: position{line: 681, col: 23, offset: 23800},
				run: (*parser).callonOtherParagraphLine1,
				expr: &labeledExpr{
					pos:   position{line: 681, col: 23, offset: 23800},
					label: "elements",
					expr: &ruleRefExpr{
						pos:  position{line: 681, col: 33, offset: 23810},
						name: "InlineElements",
					},
				},
			},
		},
		{
			name: "VerseParagraph",
			pos:  position{line: 685, col: 1, offset: 23856},
			expr: &choiceExpr{
				pos: position{line: 687, col: 5, offset: 23908},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 687, col: 5, offset: 23908},
						run: (*parser).callonVerseParagraph2,
						expr: &seqExpr{
							pos: position{line: 687, col: 5, offset: 23908},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 687, col: 5, offset: 23908},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 687, col: 16, offset: 23919},
										expr: &ruleRefExpr{
											pos:  position{line: 687, col: 17, offset: 23920},
											name: "ElementAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 688, col: 5, offset: 23944},
									run: (*parser).callonVerseParagraph7,
								},
								&labeledExpr{
									pos:   position{line: 695, col: 5, offset: 24156},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 695, col: 8, offset: 24159},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 695, col: 24, offset: 24175},
									val:        ": ",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 695, col: 29, offset: 24180},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 695, col: 35, offset: 24186},
										expr: &ruleRefExpr{
											pos:  position{line: 695, col: 36, offset: 24187},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 699, col: 5, offset: 24379},
						run: (*parser).callonVerseParagraph14,
						expr: &seqExpr{
							pos: position{line: 699, col: 5, offset: 24379},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 699, col: 5, offset: 24379},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 699, col: 16, offset: 24390},
										expr: &ruleRefExpr{
											pos:  position{line: 699, col: 17, offset: 24391},
											name: "ElementAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 700, col: 5, offset: 24415},
									run: (*parser).callonVerseParagraph19,
								},
								&labeledExpr{
									pos:   position{line: 707, col: 5, offset: 24627},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 707, col: 11, offset: 24633},
										expr: &ruleRefExpr{
											pos:  position{line: 707, col: 12, offset: 24634},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 711, col: 1, offset: 24735},
			expr: &actionExpr{
				pos: position{line: 711, col: 19, offset: 24753},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 711, col: 19, offset: 24753},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 711, col: 19, offset: 24753},
							expr: &ruleRefExpr{
								pos:  position{line: 711, col: 20, offset: 24754},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 711, col: 24, offset: 24758},
							expr: &ruleRefExpr{
								pos:  position{line: 711, col: 25, offset: 24759},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 712, col: 5, offset: 24773},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 712, col: 15, offset: 24783},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 712, col: 15, offset: 24783},
										run: (*parser).callonInlineElements9,
										expr: &labeledExpr{
											pos:   position{line: 712, col: 15, offset: 24783},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 712, col: 24, offset: 24792},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 714, col: 9, offset: 24884},
										run: (*parser).callonInlineElements12,
										expr: &seqExpr{
											pos: position{line: 714, col: 9, offset: 24884},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 714, col: 9, offset: 24884},
													expr: &ruleRefExpr{
														pos:  position{line: 714, col: 10, offset: 24885},
														name: "BlockDelimiter",
													},
												},
												&labeledExpr{
													pos:   position{line: 714, col: 25, offset: 24900},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 714, col: 34, offset: 24909},
														expr: &ruleRefExpr{
															pos:  position{line: 714, col: 35, offset: 24910},
															name: "InlineElement",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 714, col: 51, offset: 24926},
													label: "linebreak",
													expr: &zeroOrOneExpr{
														pos: position{line: 714, col: 61, offset: 24936},
														expr: &ruleRefExpr{
															pos:  position{line: 714, col: 62, offset: 24937},
															name: "LineBreak",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 714, col: 74, offset: 24949},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 720, col: 1, offset: 25085},
			expr: &actionExpr{
				pos: position{line: 720, col: 18, offset: 25102},
				run: (*parser).callonInlineElement1,
				expr: &seqExpr{
					pos: position{line: 720, col: 18, offset: 25102},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 720, col: 18, offset: 25102},
							expr: &ruleRefExpr{
								pos:  position{line: 720, col: 19, offset: 25103},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 720, col: 23, offset: 25107},
							expr: &ruleRefExpr{
								pos:  position{line: 720, col: 24, offset: 25108},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 721, col: 5, offset: 25123},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 721, col: 14, offset: 25132},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 721, col: 14, offset: 25132},
										name: "SimpleWord",
									},
									&ruleRefExpr{
										pos:  position{line: 722, col: 11, offset: 25153},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 723, col: 11, offset: 25171},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 724, col: 11, offset: 25194},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 725, col: 11, offset: 25210},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 726, col: 11, offset: 25233},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 727, col: 11, offset: 25259},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 728, col: 11, offset: 25281},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 729, col: 11, offset: 25308},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 730, col: 11, offset: 25334},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 731, col: 11, offset: 25375},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 732, col: 11, offset: 25402},
										name: "OtherWord",
									},
									&ruleRefExpr{
										pos:  position{line: 733, col: 11, offset: 25422},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementsWithoutSubtitution",
			pos:  position{line: 741, col: 1, offset: 25685},
			expr: &actionExpr{
				pos: position{line: 741, col: 37, offset: 25721},
				run: (*parser).callonInlineElementsWithoutSubtitution1,
				expr: &seqExpr{
					pos: position{line: 741, col: 37, offset: 25721},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 741, col: 37, offset: 25721},
							expr: &ruleRefExpr{
								pos:  position{line: 741, col: 38, offset: 25722},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 741, col: 48, offset: 25732},
							expr: &ruleRefExpr{
								pos:  position{line: 741, col: 49, offset: 25733},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 741, col: 64, offset: 25748},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 741, col: 73, offset: 25757},
								expr: &ruleRefExpr{
									pos:  position{line: 741, col: 74, offset: 25758},
									name: "InlineElementWithoutSubtitution",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 741, col: 108, offset: 25792},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 741, col: 118, offset: 25802},
								expr: &ruleRefExpr{
									pos:  position{line: 741, col: 119, offset: 25803},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 741, col: 131, offset: 25815},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineElementWithoutSubtitution",
			pos:  position{line: 745, col: 1, offset: 25906},
			expr: &actionExpr{
				pos: position{line: 745, col: 36, offset: 25941},
				run: (*parser).callonInlineElementWithoutSubtitution1,
				expr: &seqExpr{
					pos: position{line: 745, col: 36, offset: 25941},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 745, col: 36, offset: 25941},
							expr: &ruleRefExpr{
								pos:  position{line: 745, col: 37, offset: 25942},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 745, col: 41, offset: 25946},
							expr: &ruleRefExpr{
								pos:  position{line: 745, col: 42, offset: 25947},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 746, col: 5, offset: 25962},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 746, col: 14, offset: 25971},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 746, col: 14, offset: 25971},
										name: "SimpleWord",
									},
									&ruleRefExpr{
										pos:  position{line: 747, col: 11, offset: 25992},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 748, col: 11, offset: 26010},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 749, col: 11, offset: 26033},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 750, col: 11, offset: 26049},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 751, col: 11, offset: 26072},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 752, col: 11, offset: 26094},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 753, col: 11, offset: 26120},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 754, col: 11, offset: 26146},
										name: "OtherWord",
									},
									&ruleRefExpr{
										pos:  position{line: 755, col: 11, offset: 26166},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraph",
			pos:  position{line: 759, col: 1, offset: 26208},
			expr: &actionExpr{
				pos: position{line: 759, col: 22, offset: 26229},
				run: (*parser).callonVerbatimParagraph1,
				expr: &seqExpr{
					pos: position{line: 759, col: 22, offset: 26229},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 759, col: 22, offset: 26229},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 759, col: 33, offset: 26240},
								expr: &ruleRefExpr{
									pos:  position{line: 759, col: 34, offset: 26241},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 759, col: 54, offset: 26261},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 759, col: 60, offset: 26267},
								expr: &actionExpr{
									pos: position{line: 759, col: 61, offset: 26268},
									run: (*parser).callonVerbatimParagraph8,
									expr: &seqExpr{
										pos: position{line: 759, col: 61, offset: 26268},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 759, col: 61, offset: 26268},
												expr: &ruleRefExpr{
													pos:  position{line: 759, col: 62, offset: 26269},
													name: "EOF",
												},
											},
											&labeledExpr{
												pos:   position{line: 759, col: 66, offset: 26273},
												label: "line",
												expr: &ruleRefExpr{
													pos:  position{line: 759, col: 72, offset: 26279},
													name: "VerbatimParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraphLine",
			pos:  position{line: 765, col: 1, offset: 26399},
			expr: &actionExpr{
				pos: position{line: 765, col: 26, offset: 26424},
				run: (*parser).callonVerbatimParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 765, col: 26, offset: 26424},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 765, col: 26, offset: 26424},
							expr: &ruleRefExpr{
								pos:  position{line: 765, col: 27, offset: 26425},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 765, col: 42, offset: 26440},
							expr: &ruleRefExpr{
								pos:  position{line: 765, col: 43, offset: 26441},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 765, col: 53, offset: 26451},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 765, col: 62, offset: 26460},
								expr: &ruleRefExpr{
									pos:  position{line: 765, col: 63, offset: 26461},
									name: "VerbatimParagraphLineElement",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 765, col: 94, offset: 26492},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 765, col: 104, offset: 26502},
								expr: &ruleRefExpr{
									pos:  position{line: 765, col: 105, offset: 26503},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 765, col: 117, offset: 26515},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraphLineElement",
			pos:  position{line: 769, col: 1, offset: 26606},
			expr: &actionExpr{
				pos: position{line: 769, col: 33, offset: 26638},
				run: (*parser).callonVerbatimParagraphLineElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 769, col: 33, offset: 26638},
					expr: &seqExpr{
						pos: position{line: 769, col: 34, offset: 26639},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 769, col: 34, offset: 26639},
								expr: &ruleRefExpr{
									pos:  position{line: 769, col: 35, offset: 26640},
									name: "EOL",
								},
							},
							&notExpr{
								pos: position{line: 769, col: 39, offset: 26644},
								expr: &ruleRefExpr{
									pos:  position{line: 769, col: 40, offset: 26645},
									name: "LineBreak",
								},
							},
							&anyMatcher{
								line: 769, col: 50, offset: 26655,
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 776, col: 1, offset: 26879},
			expr: &actionExpr{
				pos: position{line: 776, col: 14, offset: 26892},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 776, col: 14, offset: 26892},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 776, col: 14, offset: 26892},
							name: "WS",
						},
						&litMatcher{
							pos:        position{line: 776, col: 17, offset: 26895},
							val:        "+",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 776, col: 21, offset: 26899},
							expr: &ruleRefExpr{
								pos:  position{line: 776, col: 21, offset: 26899},
								name: "WS",
							},
						},
						&andExpr{
							pos: position{line: 776, col: 25, offset: 26903},
							expr: &ruleRefExpr{
								pos:  position{line: 776, col: 26, offset: 26904},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 783, col: 1, offset: 27188},
			expr: &actionExpr{
				pos: position{line: 783, col: 15, offset: 27202},
				run: (*parser).callonQuotedText1,
				expr: &seqExpr{
					pos: position{line: 783, col: 15, offset: 27202},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 783, col: 15, offset: 27202},
							expr: &ruleRefExpr{
								pos:  position{line: 783, col: 16, offset: 27203},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 783, col: 19, offset: 27206},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 783, col: 25, offset: 27212},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 783, col: 25, offset: 27212},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 784, col: 15, offset: 27236},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 785, col: 15, offset: 27262},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 786, col: 15, offset: 27291},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 787, col: 15, offset: 27320},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 788, col: 15, offset: 27351},
										name: "EscapedBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 789, col: 15, offset: 27382},
										name: "EscapedItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 790, col: 15, offset: 27415},
										name: "EscapedMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 791, col: 15, offset: 27451},
										name: "EscapedSubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 792, col: 15, offset: 27487},
										name: "EscapedSuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 793, col: 15, offset: 27524},
										name: "SubscriptOrSuperscriptPrefix",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextPrefix",
			pos:  position{line: 797, col: 1, offset: 27678},
			expr: &choiceExpr{
				pos: position{line: 797, col: 21, offset: 27698},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 797, col: 21, offset: 27698},
						val:        "**",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 797, col: 28, offset: 27705},
						val:        "*",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 797, col: 34, offset: 27711},
						val:        "__",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 797, col: 41, offset: 27718},
						val:        "_",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 797, col: 47, offset: 27724},
						val:        "``",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 797, col: 54, offset: 27731},
						val:        "`",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 797, col: 60, offset: 27737},
						val:        "^",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 797, col: 66, offset: 27743},
						val:        "~",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 799, col: 1, offset: 27748},
			expr: &choiceExpr{
				pos: position{line: 799, col: 33, offset: 27780},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 799, col: 33, offset: 27780},
						val:        "^",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 799, col: 39, offset: 27786},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 799, col: 39, offset: 27786},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 803, col: 1, offset: 27919},
			expr: &actionExpr{
				pos: position{line: 803, col: 25, offset: 27943},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 803, col: 25, offset: 27943},
					expr: &litMatcher{
						pos:        position{line: 803, col: 25, offset: 27943},
						val:        "\\",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 807, col: 1, offset: 27984},
			expr: &actionExpr{
				pos: position{line: 807, col: 25, offset: 28008},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 807, col: 25, offset: 28008},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 807, col: 25, offset: 28008},
							val:        "\\\\",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 807, col: 30, offset: 28013},
							expr: &litMatcher{
								pos:        position{line: 807, col: 30, offset: 28013},
								val:        "\\",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 815, col: 1, offset: 28110},
			expr: &choiceExpr{
				pos: position{line: 815, col: 13, offset: 28122},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 815, col: 13, offset: 28122},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 815, col: 35, offset: 28144},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 817, col: 1, offset: 28165},
			expr: &actionExpr{
				pos: position{line: 817, col: 24, offset: 28188},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 817, col: 24, offset: 28188},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 817, col: 24, offset: 28188},
							expr: &litMatcher{
								pos:        position{line: 817, col: 25, offset: 28189},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 817, col: 30, offset: 28194},
							val:        "**",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 817, col: 35, offset: 28199},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 817, col: 44, offset: 28208},
								name: "DoubleQuoteBoldTextContent",
							},
						},
						&litMatcher{
							pos:        position{line: 817, col: 72, offset: 28236},
							val:        "**",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextContent",
			pos:  position{line: 821, col: 1, offset: 28361},
			expr: &seqExpr{
				pos: position{line: 821, col: 31, offset: 28391},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 821, col: 31, offset: 28391},
						name: "DoubleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 821, col: 58, offset: 28418},
						expr: &actionExpr{
							pos: position{line: 821, col: 59, offset: 28419},
							run: (*parser).callonDoubleQuoteBoldTextContent4,
							expr: &seqExpr{
								pos: position{line: 821, col: 59, offset: 28419},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 821, col: 59, offset: 28419},
										expr: &litMatcher{
											pos:        position{line: 821, col: 61, offset: 28421},
											val:        "**",
											ignoreCase: false,
										},
									},
									&labeledExpr{
										pos:   position{line: 821, col: 67, offset: 28427},
										label: "element",
										expr: &choiceExpr{
											pos: position{line: 821, col: 76, offset: 28436},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 821, col: 76, offset: 28436},
													name: "WS",
												},
												&ruleRefExpr{
													pos:  position{line: 821, col: 81, offset: 28441},
													name: "DoubleQuoteBoldTextElement",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 825, col: 1, offset: 28533},
			expr: &actionExpr{
				pos: position{line: 825, col: 31, offset: 28563},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 825, col: 31, offset: 28563},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 825, col: 31, offset: 28563},
							expr: &ruleRefExpr{
								pos:  position{line: 825, col: 32, offset: 28564},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 825, col: 40, offset: 28572},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 825, col: 49, offset: 28581},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 825, col: 49, offset: 28581},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 826, col: 11, offset: 28612},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 827, col: 11, offset: 28634},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 828, col: 11, offset: 28658},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 829, col: 11, offset: 28682},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 830, col: 11, offset: 28708},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 831, col: 11, offset: 28731},
										name: "QuotedLink",
									},
									&ruleRefExpr{
										pos:  position{line: 832, col: 11, offset: 28753},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 833, col: 11, offset: 28776},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 834, col: 11, offset: 28816},
										name: "NonDoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 835, col: 11, offset: 28849},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteBoldText",
			pos:  position{line: 839, col: 1, offset: 28994},
			expr: &actionExpr{
				pos: position{line: 839, col: 27, offset: 29020},
				run: (*parser).callonNonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 839, col: 27, offset: 29020},
					exprs: []interface{}{
						&anyMatcher{
							line: 839, col: 28, offset: 29021,
						},
						&zeroOrMoreExpr{
							pos: position{line: 839, col: 31, offset: 29024},
							expr: &seqExpr{
								pos: position{line: 839, col: 32, offset: 29025},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 839, col: 32, offset: 29025},
										expr: &litMatcher{
											pos:        position{line: 839, col: 33, offset: 29026},
											val:        "**",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 839, col: 38, offset: 29031},
										expr: &ruleRefExpr{
											pos:  position{line: 839, col: 39, offset: 29032},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 839, col: 42, offset: 29035},
										expr: &litMatcher{
											pos:        position{line: 839, col: 43, offset: 29036},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 839, col: 47, offset: 29040},
										expr: &litMatcher{
											pos:        position{line: 839, col: 48, offset: 29041},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 839, col: 52, offset: 29045},
										expr: &ruleRefExpr{
											pos:  position{line: 839, col: 53, offset: 29046},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 839, col: 61, offset: 29054},
										expr: &ruleRefExpr{
											pos:  position{line: 839, col: 62, offset: 29055},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 839, col: 74, offset: 29067,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 843, col: 1, offset: 29127},
			expr: &choiceExpr{
				pos: position{line: 843, col: 24, offset: 29150},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 843, col: 24, offset: 29150},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 843, col: 24, offset: 29150},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 843, col: 24, offset: 29150},
									expr: &litMatcher{
										pos:        position{line: 843, col: 25, offset: 29151},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 843, col: 29, offset: 29155},
									expr: &litMatcher{
										pos:        position{line: 843, col: 30, offset: 29156},
										val:        "**",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 843, col: 35, offset: 29161},
									val:        "*",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 843, col: 39, offset: 29165},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 843, col: 48, offset: 29174},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 843, col: 76, offset: 29202},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 845, col: 5, offset: 29382},
						run: (*parser).callonSingleQuoteBoldText12,
						expr: &seqExpr{
							pos: position{line: 845, col: 5, offset: 29382},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 845, col: 5, offset: 29382},
									expr: &litMatcher{
										pos:        position{line: 845, col: 6, offset: 29383},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 845, col: 11, offset: 29388},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 845, col: 16, offset: 29393},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 845, col: 25, offset: 29402},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 845, col: 53, offset: 29430},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextContent",
			pos:  position{line: 849, col: 1, offset: 29688},
			expr: &seqExpr{
				pos: position{line: 849, col: 31, offset: 29718},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 849, col: 31, offset: 29718},
						expr: &ruleRefExpr{
							pos:  position{line: 849, col: 32, offset: 29719},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 849, col: 35, offset: 29722},
						name: "SingleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 849, col: 62, offset: 29749},
						expr: &actionExpr{
							pos: position{line: 849, col: 63, offset: 29750},
							run: (*parser).callonSingleQuoteBoldTextContent6,
							expr: &seqExpr{
								pos: position{line: 849, col: 63, offset: 29750},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 849, col: 63, offset: 29750},
										expr: &seqExpr{
											pos: position{line: 849, col: 65, offset: 29752},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 849, col: 65, offset: 29752},
													val:        "*",
													ignoreCase: false,
												},
												&notExpr{
													pos: position{line: 849, col: 69, offset: 29756},
													expr: &ruleRefExpr{
														pos:  position{line: 849, col: 70, offset: 29757},
														name: "Alphanum",
													},
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 849, col: 80, offset: 29767},
										label: "spaces",
										expr: &zeroOrMoreExpr{
											pos: position{line: 849, col: 88, offset: 29775},
											expr: &ruleRefExpr{
												pos:  position{line: 849, col: 88, offset: 29775},
												name: "WS",
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 849, col: 93, offset: 29780},
										label: "element",
										expr: &ruleRefExpr{
											pos:  position{line: 849, col: 102, offset: 29789},
											name: "SingleQuoteBoldTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 853, col: 1, offset: 29880},
			expr: &actionExpr{
				pos: position{line: 853, col: 31, offset: 29910},
				run: (*parser).callonSingleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 853, col: 31, offset: 29910},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 853, col: 31, offset: 29910},
							expr: &ruleRefExpr{
								pos:  position{line: 853, col: 32, offset: 29911},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 853, col: 40, offset: 29919},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 853, col: 49, offset: 29928},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 853, col: 49, offset: 29928},
										name: "DoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 854, col: 11, offset: 29958},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 855, col: 11, offset: 29980},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 856, col: 11, offset: 30004},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 857, col: 11, offset: 30028},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 858, col: 11, offset: 30054},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 859, col: 11, offset: 30077},
										name: "QuotedLink",
									},
									&ruleRefExpr{
										pos:  position{line: 860, col: 11, offset: 30099},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 861, col: 11, offset: 30122},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 862, col: 11, offset: 30162},
										name: "NonSingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 863, col: 11, offset: 30195},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteBoldText",
			pos:  position{line: 867, col: 1, offset: 30340},
			expr: &actionExpr{
				pos: position{line: 867, col: 27, offset: 30366},
				run: (*parser).callonNonSingleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 867, col: 27, offset: 30366},
					exprs: []interface{}{
						&anyMatcher{
							line: 867, col: 28, offset: 30367,
						},
						&zeroOrMoreExpr{
							pos: position{line: 867, col: 31, offset: 30370},
							expr: &seqExpr{
								pos: position{line: 867, col: 32, offset: 30371},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 867, col: 32, offset: 30371},
										expr: &litMatcher{
											pos:        position{line: 867, col: 33, offset: 30372},
											val:        "*",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 867, col: 37, offset: 30376},
										expr: &ruleRefExpr{
											pos:  position{line: 867, col: 38, offset: 30377},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 867, col: 41, offset: 30380},
										expr: &litMatcher{
											pos:        position{line: 867, col: 42, offset: 30381},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 867, col: 46, offset: 30385},
										expr: &litMatcher{
											pos:        position{line: 867, col: 47, offset: 30386},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 867, col: 51, offset: 30390},
										expr: &ruleRefExpr{
											pos:  position{line: 867, col: 52, offset: 30391},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 867, col: 60, offset: 30399},
										expr: &ruleRefExpr{
											pos:  position{line: 867, col: 61, offset: 30400},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 867, col: 73, offset: 30412,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 871, col: 1, offset: 30472},
			expr: &choiceExpr{
				pos: position{line: 872, col: 5, offset: 30496},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 872, col: 5, offset: 30496},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 872, col: 5, offset: 30496},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 872, col: 5, offset: 30496},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 872, col: 18, offset: 30509},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 872, col: 40, offset: 30531},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 872, col: 45, offset: 30536},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 872, col: 54, offset: 30545},
										name: "DoubleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 872, col: 82, offset: 30573},
									val:        "**",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 874, col: 9, offset: 30729},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 874, col: 9, offset: 30729},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 874, col: 9, offset: 30729},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 874, col: 22, offset: 30742},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 874, col: 44, offset: 30764},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 874, col: 49, offset: 30769},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 874, col: 58, offset: 30778},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 874, col: 86, offset: 30806},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 877, col: 9, offset: 31005},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 877, col: 9, offset: 31005},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 877, col: 9, offset: 31005},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 877, col: 22, offset: 31018},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 877, col: 44, offset: 31040},
									val:        "*",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 877, col: 48, offset: 31044},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 877, col: 57, offset: 31053},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 877, col: 85, offset: 31081},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 885, col: 1, offset: 31288},
			expr: &choiceExpr{
				pos: position{line: 885, col: 15, offset: 31302},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 885, col: 15, offset: 31302},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 885, col: 39, offset: 31326},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 887, col: 1, offset: 31349},
			expr: &actionExpr{
				pos: position{line: 887, col: 26, offset: 31374},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 887, col: 26, offset: 31374},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 887, col: 26, offset: 31374},
							expr: &litMatcher{
								pos:        position{line: 887, col: 27, offset: 31375},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 887, col: 32, offset: 31380},
							val:        "__",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 887, col: 37, offset: 31385},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 887, col: 46, offset: 31394},
								name: "DoubleQuoteItalicTextContent",
							},
						},
						&litMatcher{
							pos:        position{line: 887, col: 76, offset: 31424},
							val:        "__",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextContent",
			pos:  position{line: 891, col: 1, offset: 31550},
			expr: &seqExpr{
				pos: position{line: 891, col: 33, offset: 31582},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 891, col: 33, offset: 31582},
						name: "DoubleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 891, col: 62, offset: 31611},
						expr: &actionExpr{
							pos: position{line: 891, col: 63, offset: 31612},
							run: (*parser).callonDoubleQuoteItalicTextContent4,
							expr: &seqExpr{
								pos: position{line: 891, col: 63, offset: 31612},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 891, col: 63, offset: 31612},
										expr: &litMatcher{
											pos:        position{line: 891, col: 65, offset: 31614},
											val:        "__",
											ignoreCase: false,
										},
									},
									&labeledExpr{
										pos:   position{line: 891, col: 71, offset: 31620},
										label: "element",
										expr: &choiceExpr{
											pos: position{line: 891, col: 80, offset: 31629},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 891, col: 80, offset: 31629},
													name: "WS",
												},
												&ruleRefExpr{
													pos:  position{line: 891, col: 85, offset: 31634},
													name: "DoubleQuoteItalicTextElement",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 895, col: 1, offset: 31728},
			expr: &actionExpr{
				pos: position{line: 895, col: 33, offset: 31760},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 895, col: 33, offset: 31760},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 895, col: 33, offset: 31760},
							expr: &ruleRefExpr{
								pos:  position{line: 895, col: 34, offset: 31761},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 895, col: 42, offset: 31769},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 895, col: 51, offset: 31778},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 895, col: 51, offset: 31778},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 896, col: 11, offset: 31811},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 897, col: 11, offset: 31831},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 898, col: 11, offset: 31855},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 899, col: 11, offset: 31879},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 900, col: 11, offset: 31905},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 901, col: 11, offset: 31928},
										name: "QuotedLink",
									},
									&ruleRefExpr{
										pos:  position{line: 902, col: 11, offset: 31950},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 903, col: 11, offset: 31973},
										name: "NonDoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 904, col: 11, offset: 32008},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteItalicText",
			pos:  position{line: 908, col: 1, offset: 32153},
			expr: &actionExpr{
				pos: position{line: 908, col: 29, offset: 32181},
				run: (*parser).callonNonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 908, col: 29, offset: 32181},
					exprs: []interface{}{
						&anyMatcher{
							line: 908, col: 30, offset: 32182,
						},
						&zeroOrMoreExpr{
							pos: position{line: 908, col: 33, offset: 32185},
							expr: &seqExpr{
								pos: position{line: 908, col: 34, offset: 32186},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 908, col: 34, offset: 32186},
										expr: &litMatcher{
											pos:        position{line: 908, col: 35, offset: 32187},
											val:        "__",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 908, col: 40, offset: 32192},
										expr: &litMatcher{
											pos:        position{line: 908, col: 41, offset: 32193},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 908, col: 45, offset: 32197},
										expr: &litMatcher{
											pos:        position{line: 908, col: 46, offset: 32198},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 908, col: 50, offset: 32202},
										expr: &ruleRefExpr{
											pos:  position{line: 908, col: 51, offset: 32203},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 908, col: 59, offset: 32211},
										expr: &ruleRefExpr{
											pos:  position{line: 908, col: 60, offset: 32212},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 908, col: 72, offset: 32224,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 912, col: 1, offset: 32284},
			expr: &choiceExpr{
				pos: position{line: 912, col: 26, offset: 32309},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 912, col: 26, offset: 32309},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 912, col: 26, offset: 32309},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 912, col: 26, offset: 32309},
									expr: &litMatcher{
										pos:        position{line: 912, col: 27, offset: 32310},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 912, col: 31, offset: 32314},
									expr: &litMatcher{
										pos:        position{line: 912, col: 32, offset: 32315},
										val:        "__",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 912, col: 37, offset: 32320},
									val:        "_",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 912, col: 41, offset: 32324},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 912, col: 50, offset: 32333},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 912, col: 80, offset: 32363},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 914, col: 5, offset: 32545},
						run: (*parser).callonSingleQuoteItalicText12,
						expr: &seqExpr{
							pos: position{line: 914, col: 5, offset: 32545},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 914, col: 5, offset: 32545},
									expr: &litMatcher{
										pos:        position{line: 914, col: 6, offset: 32546},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 914, col: 11, offset: 32551},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 914, col: 16, offset: 32556},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 914, col: 25, offset: 32565},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 914, col: 55, offset: 32595},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextContent",
			pos:  position{line: 918, col: 1, offset: 32857},
			expr: &seqExpr{
				pos: position{line: 918, col: 33, offset: 32889},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 918, col: 33, offset: 32889},
						expr: &ruleRefExpr{
							pos:  position{line: 918, col: 34, offset: 32890},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 918, col: 37, offset: 32893},
						name: "SingleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 918, col: 66, offset: 32922},
						expr: &actionExpr{
							pos: position{line: 918, col: 67, offset: 32923},
							run: (*parser).callonSingleQuoteItalicTextContent6,
							expr: &seqExpr{
								pos: position{line: 918, col: 67, offset: 32923},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 918, col: 67, offset: 32923},
										expr: &seqExpr{
											pos: position{line: 918, col: 69, offset: 32925},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 918, col: 69, offset: 32925},
													val:        "_",
													ignoreCase: false,
												},
												&notExpr{
													pos: position{line: 918, col: 73, offset: 32929},
													expr: &ruleRefExpr{
														pos:  position{line: 918, col: 74, offset: 32930},
														name: "Alphanum",
													},
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 918, col: 84, offset: 32940},
										label: "spaces",
										expr: &zeroOrMoreExpr{
											pos: position{line: 918, col: 92, offset: 32948},
											expr: &ruleRefExpr{
												pos:  position{line: 918, col: 92, offset: 32948},
												name: "WS",
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 918, col: 97, offset: 32953},
										label: "element",
										expr: &ruleRefExpr{
											pos:  position{line: 918, col: 106, offset: 32962},
											name: "SingleQuoteItalicTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 922, col: 1, offset: 33055},
			expr: &actionExpr{
				pos: position{line: 922, col: 33, offset: 33087},
				run: (*parser).callonSingleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 922, col: 33, offset: 33087},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 922, col: 33, offset: 33087},
							expr: &ruleRefExpr{
								pos:  position{line: 922, col: 34, offset: 33088},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 922, col: 42, offset: 33096},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 922, col: 51, offset: 33105},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 922, col: 51, offset: 33105},
										name: "DoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 923, col: 11, offset: 33137},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 924, col: 11, offset: 33157},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 925, col: 11, offset: 33181},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 926, col: 11, offset: 33205},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 927, col: 11, offset: 33231},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 928, col: 11, offset: 33254},
										name: "QuotedLink",
									},
									&ruleRefExpr{
										pos:  position{line: 929, col: 11, offset: 33276},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 930, col: 11, offset: 33299},
										name: "NonSingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 931, col: 11, offset: 33334},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteItalicText",
			pos:  position{line: 935, col: 1, offset: 33479},
			expr: &actionExpr{
				pos: position{line: 935, col: 29, offset: 33507},
				run: (*parser).callonNonSingleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 935, col: 29, offset: 33507},
					exprs: []interface{}{
						&anyMatcher{
							line: 935, col: 30, offset: 33508,
						},
						&zeroOrMoreExpr{
							pos: position{line: 935, col: 33, offset: 33511},
							expr: &seqExpr{
								pos: position{line: 935, col: 34, offset: 33512},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 935, col: 34, offset: 33512},
										expr: &litMatcher{
											pos:        position{line: 935, col: 35, offset: 33513},
											val:        "_",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 935, col: 39, offset: 33517},
										expr: &ruleRefExpr{
											pos:  position{line: 935, col: 40, offset: 33518},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 935, col: 43, offset: 33521},
										expr: &litMatcher{
											pos:        position{line: 935, col: 44, offset: 33522},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 935, col: 48, offset: 33526},
										expr: &litMatcher{
											pos:        position{line: 935, col: 49, offset: 33527},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 935, col: 53, offset: 33531},
										expr: &ruleRefExpr{
											pos:  position{line: 935, col: 54, offset: 33532},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 935, col: 62, offset: 33540},
										expr: &ruleRefExpr{
											pos:  position{line: 935, col: 63, offset: 33541},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 935, col: 75, offset: 33553,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 939, col: 1, offset: 33613},
			expr: &choiceExpr{
				pos: position{line: 940, col: 5, offset: 33639},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 940, col: 5, offset: 33639},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 940, col: 5, offset: 33639},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 940, col: 5, offset: 33639},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 940, col: 18, offset: 33652},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 940, col: 40, offset: 33674},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 940, col: 45, offset: 33679},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 940, col: 54, offset: 33688},
										name: "DoubleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 940, col: 84, offset: 33718},
									val:        "__",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 942, col: 9, offset: 33874},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 942, col: 9, offset: 33874},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 942, col: 9, offset: 33874},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 942, col: 22, offset: 33887},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 942, col: 44, offset: 33909},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 942, col: 49, offset: 33914},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 942, col: 58, offset: 33923},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 942, col: 88, offset: 33953},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 945, col: 9, offset: 34152},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 945, col: 9, offset: 34152},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 945, col: 9, offset: 34152},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 945, col: 22, offset: 34165},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 945, col: 44, offset: 34187},
									val:        "_",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 945, col: 48, offset: 34191},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 945, col: 57, offset: 34200},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 945, col: 87, offset: 34230},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 952, col: 1, offset: 34439},
			expr: &choiceExpr{
				pos: position{line: 952, col: 18, offset: 34456},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 952, col: 18, offset: 34456},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 952, col: 45, offset: 34483},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 954, col: 1, offset: 34509},
			expr: &actionExpr{
				pos: position{line: 954, col: 29, offset: 34537},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 954, col: 29, offset: 34537},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 954, col: 29, offset: 34537},
							expr: &litMatcher{
								pos:        position{line: 954, col: 30, offset: 34538},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 954, col: 35, offset: 34543},
							val:        "``",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 954, col: 40, offset: 34548},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 954, col: 49, offset: 34557},
								name: "DoubleQuoteMonospaceTextContent",
							},
						},
						&litMatcher{
							pos:        position{line: 954, col: 82, offset: 34590},
							val:        "``",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextContent",
			pos:  position{line: 958, col: 1, offset: 34719},
			expr: &seqExpr{
				pos: position{line: 958, col: 36, offset: 34754},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 958, col: 36, offset: 34754},
						name: "DoubleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 958, col: 68, offset: 34786},
						expr: &actionExpr{
							pos: position{line: 958, col: 69, offset: 34787},
							run: (*parser).callonDoubleQuoteMonospaceTextContent4,
							expr: &seqExpr{
								pos: position{line: 958, col: 69, offset: 34787},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 958, col: 69, offset: 34787},
										expr: &litMatcher{
											pos:        position{line: 958, col: 71, offset: 34789},
											val:        "``",
											ignoreCase: false,
										},
									},
									&labeledExpr{
										pos:   position{line: 958, col: 77, offset: 34795},
										label: "element",
										expr: &choiceExpr{
											pos: position{line: 958, col: 86, offset: 34804},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 958, col: 86, offset: 34804},
													name: "WS",
												},
												&ruleRefExpr{
													pos:  position{line: 958, col: 91, offset: 34809},
													name: "DoubleQuoteMonospaceTextElement",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 962, col: 1, offset: 34906},
			expr: &actionExpr{
				pos: position{line: 962, col: 36, offset: 34941},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 962, col: 36, offset: 34941},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 962, col: 36, offset: 34941},
							expr: &ruleRefExpr{
								pos:  position{line: 962, col: 37, offset: 34942},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 962, col: 45, offset: 34950},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 962, col: 54, offset: 34959},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 962, col: 54, offset: 34959},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 963, col: 11, offset: 34995},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 964, col: 11, offset: 35014},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 965, col: 11, offset: 35036},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 966, col: 11, offset: 35060},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 967, col: 11, offset: 35086},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 968, col: 11, offset: 35109},
										name: "QuotedLink",
									},
									&ruleRefExpr{
										pos:  position{line: 969, col: 11, offset: 35131},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 970, col: 11, offset: 35154},
										name: "NonDoubleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 971, col: 11, offset: 35192},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteMonospaceText",
			pos:  position{line: 975, col: 1, offset: 35337},
			expr: &actionExpr{
				pos: position{line: 975, col: 32, offset: 35368},
				run: (*parser).callonNonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 975, col: 32, offset: 35368},
					exprs: []interface{}{
						&anyMatcher{
							line: 975, col: 33, offset: 35369,
						},
						&zeroOrMoreExpr{
							pos: position{line: 975, col: 36, offset: 35372},
							expr: &seqExpr{
								pos: position{line: 975, col: 37, offset: 35373},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 975, col: 37, offset: 35373},
										expr: &litMatcher{
											pos:        position{line: 975, col: 38, offset: 35374},
											val:        "``",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 975, col: 43, offset: 35379},
										expr: &ruleRefExpr{
											pos:  position{line: 975, col: 44, offset: 35380},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 975, col: 47, offset: 35383},
										expr: &litMatcher{
											pos:        position{line: 975, col: 48, offset: 35384},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 975, col: 52, offset: 35388},
										expr: &litMatcher{
											pos:        position{line: 975, col: 53, offset: 35389},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 975, col: 57, offset: 35393},
										expr: &ruleRefExpr{
											pos:  position{line: 975, col: 58, offset: 35394},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 975, col: 66, offset: 35402},
										expr: &ruleRefExpr{
											pos:  position{line: 975, col: 67, offset: 35403},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 975, col: 79, offset: 35415,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 979, col: 1, offset: 35475},
			expr: &choiceExpr{
				pos: position{line: 979, col: 29, offset: 35503},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 979, col: 29, offset: 35503},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 979, col: 29, offset: 35503},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 979, col: 29, offset: 35503},
									expr: &litMatcher{
										pos:        position{line: 979, col: 30, offset: 35504},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 979, col: 34, offset: 35508},
									expr: &litMatcher{
										pos:        position{line: 979, col: 35, offset: 35509},
										val:        "``",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 979, col: 40, offset: 35514},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 979, col: 44, offset: 35518},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 979, col: 53, offset: 35527},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 979, col: 86, offset: 35560},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 981, col: 5, offset: 35745},
						run: (*parser).callonSingleQuoteMonospaceText12,
						expr: &seqExpr{
							pos: position{line: 981, col: 5, offset: 35745},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 981, col: 5, offset: 35745},
									expr: &litMatcher{
										pos:        position{line: 981, col: 6, offset: 35746},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 981, col: 11, offset: 35751},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 981, col: 16, offset: 35756},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 981, col: 25, offset: 35765},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 981, col: 58, offset: 35798},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextContent",
			pos:  position{line: 985, col: 1, offset: 36066},
			expr: &seqExpr{
				pos: position{line: 985, col: 36, offset: 36101},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 985, col: 36, offset: 36101},
						expr: &ruleRefExpr{
							pos:  position{line: 985, col: 37, offset: 36102},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 985, col: 40, offset: 36105},
						name: "SingleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 985, col: 72, offset: 36137},
						expr: &actionExpr{
							pos: position{line: 985, col: 73, offset: 36138},
							run: (*parser).callonSingleQuoteMonospaceTextContent6,
							expr: &seqExpr{
								pos: position{line: 985, col: 73, offset: 36138},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 985, col: 73, offset: 36138},
										expr: &seqExpr{
											pos: position{line: 985, col: 75, offset: 36140},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 985, col: 75, offset: 36140},
													val:        "`",
													ignoreCase: false,
												},
												&notExpr{
													pos: position{line: 985, col: 79, offset: 36144},
													expr: &ruleRefExpr{
														pos:  position{line: 985, col: 80, offset: 36145},
														name: "Alphanum",
													},
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 985, col: 90, offset: 36155},
										label: "spaces",
										expr: &zeroOrMoreExpr{
											pos: position{line: 985, col: 98, offset: 36163},
											expr: &ruleRefExpr{
												pos:  position{line: 985, col: 98, offset: 36163},
												name: "WS",
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 985, col: 103, offset: 36168},
										label: "element",
										expr: &ruleRefExpr{
											pos:  position{line: 985, col: 112, offset: 36177},
											name: "SingleQuoteMonospaceTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 989, col: 1, offset: 36273},
			expr: &actionExpr{
				pos: position{line: 989, col: 37, offset: 36309},
				run: (*parser).callonSingleQuoteMonospaceTextElement1,
				expr: &labeledExpr{
					pos:   position{line: 989, col: 37, offset: 36309},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 989, col: 46, offset: 36318},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 989, col: 46, offset: 36318},
								name: "NEWLINE",
							},
							&ruleRefExpr{
								pos:  position{line: 990, col: 11, offset: 36356},
								name: "DoubleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 991, col: 11, offset: 36392},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 992, col: 11, offset: 36412},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 993, col: 11, offset: 36433},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 994, col: 11, offset: 36457},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 995, col: 11, offset: 36483},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 996, col: 11, offset: 36506},
								name: "QuotedLink",
							},
							&ruleRefExpr{
								pos:  position{line: 997, col: 11, offset: 36528},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 998, col: 11, offset: 36551},
								name: "NonSingleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 999, col: 11, offset: 36589},
								name: "Parenthesis",
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteMonospaceText",
			pos:  position{line: 1003, col: 1, offset: 36734},
			expr: &actionExpr{
				pos: position{line: 1003, col: 32, offset: 36765},
				run: (*parser).callonNonSingleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1003, col: 32, offset: 36765},
					exprs: []interface{}{
						&anyMatcher{
							line: 1003, col: 33, offset: 36766,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1003, col: 36, offset: 36769},
							expr: &seqExpr{
								pos: position{line: 1003, col: 37, offset: 36770},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1003, col: 37, offset: 36770},
										expr: &ruleRefExpr{
											pos:  position{line: 1003, col: 38, offset: 36771},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1003, col: 41, offset: 36774},
										expr: &litMatcher{
											pos:        position{line: 1003, col: 42, offset: 36775},
											val:        "`",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1003, col: 46, offset: 36779},
										expr: &litMatcher{
											pos:        position{line: 1003, col: 47, offset: 36780},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1003, col: 51, offset: 36784},
										expr: &litMatcher{
											pos:        position{line: 1003, col: 52, offset: 36785},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1003, col: 56, offset: 36789},
										expr: &ruleRefExpr{
											pos:  position{line: 1003, col: 57, offset: 36790},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 1003, col: 65, offset: 36798},
										expr: &ruleRefExpr{
											pos:  position{line: 1003, col: 66, offset: 36799},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 1003, col: 78, offset: 36811,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1007, col: 1, offset: 36892},
			expr: &choiceExpr{
				pos: position{line: 1008, col: 5, offset: 36921},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1008, col: 5, offset: 36921},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1008, col: 5, offset: 36921},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1008, col: 5, offset: 36921},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1008, col: 18, offset: 36934},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1008, col: 40, offset: 36956},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1008, col: 45, offset: 36961},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1008, col: 54, offset: 36970},
										name: "DoubleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1008, col: 87, offset: 37003},
									val:        "``",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1010, col: 9, offset: 37159},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1010, col: 9, offset: 37159},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1010, col: 9, offset: 37159},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1010, col: 22, offset: 37172},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1010, col: 44, offset: 37194},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1010, col: 49, offset: 37199},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1010, col: 58, offset: 37208},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1010, col: 91, offset: 37241},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1013, col: 9, offset: 37440},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1013, col: 9, offset: 37440},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1013, col: 9, offset: 37440},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1013, col: 22, offset: 37453},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1013, col: 44, offset: 37475},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1013, col: 48, offset: 37479},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1013, col: 57, offset: 37488},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1013, col: 90, offset: 37521},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1017, col: 1, offset: 37670},
			expr: &actionExpr{
				pos: position{line: 1017, col: 18, offset: 37687},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1017, col: 18, offset: 37687},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1017, col: 18, offset: 37687},
							expr: &litMatcher{
								pos:        position{line: 1017, col: 19, offset: 37688},
								val:        "\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 1017, col: 23, offset: 37692},
							val:        "~",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1017, col: 27, offset: 37696},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1017, col: 36, offset: 37705},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1017, col: 58, offset: 37727},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1021, col: 1, offset: 37816},
			expr: &choiceExpr{
				pos: position{line: 1021, col: 25, offset: 37840},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1021, col: 25, offset: 37840},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1021, col: 38, offset: 37853},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1023, col: 1, offset: 37872},
			expr: &actionExpr{
				pos: position{line: 1023, col: 21, offset: 37892},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1023, col: 21, offset: 37892},
					expr: &seqExpr{
						pos: position{line: 1023, col: 22, offset: 37893},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1023, col: 22, offset: 37893},
								expr: &ruleRefExpr{
									pos:  position{line: 1023, col: 23, offset: 37894},
									name: "NEWLINE",
								},
							},
							&notExpr{
								pos: position{line: 1023, col: 31, offset: 37902},
								expr: &ruleRefExpr{
									pos:  position{line: 1023, col: 32, offset: 37903},
									name: "WS",
								},
							},
							&notExpr{
								pos: position{line: 1023, col: 35, offset: 37906},
								expr: &litMatcher{
									pos:        position{line: 1023, col: 36, offset: 37907},
									val:        "~",
									ignoreCase: false,
								},
							},
							&anyMatcher{
								line: 1023, col: 40, offset: 37911,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1027, col: 1, offset: 37944},
			expr: &actionExpr{
				pos: position{line: 1027, col: 25, offset: 37968},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1027, col: 25, offset: 37968},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1027, col: 25, offset: 37968},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1027, col: 38, offset: 37981},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1027, col: 60, offset: 38003},
							val:        "~",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1027, col: 64, offset: 38007},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1027, col: 73, offset: 38016},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1027, col: 95, offset: 38038},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1031, col: 1, offset: 38167},
			expr: &actionExpr{
				pos: position{line: 1031, col: 20, offset: 38186},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1031, col: 20, offset: 38186},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1031, col: 20, offset: 38186},
							expr: &litMatcher{
								pos:        position{line: 1031, col: 21, offset: 38187},
								val:        "\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 1031, col: 25, offset: 38191},
							val:        "^",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1031, col: 29, offset: 38195},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1031, col: 38, offset: 38204},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1031, col: 62, offset: 38228},
							val:        "^",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1035, col: 1, offset: 38319},
			expr: &choiceExpr{
				pos: position{line: 1035, col: 27, offset: 38345},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1035, col: 27, offset: 38345},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1035, col: 40, offset: 38358},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1037, col: 1, offset: 38379},
			expr: &actionExpr{
				pos: position{line: 1037, col: 23, offset: 38401},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1037, col: 23, offset: 38401},
					expr: &seqExpr{
						pos: position{line: 1037, col: 24, offset: 38402},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1037, col: 24, offset: 38402},
								expr: &ruleRefExpr{
									pos:  position{line: 1037, col: 25, offset: 38403},
									name: "NEWLINE",
								},
							},
							&notExpr{
								pos: position{line: 1037, col: 33, offset: 38411},
								expr: &ruleRefExpr{
									pos:  position{line: 1037, col: 34, offset: 38412},
									name: "WS",
								},
							},
							&notExpr{
								pos: position{line: 1037, col: 37, offset: 38415},
								expr: &litMatcher{
									pos:        position{line: 1037, col: 38, offset: 38416},
									val:        "^",
									ignoreCase: false,
								},
							},
							&anyMatcher{
								line: 1037, col: 42, offset: 38420,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1041, col: 1, offset: 38453},
			expr: &actionExpr{
				pos: position{line: 1041, col: 27, offset: 38479},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1041, col: 27, offset: 38479},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1041, col: 27, offset: 38479},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1041, col: 40, offset: 38492},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1041, col: 62, offset: 38514},
							val:        "^",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1041, col: 66, offset: 38518},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1041, col: 75, offset: 38527},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1041, col: 99, offset: 38551},
							val:        "^",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Passthrough",
			pos:  position{line: 1048, col: 1, offset: 38787},
			expr: &choiceExpr{
				pos: position{line: 1048, col: 16, offset: 38802},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1048, col: 16, offset: 38802},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1048, col: 40, offset: 38826},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1048, col: 64, offset: 38850},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1050, col: 1, offset: 38868},
			expr: &litMatcher{
				pos:        position{line: 1050, col: 32, offset: 38899},
				val:        "+",
				ignoreCase: false,
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1052, col: 1, offset: 38904},
			expr: &actionExpr{
				pos: position{line: 1052, col: 26, offset: 38929},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1052, col: 26, offset: 38929},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1052, col: 26, offset: 38929},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1052, col: 54, offset: 38957},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1052, col: 63, offset: 38966},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1052, col: 93, offset: 38996},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1052, col: 121, offset: 39024},
							expr: &ruleRefExpr{
								pos:  position{line: 1052, col: 122, offset: 39025},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1056, col: 1, offset: 39124},
			expr: &choiceExpr{
				pos: position{line: 1056, col: 33, offset: 39156},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1056, col: 34, offset: 39157},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1056, col: 34, offset: 39157},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1056, col: 35, offset: 39158},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1056, col: 35, offset: 39158},
											expr: &ruleRefExpr{
												pos:  position{line: 1056, col: 36, offset: 39159},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1056, col: 64, offset: 39187},
											expr: &ruleRefExpr{
												pos:  position{line: 1056, col: 65, offset: 39188},
												name: "WS",
											},
										},
										&notExpr{
											pos: position{line: 1056, col: 68, offset: 39191},
											expr: &ruleRefExpr{
												pos:  position{line: 1056, col: 69, offset: 39192},
												name: "NEWLINE",
											},
										},
										&anyMatcher{
											line: 1056, col: 77, offset: 39200,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1056, col: 80, offset: 39203},
									expr: &seqExpr{
										pos: position{line: 1056, col: 81, offset: 39204},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1056, col: 81, offset: 39204},
												expr: &seqExpr{
													pos: position{line: 1056, col: 83, offset: 39206},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1056, col: 83, offset: 39206},
															expr: &ruleRefExpr{
																pos:  position{line: 1056, col: 83, offset: 39206},
																name: "WS",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1056, col: 87, offset: 39210},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1056, col: 116, offset: 39239},
												expr: &ruleRefExpr{
													pos:  position{line: 1056, col: 117, offset: 39240},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1056, col: 145, offset: 39268},
												expr: &ruleRefExpr{
													pos:  position{line: 1056, col: 146, offset: 39269},
													name: "NEWLINE",
												},
											},
											&anyMatcher{
												line: 1056, col: 154, offset: 39277,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1058, col: 7, offset: 39419},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1058, col: 8, offset: 39420},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1058, col: 8, offset: 39420},
									expr: &ruleRefExpr{
										pos:  position{line: 1058, col: 9, offset: 39421},
										name: "WS",
									},
								},
								&notExpr{
									pos: position{line: 1058, col: 12, offset: 39424},
									expr: &ruleRefExpr{
										pos:  position{line: 1058, col: 13, offset: 39425},
										name: "NEWLINE",
									},
								},
								&notExpr{
									pos: position{line: 1058, col: 21, offset: 39433},
									expr: &ruleRefExpr{
										pos:  position{line: 1058, col: 22, offset: 39434},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1058, col: 50, offset: 39462,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1062, col: 1, offset: 39544},
			expr: &litMatcher{
				pos:        position{line: 1062, col: 32, offset: 39575},
				val:        "+++",
				ignoreCase: false,
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1064, col: 1, offset: 39582},
			expr: &actionExpr{
				pos: position{line: 1064, col: 26, offset: 39607},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1064, col: 26, offset: 39607},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1064, col: 26, offset: 39607},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1064, col: 54, offset: 39635},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1064, col: 63, offset: 39644},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1064, col: 93, offset: 39674},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1064, col: 121, offset: 39702},
							expr: &ruleRefExpr{
								pos:  position{line: 1064, col: 122, offset: 39703},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1068, col: 1, offset: 39802},
			expr: &choiceExpr{
				pos: position{line: 1068, col: 33, offset: 39834},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1068, col: 34, offset: 39835},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1068, col: 34, offset: 39835},
							expr: &seqExpr{
								pos: position{line: 1068, col: 35, offset: 39836},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1068, col: 35, offset: 39836},
										expr: &ruleRefExpr{
											pos:  position{line: 1068, col: 36, offset: 39837},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1068, col: 64, offset: 39865,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1070, col: 7, offset: 40030},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1070, col: 7, offset: 40030},
							expr: &seqExpr{
								pos: position{line: 1070, col: 8, offset: 40031},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1070, col: 8, offset: 40031},
										expr: &ruleRefExpr{
											pos:  position{line: 1070, col: 9, offset: 40032},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1070, col: 12, offset: 40035},
										expr: &ruleRefExpr{
											pos:  position{line: 1070, col: 13, offset: 40036},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 1070, col: 21, offset: 40044},
										expr: &ruleRefExpr{
											pos:  position{line: 1070, col: 22, offset: 40045},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1070, col: 50, offset: 40073,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1074, col: 1, offset: 40156},
			expr: &choiceExpr{
				pos: position{line: 1074, col: 21, offset: 40176},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1074, col: 21, offset: 40176},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1074, col: 21, offset: 40176},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1074, col: 21, offset: 40176},
									val:        "pass:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1074, col: 30, offset: 40185},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1074, col: 38, offset: 40193},
										expr: &ruleRefExpr{
											pos:  position{line: 1074, col: 39, offset: 40194},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1074, col: 67, offset: 40222},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1076, col: 5, offset: 40312},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1076, col: 5, offset: 40312},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1076, col: 5, offset: 40312},
									val:        "pass:q[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1076, col: 15, offset: 40322},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1076, col: 23, offset: 40330},
										expr: &choiceExpr{
											pos: position{line: 1076, col: 24, offset: 40331},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1076, col: 24, offset: 40331},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1076, col: 37, offset: 40344},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1076, col: 65, offset: 40372},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1080, col: 1, offset: 40462},
			expr: &choiceExpr{
				pos: position{line: 1080, col: 31, offset: 40492},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1080, col: 31, offset: 40492},
						name: "Alphanums",
					},
					&ruleRefExpr{
						pos:  position{line: 1080, col: 43, offset: 40504},
						name: "Spaces",
					},
					&actionExpr{
						pos: position{line: 1080, col: 52, offset: 40513},
						run: (*parser).callonPassthroughMacroCharacter4,
						expr: &seqExpr{
							pos: position{line: 1080, col: 53, offset: 40514},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1080, col: 53, offset: 40514},
									expr: &litMatcher{
										pos:        position{line: 1080, col: 54, offset: 40515},
										val:        "]",
										ignoreCase: false,
									},
								},
								&anyMatcher{
									line: 1080, col: 58, offset: 40519,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1087, col: 1, offset: 40689},
			expr: &choiceExpr{
				pos: position{line: 1087, col: 19, offset: 40707},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1087, col: 19, offset: 40707},
						run: (*parser).callonCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1087, col: 19, offset: 40707},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1087, col: 19, offset: 40707},
									val:        "<<",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1087, col: 24, offset: 40712},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1087, col: 28, offset: 40716},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1087, col: 32, offset: 40720},
									expr: &ruleRefExpr{
										pos:  position{line: 1087, col: 32, offset: 40720},
										name: "WS",
									},
								},
								&litMatcher{
									pos:        position{line: 1087, col: 36, offset: 40724},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1087, col: 40, offset: 40728},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1087, col: 47, offset: 40735},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1087, col: 68, offset: 40756},
									val:        ">>",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1089, col: 5, offset: 40831},
						run: (*parser).callonCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1089, col: 5, offset: 40831},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1089, col: 5, offset: 40831},
									val:        "<<",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1089, col: 10, offset: 40836},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1089, col: 14, offset: 40840},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1089, col: 18, offset: 40844},
									val:        ">>",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1093, col: 1, offset: 40907},
			expr: &actionExpr{
				pos: position{line: 1093, col: 24, offset: 40930},
				run: (*parser).callonCrossReferenceLabel1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1093, col: 24, offset: 40930},
					expr: &choiceExpr{
						pos: position{line: 1093, col: 25, offset: 40931},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1093, col: 25, offset: 40931},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1093, col: 37, offset: 40943},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1093, col: 47, offset: 40953},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1093, col: 47, offset: 40953},
										expr: &litMatcher{
											pos:        position{line: 1093, col: 48, offset: 40954},
											val:        ">>",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1093, col: 54, offset: 40960,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 1100, col: 1, offset: 41102},
			expr: &choiceExpr{
				pos: position{line: 1100, col: 9, offset: 41110},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1100, col: 9, offset: 41110},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1100, col: 24, offset: 41125},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1103, col: 1, offset: 41206},
			expr: &actionExpr{
				pos: position{line: 1103, col: 17, offset: 41222},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1103, col: 17, offset: 41222},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1103, col: 17, offset: 41222},
							val:        "link:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1103, col: 25, offset: 41230},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1103, col: 30, offset: 41235},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1103, col: 30, offset: 41235},
										name: "Location",
									},
									&ruleRefExpr{
										pos:  position{line: 1103, col: 41, offset: 41246},
										name: "FileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1103, col: 55, offset: 41260},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1103, col: 73, offset: 41278},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1107, col: 1, offset: 41396},
			expr: &actionExpr{
				pos: position{line: 1107, col: 17, offset: 41412},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1107, col: 17, offset: 41412},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1107, col: 17, offset: 41412},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1107, col: 22, offset: 41417},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1107, col: 32, offset: 41427},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1107, col: 49, offset: 41444},
								expr: &ruleRefExpr{
									pos:  position{line: 1107, col: 50, offset: 41445},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1111, col: 1, offset: 41538},
			expr: &choiceExpr{
				pos: position{line: 1111, col: 19, offset: 41556},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1111, col: 19, offset: 41556},
						name: "TextOnlyLinkAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 1111, col: 44, offset: 41581},
						name: "TextAndMoreLinkAttributes",
					},
				},
			},
		},
		{
			name: "TextOnlyLinkAttributes",
			pos:  position{line: 1113, col: 1, offset: 41608},
			expr: &actionExpr{
				pos: position{line: 1113, col: 27, offset: 41634},
				run: (*parser).callonTextOnlyLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1113, col: 27, offset: 41634},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1113, col: 27, offset: 41634},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1113, col: 31, offset: 41638},
							label: "text",
							expr: &zeroOrOneExpr{
								pos: position{line: 1113, col: 36, offset: 41643},
								expr: &ruleRefExpr{
									pos:  position{line: 1113, col: 37, offset: 41644},
									name: "LinkTextWithCommaAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1113, col: 66, offset: 41673},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LinkTextWithCommaAttribute",
			pos:  position{line: 1117, col: 1, offset: 41735},
			expr: &choiceExpr{
				pos: position{line: 1119, col: 5, offset: 41807},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1119, col: 5, offset: 41807},
						run: (*parser).callonLinkTextWithCommaAttribute2,
						expr: &seqExpr{
							pos: position{line: 1119, col: 5, offset: 41807},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1119, col: 5, offset: 41807},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1119, col: 10, offset: 41812},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1119, col: 19, offset: 41821},
										expr: &seqExpr{
											pos: position{line: 1119, col: 20, offset: 41822},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1119, col: 20, offset: 41822},
													expr: &litMatcher{
														pos:        position{line: 1119, col: 21, offset: 41823},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1119, col: 25, offset: 41827},
													expr: &litMatcher{
														pos:        position{line: 1119, col: 26, offset: 41828},
														val:        "]",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1119, col: 30, offset: 41832},
													expr: &litMatcher{
														pos:        position{line: 1119, col: 31, offset: 41833},
														val:        "\"",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1119, col: 37, offset: 41839},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1119, col: 37, offset: 41839},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1119, col: 50, offset: 41852},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1119, col: 63, offset: 41865},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1119, col: 73, offset: 41875},
															run: (*parser).callonLinkTextWithCommaAttribute18,
															expr: &seqExpr{
																pos: position{line: 1119, col: 74, offset: 41876},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1119, col: 74, offset: 41876},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1119, col: 75, offset: 41877},
																			name: "QuotedTextPrefix",
																		},
																	},
																	&anyMatcher{
																		line: 1119, col: 92, offset: 41894,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1121, col: 11, offset: 41963},
									val:        "\"",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1121, col: 16, offset: 41968},
									expr: &ruleRefExpr{
										pos:  position{line: 1121, col: 16, offset: 41968},
										name: "Spaces",
									},
								},
								&andExpr{
									pos: position{line: 1121, col: 24, offset: 41976},
									expr: &notExpr{
										pos: position{line: 1121, col: 26, offset: 41978},
										expr: &litMatcher{
											pos:        position{line: 1121, col: 27, offset: 41979},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1125, col: 5, offset: 42104},
						run: (*parser).callonLinkTextWithCommaAttribute29,
						expr: &seqExpr{
							pos: position{line: 1125, col: 5, offset: 42104},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1125, col: 5, offset: 42104},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1125, col: 14, offset: 42113},
										expr: &seqExpr{
											pos: position{line: 1125, col: 15, offset: 42114},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1125, col: 15, offset: 42114},
													expr: &litMatcher{
														pos:        position{line: 1125, col: 16, offset: 42115},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1125, col: 20, offset: 42119},
													expr: &litMatcher{
														pos:        position{line: 1125, col: 21, offset: 42120},
														val:        "]",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1125, col: 26, offset: 42125},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1125, col: 26, offset: 42125},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1125, col: 39, offset: 42138},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1125, col: 52, offset: 42151},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1125, col: 62, offset: 42161},
															run: (*parser).callonLinkTextWithCommaAttribute42,
															expr: &seqExpr{
																pos: position{line: 1125, col: 63, offset: 42162},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1125, col: 63, offset: 42162},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1125, col: 64, offset: 42163},
																			name: "QuotedTextPrefix",
																		},
																	},
																	&anyMatcher{
																		line: 1125, col: 81, offset: 42180,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 1127, col: 11, offset: 42249},
									expr: &notExpr{
										pos: position{line: 1127, col: 13, offset: 42251},
										expr: &litMatcher{
											pos:        position{line: 1127, col: 14, offset: 42252},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextAndMoreLinkAttributes",
			pos:  position{line: 1132, col: 1, offset: 42332},
			expr: &actionExpr{
				pos: position{line: 1132, col: 30, offset: 42361},
				run: (*parser).callonTextAndMoreLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1132, col: 30, offset: 42361},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1132, col: 30, offset: 42361},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1132, col: 34, offset: 42365},
							label: "text",
							expr: &zeroOrOneExpr{
								pos: position{line: 1132, col: 39, offset: 42370},
								expr: &ruleRefExpr{
									pos:  position{line: 1132, col: 40, offset: 42371},
									name: "LinkTextAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1132, col: 60, offset: 42391},
							expr: &litMatcher{
								pos:        position{line: 1132, col: 60, offset: 42391},
								val:        ",",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1132, col: 65, offset: 42396},
							expr: &ruleRefExpr{
								pos:  position{line: 1132, col: 65, offset: 42396},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 1132, col: 69, offset: 42400},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1132, col: 80, offset: 42411},
								expr: &ruleRefExpr{
									pos:  position{line: 1132, col: 81, offset: 42412},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1132, col: 100, offset: 42431},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LinkTextAttribute",
			pos:  position{line: 1136, col: 1, offset: 42516},
			expr: &choiceExpr{
				pos: position{line: 1138, col: 5, offset: 42579},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1138, col: 5, offset: 42579},
						run: (*parser).callonLinkTextAttribute2,
						expr: &seqExpr{
							pos: position{line: 1138, col: 5, offset: 42579},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1138, col: 5, offset: 42579},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1138, col: 10, offset: 42584},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1138, col: 19, offset: 42593},
										expr: &seqExpr{
											pos: position{line: 1138, col: 20, offset: 42594},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1138, col: 20, offset: 42594},
													expr: &litMatcher{
														pos:        position{line: 1138, col: 21, offset: 42595},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1138, col: 25, offset: 42599},
													expr: &litMatcher{
														pos:        position{line: 1138, col: 26, offset: 42600},
														val:        "]",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1138, col: 30, offset: 42604},
													expr: &litMatcher{
														pos:        position{line: 1138, col: 31, offset: 42605},
														val:        "\"",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1138, col: 37, offset: 42611},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1138, col: 37, offset: 42611},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1138, col: 50, offset: 42624},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1138, col: 63, offset: 42637},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1138, col: 73, offset: 42647},
															run: (*parser).callonLinkTextAttribute18,
															expr: &seqExpr{
																pos: position{line: 1138, col: 74, offset: 42648},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1138, col: 74, offset: 42648},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1138, col: 75, offset: 42649},
																			name: "QuotedTextPrefix",
																		},
																	},
																	&anyMatcher{
																		line: 1138, col: 92, offset: 42666,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1140, col: 11, offset: 42735},
									val:        "\"",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1140, col: 16, offset: 42740},
									expr: &ruleRefExpr{
										pos:  position{line: 1140, col: 16, offset: 42740},
										name: "Spaces",
									},
								},
								&andExpr{
									pos: position{line: 1140, col: 24, offset: 42748},
									expr: &notExpr{
										pos: position{line: 1140, col: 26, offset: 42750},
										expr: &litMatcher{
											pos:        position{line: 1140, col: 27, offset: 42751},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1144, col: 5, offset: 42876},
						run: (*parser).callonLinkTextAttribute29,
						expr: &seqExpr{
							pos: position{line: 1144, col: 5, offset: 42876},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1144, col: 5, offset: 42876},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1144, col: 14, offset: 42885},
										expr: &seqExpr{
											pos: position{line: 1144, col: 15, offset: 42886},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1144, col: 15, offset: 42886},
													expr: &litMatcher{
														pos:        position{line: 1144, col: 16, offset: 42887},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1144, col: 20, offset: 42891},
													expr: &litMatcher{
														pos:        position{line: 1144, col: 21, offset: 42892},
														val:        ",",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1144, col: 25, offset: 42896},
													expr: &litMatcher{
														pos:        position{line: 1144, col: 26, offset: 42897},
														val:        "]",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1144, col: 31, offset: 42902},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1144, col: 31, offset: 42902},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1144, col: 44, offset: 42915},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1144, col: 57, offset: 42928},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1144, col: 67, offset: 42938},
															run: (*parser).callonLinkTextAttribute44,
															expr: &seqExpr{
																pos: position{line: 1144, col: 68, offset: 42939},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1144, col: 68, offset: 42939},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1144, col: 69, offset: 42940},
																			name: "QuotedTextPrefix",
																		},
																	},
																	&anyMatcher{
																		line: 1144, col: 86, offset: 42957,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 1146, col: 11, offset: 43026},
									expr: &notExpr{
										pos: position{line: 1146, col: 13, offset: 43028},
										expr: &litMatcher{
											pos:        position{line: 1146, col: 14, offset: 43029},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineLinks",
			pos:  position{line: 1151, col: 1, offset: 43179},
			expr: &actionExpr{
				pos: position{line: 1152, col: 5, offset: 43199},
				run: (*parser).callonInlineLinks1,
				expr: &seqExpr{
					pos: position{line: 1152, col: 5, offset: 43199},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1152, col: 5, offset: 43199},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1152, col: 14, offset: 43208},
								expr: &choiceExpr{
									pos: position{line: 1152, col: 15, offset: 43209},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1152, col: 15, offset: 43209},
											name: "SimpleWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1153, col: 11, offset: 43230},
											name: "Spaces",
										},
										&ruleRefExpr{
											pos:  position{line: 1154, col: 11, offset: 43248},
											name: "ResolvedLink",
										},
										&ruleRefExpr{
											pos:  position{line: 1155, col: 11, offset: 43272},
											name: "OtherWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1156, col: 11, offset: 43292},
											name: "Parenthesis",
										},
										&ruleRefExpr{
											pos:  position{line: 1157, col: 11, offset: 43314},
											name: "NEWLINE",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1157, col: 21, offset: 43324},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ResolvedLink",
			pos:  position{line: 1161, col: 1, offset: 43394},
			expr: &choiceExpr{
				pos: position{line: 1161, col: 17, offset: 43410},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1161, col: 17, offset: 43410},
						name: "ResolvedRelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1161, col: 40, offset: 43433},
						name: "ResolvedExternalLink",
					},
				},
			},
		},
		{
			name: "ResolvedRelativeLink",
			pos:  position{line: 1164, col: 1, offset: 43569},
			expr: &actionExpr{
				pos: position{line: 1164, col: 25, offset: 43593},
				run: (*parser).callonResolvedRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1164, col: 25, offset: 43593},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1164, col: 25, offset: 43593},
							val:        "link:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1164, col: 33, offset: 43601},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1164, col: 38, offset: 43606},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1164, col: 38, offset: 43606},
										name: "ResolvedLocation",
									},
									&ruleRefExpr{
										pos:  position{line: 1164, col: 57, offset: 43625},
										name: "ResolvedFileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1164, col: 79, offset: 43647},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1164, col: 97, offset: 43665},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedExternalLink",
			pos:  position{line: 1168, col: 1, offset: 43783},
			expr: &actionExpr{
				pos: position{line: 1168, col: 25, offset: 43807},
				run: (*parser).callonResolvedExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1168, col: 25, offset: 43807},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1168, col: 25, offset: 43807},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1168, col: 30, offset: 43812},
								name: "ResolvedLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1168, col: 48, offset: 43830},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1168, col: 65, offset: 43847},
								expr: &ruleRefExpr{
									pos:  position{line: 1168, col: 66, offset: 43848},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedLink",
			pos:  position{line: 1172, col: 1, offset: 43941},
			expr: &choiceExpr{
				pos: position{line: 1172, col: 15, offset: 43955},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1172, col: 15, offset: 43955},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1172, col: 30, offset: 43970},
						name: "ExternalQuotedLink",
					},
				},
			},
		},
		{
			name: "ExternalQuotedLink",
			pos:  position{line: 1174, col: 1, offset: 43990},
			expr: &actionExpr{
				pos: position{line: 1174, col: 23, offset: 44012},
				run: (*parser).callonExternalQuotedLink1,
				expr: &seqExpr{
					pos: position{line: 1174, col: 23, offset: 44012},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1174, col: 23, offset: 44012},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1174, col: 28, offset: 44017},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1174, col: 38, offset: 44027},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1174, col: 56, offset: 44045},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1181, col: 1, offset: 44380},
			expr: &actionExpr{
				pos: position{line: 1181, col: 15, offset: 44394},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1181, col: 15, offset: 44394},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1181, col: 15, offset: 44394},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1181, col: 26, offset: 44405},
								expr: &ruleRefExpr{
									pos:  position{line: 1181, col: 27, offset: 44406},
									name: "ElementAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1181, col: 47, offset: 44426},
							val:        "image::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1181, col: 57, offset: 44436},
							label: "path",
							expr: &choiceExpr{
								pos: position{line: 1181, col: 63, offset: 44442},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1181, col: 63, offset: 44442},
										name: "Location",
									},
									&ruleRefExpr{
										pos:  position{line: 1181, col: 74, offset: 44453},
										name: "FileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1181, col: 88, offset: 44467},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1181, col: 106, offset: 44485},
								name: "ImageAttributes",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1181, col: 123, offset: 44502},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1185, col: 1, offset: 44622},
			expr: &actionExpr{
				pos: position{line: 1185, col: 16, offset: 44637},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1185, col: 16, offset: 44637},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1185, col: 16, offset: 44637},
							val:        "image:",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1185, col: 25, offset: 44646},
							expr: &litMatcher{
								pos:        position{line: 1185, col: 26, offset: 44647},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1185, col: 30, offset: 44651},
							label: "path",
							expr: &choiceExpr{
								pos: position{line: 1185, col: 36, offset: 44657},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1185, col: 36, offset: 44657},
										name: "Location",
									},
									&ruleRefExpr{
										pos:  position{line: 1185, col: 47, offset: 44668},
										name: "FileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1185, col: 61, offset: 44682},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1185, col: 79, offset: 44700},
								name: "ImageAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAttributes",
			pos:  position{line: 1189, col: 1, offset: 44821},
			expr: &actionExpr{
				pos: position{line: 1189, col: 20, offset: 44840},
				run: (*parser).callonImageAttributes1,
				expr: &seqExpr{
					pos: position{line: 1189, col: 20, offset: 44840},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1189, col: 20, offset: 44840},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1189, col: 24, offset: 44844},
							label: "alt",
							expr: &zeroOrOneExpr{
								pos: position{line: 1189, col: 28, offset: 44848},
								expr: &ruleRefExpr{
									pos:  position{line: 1189, col: 29, offset: 44849},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1189, col: 46, offset: 44866},
							expr: &litMatcher{
								pos:        position{line: 1189, col: 46, offset: 44866},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1189, col: 51, offset: 44871},
							label: "width",
							expr: &zeroOrOneExpr{
								pos: position{line: 1189, col: 57, offset: 44877},
								expr: &ruleRefExpr{
									pos:  position{line: 1189, col: 58, offset: 44878},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1189, col: 75, offset: 44895},
							expr: &litMatcher{
								pos:        position{line: 1189, col: 75, offset: 44895},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1189, col: 80, offset: 44900},
							label: "height",
							expr: &zeroOrOneExpr{
								pos: position{line: 1189, col: 87, offset: 44907},
								expr: &ruleRefExpr{
									pos:  position{line: 1189, col: 88, offset: 44908},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1189, col: 105, offset: 44925},
							expr: &litMatcher{
								pos:        position{line: 1189, col: 105, offset: 44925},
								val:        ",",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1189, col: 110, offset: 44930},
							expr: &ruleRefExpr{
								pos:  position{line: 1189, col: 110, offset: 44930},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 1189, col: 114, offset: 44934},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1189, col: 125, offset: 44945},
								expr: &ruleRefExpr{
									pos:  position{line: 1189, col: 126, offset: 44946},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1189, col: 145, offset: 44965},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1196, col: 1, offset: 45255},
			expr: &choiceExpr{
				pos: position{line: 1196, col: 19, offset: 45273},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1196, col: 19, offset: 45273},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1196, col: 19, offset: 45273},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1196, col: 19, offset: 45273},
									val:        "footnote:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1196, col: 32, offset: 45286},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1196, col: 41, offset: 45295},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1196, col: 58, offset: 45312},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1198, col: 5, offset: 45380},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1198, col: 5, offset: 45380},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1198, col: 5, offset: 45380},
									val:        "footnoteref:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1198, col: 21, offset: 45396},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1198, col: 26, offset: 45401},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1198, col: 39, offset: 45414},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1198, col: 43, offset: 45418},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1198, col: 52, offset: 45427},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1198, col: 69, offset: 45444},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1200, col: 5, offset: 45522},
						run: (*parser).callonInlineFootnote17,
						expr: &seqExpr{
							pos: position{line: 1200, col: 5, offset: 45522},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1200, col: 5, offset: 45522},
									val:        "footnoteref:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1200, col: 21, offset: 45538},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1200, col: 26, offset: 45543},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1200, col: 39, offset: 45556},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1204, col: 1, offset: 45664},
			expr: &actionExpr{
				pos: position{line: 1204, col: 16, offset: 45679},
				run: (*parser).callonFootnoteRef1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1204, col: 16, offset: 45679},
					expr: &choiceExpr{
						pos: position{line: 1204, col: 17, offset: 45680},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1204, col: 17, offset: 45680},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1204, col: 29, offset: 45692},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1204, col: 39, offset: 45702},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1204, col: 39, offset: 45702},
										expr: &litMatcher{
											pos:        position{line: 1204, col: 40, offset: 45703},
											val:        ",",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1204, col: 44, offset: 45707},
										expr: &litMatcher{
											pos:        position{line: 1204, col: 45, offset: 45708},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1204, col: 49, offset: 45712},
										expr: &ruleRefExpr{
											pos:  position{line: 1204, col: 50, offset: 45713},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 1204, col: 55, offset: 45718,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1208, col: 1, offset: 45803},
			expr: &actionExpr{
				pos: position{line: 1208, col: 20, offset: 45822},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1208, col: 20, offset: 45822},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1208, col: 29, offset: 45831},
						expr: &seqExpr{
							pos: position{line: 1208, col: 30, offset: 45832},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1208, col: 30, offset: 45832},
									expr: &litMatcher{
										pos:        position{line: 1208, col: 31, offset: 45833},
										val:        "]",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 1208, col: 35, offset: 45837},
									expr: &ruleRefExpr{
										pos:  position{line: 1208, col: 36, offset: 45838},
										name: "EOL",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1208, col: 40, offset: 45842},
									expr: &ruleRefExpr{
										pos:  position{line: 1208, col: 40, offset: 45842},
										name: "WS",
									},
								},
								&notExpr{
									pos: position{line: 1208, col: 44, offset: 45846},
									expr: &ruleRefExpr{
										pos:  position{line: 1208, col: 45, offset: 45847},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1208, col: 61, offset: 45863},
									name: "InlineElement",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1208, col: 75, offset: 45877},
									expr: &ruleRefExpr{
										pos:  position{line: 1208, col: 75, offset: 45877},
										name: "WS",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1215, col: 1, offset: 46191},
			expr: &actionExpr{
				pos: position{line: 1215, col: 19, offset: 46209},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1215, col: 19, offset: 46209},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1215, col: 19, offset: 46209},
							expr: &ruleRefExpr{
								pos:  position{line: 1215, col: 20, offset: 46210},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1216, col: 5, offset: 46239},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1216, col: 12, offset: 46246},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1216, col: 12, offset: 46246},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1217, col: 11, offset: 46269},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1218, col: 11, offset: 46293},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1219, col: 11, offset: 46317},
										name: "VerseBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1220, col: 11, offset: 46339},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1221, col: 11, offset: 46361},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1222, col: 11, offset: 46384},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1223, col: 11, offset: 46412},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1224, col: 11, offset: 46428},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1228, col: 1, offset: 46469},
			expr: &choiceExpr{
				pos: position{line: 1228, col: 19, offset: 46487},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1228, col: 19, offset: 46487},
						name: "LiteralBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1229, col: 19, offset: 46528},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1230, col: 19, offset: 46568},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1231, col: 19, offset: 46609},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1232, col: 19, offset: 46650},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1233, col: 19, offset: 46691},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1234, col: 19, offset: 46729},
						name: "SidebarBlockDelimiter",
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1240, col: 1, offset: 46948},
			expr: &seqExpr{
				pos: position{line: 1240, col: 25, offset: 46972},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1240, col: 25, offset: 46972},
						val:        "```",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1240, col: 31, offset: 46978},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1242, col: 1, offset: 46984},
			expr: &actionExpr{
				pos: position{line: 1242, col: 16, offset: 46999},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1242, col: 16, offset: 46999},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1242, col: 16, offset: 46999},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1242, col: 27, offset: 47010},
								expr: &ruleRefExpr{
									pos:  position{line: 1242, col: 28, offset: 47011},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1242, col: 48, offset: 47031},
							name: "FencedBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1242, col: 69, offset: 47052},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1242, col: 77, offset: 47060},
								expr: &ruleRefExpr{
									pos:  position{line: 1242, col: 78, offset: 47061},
									name: "FencedBlockContent",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1242, col: 100, offset: 47083},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1242, col: 100, offset: 47083},
									name: "FencedBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1242, col: 123, offset: 47106},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockContent",
			pos:  position{line: 1246, col: 1, offset: 47214},
			expr: &choiceExpr{
				pos: position{line: 1246, col: 23, offset: 47236},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1246, col: 23, offset: 47236},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1246, col: 35, offset: 47248},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1246, col: 51, offset: 47264},
						name: "ListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 1246, col: 62, offset: 47275},
						name: "FencedBlockParagraph",
					},
				},
			},
		},
		{
			name: "FencedBlockParagraph",
			pos:  position{line: 1249, col: 1, offset: 47315},
			expr: &actionExpr{
				pos: position{line: 1249, col: 25, offset: 47339},
				run: (*parser).callonFencedBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1249, col: 25, offset: 47339},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1249, col: 31, offset: 47345},
						expr: &ruleRefExpr{
							pos:  position{line: 1249, col: 32, offset: 47346},
							name: "FencedBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockParagraphLine",
			pos:  position{line: 1253, col: 1, offset: 47459},
			expr: &actionExpr{
				pos: position{line: 1253, col: 29, offset: 47487},
				run: (*parser).callonFencedBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1253, col: 29, offset: 47487},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1253, col: 29, offset: 47487},
							expr: &ruleRefExpr{
								pos:  position{line: 1253, col: 30, offset: 47488},
								name: "FencedBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1253, col: 51, offset: 47509},
							expr: &ruleRefExpr{
								pos:  position{line: 1253, col: 52, offset: 47510},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1253, col: 62, offset: 47520},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1253, col: 68, offset: 47526},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1260, col: 1, offset: 47764},
			expr: &seqExpr{
				pos: position{line: 1260, col: 26, offset: 47789},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1260, col: 26, offset: 47789},
						val:        "----",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1260, col: 33, offset: 47796},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1262, col: 1, offset: 47802},
			expr: &actionExpr{
				pos: position{line: 1262, col: 17, offset: 47818},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1262, col: 17, offset: 47818},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1262, col: 17, offset: 47818},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1262, col: 28, offset: 47829},
								expr: &ruleRefExpr{
									pos:  position{line: 1262, col: 29, offset: 47830},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1262, col: 49, offset: 47850},
							name: "ListingBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1262, col: 71, offset: 47872},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1262, col: 79, offset: 47880},
								expr: &ruleRefExpr{
									pos:  position{line: 1262, col: 80, offset: 47881},
									name: "ListingBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1262, col: 103, offset: 47904},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1262, col: 103, offset: 47904},
									name: "ListingBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1262, col: 127, offset: 47928},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockElement",
			pos:  position{line: 1266, col: 1, offset: 48037},
			expr: &choiceExpr{
				pos: position{line: 1266, col: 24, offset: 48060},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1266, col: 24, offset: 48060},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1266, col: 40, offset: 48076},
						name: "ListingBlockParagraph",
					},
				},
			},
		},
		{
			name: "ListingBlockParagraph",
			pos:  position{line: 1268, col: 1, offset: 48099},
			expr: &actionExpr{
				pos: position{line: 1268, col: 26, offset: 48124},
				run: (*parser).callonListingBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1268, col: 26, offset: 48124},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1268, col: 32, offset: 48130},
						expr: &ruleRefExpr{
							pos:  position{line: 1268, col: 33, offset: 48131},
							name: "ListingBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockParagraphLine",
			pos:  position{line: 1272, col: 1, offset: 48250},
			expr: &actionExpr{
				pos: position{line: 1272, col: 30, offset: 48279},
				run: (*parser).callonListingBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1272, col: 30, offset: 48279},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1272, col: 30, offset: 48279},
							expr: &ruleRefExpr{
								pos:  position{line: 1272, col: 31, offset: 48280},
								name: "ListingBlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1272, col: 53, offset: 48302},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1272, col: 59, offset: 48308},
								run: (*parser).callonListingBlockParagraphLine6,
								expr: &seqExpr{
									pos: position{line: 1272, col: 59, offset: 48308},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1272, col: 59, offset: 48308},
											expr: &ruleRefExpr{
												pos:  position{line: 1272, col: 60, offset: 48309},
												name: "EOF",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1272, col: 64, offset: 48313},
											expr: &choiceExpr{
												pos: position{line: 1272, col: 65, offset: 48314},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1272, col: 65, offset: 48314},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1272, col: 77, offset: 48326},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 1272, col: 87, offset: 48336},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 1272, col: 87, offset: 48336},
																expr: &ruleRefExpr{
																	pos:  position{line: 1272, col: 88, offset: 48337},
																	name: "EOL",
																},
															},
															&anyMatcher{
																line: 1272, col: 92, offset: 48341,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1272, col: 128, offset: 48377},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1279, col: 1, offset: 48703},
			expr: &seqExpr{
				pos: position{line: 1279, col: 26, offset: 48728},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1279, col: 26, offset: 48728},
						val:        "====",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1279, col: 33, offset: 48735},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1281, col: 1, offset: 48741},
			expr: &actionExpr{
				pos: position{line: 1281, col: 17, offset: 48757},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1281, col: 17, offset: 48757},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1281, col: 17, offset: 48757},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1281, col: 28, offset: 48768},
								expr: &ruleRefExpr{
									pos:  position{line: 1281, col: 29, offset: 48769},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1281, col: 49, offset: 48789},
							name: "ExampleBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1281, col: 71, offset: 48811},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1281, col: 79, offset: 48819},
								expr: &choiceExpr{
									pos: position{line: 1281, col: 80, offset: 48820},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1281, col: 80, offset: 48820},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 1281, col: 92, offset: 48832},
											name: "FileInclusion",
										},
										&ruleRefExpr{
											pos:  position{line: 1281, col: 108, offset: 48848},
											name: "ListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1281, col: 119, offset: 48859},
											name: "ExampleBlockParagraph",
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1281, col: 145, offset: 48885},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1281, col: 145, offset: 48885},
									name: "ExampleBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1281, col: 169, offset: 48909},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockParagraph",
			pos:  position{line: 1286, col: 1, offset: 49036},
			expr: &actionExpr{
				pos: position{line: 1286, col: 26, offset: 49061},
				run: (*parser).callonExampleBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1286, col: 26, offset: 49061},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1286, col: 32, offset: 49067},
						expr: &ruleRefExpr{
							pos:  position{line: 1286, col: 33, offset: 49068},
							name: "ExampleBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockParagraphLine",
			pos:  position{line: 1290, col: 1, offset: 49182},
			expr: &actionExpr{
				pos: position{line: 1290, col: 30, offset: 49211},
				run: (*parser).callonExampleBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1290, col: 30, offset: 49211},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1290, col: 30, offset: 49211},
							expr: &ruleRefExpr{
								pos:  position{line: 1290, col: 31, offset: 49212},
								name: "ExampleBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1290, col: 53, offset: 49234},
							expr: &ruleRefExpr{
								pos:  position{line: 1290, col: 54, offset: 49235},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1290, col: 64, offset: 49245},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1290, col: 70, offset: 49251},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1297, col: 1, offset: 49487},
			expr: &seqExpr{
				pos: position{line: 1297, col: 24, offset: 49510},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1297, col: 24, offset: 49510},
						val:        "____",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1297, col: 31, offset: 49517},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1299, col: 1, offset: 49548},
			expr: &actionExpr{
				pos: position{line: 1299, col: 15, offset: 49562},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1299, col: 15, offset: 49562},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1299, col: 15, offset: 49562},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1299, col: 26, offset: 49573},
								expr: &ruleRefExpr{
									pos:  position{line: 1299, col: 27, offset: 49574},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1299, col: 47, offset: 49594},
							name: "QuoteBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1299, col: 67, offset: 49614},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1299, col: 75, offset: 49622},
								expr: &ruleRefExpr{
									pos:  position{line: 1299, col: 76, offset: 49623},
									name: "QuoteBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1299, col: 97, offset: 49644},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1299, col: 97, offset: 49644},
									name: "QuoteBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1299, col: 119, offset: 49666},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockElement",
			pos:  position{line: 1303, col: 1, offset: 49773},
			expr: &actionExpr{
				pos: position{line: 1304, col: 5, offset: 49799},
				run: (*parser).callonQuoteBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1304, col: 5, offset: 49799},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1304, col: 5, offset: 49799},
							expr: &ruleRefExpr{
								pos:  position{line: 1304, col: 6, offset: 49800},
								name: "QuoteBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1304, col: 26, offset: 49820},
							expr: &ruleRefExpr{
								pos:  position{line: 1304, col: 27, offset: 49821},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1304, col: 31, offset: 49825},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1304, col: 40, offset: 49834},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1304, col: 40, offset: 49834},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1305, col: 15, offset: 49859},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 1306, col: 15, offset: 49887},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1307, col: 15, offset: 49913},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1308, col: 15, offset: 49936},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1309, col: 15, offset: 49962},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1310, col: 15, offset: 49989},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1311, col: 15, offset: 50016},
										name: "CommentBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1312, col: 15, offset: 50043},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1313, col: 15, offset: 50075},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1314, col: 15, offset: 50101},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1315, col: 15, offset: 50128},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1316, col: 15, offset: 50149},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1317, col: 15, offset: 50177},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 1318, col: 15, offset: 50221},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 1319, col: 15, offset: 50259},
										name: "TableOfContentsMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1320, col: 15, offset: 50294},
										name: "QuoteBlockParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockParagraph",
			pos:  position{line: 1324, col: 1, offset: 50353},
			expr: &actionExpr{
				pos: position{line: 1324, col: 24, offset: 50376},
				run: (*parser).callonQuoteBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1324, col: 24, offset: 50376},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1324, col: 30, offset: 50382},
						expr: &ruleRefExpr{
							pos:  position{line: 1324, col: 31, offset: 50383},
							name: "InlineElements",
						},
					},
				},
			},
		},
		{
			name: "VerseBlock",
			pos:  position{line: 1333, col: 1, offset: 50729},
			expr: &actionExpr{
				pos: position{line: 1333, col: 15, offset: 50743},
				run: (*parser).callonVerseBlock1,
				expr: &seqExpr{
					pos: position{line: 1333, col: 15, offset: 50743},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1333, col: 15, offset: 50743},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1333, col: 27, offset: 50755},
								name: "ElementAttributes",
							},
						},
						&andCodeExpr{
							pos: position{line: 1334, col: 5, offset: 50779},
							run: (*parser).callonVerseBlock5,
						},
						&ruleRefExpr{
							pos:  position{line: 1338, col: 5, offset: 50965},
							name: "QuoteBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1338, col: 25, offset: 50985},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1338, col: 33, offset: 50993},
								expr: &ruleRefExpr{
									pos:  position{line: 1338, col: 34, offset: 50994},
									name: "VerseBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1338, col: 55, offset: 51015},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1338, col: 55, offset: 51015},
									name: "QuoteBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1338, col: 77, offset: 51037},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockElement",
			pos:  position{line: 1342, col: 1, offset: 51152},
			expr: &choiceExpr{
				pos: position{line: 1342, col: 22, offset: 51173},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1342, col: 22, offset: 51173},
						name: "VerseFileInclude",
					},
					&ruleRefExpr{
						pos:  position{line: 1342, col: 41, offset: 51192},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1342, col: 53, offset: 51204},
						name: "VerseBlockParagraph",
					},
				},
			},
		},
		{
			name: "VerseFileInclude",
			pos:  position{line: 1344, col: 1, offset: 51225},
			expr: &actionExpr{
				pos: position{line: 1344, col: 21, offset: 51245},
				run: (*parser).callonVerseFileInclude1,
				expr: &seqExpr{
					pos: position{line: 1344, col: 21, offset: 51245},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1344, col: 21, offset: 51245},
							expr: &ruleRefExpr{
								pos:  position{line: 1344, col: 22, offset: 51246},
								name: "QuoteBlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1344, col: 42, offset: 51266},
							label: "include",
							expr: &ruleRefExpr{
								pos:  position{line: 1344, col: 51, offset: 51275},
								name: "FileInclusion",
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraph",
			pos:  position{line: 1349, col: 1, offset: 51337},
			expr: &actionExpr{
				pos: position{line: 1349, col: 24, offset: 51360},
				run: (*parser).callonVerseBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1349, col: 24, offset: 51360},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1349, col: 30, offset: 51366},
						expr: &ruleRefExpr{
							pos:  position{line: 1349, col: 31, offset: 51367},
							name: "VerseBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLine",
			pos:  position{line: 1353, col: 1, offset: 51457},
			expr: &actionExpr{
				pos: position{line: 1353, col: 28, offset: 51484},
				run: (*parser).callonVerseBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1353, col: 28, offset: 51484},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1353, col: 28, offset: 51484},
							expr: &ruleRefExpr{
								pos:  position{line: 1353, col: 29, offset: 51485},
								name: "QuoteBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1353, col: 49, offset: 51505},
							expr: &ruleRefExpr{
								pos:  position{line: 1353, col: 50, offset: 51506},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1353, col: 60, offset: 51516},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1353, col: 66, offset: 51522},
								run: (*parser).callonVerseBlockParagraphLine8,
								expr: &seqExpr{
									pos: position{line: 1353, col: 66, offset: 51522},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1353, col: 66, offset: 51522},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1353, col: 75, offset: 51531},
												expr: &ruleRefExpr{
													pos:  position{line: 1353, col: 76, offset: 51532},
													name: "VerseBlockParagraphLineElement",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1353, col: 109, offset: 51565},
											name: "EOL",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLineElement",
			pos:  position{line: 1359, col: 1, offset: 51661},
			expr: &actionExpr{
				pos: position{line: 1359, col: 35, offset: 51695},
				run: (*parser).callonVerseBlockParagraphLineElement1,
				expr: &seqExpr{
					pos: position{line: 1359, col: 35, offset: 51695},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1359, col: 35, offset: 51695},
							expr: &ruleRefExpr{
								pos:  position{line: 1359, col: 36, offset: 51696},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 1359, col: 40, offset: 51700},
							expr: &ruleRefExpr{
								pos:  position{line: 1359, col: 41, offset: 51701},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 1360, col: 5, offset: 51716},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1360, col: 14, offset: 51725},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1360, col: 14, offset: 51725},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 1361, col: 11, offset: 51743},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 1362, col: 11, offset: 51766},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 1363, col: 11, offset: 51782},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1364, col: 11, offset: 51805},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 1365, col: 11, offset: 51831},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1366, col: 11, offset: 51853},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1367, col: 11, offset: 51880},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 1368, col: 11, offset: 51906},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1369, col: 11, offset: 51947},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 1370, col: 11, offset: 51974},
										name: "OtherWord",
									},
									&ruleRefExpr{
										pos:  position{line: 1371, col: 11, offset: 51994},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1378, col: 1, offset: 52226},
			expr: &seqExpr{
				pos: position{line: 1378, col: 26, offset: 52251},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1378, col: 26, offset: 52251},
						val:        "****",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1378, col: 33, offset: 52258},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1380, col: 1, offset: 52264},
			expr: &actionExpr{
				pos: position{line: 1380, col: 17, offset: 52280},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1380, col: 17, offset: 52280},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1380, col: 17, offset: 52280},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1380, col: 28, offset: 52291},
								expr: &ruleRefExpr{
									pos:  position{line: 1380, col: 29, offset: 52292},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1380, col: 49, offset: 52312},
							name: "SidebarBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1380, col: 71, offset: 52334},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1380, col: 79, offset: 52342},
								expr: &ruleRefExpr{
									pos:  position{line: 1380, col: 80, offset: 52343},
									name: "SidebarBlockContent",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1380, col: 104, offset: 52367},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1380, col: 104, offset: 52367},
									name: "SidebarBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1380, col: 128, offset: 52391},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockContent",
			pos:  position{line: 1384, col: 1, offset: 52500},
			expr: &choiceExpr{
				pos: position{line: 1384, col: 24, offset: 52523},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1384, col: 24, offset: 52523},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1384, col: 36, offset: 52535},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1384, col: 52, offset: 52551},
						name: "ListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 1384, col: 63, offset: 52562},
						name: "NonSidebarBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 1384, col: 81, offset: 52580},
						name: "SidebarBlockParagraph",
					},
				},
			},
		},
		{
			name: "NonSidebarBlock",
			pos:  position{line: 1386, col: 1, offset: 52603},
			expr: &actionExpr{
				pos: position{line: 1386, col: 20, offset: 52622},
				run: (*parser).callonNonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1386, col: 20, offset: 52622},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1386, col: 20, offset: 52622},
							expr: &ruleRefExpr{
								pos:  position{line: 1386, col: 21, offset: 52623},
								name: "SidebarBlock",
							},
						},
						&labeledExpr{
							pos:   position{line: 1386, col: 34, offset: 52636},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1386, col: 43, offset: 52645},
								name: "DelimitedBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockParagraph",
			pos:  position{line: 1391, col: 1, offset: 52708},
			expr: &actionExpr{
				pos: position{line: 1391, col: 26, offset: 52733},
				run: (*parser).callonSidebarBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1391, col: 26, offset: 52733},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1391, col: 32, offset: 52739},
						expr: &ruleRefExpr{
							pos:  position{line: 1391, col: 33, offset: 52740},
							name: "SidebarBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockParagraphLine",
			pos:  position{line: 1395, col: 1, offset: 52854},
			expr: &actionExpr{
				pos: position{line: 1395, col: 30, offset: 52883},
				run: (*parser).callonSidebarBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1395, col: 30, offset: 52883},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1395, col: 30, offset: 52883},
							expr: &ruleRefExpr{
								pos:  position{line: 1395, col: 31, offset: 52884},
								name: "SidebarBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1395, col: 53, offset: 52906},
							expr: &ruleRefExpr{
								pos:  position{line: 1395, col: 54, offset: 52907},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1395, col: 64, offset: 52917},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1395, col: 70, offset: 52923},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1403, col: 1, offset: 53154},
			expr: &actionExpr{
				pos: position{line: 1403, col: 10, offset: 53163},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1403, col: 10, offset: 53163},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1403, col: 10, offset: 53163},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1403, col: 21, offset: 53174},
								expr: &ruleRefExpr{
									pos:  position{line: 1403, col: 22, offset: 53175},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1403, col: 42, offset: 53195},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1404, col: 5, offset: 53214},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1404, col: 12, offset: 53221},
								expr: &ruleRefExpr{
									pos:  position{line: 1404, col: 13, offset: 53222},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1405, col: 5, offset: 53244},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1405, col: 11, offset: 53250},
								expr: &ruleRefExpr{
									pos:  position{line: 1405, col: 12, offset: 53251},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1406, col: 6, offset: 53268},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1406, col: 6, offset: 53268},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1406, col: 23, offset: 53285},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1410, col: 1, offset: 53400},
			expr: &seqExpr{
				pos: position{line: 1410, col: 23, offset: 53422},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1410, col: 23, offset: 53422},
						val:        "|",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1410, col: 27, offset: 53426},
						expr: &ruleRefExpr{
							pos:  position{line: 1410, col: 27, offset: 53426},
							name: "WS",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1412, col: 1, offset: 53431},
			expr: &seqExpr{
				pos: position{line: 1412, col: 19, offset: 53449},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1412, col: 19, offset: 53449},
						val:        "|===",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1412, col: 26, offset: 53456},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1415, col: 1, offset: 53525},
			expr: &actionExpr{
				pos: position{line: 1415, col: 20, offset: 53544},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1415, col: 20, offset: 53544},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1415, col: 20, offset: 53544},
							expr: &ruleRefExpr{
								pos:  position{line: 1415, col: 21, offset: 53545},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1415, col: 36, offset: 53560},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1415, col: 42, offset: 53566},
								expr: &ruleRefExpr{
									pos:  position{line: 1415, col: 43, offset: 53567},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1415, col: 55, offset: 53579},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1415, col: 59, offset: 53583},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1419, col: 1, offset: 53651},
			expr: &actionExpr{
				pos: position{line: 1419, col: 14, offset: 53664},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1419, col: 14, offset: 53664},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1419, col: 14, offset: 53664},
							expr: &ruleRefExpr{
								pos:  position{line: 1419, col: 15, offset: 53665},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1419, col: 30, offset: 53680},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1419, col: 36, offset: 53686},
								expr: &ruleRefExpr{
									pos:  position{line: 1419, col: 37, offset: 53687},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1419, col: 49, offset: 53699},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1419, col: 53, offset: 53703},
							expr: &ruleRefExpr{
								pos:  position{line: 1419, col: 53, offset: 53703},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1423, col: 1, offset: 53772},
			expr: &actionExpr{
				pos: position{line: 1423, col: 14, offset: 53785},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1423, col: 14, offset: 53785},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1423, col: 14, offset: 53785},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1423, col: 33, offset: 53804},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1423, col: 42, offset: 53813},
								expr: &seqExpr{
									pos: position{line: 1423, col: 43, offset: 53814},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1423, col: 43, offset: 53814},
											expr: &ruleRefExpr{
												pos:  position{line: 1423, col: 44, offset: 53815},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1423, col: 63, offset: 53834},
											expr: &ruleRefExpr{
												pos:  position{line: 1423, col: 64, offset: 53835},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1423, col: 68, offset: 53839},
											expr: &ruleRefExpr{
												pos:  position{line: 1423, col: 68, offset: 53839},
												name: "WS",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1423, col: 72, offset: 53843},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1423, col: 86, offset: 53857},
											expr: &ruleRefExpr{
												pos:  position{line: 1423, col: 86, offset: 53857},
												name: "WS",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1430, col: 1, offset: 54103},
			expr: &litMatcher{
				pos:        position{line: 1430, col: 26, offset: 54128},
				val:        "////",
				ignoreCase: false,
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1432, col: 1, offset: 54136},
			expr: &actionExpr{
				pos: position{line: 1432, col: 17, offset: 54152},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1432, col: 17, offset: 54152},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1432, col: 17, offset: 54152},
							name: "CommentBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1432, col: 39, offset: 54174},
							expr: &ruleRefExpr{
								pos:  position{line: 1432, col: 39, offset: 54174},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1432, col: 43, offset: 54178},
							name: "NEWLINE",
						},
						&labeledExpr{
							pos:   position{line: 1432, col: 51, offset: 54186},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1432, col: 59, offset: 54194},
								expr: &ruleRefExpr{
									pos:  position{line: 1432, col: 60, offset: 54195},
									name: "CommentBlockLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1432, col: 81, offset: 54216},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1432, col: 82, offset: 54217},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1432, col: 82, offset: 54217},
											name: "CommentBlockDelimiter",
										},
										&ruleRefExpr{
											pos:  position{line: 1432, col: 104, offset: 54239},
											name: "EOLS",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1432, col: 112, offset: 54247},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockLine",
			pos:  position{line: 1436, col: 1, offset: 54353},
			expr: &actionExpr{
				pos: position{line: 1436, col: 21, offset: 54373},
				run: (*parser).callonCommentBlockLine1,
				expr: &seqExpr{
					pos: position{line: 1436, col: 21, offset: 54373},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1436, col: 21, offset: 54373},
							expr: &choiceExpr{
								pos: position{line: 1436, col: 22, offset: 54374},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1436, col: 22, offset: 54374},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 1436, col: 34, offset: 54386},
										name: "Spaces",
									},
									&seqExpr{
										pos: position{line: 1436, col: 44, offset: 54396},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1436, col: 44, offset: 54396},
												expr: &ruleRefExpr{
													pos:  position{line: 1436, col: 45, offset: 54397},
													name: "CommentBlockDelimiter",
												},
											},
											&notExpr{
												pos: position{line: 1436, col: 67, offset: 54419},
												expr: &ruleRefExpr{
													pos:  position{line: 1436, col: 68, offset: 54420},
													name: "EOL",
												},
											},
											&anyMatcher{
												line: 1436, col: 72, offset: 54424,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1436, col: 77, offset: 54429},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1440, col: 1, offset: 54469},
			expr: &actionExpr{
				pos: position{line: 1440, col: 22, offset: 54490},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1440, col: 22, offset: 54490},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1440, col: 22, offset: 54490},
							expr: &ruleRefExpr{
								pos:  position{line: 1440, col: 23, offset: 54491},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1440, col: 45, offset: 54513},
							expr: &ruleRefExpr{
								pos:  position{line: 1440, col: 45, offset: 54513},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 1440, col: 49, offset: 54517},
							val:        "//",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1440, col: 54, offset: 54522},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1440, col: 63, offset: 54531},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1440, col: 89, offset: 54557},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1444, col: 1, offset: 54622},
			expr: &actionExpr{
				pos: position{line: 1444, col: 29, offset: 54650},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1444, col: 29, offset: 54650},
					expr: &choiceExpr{
						pos: position{line: 1444, col: 30, offset: 54651},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1444, col: 30, offset: 54651},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1444, col: 42, offset: 54663},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1444, col: 52, offset: 54673},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1444, col: 52, offset: 54673},
										expr: &ruleRefExpr{
											pos:  position{line: 1444, col: 53, offset: 54674},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 1444, col: 58, offset: 54679,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 1452, col: 1, offset: 54988},
			expr: &choiceExpr{
				pos: position{line: 1452, col: 17, offset: 55004},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1452, col: 17, offset: 55004},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 1452, col: 49, offset: 55036},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 1452, col: 78, offset: 55065},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 1454, col: 1, offset: 55101},
			expr: &litMatcher{
				pos:        position{line: 1454, col: 26, offset: 55126},
				val:        "....",
				ignoreCase: false,
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 1457, col: 1, offset: 55198},
			expr: &actionExpr{
				pos: position{line: 1457, col: 31, offset: 55228},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 1457, col: 31, offset: 55228},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1457, col: 31, offset: 55228},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1457, col: 42, offset: 55239},
								expr: &ruleRefExpr{
									pos:  position{line: 1457, col: 43, offset: 55240},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1457, col: 63, offset: 55260},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1457, col: 70, offset: 55267},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 1462, col: 1, offset: 55497},
			expr: &actionExpr{
				pos: position{line: 1463, col: 5, offset: 55537},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 1463, col: 5, offset: 55537},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1463, col: 5, offset: 55537},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1463, col: 16, offset: 55548},
								run: (*parser).callonParagraphWithHeadingSpacesLines4,
								expr: &seqExpr{
									pos: position{line: 1463, col: 16, offset: 55548},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1463, col: 16, offset: 55548},
											name: "WS",
										},
										&oneOrMoreExpr{
											pos: position{line: 1463, col: 19, offset: 55551},
											expr: &choiceExpr{
												pos: position{line: 1463, col: 20, offset: 55552},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1463, col: 20, offset: 55552},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1463, col: 32, offset: 55564},
														name: "Spaces",
													},
													&actionExpr{
														pos: position{line: 1463, col: 41, offset: 55573},
														run: (*parser).callonParagraphWithHeadingSpacesLines11,
														expr: &seqExpr{
															pos: position{line: 1463, col: 42, offset: 55574},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 1463, col: 42, offset: 55574},
																	expr: &ruleRefExpr{
																		pos:  position{line: 1463, col: 43, offset: 55575},
																		name: "EOL",
																	},
																},
																&anyMatcher{
																	line: 1463, col: 48, offset: 55580,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1467, col: 8, offset: 55671},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 1468, col: 5, offset: 55734},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1468, col: 16, offset: 55745},
								expr: &actionExpr{
									pos: position{line: 1469, col: 9, offset: 55755},
									run: (*parser).callonParagraphWithHeadingSpacesLines19,
									expr: &seqExpr{
										pos: position{line: 1469, col: 9, offset: 55755},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1469, col: 9, offset: 55755},
												expr: &ruleRefExpr{
													pos:  position{line: 1469, col: 10, offset: 55756},
													name: "BlankLine",
												},
											},
											&labeledExpr{
												pos:   position{line: 1470, col: 9, offset: 55775},
												label: "otherLine",
												expr: &actionExpr{
													pos: position{line: 1470, col: 20, offset: 55786},
													run: (*parser).callonParagraphWithHeadingSpacesLines24,
													expr: &oneOrMoreExpr{
														pos: position{line: 1470, col: 20, offset: 55786},
														expr: &choiceExpr{
															pos: position{line: 1470, col: 21, offset: 55787},
															alternatives: []interface{}{
																&ruleRefExpr{
																	pos:  position{line: 1470, col: 21, offset: 55787},
																	name: "Alphanums",
																},
																&ruleRefExpr{
																	pos:  position{line: 1470, col: 33, offset: 55799},
																	name: "Spaces",
																},
																&seqExpr{
																	pos: position{line: 1470, col: 43, offset: 55809},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 1470, col: 43, offset: 55809},
																			expr: &ruleRefExpr{
																				pos:  position{line: 1470, col: 44, offset: 55810},
																				name: "EOL",
																			},
																		},
																		&anyMatcher{
																			line: 1470, col: 49, offset: 55815,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1472, col: 12, offset: 55872},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 1479, col: 1, offset: 56102},
			expr: &actionExpr{
				pos: position{line: 1479, col: 39, offset: 56140},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1479, col: 39, offset: 56140},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1479, col: 39, offset: 56140},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1479, col: 50, offset: 56151},
								expr: &ruleRefExpr{
									pos:  position{line: 1479, col: 51, offset: 56152},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1480, col: 9, offset: 56180},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1480, col: 31, offset: 56202},
							expr: &ruleRefExpr{
								pos:  position{line: 1480, col: 31, offset: 56202},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1480, col: 35, offset: 56206},
							name: "NEWLINE",
						},
						&labeledExpr{
							pos:   position{line: 1480, col: 43, offset: 56214},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1480, col: 50, offset: 56221},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 1480, col: 92, offset: 56263},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1480, col: 93, offset: 56264},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1480, col: 93, offset: 56264},
											name: "LiteralBlockDelimiter",
										},
										&ruleRefExpr{
											pos:  position{line: 1480, col: 115, offset: 56286},
											name: "EOLS",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1480, col: 123, offset: 56294},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 1485, col: 1, offset: 56453},
			expr: &actionExpr{
				pos: position{line: 1485, col: 44, offset: 56496},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 1485, col: 44, offset: 56496},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1485, col: 50, offset: 56502},
						expr: &ruleRefExpr{
							pos:  position{line: 1485, col: 51, offset: 56503},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 1489, col: 1, offset: 56587},
			expr: &actionExpr{
				pos: position{line: 1490, col: 5, offset: 56642},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 1490, col: 5, offset: 56642},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1490, col: 5, offset: 56642},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1490, col: 11, offset: 56648},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &zeroOrMoreExpr{
									pos: position{line: 1490, col: 11, offset: 56648},
									expr: &choiceExpr{
										pos: position{line: 1490, col: 12, offset: 56649},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1490, col: 12, offset: 56649},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 1490, col: 24, offset: 56661},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 1490, col: 34, offset: 56671},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 1490, col: 34, offset: 56671},
														expr: &ruleRefExpr{
															pos:  position{line: 1490, col: 35, offset: 56672},
															name: "LiteralBlockDelimiter",
														},
													},
													&notExpr{
														pos: position{line: 1490, col: 57, offset: 56694},
														expr: &ruleRefExpr{
															pos:  position{line: 1490, col: 58, offset: 56695},
															name: "EOL",
														},
													},
													&anyMatcher{
														line: 1490, col: 62, offset: 56699,
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1492, col: 8, offset: 56748},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 1497, col: 1, offset: 56874},
			expr: &actionExpr{
				pos: position{line: 1498, col: 5, offset: 56912},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 1498, col: 5, offset: 56912},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1498, col: 5, offset: 56912},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1498, col: 16, offset: 56923},
								expr: &ruleRefExpr{
									pos:  position{line: 1498, col: 17, offset: 56924},
									name: "ElementAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1499, col: 5, offset: 56948},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 1506, col: 5, offset: 57162},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1506, col: 12, offset: 57169},
								name: "ParagraphWithLiteralAttributeLines",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 1510, col: 1, offset: 57319},
			expr: &actionExpr{
				pos: position{line: 1510, col: 16, offset: 57334},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 1510, col: 16, offset: 57334},
					val:        "literal",
					ignoreCase: false,
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLines",
			pos:  position{line: 1515, col: 1, offset: 57417},
			expr: &actionExpr{
				pos: position{line: 1515, col: 39, offset: 57455},
				run: (*parser).callonParagraphWithLiteralAttributeLines1,
				expr: &labeledExpr{
					pos:   position{line: 1515, col: 39, offset: 57455},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1515, col: 45, offset: 57461},
						expr: &ruleRefExpr{
							pos:  position{line: 1515, col: 46, offset: 57462},
							name: "ParagraphWithLiteralAttributeLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLine",
			pos:  position{line: 1519, col: 1, offset: 57542},
			expr: &actionExpr{
				pos: position{line: 1519, col: 38, offset: 57579},
				run: (*parser).callonParagraphWithLiteralAttributeLine1,
				expr: &seqExpr{
					pos: position{line: 1519, col: 38, offset: 57579},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1519, col: 38, offset: 57579},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1519, col: 44, offset: 57585},
								run: (*parser).callonParagraphWithLiteralAttributeLine4,
								expr: &seqExpr{
									pos: position{line: 1519, col: 44, offset: 57585},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1519, col: 44, offset: 57585},
											expr: &ruleRefExpr{
												pos:  position{line: 1519, col: 46, offset: 57587},
												name: "BlankLine",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1519, col: 57, offset: 57598},
											expr: &choiceExpr{
												pos: position{line: 1519, col: 58, offset: 57599},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1519, col: 58, offset: 57599},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1519, col: 70, offset: 57611},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 1519, col: 80, offset: 57621},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 1519, col: 80, offset: 57621},
																expr: &ruleRefExpr{
																	pos:  position{line: 1519, col: 81, offset: 57622},
																	name: "EOL",
																},
															},
															&anyMatcher{
																line: 1519, col: 86, offset: 57627,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1521, col: 4, offset: 57668},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 1528, col: 1, offset: 57840},
			expr: &actionExpr{
				pos: position{line: 1528, col: 14, offset: 57853},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 1528, col: 14, offset: 57853},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1528, col: 14, offset: 57853},
							expr: &ruleRefExpr{
								pos:  position{line: 1528, col: 15, offset: 57854},
								name: "EOF",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1528, col: 19, offset: 57858},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 1535, col: 1, offset: 58006},
			expr: &charClassMatcher{
				pos:        position{line: 1535, col: 13, offset: 58018},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 1537, col: 1, offset: 58028},
			expr: &choiceExpr{
				pos: position{line: 1537, col: 16, offset: 58043},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1537, col: 16, offset: 58043},
						val:        "(",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1537, col: 22, offset: 58049},
						val:        ")",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1537, col: 28, offset: 58055},
						val:        "[",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1537, col: 34, offset: 58061},
						val:        "]",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1537, col: 40, offset: 58067},
						val:        "{",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1537, col: 46, offset: 58073},
						val:        "}",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 1539, col: 1, offset: 58079},
			expr: &actionExpr{
				pos: position{line: 1539, col: 14, offset: 58092},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1539, col: 14, offset: 58092},
					expr: &charClassMatcher{
						pos:        position{line: 1539, col: 14, offset: 58092},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Dot",
			pos:  position{line: 1543, col: 1, offset: 58138},
			expr: &litMatcher{
				pos:        position{line: 1543, col: 8, offset: 58145},
				val:        ".",
				ignoreCase: false,
			},
		},
		{
			name: "SimpleWord",
			pos:  position{line: 1545, col: 1, offset: 58150},
			expr: &actionExpr{
				pos: position{line: 1545, col: 15, offset: 58164},
				run: (*parser).callonSimpleWord1,
				expr: &seqExpr{
					pos: position{line: 1545, col: 15, offset: 58164},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1545, col: 15, offset: 58164},
							name: "Alphanums",
						},
						&andExpr{
							pos: position{line: 1545, col: 25, offset: 58174},
							expr: &choiceExpr{
								pos: position{line: 1545, col: 27, offset: 58176},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1545, col: 27, offset: 58176},
										name: "WS",
									},
									&ruleRefExpr{
										pos:  position{line: 1545, col: 32, offset: 58181},
										name: "EOL",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OtherWord",
			pos:  position{line: 1550, col: 1, offset: 58446},
			expr: &actionExpr{
				pos: position{line: 1550, col: 14, offset: 58459},
				run: (*parser).callonOtherWord1,
				expr: &choiceExpr{
					pos: position{line: 1550, col: 15, offset: 58460},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1550, col: 15, offset: 58460},
							name: "Alphanums",
						},
						&ruleRefExpr{
							pos:  position{line: 1550, col: 27, offset: 58472},
							name: "QuotedTextPrefix",
						},
						&oneOrMoreExpr{
							pos: position{line: 1550, col: 46, offset: 58491},
							expr: &actionExpr{
								pos: position{line: 1550, col: 47, offset: 58492},
								run: (*parser).callonOtherWord6,
								expr: &seqExpr{
									pos: position{line: 1550, col: 47, offset: 58492},
									exprs: []interface{}{
										&seqExpr{
											pos: position{line: 1550, col: 48, offset: 58493},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1550, col: 48, offset: 58493},
													expr: &ruleRefExpr{
														pos:  position{line: 1550, col: 49, offset: 58494},
														name: "NEWLINE",
													},
												},
												&notExpr{
													pos: position{line: 1550, col: 57, offset: 58502},
													expr: &ruleRefExpr{
														pos:  position{line: 1550, col: 58, offset: 58503},
														name: "WS",
													},
												},
												&notExpr{
													pos: position{line: 1550, col: 61, offset: 58506},
													expr: &ruleRefExpr{
														pos:  position{line: 1550, col: 62, offset: 58507},
														name: "Dot",
													},
												},
												&notExpr{
													pos: position{line: 1550, col: 66, offset: 58511},
													expr: &ruleRefExpr{
														pos:  position{line: 1550, col: 67, offset: 58512},
														name: "QuotedTextPrefix",
													},
												},
												&notExpr{
													pos: position{line: 1550, col: 84, offset: 58529},
													expr: &ruleRefExpr{
														pos:  position{line: 1550, col: 85, offset: 58530},
														name: "Parenthesis",
													},
												},
												&anyMatcher{
													line: 1550, col: 97, offset: 58542,
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1550, col: 100, offset: 58545},
											expr: &ruleRefExpr{
												pos:  position{line: 1550, col: 100, offset: 58545},
												name: "Dot",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1552, col: 7, offset: 58654},
							expr: &litMatcher{
								pos:        position{line: 1552, col: 7, offset: 58654},
								val:        ".",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Spaces",
			pos:  position{line: 1556, col: 1, offset: 58835},
			expr: &oneOrMoreExpr{
				pos: position{line: 1556, col: 11, offset: 58845},
				expr: &ruleRefExpr{
					pos:  position{line: 1556, col: 11, offset: 58845},
					name: "WS",
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 1558, col: 1, offset: 58851},
			expr: &actionExpr{
				pos: position{line: 1558, col: 17, offset: 58867},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1558, col: 17, offset: 58867},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1558, col: 26, offset: 58876},
						expr: &choiceExpr{
							pos: position{line: 1558, col: 27, offset: 58877},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1558, col: 27, offset: 58877},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 1558, col: 38, offset: 58888},
									name: "DocumentAttributeSubstitution",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedFileLocation",
			pos:  position{line: 1562, col: 1, offset: 58980},
			expr: &actionExpr{
				pos: position{line: 1562, col: 25, offset: 59004},
				run: (*parser).callonResolvedFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1562, col: 25, offset: 59004},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1562, col: 34, offset: 59013},
						expr: &seqExpr{
							pos: position{line: 1562, col: 35, offset: 59014},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1562, col: 35, offset: 59014},
									expr: &ruleRefExpr{
										pos:  position{line: 1562, col: 36, offset: 59015},
										name: "EOL",
									},
								},
								&notExpr{
									pos: position{line: 1562, col: 40, offset: 59019},
									expr: &ruleRefExpr{
										pos:  position{line: 1562, col: 41, offset: 59020},
										name: "WS",
									},
								},
								&notExpr{
									pos: position{line: 1562, col: 44, offset: 59023},
									expr: &litMatcher{
										pos:        position{line: 1562, col: 45, offset: 59024},
										val:        "[",
										ignoreCase: false,
									},
								},
								&anyMatcher{
									line: 1562, col: 49, offset: 59028,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 1566, col: 1, offset: 59092},
			expr: &actionExpr{
				pos: position{line: 1566, col: 13, offset: 59104},
				run: (*parser).callonLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1566, col: 13, offset: 59104},
					label: "elements",
					expr: &seqExpr{
						pos: position{line: 1566, col: 23, offset: 59114},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1566, col: 23, offset: 59114},
								name: "URL_SCHEME",
							},
							&oneOrMoreExpr{
								pos: position{line: 1566, col: 34, offset: 59125},
								expr: &choiceExpr{
									pos: position{line: 1566, col: 35, offset: 59126},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1566, col: 35, offset: 59126},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 1566, col: 46, offset: 59137},
											name: "DocumentAttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 1570, col: 1, offset: 59230},
			expr: &oneOrMoreExpr{
				pos: position{line: 1570, col: 13, offset: 59242},
				expr: &choiceExpr{
					pos: position{line: 1570, col: 14, offset: 59243},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1570, col: 14, offset: 59243},
							val:        "[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789~:/?#@!$&;=()*+,_%]",
							chars:      []rune{'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '~', ':', '/', '?', '#', '@', '!', '$', '&', ';', '=', '(', ')', '*', '+', ',', '_', '%'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 1570, col: 99, offset: 59328},
							val:        "-",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1570, col: 105, offset: 59334},
							val:        ".",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ResolvedLocation",
			pos:  position{line: 1572, col: 1, offset: 59455},
			expr: &actionExpr{
				pos: position{line: 1572, col: 21, offset: 59475},
				run: (*parser).callonResolvedLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1572, col: 21, offset: 59475},
					label: "elements",
					expr: &seqExpr{
						pos: position{line: 1572, col: 31, offset: 59485},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1572, col: 31, offset: 59485},
								name: "URL_SCHEME",
							},
							&ruleRefExpr{
								pos:  position{line: 1572, col: 42, offset: 59496},
								name: "RESOLVED_FILENAME",
							},
						},
					},
				},
			},
		},
		{
			name: "RESOLVED_FILENAME",
			pos:  position{line: 1576, col: 1, offset: 59575},
			expr: &oneOrMoreExpr{
				pos: position{line: 1576, col: 22, offset: 59596},
				expr: &choiceExpr{
					pos: position{line: 1576, col: 23, offset: 59597},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1576, col: 23, offset: 59597},
							val:        "[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789~:/?#@!$&;=()*+_,%{}]",
							chars:      []rune{'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '~', ':', '/', '?', '#', '@', '!', '$', '&', ';', '=', '(', ')', '*', '+', '_', ',', '%', '{', '}'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 1576, col: 110, offset: 59684},
							val:        "-",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1576, col: 116, offset: 59690},
							val:        ".",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 1578, col: 1, offset: 59739},
			expr: &actionExpr{
				pos: position{line: 1578, col: 8, offset: 59746},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1578, col: 8, offset: 59746},
					expr: &choiceExpr{
						pos: position{line: 1578, col: 9, offset: 59747},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1578, col: 9, offset: 59747},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 1578, col: 22, offset: 59760},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1578, col: 22, offset: 59760},
										expr: &ruleRefExpr{
											pos:  position{line: 1578, col: 23, offset: 59761},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 1578, col: 31, offset: 59769},
										expr: &ruleRefExpr{
											pos:  position{line: 1578, col: 32, offset: 59770},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1578, col: 35, offset: 59773},
										expr: &litMatcher{
											pos:        position{line: 1578, col: 36, offset: 59774},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1578, col: 40, offset: 59778},
										expr: &litMatcher{
											pos:        position{line: 1578, col: 41, offset: 59779},
											val:        "]",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1578, col: 46, offset: 59784,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 1582, col: 1, offset: 59825},
			expr: &choiceExpr{
				pos: position{line: 1582, col: 15, offset: 59839},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1582, col: 15, offset: 59839},
						val:        "http://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1582, col: 27, offset: 59851},
						val:        "https://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1582, col: 40, offset: 59864},
						val:        "ftp://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1582, col: 51, offset: 59875},
						val:        "irc://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1582, col: 62, offset: 59886},
						val:        "mailto:",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 1584, col: 1, offset: 59897},
			expr: &actionExpr{
				pos: position{line: 1584, col: 7, offset: 59903},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1584, col: 7, offset: 59903},
					expr: &choiceExpr{
						pos: position{line: 1584, col: 8, offset: 59904},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1584, col: 8, offset: 59904},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 1584, col: 21, offset: 59917},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1584, col: 21, offset: 59917},
										expr: &ruleRefExpr{
											pos:  position{line: 1584, col: 22, offset: 59918},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 1584, col: 30, offset: 59926},
										expr: &ruleRefExpr{
											pos:  position{line: 1584, col: 31, offset: 59927},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1584, col: 34, offset: 59930},
										expr: &litMatcher{
											pos:        position{line: 1584, col: 35, offset: 59931},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1584, col: 39, offset: 59935},
										expr: &litMatcher{
											pos:        position{line: 1584, col: 40, offset: 59936},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1584, col: 44, offset: 59940},
										expr: &litMatcher{
											pos:        position{line: 1584, col: 45, offset: 59941},
											val:        "<<",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1584, col: 50, offset: 59946},
										expr: &litMatcher{
											pos:        position{line: 1584, col: 51, offset: 59947},
											val:        ">>",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1584, col: 56, offset: 59952},
										expr: &litMatcher{
											pos:        position{line: 1584, col: 57, offset: 59953},
											val:        ",",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1584, col: 62, offset: 59958,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 1588, col: 1, offset: 59999},
			expr: &actionExpr{
				pos: position{line: 1588, col: 10, offset: 60008},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 1588, col: 10, offset: 60008},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 1592, col: 1, offset: 60050},
			expr: &actionExpr{
				pos: position{line: 1592, col: 11, offset: 60060},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 1592, col: 11, offset: 60060},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1592, col: 11, offset: 60060},
							expr: &litMatcher{
								pos:        position{line: 1592, col: 11, offset: 60060},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1592, col: 16, offset: 60065},
							expr: &ruleRefExpr{
								pos:  position{line: 1592, col: 16, offset: 60065},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "WS",
			pos:  position{line: 1596, col: 1, offset: 60117},
			expr: &choiceExpr{
				pos: position{line: 1596, col: 7, offset: 60123},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1596, col: 7, offset: 60123},
						val:        " ",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1596, col: 13, offset: 60129},
						run: (*parser).callonWS3,
						expr: &litMatcher{
							pos:        position{line: 1596, col: 13, offset: 60129},
							val:        "\t",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NEWLINE",
			pos:  position{line: 1600, col: 1, offset: 60170},
			expr: &choiceExpr{
				pos: position{line: 1600, col: 12, offset: 60181},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1600, col: 12, offset: 60181},
						val:        "\r\n",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1600, col: 21, offset: 60190},
						val:        "\r",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1600, col: 28, offset: 60197},
						val:        "\n",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1602, col: 1, offset: 60203},
			expr: &notExpr{
				pos: position{line: 1602, col: 8, offset: 60210},
				expr: &anyMatcher{
					line: 1602, col: 9, offset: 60211,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1604, col: 1, offset: 60214},
			expr: &choiceExpr{
				pos: position{line: 1604, col: 8, offset: 60221},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1604, col: 8, offset: 60221},
						name: "NEWLINE",
					},
					&ruleRefExpr{
						pos:  position{line: 1604, col: 18, offset: 60231},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOLS",
			pos:  position{line: 1606, col: 1, offset: 60236},
			expr: &seqExpr{
				pos: position{line: 1606, col: 9, offset: 60244},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1606, col: 9, offset: 60244},
						expr: &ruleRefExpr{
							pos:  position{line: 1606, col: 9, offset: 60244},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1606, col: 13, offset: 60248},
						name: "EOL",
					},
				},
			},
		},
	},
}

func (c *current) onAsciidocDocument1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonAsciidocDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onAsciidocDocumentWithinDelimitedBlock1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonAsciidocDocumentWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocumentWithinDelimitedBlock1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onTextDocument1(blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonTextDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocument1(stack["blocks"])
}

func (c *current) onAsciidocDocumentBlocks1(header, others interface{}) (interface{}, error) {
	if header != nil && others != nil {
		return append([]interface{}{header}, others.([]interface{})...), nil
	} else if others != nil {
		return others.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonAsciidocDocumentBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocumentBlocks1(stack["header"], stack["others"])
}

func (c *current) onDocumentBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock1(stack["block"])
}

func (c *current) onDocumentBlockWithinDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlockWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlockWithinDelimitedBlock1(stack["block"])
}

func (c *current) onTextDocumentBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonTextDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocumentBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentHeader(title.([]interface{}), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber18() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber18()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onDocumentAttributeDeclaration9(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonDocumentAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclaration9(stack["value"])
}

func (c *current) onDocumentAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	return types.NewDocumentAttributeDeclaration(name.(string), value)
}

func (p *parser) callonDocumentAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onDocumentAttributeName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeName1()
}

func (c *current) onDocumentAttributeValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeValue1()
}

func (c *current) onDocumentAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.(string))
}

func (p *parser) callonDocumentAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeReset2(stack["name"])
}

func (c *current) onDocumentAttributeReset9(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.(string))
}

func (p *parser) callonDocumentAttributeReset9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeReset9(stack["name"])
}

func (c *current) onDocumentAttributeSubstitution1(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeSubstitution(name.(string))
}

func (p *parser) callonDocumentAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeSubstitution1(stack["name"])
}

func (c *current) onElementAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs.([]interface{})), nil
}

func (p *parser) callonElementAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {
	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID2(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID2(stack["id"])
}

func (c *current) onElementID9(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID9(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementTitle5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle5()
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {
	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementRole5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementRole5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole5()
}

func (c *current) onElementRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role.(string))
}

func (p *parser) callonElementRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole1(stack["role"])
}

func (c *current) onLiteralAttribute1() (interface{}, error) {
	return types.NewLiteralAttribute()
}

func (p *parser) callonLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {
	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes8() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSourceAttributes8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes8()
}

func (c *current) onSourceAttributes1(language interface{}) (interface{}, error) {
	return types.NewSourceAttributes(language)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["language"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttribute2(key, value interface{}) (interface{}, error) {
	// value is (optionally) set
	return types.NewGenericAttribute(key.(string), value)

}

func (p *parser) callonGenericAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttribute2(stack["key"], stack["value"])
}

func (c *current) onGenericAttribute14(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.(string), nil)

}

func (p *parser) callonGenericAttribute14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttribute14(stack["key"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {
	// attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onHorizontalLayout1() (interface{}, error) {
	return types.ElementAttributes{"layout": "horizontal"}, nil
}

func (p *parser) callonHorizontalLayout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHorizontalLayout1()
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onInlineAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attrs"])
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.([]interface{}), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), attrs.(types.ElementAttributes), string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), attrs.(types.ElementAttributes), string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.ElementAttributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedLineRanges10(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleQuotedLineRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges10(stack["other"])
}

func (c *current) onMultipleQuotedLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onMultiLineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onSingleLineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onTagRangesAttribute1(tags interface{}) (interface{}, error) {
	//TODO: check if 'tags'/'tag' is allowed for both single and multiple values
	return types.NewTagRangesAttribute(tags.([]interface{}))
}

func (p *parser) callonTagRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttribute1(stack["tags"])
}

func (c *current) onTagRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonTagRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {
	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements, linebreak interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(append(elements.([]interface{}), linebreak))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"], stack["linebreak"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(blanklines, element interface{}) (interface{}, error) {
	return types.NewContinuedListItemElement(-len(blanklines.([]interface{})), element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["blanklines"], stack["element"])
}

func (c *current) onOrderedListItem1(attributes, prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attributes)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attributes"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attributes, prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attributes)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attributes"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {
	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attributes, term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListItem(len(separator.(string))-1, term.(string), description, attributes)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attributes"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onLabeledListItemTerm1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1()
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil

}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil

}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil

}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil

}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onParagraph13(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph13(stack["attributes"], stack["lines"])
}

func (c *current) onSimpleParagraph6(attributes interface{}) (bool, error) {
	// skip if the '[literal]' attribute was set on this paragraph
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, found := attrs[types.AttrKind]
		return !found || kind != types.Literal, nil
	}
	return true, nil

}

func (p *parser) callonSimpleParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph6(stack["attributes"])
}

func (c *current) onSimpleParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {
	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphLine1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonFirstParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphLine1(stack["elements"], stack["linebreak"])
}

func (c *current) onOtherParagraphLine1(elements interface{}) (interface{}, error) {
	return elements, nil
}

func (p *parser) callonOtherParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherParagraphLine1(stack["elements"])
}

func (c *current) onVerseParagraph7(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph7(stack["attributes"])
}

func (c *current) onVerseParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonVerseParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onVerseParagraph19(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph19(stack["attributes"])
}

func (c *current) onVerseParagraph14(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonVerseParagraph14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph14(stack["attributes"], stack["lines"])
}

func (c *current) onInlineElements9(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements9(stack["comment"])
}

func (c *current) onInlineElements12(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))

}

func (p *parser) callonInlineElements12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements12(stack["elements"], stack["linebreak"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onInlineElementsWithoutSubtitution1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonInlineElementsWithoutSubtitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementsWithoutSubtitution1(stack["elements"], stack["linebreak"])
}

func (c *current) onInlineElementWithoutSubtitution1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElementWithoutSubtitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementWithoutSubtitution1(stack["element"])
}

func (c *current) onVerbatimParagraph8(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonVerbatimParagraph8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraph8(stack["line"])
}

func (c *current) onVerbatimParagraph1(attributes, lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonVerbatimParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraph1(stack["attributes"], stack["lines"])
}

func (c *current) onVerbatimParagraphLine1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonVerbatimParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraphLine1(stack["elements"], stack["linebreak"])
}

func (c *current) onVerbatimParagraphLineElement1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonVerbatimParagraphLineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraphLineElement1()
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Bold, content.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["content"])
}

func (c *current) onDoubleQuoteBoldTextContent4(element interface{}) (interface{}, error) {
	// may start and end with spaces
	return element, nil
}

func (p *parser) callonDoubleQuoteBoldTextContent4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextContent4(stack["element"])
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteBoldText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteBoldText1()
}

func (c *current) onSingleQuoteBoldText2(content interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, content.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["content"])
}

func (c *current) onSingleQuoteBoldText12(content interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, append([]interface{}{types.StringElement{Content: "*"}}, content.([]interface{})...)) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText12(stack["content"])
}

func (c *current) onSingleQuoteBoldTextContent6(spaces, element interface{}) (interface{}, error) {
	return append(spaces.([]interface{}), element), nil
}

func (p *parser) callonSingleQuoteBoldTextContent6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextContent6(stack["spaces"], stack["element"])
}

func (c *current) onSingleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteBoldText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteBoldText1()
}

func (c *current) onEscapedBoldText2(backslashes, content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", content.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedBoldText10(backslashes, content interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, content.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedBoldText18(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", content.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["content"])
}

func (c *current) onDoubleQuoteItalicText1(content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, content.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["content"])
}

func (c *current) onDoubleQuoteItalicTextContent4(element interface{}) (interface{}, error) {
	// may start and end with spaces
	return element, nil
}

func (p *parser) callonDoubleQuoteItalicTextContent4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextContent4(stack["element"])
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteItalicText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteItalicText1()
}

func (c *current) onSingleQuoteItalicText2(content interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, content.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["content"])
}

func (c *current) onSingleQuoteItalicText12(content interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, append([]interface{}{types.StringElement{Content: "_"}}, content.([]interface{})...)) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText12(stack["content"])
}

func (c *current) onSingleQuoteItalicTextContent6(spaces, element interface{}) (interface{}, error) {
	return append(spaces.([]interface{}), element), nil
}

func (p *parser) callonSingleQuoteItalicTextContent6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextContent6(stack["spaces"], stack["element"])
}

func (c *current) onSingleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteItalicText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteItalicText1()
}

func (c *current) onEscapedItalicText2(backslashes, content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", content.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedItalicText10(backslashes, content interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, content.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedItalicText18(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", content.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["content"])
}

func (c *current) onDoubleQuoteMonospaceText1(content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, content.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["content"])
}

func (c *current) onDoubleQuoteMonospaceTextContent4(element interface{}) (interface{}, error) {
	// may start and end with spaces
	return element, nil
}

func (p *parser) callonDoubleQuoteMonospaceTextContent4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextContent4(stack["element"])
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteMonospaceText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteMonospaceText1()
}

func (c *current) onSingleQuoteMonospaceText2(content interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, content.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["content"])
}

func (c *current) onSingleQuoteMonospaceText12(content interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, append([]interface{}{types.StringElement{Content: "`"}}, content.([]interface{})...)) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText12(stack["content"])
}

func (c *current) onSingleQuoteMonospaceTextContent6(spaces, element interface{}) (interface{}, error) {
	return append(spaces.([]interface{}), element), nil
}

func (p *parser) callonSingleQuoteMonospaceTextContent6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextContent6(stack["spaces"], stack["element"])
}

func (c *current) onSingleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteMonospaceText1() (interface{}, error) {
	// break at multiline
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteMonospaceText1()
}

func (c *current) onEscapedMonospaceText2(backslashes, content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", content.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedMonospaceText10(backslashes, content interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, content.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedMonospaceText18(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", content.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["content"])
}

func (c *current) onSubscriptText1(content interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, content)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["content"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {

	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", content)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["content"])
}

func (c *current) onSuperscriptText1(content interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, content)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["content"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {

	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", content)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["content"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter4() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter4()
}

func (c *current) onCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewCrossReference(id.(string), label.(string))
}

func (p *parser) callonCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference2(stack["id"], stack["label"])
}

func (c *current) onCrossReference13(id interface{}) (interface{}, error) {
	return types.NewCrossReference(id.(string), nil)
}

func (p *parser) callonCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference13(stack["id"])
}

func (c *current) onCrossReferenceLabel1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonCrossReferenceLabel1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel1()
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onTextOnlyLinkAttributes1(text interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(text, nil)
}

func (p *parser) callonTextOnlyLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextOnlyLinkAttributes1(stack["text"])
}

func (c *current) onLinkTextWithCommaAttribute18() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextWithCommaAttribute18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute18()
}

func (c *current) onLinkTextWithCommaAttribute2(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextWithCommaAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute2(stack["elements"])
}

func (c *current) onLinkTextWithCommaAttribute42() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextWithCommaAttribute42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute42()
}

func (c *current) onLinkTextWithCommaAttribute29(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextWithCommaAttribute29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute29(stack["elements"])
}

func (c *current) onTextAndMoreLinkAttributes1(text, otherattrs interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(text, otherattrs.([]interface{}))
}

func (p *parser) callonTextAndMoreLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextAndMoreLinkAttributes1(stack["text"], stack["otherattrs"])
}

func (c *current) onLinkTextAttribute18() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextAttribute18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute18()
}

func (c *current) onLinkTextAttribute2(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute2(stack["elements"])
}

func (c *current) onLinkTextAttribute44() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextAttribute44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute44()
}

func (c *current) onLinkTextAttribute29(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextAttribute29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute29(stack["elements"])
}

func (c *current) onInlineLinks1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonInlineLinks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineLinks1(stack["elements"])
}

func (c *current) onResolvedRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonResolvedRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onResolvedExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonResolvedExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalQuotedLink1(url, inlineAttributes interface{}) (interface{}, error) {
	// here attributes are required, so we can safely use the `_` and `*` characters in the URL without messing with the bold or italic markers.
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalQuotedLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalQuotedLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewImageBlock(path.(types.Location), inlineAttributes.(types.ElementAttributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onImageAttributes1(alt, width, height, otherattrs interface{}) (interface{}, error) {
	return types.NewImageAttributes(alt, width, height, otherattrs.([]interface{}))
}

func (p *parser) callonImageAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttributes1(stack["alt"], stack["width"], stack["height"], stack["otherattrs"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.([]interface{}))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content.([]interface{}))
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onInlineFootnote17(ref interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), []interface{}{}) // foot note referring to another note
}

func (p *parser) callonInlineFootnote17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote17(stack["ref"])
}

func (c *current) onFootnoteRef1() (interface{}, error) {
	// footnote ID not may span multiple lines
	return string(c.text), nil
}

func (p *parser) callonFootnoteRef1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteRef1()
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonFencedBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockParagraph1(stack["lines"])
}

func (c *current) onFencedBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonFencedBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockParagraphLine1(stack["line"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Listing, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), nil) // no attributes supported
}

func (p *parser) callonListingBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraph1(stack["lines"])
}

func (c *current) onListingBlockParagraphLine6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonListingBlockParagraphLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraphLine6()
}

func (c *current) onListingBlockParagraphLine1(line interface{}) (interface{}, error) {
	// skip EOL in line content, and stop when quote block delimiter is encountered
	return types.NewInlineElements(line)
}

func (p *parser) callonListingBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraphLine1(stack["line"])
}

func (c *current) onExampleBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Example, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["content"])
}

func (c *current) onExampleBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonExampleBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockParagraph1(stack["lines"])
}

func (c *current) onExampleBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonExampleBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockParagraphLine1(stack["line"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Quote, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuoteBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockElement1(stack["element"])
}

func (c *current) onQuoteBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonQuoteBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlock5(attributes interface{}) (bool, error) {

	kind := attributes.(types.ElementAttributes).GetAsString("kind") // once we got the attributes, check that `[verse]`  was set
	return kind == "verse", nil

}

func (p *parser) callonVerseBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock5(stack["attributes"])
}

func (c *current) onVerseBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Verse, content.([]interface{}), types.None, attributes)

}

func (p *parser) callonVerseBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock1(stack["attributes"], stack["content"])
}

func (c *current) onVerseFileInclude1(include interface{}) (interface{}, error) {
	return include, nil
}

func (p *parser) callonVerseFileInclude1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseFileInclude1(stack["include"])
}

func (c *current) onVerseBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonVerseBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlockParagraphLine8(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonVerseBlockParagraphLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine8(stack["elements"])
}

func (c *current) onVerseBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonVerseBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine1(stack["line"])
}

func (c *current) onVerseBlockParagraphLineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonVerseBlockParagraphLineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLineElement1(stack["element"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onNonSidebarBlock1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonNonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSidebarBlock1(stack["content"])
}

func (c *current) onSidebarBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonSidebarBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockParagraph1(stack["lines"])
}

func (c *current) onSidebarBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonSidebarBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockParagraphLine1(stack["line"])
}

func (c *current) onTable1(attributes, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attributes)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attributes"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}), types.Verbatim, nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockLine1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonCommentBlockLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockLine1()
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines11()
}

func (c *current) onParagraphWithHeadingSpacesLines4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines4()
}

func (c *current) onParagraphWithHeadingSpacesLines24() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines24()
}

func (c *current) onParagraphWithHeadingSpacesLines19(otherLine interface{}) (interface{}, error) {
	return otherLine, nil // do not include the trailing 'EOL'

}

func (p *parser) callonParagraphWithHeadingSpacesLines19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines19(stack["otherLine"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Literal, nil
	}
	return false, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onParagraphWithLiteralAttributeLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralAttributeLine4() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine4()
}

func (c *current) onParagraphWithLiteralAttributeLine1(line interface{}) (interface{}, error) {
	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralAttributeLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine1(stack["line"])
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onSimpleWord1() (interface{}, error) {
	// very straightforward content: alphanums followed by spaces but not the "+" signs because it needs a heading space to become a LineBreak element
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSimpleWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleWord1()
}

func (c *current) onOtherWord6() (interface{}, error) {
	// TODO: remove check on parenthesis and dot?
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherWord6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherWord6()
}

func (c *current) onOtherWord1() (interface{}, error) {
	// word cannot contain parenthesis. Dots and ellipsis are treated as independent words (but will be combined afterwards)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherWord1()
}

func (c *current) onFileLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["elements"])
}

func (c *current) onResolvedFileLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonResolvedFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedFileLocation1(stack["elements"])
}

func (c *current) onLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["elements"])
}

func (c *current) onResolvedLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonResolvedLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedLocation1(stack["elements"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onWS3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonWS3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWS3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := string(strconv.AppendQuote([]byte{}, lit.val)) + ignoreCase // wrap 'lit.val' with double quotes
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
