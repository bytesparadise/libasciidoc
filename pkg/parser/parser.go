// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "AsciidocDocument",
			pos:  position{line: 17, col: 1, offset: 319},
			expr: &actionExpr{
				pos: position{line: 17, col: 21, offset: 339},
				run: (*parser).callonAsciidocDocument1,
				expr: &seqExpr{
					pos: position{line: 17, col: 21, offset: 339},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 21, offset: 339},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 34, offset: 352},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 34, offset: 352},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 48, offset: 366},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 56, offset: 374},
								name: "AsciidocDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 80, offset: 398},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentWithinDelimitedBlock",
			pos:  position{line: 21, col: 1, offset: 478},
			expr: &actionExpr{
				pos: position{line: 21, col: 41, offset: 518},
				run: (*parser).callonAsciidocDocumentWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 21, col: 41, offset: 518},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 21, col: 41, offset: 518},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 21, col: 54, offset: 531},
								expr: &ruleRefExpr{
									pos:  position{line: 21, col: 54, offset: 531},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 21, col: 68, offset: 545},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 21, col: 76, offset: 553},
								name: "AsciidocDocumentBlocksWithinDelimitedBlock",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 120, offset: 597},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "TextDocument",
			pos:  position{line: 25, col: 1, offset: 677},
			expr: &actionExpr{
				pos: position{line: 25, col: 17, offset: 693},
				run: (*parser).callonTextDocument1,
				expr: &seqExpr{
					pos: position{line: 25, col: 17, offset: 693},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 25, col: 17, offset: 693},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 25, col: 25, offset: 701},
								name: "TextDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 25, col: 45, offset: 721},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocks",
			pos:  position{line: 32, col: 1, offset: 904},
			expr: &actionExpr{
				pos: position{line: 32, col: 27, offset: 930},
				run: (*parser).callonAsciidocDocumentBlocks1,
				expr: &seqExpr{
					pos: position{line: 32, col: 27, offset: 930},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 32, col: 27, offset: 930},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 32, col: 35, offset: 938},
								expr: &ruleRefExpr{
									pos:  position{line: 32, col: 35, offset: 938},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 32, col: 52, offset: 955},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 32, col: 60, offset: 963},
								expr: &ruleRefExpr{
									pos:  position{line: 32, col: 60, offset: 963},
									name: "DocumentBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentBlock",
			pos:  position{line: 41, col: 1, offset: 1212},
			expr: &actionExpr{
				pos: position{line: 41, col: 18, offset: 1229},
				run: (*parser).callonDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 41, col: 18, offset: 1229},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 41, col: 18, offset: 1229},
							expr: &ruleRefExpr{
								pos:  position{line: 41, col: 19, offset: 1230},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 42, col: 5, offset: 1239},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 42, col: 12, offset: 1246},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 42, col: 12, offset: 1246},
										name: "SimpleParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 43, col: 11, offset: 1272},
										name: "Section",
									},
									&ruleRefExpr{
										pos:  position{line: 44, col: 11, offset: 1291},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 45, col: 11, offset: 1316},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 46, col: 11, offset: 1340},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 47, col: 11, offset: 1394},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 48, col: 11, offset: 1416},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 49, col: 11, offset: 1435},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 50, col: 11, offset: 1486},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 51, col: 11, offset: 1510},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 52, col: 11, offset: 1550},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 53, col: 11, offset: 1584},
										name: "TableOfContentsMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 54, col: 11, offset: 1615},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 55, col: 11, offset: 1640},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocksWithinDelimitedBlock",
			pos:  position{line: 59, col: 1, offset: 1678},
			expr: &labeledExpr{
				pos:   position{line: 59, col: 47, offset: 1724},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 59, col: 54, offset: 1731},
					expr: &ruleRefExpr{
						pos:  position{line: 59, col: 55, offset: 1732},
						name: "DocumentBlockWithinDelimitedBlock",
					},
				},
			},
		},
		{
			name: "DocumentBlockWithinDelimitedBlock",
			pos:  position{line: 61, col: 1, offset: 1769},
			expr: &actionExpr{
				pos: position{line: 61, col: 38, offset: 1806},
				run: (*parser).callonDocumentBlockWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 61, col: 38, offset: 1806},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 61, col: 38, offset: 1806},
							expr: &ruleRefExpr{
								pos:  position{line: 61, col: 39, offset: 1807},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 62, col: 5, offset: 1816},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 62, col: 12, offset: 1823},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 62, col: 12, offset: 1823},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 63, col: 11, offset: 1848},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 64, col: 11, offset: 1872},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 65, col: 11, offset: 1897},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 66, col: 11, offset: 1919},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 67, col: 11, offset: 1938},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 68, col: 11, offset: 1989},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 69, col: 11, offset: 2013},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 70, col: 11, offset: 2053},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 71, col: 11, offset: 2087},
										name: "TableOfContentsMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 72, col: 11, offset: 2118},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 73, col: 11, offset: 2143},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextDocumentBlocks",
			pos:  position{line: 77, col: 1, offset: 2181},
			expr: &labeledExpr{
				pos:   position{line: 77, col: 23, offset: 2203},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 77, col: 30, offset: 2210},
					expr: &ruleRefExpr{
						pos:  position{line: 77, col: 31, offset: 2211},
						name: "TextDocumentBlock",
					},
				},
			},
		},
		{
			name: "TextDocumentBlock",
			pos:  position{line: 79, col: 1, offset: 2232},
			expr: &actionExpr{
				pos: position{line: 79, col: 22, offset: 2253},
				run: (*parser).callonTextDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 79, col: 22, offset: 2253},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 79, col: 22, offset: 2253},
							expr: &ruleRefExpr{
								pos:  position{line: 79, col: 23, offset: 2254},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 80, col: 5, offset: 2263},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 80, col: 12, offset: 2270},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 80, col: 12, offset: 2270},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 80, col: 24, offset: 2282},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 87, col: 1, offset: 2428},
			expr: &ruleRefExpr{
				pos:  position{line: 87, col: 16, offset: 2443},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 89, col: 1, offset: 2461},
			expr: &actionExpr{
				pos: position{line: 89, col: 20, offset: 2480},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 89, col: 20, offset: 2480},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 89, col: 20, offset: 2480},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 89, col: 41, offset: 2501},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 89, col: 49, offset: 2509},
								expr: &ruleRefExpr{
									pos:  position{line: 89, col: 50, offset: 2510},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 89, col: 75, offset: 2535},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 93, col: 1, offset: 2615},
			expr: &seqExpr{
				pos: position{line: 93, col: 26, offset: 2640},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 93, col: 26, offset: 2640},
						val:        "---",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 93, col: 32, offset: 2646},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 95, col: 1, offset: 2652},
			expr: &actionExpr{
				pos: position{line: 95, col: 27, offset: 2678},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 95, col: 27, offset: 2678},
					expr: &oneOrMoreExpr{
						pos: position{line: 95, col: 28, offset: 2679},
						expr: &seqExpr{
							pos: position{line: 95, col: 29, offset: 2680},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 95, col: 29, offset: 2680},
									expr: &ruleRefExpr{
										pos:  position{line: 95, col: 30, offset: 2681},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 95, col: 51, offset: 2702,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 102, col: 1, offset: 2868},
			expr: &actionExpr{
				pos: position{line: 102, col: 19, offset: 2886},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 102, col: 19, offset: 2886},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 102, col: 19, offset: 2886},
							val:        "=",
							ignoreCase: false,
						},
						&oneOrMoreExpr{
							pos: position{line: 102, col: 23, offset: 2890},
							expr: &ruleRefExpr{
								pos:  position{line: 102, col: 23, offset: 2890},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 102, col: 27, offset: 2894},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 102, col: 34, offset: 2901},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 102, col: 49, offset: 2916},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 102, col: 53, offset: 2920},
								expr: &ruleRefExpr{
									pos:  position{line: 102, col: 53, offset: 2920},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 102, col: 71, offset: 2938},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 103, col: 9, offset: 2950},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 103, col: 18, offset: 2959},
								expr: &ruleRefExpr{
									pos:  position{line: 103, col: 18, offset: 2959},
									name: "DocumentAuthors",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 104, col: 9, offset: 2986},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 104, col: 19, offset: 2996},
								expr: &ruleRefExpr{
									pos:  position{line: 104, col: 19, offset: 2996},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 108, col: 1, offset: 3104},
			expr: &choiceExpr{
				pos: position{line: 108, col: 20, offset: 3123},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 108, col: 20, offset: 3123},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 108, col: 48, offset: 3151},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 110, col: 1, offset: 3181},
			expr: &actionExpr{
				pos: position{line: 110, col: 30, offset: 3210},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 110, col: 30, offset: 3210},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 110, col: 30, offset: 3210},
							expr: &ruleRefExpr{
								pos:  position{line: 110, col: 30, offset: 3210},
								name: "WS",
							},
						},
						&notExpr{
							pos: position{line: 110, col: 34, offset: 3214},
							expr: &litMatcher{
								pos:        position{line: 110, col: 35, offset: 3215},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 110, col: 39, offset: 3219},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 110, col: 48, offset: 3228},
								expr: &ruleRefExpr{
									pos:  position{line: 110, col: 48, offset: 3228},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 110, col: 65, offset: 3245},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 114, col: 1, offset: 3315},
			expr: &actionExpr{
				pos: position{line: 114, col: 33, offset: 3347},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 114, col: 33, offset: 3347},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 114, col: 33, offset: 3347},
							expr: &ruleRefExpr{
								pos:  position{line: 114, col: 33, offset: 3347},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 114, col: 37, offset: 3351},
							val:        ":author:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 114, col: 48, offset: 3362},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 114, col: 56, offset: 3370},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 114, col: 72, offset: 3386},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 118, col: 1, offset: 3465},
			expr: &actionExpr{
				pos: position{line: 118, col: 19, offset: 3483},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 118, col: 19, offset: 3483},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 118, col: 19, offset: 3483},
							expr: &ruleRefExpr{
								pos:  position{line: 118, col: 19, offset: 3483},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 118, col: 23, offset: 3487},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 118, col: 33, offset: 3497},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 118, col: 53, offset: 3517},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 118, col: 59, offset: 3523},
								expr: &ruleRefExpr{
									pos:  position{line: 118, col: 60, offset: 3524},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 118, col: 82, offset: 3546},
							expr: &ruleRefExpr{
								pos:  position{line: 118, col: 82, offset: 3546},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 118, col: 86, offset: 3550},
							expr: &litMatcher{
								pos:        position{line: 118, col: 86, offset: 3550},
								val:        ";",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 118, col: 91, offset: 3555},
							expr: &ruleRefExpr{
								pos:  position{line: 118, col: 91, offset: 3555},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 123, col: 1, offset: 3697},
			expr: &actionExpr{
				pos: position{line: 123, col: 23, offset: 3719},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 123, col: 23, offset: 3719},
					expr: &choiceExpr{
						pos: position{line: 123, col: 24, offset: 3720},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 123, col: 24, offset: 3720},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 123, col: 37, offset: 3733},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 123, col: 37, offset: 3733},
										expr: &litMatcher{
											pos:        position{line: 123, col: 38, offset: 3734},
											val:        "<",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 123, col: 42, offset: 3738},
										expr: &litMatcher{
											pos:        position{line: 123, col: 43, offset: 3739},
											val:        ";",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 123, col: 47, offset: 3743},
										expr: &ruleRefExpr{
											pos:  position{line: 123, col: 48, offset: 3744},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 123, col: 56, offset: 3752,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 127, col: 1, offset: 3793},
			expr: &actionExpr{
				pos: position{line: 127, col: 24, offset: 3816},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 127, col: 24, offset: 3816},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 127, col: 24, offset: 3816},
							val:        "<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 127, col: 28, offset: 3820},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 127, col: 35, offset: 3827},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 127, col: 35, offset: 3827},
									expr: &choiceExpr{
										pos: position{line: 127, col: 36, offset: 3828},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 127, col: 36, offset: 3828},
												name: "Alphanums",
											},
											&seqExpr{
												pos: position{line: 127, col: 49, offset: 3841},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 127, col: 49, offset: 3841},
														expr: &litMatcher{
															pos:        position{line: 127, col: 50, offset: 3842},
															val:        ">",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 127, col: 54, offset: 3846},
														expr: &ruleRefExpr{
															pos:  position{line: 127, col: 55, offset: 3847},
															name: "EOL",
														},
													},
													&anyMatcher{
														line: 127, col: 60, offset: 3852,
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 129, col: 4, offset: 3893},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 135, col: 1, offset: 4054},
			expr: &actionExpr{
				pos: position{line: 135, col: 21, offset: 4074},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 135, col: 21, offset: 4074},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 135, col: 21, offset: 4074},
							expr: &ruleRefExpr{
								pos:  position{line: 135, col: 21, offset: 4074},
								name: "WS",
							},
						},
						&notExpr{
							pos: position{line: 135, col: 25, offset: 4078},
							expr: &litMatcher{
								pos:        position{line: 135, col: 26, offset: 4079},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 135, col: 30, offset: 4083},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 136, col: 9, offset: 4102},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 136, col: 10, offset: 4103},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 136, col: 10, offset: 4103},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 136, col: 10, offset: 4103},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 136, col: 21, offset: 4114},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 136, col: 45, offset: 4138},
													expr: &litMatcher{
														pos:        position{line: 136, col: 45, offset: 4138},
														val:        ",",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 136, col: 50, offset: 4143},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 136, col: 58, offset: 4151},
														expr: &ruleRefExpr{
															pos:  position{line: 136, col: 59, offset: 4152},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 136, col: 82, offset: 4175},
													expr: &litMatcher{
														pos:        position{line: 136, col: 82, offset: 4175},
														val:        ":",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 136, col: 87, offset: 4180},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 136, col: 97, offset: 4190},
														expr: &ruleRefExpr{
															pos:  position{line: 136, col: 98, offset: 4191},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 138, col: 15, offset: 4308},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 138, col: 15, offset: 4308},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 138, col: 15, offset: 4308},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 138, col: 24, offset: 4317},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 138, col: 46, offset: 4339},
													expr: &litMatcher{
														pos:        position{line: 138, col: 46, offset: 4339},
														val:        ":",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 138, col: 51, offset: 4344},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 138, col: 61, offset: 4354},
														expr: &ruleRefExpr{
															pos:  position{line: 138, col: 62, offset: 4355},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 140, col: 13, offset: 4464},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 145, col: 1, offset: 4594},
			expr: &choiceExpr{
				pos: position{line: 145, col: 27, offset: 4620},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 145, col: 27, offset: 4620},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 145, col: 27, offset: 4620},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 145, col: 27, offset: 4620},
									val:        "v",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 145, col: 32, offset: 4625},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 145, col: 39, offset: 4632},
									expr: &choiceExpr{
										pos: position{line: 145, col: 40, offset: 4633},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 145, col: 40, offset: 4633},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 145, col: 52, offset: 4645},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 145, col: 62, offset: 4655},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 145, col: 62, offset: 4655},
														expr: &ruleRefExpr{
															pos:  position{line: 145, col: 63, offset: 4656},
															name: "EOL",
														},
													},
													&notExpr{
														pos: position{line: 145, col: 67, offset: 4660},
														expr: &litMatcher{
															pos:        position{line: 145, col: 68, offset: 4661},
															val:        ",",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 145, col: 72, offset: 4665},
														expr: &litMatcher{
															pos:        position{line: 145, col: 73, offset: 4666},
															val:        ":",
															ignoreCase: false,
														},
													},
													&anyMatcher{
														line: 145, col: 78, offset: 4671,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 147, col: 5, offset: 4713},
						run: (*parser).callonDocumentRevisionNumber18,
						expr: &seqExpr{
							pos: position{line: 147, col: 5, offset: 4713},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 147, col: 5, offset: 4713},
									expr: &litMatcher{
										pos:        position{line: 147, col: 5, offset: 4713},
										val:        "v",
										ignoreCase: true,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 147, col: 11, offset: 4719},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 147, col: 18, offset: 4726},
									expr: &choiceExpr{
										pos: position{line: 147, col: 19, offset: 4727},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 147, col: 19, offset: 4727},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 147, col: 31, offset: 4739},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 147, col: 41, offset: 4749},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 147, col: 41, offset: 4749},
														expr: &ruleRefExpr{
															pos:  position{line: 147, col: 42, offset: 4750},
															name: "EOL",
														},
													},
													&notExpr{
														pos: position{line: 147, col: 46, offset: 4754},
														expr: &litMatcher{
															pos:        position{line: 147, col: 47, offset: 4755},
															val:        ",",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 147, col: 51, offset: 4759},
														expr: &litMatcher{
															pos:        position{line: 147, col: 52, offset: 4760},
															val:        ":",
															ignoreCase: false,
														},
													},
													&anyMatcher{
														line: 147, col: 57, offset: 4765,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 147, col: 62, offset: 4770},
									expr: &ruleRefExpr{
										pos:  position{line: 147, col: 62, offset: 4770},
										name: "WS",
									},
								},
								&andExpr{
									pos: position{line: 147, col: 66, offset: 4774},
									expr: &litMatcher{
										pos:        position{line: 147, col: 67, offset: 4775},
										val:        ",",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 151, col: 1, offset: 4815},
			expr: &actionExpr{
				pos: position{line: 151, col: 25, offset: 4839},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 151, col: 25, offset: 4839},
					expr: &choiceExpr{
						pos: position{line: 151, col: 26, offset: 4840},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 151, col: 26, offset: 4840},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 151, col: 38, offset: 4852},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 151, col: 48, offset: 4862},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 151, col: 48, offset: 4862},
										expr: &ruleRefExpr{
											pos:  position{line: 151, col: 49, offset: 4863},
											name: "EOL",
										},
									},
									&notExpr{
										pos: position{line: 151, col: 53, offset: 4867},
										expr: &litMatcher{
											pos:        position{line: 151, col: 54, offset: 4868},
											val:        ":",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 151, col: 59, offset: 4873,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 155, col: 1, offset: 4914},
			expr: &actionExpr{
				pos: position{line: 155, col: 27, offset: 4940},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 155, col: 27, offset: 4940},
					expr: &choiceExpr{
						pos: position{line: 155, col: 28, offset: 4941},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 155, col: 28, offset: 4941},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 155, col: 40, offset: 4953},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 155, col: 50, offset: 4963},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 155, col: 50, offset: 4963},
										expr: &ruleRefExpr{
											pos:  position{line: 155, col: 51, offset: 4964},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 155, col: 56, offset: 4969,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeDeclaration",
			pos:  position{line: 162, col: 1, offset: 5125},
			expr: &actionExpr{
				pos: position{line: 162, col: 33, offset: 5157},
				run: (*parser).callonDocumentAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 162, col: 33, offset: 5157},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 162, col: 33, offset: 5157},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 162, col: 37, offset: 5161},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 162, col: 43, offset: 5167},
								name: "DocumentAttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 162, col: 66, offset: 5190},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 162, col: 70, offset: 5194},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 162, col: 76, offset: 5200},
								expr: &actionExpr{
									pos: position{line: 162, col: 77, offset: 5201},
									run: (*parser).callonDocumentAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 162, col: 78, offset: 5202},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 162, col: 78, offset: 5202},
												expr: &ruleRefExpr{
													pos:  position{line: 162, col: 78, offset: 5202},
													name: "WS",
												},
											},
											&labeledExpr{
												pos:   position{line: 162, col: 82, offset: 5206},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 162, col: 89, offset: 5213},
													name: "DocumentAttributeValue",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 162, col: 138, offset: 5262},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeName",
			pos:  position{line: 169, col: 1, offset: 5511},
			expr: &actionExpr{
				pos: position{line: 169, col: 26, offset: 5536},
				run: (*parser).callonDocumentAttributeName1,
				expr: &seqExpr{
					pos: position{line: 169, col: 26, offset: 5536},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 169, col: 27, offset: 5537},
							alternatives: []interface{}{
								&charClassMatcher{
									pos:        position{line: 169, col: 27, offset: 5537},
									val:        "[A-Z]",
									ranges:     []rune{'A', 'Z'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 169, col: 35, offset: 5545},
									val:        "[a-z]",
									ranges:     []rune{'a', 'z'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 169, col: 43, offset: 5553},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 169, col: 51, offset: 5561},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 169, col: 56, offset: 5566},
							expr: &choiceExpr{
								pos: position{line: 169, col: 57, offset: 5567},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 169, col: 57, offset: 5567},
										val:        "[A-Z]",
										ranges:     []rune{'A', 'Z'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 169, col: 65, offset: 5575},
										val:        "[a-z]",
										ranges:     []rune{'a', 'z'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 169, col: 73, offset: 5583},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
									&litMatcher{
										pos:        position{line: 169, col: 81, offset: 5591},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeValue",
			pos:  position{line: 173, col: 1, offset: 5633},
			expr: &actionExpr{
				pos: position{line: 173, col: 27, offset: 5659},
				run: (*parser).callonDocumentAttributeValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 173, col: 27, offset: 5659},
					expr: &seqExpr{
						pos: position{line: 173, col: 28, offset: 5660},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 173, col: 28, offset: 5660},
								expr: &ruleRefExpr{
									pos:  position{line: 173, col: 29, offset: 5661},
									name: "NEWLINE",
								},
							},
							&anyMatcher{
								line: 173, col: 37, offset: 5669,
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeReset",
			pos:  position{line: 177, col: 1, offset: 5709},
			expr: &choiceExpr{
				pos: position{line: 177, col: 27, offset: 5735},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 177, col: 27, offset: 5735},
						run: (*parser).callonDocumentAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 177, col: 27, offset: 5735},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 177, col: 27, offset: 5735},
									val:        ":!",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 177, col: 32, offset: 5740},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 177, col: 38, offset: 5746},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 177, col: 61, offset: 5769},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 177, col: 65, offset: 5773},
									name: "EOLS",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 179, col: 5, offset: 5842},
						run: (*parser).callonDocumentAttributeReset9,
						expr: &seqExpr{
							pos: position{line: 179, col: 5, offset: 5842},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 179, col: 5, offset: 5842},
									val:        ":",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 179, col: 9, offset: 5846},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 179, col: 15, offset: 5852},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 179, col: 38, offset: 5875},
									val:        "!:",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 179, col: 43, offset: 5880},
									name: "EOLS",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeSubstitution",
			pos:  position{line: 183, col: 1, offset: 5948},
			expr: &actionExpr{
				pos: position{line: 183, col: 34, offset: 5981},
				run: (*parser).callonDocumentAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 183, col: 34, offset: 5981},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 183, col: 34, offset: 5981},
							val:        "{",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 183, col: 38, offset: 5985},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 183, col: 44, offset: 5991},
								name: "DocumentAttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 183, col: 67, offset: 6014},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ElementAttributes",
			pos:  position{line: 190, col: 1, offset: 6202},
			expr: &actionExpr{
				pos: position{line: 190, col: 22, offset: 6223},
				run: (*parser).callonElementAttributes1,
				expr: &labeledExpr{
					pos:   position{line: 190, col: 22, offset: 6223},
					label: "attrs",
					expr: &oneOrMoreExpr{
						pos: position{line: 190, col: 28, offset: 6229},
						expr: &ruleRefExpr{
							pos:  position{line: 190, col: 29, offset: 6230},
							name: "ElementAttribute",
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 194, col: 1, offset: 6320},
			expr: &actionExpr{
				pos: position{line: 194, col: 21, offset: 6340},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 194, col: 21, offset: 6340},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 194, col: 21, offset: 6340},
							expr: &choiceExpr{
								pos: position{line: 194, col: 23, offset: 6342},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 194, col: 23, offset: 6342},
										val:        "[",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 194, col: 29, offset: 6348},
										val:        ".",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 194, col: 35, offset: 6354},
										val:        "#",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 195, col: 5, offset: 6430},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 195, col: 11, offset: 6436},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 195, col: 11, offset: 6436},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 196, col: 9, offset: 6457},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 197, col: 9, offset: 6481},
										name: "ElementRole",
									},
									&ruleRefExpr{
										pos:  position{line: 198, col: 9, offset: 6504},
										name: "LiteralAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 199, col: 9, offset: 6532},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 200, col: 9, offset: 6560},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 201, col: 9, offset: 6587},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 202, col: 9, offset: 6614},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 203, col: 9, offset: 6651},
										name: "HorizontalLayout",
									},
									&ruleRefExpr{
										pos:  position{line: 204, col: 9, offset: 6679},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MasqueradeAttribute",
			pos:  position{line: 209, col: 1, offset: 6862},
			expr: &choiceExpr{
				pos: position{line: 209, col: 24, offset: 6885},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 209, col: 24, offset: 6885},
						name: "QuoteAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 209, col: 42, offset: 6903},
						name: "VerseAttributes",
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 211, col: 1, offset: 6920},
			expr: &choiceExpr{
				pos: position{line: 211, col: 14, offset: 6933},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 211, col: 14, offset: 6933},
						run: (*parser).callonElementID2,
						expr: &seqExpr{
							pos: position{line: 211, col: 14, offset: 6933},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 211, col: 14, offset: 6933},
									val:        "[[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 211, col: 19, offset: 6938},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 211, col: 23, offset: 6942},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 211, col: 27, offset: 6946},
									val:        "]]",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 211, col: 32, offset: 6951},
									name: "EOLS",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 213, col: 5, offset: 7005},
						run: (*parser).callonElementID9,
						expr: &seqExpr{
							pos: position{line: 213, col: 5, offset: 7005},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 213, col: 5, offset: 7005},
									val:        "[#",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 213, col: 10, offset: 7010},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 213, col: 14, offset: 7014},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 213, col: 18, offset: 7018},
									val:        "]",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 213, col: 23, offset: 7023},
									name: "EOLS",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 217, col: 1, offset: 7076},
			expr: &actionExpr{
				pos: position{line: 217, col: 20, offset: 7095},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 217, col: 20, offset: 7095},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 217, col: 20, offset: 7095},
							val:        "[[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 217, col: 25, offset: 7100},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 217, col: 29, offset: 7104},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 217, col: 33, offset: 7108},
							val:        "]]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 217, col: 38, offset: 7113},
							expr: &ruleRefExpr{
								pos:  position{line: 217, col: 38, offset: 7113},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 223, col: 1, offset: 7387},
			expr: &actionExpr{
				pos: position{line: 223, col: 17, offset: 7403},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 223, col: 17, offset: 7403},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 223, col: 17, offset: 7403},
							val:        ".",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 223, col: 21, offset: 7407},
							label: "title",
							expr: &actionExpr{
								pos: position{line: 223, col: 28, offset: 7414},
								run: (*parser).callonElementTitle5,
								expr: &seqExpr{
									pos: position{line: 223, col: 28, offset: 7414},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 223, col: 28, offset: 7414},
											name: "Alphanums",
										},
										&zeroOrMoreExpr{
											pos: position{line: 223, col: 38, offset: 7424},
											expr: &choiceExpr{
												pos: position{line: 223, col: 39, offset: 7425},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 223, col: 39, offset: 7425},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 223, col: 51, offset: 7437},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 223, col: 61, offset: 7447},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 223, col: 61, offset: 7447},
																expr: &ruleRefExpr{
																	pos:  position{line: 223, col: 62, offset: 7448},
																	name: "NEWLINE",
																},
															},
															&anyMatcher{
																line: 223, col: 70, offset: 7456,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 225, col: 4, offset: 7497},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementRole",
			pos:  position{line: 231, col: 1, offset: 7649},
			expr: &actionExpr{
				pos: position{line: 231, col: 16, offset: 7664},
				run: (*parser).callonElementRole1,
				expr: &seqExpr{
					pos: position{line: 231, col: 16, offset: 7664},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 231, col: 16, offset: 7664},
							val:        "[.",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 231, col: 21, offset: 7669},
							label: "role",
							expr: &actionExpr{
								pos: position{line: 231, col: 27, offset: 7675},
								run: (*parser).callonElementRole5,
								expr: &seqExpr{
									pos: position{line: 231, col: 27, offset: 7675},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 231, col: 27, offset: 7675},
											name: "Alphanums",
										},
										&zeroOrMoreExpr{
											pos: position{line: 231, col: 37, offset: 7685},
											expr: &choiceExpr{
												pos: position{line: 231, col: 38, offset: 7686},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 231, col: 38, offset: 7686},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 231, col: 50, offset: 7698},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 231, col: 60, offset: 7708},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 231, col: 60, offset: 7708},
																expr: &ruleRefExpr{
																	pos:  position{line: 231, col: 61, offset: 7709},
																	name: "NEWLINE",
																},
															},
															&notExpr{
																pos: position{line: 231, col: 69, offset: 7717},
																expr: &litMatcher{
																	pos:        position{line: 231, col: 70, offset: 7718},
																	val:        "]",
																	ignoreCase: false,
																},
															},
															&anyMatcher{
																line: 231, col: 74, offset: 7722,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 233, col: 4, offset: 7763},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 233, col: 8, offset: 7767},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "LiteralAttribute",
			pos:  position{line: 237, col: 1, offset: 7824},
			expr: &actionExpr{
				pos: position{line: 237, col: 21, offset: 7844},
				run: (*parser).callonLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 237, col: 21, offset: 7844},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 237, col: 21, offset: 7844},
							val:        "[literal]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 237, col: 33, offset: 7856},
							expr: &ruleRefExpr{
								pos:  position{line: 237, col: 33, offset: 7856},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 237, col: 37, offset: 7860},
							name: "NEWLINE",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 242, col: 1, offset: 7992},
			expr: &actionExpr{
				pos: position{line: 242, col: 30, offset: 8021},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 242, col: 30, offset: 8021},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 242, col: 30, offset: 8021},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 242, col: 34, offset: 8025},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 242, col: 37, offset: 8028},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 242, col: 53, offset: 8044},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 242, col: 57, offset: 8048},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 247, col: 1, offset: 8204},
			expr: &actionExpr{
				pos: position{line: 247, col: 21, offset: 8224},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 247, col: 21, offset: 8224},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 247, col: 21, offset: 8224},
							val:        "[source",
							ignoreCase: false,
						},
						&zeroOrOneExpr{
							pos: position{line: 247, col: 31, offset: 8234},
							expr: &litMatcher{
								pos:        position{line: 247, col: 31, offset: 8234},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 247, col: 36, offset: 8239},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 247, col: 45, offset: 8248},
								expr: &actionExpr{
									pos: position{line: 247, col: 46, offset: 8249},
									run: (*parser).callonSourceAttributes8,
									expr: &oneOrMoreExpr{
										pos: position{line: 247, col: 46, offset: 8249},
										expr: &choiceExpr{
											pos: position{line: 247, col: 47, offset: 8250},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 247, col: 47, offset: 8250},
													name: "Alphanums",
												},
												&ruleRefExpr{
													pos:  position{line: 247, col: 59, offset: 8262},
													name: "Spaces",
												},
												&seqExpr{
													pos: position{line: 247, col: 69, offset: 8272},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 247, col: 69, offset: 8272},
															expr: &ruleRefExpr{
																pos:  position{line: 247, col: 70, offset: 8273},
																name: "NEWLINE",
															},
														},
														&notExpr{
															pos: position{line: 247, col: 78, offset: 8281},
															expr: &litMatcher{
																pos:        position{line: 247, col: 79, offset: 8282},
																val:        "]",
																ignoreCase: false,
															},
														},
														&anyMatcher{
															line: 247, col: 83, offset: 8286,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 249, col: 9, offset: 8336},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 249, col: 13, offset: 8340},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 254, col: 1, offset: 8465},
			expr: &actionExpr{
				pos: position{line: 254, col: 19, offset: 8483},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 254, col: 19, offset: 8483},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 254, col: 19, offset: 8483},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 254, col: 23, offset: 8487},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 254, col: 34, offset: 8498},
								expr: &ruleRefExpr{
									pos:  position{line: 254, col: 35, offset: 8499},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 254, col: 54, offset: 8518},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 254, col: 58, offset: 8522},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 258, col: 1, offset: 8595},
			expr: &choiceExpr{
				pos: position{line: 259, col: 5, offset: 8620},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 259, col: 5, offset: 8620},
						run: (*parser).callonGenericAttribute2,
						expr: &seqExpr{
							pos: position{line: 259, col: 5, offset: 8620},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 259, col: 5, offset: 8620},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 259, col: 10, offset: 8625},
										name: "AttributeKey",
									},
								},
								&litMatcher{
									pos:        position{line: 259, col: 24, offset: 8639},
									val:        "=",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 259, col: 28, offset: 8643},
									label: "value",
									expr: &zeroOrOneExpr{
										pos: position{line: 259, col: 34, offset: 8649},
										expr: &ruleRefExpr{
											pos:  position{line: 259, col: 35, offset: 8650},
											name: "AttributeValue",
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 259, col: 52, offset: 8667},
									expr: &litMatcher{
										pos:        position{line: 259, col: 52, offset: 8667},
										val:        ",",
										ignoreCase: false,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 259, col: 57, offset: 8672},
									expr: &ruleRefExpr{
										pos:  position{line: 259, col: 57, offset: 8672},
										name: "WS",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 261, col: 9, offset: 8777},
						run: (*parser).callonGenericAttribute14,
						expr: &seqExpr{
							pos: position{line: 261, col: 9, offset: 8777},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 261, col: 9, offset: 8777},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 261, col: 14, offset: 8782},
										name: "AttributeKey",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 261, col: 28, offset: 8796},
									expr: &litMatcher{
										pos:        position{line: 261, col: 28, offset: 8796},
										val:        ",",
										ignoreCase: false,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 261, col: 33, offset: 8801},
									expr: &ruleRefExpr{
										pos:  position{line: 261, col: 33, offset: 8801},
										name: "WS",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 265, col: 1, offset: 8894},
			expr: &actionExpr{
				pos: position{line: 265, col: 17, offset: 8910},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 265, col: 17, offset: 8910},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 265, col: 17, offset: 8910},
							expr: &litMatcher{
								pos:        position{line: 265, col: 18, offset: 8911},
								val:        "quote",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 265, col: 26, offset: 8919},
							expr: &litMatcher{
								pos:        position{line: 265, col: 27, offset: 8920},
								val:        "verse",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 265, col: 35, offset: 8928},
							expr: &litMatcher{
								pos:        position{line: 265, col: 36, offset: 8929},
								val:        "literal",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 265, col: 46, offset: 8939},
							expr: &ruleRefExpr{
								pos:  position{line: 265, col: 47, offset: 8940},
								name: "Spaces",
							},
						},
						&labeledExpr{
							pos:   position{line: 265, col: 54, offset: 8947},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 265, col: 58, offset: 8951},
								expr: &choiceExpr{
									pos: position{line: 265, col: 59, offset: 8952},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 265, col: 59, offset: 8952},
											name: "Alphanums",
										},
										&ruleRefExpr{
											pos:  position{line: 265, col: 71, offset: 8964},
											name: "OtherAttributeChar",
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 265, col: 92, offset: 8985},
							expr: &ruleRefExpr{
								pos:  position{line: 265, col: 92, offset: 8985},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 269, col: 1, offset: 9025},
			expr: &actionExpr{
				pos: position{line: 269, col: 19, offset: 9043},
				run: (*parser).callonAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 269, col: 19, offset: 9043},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 269, col: 19, offset: 9043},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 269, col: 25, offset: 9049},
								expr: &choiceExpr{
									pos: position{line: 269, col: 26, offset: 9050},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 269, col: 26, offset: 9050},
											name: "Alphanums",
										},
										&ruleRefExpr{
											pos:  position{line: 269, col: 38, offset: 9062},
											name: "Spaces",
										},
										&ruleRefExpr{
											pos:  position{line: 269, col: 47, offset: 9071},
											name: "OtherAttributeChar",
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 269, col: 68, offset: 9092},
							expr: &litMatcher{
								pos:        position{line: 269, col: 69, offset: 9093},
								val:        "=",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "OtherAttributeChar",
			pos:  position{line: 273, col: 1, offset: 9248},
			expr: &seqExpr{
				pos: position{line: 273, col: 24, offset: 9271},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 273, col: 24, offset: 9271},
						expr: &litMatcher{
							pos:        position{line: 273, col: 25, offset: 9272},
							val:        "=",
							ignoreCase: false,
						},
					},
					&notExpr{
						pos: position{line: 273, col: 29, offset: 9276},
						expr: &litMatcher{
							pos:        position{line: 273, col: 30, offset: 9277},
							val:        ",",
							ignoreCase: false,
						},
					},
					&notExpr{
						pos: position{line: 273, col: 34, offset: 9281},
						expr: &litMatcher{
							pos:        position{line: 273, col: 35, offset: 9282},
							val:        "]",
							ignoreCase: false,
						},
					},
					&anyMatcher{
						line: 273, col: 39, offset: 9286,
					},
				},
			},
		},
		{
			name: "HorizontalLayout",
			pos:  position{line: 275, col: 1, offset: 9290},
			expr: &actionExpr{
				pos: position{line: 275, col: 21, offset: 9310},
				run: (*parser).callonHorizontalLayout1,
				expr: &seqExpr{
					pos: position{line: 275, col: 21, offset: 9310},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 275, col: 21, offset: 9310},
							val:        "[horizontal]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 275, col: 36, offset: 9325},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 279, col: 1, offset: 9399},
			expr: &actionExpr{
				pos: position{line: 279, col: 20, offset: 9418},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 279, col: 20, offset: 9418},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 279, col: 20, offset: 9418},
							val:        "[quote",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 279, col: 29, offset: 9427},
							expr: &ruleRefExpr{
								pos:  position{line: 279, col: 29, offset: 9427},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 279, col: 33, offset: 9431},
							expr: &litMatcher{
								pos:        position{line: 279, col: 33, offset: 9431},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 279, col: 38, offset: 9436},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 279, col: 45, offset: 9443},
								expr: &ruleRefExpr{
									pos:  position{line: 279, col: 46, offset: 9444},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 279, col: 63, offset: 9461},
							expr: &litMatcher{
								pos:        position{line: 279, col: 63, offset: 9461},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 279, col: 68, offset: 9466},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 279, col: 74, offset: 9472},
								expr: &ruleRefExpr{
									pos:  position{line: 279, col: 75, offset: 9473},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 279, col: 92, offset: 9490},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 279, col: 96, offset: 9494},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 283, col: 1, offset: 9564},
			expr: &actionExpr{
				pos: position{line: 283, col: 20, offset: 9583},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 283, col: 20, offset: 9583},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 283, col: 20, offset: 9583},
							val:        "[verse",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 283, col: 29, offset: 9592},
							expr: &ruleRefExpr{
								pos:  position{line: 283, col: 29, offset: 9592},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 283, col: 33, offset: 9596},
							expr: &litMatcher{
								pos:        position{line: 283, col: 33, offset: 9596},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 283, col: 38, offset: 9601},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 283, col: 45, offset: 9608},
								expr: &ruleRefExpr{
									pos:  position{line: 283, col: 46, offset: 9609},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 283, col: 63, offset: 9626},
							expr: &litMatcher{
								pos:        position{line: 283, col: 63, offset: 9626},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 283, col: 68, offset: 9631},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 283, col: 74, offset: 9637},
								expr: &ruleRefExpr{
									pos:  position{line: 283, col: 75, offset: 9638},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 283, col: 92, offset: 9655},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 283, col: 96, offset: 9659},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 287, col: 1, offset: 9747},
			expr: &actionExpr{
				pos: position{line: 287, col: 19, offset: 9765},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 287, col: 19, offset: 9765},
					expr: &choiceExpr{
						pos: position{line: 287, col: 20, offset: 9766},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 287, col: 20, offset: 9766},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 287, col: 32, offset: 9778},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 287, col: 42, offset: 9788},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 287, col: 42, offset: 9788},
										expr: &litMatcher{
											pos:        position{line: 287, col: 43, offset: 9789},
											val:        ",",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 287, col: 47, offset: 9793},
										expr: &litMatcher{
											pos:        position{line: 287, col: 48, offset: 9794},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 287, col: 52, offset: 9798},
										expr: &ruleRefExpr{
											pos:  position{line: 287, col: 53, offset: 9799},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 287, col: 57, offset: 9803,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 291, col: 1, offset: 9844},
			expr: &actionExpr{
				pos: position{line: 291, col: 21, offset: 9864},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 291, col: 21, offset: 9864},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 291, col: 21, offset: 9864},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 291, col: 25, offset: 9868},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 291, col: 31, offset: 9874},
								expr: &ruleRefExpr{
									pos:  position{line: 291, col: 32, offset: 9875},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 291, col: 51, offset: 9894},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 298, col: 1, offset: 10068},
			expr: &actionExpr{
				pos: position{line: 298, col: 12, offset: 10079},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 298, col: 12, offset: 10079},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 298, col: 12, offset: 10079},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 298, col: 23, offset: 10090},
								expr: &ruleRefExpr{
									pos:  position{line: 298, col: 24, offset: 10091},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 299, col: 5, offset: 10115},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 299, col: 12, offset: 10122},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 299, col: 12, offset: 10122},
									expr: &litMatcher{
										pos:        position{line: 299, col: 13, offset: 10123},
										val:        "=",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 303, col: 5, offset: 10214},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 307, col: 5, offset: 10366},
							expr: &ruleRefExpr{
								pos:  position{line: 307, col: 5, offset: 10366},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 307, col: 9, offset: 10370},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 307, col: 16, offset: 10377},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 307, col: 31, offset: 10392},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 307, col: 35, offset: 10396},
								expr: &ruleRefExpr{
									pos:  position{line: 307, col: 35, offset: 10396},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 307, col: 53, offset: 10414},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 311, col: 1, offset: 10527},
			expr: &actionExpr{
				pos: position{line: 311, col: 18, offset: 10544},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 311, col: 18, offset: 10544},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 311, col: 27, offset: 10553},
						expr: &seqExpr{
							pos: position{line: 311, col: 28, offset: 10554},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 311, col: 28, offset: 10554},
									expr: &ruleRefExpr{
										pos:  position{line: 311, col: 29, offset: 10555},
										name: "NEWLINE",
									},
								},
								&notExpr{
									pos: position{line: 311, col: 37, offset: 10563},
									expr: &ruleRefExpr{
										pos:  position{line: 311, col: 38, offset: 10564},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 311, col: 54, offset: 10580},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 315, col: 1, offset: 10701},
			expr: &actionExpr{
				pos: position{line: 315, col: 17, offset: 10717},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 315, col: 17, offset: 10717},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 315, col: 26, offset: 10726},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 315, col: 26, offset: 10726},
								name: "SimpleWord",
							},
							&ruleRefExpr{
								pos:  position{line: 316, col: 11, offset: 10747},
								name: "Spaces",
							},
							&ruleRefExpr{
								pos:  position{line: 317, col: 11, offset: 10765},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 318, col: 11, offset: 10790},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 319, col: 11, offset: 10812},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 320, col: 11, offset: 10835},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 321, col: 11, offset: 10850},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 322, col: 11, offset: 10875},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 323, col: 11, offset: 10896},
								name: "DocumentAttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 324, col: 11, offset: 10936},
								name: "LineBreak",
							},
							&ruleRefExpr{
								pos:  position{line: 325, col: 11, offset: 10956},
								name: "OtherWord",
							},
							&ruleRefExpr{
								pos:  position{line: 326, col: 11, offset: 10976},
								name: "Parenthesis",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsMacro",
			pos:  position{line: 333, col: 1, offset: 11131},
			expr: &seqExpr{
				pos: position{line: 333, col: 25, offset: 11155},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 333, col: 25, offset: 11155},
						val:        "toc::[]",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 333, col: 35, offset: 11165},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 338, col: 1, offset: 11276},
			expr: &actionExpr{
				pos: position{line: 338, col: 19, offset: 11294},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 338, col: 19, offset: 11294},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 338, col: 19, offset: 11294},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 338, col: 25, offset: 11300},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 338, col: 40, offset: 11315},
							val:        "::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 338, col: 45, offset: 11320},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 338, col: 52, offset: 11327},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 338, col: 68, offset: 11343},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 338, col: 75, offset: 11350},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 342, col: 1, offset: 11491},
			expr: &actionExpr{
				pos: position{line: 342, col: 20, offset: 11510},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 342, col: 20, offset: 11510},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 342, col: 20, offset: 11510},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 342, col: 26, offset: 11516},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 342, col: 41, offset: 11531},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 342, col: 45, offset: 11535},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 342, col: 52, offset: 11542},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 342, col: 68, offset: 11558},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 342, col: 75, offset: 11565},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 346, col: 1, offset: 11707},
			expr: &actionExpr{
				pos: position{line: 346, col: 18, offset: 11724},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 346, col: 18, offset: 11724},
					expr: &choiceExpr{
						pos: position{line: 346, col: 19, offset: 11725},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 346, col: 19, offset: 11725},
								val:        "[a-zA-Z0-9]",
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
							&litMatcher{
								pos:        position{line: 346, col: 33, offset: 11739},
								val:        "_",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 346, col: 39, offset: 11745},
								val:        "-",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 350, col: 1, offset: 11787},
			expr: &actionExpr{
				pos: position{line: 350, col: 19, offset: 11805},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 350, col: 19, offset: 11805},
					expr: &choiceExpr{
						pos: position{line: 350, col: 20, offset: 11806},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 350, col: 20, offset: 11806},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 350, col: 33, offset: 11819},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 350, col: 33, offset: 11819},
										expr: &ruleRefExpr{
											pos:  position{line: 350, col: 34, offset: 11820},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 350, col: 37, offset: 11823},
										expr: &litMatcher{
											pos:        position{line: 350, col: 38, offset: 11824},
											val:        ":",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 350, col: 42, offset: 11828},
										expr: &litMatcher{
											pos:        position{line: 350, col: 43, offset: 11829},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 350, col: 47, offset: 11833},
										expr: &ruleRefExpr{
											pos:  position{line: 350, col: 48, offset: 11834},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 350, col: 52, offset: 11838,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 354, col: 1, offset: 11879},
			expr: &actionExpr{
				pos: position{line: 354, col: 24, offset: 11902},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 354, col: 24, offset: 11902},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 354, col: 24, offset: 11902},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 354, col: 28, offset: 11906},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 354, col: 34, offset: 11912},
								expr: &ruleRefExpr{
									pos:  position{line: 354, col: 35, offset: 11913},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 354, col: 54, offset: 11932},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 361, col: 1, offset: 12112},
			expr: &actionExpr{
				pos: position{line: 361, col: 18, offset: 12129},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 361, col: 18, offset: 12129},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 361, col: 18, offset: 12129},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 361, col: 24, offset: 12135},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 361, col: 24, offset: 12135},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 361, col: 24, offset: 12135},
											val:        "include::",
											ignoreCase: false,
										},
										&labeledExpr{
											pos:   position{line: 361, col: 36, offset: 12147},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 361, col: 42, offset: 12153},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 361, col: 56, offset: 12167},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 361, col: 74, offset: 12185},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 363, col: 8, offset: 12339},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 367, col: 1, offset: 12392},
			expr: &actionExpr{
				pos: position{line: 367, col: 26, offset: 12417},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 367, col: 26, offset: 12417},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 367, col: 26, offset: 12417},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 367, col: 30, offset: 12421},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 367, col: 36, offset: 12427},
								expr: &choiceExpr{
									pos: position{line: 367, col: 37, offset: 12428},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 367, col: 37, offset: 12428},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 367, col: 59, offset: 12450},
											name: "TagRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 367, col: 80, offset: 12471},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 367, col: 99, offset: 12490},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 371, col: 1, offset: 12560},
			expr: &actionExpr{
				pos: position{line: 371, col: 24, offset: 12583},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 371, col: 24, offset: 12583},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 371, col: 24, offset: 12583},
							val:        "lines=",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 371, col: 33, offset: 12592},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 371, col: 40, offset: 12599},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 371, col: 66, offset: 12625},
							expr: &litMatcher{
								pos:        position{line: 371, col: 66, offset: 12625},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 375, col: 1, offset: 12684},
			expr: &actionExpr{
				pos: position{line: 375, col: 29, offset: 12712},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 375, col: 29, offset: 12712},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 375, col: 29, offset: 12712},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 375, col: 36, offset: 12719},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 375, col: 36, offset: 12719},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 376, col: 11, offset: 12836},
										name: "MultipleQuotedLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 377, col: 11, offset: 12872},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 378, col: 11, offset: 12898},
										name: "MultiLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 379, col: 11, offset: 12930},
										name: "SingleLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 380, col: 11, offset: 12962},
										name: "SingleLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 381, col: 11, offset: 12989},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 381, col: 31, offset: 13009},
							expr: &ruleRefExpr{
								pos:  position{line: 381, col: 31, offset: 13009},
								name: "WS",
							},
						},
						&choiceExpr{
							pos: position{line: 381, col: 36, offset: 13014},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 381, col: 36, offset: 13014},
									expr: &litMatcher{
										pos:        position{line: 381, col: 37, offset: 13015},
										val:        ",",
										ignoreCase: false,
									},
								},
								&andExpr{
									pos: position{line: 381, col: 43, offset: 13021},
									expr: &litMatcher{
										pos:        position{line: 381, col: 44, offset: 13022},
										val:        "]",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 385, col: 1, offset: 13054},
			expr: &actionExpr{
				pos: position{line: 385, col: 23, offset: 13076},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 385, col: 23, offset: 13076},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 385, col: 23, offset: 13076},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 385, col: 30, offset: 13083},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 385, col: 30, offset: 13083},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 385, col: 47, offset: 13100},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 386, col: 5, offset: 13122},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 386, col: 12, offset: 13129},
								expr: &actionExpr{
									pos: position{line: 386, col: 13, offset: 13130},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 386, col: 13, offset: 13130},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 386, col: 13, offset: 13130},
												val:        ";",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 386, col: 17, offset: 13134},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 386, col: 24, offset: 13141},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 386, col: 24, offset: 13141},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 386, col: 41, offset: 13158},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedLineRanges",
			pos:  position{line: 392, col: 1, offset: 13296},
			expr: &actionExpr{
				pos: position{line: 392, col: 29, offset: 13324},
				run: (*parser).callonMultipleQuotedLineRanges1,
				expr: &seqExpr{
					pos: position{line: 392, col: 29, offset: 13324},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 392, col: 29, offset: 13324},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 392, col: 34, offset: 13329},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 392, col: 41, offset: 13336},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 392, col: 41, offset: 13336},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 392, col: 58, offset: 13353},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 393, col: 5, offset: 13375},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 393, col: 12, offset: 13382},
								expr: &actionExpr{
									pos: position{line: 393, col: 13, offset: 13383},
									run: (*parser).callonMultipleQuotedLineRanges10,
									expr: &seqExpr{
										pos: position{line: 393, col: 13, offset: 13383},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 393, col: 13, offset: 13383},
												val:        ",",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 393, col: 17, offset: 13387},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 393, col: 24, offset: 13394},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 393, col: 24, offset: 13394},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 393, col: 41, offset: 13411},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 395, col: 9, offset: 13464},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 399, col: 1, offset: 13554},
			expr: &actionExpr{
				pos: position{line: 399, col: 19, offset: 13572},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 399, col: 19, offset: 13572},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 399, col: 19, offset: 13572},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 399, col: 26, offset: 13579},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 399, col: 34, offset: 13587},
							val:        "..",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 399, col: 39, offset: 13592},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 399, col: 44, offset: 13597},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineQuotedRange",
			pos:  position{line: 403, col: 1, offset: 13685},
			expr: &actionExpr{
				pos: position{line: 403, col: 25, offset: 13709},
				run: (*parser).callonMultiLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 403, col: 25, offset: 13709},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 403, col: 25, offset: 13709},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 403, col: 30, offset: 13714},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 403, col: 37, offset: 13721},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 403, col: 45, offset: 13729},
							val:        "..",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 403, col: 50, offset: 13734},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 403, col: 55, offset: 13739},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 403, col: 63, offset: 13747},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 407, col: 1, offset: 13832},
			expr: &actionExpr{
				pos: position{line: 407, col: 20, offset: 13851},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 407, col: 20, offset: 13851},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 407, col: 32, offset: 13863},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SingleLineQuotedRange",
			pos:  position{line: 411, col: 1, offset: 13958},
			expr: &actionExpr{
				pos: position{line: 411, col: 26, offset: 13983},
				run: (*parser).callonSingleLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 411, col: 26, offset: 13983},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 411, col: 26, offset: 13983},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 411, col: 31, offset: 13988},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 411, col: 43, offset: 14000},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 411, col: 51, offset: 14008},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 415, col: 1, offset: 14100},
			expr: &actionExpr{
				pos: position{line: 415, col: 23, offset: 14122},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 415, col: 23, offset: 14122},
					expr: &seqExpr{
						pos: position{line: 415, col: 24, offset: 14123},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 415, col: 24, offset: 14123},
								expr: &litMatcher{
									pos:        position{line: 415, col: 25, offset: 14124},
									val:        "]",
									ignoreCase: false,
								},
							},
							&notExpr{
								pos: position{line: 415, col: 29, offset: 14128},
								expr: &litMatcher{
									pos:        position{line: 415, col: 30, offset: 14129},
									val:        ",",
									ignoreCase: false,
								},
							},
							&notExpr{
								pos: position{line: 415, col: 34, offset: 14133},
								expr: &ruleRefExpr{
									pos:  position{line: 415, col: 35, offset: 14134},
									name: "WS",
								},
							},
							&anyMatcher{
								line: 415, col: 38, offset: 14137,
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttribute",
			pos:  position{line: 419, col: 1, offset: 14177},
			expr: &actionExpr{
				pos: position{line: 419, col: 23, offset: 14199},
				run: (*parser).callonTagRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 419, col: 23, offset: 14199},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 419, col: 24, offset: 14200},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 419, col: 24, offset: 14200},
									val:        "tags=",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 419, col: 34, offset: 14210},
									val:        "tag=",
									ignoreCase: false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 419, col: 42, offset: 14218},
							label: "tags",
							expr: &ruleRefExpr{
								pos:  position{line: 419, col: 48, offset: 14224},
								name: "TagRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 419, col: 73, offset: 14249},
							expr: &litMatcher{
								pos:        position{line: 419, col: 73, offset: 14249},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttributeValue",
			pos:  position{line: 423, col: 1, offset: 14398},
			expr: &actionExpr{
				pos: position{line: 423, col: 28, offset: 14425},
				run: (*parser).callonTagRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 423, col: 28, offset: 14425},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 423, col: 28, offset: 14425},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 423, col: 35, offset: 14432},
								name: "MultipleTagRanges",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 423, col: 54, offset: 14451},
							expr: &ruleRefExpr{
								pos:  position{line: 423, col: 54, offset: 14451},
								name: "WS",
							},
						},
						&choiceExpr{
							pos: position{line: 423, col: 59, offset: 14456},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 423, col: 59, offset: 14456},
									expr: &litMatcher{
										pos:        position{line: 423, col: 60, offset: 14457},
										val:        ",",
										ignoreCase: false,
									},
								},
								&andExpr{
									pos: position{line: 423, col: 66, offset: 14463},
									expr: &litMatcher{
										pos:        position{line: 423, col: 67, offset: 14464},
										val:        "]",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 427, col: 1, offset: 14496},
			expr: &actionExpr{
				pos: position{line: 427, col: 22, offset: 14517},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 427, col: 22, offset: 14517},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 427, col: 22, offset: 14517},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 427, col: 29, offset: 14524},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 428, col: 5, offset: 14538},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 428, col: 12, offset: 14545},
								expr: &actionExpr{
									pos: position{line: 428, col: 13, offset: 14546},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 428, col: 13, offset: 14546},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 428, col: 13, offset: 14546},
												val:        ";",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 428, col: 17, offset: 14550},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 428, col: 24, offset: 14557},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 434, col: 1, offset: 14688},
			expr: &choiceExpr{
				pos: position{line: 434, col: 13, offset: 14700},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 434, col: 13, offset: 14700},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 434, col: 13, offset: 14700},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 434, col: 18, offset: 14705},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 434, col: 18, offset: 14705},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 434, col: 30, offset: 14717},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 436, col: 5, offset: 14785},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 436, col: 5, offset: 14785},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 436, col: 5, offset: 14785},
									val:        "!",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 436, col: 9, offset: 14789},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 436, col: 14, offset: 14794},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 436, col: 14, offset: 14794},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 436, col: 26, offset: 14806},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 440, col: 1, offset: 14874},
			expr: &actionExpr{
				pos: position{line: 440, col: 16, offset: 14889},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 440, col: 16, offset: 14889},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 440, col: 16, offset: 14889},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 440, col: 23, offset: 14896},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 440, col: 23, offset: 14896},
									expr: &litMatcher{
										pos:        position{line: 440, col: 24, offset: 14897},
										val:        "*",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 443, col: 5, offset: 14951},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 453, col: 1, offset: 15245},
			expr: &actionExpr{
				pos: position{line: 453, col: 21, offset: 15265},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 453, col: 21, offset: 15265},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 453, col: 21, offset: 15265},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 453, col: 29, offset: 15273},
								expr: &choiceExpr{
									pos: position{line: 453, col: 30, offset: 15274},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 453, col: 30, offset: 15274},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 453, col: 53, offset: 15297},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 453, col: 74, offset: 15318},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 453, col: 74, offset: 15318,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 453, col: 107, offset: 15351},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 457, col: 1, offset: 15422},
			expr: &actionExpr{
				pos: position{line: 457, col: 25, offset: 15446},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 457, col: 25, offset: 15446},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 457, col: 25, offset: 15446},
							val:        "tag::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 457, col: 33, offset: 15454},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 457, col: 38, offset: 15459},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 457, col: 38, offset: 15459},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 457, col: 78, offset: 15499},
							val:        "[]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 461, col: 1, offset: 15564},
			expr: &actionExpr{
				pos: position{line: 461, col: 23, offset: 15586},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 461, col: 23, offset: 15586},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 461, col: 23, offset: 15586},
							val:        "end::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 461, col: 31, offset: 15594},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 461, col: 36, offset: 15599},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 461, col: 36, offset: 15599},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 461, col: 76, offset: 15639},
							val:        "[]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ListItems",
			pos:  position{line: 468, col: 1, offset: 15803},
			expr: &oneOrMoreExpr{
				pos: position{line: 468, col: 14, offset: 15816},
				expr: &ruleRefExpr{
					pos:  position{line: 468, col: 14, offset: 15816},
					name: "ListItem",
				},
			},
		},
		{
			name: "ListItem",
			pos:  position{line: 470, col: 1, offset: 15827},
			expr: &choiceExpr{
				pos: position{line: 470, col: 13, offset: 15839},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 470, col: 13, offset: 15839},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 470, col: 31, offset: 15857},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 470, col: 51, offset: 15877},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 470, col: 69, offset: 15895},
						name: "ContinuedListItemElement",
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 472, col: 1, offset: 15921},
			expr: &choiceExpr{
				pos: position{line: 472, col: 18, offset: 15938},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 472, col: 18, offset: 15938},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 472, col: 18, offset: 15938},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 472, col: 27, offset: 15947},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 474, col: 9, offset: 16004},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 474, col: 9, offset: 16004},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 474, col: 15, offset: 16010},
								expr: &ruleRefExpr{
									pos:  position{line: 474, col: 16, offset: 16011},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 478, col: 1, offset: 16103},
			expr: &actionExpr{
				pos: position{line: 478, col: 22, offset: 16124},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 478, col: 22, offset: 16124},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 478, col: 22, offset: 16124},
							expr: &ruleRefExpr{
								pos:  position{line: 478, col: 23, offset: 16125},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 479, col: 5, offset: 16133},
							expr: &ruleRefExpr{
								pos:  position{line: 479, col: 6, offset: 16134},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 480, col: 5, offset: 16149},
							expr: &ruleRefExpr{
								pos:  position{line: 480, col: 6, offset: 16150},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 481, col: 5, offset: 16172},
							expr: &ruleRefExpr{
								pos:  position{line: 481, col: 6, offset: 16173},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 482, col: 5, offset: 16199},
							expr: &ruleRefExpr{
								pos:  position{line: 482, col: 6, offset: 16200},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 483, col: 5, offset: 16228},
							expr: &seqExpr{
								pos: position{line: 483, col: 7, offset: 16230},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 483, col: 7, offset: 16230},
										name: "LabeledListItemTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 483, col: 27, offset: 16250},
										name: "LabeledListItemSeparator",
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 484, col: 5, offset: 16281},
							expr: &ruleRefExpr{
								pos:  position{line: 484, col: 6, offset: 16282},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 485, col: 5, offset: 16307},
							expr: &ruleRefExpr{
								pos:  position{line: 485, col: 6, offset: 16308},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 486, col: 5, offset: 16329},
							expr: &ruleRefExpr{
								pos:  position{line: 486, col: 6, offset: 16330},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 487, col: 5, offset: 16349},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 488, col: 9, offset: 16364},
								run: (*parser).callonListParagraphLine24,
								expr: &seqExpr{
									pos: position{line: 488, col: 9, offset: 16364},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 488, col: 9, offset: 16364},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 488, col: 18, offset: 16373},
												expr: &ruleRefExpr{
													pos:  position{line: 488, col: 19, offset: 16374},
													name: "InlineElement",
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 488, col: 35, offset: 16390},
											label: "linebreak",
											expr: &zeroOrOneExpr{
												pos: position{line: 488, col: 45, offset: 16400},
												expr: &ruleRefExpr{
													pos:  position{line: 488, col: 46, offset: 16401},
													name: "LineBreak",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 490, col: 12, offset: 16553},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 494, col: 1, offset: 16600},
			expr: &seqExpr{
				pos: position{line: 494, col: 25, offset: 16624},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 494, col: 25, offset: 16624},
						val:        "+",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 494, col: 29, offset: 16628},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 496, col: 1, offset: 16635},
			expr: &actionExpr{
				pos: position{line: 496, col: 29, offset: 16663},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 496, col: 29, offset: 16663},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 496, col: 29, offset: 16663},
							label: "blanklines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 496, col: 41, offset: 16675},
								expr: &ruleRefExpr{
									pos:  position{line: 496, col: 41, offset: 16675},
									name: "BlankLine",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 496, col: 53, offset: 16687},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 496, col: 74, offset: 16708},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 496, col: 82, offset: 16716},
								name: "DocumentBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 503, col: 1, offset: 16958},
			expr: &actionExpr{
				pos: position{line: 503, col: 20, offset: 16977},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 503, col: 20, offset: 16977},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 503, col: 20, offset: 16977},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 503, col: 31, offset: 16988},
								expr: &ruleRefExpr{
									pos:  position{line: 503, col: 32, offset: 16989},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 503, col: 52, offset: 17009},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 503, col: 60, offset: 17017},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 503, col: 83, offset: 17040},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 503, col: 92, offset: 17049},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 507, col: 1, offset: 17189},
			expr: &actionExpr{
				pos: position{line: 508, col: 5, offset: 17219},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 508, col: 5, offset: 17219},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 508, col: 5, offset: 17219},
							expr: &ruleRefExpr{
								pos:  position{line: 508, col: 5, offset: 17219},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 508, col: 9, offset: 17223},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 510, col: 9, offset: 17286},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 510, col: 9, offset: 17286},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 510, col: 9, offset: 17286},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 510, col: 9, offset: 17286},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 510, col: 16, offset: 17293},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 510, col: 16, offset: 17293},
															expr: &litMatcher{
																pos:        position{line: 510, col: 17, offset: 17294},
																val:        ".",
																ignoreCase: false,
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 514, col: 9, offset: 17394},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 533, col: 11, offset: 18111},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 533, col: 11, offset: 18111},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 533, col: 11, offset: 18111},
													expr: &charClassMatcher{
														pos:        position{line: 533, col: 12, offset: 18112},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 533, col: 20, offset: 18120},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 535, col: 13, offset: 18231},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 535, col: 13, offset: 18231},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 535, col: 14, offset: 18232},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 535, col: 21, offset: 18239},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 537, col: 13, offset: 18353},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 537, col: 13, offset: 18353},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 537, col: 14, offset: 18354},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 537, col: 21, offset: 18361},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 539, col: 13, offset: 18475},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 539, col: 13, offset: 18475},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 539, col: 13, offset: 18475},
													expr: &charClassMatcher{
														pos:        position{line: 539, col: 14, offset: 18476},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 539, col: 22, offset: 18484},
													val:        ")",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 541, col: 13, offset: 18598},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 541, col: 13, offset: 18598},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 541, col: 13, offset: 18598},
													expr: &charClassMatcher{
														pos:        position{line: 541, col: 14, offset: 18599},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 541, col: 22, offset: 18607},
													val:        ")",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 543, col: 12, offset: 18720},
							expr: &ruleRefExpr{
								pos:  position{line: 543, col: 12, offset: 18720},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 547, col: 1, offset: 18752},
			expr: &actionExpr{
				pos: position{line: 547, col: 27, offset: 18778},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 547, col: 27, offset: 18778},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 547, col: 37, offset: 18788},
						expr: &ruleRefExpr{
							pos:  position{line: 547, col: 37, offset: 18788},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 554, col: 1, offset: 18988},
			expr: &actionExpr{
				pos: position{line: 554, col: 22, offset: 19009},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 554, col: 22, offset: 19009},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 554, col: 22, offset: 19009},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 554, col: 33, offset: 19020},
								expr: &ruleRefExpr{
									pos:  position{line: 554, col: 34, offset: 19021},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 554, col: 54, offset: 19041},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 554, col: 62, offset: 19049},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 554, col: 87, offset: 19074},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 554, col: 98, offset: 19085},
								expr: &ruleRefExpr{
									pos:  position{line: 554, col: 99, offset: 19086},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 554, col: 129, offset: 19116},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 554, col: 138, offset: 19125},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 558, col: 1, offset: 19283},
			expr: &actionExpr{
				pos: position{line: 559, col: 5, offset: 19315},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 559, col: 5, offset: 19315},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 559, col: 5, offset: 19315},
							expr: &ruleRefExpr{
								pos:  position{line: 559, col: 5, offset: 19315},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 559, col: 9, offset: 19319},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 559, col: 17, offset: 19327},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 561, col: 9, offset: 19384},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 561, col: 9, offset: 19384},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 561, col: 9, offset: 19384},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 561, col: 16, offset: 19391},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 561, col: 16, offset: 19391},
															expr: &litMatcher{
																pos:        position{line: 561, col: 17, offset: 19392},
																val:        "*",
																ignoreCase: false,
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 565, col: 9, offset: 19492},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 582, col: 14, offset: 20199},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 582, col: 21, offset: 20206},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 582, col: 22, offset: 20207},
												val:        "-",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 584, col: 13, offset: 20293},
							expr: &ruleRefExpr{
								pos:  position{line: 584, col: 13, offset: 20293},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 588, col: 1, offset: 20326},
			expr: &actionExpr{
				pos: position{line: 588, col: 32, offset: 20357},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 588, col: 32, offset: 20357},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 588, col: 32, offset: 20357},
							expr: &litMatcher{
								pos:        position{line: 588, col: 33, offset: 20358},
								val:        "[",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 588, col: 37, offset: 20362},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 589, col: 7, offset: 20376},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 589, col: 7, offset: 20376},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 589, col: 7, offset: 20376},
											val:        "[ ]",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 590, col: 7, offset: 20421},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 590, col: 7, offset: 20421},
											val:        "[*]",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 591, col: 7, offset: 20464},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 591, col: 7, offset: 20464},
											val:        "[x]",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 592, col: 7, offset: 20506},
							expr: &ruleRefExpr{
								pos:  position{line: 592, col: 7, offset: 20506},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 596, col: 1, offset: 20545},
			expr: &actionExpr{
				pos: position{line: 596, col: 29, offset: 20573},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 596, col: 29, offset: 20573},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 596, col: 39, offset: 20583},
						expr: &ruleRefExpr{
							pos:  position{line: 596, col: 39, offset: 20583},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 603, col: 1, offset: 20899},
			expr: &actionExpr{
				pos: position{line: 603, col: 20, offset: 20918},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 603, col: 20, offset: 20918},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 603, col: 20, offset: 20918},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 603, col: 31, offset: 20929},
								expr: &ruleRefExpr{
									pos:  position{line: 603, col: 32, offset: 20930},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 603, col: 52, offset: 20950},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 603, col: 58, offset: 20956},
								name: "LabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 603, col: 79, offset: 20977},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 603, col: 90, offset: 20988},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 603, col: 116, offset: 21014},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 603, col: 128, offset: 21026},
								expr: &ruleRefExpr{
									pos:  position{line: 603, col: 129, offset: 21027},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 607, col: 1, offset: 21166},
			expr: &actionExpr{
				pos: position{line: 607, col: 24, offset: 21189},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &oneOrMoreExpr{
					pos: position{line: 607, col: 24, offset: 21189},
					expr: &choiceExpr{
						pos: position{line: 607, col: 25, offset: 21190},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 607, col: 25, offset: 21190},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 607, col: 37, offset: 21202},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 607, col: 47, offset: 21212},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 607, col: 47, offset: 21212},
										expr: &ruleRefExpr{
											pos:  position{line: 607, col: 48, offset: 21213},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 607, col: 56, offset: 21221},
										expr: &litMatcher{
											pos:        position{line: 607, col: 57, offset: 21222},
											val:        "::",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 607, col: 62, offset: 21227,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 611, col: 1, offset: 21269},
			expr: &actionExpr{
				pos: position{line: 612, col: 5, offset: 21302},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 612, col: 5, offset: 21302},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 612, col: 5, offset: 21302},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 612, col: 16, offset: 21313},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 612, col: 16, offset: 21313},
									expr: &litMatcher{
										pos:        position{line: 612, col: 17, offset: 21314},
										val:        ":",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 615, col: 5, offset: 21372},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 619, col: 6, offset: 21548},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 619, col: 6, offset: 21548},
									expr: &choiceExpr{
										pos: position{line: 619, col: 7, offset: 21549},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 619, col: 7, offset: 21549},
												name: "WS",
											},
											&ruleRefExpr{
												pos:  position{line: 619, col: 12, offset: 21554},
												name: "NEWLINE",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 619, col: 24, offset: 21566},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 623, col: 1, offset: 21606},
			expr: &actionExpr{
				pos: position{line: 623, col: 31, offset: 21636},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 623, col: 31, offset: 21636},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 623, col: 40, offset: 21645},
						expr: &ruleRefExpr{
							pos:  position{line: 623, col: 41, offset: 21646},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 630, col: 1, offset: 21837},
			expr: &choiceExpr{
				pos: position{line: 630, col: 19, offset: 21855},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 630, col: 19, offset: 21855},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 630, col: 19, offset: 21855},
							val:        "TIP",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 632, col: 9, offset: 21901},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 632, col: 9, offset: 21901},
							val:        "NOTE",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 634, col: 9, offset: 21949},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 634, col: 9, offset: 21949},
							val:        "IMPORTANT",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 636, col: 9, offset: 22007},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 636, col: 9, offset: 22007},
							val:        "WARNING",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 638, col: 9, offset: 22061},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 638, col: 9, offset: 22061},
							val:        "CAUTION",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 647, col: 1, offset: 22368},
			expr: &choiceExpr{
				pos: position{line: 649, col: 5, offset: 22415},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 649, col: 5, offset: 22415},
						run: (*parser).callonParagraph2,
						expr: &seqExpr{
							pos: position{line: 649, col: 5, offset: 22415},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 649, col: 5, offset: 22415},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 649, col: 16, offset: 22426},
										expr: &ruleRefExpr{
											pos:  position{line: 649, col: 17, offset: 22427},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 649, col: 37, offset: 22447},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 649, col: 40, offset: 22450},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 649, col: 56, offset: 22466},
									val:        ": ",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 649, col: 61, offset: 22471},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 649, col: 67, offset: 22477},
										expr: &ruleRefExpr{
											pos:  position{line: 649, col: 68, offset: 22478},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 653, col: 5, offset: 22670},
						run: (*parser).callonParagraph13,
						expr: &seqExpr{
							pos: position{line: 653, col: 5, offset: 22670},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 653, col: 5, offset: 22670},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 653, col: 16, offset: 22681},
										expr: &ruleRefExpr{
											pos:  position{line: 653, col: 17, offset: 22682},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 653, col: 37, offset: 22702},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 653, col: 43, offset: 22708},
										expr: &ruleRefExpr{
											pos:  position{line: 653, col: 44, offset: 22709},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SimpleParagraph",
			pos:  position{line: 658, col: 1, offset: 22874},
			expr: &actionExpr{
				pos: position{line: 658, col: 20, offset: 22893},
				run: (*parser).callonSimpleParagraph1,
				expr: &seqExpr{
					pos: position{line: 658, col: 20, offset: 22893},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 658, col: 20, offset: 22893},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 658, col: 31, offset: 22904},
								expr: &ruleRefExpr{
									pos:  position{line: 658, col: 32, offset: 22905},
									name: "ElementAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 659, col: 5, offset: 22930},
							run: (*parser).callonSimpleParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 667, col: 5, offset: 23221},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 667, col: 16, offset: 23232},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 668, col: 5, offset: 23255},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 668, col: 16, offset: 23266},
								expr: &ruleRefExpr{
									pos:  position{line: 668, col: 17, offset: 23267},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphLines",
			pos:  position{line: 672, col: 1, offset: 23401},
			expr: &actionExpr{
				pos: position{line: 672, col: 19, offset: 23419},
				run: (*parser).callonParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 672, col: 19, offset: 23419},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 672, col: 19, offset: 23419},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 672, col: 30, offset: 23430},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 672, col: 50, offset: 23450},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 672, col: 61, offset: 23461},
								expr: &ruleRefExpr{
									pos:  position{line: 672, col: 62, offset: 23462},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphLine",
			pos:  position{line: 676, col: 1, offset: 23568},
			expr: &actionExpr{
				pos: position{line: 676, col: 23, offset: 23590},
				run: (*parser).callonFirstParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 676, col: 23, offset: 23590},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 676, col: 23, offset: 23590},
							expr: &seqExpr{
								pos: position{line: 676, col: 25, offset: 23592},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 676, col: 25, offset: 23592},
										name: "LabeledListItemTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 676, col: 45, offset: 23612},
										name: "LabeledListItemSeparator",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 677, col: 5, offset: 23642},
							label: "elements",
							expr: &seqExpr{
								pos: position{line: 677, col: 15, offset: 23652},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 677, col: 15, offset: 23652},
										name: "SimpleWord",
									},
									&zeroOrMoreExpr{
										pos: position{line: 677, col: 26, offset: 23663},
										expr: &ruleRefExpr{
											pos:  position{line: 677, col: 26, offset: 23663},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 677, col: 42, offset: 23679},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 677, col: 52, offset: 23689},
								expr: &ruleRefExpr{
									pos:  position{line: 677, col: 53, offset: 23690},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 677, col: 65, offset: 23702},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OtherParagraphLine",
			pos:  position{line: 681, col: 1, offset: 23792},
			expr: &actionExpr{
				pos: position{line: 681, col: 23, offset: 23814},
				run: (*parser).callonOtherParagraphLine1,
				expr: &labeledExpr{
					pos:   position{line: 681, col: 23, offset: 23814},
					label: "elements",
					expr: &ruleRefExpr{
						pos:  position{line: 681, col: 33, offset: 23824},
						name: "InlineElements",
					},
				},
			},
		},
		{
			name: "VerseParagraph",
			pos:  position{line: 685, col: 1, offset: 23870},
			expr: &choiceExpr{
				pos: position{line: 687, col: 5, offset: 23922},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 687, col: 5, offset: 23922},
						run: (*parser).callonVerseParagraph2,
						expr: &seqExpr{
							pos: position{line: 687, col: 5, offset: 23922},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 687, col: 5, offset: 23922},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 687, col: 16, offset: 23933},
										expr: &ruleRefExpr{
											pos:  position{line: 687, col: 17, offset: 23934},
											name: "ElementAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 688, col: 5, offset: 23958},
									run: (*parser).callonVerseParagraph7,
								},
								&labeledExpr{
									pos:   position{line: 695, col: 5, offset: 24170},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 695, col: 8, offset: 24173},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 695, col: 24, offset: 24189},
									val:        ": ",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 695, col: 29, offset: 24194},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 695, col: 35, offset: 24200},
										expr: &ruleRefExpr{
											pos:  position{line: 695, col: 36, offset: 24201},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 699, col: 5, offset: 24393},
						run: (*parser).callonVerseParagraph14,
						expr: &seqExpr{
							pos: position{line: 699, col: 5, offset: 24393},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 699, col: 5, offset: 24393},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 699, col: 16, offset: 24404},
										expr: &ruleRefExpr{
											pos:  position{line: 699, col: 17, offset: 24405},
											name: "ElementAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 700, col: 5, offset: 24429},
									run: (*parser).callonVerseParagraph19,
								},
								&labeledExpr{
									pos:   position{line: 707, col: 5, offset: 24641},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 707, col: 11, offset: 24647},
										expr: &ruleRefExpr{
											pos:  position{line: 707, col: 12, offset: 24648},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 711, col: 1, offset: 24749},
			expr: &actionExpr{
				pos: position{line: 711, col: 19, offset: 24767},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 711, col: 19, offset: 24767},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 711, col: 19, offset: 24767},
							expr: &ruleRefExpr{
								pos:  position{line: 711, col: 20, offset: 24768},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 711, col: 24, offset: 24772},
							expr: &ruleRefExpr{
								pos:  position{line: 711, col: 25, offset: 24773},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 712, col: 5, offset: 24787},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 712, col: 15, offset: 24797},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 712, col: 15, offset: 24797},
										run: (*parser).callonInlineElements9,
										expr: &labeledExpr{
											pos:   position{line: 712, col: 15, offset: 24797},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 712, col: 24, offset: 24806},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 714, col: 9, offset: 24898},
										run: (*parser).callonInlineElements12,
										expr: &seqExpr{
											pos: position{line: 714, col: 9, offset: 24898},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 714, col: 9, offset: 24898},
													expr: &ruleRefExpr{
														pos:  position{line: 714, col: 10, offset: 24899},
														name: "BlockDelimiter",
													},
												},
												&labeledExpr{
													pos:   position{line: 714, col: 25, offset: 24914},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 714, col: 34, offset: 24923},
														expr: &ruleRefExpr{
															pos:  position{line: 714, col: 35, offset: 24924},
															name: "InlineElement",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 714, col: 51, offset: 24940},
													label: "linebreak",
													expr: &zeroOrOneExpr{
														pos: position{line: 714, col: 61, offset: 24950},
														expr: &ruleRefExpr{
															pos:  position{line: 714, col: 62, offset: 24951},
															name: "LineBreak",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 714, col: 74, offset: 24963},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 720, col: 1, offset: 25099},
			expr: &actionExpr{
				pos: position{line: 720, col: 18, offset: 25116},
				run: (*parser).callonInlineElement1,
				expr: &seqExpr{
					pos: position{line: 720, col: 18, offset: 25116},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 720, col: 18, offset: 25116},
							expr: &ruleRefExpr{
								pos:  position{line: 720, col: 19, offset: 25117},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 720, col: 23, offset: 25121},
							expr: &ruleRefExpr{
								pos:  position{line: 720, col: 24, offset: 25122},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 721, col: 5, offset: 25137},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 721, col: 14, offset: 25146},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 721, col: 14, offset: 25146},
										name: "SimpleWord",
									},
									&ruleRefExpr{
										pos:  position{line: 722, col: 11, offset: 25167},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 723, col: 11, offset: 25185},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 724, col: 11, offset: 25208},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 725, col: 11, offset: 25224},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 726, col: 11, offset: 25247},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 727, col: 11, offset: 25273},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 728, col: 11, offset: 25300},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 729, col: 11, offset: 25322},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 730, col: 11, offset: 25348},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 731, col: 11, offset: 25389},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 732, col: 11, offset: 25416},
										name: "OtherWord",
									},
									&ruleRefExpr{
										pos:  position{line: 733, col: 11, offset: 25436},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementsWithoutSubtitution",
			pos:  position{line: 741, col: 1, offset: 25699},
			expr: &actionExpr{
				pos: position{line: 741, col: 37, offset: 25735},
				run: (*parser).callonInlineElementsWithoutSubtitution1,
				expr: &seqExpr{
					pos: position{line: 741, col: 37, offset: 25735},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 741, col: 37, offset: 25735},
							expr: &ruleRefExpr{
								pos:  position{line: 741, col: 38, offset: 25736},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 741, col: 48, offset: 25746},
							expr: &ruleRefExpr{
								pos:  position{line: 741, col: 49, offset: 25747},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 741, col: 64, offset: 25762},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 741, col: 73, offset: 25771},
								expr: &ruleRefExpr{
									pos:  position{line: 741, col: 74, offset: 25772},
									name: "InlineElementWithoutSubtitution",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 741, col: 108, offset: 25806},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 741, col: 118, offset: 25816},
								expr: &ruleRefExpr{
									pos:  position{line: 741, col: 119, offset: 25817},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 741, col: 131, offset: 25829},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineElementWithoutSubtitution",
			pos:  position{line: 745, col: 1, offset: 25920},
			expr: &actionExpr{
				pos: position{line: 745, col: 36, offset: 25955},
				run: (*parser).callonInlineElementWithoutSubtitution1,
				expr: &seqExpr{
					pos: position{line: 745, col: 36, offset: 25955},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 745, col: 36, offset: 25955},
							expr: &ruleRefExpr{
								pos:  position{line: 745, col: 37, offset: 25956},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 745, col: 41, offset: 25960},
							expr: &ruleRefExpr{
								pos:  position{line: 745, col: 42, offset: 25961},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 746, col: 5, offset: 25976},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 746, col: 14, offset: 25985},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 746, col: 14, offset: 25985},
										name: "SimpleWord",
									},
									&ruleRefExpr{
										pos:  position{line: 747, col: 11, offset: 26006},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 748, col: 11, offset: 26024},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 749, col: 11, offset: 26047},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 750, col: 11, offset: 26063},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 751, col: 11, offset: 26086},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 752, col: 11, offset: 26108},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 753, col: 11, offset: 26134},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 754, col: 11, offset: 26160},
										name: "OtherWord",
									},
									&ruleRefExpr{
										pos:  position{line: 755, col: 11, offset: 26180},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimBlock",
			pos:  position{line: 760, col: 1, offset: 26316},
			expr: &actionExpr{
				pos: position{line: 760, col: 18, offset: 26333},
				run: (*parser).callonVerbatimBlock1,
				expr: &seqExpr{
					pos: position{line: 760, col: 18, offset: 26333},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 760, col: 18, offset: 26333},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 760, col: 27, offset: 26342},
								expr: &choiceExpr{
									pos: position{line: 760, col: 28, offset: 26343},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 760, col: 28, offset: 26343},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 760, col: 40, offset: 26355},
											name: "FileInclusion",
										},
										&ruleRefExpr{
											pos:  position{line: 760, col: 56, offset: 26371},
											name: "VerbatimParagraph",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 760, col: 76, offset: 26391},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraph",
			pos:  position{line: 764, col: 1, offset: 26425},
			expr: &actionExpr{
				pos: position{line: 764, col: 22, offset: 26446},
				run: (*parser).callonVerbatimParagraph1,
				expr: &seqExpr{
					pos: position{line: 764, col: 22, offset: 26446},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 764, col: 22, offset: 26446},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 764, col: 33, offset: 26457},
								expr: &ruleRefExpr{
									pos:  position{line: 764, col: 34, offset: 26458},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 764, col: 54, offset: 26478},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 764, col: 60, offset: 26484},
								expr: &actionExpr{
									pos: position{line: 764, col: 61, offset: 26485},
									run: (*parser).callonVerbatimParagraph8,
									expr: &seqExpr{
										pos: position{line: 764, col: 61, offset: 26485},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 764, col: 61, offset: 26485},
												expr: &ruleRefExpr{
													pos:  position{line: 764, col: 62, offset: 26486},
													name: "EOF",
												},
											},
											&labeledExpr{
												pos:   position{line: 764, col: 66, offset: 26490},
												label: "line",
												expr: &ruleRefExpr{
													pos:  position{line: 764, col: 72, offset: 26496},
													name: "VerbatimParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraphLine",
			pos:  position{line: 770, col: 1, offset: 26616},
			expr: &actionExpr{
				pos: position{line: 770, col: 26, offset: 26641},
				run: (*parser).callonVerbatimParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 770, col: 26, offset: 26641},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 770, col: 26, offset: 26641},
							expr: &ruleRefExpr{
								pos:  position{line: 770, col: 27, offset: 26642},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 770, col: 42, offset: 26657},
							expr: &ruleRefExpr{
								pos:  position{line: 770, col: 43, offset: 26658},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 770, col: 53, offset: 26668},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 770, col: 62, offset: 26677},
								expr: &ruleRefExpr{
									pos:  position{line: 770, col: 63, offset: 26678},
									name: "VerbatimParagraphLineElement",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 770, col: 94, offset: 26709},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 770, col: 104, offset: 26719},
								expr: &ruleRefExpr{
									pos:  position{line: 770, col: 105, offset: 26720},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 770, col: 117, offset: 26732},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraphLineElement",
			pos:  position{line: 774, col: 1, offset: 26823},
			expr: &actionExpr{
				pos: position{line: 774, col: 33, offset: 26855},
				run: (*parser).callonVerbatimParagraphLineElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 774, col: 33, offset: 26855},
					expr: &seqExpr{
						pos: position{line: 774, col: 34, offset: 26856},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 774, col: 34, offset: 26856},
								expr: &ruleRefExpr{
									pos:  position{line: 774, col: 35, offset: 26857},
									name: "EOL",
								},
							},
							&notExpr{
								pos: position{line: 774, col: 39, offset: 26861},
								expr: &ruleRefExpr{
									pos:  position{line: 774, col: 40, offset: 26862},
									name: "LineBreak",
								},
							},
							&anyMatcher{
								line: 774, col: 50, offset: 26872,
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 781, col: 1, offset: 27096},
			expr: &actionExpr{
				pos: position{line: 781, col: 14, offset: 27109},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 781, col: 14, offset: 27109},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 781, col: 14, offset: 27109},
							name: "WS",
						},
						&litMatcher{
							pos:        position{line: 781, col: 17, offset: 27112},
							val:        "+",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 781, col: 21, offset: 27116},
							expr: &ruleRefExpr{
								pos:  position{line: 781, col: 21, offset: 27116},
								name: "WS",
							},
						},
						&andExpr{
							pos: position{line: 781, col: 25, offset: 27120},
							expr: &ruleRefExpr{
								pos:  position{line: 781, col: 26, offset: 27121},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 788, col: 1, offset: 27405},
			expr: &actionExpr{
				pos: position{line: 788, col: 15, offset: 27419},
				run: (*parser).callonQuotedText1,
				expr: &seqExpr{
					pos: position{line: 788, col: 15, offset: 27419},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 788, col: 15, offset: 27419},
							expr: &ruleRefExpr{
								pos:  position{line: 788, col: 16, offset: 27420},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 788, col: 19, offset: 27423},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 788, col: 25, offset: 27429},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 788, col: 25, offset: 27429},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 789, col: 15, offset: 27453},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 790, col: 15, offset: 27479},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 791, col: 15, offset: 27508},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 792, col: 15, offset: 27537},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 793, col: 15, offset: 27568},
										name: "EscapedBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 794, col: 15, offset: 27599},
										name: "EscapedItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 795, col: 15, offset: 27632},
										name: "EscapedMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 796, col: 15, offset: 27668},
										name: "EscapedSubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 797, col: 15, offset: 27704},
										name: "EscapedSuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 798, col: 15, offset: 27741},
										name: "SubscriptOrSuperscriptPrefix",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextPrefix",
			pos:  position{line: 802, col: 1, offset: 27895},
			expr: &choiceExpr{
				pos: position{line: 802, col: 21, offset: 27915},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 802, col: 21, offset: 27915},
						val:        "**",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 802, col: 28, offset: 27922},
						val:        "*",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 802, col: 34, offset: 27928},
						val:        "__",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 802, col: 41, offset: 27935},
						val:        "_",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 802, col: 47, offset: 27941},
						val:        "``",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 802, col: 54, offset: 27948},
						val:        "`",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 802, col: 60, offset: 27954},
						val:        "^",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 802, col: 66, offset: 27960},
						val:        "~",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 804, col: 1, offset: 27965},
			expr: &choiceExpr{
				pos: position{line: 804, col: 33, offset: 27997},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 804, col: 33, offset: 27997},
						val:        "^",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 804, col: 39, offset: 28003},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 804, col: 39, offset: 28003},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 808, col: 1, offset: 28136},
			expr: &actionExpr{
				pos: position{line: 808, col: 25, offset: 28160},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 808, col: 25, offset: 28160},
					expr: &litMatcher{
						pos:        position{line: 808, col: 25, offset: 28160},
						val:        "\\",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 812, col: 1, offset: 28201},
			expr: &actionExpr{
				pos: position{line: 812, col: 25, offset: 28225},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 812, col: 25, offset: 28225},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 812, col: 25, offset: 28225},
							val:        "\\\\",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 812, col: 30, offset: 28230},
							expr: &litMatcher{
								pos:        position{line: 812, col: 30, offset: 28230},
								val:        "\\",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 820, col: 1, offset: 28327},
			expr: &choiceExpr{
				pos: position{line: 820, col: 13, offset: 28339},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 820, col: 13, offset: 28339},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 820, col: 35, offset: 28361},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 822, col: 1, offset: 28382},
			expr: &actionExpr{
				pos: position{line: 822, col: 24, offset: 28405},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 822, col: 24, offset: 28405},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 822, col: 24, offset: 28405},
							expr: &litMatcher{
								pos:        position{line: 822, col: 25, offset: 28406},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 822, col: 30, offset: 28411},
							val:        "**",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 822, col: 35, offset: 28416},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 822, col: 44, offset: 28425},
								name: "DoubleQuoteBoldTextContent",
							},
						},
						&litMatcher{
							pos:        position{line: 822, col: 72, offset: 28453},
							val:        "**",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextContent",
			pos:  position{line: 826, col: 1, offset: 28578},
			expr: &seqExpr{
				pos: position{line: 826, col: 31, offset: 28608},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 826, col: 31, offset: 28608},
						name: "DoubleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 826, col: 58, offset: 28635},
						expr: &actionExpr{
							pos: position{line: 826, col: 59, offset: 28636},
							run: (*parser).callonDoubleQuoteBoldTextContent4,
							expr: &seqExpr{
								pos: position{line: 826, col: 59, offset: 28636},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 826, col: 59, offset: 28636},
										expr: &litMatcher{
											pos:        position{line: 826, col: 61, offset: 28638},
											val:        "**",
											ignoreCase: false,
										},
									},
									&labeledExpr{
										pos:   position{line: 826, col: 67, offset: 28644},
										label: "element",
										expr: &choiceExpr{
											pos: position{line: 826, col: 76, offset: 28653},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 826, col: 76, offset: 28653},
													name: "WS",
												},
												&ruleRefExpr{
													pos:  position{line: 826, col: 81, offset: 28658},
													name: "DoubleQuoteBoldTextElement",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 830, col: 1, offset: 28750},
			expr: &actionExpr{
				pos: position{line: 830, col: 31, offset: 28780},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 830, col: 31, offset: 28780},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 830, col: 31, offset: 28780},
							expr: &ruleRefExpr{
								pos:  position{line: 830, col: 32, offset: 28781},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 830, col: 40, offset: 28789},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 830, col: 49, offset: 28798},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 830, col: 49, offset: 28798},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 831, col: 11, offset: 28829},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 832, col: 11, offset: 28851},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 833, col: 11, offset: 28875},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 834, col: 11, offset: 28899},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 835, col: 11, offset: 28925},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 836, col: 11, offset: 28948},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 837, col: 11, offset: 28964},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 838, col: 11, offset: 28987},
										name: "NonDoubleQuoteBoldText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteBoldText",
			pos:  position{line: 842, col: 1, offset: 29143},
			expr: &actionExpr{
				pos: position{line: 842, col: 27, offset: 29169},
				run: (*parser).callonNonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 842, col: 27, offset: 29169},
					exprs: []interface{}{
						&anyMatcher{
							line: 842, col: 28, offset: 29170,
						},
						&zeroOrMoreExpr{
							pos: position{line: 842, col: 31, offset: 29173},
							expr: &seqExpr{
								pos: position{line: 842, col: 32, offset: 29174},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 842, col: 32, offset: 29174},
										expr: &litMatcher{
											pos:        position{line: 842, col: 33, offset: 29175},
											val:        "**",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 842, col: 38, offset: 29180},
										expr: &ruleRefExpr{
											pos:  position{line: 842, col: 39, offset: 29181},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 842, col: 42, offset: 29184},
										expr: &litMatcher{
											pos:        position{line: 842, col: 43, offset: 29185},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 842, col: 47, offset: 29189},
										expr: &litMatcher{
											pos:        position{line: 842, col: 48, offset: 29190},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 842, col: 52, offset: 29194},
										expr: &ruleRefExpr{
											pos:  position{line: 842, col: 53, offset: 29195},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 842, col: 61, offset: 29203,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 846, col: 1, offset: 29263},
			expr: &choiceExpr{
				pos: position{line: 846, col: 24, offset: 29286},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 846, col: 24, offset: 29286},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 846, col: 24, offset: 29286},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 846, col: 24, offset: 29286},
									expr: &litMatcher{
										pos:        position{line: 846, col: 25, offset: 29287},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 846, col: 29, offset: 29291},
									expr: &litMatcher{
										pos:        position{line: 846, col: 30, offset: 29292},
										val:        "**",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 846, col: 35, offset: 29297},
									val:        "*",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 846, col: 39, offset: 29301},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 846, col: 48, offset: 29310},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 846, col: 76, offset: 29338},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 848, col: 5, offset: 29518},
						run: (*parser).callonSingleQuoteBoldText12,
						expr: &seqExpr{
							pos: position{line: 848, col: 5, offset: 29518},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 848, col: 5, offset: 29518},
									expr: &litMatcher{
										pos:        position{line: 848, col: 6, offset: 29519},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 848, col: 11, offset: 29524},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 848, col: 16, offset: 29529},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 848, col: 25, offset: 29538},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 848, col: 53, offset: 29566},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextContent",
			pos:  position{line: 852, col: 1, offset: 29824},
			expr: &seqExpr{
				pos: position{line: 852, col: 31, offset: 29854},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 852, col: 31, offset: 29854},
						expr: &ruleRefExpr{
							pos:  position{line: 852, col: 32, offset: 29855},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 852, col: 35, offset: 29858},
						name: "SingleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 852, col: 62, offset: 29885},
						expr: &actionExpr{
							pos: position{line: 852, col: 63, offset: 29886},
							run: (*parser).callonSingleQuoteBoldTextContent6,
							expr: &seqExpr{
								pos: position{line: 852, col: 63, offset: 29886},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 852, col: 63, offset: 29886},
										expr: &seqExpr{
											pos: position{line: 852, col: 65, offset: 29888},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 852, col: 65, offset: 29888},
													val:        "*",
													ignoreCase: false,
												},
												&notExpr{
													pos: position{line: 852, col: 69, offset: 29892},
													expr: &ruleRefExpr{
														pos:  position{line: 852, col: 70, offset: 29893},
														name: "Alphanum",
													},
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 852, col: 80, offset: 29903},
										label: "spaces",
										expr: &zeroOrMoreExpr{
											pos: position{line: 852, col: 88, offset: 29911},
											expr: &ruleRefExpr{
												pos:  position{line: 852, col: 88, offset: 29911},
												name: "WS",
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 852, col: 93, offset: 29916},
										label: "element",
										expr: &ruleRefExpr{
											pos:  position{line: 852, col: 102, offset: 29925},
											name: "SingleQuoteBoldTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 856, col: 1, offset: 30016},
			expr: &actionExpr{
				pos: position{line: 856, col: 31, offset: 30046},
				run: (*parser).callonSingleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 856, col: 31, offset: 30046},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 856, col: 31, offset: 30046},
							expr: &ruleRefExpr{
								pos:  position{line: 856, col: 32, offset: 30047},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 856, col: 40, offset: 30055},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 856, col: 49, offset: 30064},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 856, col: 49, offset: 30064},
										name: "DoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 857, col: 11, offset: 30094},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 858, col: 11, offset: 30116},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 859, col: 11, offset: 30140},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 860, col: 11, offset: 30164},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 861, col: 11, offset: 30190},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 862, col: 11, offset: 30213},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 863, col: 11, offset: 30229},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 864, col: 11, offset: 30252},
										name: "NonSingleQuoteBoldText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteBoldText",
			pos:  position{line: 868, col: 1, offset: 30408},
			expr: &actionExpr{
				pos: position{line: 868, col: 27, offset: 30434},
				run: (*parser).callonNonSingleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 868, col: 27, offset: 30434},
					exprs: []interface{}{
						&anyMatcher{
							line: 868, col: 28, offset: 30435,
						},
						&zeroOrMoreExpr{
							pos: position{line: 868, col: 31, offset: 30438},
							expr: &seqExpr{
								pos: position{line: 868, col: 32, offset: 30439},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 868, col: 32, offset: 30439},
										expr: &litMatcher{
											pos:        position{line: 868, col: 33, offset: 30440},
											val:        "*",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 868, col: 37, offset: 30444},
										expr: &ruleRefExpr{
											pos:  position{line: 868, col: 38, offset: 30445},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 868, col: 41, offset: 30448},
										expr: &litMatcher{
											pos:        position{line: 868, col: 42, offset: 30449},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 868, col: 46, offset: 30453},
										expr: &litMatcher{
											pos:        position{line: 868, col: 47, offset: 30454},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 868, col: 51, offset: 30458},
										expr: &ruleRefExpr{
											pos:  position{line: 868, col: 52, offset: 30459},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 868, col: 60, offset: 30467,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 872, col: 1, offset: 30527},
			expr: &choiceExpr{
				pos: position{line: 873, col: 5, offset: 30551},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 873, col: 5, offset: 30551},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 873, col: 5, offset: 30551},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 873, col: 5, offset: 30551},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 873, col: 18, offset: 30564},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 873, col: 40, offset: 30586},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 873, col: 45, offset: 30591},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 873, col: 54, offset: 30600},
										name: "DoubleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 873, col: 82, offset: 30628},
									val:        "**",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 875, col: 9, offset: 30784},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 875, col: 9, offset: 30784},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 875, col: 9, offset: 30784},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 875, col: 22, offset: 30797},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 875, col: 44, offset: 30819},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 875, col: 49, offset: 30824},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 875, col: 58, offset: 30833},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 875, col: 86, offset: 30861},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 878, col: 9, offset: 31060},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 878, col: 9, offset: 31060},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 878, col: 9, offset: 31060},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 878, col: 22, offset: 31073},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 878, col: 44, offset: 31095},
									val:        "*",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 878, col: 48, offset: 31099},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 878, col: 57, offset: 31108},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 878, col: 85, offset: 31136},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 886, col: 1, offset: 31343},
			expr: &choiceExpr{
				pos: position{line: 886, col: 15, offset: 31357},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 886, col: 15, offset: 31357},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 886, col: 39, offset: 31381},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 888, col: 1, offset: 31404},
			expr: &actionExpr{
				pos: position{line: 888, col: 26, offset: 31429},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 888, col: 26, offset: 31429},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 888, col: 26, offset: 31429},
							expr: &litMatcher{
								pos:        position{line: 888, col: 27, offset: 31430},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 888, col: 32, offset: 31435},
							val:        "__",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 888, col: 37, offset: 31440},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 888, col: 46, offset: 31449},
								name: "DoubleQuoteItalicTextContent",
							},
						},
						&litMatcher{
							pos:        position{line: 888, col: 76, offset: 31479},
							val:        "__",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextContent",
			pos:  position{line: 892, col: 1, offset: 31605},
			expr: &seqExpr{
				pos: position{line: 892, col: 33, offset: 31637},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 892, col: 33, offset: 31637},
						name: "DoubleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 892, col: 62, offset: 31666},
						expr: &actionExpr{
							pos: position{line: 892, col: 63, offset: 31667},
							run: (*parser).callonDoubleQuoteItalicTextContent4,
							expr: &seqExpr{
								pos: position{line: 892, col: 63, offset: 31667},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 892, col: 63, offset: 31667},
										expr: &litMatcher{
											pos:        position{line: 892, col: 65, offset: 31669},
											val:        "__",
											ignoreCase: false,
										},
									},
									&labeledExpr{
										pos:   position{line: 892, col: 71, offset: 31675},
										label: "element",
										expr: &choiceExpr{
											pos: position{line: 892, col: 80, offset: 31684},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 892, col: 80, offset: 31684},
													name: "WS",
												},
												&ruleRefExpr{
													pos:  position{line: 892, col: 85, offset: 31689},
													name: "DoubleQuoteItalicTextElement",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 896, col: 1, offset: 31783},
			expr: &actionExpr{
				pos: position{line: 896, col: 33, offset: 31815},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 896, col: 33, offset: 31815},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 896, col: 33, offset: 31815},
							expr: &ruleRefExpr{
								pos:  position{line: 896, col: 34, offset: 31816},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 896, col: 42, offset: 31824},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 896, col: 51, offset: 31833},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 896, col: 51, offset: 31833},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 897, col: 11, offset: 31866},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 898, col: 11, offset: 31886},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 899, col: 11, offset: 31910},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 900, col: 11, offset: 31934},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 901, col: 11, offset: 31960},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 902, col: 11, offset: 31983},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 903, col: 11, offset: 31999},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 904, col: 11, offset: 32022},
										name: "NonDoubleQuoteItalicText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteItalicText",
			pos:  position{line: 908, col: 1, offset: 32180},
			expr: &actionExpr{
				pos: position{line: 908, col: 29, offset: 32208},
				run: (*parser).callonNonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 908, col: 29, offset: 32208},
					exprs: []interface{}{
						&anyMatcher{
							line: 908, col: 30, offset: 32209,
						},
						&zeroOrMoreExpr{
							pos: position{line: 908, col: 33, offset: 32212},
							expr: &seqExpr{
								pos: position{line: 908, col: 34, offset: 32213},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 908, col: 34, offset: 32213},
										expr: &litMatcher{
											pos:        position{line: 908, col: 35, offset: 32214},
											val:        "__",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 908, col: 40, offset: 32219},
										expr: &litMatcher{
											pos:        position{line: 908, col: 41, offset: 32220},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 908, col: 45, offset: 32224},
										expr: &litMatcher{
											pos:        position{line: 908, col: 46, offset: 32225},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 908, col: 50, offset: 32229},
										expr: &ruleRefExpr{
											pos:  position{line: 908, col: 51, offset: 32230},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 908, col: 59, offset: 32238,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 912, col: 1, offset: 32298},
			expr: &choiceExpr{
				pos: position{line: 912, col: 26, offset: 32323},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 912, col: 26, offset: 32323},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 912, col: 26, offset: 32323},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 912, col: 26, offset: 32323},
									expr: &litMatcher{
										pos:        position{line: 912, col: 27, offset: 32324},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 912, col: 31, offset: 32328},
									expr: &litMatcher{
										pos:        position{line: 912, col: 32, offset: 32329},
										val:        "__",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 912, col: 37, offset: 32334},
									val:        "_",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 912, col: 41, offset: 32338},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 912, col: 50, offset: 32347},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 912, col: 80, offset: 32377},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 914, col: 5, offset: 32559},
						run: (*parser).callonSingleQuoteItalicText12,
						expr: &seqExpr{
							pos: position{line: 914, col: 5, offset: 32559},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 914, col: 5, offset: 32559},
									expr: &litMatcher{
										pos:        position{line: 914, col: 6, offset: 32560},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 914, col: 11, offset: 32565},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 914, col: 16, offset: 32570},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 914, col: 25, offset: 32579},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 914, col: 55, offset: 32609},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextContent",
			pos:  position{line: 918, col: 1, offset: 32871},
			expr: &seqExpr{
				pos: position{line: 918, col: 33, offset: 32903},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 918, col: 33, offset: 32903},
						expr: &ruleRefExpr{
							pos:  position{line: 918, col: 34, offset: 32904},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 918, col: 37, offset: 32907},
						name: "SingleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 918, col: 66, offset: 32936},
						expr: &actionExpr{
							pos: position{line: 918, col: 67, offset: 32937},
							run: (*parser).callonSingleQuoteItalicTextContent6,
							expr: &seqExpr{
								pos: position{line: 918, col: 67, offset: 32937},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 918, col: 67, offset: 32937},
										expr: &seqExpr{
											pos: position{line: 918, col: 69, offset: 32939},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 918, col: 69, offset: 32939},
													val:        "_",
													ignoreCase: false,
												},
												&notExpr{
													pos: position{line: 918, col: 73, offset: 32943},
													expr: &ruleRefExpr{
														pos:  position{line: 918, col: 74, offset: 32944},
														name: "Alphanum",
													},
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 918, col: 84, offset: 32954},
										label: "spaces",
										expr: &zeroOrMoreExpr{
											pos: position{line: 918, col: 92, offset: 32962},
											expr: &ruleRefExpr{
												pos:  position{line: 918, col: 92, offset: 32962},
												name: "WS",
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 918, col: 97, offset: 32967},
										label: "element",
										expr: &ruleRefExpr{
											pos:  position{line: 918, col: 106, offset: 32976},
											name: "SingleQuoteItalicTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 922, col: 1, offset: 33069},
			expr: &actionExpr{
				pos: position{line: 922, col: 33, offset: 33101},
				run: (*parser).callonSingleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 922, col: 33, offset: 33101},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 922, col: 33, offset: 33101},
							expr: &ruleRefExpr{
								pos:  position{line: 922, col: 34, offset: 33102},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 922, col: 42, offset: 33110},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 922, col: 51, offset: 33119},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 922, col: 51, offset: 33119},
										name: "DoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 923, col: 11, offset: 33151},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 924, col: 11, offset: 33171},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 925, col: 11, offset: 33195},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 926, col: 11, offset: 33219},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 927, col: 11, offset: 33245},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 928, col: 11, offset: 33268},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 929, col: 11, offset: 33284},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 930, col: 11, offset: 33307},
										name: "NonSingleQuoteItalicText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteItalicText",
			pos:  position{line: 934, col: 1, offset: 33465},
			expr: &actionExpr{
				pos: position{line: 934, col: 29, offset: 33493},
				run: (*parser).callonNonSingleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 934, col: 29, offset: 33493},
					exprs: []interface{}{
						&anyMatcher{
							line: 934, col: 30, offset: 33494,
						},
						&zeroOrMoreExpr{
							pos: position{line: 934, col: 33, offset: 33497},
							expr: &seqExpr{
								pos: position{line: 934, col: 34, offset: 33498},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 934, col: 34, offset: 33498},
										expr: &litMatcher{
											pos:        position{line: 934, col: 35, offset: 33499},
											val:        "_",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 934, col: 39, offset: 33503},
										expr: &ruleRefExpr{
											pos:  position{line: 934, col: 40, offset: 33504},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 934, col: 43, offset: 33507},
										expr: &litMatcher{
											pos:        position{line: 934, col: 44, offset: 33508},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 934, col: 48, offset: 33512},
										expr: &litMatcher{
											pos:        position{line: 934, col: 49, offset: 33513},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 934, col: 53, offset: 33517},
										expr: &ruleRefExpr{
											pos:  position{line: 934, col: 54, offset: 33518},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 934, col: 62, offset: 33526,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 938, col: 1, offset: 33586},
			expr: &choiceExpr{
				pos: position{line: 939, col: 5, offset: 33612},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 939, col: 5, offset: 33612},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 939, col: 5, offset: 33612},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 939, col: 5, offset: 33612},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 939, col: 18, offset: 33625},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 939, col: 40, offset: 33647},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 939, col: 45, offset: 33652},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 939, col: 54, offset: 33661},
										name: "DoubleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 939, col: 84, offset: 33691},
									val:        "__",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 941, col: 9, offset: 33847},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 941, col: 9, offset: 33847},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 941, col: 9, offset: 33847},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 941, col: 22, offset: 33860},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 941, col: 44, offset: 33882},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 941, col: 49, offset: 33887},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 941, col: 58, offset: 33896},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 941, col: 88, offset: 33926},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 944, col: 9, offset: 34125},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 944, col: 9, offset: 34125},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 944, col: 9, offset: 34125},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 944, col: 22, offset: 34138},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 944, col: 44, offset: 34160},
									val:        "_",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 944, col: 48, offset: 34164},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 944, col: 57, offset: 34173},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 944, col: 87, offset: 34203},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 951, col: 1, offset: 34412},
			expr: &choiceExpr{
				pos: position{line: 951, col: 18, offset: 34429},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 951, col: 18, offset: 34429},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 951, col: 45, offset: 34456},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 953, col: 1, offset: 34482},
			expr: &actionExpr{
				pos: position{line: 953, col: 29, offset: 34510},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 953, col: 29, offset: 34510},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 953, col: 29, offset: 34510},
							expr: &litMatcher{
								pos:        position{line: 953, col: 30, offset: 34511},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 953, col: 35, offset: 34516},
							val:        "``",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 953, col: 40, offset: 34521},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 953, col: 49, offset: 34530},
								name: "DoubleQuoteMonospaceTextContent",
							},
						},
						&litMatcher{
							pos:        position{line: 953, col: 82, offset: 34563},
							val:        "``",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextContent",
			pos:  position{line: 957, col: 1, offset: 34692},
			expr: &seqExpr{
				pos: position{line: 957, col: 36, offset: 34727},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 957, col: 36, offset: 34727},
						name: "DoubleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 957, col: 68, offset: 34759},
						expr: &actionExpr{
							pos: position{line: 957, col: 69, offset: 34760},
							run: (*parser).callonDoubleQuoteMonospaceTextContent4,
							expr: &seqExpr{
								pos: position{line: 957, col: 69, offset: 34760},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 957, col: 69, offset: 34760},
										expr: &litMatcher{
											pos:        position{line: 957, col: 71, offset: 34762},
											val:        "``",
											ignoreCase: false,
										},
									},
									&labeledExpr{
										pos:   position{line: 957, col: 77, offset: 34768},
										label: "element",
										expr: &choiceExpr{
											pos: position{line: 957, col: 86, offset: 34777},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 957, col: 86, offset: 34777},
													name: "WS",
												},
												&ruleRefExpr{
													pos:  position{line: 957, col: 91, offset: 34782},
													name: "DoubleQuoteMonospaceTextElement",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 961, col: 1, offset: 34879},
			expr: &actionExpr{
				pos: position{line: 961, col: 36, offset: 34914},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 961, col: 36, offset: 34914},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 961, col: 36, offset: 34914},
							expr: &ruleRefExpr{
								pos:  position{line: 961, col: 37, offset: 34915},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 961, col: 45, offset: 34923},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 961, col: 54, offset: 34932},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 961, col: 54, offset: 34932},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 962, col: 11, offset: 34968},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 963, col: 11, offset: 34987},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 964, col: 11, offset: 35009},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 965, col: 11, offset: 35033},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 966, col: 11, offset: 35059},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 967, col: 11, offset: 35082},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 968, col: 11, offset: 35098},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 969, col: 11, offset: 35121},
										name: "NonDoubleQuoteMonospaceText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteMonospaceText",
			pos:  position{line: 973, col: 1, offset: 35282},
			expr: &actionExpr{
				pos: position{line: 973, col: 32, offset: 35313},
				run: (*parser).callonNonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 973, col: 32, offset: 35313},
					exprs: []interface{}{
						&anyMatcher{
							line: 973, col: 33, offset: 35314,
						},
						&zeroOrMoreExpr{
							pos: position{line: 973, col: 36, offset: 35317},
							expr: &seqExpr{
								pos: position{line: 973, col: 37, offset: 35318},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 973, col: 37, offset: 35318},
										expr: &litMatcher{
											pos:        position{line: 973, col: 38, offset: 35319},
											val:        "``",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 973, col: 43, offset: 35324},
										expr: &ruleRefExpr{
											pos:  position{line: 973, col: 44, offset: 35325},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 973, col: 47, offset: 35328},
										expr: &litMatcher{
											pos:        position{line: 973, col: 48, offset: 35329},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 973, col: 52, offset: 35333},
										expr: &litMatcher{
											pos:        position{line: 973, col: 53, offset: 35334},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 973, col: 57, offset: 35338},
										expr: &ruleRefExpr{
											pos:  position{line: 973, col: 58, offset: 35339},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 973, col: 66, offset: 35347,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 977, col: 1, offset: 35407},
			expr: &choiceExpr{
				pos: position{line: 977, col: 29, offset: 35435},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 977, col: 29, offset: 35435},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 977, col: 29, offset: 35435},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 977, col: 29, offset: 35435},
									expr: &litMatcher{
										pos:        position{line: 977, col: 30, offset: 35436},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 977, col: 34, offset: 35440},
									expr: &litMatcher{
										pos:        position{line: 977, col: 35, offset: 35441},
										val:        "``",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 977, col: 40, offset: 35446},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 977, col: 44, offset: 35450},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 977, col: 53, offset: 35459},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 977, col: 86, offset: 35492},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 979, col: 5, offset: 35677},
						run: (*parser).callonSingleQuoteMonospaceText12,
						expr: &seqExpr{
							pos: position{line: 979, col: 5, offset: 35677},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 979, col: 5, offset: 35677},
									expr: &litMatcher{
										pos:        position{line: 979, col: 6, offset: 35678},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 979, col: 11, offset: 35683},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 979, col: 16, offset: 35688},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 979, col: 25, offset: 35697},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 979, col: 58, offset: 35730},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextContent",
			pos:  position{line: 983, col: 1, offset: 35998},
			expr: &seqExpr{
				pos: position{line: 983, col: 36, offset: 36033},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 983, col: 36, offset: 36033},
						expr: &ruleRefExpr{
							pos:  position{line: 983, col: 37, offset: 36034},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 983, col: 40, offset: 36037},
						name: "SingleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 983, col: 72, offset: 36069},
						expr: &actionExpr{
							pos: position{line: 983, col: 73, offset: 36070},
							run: (*parser).callonSingleQuoteMonospaceTextContent6,
							expr: &seqExpr{
								pos: position{line: 983, col: 73, offset: 36070},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 983, col: 73, offset: 36070},
										expr: &seqExpr{
											pos: position{line: 983, col: 75, offset: 36072},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 983, col: 75, offset: 36072},
													val:        "`",
													ignoreCase: false,
												},
												&notExpr{
													pos: position{line: 983, col: 79, offset: 36076},
													expr: &ruleRefExpr{
														pos:  position{line: 983, col: 80, offset: 36077},
														name: "Alphanum",
													},
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 983, col: 90, offset: 36087},
										label: "spaces",
										expr: &zeroOrMoreExpr{
											pos: position{line: 983, col: 98, offset: 36095},
											expr: &ruleRefExpr{
												pos:  position{line: 983, col: 98, offset: 36095},
												name: "WS",
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 983, col: 103, offset: 36100},
										label: "element",
										expr: &ruleRefExpr{
											pos:  position{line: 983, col: 112, offset: 36109},
											name: "SingleQuoteMonospaceTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 987, col: 1, offset: 36205},
			expr: &actionExpr{
				pos: position{line: 987, col: 37, offset: 36241},
				run: (*parser).callonSingleQuoteMonospaceTextElement1,
				expr: &labeledExpr{
					pos:   position{line: 987, col: 37, offset: 36241},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 987, col: 46, offset: 36250},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 987, col: 46, offset: 36250},
								name: "NEWLINE",
							},
							&ruleRefExpr{
								pos:  position{line: 988, col: 11, offset: 36288},
								name: "DoubleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 989, col: 11, offset: 36324},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 990, col: 11, offset: 36344},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 991, col: 11, offset: 36365},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 992, col: 11, offset: 36389},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 993, col: 11, offset: 36415},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 994, col: 11, offset: 36438},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 995, col: 11, offset: 36454},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 996, col: 11, offset: 36477},
								name: "NonSingleQuoteMonospaceText",
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteMonospaceText",
			pos:  position{line: 1000, col: 1, offset: 36638},
			expr: &actionExpr{
				pos: position{line: 1000, col: 32, offset: 36669},
				run: (*parser).callonNonSingleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1000, col: 32, offset: 36669},
					exprs: []interface{}{
						&anyMatcher{
							line: 1000, col: 33, offset: 36670,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1000, col: 36, offset: 36673},
							expr: &seqExpr{
								pos: position{line: 1000, col: 37, offset: 36674},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1000, col: 37, offset: 36674},
										expr: &ruleRefExpr{
											pos:  position{line: 1000, col: 38, offset: 36675},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1000, col: 41, offset: 36678},
										expr: &litMatcher{
											pos:        position{line: 1000, col: 42, offset: 36679},
											val:        "`",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1000, col: 46, offset: 36683},
										expr: &litMatcher{
											pos:        position{line: 1000, col: 47, offset: 36684},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1000, col: 51, offset: 36688},
										expr: &litMatcher{
											pos:        position{line: 1000, col: 52, offset: 36689},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1000, col: 56, offset: 36693},
										expr: &ruleRefExpr{
											pos:  position{line: 1000, col: 57, offset: 36694},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 1000, col: 65, offset: 36702,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1004, col: 1, offset: 36783},
			expr: &choiceExpr{
				pos: position{line: 1005, col: 5, offset: 36812},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1005, col: 5, offset: 36812},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1005, col: 5, offset: 36812},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1005, col: 5, offset: 36812},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1005, col: 18, offset: 36825},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1005, col: 40, offset: 36847},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1005, col: 45, offset: 36852},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1005, col: 54, offset: 36861},
										name: "DoubleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1005, col: 87, offset: 36894},
									val:        "``",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1007, col: 9, offset: 37050},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1007, col: 9, offset: 37050},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1007, col: 9, offset: 37050},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1007, col: 22, offset: 37063},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1007, col: 44, offset: 37085},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1007, col: 49, offset: 37090},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1007, col: 58, offset: 37099},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1007, col: 91, offset: 37132},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1010, col: 9, offset: 37331},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1010, col: 9, offset: 37331},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1010, col: 9, offset: 37331},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1010, col: 22, offset: 37344},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1010, col: 44, offset: 37366},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1010, col: 48, offset: 37370},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1010, col: 57, offset: 37379},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1010, col: 90, offset: 37412},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1014, col: 1, offset: 37561},
			expr: &actionExpr{
				pos: position{line: 1014, col: 18, offset: 37578},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1014, col: 18, offset: 37578},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1014, col: 18, offset: 37578},
							expr: &litMatcher{
								pos:        position{line: 1014, col: 19, offset: 37579},
								val:        "\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 1014, col: 23, offset: 37583},
							val:        "~",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1014, col: 27, offset: 37587},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1014, col: 36, offset: 37596},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1014, col: 58, offset: 37618},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1018, col: 1, offset: 37707},
			expr: &choiceExpr{
				pos: position{line: 1018, col: 25, offset: 37731},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1018, col: 25, offset: 37731},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1018, col: 38, offset: 37744},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1020, col: 1, offset: 37763},
			expr: &actionExpr{
				pos: position{line: 1020, col: 21, offset: 37783},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1020, col: 21, offset: 37783},
					expr: &seqExpr{
						pos: position{line: 1020, col: 22, offset: 37784},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1020, col: 22, offset: 37784},
								expr: &ruleRefExpr{
									pos:  position{line: 1020, col: 23, offset: 37785},
									name: "NEWLINE",
								},
							},
							&notExpr{
								pos: position{line: 1020, col: 31, offset: 37793},
								expr: &ruleRefExpr{
									pos:  position{line: 1020, col: 32, offset: 37794},
									name: "WS",
								},
							},
							&notExpr{
								pos: position{line: 1020, col: 35, offset: 37797},
								expr: &litMatcher{
									pos:        position{line: 1020, col: 36, offset: 37798},
									val:        "~",
									ignoreCase: false,
								},
							},
							&anyMatcher{
								line: 1020, col: 40, offset: 37802,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1024, col: 1, offset: 37835},
			expr: &actionExpr{
				pos: position{line: 1024, col: 25, offset: 37859},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1024, col: 25, offset: 37859},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1024, col: 25, offset: 37859},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1024, col: 38, offset: 37872},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1024, col: 60, offset: 37894},
							val:        "~",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1024, col: 64, offset: 37898},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1024, col: 73, offset: 37907},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1024, col: 95, offset: 37929},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1028, col: 1, offset: 38058},
			expr: &actionExpr{
				pos: position{line: 1028, col: 20, offset: 38077},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1028, col: 20, offset: 38077},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1028, col: 20, offset: 38077},
							expr: &litMatcher{
								pos:        position{line: 1028, col: 21, offset: 38078},
								val:        "\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 1028, col: 25, offset: 38082},
							val:        "^",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1028, col: 29, offset: 38086},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1028, col: 38, offset: 38095},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1028, col: 62, offset: 38119},
							val:        "^",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1032, col: 1, offset: 38210},
			expr: &choiceExpr{
				pos: position{line: 1032, col: 27, offset: 38236},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1032, col: 27, offset: 38236},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1032, col: 40, offset: 38249},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1034, col: 1, offset: 38270},
			expr: &actionExpr{
				pos: position{line: 1034, col: 23, offset: 38292},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1034, col: 23, offset: 38292},
					expr: &seqExpr{
						pos: position{line: 1034, col: 24, offset: 38293},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1034, col: 24, offset: 38293},
								expr: &ruleRefExpr{
									pos:  position{line: 1034, col: 25, offset: 38294},
									name: "NEWLINE",
								},
							},
							&notExpr{
								pos: position{line: 1034, col: 33, offset: 38302},
								expr: &ruleRefExpr{
									pos:  position{line: 1034, col: 34, offset: 38303},
									name: "WS",
								},
							},
							&notExpr{
								pos: position{line: 1034, col: 37, offset: 38306},
								expr: &litMatcher{
									pos:        position{line: 1034, col: 38, offset: 38307},
									val:        "^",
									ignoreCase: false,
								},
							},
							&anyMatcher{
								line: 1034, col: 42, offset: 38311,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1038, col: 1, offset: 38344},
			expr: &actionExpr{
				pos: position{line: 1038, col: 27, offset: 38370},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1038, col: 27, offset: 38370},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1038, col: 27, offset: 38370},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1038, col: 40, offset: 38383},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1038, col: 62, offset: 38405},
							val:        "^",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1038, col: 66, offset: 38409},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1038, col: 75, offset: 38418},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1038, col: 99, offset: 38442},
							val:        "^",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Passthrough",
			pos:  position{line: 1045, col: 1, offset: 38678},
			expr: &choiceExpr{
				pos: position{line: 1045, col: 16, offset: 38693},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1045, col: 16, offset: 38693},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1045, col: 40, offset: 38717},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1045, col: 64, offset: 38741},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1047, col: 1, offset: 38759},
			expr: &litMatcher{
				pos:        position{line: 1047, col: 32, offset: 38790},
				val:        "+",
				ignoreCase: false,
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1049, col: 1, offset: 38795},
			expr: &actionExpr{
				pos: position{line: 1049, col: 26, offset: 38820},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1049, col: 26, offset: 38820},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1049, col: 26, offset: 38820},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1049, col: 54, offset: 38848},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1049, col: 63, offset: 38857},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1049, col: 93, offset: 38887},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1049, col: 121, offset: 38915},
							expr: &ruleRefExpr{
								pos:  position{line: 1049, col: 122, offset: 38916},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1053, col: 1, offset: 39015},
			expr: &choiceExpr{
				pos: position{line: 1053, col: 33, offset: 39047},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1053, col: 34, offset: 39048},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1053, col: 34, offset: 39048},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1053, col: 35, offset: 39049},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1053, col: 35, offset: 39049},
											expr: &ruleRefExpr{
												pos:  position{line: 1053, col: 36, offset: 39050},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1053, col: 64, offset: 39078},
											expr: &ruleRefExpr{
												pos:  position{line: 1053, col: 65, offset: 39079},
												name: "WS",
											},
										},
										&notExpr{
											pos: position{line: 1053, col: 68, offset: 39082},
											expr: &ruleRefExpr{
												pos:  position{line: 1053, col: 69, offset: 39083},
												name: "NEWLINE",
											},
										},
										&anyMatcher{
											line: 1053, col: 77, offset: 39091,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1053, col: 80, offset: 39094},
									expr: &seqExpr{
										pos: position{line: 1053, col: 81, offset: 39095},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1053, col: 81, offset: 39095},
												expr: &seqExpr{
													pos: position{line: 1053, col: 83, offset: 39097},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1053, col: 83, offset: 39097},
															expr: &ruleRefExpr{
																pos:  position{line: 1053, col: 83, offset: 39097},
																name: "WS",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1053, col: 87, offset: 39101},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1053, col: 116, offset: 39130},
												expr: &ruleRefExpr{
													pos:  position{line: 1053, col: 117, offset: 39131},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1053, col: 145, offset: 39159},
												expr: &ruleRefExpr{
													pos:  position{line: 1053, col: 146, offset: 39160},
													name: "NEWLINE",
												},
											},
											&anyMatcher{
												line: 1053, col: 154, offset: 39168,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1055, col: 7, offset: 39310},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1055, col: 8, offset: 39311},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1055, col: 8, offset: 39311},
									expr: &ruleRefExpr{
										pos:  position{line: 1055, col: 9, offset: 39312},
										name: "WS",
									},
								},
								&notExpr{
									pos: position{line: 1055, col: 12, offset: 39315},
									expr: &ruleRefExpr{
										pos:  position{line: 1055, col: 13, offset: 39316},
										name: "NEWLINE",
									},
								},
								&notExpr{
									pos: position{line: 1055, col: 21, offset: 39324},
									expr: &ruleRefExpr{
										pos:  position{line: 1055, col: 22, offset: 39325},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1055, col: 50, offset: 39353,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1059, col: 1, offset: 39435},
			expr: &litMatcher{
				pos:        position{line: 1059, col: 32, offset: 39466},
				val:        "+++",
				ignoreCase: false,
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1061, col: 1, offset: 39473},
			expr: &actionExpr{
				pos: position{line: 1061, col: 26, offset: 39498},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1061, col: 26, offset: 39498},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1061, col: 26, offset: 39498},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1061, col: 54, offset: 39526},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1061, col: 63, offset: 39535},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1061, col: 93, offset: 39565},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1061, col: 121, offset: 39593},
							expr: &ruleRefExpr{
								pos:  position{line: 1061, col: 122, offset: 39594},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1065, col: 1, offset: 39693},
			expr: &choiceExpr{
				pos: position{line: 1065, col: 33, offset: 39725},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1065, col: 34, offset: 39726},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1065, col: 34, offset: 39726},
							expr: &seqExpr{
								pos: position{line: 1065, col: 35, offset: 39727},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1065, col: 35, offset: 39727},
										expr: &ruleRefExpr{
											pos:  position{line: 1065, col: 36, offset: 39728},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1065, col: 64, offset: 39756,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1067, col: 7, offset: 39921},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1067, col: 7, offset: 39921},
							expr: &seqExpr{
								pos: position{line: 1067, col: 8, offset: 39922},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1067, col: 8, offset: 39922},
										expr: &ruleRefExpr{
											pos:  position{line: 1067, col: 9, offset: 39923},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1067, col: 12, offset: 39926},
										expr: &ruleRefExpr{
											pos:  position{line: 1067, col: 13, offset: 39927},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 1067, col: 21, offset: 39935},
										expr: &ruleRefExpr{
											pos:  position{line: 1067, col: 22, offset: 39936},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1067, col: 50, offset: 39964,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1071, col: 1, offset: 40047},
			expr: &choiceExpr{
				pos: position{line: 1071, col: 21, offset: 40067},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1071, col: 21, offset: 40067},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1071, col: 21, offset: 40067},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1071, col: 21, offset: 40067},
									val:        "pass:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1071, col: 30, offset: 40076},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1071, col: 38, offset: 40084},
										expr: &ruleRefExpr{
											pos:  position{line: 1071, col: 39, offset: 40085},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1071, col: 67, offset: 40113},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1073, col: 5, offset: 40203},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1073, col: 5, offset: 40203},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1073, col: 5, offset: 40203},
									val:        "pass:q[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1073, col: 15, offset: 40213},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1073, col: 23, offset: 40221},
										expr: &choiceExpr{
											pos: position{line: 1073, col: 24, offset: 40222},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1073, col: 24, offset: 40222},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1073, col: 37, offset: 40235},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1073, col: 65, offset: 40263},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1077, col: 1, offset: 40353},
			expr: &choiceExpr{
				pos: position{line: 1077, col: 31, offset: 40383},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1077, col: 31, offset: 40383},
						name: "Alphanums",
					},
					&ruleRefExpr{
						pos:  position{line: 1077, col: 43, offset: 40395},
						name: "Spaces",
					},
					&actionExpr{
						pos: position{line: 1077, col: 52, offset: 40404},
						run: (*parser).callonPassthroughMacroCharacter4,
						expr: &seqExpr{
							pos: position{line: 1077, col: 53, offset: 40405},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1077, col: 53, offset: 40405},
									expr: &litMatcher{
										pos:        position{line: 1077, col: 54, offset: 40406},
										val:        "]",
										ignoreCase: false,
									},
								},
								&anyMatcher{
									line: 1077, col: 58, offset: 40410,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1084, col: 1, offset: 40580},
			expr: &choiceExpr{
				pos: position{line: 1084, col: 19, offset: 40598},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1084, col: 19, offset: 40598},
						run: (*parser).callonCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1084, col: 19, offset: 40598},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1084, col: 19, offset: 40598},
									val:        "<<",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1084, col: 24, offset: 40603},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1084, col: 28, offset: 40607},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1084, col: 32, offset: 40611},
									expr: &ruleRefExpr{
										pos:  position{line: 1084, col: 32, offset: 40611},
										name: "WS",
									},
								},
								&litMatcher{
									pos:        position{line: 1084, col: 36, offset: 40615},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1084, col: 40, offset: 40619},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1084, col: 47, offset: 40626},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1084, col: 68, offset: 40647},
									val:        ">>",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1086, col: 5, offset: 40722},
						run: (*parser).callonCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1086, col: 5, offset: 40722},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1086, col: 5, offset: 40722},
									val:        "<<",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1086, col: 10, offset: 40727},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1086, col: 14, offset: 40731},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1086, col: 18, offset: 40735},
									val:        ">>",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1090, col: 1, offset: 40798},
			expr: &actionExpr{
				pos: position{line: 1090, col: 24, offset: 40821},
				run: (*parser).callonCrossReferenceLabel1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1090, col: 24, offset: 40821},
					expr: &choiceExpr{
						pos: position{line: 1090, col: 25, offset: 40822},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1090, col: 25, offset: 40822},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1090, col: 37, offset: 40834},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1090, col: 47, offset: 40844},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1090, col: 47, offset: 40844},
										expr: &litMatcher{
											pos:        position{line: 1090, col: 48, offset: 40845},
											val:        ">>",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1090, col: 54, offset: 40851,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 1097, col: 1, offset: 40993},
			expr: &actionExpr{
				pos: position{line: 1097, col: 9, offset: 41001},
				run: (*parser).callonLink1,
				expr: &labeledExpr{
					pos:   position{line: 1097, col: 9, offset: 41001},
					label: "link",
					expr: &choiceExpr{
						pos: position{line: 1097, col: 15, offset: 41007},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1097, col: 15, offset: 41007},
								name: "RelativeLink",
							},
							&ruleRefExpr{
								pos:  position{line: 1097, col: 30, offset: 41022},
								name: "ExternalLink",
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1102, col: 1, offset: 41129},
			expr: &actionExpr{
				pos: position{line: 1102, col: 17, offset: 41145},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1102, col: 17, offset: 41145},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1102, col: 17, offset: 41145},
							val:        "link:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1102, col: 25, offset: 41153},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1102, col: 30, offset: 41158},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1102, col: 30, offset: 41158},
										name: "Location",
									},
									&ruleRefExpr{
										pos:  position{line: 1102, col: 41, offset: 41169},
										name: "FileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1102, col: 55, offset: 41183},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1102, col: 73, offset: 41201},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1106, col: 1, offset: 41319},
			expr: &actionExpr{
				pos: position{line: 1106, col: 17, offset: 41335},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1106, col: 17, offset: 41335},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1106, col: 17, offset: 41335},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1106, col: 22, offset: 41340},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1106, col: 32, offset: 41350},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1106, col: 49, offset: 41367},
								expr: &ruleRefExpr{
									pos:  position{line: 1106, col: 50, offset: 41368},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1110, col: 1, offset: 41461},
			expr: &choiceExpr{
				pos: position{line: 1110, col: 19, offset: 41479},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1110, col: 19, offset: 41479},
						name: "TextOnlyLinkAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 1110, col: 44, offset: 41504},
						name: "TextAndMoreLinkAttributes",
					},
				},
			},
		},
		{
			name: "TextOnlyLinkAttributes",
			pos:  position{line: 1112, col: 1, offset: 41531},
			expr: &actionExpr{
				pos: position{line: 1112, col: 27, offset: 41557},
				run: (*parser).callonTextOnlyLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1112, col: 27, offset: 41557},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1112, col: 27, offset: 41557},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1112, col: 31, offset: 41561},
							label: "text",
							expr: &zeroOrOneExpr{
								pos: position{line: 1112, col: 36, offset: 41566},
								expr: &ruleRefExpr{
									pos:  position{line: 1112, col: 37, offset: 41567},
									name: "LinkTextWithCommaAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1112, col: 66, offset: 41596},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LinkTextWithCommaAttribute",
			pos:  position{line: 1116, col: 1, offset: 41658},
			expr: &choiceExpr{
				pos: position{line: 1118, col: 5, offset: 41730},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1118, col: 5, offset: 41730},
						run: (*parser).callonLinkTextWithCommaAttribute2,
						expr: &seqExpr{
							pos: position{line: 1118, col: 5, offset: 41730},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1118, col: 5, offset: 41730},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1118, col: 10, offset: 41735},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1118, col: 19, offset: 41744},
										expr: &seqExpr{
											pos: position{line: 1118, col: 20, offset: 41745},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1118, col: 20, offset: 41745},
													expr: &litMatcher{
														pos:        position{line: 1118, col: 21, offset: 41746},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1118, col: 25, offset: 41750},
													expr: &litMatcher{
														pos:        position{line: 1118, col: 26, offset: 41751},
														val:        "]",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1118, col: 30, offset: 41755},
													expr: &litMatcher{
														pos:        position{line: 1118, col: 31, offset: 41756},
														val:        "\"",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1118, col: 37, offset: 41762},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1118, col: 37, offset: 41762},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1118, col: 50, offset: 41775},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1118, col: 63, offset: 41788},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1118, col: 73, offset: 41798},
															run: (*parser).callonLinkTextWithCommaAttribute18,
															expr: &seqExpr{
																pos: position{line: 1118, col: 74, offset: 41799},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1118, col: 74, offset: 41799},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1118, col: 75, offset: 41800},
																			name: "QuotedTextPrefix",
																		},
																	},
																	&anyMatcher{
																		line: 1118, col: 92, offset: 41817,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1120, col: 11, offset: 41886},
									val:        "\"",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1120, col: 16, offset: 41891},
									expr: &ruleRefExpr{
										pos:  position{line: 1120, col: 16, offset: 41891},
										name: "Spaces",
									},
								},
								&andExpr{
									pos: position{line: 1120, col: 24, offset: 41899},
									expr: &notExpr{
										pos: position{line: 1120, col: 26, offset: 41901},
										expr: &litMatcher{
											pos:        position{line: 1120, col: 27, offset: 41902},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1124, col: 5, offset: 42027},
						run: (*parser).callonLinkTextWithCommaAttribute29,
						expr: &seqExpr{
							pos: position{line: 1124, col: 5, offset: 42027},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1124, col: 5, offset: 42027},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1124, col: 14, offset: 42036},
										expr: &seqExpr{
											pos: position{line: 1124, col: 15, offset: 42037},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1124, col: 15, offset: 42037},
													expr: &litMatcher{
														pos:        position{line: 1124, col: 16, offset: 42038},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1124, col: 20, offset: 42042},
													expr: &litMatcher{
														pos:        position{line: 1124, col: 21, offset: 42043},
														val:        "]",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1124, col: 26, offset: 42048},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1124, col: 26, offset: 42048},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1124, col: 39, offset: 42061},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1124, col: 52, offset: 42074},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1124, col: 62, offset: 42084},
															run: (*parser).callonLinkTextWithCommaAttribute42,
															expr: &seqExpr{
																pos: position{line: 1124, col: 63, offset: 42085},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1124, col: 63, offset: 42085},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1124, col: 64, offset: 42086},
																			name: "QuotedTextPrefix",
																		},
																	},
																	&anyMatcher{
																		line: 1124, col: 81, offset: 42103,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 1126, col: 11, offset: 42172},
									expr: &notExpr{
										pos: position{line: 1126, col: 13, offset: 42174},
										expr: &litMatcher{
											pos:        position{line: 1126, col: 14, offset: 42175},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextAndMoreLinkAttributes",
			pos:  position{line: 1131, col: 1, offset: 42255},
			expr: &actionExpr{
				pos: position{line: 1131, col: 30, offset: 42284},
				run: (*parser).callonTextAndMoreLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1131, col: 30, offset: 42284},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1131, col: 30, offset: 42284},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1131, col: 34, offset: 42288},
							label: "text",
							expr: &zeroOrOneExpr{
								pos: position{line: 1131, col: 39, offset: 42293},
								expr: &ruleRefExpr{
									pos:  position{line: 1131, col: 40, offset: 42294},
									name: "LinkTextAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1131, col: 60, offset: 42314},
							expr: &litMatcher{
								pos:        position{line: 1131, col: 60, offset: 42314},
								val:        ",",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1131, col: 65, offset: 42319},
							expr: &ruleRefExpr{
								pos:  position{line: 1131, col: 65, offset: 42319},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 1131, col: 69, offset: 42323},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1131, col: 80, offset: 42334},
								expr: &ruleRefExpr{
									pos:  position{line: 1131, col: 81, offset: 42335},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1131, col: 100, offset: 42354},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LinkTextAttribute",
			pos:  position{line: 1135, col: 1, offset: 42439},
			expr: &choiceExpr{
				pos: position{line: 1137, col: 5, offset: 42502},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1137, col: 5, offset: 42502},
						run: (*parser).callonLinkTextAttribute2,
						expr: &seqExpr{
							pos: position{line: 1137, col: 5, offset: 42502},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1137, col: 5, offset: 42502},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1137, col: 10, offset: 42507},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1137, col: 19, offset: 42516},
										expr: &seqExpr{
											pos: position{line: 1137, col: 20, offset: 42517},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1137, col: 20, offset: 42517},
													expr: &litMatcher{
														pos:        position{line: 1137, col: 21, offset: 42518},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1137, col: 25, offset: 42522},
													expr: &litMatcher{
														pos:        position{line: 1137, col: 26, offset: 42523},
														val:        "]",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1137, col: 30, offset: 42527},
													expr: &litMatcher{
														pos:        position{line: 1137, col: 31, offset: 42528},
														val:        "\"",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1137, col: 37, offset: 42534},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1137, col: 37, offset: 42534},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1137, col: 50, offset: 42547},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1137, col: 63, offset: 42560},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1137, col: 73, offset: 42570},
															run: (*parser).callonLinkTextAttribute18,
															expr: &seqExpr{
																pos: position{line: 1137, col: 74, offset: 42571},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1137, col: 74, offset: 42571},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1137, col: 75, offset: 42572},
																			name: "QuotedTextPrefix",
																		},
																	},
																	&anyMatcher{
																		line: 1137, col: 92, offset: 42589,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1139, col: 11, offset: 42658},
									val:        "\"",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1139, col: 16, offset: 42663},
									expr: &ruleRefExpr{
										pos:  position{line: 1139, col: 16, offset: 42663},
										name: "Spaces",
									},
								},
								&andExpr{
									pos: position{line: 1139, col: 24, offset: 42671},
									expr: &notExpr{
										pos: position{line: 1139, col: 26, offset: 42673},
										expr: &litMatcher{
											pos:        position{line: 1139, col: 27, offset: 42674},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1143, col: 5, offset: 42799},
						run: (*parser).callonLinkTextAttribute29,
						expr: &seqExpr{
							pos: position{line: 1143, col: 5, offset: 42799},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1143, col: 5, offset: 42799},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1143, col: 14, offset: 42808},
										expr: &seqExpr{
											pos: position{line: 1143, col: 15, offset: 42809},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1143, col: 15, offset: 42809},
													expr: &litMatcher{
														pos:        position{line: 1143, col: 16, offset: 42810},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1143, col: 20, offset: 42814},
													expr: &litMatcher{
														pos:        position{line: 1143, col: 21, offset: 42815},
														val:        ",",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1143, col: 25, offset: 42819},
													expr: &litMatcher{
														pos:        position{line: 1143, col: 26, offset: 42820},
														val:        "]",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1143, col: 31, offset: 42825},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1143, col: 31, offset: 42825},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1143, col: 44, offset: 42838},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1143, col: 57, offset: 42851},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1143, col: 67, offset: 42861},
															run: (*parser).callonLinkTextAttribute44,
															expr: &seqExpr{
																pos: position{line: 1143, col: 68, offset: 42862},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1143, col: 68, offset: 42862},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1143, col: 69, offset: 42863},
																			name: "QuotedTextPrefix",
																		},
																	},
																	&anyMatcher{
																		line: 1143, col: 86, offset: 42880,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 1145, col: 11, offset: 42949},
									expr: &notExpr{
										pos: position{line: 1145, col: 13, offset: 42951},
										expr: &litMatcher{
											pos:        position{line: 1145, col: 14, offset: 42952},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineLinks",
			pos:  position{line: 1150, col: 1, offset: 43102},
			expr: &actionExpr{
				pos: position{line: 1151, col: 5, offset: 43122},
				run: (*parser).callonInlineLinks1,
				expr: &labeledExpr{
					pos:   position{line: 1151, col: 5, offset: 43122},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1151, col: 14, offset: 43131},
						expr: &choiceExpr{
							pos: position{line: 1151, col: 15, offset: 43132},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1151, col: 15, offset: 43132},
									name: "SimpleWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1152, col: 11, offset: 43153},
									name: "Spaces",
								},
								&ruleRefExpr{
									pos:  position{line: 1153, col: 11, offset: 43171},
									name: "Link",
								},
								&ruleRefExpr{
									pos:  position{line: 1154, col: 11, offset: 43187},
									name: "OtherWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1155, col: 11, offset: 43207},
									name: "Parenthesis",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1163, col: 1, offset: 43390},
			expr: &actionExpr{
				pos: position{line: 1163, col: 15, offset: 43404},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1163, col: 15, offset: 43404},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1163, col: 15, offset: 43404},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1163, col: 26, offset: 43415},
								expr: &ruleRefExpr{
									pos:  position{line: 1163, col: 27, offset: 43416},
									name: "ElementAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1163, col: 47, offset: 43436},
							val:        "image::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1163, col: 57, offset: 43446},
							label: "path",
							expr: &choiceExpr{
								pos: position{line: 1163, col: 63, offset: 43452},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1163, col: 63, offset: 43452},
										name: "Location",
									},
									&ruleRefExpr{
										pos:  position{line: 1163, col: 74, offset: 43463},
										name: "FileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1163, col: 88, offset: 43477},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1163, col: 106, offset: 43495},
								name: "ImageAttributes",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1163, col: 123, offset: 43512},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1167, col: 1, offset: 43632},
			expr: &actionExpr{
				pos: position{line: 1167, col: 16, offset: 43647},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1167, col: 16, offset: 43647},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1167, col: 16, offset: 43647},
							val:        "image:",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1167, col: 25, offset: 43656},
							expr: &litMatcher{
								pos:        position{line: 1167, col: 26, offset: 43657},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1167, col: 30, offset: 43661},
							label: "path",
							expr: &choiceExpr{
								pos: position{line: 1167, col: 36, offset: 43667},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1167, col: 36, offset: 43667},
										name: "Location",
									},
									&ruleRefExpr{
										pos:  position{line: 1167, col: 47, offset: 43678},
										name: "FileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1167, col: 61, offset: 43692},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1167, col: 79, offset: 43710},
								name: "ImageAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAttributes",
			pos:  position{line: 1171, col: 1, offset: 43831},
			expr: &actionExpr{
				pos: position{line: 1171, col: 20, offset: 43850},
				run: (*parser).callonImageAttributes1,
				expr: &seqExpr{
					pos: position{line: 1171, col: 20, offset: 43850},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1171, col: 20, offset: 43850},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1171, col: 24, offset: 43854},
							label: "alt",
							expr: &zeroOrOneExpr{
								pos: position{line: 1171, col: 28, offset: 43858},
								expr: &ruleRefExpr{
									pos:  position{line: 1171, col: 29, offset: 43859},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1171, col: 46, offset: 43876},
							expr: &litMatcher{
								pos:        position{line: 1171, col: 46, offset: 43876},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1171, col: 51, offset: 43881},
							label: "width",
							expr: &zeroOrOneExpr{
								pos: position{line: 1171, col: 57, offset: 43887},
								expr: &ruleRefExpr{
									pos:  position{line: 1171, col: 58, offset: 43888},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1171, col: 75, offset: 43905},
							expr: &litMatcher{
								pos:        position{line: 1171, col: 75, offset: 43905},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1171, col: 80, offset: 43910},
							label: "height",
							expr: &zeroOrOneExpr{
								pos: position{line: 1171, col: 87, offset: 43917},
								expr: &ruleRefExpr{
									pos:  position{line: 1171, col: 88, offset: 43918},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1171, col: 105, offset: 43935},
							expr: &litMatcher{
								pos:        position{line: 1171, col: 105, offset: 43935},
								val:        ",",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1171, col: 110, offset: 43940},
							expr: &ruleRefExpr{
								pos:  position{line: 1171, col: 110, offset: 43940},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 1171, col: 114, offset: 43944},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1171, col: 125, offset: 43955},
								expr: &ruleRefExpr{
									pos:  position{line: 1171, col: 126, offset: 43956},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1171, col: 145, offset: 43975},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1178, col: 1, offset: 44265},
			expr: &choiceExpr{
				pos: position{line: 1178, col: 19, offset: 44283},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1178, col: 19, offset: 44283},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1178, col: 19, offset: 44283},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1178, col: 19, offset: 44283},
									val:        "footnote:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1178, col: 32, offset: 44296},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1178, col: 41, offset: 44305},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1178, col: 58, offset: 44322},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1180, col: 5, offset: 44397},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1180, col: 5, offset: 44397},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1180, col: 5, offset: 44397},
									val:        "footnoteref:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1180, col: 21, offset: 44413},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1180, col: 26, offset: 44418},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1180, col: 39, offset: 44431},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1180, col: 43, offset: 44435},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1180, col: 52, offset: 44444},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1180, col: 69, offset: 44461},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1182, col: 5, offset: 44546},
						run: (*parser).callonInlineFootnote17,
						expr: &seqExpr{
							pos: position{line: 1182, col: 5, offset: 44546},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1182, col: 5, offset: 44546},
									val:        "footnoteref:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1182, col: 21, offset: 44562},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1182, col: 26, offset: 44567},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1182, col: 39, offset: 44580},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1186, col: 1, offset: 44695},
			expr: &actionExpr{
				pos: position{line: 1186, col: 16, offset: 44710},
				run: (*parser).callonFootnoteRef1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1186, col: 16, offset: 44710},
					expr: &choiceExpr{
						pos: position{line: 1186, col: 17, offset: 44711},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1186, col: 17, offset: 44711},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1186, col: 29, offset: 44723},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1186, col: 39, offset: 44733},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1186, col: 39, offset: 44733},
										expr: &litMatcher{
											pos:        position{line: 1186, col: 40, offset: 44734},
											val:        ",",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1186, col: 44, offset: 44738},
										expr: &litMatcher{
											pos:        position{line: 1186, col: 45, offset: 44739},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1186, col: 49, offset: 44743},
										expr: &ruleRefExpr{
											pos:  position{line: 1186, col: 50, offset: 44744},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 1186, col: 55, offset: 44749,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1190, col: 1, offset: 44834},
			expr: &actionExpr{
				pos: position{line: 1190, col: 20, offset: 44853},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1190, col: 20, offset: 44853},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1190, col: 29, offset: 44862},
						expr: &seqExpr{
							pos: position{line: 1190, col: 30, offset: 44863},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1190, col: 30, offset: 44863},
									expr: &litMatcher{
										pos:        position{line: 1190, col: 31, offset: 44864},
										val:        "]",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 1190, col: 35, offset: 44868},
									expr: &ruleRefExpr{
										pos:  position{line: 1190, col: 36, offset: 44869},
										name: "EOL",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1190, col: 40, offset: 44873},
									expr: &ruleRefExpr{
										pos:  position{line: 1190, col: 40, offset: 44873},
										name: "WS",
									},
								},
								&notExpr{
									pos: position{line: 1190, col: 44, offset: 44877},
									expr: &ruleRefExpr{
										pos:  position{line: 1190, col: 45, offset: 44878},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1190, col: 61, offset: 44894},
									name: "InlineElement",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1190, col: 75, offset: 44908},
									expr: &ruleRefExpr{
										pos:  position{line: 1190, col: 75, offset: 44908},
										name: "WS",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1197, col: 1, offset: 45222},
			expr: &actionExpr{
				pos: position{line: 1197, col: 19, offset: 45240},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1197, col: 19, offset: 45240},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1197, col: 19, offset: 45240},
							expr: &ruleRefExpr{
								pos:  position{line: 1197, col: 20, offset: 45241},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1198, col: 5, offset: 45270},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1198, col: 12, offset: 45277},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1198, col: 12, offset: 45277},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1199, col: 11, offset: 45300},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1200, col: 11, offset: 45324},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1201, col: 11, offset: 45348},
										name: "VerseBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1202, col: 11, offset: 45370},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1203, col: 11, offset: 45392},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1204, col: 11, offset: 45415},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1205, col: 11, offset: 45443},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1206, col: 11, offset: 45459},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1210, col: 1, offset: 45500},
			expr: &choiceExpr{
				pos: position{line: 1210, col: 19, offset: 45518},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1210, col: 19, offset: 45518},
						name: "LiteralBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1211, col: 19, offset: 45559},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1212, col: 19, offset: 45599},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1213, col: 19, offset: 45640},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1214, col: 19, offset: 45681},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1215, col: 19, offset: 45722},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1216, col: 19, offset: 45760},
						name: "SidebarBlockDelimiter",
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1222, col: 1, offset: 45979},
			expr: &seqExpr{
				pos: position{line: 1222, col: 25, offset: 46003},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1222, col: 25, offset: 46003},
						val:        "```",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1222, col: 31, offset: 46009},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1224, col: 1, offset: 46015},
			expr: &actionExpr{
				pos: position{line: 1224, col: 16, offset: 46030},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1224, col: 16, offset: 46030},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1224, col: 16, offset: 46030},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1224, col: 27, offset: 46041},
								expr: &ruleRefExpr{
									pos:  position{line: 1224, col: 28, offset: 46042},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1224, col: 48, offset: 46062},
							name: "FencedBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1224, col: 69, offset: 46083},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1224, col: 77, offset: 46091},
								expr: &ruleRefExpr{
									pos:  position{line: 1224, col: 78, offset: 46092},
									name: "FencedBlockContent",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1224, col: 100, offset: 46114},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1224, col: 100, offset: 46114},
									name: "FencedBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1224, col: 123, offset: 46137},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockContent",
			pos:  position{line: 1228, col: 1, offset: 46245},
			expr: &choiceExpr{
				pos: position{line: 1228, col: 23, offset: 46267},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1228, col: 23, offset: 46267},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1228, col: 35, offset: 46279},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1228, col: 51, offset: 46295},
						name: "ListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 1228, col: 62, offset: 46306},
						name: "FencedBlockParagraph",
					},
				},
			},
		},
		{
			name: "FencedBlockParagraph",
			pos:  position{line: 1231, col: 1, offset: 46346},
			expr: &actionExpr{
				pos: position{line: 1231, col: 25, offset: 46370},
				run: (*parser).callonFencedBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1231, col: 25, offset: 46370},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1231, col: 31, offset: 46376},
						expr: &ruleRefExpr{
							pos:  position{line: 1231, col: 32, offset: 46377},
							name: "FencedBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockParagraphLine",
			pos:  position{line: 1235, col: 1, offset: 46490},
			expr: &actionExpr{
				pos: position{line: 1235, col: 29, offset: 46518},
				run: (*parser).callonFencedBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1235, col: 29, offset: 46518},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1235, col: 29, offset: 46518},
							expr: &ruleRefExpr{
								pos:  position{line: 1235, col: 30, offset: 46519},
								name: "FencedBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1235, col: 51, offset: 46540},
							expr: &ruleRefExpr{
								pos:  position{line: 1235, col: 52, offset: 46541},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1235, col: 62, offset: 46551},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1235, col: 68, offset: 46557},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1242, col: 1, offset: 46795},
			expr: &seqExpr{
				pos: position{line: 1242, col: 26, offset: 46820},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1242, col: 26, offset: 46820},
						val:        "----",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1242, col: 33, offset: 46827},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1245, col: 1, offset: 46868},
			expr: &actionExpr{
				pos: position{line: 1245, col: 17, offset: 46884},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1245, col: 17, offset: 46884},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1245, col: 17, offset: 46884},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1245, col: 28, offset: 46895},
								expr: &ruleRefExpr{
									pos:  position{line: 1245, col: 29, offset: 46896},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1245, col: 49, offset: 46916},
							name: "ListingBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1245, col: 71, offset: 46938},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1245, col: 79, offset: 46946},
								expr: &ruleRefExpr{
									pos:  position{line: 1245, col: 80, offset: 46947},
									name: "ListingBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1245, col: 103, offset: 46970},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1245, col: 103, offset: 46970},
									name: "ListingBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1245, col: 127, offset: 46994},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockElement",
			pos:  position{line: 1249, col: 1, offset: 47103},
			expr: &choiceExpr{
				pos: position{line: 1249, col: 24, offset: 47126},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1249, col: 24, offset: 47126},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1249, col: 40, offset: 47142},
						name: "ListingBlockParagraph",
					},
				},
			},
		},
		{
			name: "ListingBlockParagraph",
			pos:  position{line: 1251, col: 1, offset: 47165},
			expr: &actionExpr{
				pos: position{line: 1251, col: 26, offset: 47190},
				run: (*parser).callonListingBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1251, col: 26, offset: 47190},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1251, col: 32, offset: 47196},
						expr: &ruleRefExpr{
							pos:  position{line: 1251, col: 33, offset: 47197},
							name: "ListingBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockParagraphLine",
			pos:  position{line: 1255, col: 1, offset: 47316},
			expr: &actionExpr{
				pos: position{line: 1255, col: 30, offset: 47345},
				run: (*parser).callonListingBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1255, col: 30, offset: 47345},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1255, col: 30, offset: 47345},
							expr: &ruleRefExpr{
								pos:  position{line: 1255, col: 31, offset: 47346},
								name: "ListingBlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1255, col: 53, offset: 47368},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1255, col: 59, offset: 47374},
								run: (*parser).callonListingBlockParagraphLine6,
								expr: &seqExpr{
									pos: position{line: 1255, col: 59, offset: 47374},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1255, col: 59, offset: 47374},
											expr: &ruleRefExpr{
												pos:  position{line: 1255, col: 60, offset: 47375},
												name: "EOF",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1255, col: 64, offset: 47379},
											expr: &choiceExpr{
												pos: position{line: 1255, col: 65, offset: 47380},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1255, col: 65, offset: 47380},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1255, col: 77, offset: 47392},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 1255, col: 87, offset: 47402},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 1255, col: 87, offset: 47402},
																expr: &ruleRefExpr{
																	pos:  position{line: 1255, col: 88, offset: 47403},
																	name: "EOL",
																},
															},
															&anyMatcher{
																line: 1255, col: 92, offset: 47407,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1255, col: 128, offset: 47443},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1262, col: 1, offset: 47769},
			expr: &seqExpr{
				pos: position{line: 1262, col: 26, offset: 47794},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1262, col: 26, offset: 47794},
						val:        "====",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1262, col: 33, offset: 47801},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1264, col: 1, offset: 47807},
			expr: &actionExpr{
				pos: position{line: 1264, col: 17, offset: 47823},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1264, col: 17, offset: 47823},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1264, col: 17, offset: 47823},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1264, col: 28, offset: 47834},
								expr: &ruleRefExpr{
									pos:  position{line: 1264, col: 29, offset: 47835},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1264, col: 49, offset: 47855},
							name: "ExampleBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1264, col: 71, offset: 47877},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1264, col: 79, offset: 47885},
								expr: &choiceExpr{
									pos: position{line: 1264, col: 80, offset: 47886},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1264, col: 80, offset: 47886},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 1264, col: 92, offset: 47898},
											name: "FileInclusion",
										},
										&ruleRefExpr{
											pos:  position{line: 1264, col: 108, offset: 47914},
											name: "ListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1264, col: 119, offset: 47925},
											name: "ExampleBlockParagraph",
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1264, col: 145, offset: 47951},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1264, col: 145, offset: 47951},
									name: "ExampleBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1264, col: 169, offset: 47975},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockParagraph",
			pos:  position{line: 1269, col: 1, offset: 48102},
			expr: &actionExpr{
				pos: position{line: 1269, col: 26, offset: 48127},
				run: (*parser).callonExampleBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1269, col: 26, offset: 48127},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1269, col: 32, offset: 48133},
						expr: &ruleRefExpr{
							pos:  position{line: 1269, col: 33, offset: 48134},
							name: "ExampleBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockParagraphLine",
			pos:  position{line: 1273, col: 1, offset: 48248},
			expr: &actionExpr{
				pos: position{line: 1273, col: 30, offset: 48277},
				run: (*parser).callonExampleBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1273, col: 30, offset: 48277},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1273, col: 30, offset: 48277},
							expr: &ruleRefExpr{
								pos:  position{line: 1273, col: 31, offset: 48278},
								name: "ExampleBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1273, col: 53, offset: 48300},
							expr: &ruleRefExpr{
								pos:  position{line: 1273, col: 54, offset: 48301},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1273, col: 64, offset: 48311},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1273, col: 70, offset: 48317},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1280, col: 1, offset: 48553},
			expr: &seqExpr{
				pos: position{line: 1280, col: 24, offset: 48576},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1280, col: 24, offset: 48576},
						val:        "____",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1280, col: 31, offset: 48583},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1282, col: 1, offset: 48614},
			expr: &actionExpr{
				pos: position{line: 1282, col: 15, offset: 48628},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1282, col: 15, offset: 48628},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1282, col: 15, offset: 48628},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1282, col: 26, offset: 48639},
								expr: &ruleRefExpr{
									pos:  position{line: 1282, col: 27, offset: 48640},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1282, col: 47, offset: 48660},
							name: "QuoteBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1282, col: 67, offset: 48680},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1282, col: 75, offset: 48688},
								expr: &ruleRefExpr{
									pos:  position{line: 1282, col: 76, offset: 48689},
									name: "QuoteBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1282, col: 97, offset: 48710},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1282, col: 97, offset: 48710},
									name: "QuoteBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1282, col: 119, offset: 48732},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockElement",
			pos:  position{line: 1286, col: 1, offset: 48839},
			expr: &actionExpr{
				pos: position{line: 1287, col: 5, offset: 48865},
				run: (*parser).callonQuoteBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1287, col: 5, offset: 48865},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1287, col: 5, offset: 48865},
							expr: &ruleRefExpr{
								pos:  position{line: 1287, col: 6, offset: 48866},
								name: "QuoteBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1287, col: 26, offset: 48886},
							expr: &ruleRefExpr{
								pos:  position{line: 1287, col: 27, offset: 48887},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1287, col: 31, offset: 48891},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1287, col: 40, offset: 48900},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1287, col: 40, offset: 48900},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1288, col: 15, offset: 48925},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 1289, col: 15, offset: 48953},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1290, col: 15, offset: 48979},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1291, col: 15, offset: 49002},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1292, col: 15, offset: 49028},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1293, col: 15, offset: 49055},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1294, col: 15, offset: 49082},
										name: "CommentBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1295, col: 15, offset: 49109},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1296, col: 15, offset: 49141},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1297, col: 15, offset: 49167},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1298, col: 15, offset: 49194},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1299, col: 15, offset: 49215},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1300, col: 15, offset: 49243},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 1301, col: 15, offset: 49287},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 1302, col: 15, offset: 49325},
										name: "TableOfContentsMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1303, col: 15, offset: 49360},
										name: "QuoteBlockParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockParagraph",
			pos:  position{line: 1307, col: 1, offset: 49419},
			expr: &actionExpr{
				pos: position{line: 1307, col: 24, offset: 49442},
				run: (*parser).callonQuoteBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1307, col: 24, offset: 49442},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1307, col: 30, offset: 49448},
						expr: &ruleRefExpr{
							pos:  position{line: 1307, col: 31, offset: 49449},
							name: "InlineElements",
						},
					},
				},
			},
		},
		{
			name: "VerseBlock",
			pos:  position{line: 1316, col: 1, offset: 49795},
			expr: &actionExpr{
				pos: position{line: 1316, col: 15, offset: 49809},
				run: (*parser).callonVerseBlock1,
				expr: &seqExpr{
					pos: position{line: 1316, col: 15, offset: 49809},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1316, col: 15, offset: 49809},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1316, col: 27, offset: 49821},
								name: "ElementAttributes",
							},
						},
						&andCodeExpr{
							pos: position{line: 1317, col: 5, offset: 49845},
							run: (*parser).callonVerseBlock5,
						},
						&ruleRefExpr{
							pos:  position{line: 1321, col: 5, offset: 50031},
							name: "QuoteBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1321, col: 25, offset: 50051},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1321, col: 33, offset: 50059},
								expr: &ruleRefExpr{
									pos:  position{line: 1321, col: 34, offset: 50060},
									name: "VerseBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1321, col: 55, offset: 50081},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1321, col: 55, offset: 50081},
									name: "QuoteBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1321, col: 77, offset: 50103},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockElement",
			pos:  position{line: 1325, col: 1, offset: 50218},
			expr: &choiceExpr{
				pos: position{line: 1325, col: 22, offset: 50239},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1325, col: 22, offset: 50239},
						name: "VerseFileInclude",
					},
					&ruleRefExpr{
						pos:  position{line: 1325, col: 41, offset: 50258},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1325, col: 53, offset: 50270},
						name: "VerseBlockParagraph",
					},
				},
			},
		},
		{
			name: "VerseFileInclude",
			pos:  position{line: 1327, col: 1, offset: 50291},
			expr: &actionExpr{
				pos: position{line: 1327, col: 21, offset: 50311},
				run: (*parser).callonVerseFileInclude1,
				expr: &seqExpr{
					pos: position{line: 1327, col: 21, offset: 50311},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1327, col: 21, offset: 50311},
							expr: &ruleRefExpr{
								pos:  position{line: 1327, col: 22, offset: 50312},
								name: "QuoteBlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1327, col: 42, offset: 50332},
							label: "include",
							expr: &ruleRefExpr{
								pos:  position{line: 1327, col: 51, offset: 50341},
								name: "FileInclusion",
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraph",
			pos:  position{line: 1332, col: 1, offset: 50403},
			expr: &actionExpr{
				pos: position{line: 1332, col: 24, offset: 50426},
				run: (*parser).callonVerseBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1332, col: 24, offset: 50426},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1332, col: 30, offset: 50432},
						expr: &ruleRefExpr{
							pos:  position{line: 1332, col: 31, offset: 50433},
							name: "VerseBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLine",
			pos:  position{line: 1336, col: 1, offset: 50523},
			expr: &actionExpr{
				pos: position{line: 1336, col: 28, offset: 50550},
				run: (*parser).callonVerseBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1336, col: 28, offset: 50550},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1336, col: 28, offset: 50550},
							expr: &ruleRefExpr{
								pos:  position{line: 1336, col: 29, offset: 50551},
								name: "QuoteBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1336, col: 49, offset: 50571},
							expr: &ruleRefExpr{
								pos:  position{line: 1336, col: 50, offset: 50572},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1336, col: 60, offset: 50582},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1336, col: 66, offset: 50588},
								run: (*parser).callonVerseBlockParagraphLine8,
								expr: &seqExpr{
									pos: position{line: 1336, col: 66, offset: 50588},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1336, col: 66, offset: 50588},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1336, col: 75, offset: 50597},
												expr: &ruleRefExpr{
													pos:  position{line: 1336, col: 76, offset: 50598},
													name: "VerseBlockParagraphLineElement",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1336, col: 109, offset: 50631},
											name: "EOL",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLineElement",
			pos:  position{line: 1342, col: 1, offset: 50727},
			expr: &actionExpr{
				pos: position{line: 1342, col: 35, offset: 50761},
				run: (*parser).callonVerseBlockParagraphLineElement1,
				expr: &seqExpr{
					pos: position{line: 1342, col: 35, offset: 50761},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1342, col: 35, offset: 50761},
							expr: &ruleRefExpr{
								pos:  position{line: 1342, col: 36, offset: 50762},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 1342, col: 40, offset: 50766},
							expr: &ruleRefExpr{
								pos:  position{line: 1342, col: 41, offset: 50767},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 1343, col: 5, offset: 50782},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1343, col: 14, offset: 50791},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1343, col: 14, offset: 50791},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 1344, col: 11, offset: 50809},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 1345, col: 11, offset: 50832},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 1346, col: 11, offset: 50848},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1347, col: 11, offset: 50871},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 1348, col: 11, offset: 50897},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1349, col: 11, offset: 50924},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1350, col: 11, offset: 50946},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 1351, col: 11, offset: 50972},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1352, col: 11, offset: 51013},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 1353, col: 11, offset: 51040},
										name: "OtherWord",
									},
									&ruleRefExpr{
										pos:  position{line: 1354, col: 11, offset: 51060},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1361, col: 1, offset: 51292},
			expr: &seqExpr{
				pos: position{line: 1361, col: 26, offset: 51317},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1361, col: 26, offset: 51317},
						val:        "****",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1361, col: 33, offset: 51324},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1363, col: 1, offset: 51330},
			expr: &actionExpr{
				pos: position{line: 1363, col: 17, offset: 51346},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1363, col: 17, offset: 51346},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1363, col: 17, offset: 51346},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1363, col: 28, offset: 51357},
								expr: &ruleRefExpr{
									pos:  position{line: 1363, col: 29, offset: 51358},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1363, col: 49, offset: 51378},
							name: "SidebarBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1363, col: 71, offset: 51400},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1363, col: 79, offset: 51408},
								expr: &ruleRefExpr{
									pos:  position{line: 1363, col: 80, offset: 51409},
									name: "SidebarBlockContent",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1363, col: 104, offset: 51433},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1363, col: 104, offset: 51433},
									name: "SidebarBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1363, col: 128, offset: 51457},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockContent",
			pos:  position{line: 1367, col: 1, offset: 51566},
			expr: &choiceExpr{
				pos: position{line: 1367, col: 24, offset: 51589},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1367, col: 24, offset: 51589},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1367, col: 36, offset: 51601},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1367, col: 52, offset: 51617},
						name: "ListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 1367, col: 63, offset: 51628},
						name: "NonSidebarBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 1367, col: 81, offset: 51646},
						name: "SidebarBlockParagraph",
					},
				},
			},
		},
		{
			name: "NonSidebarBlock",
			pos:  position{line: 1369, col: 1, offset: 51669},
			expr: &actionExpr{
				pos: position{line: 1369, col: 20, offset: 51688},
				run: (*parser).callonNonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1369, col: 20, offset: 51688},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1369, col: 20, offset: 51688},
							expr: &ruleRefExpr{
								pos:  position{line: 1369, col: 21, offset: 51689},
								name: "SidebarBlock",
							},
						},
						&labeledExpr{
							pos:   position{line: 1369, col: 34, offset: 51702},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1369, col: 43, offset: 51711},
								name: "DelimitedBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockParagraph",
			pos:  position{line: 1374, col: 1, offset: 51774},
			expr: &actionExpr{
				pos: position{line: 1374, col: 26, offset: 51799},
				run: (*parser).callonSidebarBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1374, col: 26, offset: 51799},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1374, col: 32, offset: 51805},
						expr: &ruleRefExpr{
							pos:  position{line: 1374, col: 33, offset: 51806},
							name: "SidebarBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockParagraphLine",
			pos:  position{line: 1378, col: 1, offset: 51920},
			expr: &actionExpr{
				pos: position{line: 1378, col: 30, offset: 51949},
				run: (*parser).callonSidebarBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1378, col: 30, offset: 51949},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1378, col: 30, offset: 51949},
							expr: &ruleRefExpr{
								pos:  position{line: 1378, col: 31, offset: 51950},
								name: "SidebarBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1378, col: 53, offset: 51972},
							expr: &ruleRefExpr{
								pos:  position{line: 1378, col: 54, offset: 51973},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1378, col: 64, offset: 51983},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1378, col: 70, offset: 51989},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1386, col: 1, offset: 52220},
			expr: &actionExpr{
				pos: position{line: 1386, col: 10, offset: 52229},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1386, col: 10, offset: 52229},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1386, col: 10, offset: 52229},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1386, col: 21, offset: 52240},
								expr: &ruleRefExpr{
									pos:  position{line: 1386, col: 22, offset: 52241},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1386, col: 42, offset: 52261},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1387, col: 5, offset: 52280},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1387, col: 12, offset: 52287},
								expr: &ruleRefExpr{
									pos:  position{line: 1387, col: 13, offset: 52288},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1388, col: 5, offset: 52310},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1388, col: 11, offset: 52316},
								expr: &ruleRefExpr{
									pos:  position{line: 1388, col: 12, offset: 52317},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1389, col: 6, offset: 52334},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1389, col: 6, offset: 52334},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1389, col: 23, offset: 52351},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1393, col: 1, offset: 52466},
			expr: &seqExpr{
				pos: position{line: 1393, col: 23, offset: 52488},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1393, col: 23, offset: 52488},
						val:        "|",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1393, col: 27, offset: 52492},
						expr: &ruleRefExpr{
							pos:  position{line: 1393, col: 27, offset: 52492},
							name: "WS",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1395, col: 1, offset: 52497},
			expr: &seqExpr{
				pos: position{line: 1395, col: 19, offset: 52515},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1395, col: 19, offset: 52515},
						val:        "|===",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1395, col: 26, offset: 52522},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1398, col: 1, offset: 52591},
			expr: &actionExpr{
				pos: position{line: 1398, col: 20, offset: 52610},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1398, col: 20, offset: 52610},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1398, col: 20, offset: 52610},
							expr: &ruleRefExpr{
								pos:  position{line: 1398, col: 21, offset: 52611},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1398, col: 36, offset: 52626},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1398, col: 42, offset: 52632},
								expr: &ruleRefExpr{
									pos:  position{line: 1398, col: 43, offset: 52633},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1398, col: 55, offset: 52645},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1398, col: 59, offset: 52649},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1402, col: 1, offset: 52717},
			expr: &actionExpr{
				pos: position{line: 1402, col: 14, offset: 52730},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1402, col: 14, offset: 52730},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1402, col: 14, offset: 52730},
							expr: &ruleRefExpr{
								pos:  position{line: 1402, col: 15, offset: 52731},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1402, col: 30, offset: 52746},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1402, col: 36, offset: 52752},
								expr: &ruleRefExpr{
									pos:  position{line: 1402, col: 37, offset: 52753},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1402, col: 49, offset: 52765},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1402, col: 53, offset: 52769},
							expr: &ruleRefExpr{
								pos:  position{line: 1402, col: 53, offset: 52769},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1406, col: 1, offset: 52838},
			expr: &actionExpr{
				pos: position{line: 1406, col: 14, offset: 52851},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1406, col: 14, offset: 52851},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1406, col: 14, offset: 52851},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1406, col: 33, offset: 52870},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1406, col: 42, offset: 52879},
								expr: &seqExpr{
									pos: position{line: 1406, col: 43, offset: 52880},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1406, col: 43, offset: 52880},
											expr: &ruleRefExpr{
												pos:  position{line: 1406, col: 44, offset: 52881},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1406, col: 63, offset: 52900},
											expr: &ruleRefExpr{
												pos:  position{line: 1406, col: 64, offset: 52901},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1406, col: 68, offset: 52905},
											expr: &ruleRefExpr{
												pos:  position{line: 1406, col: 68, offset: 52905},
												name: "WS",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1406, col: 72, offset: 52909},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1406, col: 86, offset: 52923},
											expr: &ruleRefExpr{
												pos:  position{line: 1406, col: 86, offset: 52923},
												name: "WS",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1413, col: 1, offset: 53169},
			expr: &litMatcher{
				pos:        position{line: 1413, col: 26, offset: 53194},
				val:        "////",
				ignoreCase: false,
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1415, col: 1, offset: 53202},
			expr: &actionExpr{
				pos: position{line: 1415, col: 17, offset: 53218},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1415, col: 17, offset: 53218},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1415, col: 17, offset: 53218},
							name: "CommentBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1415, col: 39, offset: 53240},
							expr: &ruleRefExpr{
								pos:  position{line: 1415, col: 39, offset: 53240},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1415, col: 43, offset: 53244},
							name: "NEWLINE",
						},
						&labeledExpr{
							pos:   position{line: 1415, col: 51, offset: 53252},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1415, col: 59, offset: 53260},
								expr: &ruleRefExpr{
									pos:  position{line: 1415, col: 60, offset: 53261},
									name: "CommentBlockLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1415, col: 81, offset: 53282},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1415, col: 82, offset: 53283},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1415, col: 82, offset: 53283},
											name: "CommentBlockDelimiter",
										},
										&ruleRefExpr{
											pos:  position{line: 1415, col: 104, offset: 53305},
											name: "EOLS",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1415, col: 112, offset: 53313},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockLine",
			pos:  position{line: 1419, col: 1, offset: 53419},
			expr: &actionExpr{
				pos: position{line: 1419, col: 21, offset: 53439},
				run: (*parser).callonCommentBlockLine1,
				expr: &seqExpr{
					pos: position{line: 1419, col: 21, offset: 53439},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1419, col: 21, offset: 53439},
							expr: &choiceExpr{
								pos: position{line: 1419, col: 22, offset: 53440},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1419, col: 22, offset: 53440},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 1419, col: 34, offset: 53452},
										name: "Spaces",
									},
									&seqExpr{
										pos: position{line: 1419, col: 44, offset: 53462},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1419, col: 44, offset: 53462},
												expr: &ruleRefExpr{
													pos:  position{line: 1419, col: 45, offset: 53463},
													name: "CommentBlockDelimiter",
												},
											},
											&notExpr{
												pos: position{line: 1419, col: 67, offset: 53485},
												expr: &ruleRefExpr{
													pos:  position{line: 1419, col: 68, offset: 53486},
													name: "EOL",
												},
											},
											&anyMatcher{
												line: 1419, col: 73, offset: 53491,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1419, col: 78, offset: 53496},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1423, col: 1, offset: 53536},
			expr: &actionExpr{
				pos: position{line: 1423, col: 22, offset: 53557},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1423, col: 22, offset: 53557},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1423, col: 22, offset: 53557},
							expr: &ruleRefExpr{
								pos:  position{line: 1423, col: 23, offset: 53558},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1423, col: 45, offset: 53580},
							expr: &ruleRefExpr{
								pos:  position{line: 1423, col: 45, offset: 53580},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 1423, col: 49, offset: 53584},
							val:        "//",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1423, col: 54, offset: 53589},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1423, col: 63, offset: 53598},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1423, col: 89, offset: 53624},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1427, col: 1, offset: 53689},
			expr: &actionExpr{
				pos: position{line: 1427, col: 29, offset: 53717},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1427, col: 29, offset: 53717},
					expr: &choiceExpr{
						pos: position{line: 1427, col: 30, offset: 53718},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1427, col: 30, offset: 53718},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1427, col: 42, offset: 53730},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1427, col: 52, offset: 53740},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1427, col: 52, offset: 53740},
										expr: &ruleRefExpr{
											pos:  position{line: 1427, col: 53, offset: 53741},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 1427, col: 58, offset: 53746,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 1435, col: 1, offset: 54055},
			expr: &choiceExpr{
				pos: position{line: 1435, col: 17, offset: 54071},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1435, col: 17, offset: 54071},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 1435, col: 49, offset: 54103},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 1435, col: 78, offset: 54132},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 1437, col: 1, offset: 54168},
			expr: &litMatcher{
				pos:        position{line: 1437, col: 26, offset: 54193},
				val:        "....",
				ignoreCase: false,
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 1440, col: 1, offset: 54265},
			expr: &actionExpr{
				pos: position{line: 1440, col: 31, offset: 54295},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 1440, col: 31, offset: 54295},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1440, col: 31, offset: 54295},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1440, col: 42, offset: 54306},
								expr: &ruleRefExpr{
									pos:  position{line: 1440, col: 43, offset: 54307},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1440, col: 63, offset: 54327},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1440, col: 70, offset: 54334},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 1445, col: 1, offset: 54564},
			expr: &actionExpr{
				pos: position{line: 1446, col: 5, offset: 54604},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 1446, col: 5, offset: 54604},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1446, col: 5, offset: 54604},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1446, col: 16, offset: 54615},
								run: (*parser).callonParagraphWithHeadingSpacesLines4,
								expr: &seqExpr{
									pos: position{line: 1446, col: 16, offset: 54615},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1446, col: 16, offset: 54615},
											name: "WS",
										},
										&oneOrMoreExpr{
											pos: position{line: 1446, col: 19, offset: 54618},
											expr: &choiceExpr{
												pos: position{line: 1446, col: 20, offset: 54619},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1446, col: 20, offset: 54619},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1446, col: 32, offset: 54631},
														name: "Spaces",
													},
													&actionExpr{
														pos: position{line: 1446, col: 41, offset: 54640},
														run: (*parser).callonParagraphWithHeadingSpacesLines11,
														expr: &seqExpr{
															pos: position{line: 1446, col: 42, offset: 54641},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 1446, col: 42, offset: 54641},
																	expr: &ruleRefExpr{
																		pos:  position{line: 1446, col: 43, offset: 54642},
																		name: "EOL",
																	},
																},
																&anyMatcher{
																	line: 1446, col: 48, offset: 54647,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1450, col: 8, offset: 54738},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 1451, col: 5, offset: 54801},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1451, col: 16, offset: 54812},
								expr: &actionExpr{
									pos: position{line: 1452, col: 9, offset: 54822},
									run: (*parser).callonParagraphWithHeadingSpacesLines19,
									expr: &seqExpr{
										pos: position{line: 1452, col: 9, offset: 54822},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1452, col: 9, offset: 54822},
												expr: &ruleRefExpr{
													pos:  position{line: 1452, col: 10, offset: 54823},
													name: "BlankLine",
												},
											},
											&labeledExpr{
												pos:   position{line: 1453, col: 9, offset: 54842},
												label: "otherLine",
												expr: &actionExpr{
													pos: position{line: 1453, col: 20, offset: 54853},
													run: (*parser).callonParagraphWithHeadingSpacesLines24,
													expr: &oneOrMoreExpr{
														pos: position{line: 1453, col: 20, offset: 54853},
														expr: &choiceExpr{
															pos: position{line: 1453, col: 21, offset: 54854},
															alternatives: []interface{}{
																&ruleRefExpr{
																	pos:  position{line: 1453, col: 21, offset: 54854},
																	name: "Alphanums",
																},
																&ruleRefExpr{
																	pos:  position{line: 1453, col: 33, offset: 54866},
																	name: "Spaces",
																},
																&seqExpr{
																	pos: position{line: 1453, col: 43, offset: 54876},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 1453, col: 43, offset: 54876},
																			expr: &ruleRefExpr{
																				pos:  position{line: 1453, col: 44, offset: 54877},
																				name: "EOL",
																			},
																		},
																		&anyMatcher{
																			line: 1453, col: 49, offset: 54882,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1455, col: 12, offset: 54939},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 1462, col: 1, offset: 55169},
			expr: &actionExpr{
				pos: position{line: 1462, col: 39, offset: 55207},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1462, col: 39, offset: 55207},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1462, col: 39, offset: 55207},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1462, col: 50, offset: 55218},
								expr: &ruleRefExpr{
									pos:  position{line: 1462, col: 51, offset: 55219},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1463, col: 9, offset: 55247},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1463, col: 31, offset: 55269},
							expr: &ruleRefExpr{
								pos:  position{line: 1463, col: 31, offset: 55269},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1463, col: 35, offset: 55273},
							name: "NEWLINE",
						},
						&labeledExpr{
							pos:   position{line: 1463, col: 43, offset: 55281},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1463, col: 50, offset: 55288},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 1463, col: 92, offset: 55330},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1463, col: 93, offset: 55331},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1463, col: 93, offset: 55331},
											name: "LiteralBlockDelimiter",
										},
										&ruleRefExpr{
											pos:  position{line: 1463, col: 115, offset: 55353},
											name: "EOLS",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1463, col: 123, offset: 55361},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 1468, col: 1, offset: 55520},
			expr: &actionExpr{
				pos: position{line: 1468, col: 44, offset: 55563},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 1468, col: 44, offset: 55563},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1468, col: 50, offset: 55569},
						expr: &ruleRefExpr{
							pos:  position{line: 1468, col: 51, offset: 55570},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 1472, col: 1, offset: 55654},
			expr: &actionExpr{
				pos: position{line: 1473, col: 5, offset: 55709},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 1473, col: 5, offset: 55709},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1473, col: 5, offset: 55709},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1473, col: 11, offset: 55715},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &zeroOrMoreExpr{
									pos: position{line: 1473, col: 11, offset: 55715},
									expr: &choiceExpr{
										pos: position{line: 1473, col: 12, offset: 55716},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1473, col: 12, offset: 55716},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 1473, col: 24, offset: 55728},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 1473, col: 34, offset: 55738},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 1473, col: 34, offset: 55738},
														expr: &ruleRefExpr{
															pos:  position{line: 1473, col: 35, offset: 55739},
															name: "LiteralBlockDelimiter",
														},
													},
													&notExpr{
														pos: position{line: 1473, col: 57, offset: 55761},
														expr: &ruleRefExpr{
															pos:  position{line: 1473, col: 58, offset: 55762},
															name: "EOL",
														},
													},
													&anyMatcher{
														line: 1473, col: 62, offset: 55766,
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1475, col: 8, offset: 55815},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 1480, col: 1, offset: 55941},
			expr: &actionExpr{
				pos: position{line: 1481, col: 5, offset: 55979},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 1481, col: 5, offset: 55979},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1481, col: 5, offset: 55979},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1481, col: 16, offset: 55990},
								expr: &ruleRefExpr{
									pos:  position{line: 1481, col: 17, offset: 55991},
									name: "ElementAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1482, col: 5, offset: 56015},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 1489, col: 5, offset: 56229},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1489, col: 12, offset: 56236},
								name: "ParagraphWithLiteralAttributeLines",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 1493, col: 1, offset: 56386},
			expr: &actionExpr{
				pos: position{line: 1493, col: 16, offset: 56401},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 1493, col: 16, offset: 56401},
					val:        "literal",
					ignoreCase: false,
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLines",
			pos:  position{line: 1498, col: 1, offset: 56484},
			expr: &actionExpr{
				pos: position{line: 1498, col: 39, offset: 56522},
				run: (*parser).callonParagraphWithLiteralAttributeLines1,
				expr: &labeledExpr{
					pos:   position{line: 1498, col: 39, offset: 56522},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1498, col: 45, offset: 56528},
						expr: &ruleRefExpr{
							pos:  position{line: 1498, col: 46, offset: 56529},
							name: "ParagraphWithLiteralAttributeLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLine",
			pos:  position{line: 1502, col: 1, offset: 56609},
			expr: &actionExpr{
				pos: position{line: 1502, col: 38, offset: 56646},
				run: (*parser).callonParagraphWithLiteralAttributeLine1,
				expr: &seqExpr{
					pos: position{line: 1502, col: 38, offset: 56646},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1502, col: 38, offset: 56646},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1502, col: 44, offset: 56652},
								run: (*parser).callonParagraphWithLiteralAttributeLine4,
								expr: &seqExpr{
									pos: position{line: 1502, col: 44, offset: 56652},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1502, col: 44, offset: 56652},
											expr: &ruleRefExpr{
												pos:  position{line: 1502, col: 46, offset: 56654},
												name: "BlankLine",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1502, col: 57, offset: 56665},
											expr: &choiceExpr{
												pos: position{line: 1502, col: 58, offset: 56666},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1502, col: 58, offset: 56666},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1502, col: 70, offset: 56678},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 1502, col: 80, offset: 56688},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 1502, col: 80, offset: 56688},
																expr: &ruleRefExpr{
																	pos:  position{line: 1502, col: 81, offset: 56689},
																	name: "EOL",
																},
															},
															&anyMatcher{
																line: 1502, col: 86, offset: 56694,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1504, col: 4, offset: 56735},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 1511, col: 1, offset: 56907},
			expr: &actionExpr{
				pos: position{line: 1511, col: 14, offset: 56920},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 1511, col: 14, offset: 56920},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1511, col: 14, offset: 56920},
							expr: &ruleRefExpr{
								pos:  position{line: 1511, col: 15, offset: 56921},
								name: "EOF",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1511, col: 19, offset: 56925},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 1518, col: 1, offset: 57073},
			expr: &charClassMatcher{
				pos:        position{line: 1518, col: 13, offset: 57085},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 1520, col: 1, offset: 57095},
			expr: &choiceExpr{
				pos: position{line: 1520, col: 16, offset: 57110},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1520, col: 16, offset: 57110},
						val:        "(",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1520, col: 22, offset: 57116},
						val:        ")",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1520, col: 28, offset: 57122},
						val:        "[",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1520, col: 34, offset: 57128},
						val:        "]",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1520, col: 40, offset: 57134},
						val:        "{",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1520, col: 46, offset: 57140},
						val:        "}",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 1522, col: 1, offset: 57146},
			expr: &actionExpr{
				pos: position{line: 1522, col: 14, offset: 57159},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1522, col: 14, offset: 57159},
					expr: &charClassMatcher{
						pos:        position{line: 1522, col: 14, offset: 57159},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Dot",
			pos:  position{line: 1526, col: 1, offset: 57205},
			expr: &litMatcher{
				pos:        position{line: 1526, col: 8, offset: 57212},
				val:        ".",
				ignoreCase: false,
			},
		},
		{
			name: "SimpleWord",
			pos:  position{line: 1528, col: 1, offset: 57217},
			expr: &actionExpr{
				pos: position{line: 1528, col: 15, offset: 57231},
				run: (*parser).callonSimpleWord1,
				expr: &seqExpr{
					pos: position{line: 1528, col: 15, offset: 57231},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1528, col: 15, offset: 57231},
							name: "Alphanums",
						},
						&andExpr{
							pos: position{line: 1528, col: 25, offset: 57241},
							expr: &choiceExpr{
								pos: position{line: 1528, col: 27, offset: 57243},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1528, col: 27, offset: 57243},
										name: "WS",
									},
									&ruleRefExpr{
										pos:  position{line: 1528, col: 32, offset: 57248},
										name: "EOL",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OtherWord",
			pos:  position{line: 1533, col: 1, offset: 57513},
			expr: &actionExpr{
				pos: position{line: 1533, col: 14, offset: 57526},
				run: (*parser).callonOtherWord1,
				expr: &choiceExpr{
					pos: position{line: 1533, col: 15, offset: 57527},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1533, col: 15, offset: 57527},
							name: "Alphanums",
						},
						&ruleRefExpr{
							pos:  position{line: 1533, col: 27, offset: 57539},
							name: "QuotedTextPrefix",
						},
						&oneOrMoreExpr{
							pos: position{line: 1533, col: 46, offset: 57558},
							expr: &actionExpr{
								pos: position{line: 1533, col: 47, offset: 57559},
								run: (*parser).callonOtherWord6,
								expr: &seqExpr{
									pos: position{line: 1533, col: 47, offset: 57559},
									exprs: []interface{}{
										&seqExpr{
											pos: position{line: 1533, col: 48, offset: 57560},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1533, col: 48, offset: 57560},
													expr: &ruleRefExpr{
														pos:  position{line: 1533, col: 49, offset: 57561},
														name: "NEWLINE",
													},
												},
												&notExpr{
													pos: position{line: 1533, col: 57, offset: 57569},
													expr: &ruleRefExpr{
														pos:  position{line: 1533, col: 58, offset: 57570},
														name: "WS",
													},
												},
												&notExpr{
													pos: position{line: 1533, col: 61, offset: 57573},
													expr: &ruleRefExpr{
														pos:  position{line: 1533, col: 62, offset: 57574},
														name: "Dot",
													},
												},
												&notExpr{
													pos: position{line: 1533, col: 66, offset: 57578},
													expr: &ruleRefExpr{
														pos:  position{line: 1533, col: 67, offset: 57579},
														name: "QuotedTextPrefix",
													},
												},
												&notExpr{
													pos: position{line: 1533, col: 84, offset: 57596},
													expr: &ruleRefExpr{
														pos:  position{line: 1533, col: 85, offset: 57597},
														name: "Parenthesis",
													},
												},
												&anyMatcher{
													line: 1533, col: 97, offset: 57609,
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1533, col: 100, offset: 57612},
											expr: &ruleRefExpr{
												pos:  position{line: 1533, col: 100, offset: 57612},
												name: "Dot",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1535, col: 7, offset: 57721},
							expr: &litMatcher{
								pos:        position{line: 1535, col: 7, offset: 57721},
								val:        ".",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Spaces",
			pos:  position{line: 1539, col: 1, offset: 57902},
			expr: &oneOrMoreExpr{
				pos: position{line: 1539, col: 11, offset: 57912},
				expr: &ruleRefExpr{
					pos:  position{line: 1539, col: 11, offset: 57912},
					name: "WS",
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 1541, col: 1, offset: 57918},
			expr: &actionExpr{
				pos: position{line: 1541, col: 17, offset: 57934},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1541, col: 17, offset: 57934},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1541, col: 26, offset: 57943},
						expr: &choiceExpr{
							pos: position{line: 1541, col: 27, offset: 57944},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1541, col: 27, offset: 57944},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 1541, col: 38, offset: 57955},
									name: "DocumentAttributeSubstitution",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 1545, col: 1, offset: 58047},
			expr: &actionExpr{
				pos: position{line: 1545, col: 13, offset: 58059},
				run: (*parser).callonLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1545, col: 13, offset: 58059},
					label: "elements",
					expr: &seqExpr{
						pos: position{line: 1545, col: 23, offset: 58069},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1545, col: 23, offset: 58069},
								name: "URL_SCHEME",
							},
							&oneOrMoreExpr{
								pos: position{line: 1545, col: 34, offset: 58080},
								expr: &choiceExpr{
									pos: position{line: 1545, col: 35, offset: 58081},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1545, col: 35, offset: 58081},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 1545, col: 46, offset: 58092},
											name: "DocumentAttributeSubstitution",
										},
										&seqExpr{
											pos: position{line: 1545, col: 78, offset: 58124},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1545, col: 78, offset: 58124},
													expr: &ruleRefExpr{
														pos:  position{line: 1545, col: 79, offset: 58125},
														name: "EOL",
													},
												},
												&notExpr{
													pos: position{line: 1545, col: 83, offset: 58129},
													expr: &ruleRefExpr{
														pos:  position{line: 1545, col: 84, offset: 58130},
														name: "WS",
													},
												},
												&notExpr{
													pos: position{line: 1545, col: 87, offset: 58133},
													expr: &litMatcher{
														pos:        position{line: 1545, col: 88, offset: 58134},
														val:        "[",
														ignoreCase: false,
													},
												},
												&anyMatcher{
													line: 1545, col: 92, offset: 58138,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 1549, col: 1, offset: 58203},
			expr: &oneOrMoreExpr{
				pos: position{line: 1549, col: 13, offset: 58215},
				expr: &choiceExpr{
					pos: position{line: 1549, col: 14, offset: 58216},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1549, col: 14, offset: 58216},
							val:        "[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789~:/?#@!$&;=()*+,_%]",
							chars:      []rune{'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '~', ':', '/', '?', '#', '@', '!', '$', '&', ';', '=', '(', ')', '*', '+', ',', '_', '%'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 1549, col: 99, offset: 58301},
							val:        "-",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1549, col: 105, offset: 58307},
							val:        ".",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 1551, col: 1, offset: 58348},
			expr: &actionExpr{
				pos: position{line: 1551, col: 8, offset: 58355},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1551, col: 8, offset: 58355},
					expr: &choiceExpr{
						pos: position{line: 1551, col: 9, offset: 58356},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1551, col: 9, offset: 58356},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 1551, col: 22, offset: 58369},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1551, col: 22, offset: 58369},
										expr: &ruleRefExpr{
											pos:  position{line: 1551, col: 23, offset: 58370},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 1551, col: 31, offset: 58378},
										expr: &ruleRefExpr{
											pos:  position{line: 1551, col: 32, offset: 58379},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1551, col: 35, offset: 58382},
										expr: &litMatcher{
											pos:        position{line: 1551, col: 36, offset: 58383},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1551, col: 40, offset: 58387},
										expr: &litMatcher{
											pos:        position{line: 1551, col: 41, offset: 58388},
											val:        "]",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1551, col: 46, offset: 58393,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 1555, col: 1, offset: 58434},
			expr: &choiceExpr{
				pos: position{line: 1555, col: 15, offset: 58448},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1555, col: 15, offset: 58448},
						val:        "http://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1555, col: 27, offset: 58460},
						val:        "https://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1555, col: 40, offset: 58473},
						val:        "ftp://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1555, col: 51, offset: 58484},
						val:        "irc://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1555, col: 62, offset: 58495},
						val:        "mailto:",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 1557, col: 1, offset: 58506},
			expr: &actionExpr{
				pos: position{line: 1557, col: 7, offset: 58512},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1557, col: 7, offset: 58512},
					expr: &choiceExpr{
						pos: position{line: 1557, col: 8, offset: 58513},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1557, col: 8, offset: 58513},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 1557, col: 21, offset: 58526},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1557, col: 21, offset: 58526},
										expr: &ruleRefExpr{
											pos:  position{line: 1557, col: 22, offset: 58527},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 1557, col: 30, offset: 58535},
										expr: &ruleRefExpr{
											pos:  position{line: 1557, col: 31, offset: 58536},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1557, col: 34, offset: 58539},
										expr: &litMatcher{
											pos:        position{line: 1557, col: 35, offset: 58540},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1557, col: 39, offset: 58544},
										expr: &litMatcher{
											pos:        position{line: 1557, col: 40, offset: 58545},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1557, col: 44, offset: 58549},
										expr: &litMatcher{
											pos:        position{line: 1557, col: 45, offset: 58550},
											val:        "<<",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1557, col: 50, offset: 58555},
										expr: &litMatcher{
											pos:        position{line: 1557, col: 51, offset: 58556},
											val:        ">>",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1557, col: 56, offset: 58561},
										expr: &litMatcher{
											pos:        position{line: 1557, col: 57, offset: 58562},
											val:        ",",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1557, col: 62, offset: 58567,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 1561, col: 1, offset: 58608},
			expr: &actionExpr{
				pos: position{line: 1561, col: 10, offset: 58617},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 1561, col: 10, offset: 58617},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 1565, col: 1, offset: 58659},
			expr: &actionExpr{
				pos: position{line: 1565, col: 11, offset: 58669},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 1565, col: 11, offset: 58669},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1565, col: 11, offset: 58669},
							expr: &litMatcher{
								pos:        position{line: 1565, col: 11, offset: 58669},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1565, col: 16, offset: 58674},
							expr: &ruleRefExpr{
								pos:  position{line: 1565, col: 16, offset: 58674},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "WS",
			pos:  position{line: 1569, col: 1, offset: 58726},
			expr: &choiceExpr{
				pos: position{line: 1569, col: 7, offset: 58732},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1569, col: 7, offset: 58732},
						val:        " ",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1569, col: 13, offset: 58738},
						run: (*parser).callonWS3,
						expr: &litMatcher{
							pos:        position{line: 1569, col: 13, offset: 58738},
							val:        "\t",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NEWLINE",
			pos:  position{line: 1573, col: 1, offset: 58779},
			expr: &choiceExpr{
				pos: position{line: 1573, col: 12, offset: 58790},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1573, col: 12, offset: 58790},
						val:        "\r\n",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1573, col: 21, offset: 58799},
						val:        "\r",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1573, col: 28, offset: 58806},
						val:        "\n",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1575, col: 1, offset: 58812},
			expr: &notExpr{
				pos: position{line: 1575, col: 8, offset: 58819},
				expr: &anyMatcher{
					line: 1575, col: 9, offset: 58820,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1577, col: 1, offset: 58823},
			expr: &choiceExpr{
				pos: position{line: 1577, col: 8, offset: 58830},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1577, col: 8, offset: 58830},
						name: "NEWLINE",
					},
					&ruleRefExpr{
						pos:  position{line: 1577, col: 18, offset: 58840},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOLS",
			pos:  position{line: 1579, col: 1, offset: 58845},
			expr: &seqExpr{
				pos: position{line: 1579, col: 9, offset: 58853},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1579, col: 9, offset: 58853},
						expr: &ruleRefExpr{
							pos:  position{line: 1579, col: 9, offset: 58853},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1579, col: 13, offset: 58857},
						name: "EOL",
					},
				},
			},
		},
	},
}

func (c *current) onAsciidocDocument1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonAsciidocDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onAsciidocDocumentWithinDelimitedBlock1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonAsciidocDocumentWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocumentWithinDelimitedBlock1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onTextDocument1(blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonTextDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocument1(stack["blocks"])
}

func (c *current) onAsciidocDocumentBlocks1(header, others interface{}) (interface{}, error) {
	if header != nil && others != nil {
		return append([]interface{}{header}, others.([]interface{})...), nil
	} else if others != nil {
		return others.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonAsciidocDocumentBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocumentBlocks1(stack["header"], stack["others"])
}

func (c *current) onDocumentBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock1(stack["block"])
}

func (c *current) onDocumentBlockWithinDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlockWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlockWithinDelimitedBlock1(stack["block"])
}

func (c *current) onTextDocumentBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonTextDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocumentBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentHeader(title.(types.InlineElements), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber18() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber18()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onDocumentAttributeDeclaration9(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonDocumentAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclaration9(stack["value"])
}

func (c *current) onDocumentAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	return types.NewDocumentAttributeDeclaration(name.(string), value)
}

func (p *parser) callonDocumentAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onDocumentAttributeName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeName1()
}

func (c *current) onDocumentAttributeValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeValue1()
}

func (c *current) onDocumentAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.(string))
}

func (p *parser) callonDocumentAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeReset2(stack["name"])
}

func (c *current) onDocumentAttributeReset9(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.(string))
}

func (p *parser) callonDocumentAttributeReset9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeReset9(stack["name"])
}

func (c *current) onDocumentAttributeSubstitution1(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeSubstitution(name.(string))
}

func (p *parser) callonDocumentAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeSubstitution1(stack["name"])
}

func (c *current) onElementAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs.([]interface{})), nil
}

func (p *parser) callonElementAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {
	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID2(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID2(stack["id"])
}

func (c *current) onElementID9(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID9(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementTitle5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle5()
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {
	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementRole5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementRole5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole5()
}

func (c *current) onElementRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role.(string))
}

func (p *parser) callonElementRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole1(stack["role"])
}

func (c *current) onLiteralAttribute1() (interface{}, error) {
	return types.NewLiteralAttribute()
}

func (p *parser) callonLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {
	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes8() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSourceAttributes8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes8()
}

func (c *current) onSourceAttributes1(language interface{}) (interface{}, error) {
	return types.NewSourceAttributes(language)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["language"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttribute2(key, value interface{}) (interface{}, error) {
	// value is (optionally) set
	return types.NewGenericAttribute(key.(string), value)

}

func (p *parser) callonGenericAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttribute2(stack["key"], stack["value"])
}

func (c *current) onGenericAttribute14(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.(string), nil)

}

func (p *parser) callonGenericAttribute14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttribute14(stack["key"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {
	// attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onHorizontalLayout1() (interface{}, error) {
	return types.ElementAttributes{"layout": "horizontal"}, nil
}

func (p *parser) callonHorizontalLayout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHorizontalLayout1()
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onInlineAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attrs"])
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.(types.InlineElements), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), attrs.(types.ElementAttributes), string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), attrs.(types.ElementAttributes), string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.ElementAttributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedLineRanges10(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleQuotedLineRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges10(stack["other"])
}

func (c *current) onMultipleQuotedLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onMultiLineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onSingleLineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onTagRangesAttribute1(tags interface{}) (interface{}, error) {
	//TODO: check if 'tags'/'tag' is allowed for both single and multiple values
	return types.NewTagRangesAttribute(tags.([]interface{}))
}

func (p *parser) callonTagRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttribute1(stack["tags"])
}

func (c *current) onTagRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonTagRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {
	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements, linebreak interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(append(elements.([]interface{}), linebreak))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"], stack["linebreak"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(blanklines, element interface{}) (interface{}, error) {
	return types.NewContinuedListItemElement(-len(blanklines.([]interface{})), element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["blanklines"], stack["element"])
}

func (c *current) onOrderedListItem1(attributes, prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attributes)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attributes"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attributes, prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attributes)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attributes"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {
	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attributes, term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListItem(len(separator.(string))-1, term.(string), description, attributes)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attributes"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onLabeledListItemTerm1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1()
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil

}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil

}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil

}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil

}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onParagraph13(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph13(stack["attributes"], stack["lines"])
}

func (c *current) onSimpleParagraph6(attributes interface{}) (bool, error) {
	// skip if the '[literal]' attribute was set on this paragraph
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, found := attrs[types.AttrKind]
		return !found || kind != types.Literal, nil
	}
	return true, nil

}

func (p *parser) callonSimpleParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph6(stack["attributes"])
}

func (c *current) onSimpleParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {
	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphLine1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonFirstParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphLine1(stack["elements"], stack["linebreak"])
}

func (c *current) onOtherParagraphLine1(elements interface{}) (interface{}, error) {
	return elements, nil
}

func (p *parser) callonOtherParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherParagraphLine1(stack["elements"])
}

func (c *current) onVerseParagraph7(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph7(stack["attributes"])
}

func (c *current) onVerseParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonVerseParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onVerseParagraph19(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph19(stack["attributes"])
}

func (c *current) onVerseParagraph14(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonVerseParagraph14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph14(stack["attributes"], stack["lines"])
}

func (c *current) onInlineElements9(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements9(stack["comment"])
}

func (c *current) onInlineElements12(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))

}

func (p *parser) callonInlineElements12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements12(stack["elements"], stack["linebreak"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onInlineElementsWithoutSubtitution1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonInlineElementsWithoutSubtitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementsWithoutSubtitution1(stack["elements"], stack["linebreak"])
}

func (c *current) onInlineElementWithoutSubtitution1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElementWithoutSubtitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementWithoutSubtitution1(stack["element"])
}

func (c *current) onVerbatimBlock1(elements interface{}) (interface{}, error) {
	return elements, nil
}

func (p *parser) callonVerbatimBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimBlock1(stack["elements"])
}

func (c *current) onVerbatimParagraph8(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonVerbatimParagraph8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraph8(stack["line"])
}

func (c *current) onVerbatimParagraph1(attributes, lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonVerbatimParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraph1(stack["attributes"], stack["lines"])
}

func (c *current) onVerbatimParagraphLine1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonVerbatimParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraphLine1(stack["elements"], stack["linebreak"])
}

func (c *current) onVerbatimParagraphLineElement1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonVerbatimParagraphLineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraphLineElement1()
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Bold, content.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["content"])
}

func (c *current) onDoubleQuoteBoldTextContent4(element interface{}) (interface{}, error) {
	// may start and end with spaces
	return element, nil
}

func (p *parser) callonDoubleQuoteBoldTextContent4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextContent4(stack["element"])
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteBoldText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteBoldText1()
}

func (c *current) onSingleQuoteBoldText2(content interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, content.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["content"])
}

func (c *current) onSingleQuoteBoldText12(content interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, append([]interface{}{types.StringElement{Content: "*"}}, content.([]interface{})...)) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText12(stack["content"])
}

func (c *current) onSingleQuoteBoldTextContent6(spaces, element interface{}) (interface{}, error) {
	return append(spaces.([]interface{}), element), nil
}

func (p *parser) callonSingleQuoteBoldTextContent6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextContent6(stack["spaces"], stack["element"])
}

func (c *current) onSingleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteBoldText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteBoldText1()
}

func (c *current) onEscapedBoldText2(backslashes, content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", content.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedBoldText10(backslashes, content interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, content.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedBoldText18(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", content.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["content"])
}

func (c *current) onDoubleQuoteItalicText1(content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, content.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["content"])
}

func (c *current) onDoubleQuoteItalicTextContent4(element interface{}) (interface{}, error) {
	// may start and end with spaces
	return element, nil
}

func (p *parser) callonDoubleQuoteItalicTextContent4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextContent4(stack["element"])
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteItalicText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteItalicText1()
}

func (c *current) onSingleQuoteItalicText2(content interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, content.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["content"])
}

func (c *current) onSingleQuoteItalicText12(content interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, append([]interface{}{types.StringElement{Content: "_"}}, content.([]interface{})...)) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText12(stack["content"])
}

func (c *current) onSingleQuoteItalicTextContent6(spaces, element interface{}) (interface{}, error) {
	return append(spaces.([]interface{}), element), nil
}

func (p *parser) callonSingleQuoteItalicTextContent6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextContent6(stack["spaces"], stack["element"])
}

func (c *current) onSingleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteItalicText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteItalicText1()
}

func (c *current) onEscapedItalicText2(backslashes, content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", content.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedItalicText10(backslashes, content interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, content.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedItalicText18(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", content.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["content"])
}

func (c *current) onDoubleQuoteMonospaceText1(content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, content.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["content"])
}

func (c *current) onDoubleQuoteMonospaceTextContent4(element interface{}) (interface{}, error) {
	// may start and end with spaces
	return element, nil
}

func (p *parser) callonDoubleQuoteMonospaceTextContent4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextContent4(stack["element"])
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteMonospaceText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteMonospaceText1()
}

func (c *current) onSingleQuoteMonospaceText2(content interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, content.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["content"])
}

func (c *current) onSingleQuoteMonospaceText12(content interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, append([]interface{}{types.StringElement{Content: "`"}}, content.([]interface{})...)) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText12(stack["content"])
}

func (c *current) onSingleQuoteMonospaceTextContent6(spaces, element interface{}) (interface{}, error) {
	return append(spaces.([]interface{}), element), nil
}

func (p *parser) callonSingleQuoteMonospaceTextContent6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextContent6(stack["spaces"], stack["element"])
}

func (c *current) onSingleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteMonospaceText1() (interface{}, error) {
	// break at multiline
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteMonospaceText1()
}

func (c *current) onEscapedMonospaceText2(backslashes, content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", content.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedMonospaceText10(backslashes, content interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, content.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedMonospaceText18(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", content.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["content"])
}

func (c *current) onSubscriptText1(content interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, content)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["content"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {

	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", content)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["content"])
}

func (c *current) onSuperscriptText1(content interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, content)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["content"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {

	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", content)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["content"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter4() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter4()
}

func (c *current) onCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewCrossReference(id.(string), label.(string))
}

func (p *parser) callonCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference2(stack["id"], stack["label"])
}

func (c *current) onCrossReference13(id interface{}) (interface{}, error) {
	return types.NewCrossReference(id.(string), nil)
}

func (p *parser) callonCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference13(stack["id"])
}

func (c *current) onCrossReferenceLabel1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonCrossReferenceLabel1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel1()
}

func (c *current) onLink1(link interface{}) (interface{}, error) {
	return link, nil
}

func (p *parser) callonLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink1(stack["link"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onTextOnlyLinkAttributes1(text interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(text, nil)
}

func (p *parser) callonTextOnlyLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextOnlyLinkAttributes1(stack["text"])
}

func (c *current) onLinkTextWithCommaAttribute18() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextWithCommaAttribute18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute18()
}

func (c *current) onLinkTextWithCommaAttribute2(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextWithCommaAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute2(stack["elements"])
}

func (c *current) onLinkTextWithCommaAttribute42() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextWithCommaAttribute42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute42()
}

func (c *current) onLinkTextWithCommaAttribute29(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextWithCommaAttribute29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute29(stack["elements"])
}

func (c *current) onTextAndMoreLinkAttributes1(text, otherattrs interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(text, otherattrs.([]interface{}))
}

func (p *parser) callonTextAndMoreLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextAndMoreLinkAttributes1(stack["text"], stack["otherattrs"])
}

func (c *current) onLinkTextAttribute18() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextAttribute18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute18()
}

func (c *current) onLinkTextAttribute2(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute2(stack["elements"])
}

func (c *current) onLinkTextAttribute44() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextAttribute44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute44()
}

func (c *current) onLinkTextAttribute29(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextAttribute29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute29(stack["elements"])
}

func (c *current) onInlineLinks1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonInlineLinks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineLinks1(stack["elements"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewImageBlock(path.(types.Location), inlineAttributes.(types.ElementAttributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onImageAttributes1(alt, width, height, otherattrs interface{}) (interface{}, error) {
	return types.NewImageAttributes(alt, width, height, otherattrs.([]interface{}))
}

func (p *parser) callonImageAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttributes1(stack["alt"], stack["width"], stack["height"], stack["otherattrs"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.(types.InlineElements))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content.(types.InlineElements))
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onInlineFootnote17(ref interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), types.InlineElements{}) // foot note referring to another note
}

func (p *parser) callonInlineFootnote17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote17(stack["ref"])
}

func (c *current) onFootnoteRef1() (interface{}, error) {
	// footnote ID not may span multiple lines
	return string(c.text), nil
}

func (p *parser) callonFootnoteRef1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteRef1()
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonFencedBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockParagraph1(stack["lines"])
}

func (c *current) onFencedBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonFencedBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockParagraphLine1(stack["line"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Listing, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), nil) // no attributes supported
}

func (p *parser) callonListingBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraph1(stack["lines"])
}

func (c *current) onListingBlockParagraphLine6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonListingBlockParagraphLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraphLine6()
}

func (c *current) onListingBlockParagraphLine1(line interface{}) (interface{}, error) {
	// skip EOL in line content, and stop when quote block delimiter is encountered
	return types.NewInlineElements(line)
}

func (p *parser) callonListingBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraphLine1(stack["line"])
}

func (c *current) onExampleBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Example, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["content"])
}

func (c *current) onExampleBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonExampleBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockParagraph1(stack["lines"])
}

func (c *current) onExampleBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonExampleBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockParagraphLine1(stack["line"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Quote, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuoteBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockElement1(stack["element"])
}

func (c *current) onQuoteBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonQuoteBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlock5(attributes interface{}) (bool, error) {

	kind := attributes.(types.ElementAttributes).GetAsString("kind") // once we got the attributes, check that `[verse]`  was set
	return kind == "verse", nil

}

func (p *parser) callonVerseBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock5(stack["attributes"])
}

func (c *current) onVerseBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Verse, content.([]interface{}), types.None, attributes)

}

func (p *parser) callonVerseBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock1(stack["attributes"], stack["content"])
}

func (c *current) onVerseFileInclude1(include interface{}) (interface{}, error) {
	return include, nil
}

func (p *parser) callonVerseFileInclude1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseFileInclude1(stack["include"])
}

func (c *current) onVerseBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonVerseBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlockParagraphLine8(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonVerseBlockParagraphLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine8(stack["elements"])
}

func (c *current) onVerseBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonVerseBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine1(stack["line"])
}

func (c *current) onVerseBlockParagraphLineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonVerseBlockParagraphLineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLineElement1(stack["element"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onNonSidebarBlock1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonNonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSidebarBlock1(stack["content"])
}

func (c *current) onSidebarBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonSidebarBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockParagraph1(stack["lines"])
}

func (c *current) onSidebarBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonSidebarBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockParagraphLine1(stack["line"])
}

func (c *current) onTable1(attributes, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attributes)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attributes"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}), types.Verbatim, nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockLine1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonCommentBlockLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockLine1()
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines11()
}

func (c *current) onParagraphWithHeadingSpacesLines4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines4()
}

func (c *current) onParagraphWithHeadingSpacesLines24() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines24()
}

func (c *current) onParagraphWithHeadingSpacesLines19(otherLine interface{}) (interface{}, error) {
	return otherLine, nil // do not include the trailing 'EOL'

}

func (p *parser) callonParagraphWithHeadingSpacesLines19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines19(stack["otherLine"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Literal, nil
	}
	return false, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onParagraphWithLiteralAttributeLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralAttributeLine4() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine4()
}

func (c *current) onParagraphWithLiteralAttributeLine1(line interface{}) (interface{}, error) {
	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralAttributeLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine1(stack["line"])
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onSimpleWord1() (interface{}, error) {
	// very straightforward content: alphanums followed by spaces but not the "+" signs because it needs a heading space to become a LineBreak element
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSimpleWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleWord1()
}

func (c *current) onOtherWord6() (interface{}, error) {
	// TODO: remove check on parenthesis and dot?
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherWord6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherWord6()
}

func (c *current) onOtherWord1() (interface{}, error) {
	// word cannot contain parenthesis. Dots and ellipsis are treated as independent words (but will be combined afterwards)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherWord1()
}

func (c *current) onFileLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["elements"])
}

func (c *current) onLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["elements"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onWS3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonWS3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWS3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := string(strconv.AppendQuote([]byte{}, lit.val)) + ignoreCase // wrap 'lit.val' with double quotes
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
