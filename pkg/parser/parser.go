// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "AsciidocDocument",
			pos:  position{line: 17, col: 1, offset: 319},
			expr: &actionExpr{
				pos: position{line: 17, col: 21, offset: 339},
				run: (*parser).callonAsciidocDocument1,
				expr: &seqExpr{
					pos: position{line: 17, col: 21, offset: 339},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 21, offset: 339},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 34, offset: 352},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 34, offset: 352},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 48, offset: 366},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 56, offset: 374},
								name: "AsciidocDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 80, offset: 398},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "VerbatimDocument",
			pos:  position{line: 21, col: 1, offset: 478},
			expr: &actionExpr{
				pos: position{line: 21, col: 21, offset: 498},
				run: (*parser).callonVerbatimDocument1,
				expr: &seqExpr{
					pos: position{line: 21, col: 21, offset: 498},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 21, col: 21, offset: 498},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 21, col: 29, offset: 506},
								name: "VerbatimFileContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 50, offset: 527},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "TextDocument",
			pos:  position{line: 26, col: 1, offset: 627},
			expr: &actionExpr{
				pos: position{line: 26, col: 17, offset: 643},
				run: (*parser).callonTextDocument1,
				expr: &seqExpr{
					pos: position{line: 26, col: 17, offset: 643},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 26, col: 17, offset: 643},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 26, col: 25, offset: 651},
								name: "TextDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 26, col: 45, offset: 671},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocks",
			pos:  position{line: 33, col: 1, offset: 854},
			expr: &actionExpr{
				pos: position{line: 33, col: 27, offset: 880},
				run: (*parser).callonAsciidocDocumentBlocks1,
				expr: &seqExpr{
					pos: position{line: 33, col: 27, offset: 880},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 33, col: 27, offset: 880},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 33, col: 35, offset: 888},
								expr: &ruleRefExpr{
									pos:  position{line: 33, col: 35, offset: 888},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 33, col: 52, offset: 905},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 33, col: 60, offset: 913},
								expr: &ruleRefExpr{
									pos:  position{line: 33, col: 60, offset: 913},
									name: "DocumentBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentBlock",
			pos:  position{line: 42, col: 1, offset: 1162},
			expr: &choiceExpr{
				pos: position{line: 43, col: 9, offset: 1188},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 43, col: 9, offset: 1188},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 44, col: 11, offset: 1253},
						name: "SimpleParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 45, col: 11, offset: 1279},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 46, col: 11, offset: 1331},
						name: "Section",
					},
					&ruleRefExpr{
						pos:  position{line: 47, col: 11, offset: 1349},
						name: "DelimitedBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 48, col: 11, offset: 1374},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 49, col: 11, offset: 1398},
						name: "VerseParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 50, col: 11, offset: 1452},
						name: "ImageBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 51, col: 11, offset: 1474},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 52, col: 11, offset: 1501},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 53, col: 11, offset: 1530},
						name: "ContinuedListItemElement",
					},
					&ruleRefExpr{
						pos:  position{line: 54, col: 11, offset: 1565},
						name: "LiteralBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 55, col: 11, offset: 1589},
						name: "DocumentAttributeDeclaration",
					},
					&ruleRefExpr{
						pos:  position{line: 56, col: 11, offset: 1629},
						name: "DocumentAttributeReset",
					},
					&ruleRefExpr{
						pos:  position{line: 57, col: 11, offset: 1663},
						name: "TableOfContentsPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 58, col: 11, offset: 1700},
						name: "UserMacroBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 59, col: 11, offset: 1725},
						name: "Paragraph",
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocksWithinDelimitedBlock",
			pos:  position{line: 61, col: 1, offset: 1736},
			expr: &labeledExpr{
				pos:   position{line: 61, col: 47, offset: 1782},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 61, col: 54, offset: 1789},
					expr: &ruleRefExpr{
						pos:  position{line: 61, col: 55, offset: 1790},
						name: "DocumentBlockWithinDelimitedBlock",
					},
				},
			},
		},
		{
			name: "DocumentBlockWithinDelimitedBlock",
			pos:  position{line: 63, col: 1, offset: 1827},
			expr: &actionExpr{
				pos: position{line: 63, col: 38, offset: 1864},
				run: (*parser).callonDocumentBlockWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 63, col: 38, offset: 1864},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 63, col: 38, offset: 1864},
							expr: &ruleRefExpr{
								pos:  position{line: 63, col: 39, offset: 1865},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 64, col: 5, offset: 1874},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 64, col: 12, offset: 1881},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 64, col: 12, offset: 1881},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 65, col: 11, offset: 1906},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 66, col: 11, offset: 1958},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 67, col: 11, offset: 1982},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 68, col: 11, offset: 2007},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 69, col: 11, offset: 2029},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 70, col: 11, offset: 2056},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 71, col: 11, offset: 2085},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 72, col: 11, offset: 2112},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 73, col: 11, offset: 2147},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 74, col: 11, offset: 2171},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 75, col: 11, offset: 2211},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 76, col: 11, offset: 2245},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 77, col: 11, offset: 2282},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 78, col: 11, offset: 2307},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextDocumentBlocks",
			pos:  position{line: 82, col: 1, offset: 2345},
			expr: &labeledExpr{
				pos:   position{line: 82, col: 23, offset: 2367},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 82, col: 30, offset: 2374},
					expr: &ruleRefExpr{
						pos:  position{line: 82, col: 31, offset: 2375},
						name: "TextDocumentBlock",
					},
				},
			},
		},
		{
			name: "TextDocumentBlock",
			pos:  position{line: 84, col: 1, offset: 2396},
			expr: &actionExpr{
				pos: position{line: 84, col: 22, offset: 2417},
				run: (*parser).callonTextDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 84, col: 22, offset: 2417},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 84, col: 22, offset: 2417},
							expr: &ruleRefExpr{
								pos:  position{line: 84, col: 23, offset: 2418},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 85, col: 5, offset: 2427},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 85, col: 12, offset: 2434},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 85, col: 12, offset: 2434},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 85, col: 24, offset: 2446},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 92, col: 1, offset: 2592},
			expr: &ruleRefExpr{
				pos:  position{line: 92, col: 16, offset: 2607},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 94, col: 1, offset: 2625},
			expr: &actionExpr{
				pos: position{line: 94, col: 20, offset: 2644},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 94, col: 20, offset: 2644},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 94, col: 20, offset: 2644},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 94, col: 41, offset: 2665},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 94, col: 49, offset: 2673},
								expr: &ruleRefExpr{
									pos:  position{line: 94, col: 50, offset: 2674},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 94, col: 75, offset: 2699},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 98, col: 1, offset: 2779},
			expr: &seqExpr{
				pos: position{line: 98, col: 26, offset: 2804},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 98, col: 26, offset: 2804},
						val:        "---",
						ignoreCase: false,
						want:       "\"---\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 98, col: 32, offset: 2810},
						expr: &ruleRefExpr{
							pos:  position{line: 98, col: 32, offset: 2810},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 98, col: 39, offset: 2817},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 100, col: 1, offset: 2822},
			expr: &actionExpr{
				pos: position{line: 100, col: 27, offset: 2848},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 100, col: 27, offset: 2848},
					expr: &oneOrMoreExpr{
						pos: position{line: 100, col: 28, offset: 2849},
						expr: &seqExpr{
							pos: position{line: 100, col: 29, offset: 2850},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 100, col: 29, offset: 2850},
									expr: &ruleRefExpr{
										pos:  position{line: 100, col: 30, offset: 2851},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 100, col: 51, offset: 2872,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 107, col: 1, offset: 3038},
			expr: &actionExpr{
				pos: position{line: 107, col: 19, offset: 3056},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 107, col: 19, offset: 3056},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 107, col: 19, offset: 3056},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 107, col: 23, offset: 3060},
							expr: &ruleRefExpr{
								pos:  position{line: 107, col: 23, offset: 3060},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 107, col: 30, offset: 3067},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 107, col: 37, offset: 3074},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 107, col: 52, offset: 3089},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 107, col: 56, offset: 3093},
								expr: &ruleRefExpr{
									pos:  position{line: 107, col: 56, offset: 3093},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 107, col: 74, offset: 3111},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 108, col: 9, offset: 3123},
							expr: &choiceExpr{
								pos: position{line: 108, col: 10, offset: 3124},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 108, col: 10, offset: 3124},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 108, col: 30, offset: 3144},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 109, col: 9, offset: 3167},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 109, col: 18, offset: 3176},
								expr: &ruleRefExpr{
									pos:  position{line: 109, col: 18, offset: 3176},
									name: "DocumentAuthors",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 110, col: 9, offset: 3203},
							expr: &choiceExpr{
								pos: position{line: 110, col: 10, offset: 3204},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 110, col: 10, offset: 3204},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 110, col: 30, offset: 3224},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 111, col: 9, offset: 3247},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 111, col: 19, offset: 3257},
								expr: &ruleRefExpr{
									pos:  position{line: 111, col: 19, offset: 3257},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 115, col: 1, offset: 3358},
			expr: &choiceExpr{
				pos: position{line: 115, col: 20, offset: 3377},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 115, col: 20, offset: 3377},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 115, col: 48, offset: 3405},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 117, col: 1, offset: 3435},
			expr: &actionExpr{
				pos: position{line: 117, col: 30, offset: 3464},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 117, col: 30, offset: 3464},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 117, col: 30, offset: 3464},
							expr: &ruleRefExpr{
								pos:  position{line: 117, col: 30, offset: 3464},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 117, col: 37, offset: 3471},
							expr: &litMatcher{
								pos:        position{line: 117, col: 38, offset: 3472},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 117, col: 42, offset: 3476},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 117, col: 51, offset: 3485},
								expr: &ruleRefExpr{
									pos:  position{line: 117, col: 51, offset: 3485},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 117, col: 68, offset: 3502},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 121, col: 1, offset: 3572},
			expr: &actionExpr{
				pos: position{line: 121, col: 33, offset: 3604},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 121, col: 33, offset: 3604},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 121, col: 33, offset: 3604},
							expr: &ruleRefExpr{
								pos:  position{line: 121, col: 33, offset: 3604},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 121, col: 40, offset: 3611},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 121, col: 51, offset: 3622},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 121, col: 59, offset: 3630},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 121, col: 75, offset: 3646},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 125, col: 1, offset: 3725},
			expr: &actionExpr{
				pos: position{line: 125, col: 19, offset: 3743},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 125, col: 19, offset: 3743},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 125, col: 19, offset: 3743},
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 19, offset: 3743},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 125, col: 26, offset: 3750},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 36, offset: 3760},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 125, col: 56, offset: 3780},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 125, col: 62, offset: 3786},
								expr: &ruleRefExpr{
									pos:  position{line: 125, col: 63, offset: 3787},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 125, col: 85, offset: 3809},
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 85, offset: 3809},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 125, col: 92, offset: 3816},
							expr: &litMatcher{
								pos:        position{line: 125, col: 92, offset: 3816},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 125, col: 97, offset: 3821},
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 97, offset: 3821},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 130, col: 1, offset: 3966},
			expr: &actionExpr{
				pos: position{line: 130, col: 23, offset: 3988},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 130, col: 23, offset: 3988},
					expr: &charClassMatcher{
						pos:        position{line: 130, col: 23, offset: 3988},
						val:        "[^<;\\n]",
						chars:      []rune{'<', ';', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 134, col: 1, offset: 4033},
			expr: &actionExpr{
				pos: position{line: 134, col: 24, offset: 4056},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 134, col: 24, offset: 4056},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 134, col: 24, offset: 4056},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 134, col: 28, offset: 4060},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 134, col: 35, offset: 4067},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 134, col: 36, offset: 4068},
									expr: &charClassMatcher{
										pos:        position{line: 134, col: 36, offset: 4068},
										val:        "[^>\\n]",
										chars:      []rune{'>', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 136, col: 4, offset: 4113},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 142, col: 1, offset: 4274},
			expr: &actionExpr{
				pos: position{line: 142, col: 21, offset: 4294},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 142, col: 21, offset: 4294},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 142, col: 21, offset: 4294},
							expr: &ruleRefExpr{
								pos:  position{line: 142, col: 21, offset: 4294},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 142, col: 28, offset: 4301},
							expr: &litMatcher{
								pos:        position{line: 142, col: 29, offset: 4302},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 142, col: 33, offset: 4306},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 143, col: 9, offset: 4325},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 143, col: 10, offset: 4326},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 143, col: 10, offset: 4326},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 143, col: 10, offset: 4326},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 143, col: 21, offset: 4337},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 143, col: 45, offset: 4361},
													expr: &litMatcher{
														pos:        position{line: 143, col: 45, offset: 4361},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 143, col: 50, offset: 4366},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 143, col: 58, offset: 4374},
														expr: &ruleRefExpr{
															pos:  position{line: 143, col: 59, offset: 4375},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 143, col: 82, offset: 4398},
													expr: &litMatcher{
														pos:        position{line: 143, col: 82, offset: 4398},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 143, col: 87, offset: 4403},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 143, col: 97, offset: 4413},
														expr: &ruleRefExpr{
															pos:  position{line: 143, col: 98, offset: 4414},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 145, col: 15, offset: 4531},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 145, col: 15, offset: 4531},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 145, col: 15, offset: 4531},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 145, col: 24, offset: 4540},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 145, col: 46, offset: 4562},
													expr: &litMatcher{
														pos:        position{line: 145, col: 46, offset: 4562},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 145, col: 51, offset: 4567},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 145, col: 61, offset: 4577},
														expr: &ruleRefExpr{
															pos:  position{line: 145, col: 62, offset: 4578},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 147, col: 13, offset: 4687},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 152, col: 1, offset: 4817},
			expr: &choiceExpr{
				pos: position{line: 152, col: 27, offset: 4843},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 152, col: 27, offset: 4843},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 152, col: 27, offset: 4843},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 152, col: 27, offset: 4843},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 152, col: 32, offset: 4848},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 152, col: 39, offset: 4855},
									expr: &charClassMatcher{
										pos:        position{line: 152, col: 39, offset: 4855},
										val:        "[^:,\\n]",
										chars:      []rune{':', ',', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 154, col: 5, offset: 4901},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 154, col: 5, offset: 4901},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 154, col: 5, offset: 4901},
									expr: &litMatcher{
										pos:        position{line: 154, col: 5, offset: 4901},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 154, col: 11, offset: 4907},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 154, col: 18, offset: 4914},
									expr: &charClassMatcher{
										pos:        position{line: 154, col: 18, offset: 4914},
										val:        "[^:,\\n]",
										chars:      []rune{':', ',', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 154, col: 27, offset: 4923},
									expr: &ruleRefExpr{
										pos:  position{line: 154, col: 27, offset: 4923},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 154, col: 34, offset: 4930},
									expr: &litMatcher{
										pos:        position{line: 154, col: 35, offset: 4931},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 158, col: 1, offset: 4971},
			expr: &actionExpr{
				pos: position{line: 158, col: 25, offset: 4995},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 158, col: 25, offset: 4995},
					expr: &charClassMatcher{
						pos:        position{line: 158, col: 25, offset: 4995},
						val:        "[^:\\n]",
						chars:      []rune{':', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 162, col: 1, offset: 5039},
			expr: &actionExpr{
				pos: position{line: 162, col: 27, offset: 5065},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 162, col: 27, offset: 5065},
					expr: &charClassMatcher{
						pos:        position{line: 162, col: 27, offset: 5065},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAttributeDeclaration",
			pos:  position{line: 169, col: 1, offset: 5225},
			expr: &actionExpr{
				pos: position{line: 169, col: 33, offset: 5257},
				run: (*parser).callonDocumentAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 169, col: 33, offset: 5257},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 169, col: 33, offset: 5257},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 169, col: 37, offset: 5261},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 169, col: 43, offset: 5267},
								name: "DocumentAttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 169, col: 66, offset: 5290},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 170, col: 9, offset: 5303},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 170, col: 15, offset: 5309},
								expr: &actionExpr{
									pos: position{line: 170, col: 16, offset: 5310},
									run: (*parser).callonDocumentAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 170, col: 17, offset: 5311},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 170, col: 17, offset: 5311},
												expr: &ruleRefExpr{
													pos:  position{line: 170, col: 17, offset: 5311},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 170, col: 24, offset: 5318},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 170, col: 31, offset: 5325},
													name: "DocumentAttributeValue",
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 172, col: 13, offset: 5396},
							expr: &ruleRefExpr{
								pos:  position{line: 172, col: 13, offset: 5396},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 172, col: 20, offset: 5403},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeName",
			pos:  position{line: 179, col: 1, offset: 5651},
			expr: &actionExpr{
				pos: position{line: 179, col: 26, offset: 5676},
				run: (*parser).callonDocumentAttributeName1,
				expr: &seqExpr{
					pos: position{line: 179, col: 26, offset: 5676},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 179, col: 26, offset: 5676},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 179, col: 36, offset: 5686},
							expr: &charClassMatcher{
								pos:        position{line: 179, col: 37, offset: 5687},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeValue",
			pos:  position{line: 183, col: 1, offset: 5735},
			expr: &actionExpr{
				pos: position{line: 183, col: 27, offset: 5761},
				run: (*parser).callonDocumentAttributeValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 183, col: 27, offset: 5761},
					expr: &charClassMatcher{
						pos:        position{line: 183, col: 27, offset: 5761},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAttributeReset",
			pos:  position{line: 187, col: 1, offset: 5806},
			expr: &choiceExpr{
				pos: position{line: 187, col: 27, offset: 5832},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 187, col: 27, offset: 5832},
						run: (*parser).callonDocumentAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 187, col: 27, offset: 5832},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 187, col: 27, offset: 5832},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 187, col: 32, offset: 5837},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 187, col: 38, offset: 5843},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 187, col: 61, offset: 5866},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 187, col: 65, offset: 5870},
									expr: &ruleRefExpr{
										pos:  position{line: 187, col: 65, offset: 5870},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 187, col: 72, offset: 5877},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 189, col: 5, offset: 5945},
						run: (*parser).callonDocumentAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 189, col: 5, offset: 5945},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 189, col: 5, offset: 5945},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 189, col: 9, offset: 5949},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 189, col: 15, offset: 5955},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 189, col: 38, offset: 5978},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 189, col: 43, offset: 5983},
									expr: &ruleRefExpr{
										pos:  position{line: 189, col: 43, offset: 5983},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 189, col: 50, offset: 5990},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeSubstitution",
			pos:  position{line: 193, col: 1, offset: 6057},
			expr: &actionExpr{
				pos: position{line: 193, col: 34, offset: 6090},
				run: (*parser).callonDocumentAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 193, col: 34, offset: 6090},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 193, col: 34, offset: 6090},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 193, col: 38, offset: 6094},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 193, col: 44, offset: 6100},
								name: "DocumentAttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 193, col: 67, offset: 6123},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "ElementAttributes",
			pos:  position{line: 200, col: 1, offset: 6311},
			expr: &actionExpr{
				pos: position{line: 200, col: 22, offset: 6332},
				run: (*parser).callonElementAttributes1,
				expr: &seqExpr{
					pos: position{line: 200, col: 22, offset: 6332},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 200, col: 22, offset: 6332},
							label: "attrs",
							expr: &oneOrMoreExpr{
								pos: position{line: 200, col: 28, offset: 6338},
								expr: &ruleRefExpr{
									pos:  position{line: 200, col: 29, offset: 6339},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 200, col: 48, offset: 6358},
							expr: &ruleRefExpr{
								pos:  position{line: 200, col: 48, offset: 6358},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 204, col: 1, offset: 6440},
			expr: &actionExpr{
				pos: position{line: 204, col: 21, offset: 6460},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 204, col: 21, offset: 6460},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 204, col: 21, offset: 6460},
							expr: &choiceExpr{
								pos: position{line: 204, col: 23, offset: 6462},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 204, col: 23, offset: 6462},
										val:        "[",
										ignoreCase: false,
										want:       "\"[\"",
									},
									&litMatcher{
										pos:        position{line: 204, col: 29, offset: 6468},
										val:        ".",
										ignoreCase: false,
										want:       "\".\"",
									},
									&litMatcher{
										pos:        position{line: 204, col: 35, offset: 6474},
										val:        "#",
										ignoreCase: false,
										want:       "\"#\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 205, col: 5, offset: 6550},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 205, col: 11, offset: 6556},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 205, col: 11, offset: 6556},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 206, col: 9, offset: 6577},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 207, col: 9, offset: 6601},
										name: "ElementRole",
									},
									&ruleRefExpr{
										pos:  position{line: 208, col: 9, offset: 6624},
										name: "LiteralAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 209, col: 9, offset: 6652},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 210, col: 9, offset: 6680},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 211, col: 9, offset: 6707},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 212, col: 9, offset: 6734},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 213, col: 9, offset: 6771},
										name: "HorizontalLayout",
									},
									&ruleRefExpr{
										pos:  position{line: 214, col: 9, offset: 6799},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MasqueradeAttribute",
			pos:  position{line: 219, col: 1, offset: 6982},
			expr: &choiceExpr{
				pos: position{line: 219, col: 24, offset: 7005},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 219, col: 24, offset: 7005},
						name: "QuoteAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 219, col: 42, offset: 7023},
						name: "VerseAttributes",
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 221, col: 1, offset: 7040},
			expr: &choiceExpr{
				pos: position{line: 221, col: 14, offset: 7053},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 221, col: 14, offset: 7053},
						run: (*parser).callonElementID2,
						expr: &seqExpr{
							pos: position{line: 221, col: 14, offset: 7053},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 221, col: 14, offset: 7053},
									val:        "[[",
									ignoreCase: false,
									want:       "\"[[\"",
								},
								&labeledExpr{
									pos:   position{line: 221, col: 19, offset: 7058},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 221, col: 23, offset: 7062},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 221, col: 27, offset: 7066},
									val:        "]]",
									ignoreCase: false,
									want:       "\"]]\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 221, col: 32, offset: 7071},
									expr: &ruleRefExpr{
										pos:  position{line: 221, col: 32, offset: 7071},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 221, col: 39, offset: 7078},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 223, col: 5, offset: 7131},
						run: (*parser).callonElementID11,
						expr: &seqExpr{
							pos: position{line: 223, col: 5, offset: 7131},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 223, col: 5, offset: 7131},
									val:        "[#",
									ignoreCase: false,
									want:       "\"[#\"",
								},
								&labeledExpr{
									pos:   position{line: 223, col: 10, offset: 7136},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 223, col: 14, offset: 7140},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 223, col: 18, offset: 7144},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 223, col: 23, offset: 7149},
									expr: &ruleRefExpr{
										pos:  position{line: 223, col: 23, offset: 7149},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 223, col: 30, offset: 7156},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 227, col: 1, offset: 7208},
			expr: &actionExpr{
				pos: position{line: 227, col: 20, offset: 7227},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 227, col: 20, offset: 7227},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 227, col: 20, offset: 7227},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 227, col: 25, offset: 7232},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 227, col: 29, offset: 7236},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 227, col: 33, offset: 7240},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 227, col: 38, offset: 7245},
							expr: &ruleRefExpr{
								pos:  position{line: 227, col: 38, offset: 7245},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 233, col: 1, offset: 7522},
			expr: &actionExpr{
				pos: position{line: 233, col: 17, offset: 7538},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 233, col: 17, offset: 7538},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 233, col: 17, offset: 7538},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 233, col: 21, offset: 7542},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 233, col: 28, offset: 7549},
								name: "ElementTitleContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 233, col: 49, offset: 7570},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementTitleContent",
			pos:  position{line: 237, col: 1, offset: 7628},
			expr: &actionExpr{
				pos: position{line: 237, col: 24, offset: 7651},
				run: (*parser).callonElementTitleContent1,
				expr: &seqExpr{
					pos: position{line: 237, col: 24, offset: 7651},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 237, col: 24, offset: 7651},
							val:        "[\\pL0-9]",
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 237, col: 32, offset: 7659},
							expr: &charClassMatcher{
								pos:        position{line: 237, col: 32, offset: 7659},
								val:        "[^\\r\\n<>]",
								chars:      []rune{'\r', '\n', '<', '>'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "ElementRole",
			pos:  position{line: 243, col: 1, offset: 7886},
			expr: &actionExpr{
				pos: position{line: 243, col: 16, offset: 7901},
				run: (*parser).callonElementRole1,
				expr: &seqExpr{
					pos: position{line: 243, col: 16, offset: 7901},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 243, col: 16, offset: 7901},
							val:        "[.",
							ignoreCase: false,
							want:       "\"[.\"",
						},
						&labeledExpr{
							pos:   position{line: 243, col: 21, offset: 7906},
							label: "role",
							expr: &actionExpr{
								pos: position{line: 243, col: 27, offset: 7912},
								run: (*parser).callonElementRole5,
								expr: &seqExpr{
									pos: position{line: 243, col: 27, offset: 7912},
									exprs: []interface{}{
										&charClassMatcher{
											pos:        position{line: 243, col: 27, offset: 7912},
											val:        "[\\pL0-9]",
											ranges:     []rune{'0', '9'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
										&zeroOrMoreExpr{
											pos: position{line: 243, col: 36, offset: 7921},
											expr: &charClassMatcher{
												pos:        position{line: 243, col: 36, offset: 7921},
												val:        "[^\\]\\n]",
												chars:      []rune{']', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 245, col: 4, offset: 7966},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 245, col: 8, offset: 7970},
							expr: &ruleRefExpr{
								pos:  position{line: 245, col: 8, offset: 7970},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 245, col: 15, offset: 7977},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "LiteralAttribute",
			pos:  position{line: 249, col: 1, offset: 8033},
			expr: &actionExpr{
				pos: position{line: 249, col: 21, offset: 8053},
				run: (*parser).callonLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 249, col: 21, offset: 8053},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 249, col: 21, offset: 8053},
							val:        "[literal]",
							ignoreCase: false,
							want:       "\"[literal]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 249, col: 33, offset: 8065},
							expr: &ruleRefExpr{
								pos:  position{line: 249, col: 33, offset: 8065},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 249, col: 40, offset: 8072},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 254, col: 1, offset: 8204},
			expr: &actionExpr{
				pos: position{line: 254, col: 30, offset: 8233},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 254, col: 30, offset: 8233},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 254, col: 30, offset: 8233},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 254, col: 34, offset: 8237},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 254, col: 37, offset: 8240},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 254, col: 53, offset: 8256},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 254, col: 57, offset: 8260},
							expr: &ruleRefExpr{
								pos:  position{line: 254, col: 57, offset: 8260},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 254, col: 64, offset: 8267},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 259, col: 1, offset: 8422},
			expr: &actionExpr{
				pos: position{line: 259, col: 21, offset: 8442},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 259, col: 21, offset: 8442},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 259, col: 21, offset: 8442},
							val:        "[source",
							ignoreCase: false,
							want:       "\"[source\"",
						},
						&labeledExpr{
							pos:   position{line: 260, col: 5, offset: 8457},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 260, col: 14, offset: 8466},
								expr: &actionExpr{
									pos: position{line: 260, col: 15, offset: 8467},
									run: (*parser).callonSourceAttributes6,
									expr: &seqExpr{
										pos: position{line: 260, col: 15, offset: 8467},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 260, col: 15, offset: 8467},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 260, col: 19, offset: 8471},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 260, col: 24, offset: 8476},
													expr: &ruleRefExpr{
														pos:  position{line: 260, col: 25, offset: 8477},
														name: "StandaloneAttributeValue",
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 261, col: 5, offset: 8532},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 261, col: 12, offset: 8539},
								expr: &actionExpr{
									pos: position{line: 261, col: 13, offset: 8540},
									run: (*parser).callonSourceAttributes14,
									expr: &seqExpr{
										pos: position{line: 261, col: 13, offset: 8540},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 261, col: 13, offset: 8540},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 261, col: 17, offset: 8544},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 261, col: 22, offset: 8549},
													expr: &ruleRefExpr{
														pos:  position{line: 261, col: 23, offset: 8550},
														name: "GenericAttribute",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 262, col: 5, offset: 8597},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 262, col: 9, offset: 8601},
							expr: &ruleRefExpr{
								pos:  position{line: 262, col: 9, offset: 8601},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 262, col: 16, offset: 8608},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 267, col: 1, offset: 8759},
			expr: &actionExpr{
				pos: position{line: 267, col: 19, offset: 8777},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 267, col: 19, offset: 8777},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 267, col: 19, offset: 8777},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 267, col: 23, offset: 8781},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 267, col: 34, offset: 8792},
								expr: &ruleRefExpr{
									pos:  position{line: 267, col: 35, offset: 8793},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 267, col: 54, offset: 8812},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 267, col: 58, offset: 8816},
							expr: &ruleRefExpr{
								pos:  position{line: 267, col: 58, offset: 8816},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 267, col: 65, offset: 8823},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 271, col: 1, offset: 8895},
			expr: &choiceExpr{
				pos: position{line: 271, col: 21, offset: 8915},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 271, col: 21, offset: 8915},
						name: "GenericAttributeWithValue",
					},
					&ruleRefExpr{
						pos:  position{line: 271, col: 49, offset: 8943},
						name: "GenericAttributeWithoutValue",
					},
				},
			},
		},
		{
			name: "GenericAttributeWithValue",
			pos:  position{line: 273, col: 1, offset: 8973},
			expr: &actionExpr{
				pos: position{line: 273, col: 30, offset: 9002},
				run: (*parser).callonGenericAttributeWithValue1,
				expr: &seqExpr{
					pos: position{line: 273, col: 30, offset: 9002},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 273, col: 30, offset: 9002},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 273, col: 35, offset: 9007},
								name: "AttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 273, col: 49, offset: 9021},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 273, col: 53, offset: 9025},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 273, col: 59, offset: 9031},
								expr: &ruleRefExpr{
									pos:  position{line: 273, col: 60, offset: 9032},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 273, col: 77, offset: 9049},
							expr: &litMatcher{
								pos:        position{line: 273, col: 77, offset: 9049},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 273, col: 82, offset: 9054},
							expr: &ruleRefExpr{
								pos:  position{line: 273, col: 82, offset: 9054},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "GenericAttributeWithoutValue",
			pos:  position{line: 277, col: 1, offset: 9153},
			expr: &actionExpr{
				pos: position{line: 277, col: 33, offset: 9185},
				run: (*parser).callonGenericAttributeWithoutValue1,
				expr: &seqExpr{
					pos: position{line: 277, col: 33, offset: 9185},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 277, col: 33, offset: 9185},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 277, col: 38, offset: 9190},
								name: "AttributeKey",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 277, col: 52, offset: 9204},
							expr: &litMatcher{
								pos:        position{line: 277, col: 52, offset: 9204},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 277, col: 57, offset: 9209},
							expr: &ruleRefExpr{
								pos:  position{line: 277, col: 57, offset: 9209},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 281, col: 1, offset: 9297},
			expr: &actionExpr{
				pos: position{line: 281, col: 17, offset: 9313},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 281, col: 17, offset: 9313},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 281, col: 17, offset: 9313},
							expr: &litMatcher{
								pos:        position{line: 281, col: 18, offset: 9314},
								val:        "quote",
								ignoreCase: false,
								want:       "\"quote\"",
							},
						},
						&notExpr{
							pos: position{line: 281, col: 26, offset: 9322},
							expr: &litMatcher{
								pos:        position{line: 281, col: 27, offset: 9323},
								val:        "verse",
								ignoreCase: false,
								want:       "\"verse\"",
							},
						},
						&notExpr{
							pos: position{line: 281, col: 35, offset: 9331},
							expr: &litMatcher{
								pos:        position{line: 281, col: 36, offset: 9332},
								val:        "literal",
								ignoreCase: false,
								want:       "\"literal\"",
							},
						},
						&notExpr{
							pos: position{line: 281, col: 46, offset: 9342},
							expr: &oneOrMoreExpr{
								pos: position{line: 281, col: 48, offset: 9344},
								expr: &ruleRefExpr{
									pos:  position{line: 281, col: 48, offset: 9344},
									name: "Space",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 281, col: 56, offset: 9352},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 281, col: 61, offset: 9357},
								expr: &charClassMatcher{
									pos:        position{line: 281, col: 61, offset: 9357},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 281, col: 75, offset: 9371},
							expr: &ruleRefExpr{
								pos:  position{line: 281, col: 75, offset: 9371},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 285, col: 1, offset: 9414},
			expr: &actionExpr{
				pos: position{line: 285, col: 19, offset: 9432},
				run: (*parser).callonAttributeValue1,
				expr: &labeledExpr{
					pos:   position{line: 285, col: 19, offset: 9432},
					label: "value",
					expr: &oneOrMoreExpr{
						pos: position{line: 285, col: 26, offset: 9439},
						expr: &charClassMatcher{
							pos:        position{line: 285, col: 26, offset: 9439},
							val:        "[^\\r\\n=,\\]]",
							chars:      []rune{'\r', '\n', '=', ',', ']'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributeValue",
			pos:  position{line: 289, col: 1, offset: 9490},
			expr: &actionExpr{
				pos: position{line: 289, col: 29, offset: 9518},
				run: (*parser).callonStandaloneAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 289, col: 29, offset: 9518},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 289, col: 29, offset: 9518},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 289, col: 36, offset: 9525},
								expr: &charClassMatcher{
									pos:        position{line: 289, col: 36, offset: 9525},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&notExpr{
							pos: position{line: 289, col: 50, offset: 9539},
							expr: &litMatcher{
								pos:        position{line: 289, col: 51, offset: 9540},
								val:        "=",
								ignoreCase: false,
								want:       "\"=\"",
							},
						},
					},
				},
			},
		},
		{
			name: "HorizontalLayout",
			pos:  position{line: 293, col: 1, offset: 9706},
			expr: &actionExpr{
				pos: position{line: 293, col: 21, offset: 9726},
				run: (*parser).callonHorizontalLayout1,
				expr: &seqExpr{
					pos: position{line: 293, col: 21, offset: 9726},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 293, col: 21, offset: 9726},
							val:        "[horizontal]",
							ignoreCase: false,
							want:       "\"[horizontal]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 293, col: 36, offset: 9741},
							expr: &ruleRefExpr{
								pos:  position{line: 293, col: 36, offset: 9741},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 293, col: 43, offset: 9748},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 297, col: 1, offset: 9821},
			expr: &actionExpr{
				pos: position{line: 297, col: 20, offset: 9840},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 297, col: 20, offset: 9840},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 297, col: 20, offset: 9840},
							val:        "[quote",
							ignoreCase: false,
							want:       "\"[quote\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 297, col: 29, offset: 9849},
							expr: &ruleRefExpr{
								pos:  position{line: 297, col: 29, offset: 9849},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 297, col: 36, offset: 9856},
							expr: &litMatcher{
								pos:        position{line: 297, col: 36, offset: 9856},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 297, col: 41, offset: 9861},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 297, col: 48, offset: 9868},
								expr: &ruleRefExpr{
									pos:  position{line: 297, col: 49, offset: 9869},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 297, col: 66, offset: 9886},
							expr: &litMatcher{
								pos:        position{line: 297, col: 66, offset: 9886},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 297, col: 71, offset: 9891},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 297, col: 77, offset: 9897},
								expr: &ruleRefExpr{
									pos:  position{line: 297, col: 78, offset: 9898},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 297, col: 95, offset: 9915},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 297, col: 99, offset: 9919},
							expr: &ruleRefExpr{
								pos:  position{line: 297, col: 99, offset: 9919},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 297, col: 106, offset: 9926},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 301, col: 1, offset: 9995},
			expr: &actionExpr{
				pos: position{line: 301, col: 20, offset: 10014},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 301, col: 20, offset: 10014},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 301, col: 20, offset: 10014},
							val:        "[verse",
							ignoreCase: false,
							want:       "\"[verse\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 301, col: 29, offset: 10023},
							expr: &ruleRefExpr{
								pos:  position{line: 301, col: 29, offset: 10023},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 301, col: 36, offset: 10030},
							expr: &litMatcher{
								pos:        position{line: 301, col: 36, offset: 10030},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 301, col: 41, offset: 10035},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 301, col: 48, offset: 10042},
								expr: &ruleRefExpr{
									pos:  position{line: 301, col: 49, offset: 10043},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 301, col: 66, offset: 10060},
							expr: &litMatcher{
								pos:        position{line: 301, col: 66, offset: 10060},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 301, col: 71, offset: 10065},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 301, col: 77, offset: 10071},
								expr: &ruleRefExpr{
									pos:  position{line: 301, col: 78, offset: 10072},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 301, col: 95, offset: 10089},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 301, col: 99, offset: 10093},
							expr: &ruleRefExpr{
								pos:  position{line: 301, col: 99, offset: 10093},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 301, col: 106, offset: 10100},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 305, col: 1, offset: 10187},
			expr: &actionExpr{
				pos: position{line: 305, col: 19, offset: 10205},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 305, col: 20, offset: 10206},
					expr: &charClassMatcher{
						pos:        position{line: 305, col: 20, offset: 10206},
						val:        "[^\\r\\n,\\]]",
						chars:      []rune{'\r', '\n', ',', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 309, col: 1, offset: 10255},
			expr: &actionExpr{
				pos: position{line: 309, col: 21, offset: 10275},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 309, col: 21, offset: 10275},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 309, col: 21, offset: 10275},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 309, col: 25, offset: 10279},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 309, col: 31, offset: 10285},
								expr: &ruleRefExpr{
									pos:  position{line: 309, col: 32, offset: 10286},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 309, col: 51, offset: 10305},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 316, col: 1, offset: 10479},
			expr: &actionExpr{
				pos: position{line: 316, col: 12, offset: 10490},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 316, col: 12, offset: 10490},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 316, col: 12, offset: 10490},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 316, col: 23, offset: 10501},
								expr: &ruleRefExpr{
									pos:  position{line: 316, col: 24, offset: 10502},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 317, col: 5, offset: 10526},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 317, col: 12, offset: 10533},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 317, col: 12, offset: 10533},
									expr: &litMatcher{
										pos:        position{line: 317, col: 13, offset: 10534},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 321, col: 5, offset: 10625},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 325, col: 5, offset: 10777},
							expr: &ruleRefExpr{
								pos:  position{line: 325, col: 5, offset: 10777},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 325, col: 12, offset: 10784},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 325, col: 19, offset: 10791},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 325, col: 34, offset: 10806},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 325, col: 38, offset: 10810},
								expr: &ruleRefExpr{
									pos:  position{line: 325, col: 38, offset: 10810},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 325, col: 56, offset: 10828},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 329, col: 1, offset: 10934},
			expr: &actionExpr{
				pos: position{line: 329, col: 18, offset: 10951},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 329, col: 18, offset: 10951},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 329, col: 27, offset: 10960},
						expr: &seqExpr{
							pos: position{line: 329, col: 28, offset: 10961},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 329, col: 28, offset: 10961},
									expr: &ruleRefExpr{
										pos:  position{line: 329, col: 29, offset: 10962},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 329, col: 37, offset: 10970},
									expr: &ruleRefExpr{
										pos:  position{line: 329, col: 38, offset: 10971},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 329, col: 54, offset: 10987},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 333, col: 1, offset: 11108},
			expr: &actionExpr{
				pos: position{line: 333, col: 17, offset: 11124},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 333, col: 17, offset: 11124},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 333, col: 26, offset: 11133},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 333, col: 26, offset: 11133},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 334, col: 11, offset: 11148},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 335, col: 11, offset: 11193},
								expr: &ruleRefExpr{
									pos:  position{line: 335, col: 11, offset: 11193},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 336, col: 11, offset: 11211},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 337, col: 11, offset: 11236},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 338, col: 11, offset: 11258},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 339, col: 11, offset: 11281},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 340, col: 11, offset: 11296},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 341, col: 11, offset: 11321},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 342, col: 11, offset: 11342},
								name: "DocumentAttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 343, col: 11, offset: 11382},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsPlaceHolder",
			pos:  position{line: 350, col: 1, offset: 11533},
			expr: &seqExpr{
				pos: position{line: 350, col: 31, offset: 11563},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 350, col: 31, offset: 11563},
						val:        "toc::[]",
						ignoreCase: false,
						want:       "\"toc::[]\"",
					},
					&ruleRefExpr{
						pos:  position{line: 350, col: 41, offset: 11573},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 355, col: 1, offset: 11684},
			expr: &actionExpr{
				pos: position{line: 355, col: 19, offset: 11702},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 355, col: 19, offset: 11702},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 355, col: 19, offset: 11702},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 355, col: 25, offset: 11708},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 355, col: 40, offset: 11723},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 355, col: 45, offset: 11728},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 355, col: 52, offset: 11735},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 355, col: 68, offset: 11751},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 355, col: 75, offset: 11758},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 359, col: 1, offset: 11899},
			expr: &actionExpr{
				pos: position{line: 359, col: 20, offset: 11918},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 359, col: 20, offset: 11918},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 359, col: 20, offset: 11918},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 359, col: 26, offset: 11924},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 359, col: 41, offset: 11939},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 359, col: 45, offset: 11943},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 359, col: 52, offset: 11950},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 359, col: 68, offset: 11966},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 359, col: 75, offset: 11973},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 363, col: 1, offset: 12115},
			expr: &actionExpr{
				pos: position{line: 363, col: 18, offset: 12132},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 363, col: 19, offset: 12133},
					expr: &charClassMatcher{
						pos:        position{line: 363, col: 19, offset: 12133},
						val:        "[\\pL0-9_-]",
						chars:      []rune{'_', '-'},
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 367, col: 1, offset: 12182},
			expr: &actionExpr{
				pos: position{line: 367, col: 19, offset: 12200},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 367, col: 19, offset: 12200},
					expr: &charClassMatcher{
						pos:        position{line: 367, col: 19, offset: 12200},
						val:        "[^:[ \\n]",
						chars:      []rune{':', '[', ' ', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 371, col: 1, offset: 12246},
			expr: &actionExpr{
				pos: position{line: 371, col: 24, offset: 12269},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 371, col: 24, offset: 12269},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 371, col: 24, offset: 12269},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 371, col: 28, offset: 12273},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 371, col: 34, offset: 12279},
								expr: &ruleRefExpr{
									pos:  position{line: 371, col: 35, offset: 12280},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 371, col: 54, offset: 12299},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 378, col: 1, offset: 12479},
			expr: &actionExpr{
				pos: position{line: 378, col: 18, offset: 12496},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 378, col: 18, offset: 12496},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 378, col: 18, offset: 12496},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 378, col: 24, offset: 12502},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 378, col: 24, offset: 12502},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 378, col: 24, offset: 12502},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 378, col: 36, offset: 12514},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 378, col: 42, offset: 12520},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 378, col: 56, offset: 12534},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 378, col: 74, offset: 12552},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 380, col: 8, offset: 12706},
							expr: &ruleRefExpr{
								pos:  position{line: 380, col: 8, offset: 12706},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 380, col: 15, offset: 12713},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 384, col: 1, offset: 12765},
			expr: &actionExpr{
				pos: position{line: 384, col: 26, offset: 12790},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 384, col: 26, offset: 12790},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 384, col: 26, offset: 12790},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 384, col: 30, offset: 12794},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 384, col: 36, offset: 12800},
								expr: &choiceExpr{
									pos: position{line: 384, col: 37, offset: 12801},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 384, col: 37, offset: 12801},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 384, col: 59, offset: 12823},
											name: "TagRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 384, col: 80, offset: 12844},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 384, col: 99, offset: 12863},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 388, col: 1, offset: 12933},
			expr: &actionExpr{
				pos: position{line: 388, col: 24, offset: 12956},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 388, col: 24, offset: 12956},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 388, col: 24, offset: 12956},
							val:        "lines=",
							ignoreCase: false,
							want:       "\"lines=\"",
						},
						&labeledExpr{
							pos:   position{line: 388, col: 33, offset: 12965},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 388, col: 40, offset: 12972},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 388, col: 66, offset: 12998},
							expr: &litMatcher{
								pos:        position{line: 388, col: 66, offset: 12998},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 392, col: 1, offset: 13057},
			expr: &actionExpr{
				pos: position{line: 392, col: 29, offset: 13085},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 392, col: 29, offset: 13085},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 392, col: 29, offset: 13085},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 392, col: 36, offset: 13092},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 392, col: 36, offset: 13092},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 393, col: 11, offset: 13209},
										name: "MultipleQuotedLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 394, col: 11, offset: 13245},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 395, col: 11, offset: 13271},
										name: "MultiLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 396, col: 11, offset: 13303},
										name: "SingleLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 397, col: 11, offset: 13335},
										name: "SingleLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 398, col: 11, offset: 13362},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 398, col: 31, offset: 13382},
							expr: &ruleRefExpr{
								pos:  position{line: 398, col: 31, offset: 13382},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 398, col: 39, offset: 13390},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 398, col: 39, offset: 13390},
									expr: &litMatcher{
										pos:        position{line: 398, col: 40, offset: 13391},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 398, col: 46, offset: 13397},
									expr: &litMatcher{
										pos:        position{line: 398, col: 47, offset: 13398},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 402, col: 1, offset: 13430},
			expr: &actionExpr{
				pos: position{line: 402, col: 23, offset: 13452},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 402, col: 23, offset: 13452},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 402, col: 23, offset: 13452},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 402, col: 30, offset: 13459},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 402, col: 30, offset: 13459},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 402, col: 47, offset: 13476},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 403, col: 5, offset: 13498},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 403, col: 12, offset: 13505},
								expr: &actionExpr{
									pos: position{line: 403, col: 13, offset: 13506},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 403, col: 13, offset: 13506},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 403, col: 13, offset: 13506},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 403, col: 17, offset: 13510},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 403, col: 24, offset: 13517},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 403, col: 24, offset: 13517},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 403, col: 41, offset: 13534},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedLineRanges",
			pos:  position{line: 409, col: 1, offset: 13672},
			expr: &actionExpr{
				pos: position{line: 409, col: 29, offset: 13700},
				run: (*parser).callonMultipleQuotedLineRanges1,
				expr: &seqExpr{
					pos: position{line: 409, col: 29, offset: 13700},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 409, col: 29, offset: 13700},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 409, col: 34, offset: 13705},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 409, col: 41, offset: 13712},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 409, col: 41, offset: 13712},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 409, col: 58, offset: 13729},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 410, col: 5, offset: 13751},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 410, col: 12, offset: 13758},
								expr: &actionExpr{
									pos: position{line: 410, col: 13, offset: 13759},
									run: (*parser).callonMultipleQuotedLineRanges10,
									expr: &seqExpr{
										pos: position{line: 410, col: 13, offset: 13759},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 410, col: 13, offset: 13759},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 410, col: 17, offset: 13763},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 410, col: 24, offset: 13770},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 410, col: 24, offset: 13770},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 410, col: 41, offset: 13787},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 412, col: 9, offset: 13840},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 416, col: 1, offset: 13930},
			expr: &actionExpr{
				pos: position{line: 416, col: 19, offset: 13948},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 416, col: 19, offset: 13948},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 416, col: 19, offset: 13948},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 416, col: 26, offset: 13955},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 416, col: 34, offset: 13963},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 416, col: 39, offset: 13968},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 416, col: 44, offset: 13973},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineQuotedRange",
			pos:  position{line: 420, col: 1, offset: 14061},
			expr: &actionExpr{
				pos: position{line: 420, col: 25, offset: 14085},
				run: (*parser).callonMultiLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 420, col: 25, offset: 14085},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 420, col: 25, offset: 14085},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 420, col: 30, offset: 14090},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 420, col: 37, offset: 14097},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 420, col: 45, offset: 14105},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 420, col: 50, offset: 14110},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 420, col: 55, offset: 14115},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 420, col: 63, offset: 14123},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 424, col: 1, offset: 14208},
			expr: &actionExpr{
				pos: position{line: 424, col: 20, offset: 14227},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 424, col: 20, offset: 14227},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 424, col: 32, offset: 14239},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SingleLineQuotedRange",
			pos:  position{line: 428, col: 1, offset: 14334},
			expr: &actionExpr{
				pos: position{line: 428, col: 26, offset: 14359},
				run: (*parser).callonSingleLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 428, col: 26, offset: 14359},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 428, col: 26, offset: 14359},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 428, col: 31, offset: 14364},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 428, col: 43, offset: 14376},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 428, col: 51, offset: 14384},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 432, col: 1, offset: 14476},
			expr: &actionExpr{
				pos: position{line: 432, col: 23, offset: 14498},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 432, col: 23, offset: 14498},
					expr: &charClassMatcher{
						pos:        position{line: 432, col: 23, offset: 14498},
						val:        "[^\\], ]",
						chars:      []rune{']', ',', ' '},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "TagRangesAttribute",
			pos:  position{line: 436, col: 1, offset: 14543},
			expr: &actionExpr{
				pos: position{line: 436, col: 23, offset: 14565},
				run: (*parser).callonTagRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 436, col: 23, offset: 14565},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 436, col: 24, offset: 14566},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 436, col: 24, offset: 14566},
									val:        "tags=",
									ignoreCase: false,
									want:       "\"tags=\"",
								},
								&litMatcher{
									pos:        position{line: 436, col: 34, offset: 14576},
									val:        "tag=",
									ignoreCase: false,
									want:       "\"tag=\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 436, col: 42, offset: 14584},
							label: "tags",
							expr: &ruleRefExpr{
								pos:  position{line: 436, col: 48, offset: 14590},
								name: "TagRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 436, col: 73, offset: 14615},
							expr: &litMatcher{
								pos:        position{line: 436, col: 73, offset: 14615},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttributeValue",
			pos:  position{line: 440, col: 1, offset: 14764},
			expr: &actionExpr{
				pos: position{line: 440, col: 28, offset: 14791},
				run: (*parser).callonTagRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 440, col: 28, offset: 14791},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 440, col: 28, offset: 14791},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 440, col: 35, offset: 14798},
								name: "MultipleTagRanges",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 440, col: 54, offset: 14817},
							expr: &ruleRefExpr{
								pos:  position{line: 440, col: 54, offset: 14817},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 440, col: 62, offset: 14825},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 440, col: 62, offset: 14825},
									expr: &litMatcher{
										pos:        position{line: 440, col: 63, offset: 14826},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 440, col: 69, offset: 14832},
									expr: &litMatcher{
										pos:        position{line: 440, col: 70, offset: 14833},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 444, col: 1, offset: 14865},
			expr: &actionExpr{
				pos: position{line: 444, col: 22, offset: 14886},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 444, col: 22, offset: 14886},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 444, col: 22, offset: 14886},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 444, col: 29, offset: 14893},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 445, col: 5, offset: 14907},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 445, col: 12, offset: 14914},
								expr: &actionExpr{
									pos: position{line: 445, col: 13, offset: 14915},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 445, col: 13, offset: 14915},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 445, col: 13, offset: 14915},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 445, col: 17, offset: 14919},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 445, col: 24, offset: 14926},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 451, col: 1, offset: 15057},
			expr: &choiceExpr{
				pos: position{line: 451, col: 13, offset: 15069},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 451, col: 13, offset: 15069},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 451, col: 13, offset: 15069},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 451, col: 18, offset: 15074},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 451, col: 18, offset: 15074},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 451, col: 30, offset: 15086},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 453, col: 5, offset: 15154},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 453, col: 5, offset: 15154},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 453, col: 5, offset: 15154},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 453, col: 9, offset: 15158},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 453, col: 14, offset: 15163},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 453, col: 14, offset: 15163},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 453, col: 26, offset: 15175},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 457, col: 1, offset: 15243},
			expr: &actionExpr{
				pos: position{line: 457, col: 16, offset: 15258},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 457, col: 16, offset: 15258},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 457, col: 16, offset: 15258},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 457, col: 23, offset: 15265},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 457, col: 23, offset: 15265},
									expr: &litMatcher{
										pos:        position{line: 457, col: 24, offset: 15266},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 460, col: 5, offset: 15320},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "VerbatimFileContent",
			pos:  position{line: 468, col: 1, offset: 15562},
			expr: &zeroOrMoreExpr{
				pos: position{line: 468, col: 24, offset: 15585},
				expr: &choiceExpr{
					pos: position{line: 468, col: 25, offset: 15586},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 468, col: 25, offset: 15586},
							name: "FileInclusion",
						},
						&ruleRefExpr{
							pos:  position{line: 468, col: 41, offset: 15602},
							name: "VerbatimLine",
						},
					},
				},
			},
		},
		{
			name: "VerbatimLine",
			pos:  position{line: 470, col: 1, offset: 15618},
			expr: &actionExpr{
				pos: position{line: 470, col: 17, offset: 15634},
				run: (*parser).callonVerbatimLine1,
				expr: &seqExpr{
					pos: position{line: 470, col: 17, offset: 15634},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 470, col: 17, offset: 15634},
							expr: &ruleRefExpr{
								pos:  position{line: 470, col: 18, offset: 15635},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 470, col: 22, offset: 15639},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 470, col: 31, offset: 15648},
								run: (*parser).callonVerbatimLine6,
								expr: &zeroOrMoreExpr{
									pos: position{line: 470, col: 31, offset: 15648},
									expr: &charClassMatcher{
										pos:        position{line: 470, col: 31, offset: 15648},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 472, col: 12, offset: 15710},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 479, col: 1, offset: 15905},
			expr: &actionExpr{
				pos: position{line: 479, col: 21, offset: 15925},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 479, col: 21, offset: 15925},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 479, col: 21, offset: 15925},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 479, col: 29, offset: 15933},
								expr: &choiceExpr{
									pos: position{line: 479, col: 30, offset: 15934},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 479, col: 30, offset: 15934},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 479, col: 53, offset: 15957},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 479, col: 74, offset: 15978},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 479, col: 74, offset: 15978,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 479, col: 107, offset: 16011},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 483, col: 1, offset: 16082},
			expr: &actionExpr{
				pos: position{line: 483, col: 25, offset: 16106},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 483, col: 25, offset: 16106},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 483, col: 25, offset: 16106},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 483, col: 33, offset: 16114},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 483, col: 38, offset: 16119},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 483, col: 38, offset: 16119},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 483, col: 78, offset: 16159},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 487, col: 1, offset: 16224},
			expr: &actionExpr{
				pos: position{line: 487, col: 23, offset: 16246},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 487, col: 23, offset: 16246},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 487, col: 23, offset: 16246},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 487, col: 31, offset: 16254},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 487, col: 36, offset: 16259},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 487, col: 36, offset: 16259},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 487, col: 76, offset: 16299},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 494, col: 1, offset: 16463},
			expr: &choiceExpr{
				pos: position{line: 494, col: 18, offset: 16480},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 494, col: 18, offset: 16480},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 494, col: 18, offset: 16480},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 494, col: 27, offset: 16489},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 496, col: 9, offset: 16546},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 496, col: 9, offset: 16546},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 496, col: 15, offset: 16552},
								expr: &ruleRefExpr{
									pos:  position{line: 496, col: 16, offset: 16553},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 500, col: 1, offset: 16645},
			expr: &actionExpr{
				pos: position{line: 500, col: 22, offset: 16666},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 500, col: 22, offset: 16666},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 500, col: 22, offset: 16666},
							expr: &ruleRefExpr{
								pos:  position{line: 500, col: 23, offset: 16667},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 501, col: 5, offset: 16675},
							expr: &ruleRefExpr{
								pos:  position{line: 501, col: 6, offset: 16676},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 502, col: 5, offset: 16691},
							expr: &ruleRefExpr{
								pos:  position{line: 502, col: 6, offset: 16692},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 503, col: 5, offset: 16714},
							expr: &ruleRefExpr{
								pos:  position{line: 503, col: 6, offset: 16715},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 504, col: 5, offset: 16741},
							expr: &ruleRefExpr{
								pos:  position{line: 504, col: 6, offset: 16742},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 505, col: 5, offset: 16770},
							expr: &ruleRefExpr{
								pos:  position{line: 505, col: 6, offset: 16771},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 506, col: 5, offset: 16796},
							expr: &ruleRefExpr{
								pos:  position{line: 506, col: 6, offset: 16797},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 507, col: 5, offset: 16818},
							expr: &ruleRefExpr{
								pos:  position{line: 507, col: 6, offset: 16819},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 508, col: 5, offset: 16838},
							expr: &ruleRefExpr{
								pos:  position{line: 508, col: 6, offset: 16839},
								name: "LabeledListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 509, col: 5, offset: 16866},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 509, col: 11, offset: 16872},
								run: (*parser).callonListParagraphLine22,
								expr: &labeledExpr{
									pos:   position{line: 509, col: 11, offset: 16872},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 509, col: 20, offset: 16881},
										expr: &ruleRefExpr{
											pos:  position{line: 509, col: 21, offset: 16882},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 511, col: 12, offset: 16981},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 515, col: 1, offset: 17020},
			expr: &seqExpr{
				pos: position{line: 515, col: 25, offset: 17044},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 515, col: 25, offset: 17044},
						val:        "+",
						ignoreCase: false,
						want:       "\"+\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 515, col: 29, offset: 17048},
						expr: &ruleRefExpr{
							pos:  position{line: 515, col: 29, offset: 17048},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 515, col: 36, offset: 17055},
						name: "Newline",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 517, col: 1, offset: 17127},
			expr: &actionExpr{
				pos: position{line: 517, col: 29, offset: 17155},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 517, col: 29, offset: 17155},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 517, col: 29, offset: 17155},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 517, col: 50, offset: 17176},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 517, col: 58, offset: 17184},
								name: "ContinuedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedListItemContent",
			pos:  position{line: 521, col: 1, offset: 17290},
			expr: &actionExpr{
				pos: position{line: 521, col: 29, offset: 17318},
				run: (*parser).callonContinuedListItemContent1,
				expr: &seqExpr{
					pos: position{line: 521, col: 29, offset: 17318},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 521, col: 29, offset: 17318},
							expr: &ruleRefExpr{
								pos:  position{line: 521, col: 30, offset: 17319},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 522, col: 5, offset: 17328},
							label: "content",
							expr: &choiceExpr{
								pos: position{line: 522, col: 14, offset: 17337},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 522, col: 14, offset: 17337},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 523, col: 11, offset: 17362},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 524, col: 11, offset: 17386},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 525, col: 11, offset: 17440},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 526, col: 11, offset: 17462},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 527, col: 11, offset: 17489},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 528, col: 11, offset: 17518},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 530, col: 11, offset: 17583},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 531, col: 11, offset: 17634},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 532, col: 11, offset: 17658},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 533, col: 11, offset: 17698},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 534, col: 11, offset: 17732},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 535, col: 11, offset: 17769},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 536, col: 11, offset: 17794},
										name: "ContinuedParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 543, col: 1, offset: 17957},
			expr: &actionExpr{
				pos: position{line: 543, col: 20, offset: 17976},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 543, col: 20, offset: 17976},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 543, col: 20, offset: 17976},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 543, col: 31, offset: 17987},
								expr: &ruleRefExpr{
									pos:  position{line: 543, col: 32, offset: 17988},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 543, col: 52, offset: 18008},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 543, col: 60, offset: 18016},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 543, col: 83, offset: 18039},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 543, col: 92, offset: 18048},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 547, col: 1, offset: 18188},
			expr: &actionExpr{
				pos: position{line: 548, col: 5, offset: 18218},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 548, col: 5, offset: 18218},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 548, col: 5, offset: 18218},
							expr: &ruleRefExpr{
								pos:  position{line: 548, col: 5, offset: 18218},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 548, col: 12, offset: 18225},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 550, col: 9, offset: 18288},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 550, col: 9, offset: 18288},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 550, col: 9, offset: 18288},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 550, col: 9, offset: 18288},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 550, col: 16, offset: 18295},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 550, col: 16, offset: 18295},
															expr: &litMatcher{
																pos:        position{line: 550, col: 17, offset: 18296},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 554, col: 9, offset: 18396},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 573, col: 11, offset: 19113},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 573, col: 11, offset: 19113},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 573, col: 11, offset: 19113},
													expr: &charClassMatcher{
														pos:        position{line: 573, col: 12, offset: 19114},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 573, col: 20, offset: 19122},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 575, col: 13, offset: 19233},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 575, col: 13, offset: 19233},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 575, col: 14, offset: 19234},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 575, col: 21, offset: 19241},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 577, col: 13, offset: 19355},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 577, col: 13, offset: 19355},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 577, col: 14, offset: 19356},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 577, col: 21, offset: 19363},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 579, col: 13, offset: 19477},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 579, col: 13, offset: 19477},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 579, col: 13, offset: 19477},
													expr: &charClassMatcher{
														pos:        position{line: 579, col: 14, offset: 19478},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 579, col: 22, offset: 19486},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 581, col: 13, offset: 19600},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 581, col: 13, offset: 19600},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 581, col: 13, offset: 19600},
													expr: &charClassMatcher{
														pos:        position{line: 581, col: 14, offset: 19601},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 581, col: 22, offset: 19609},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 583, col: 12, offset: 19722},
							expr: &ruleRefExpr{
								pos:  position{line: 583, col: 12, offset: 19722},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 587, col: 1, offset: 19757},
			expr: &actionExpr{
				pos: position{line: 587, col: 27, offset: 19783},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 587, col: 27, offset: 19783},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 587, col: 37, offset: 19793},
						expr: &ruleRefExpr{
							pos:  position{line: 587, col: 37, offset: 19793},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 594, col: 1, offset: 19993},
			expr: &actionExpr{
				pos: position{line: 594, col: 22, offset: 20014},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 594, col: 22, offset: 20014},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 594, col: 22, offset: 20014},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 594, col: 33, offset: 20025},
								expr: &ruleRefExpr{
									pos:  position{line: 594, col: 34, offset: 20026},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 594, col: 54, offset: 20046},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 594, col: 62, offset: 20054},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 594, col: 87, offset: 20079},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 594, col: 98, offset: 20090},
								expr: &ruleRefExpr{
									pos:  position{line: 594, col: 99, offset: 20091},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 594, col: 129, offset: 20121},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 594, col: 138, offset: 20130},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 598, col: 1, offset: 20288},
			expr: &actionExpr{
				pos: position{line: 599, col: 5, offset: 20320},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 599, col: 5, offset: 20320},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 599, col: 5, offset: 20320},
							expr: &ruleRefExpr{
								pos:  position{line: 599, col: 5, offset: 20320},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 599, col: 12, offset: 20327},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 599, col: 20, offset: 20335},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 601, col: 9, offset: 20392},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 601, col: 9, offset: 20392},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 601, col: 9, offset: 20392},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 601, col: 16, offset: 20399},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 601, col: 16, offset: 20399},
															expr: &litMatcher{
																pos:        position{line: 601, col: 17, offset: 20400},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 605, col: 9, offset: 20500},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 622, col: 14, offset: 21207},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 622, col: 21, offset: 21214},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 622, col: 22, offset: 21215},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 624, col: 13, offset: 21301},
							expr: &ruleRefExpr{
								pos:  position{line: 624, col: 13, offset: 21301},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 628, col: 1, offset: 21337},
			expr: &actionExpr{
				pos: position{line: 628, col: 32, offset: 21368},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 628, col: 32, offset: 21368},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 628, col: 32, offset: 21368},
							expr: &litMatcher{
								pos:        position{line: 628, col: 33, offset: 21369},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 628, col: 37, offset: 21373},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 629, col: 7, offset: 21387},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 629, col: 7, offset: 21387},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 629, col: 7, offset: 21387},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 630, col: 7, offset: 21432},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 630, col: 7, offset: 21432},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 631, col: 7, offset: 21475},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 631, col: 7, offset: 21475},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 632, col: 7, offset: 21517},
							expr: &ruleRefExpr{
								pos:  position{line: 632, col: 7, offset: 21517},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 636, col: 1, offset: 21559},
			expr: &actionExpr{
				pos: position{line: 636, col: 29, offset: 21587},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 636, col: 29, offset: 21587},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 636, col: 39, offset: 21597},
						expr: &ruleRefExpr{
							pos:  position{line: 636, col: 39, offset: 21597},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 643, col: 1, offset: 21913},
			expr: &actionExpr{
				pos: position{line: 643, col: 20, offset: 21932},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 643, col: 20, offset: 21932},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 643, col: 20, offset: 21932},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 643, col: 31, offset: 21943},
								expr: &ruleRefExpr{
									pos:  position{line: 643, col: 32, offset: 21944},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 643, col: 52, offset: 21964},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 643, col: 58, offset: 21970},
								name: "VerbatimLabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 643, col: 87, offset: 21999},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 643, col: 98, offset: 22010},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 643, col: 124, offset: 22036},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 643, col: 136, offset: 22048},
								expr: &ruleRefExpr{
									pos:  position{line: 643, col: 137, offset: 22049},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemPrefix",
			pos:  position{line: 647, col: 1, offset: 22195},
			expr: &seqExpr{
				pos: position{line: 647, col: 26, offset: 22220},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 647, col: 26, offset: 22220},
						name: "VerbatimLabeledListItemTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 647, col: 54, offset: 22248},
						name: "LabeledListItemSeparator",
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemTerm",
			pos:  position{line: 649, col: 1, offset: 22274},
			expr: &actionExpr{
				pos: position{line: 649, col: 32, offset: 22305},
				run: (*parser).callonVerbatimLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 649, col: 32, offset: 22305},
					label: "content",
					expr: &actionExpr{
						pos: position{line: 649, col: 41, offset: 22314},
						run: (*parser).callonVerbatimLabeledListItemTerm3,
						expr: &oneOrMoreExpr{
							pos: position{line: 649, col: 41, offset: 22314},
							expr: &charClassMatcher{
								pos:        position{line: 649, col: 41, offset: 22314},
								val:        "[^:\\n\\r]",
								chars:      []rune{':', '\n', '\r'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 655, col: 1, offset: 22448},
			expr: &actionExpr{
				pos: position{line: 655, col: 24, offset: 22471},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 655, col: 24, offset: 22471},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 655, col: 33, offset: 22480},
						expr: &seqExpr{
							pos: position{line: 655, col: 34, offset: 22481},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 655, col: 34, offset: 22481},
									expr: &ruleRefExpr{
										pos:  position{line: 655, col: 35, offset: 22482},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 655, col: 43, offset: 22490},
									expr: &litMatcher{
										pos:        position{line: 655, col: 44, offset: 22491},
										val:        "::",
										ignoreCase: false,
										want:       "\"::\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 655, col: 49, offset: 22496},
									name: "LabeledListItemTermElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTermElement",
			pos:  position{line: 659, col: 1, offset: 22623},
			expr: &actionExpr{
				pos: position{line: 659, col: 31, offset: 22653},
				run: (*parser).callonLabeledListItemTermElement1,
				expr: &labeledExpr{
					pos:   position{line: 659, col: 31, offset: 22653},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 659, col: 40, offset: 22662},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 659, col: 40, offset: 22662},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 660, col: 11, offset: 22677},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 661, col: 11, offset: 22726},
								expr: &ruleRefExpr{
									pos:  position{line: 661, col: 11, offset: 22726},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 662, col: 11, offset: 22744},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 663, col: 11, offset: 22769},
								name: "ConcealedIndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 664, col: 11, offset: 22798},
								name: "IndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 665, col: 11, offset: 22818},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 666, col: 11, offset: 22840},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 667, col: 11, offset: 22863},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 668, col: 11, offset: 22878},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 669, col: 11, offset: 22903},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 670, col: 11, offset: 22924},
								name: "DocumentAttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 671, col: 11, offset: 22964},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 675, col: 1, offset: 23003},
			expr: &actionExpr{
				pos: position{line: 676, col: 5, offset: 23036},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 676, col: 5, offset: 23036},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 676, col: 5, offset: 23036},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 676, col: 16, offset: 23047},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 676, col: 16, offset: 23047},
									expr: &litMatcher{
										pos:        position{line: 676, col: 17, offset: 23048},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 679, col: 5, offset: 23106},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 683, col: 6, offset: 23282},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 683, col: 6, offset: 23282},
									expr: &choiceExpr{
										pos: position{line: 683, col: 7, offset: 23283},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 683, col: 7, offset: 23283},
												name: "Space",
											},
											&ruleRefExpr{
												pos:  position{line: 683, col: 15, offset: 23291},
												name: "Newline",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 683, col: 27, offset: 23303},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 687, col: 1, offset: 23343},
			expr: &actionExpr{
				pos: position{line: 687, col: 31, offset: 23373},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 687, col: 31, offset: 23373},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 687, col: 40, offset: 23382},
						expr: &ruleRefExpr{
							pos:  position{line: 687, col: 41, offset: 23383},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 694, col: 1, offset: 23574},
			expr: &choiceExpr{
				pos: position{line: 694, col: 19, offset: 23592},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 694, col: 19, offset: 23592},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 694, col: 19, offset: 23592},
							val:        "TIP",
							ignoreCase: false,
							want:       "\"TIP\"",
						},
					},
					&actionExpr{
						pos: position{line: 696, col: 9, offset: 23638},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 696, col: 9, offset: 23638},
							val:        "NOTE",
							ignoreCase: false,
							want:       "\"NOTE\"",
						},
					},
					&actionExpr{
						pos: position{line: 698, col: 9, offset: 23686},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 698, col: 9, offset: 23686},
							val:        "IMPORTANT",
							ignoreCase: false,
							want:       "\"IMPORTANT\"",
						},
					},
					&actionExpr{
						pos: position{line: 700, col: 9, offset: 23744},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 700, col: 9, offset: 23744},
							val:        "WARNING",
							ignoreCase: false,
							want:       "\"WARNING\"",
						},
					},
					&actionExpr{
						pos: position{line: 702, col: 9, offset: 23798},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 702, col: 9, offset: 23798},
							val:        "CAUTION",
							ignoreCase: false,
							want:       "\"CAUTION\"",
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 711, col: 1, offset: 24105},
			expr: &choiceExpr{
				pos: position{line: 713, col: 5, offset: 24152},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 713, col: 5, offset: 24152},
						run: (*parser).callonParagraph2,
						expr: &seqExpr{
							pos: position{line: 713, col: 5, offset: 24152},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 713, col: 5, offset: 24152},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 713, col: 16, offset: 24163},
										expr: &ruleRefExpr{
											pos:  position{line: 713, col: 17, offset: 24164},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 713, col: 37, offset: 24184},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 713, col: 40, offset: 24187},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 713, col: 56, offset: 24203},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 713, col: 61, offset: 24208},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 713, col: 67, offset: 24214},
										expr: &ruleRefExpr{
											pos:  position{line: 713, col: 68, offset: 24215},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 717, col: 5, offset: 24407},
						run: (*parser).callonParagraph13,
						expr: &seqExpr{
							pos: position{line: 717, col: 5, offset: 24407},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 717, col: 5, offset: 24407},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 717, col: 16, offset: 24418},
										expr: &ruleRefExpr{
											pos:  position{line: 717, col: 17, offset: 24419},
											name: "ElementAttributes",
										},
									},
								},
								&notExpr{
									pos: position{line: 717, col: 37, offset: 24439},
									expr: &ruleRefExpr{
										pos:  position{line: 717, col: 38, offset: 24440},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 717, col: 53, offset: 24455},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 717, col: 59, offset: 24461},
										expr: &ruleRefExpr{
											pos:  position{line: 717, col: 60, offset: 24462},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SimpleParagraph",
			pos:  position{line: 722, col: 1, offset: 24627},
			expr: &actionExpr{
				pos: position{line: 722, col: 20, offset: 24646},
				run: (*parser).callonSimpleParagraph1,
				expr: &seqExpr{
					pos: position{line: 722, col: 20, offset: 24646},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 722, col: 20, offset: 24646},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 722, col: 31, offset: 24657},
								expr: &ruleRefExpr{
									pos:  position{line: 722, col: 32, offset: 24658},
									name: "ElementAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 723, col: 5, offset: 24683},
							run: (*parser).callonSimpleParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 731, col: 5, offset: 24974},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 731, col: 16, offset: 24985},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 732, col: 5, offset: 25008},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 732, col: 16, offset: 25019},
								expr: &ruleRefExpr{
									pos:  position{line: 732, col: 17, offset: 25020},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphLine",
			pos:  position{line: 736, col: 1, offset: 25154},
			expr: &actionExpr{
				pos: position{line: 737, col: 5, offset: 25181},
				run: (*parser).callonFirstParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 737, col: 5, offset: 25181},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 737, col: 5, offset: 25181},
							label: "elements",
							expr: &seqExpr{
								pos: position{line: 737, col: 15, offset: 25191},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 737, col: 15, offset: 25191},
										name: "Word",
									},
									&zeroOrMoreExpr{
										pos: position{line: 737, col: 20, offset: 25196},
										expr: &ruleRefExpr{
											pos:  position{line: 737, col: 20, offset: 25196},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 737, col: 36, offset: 25212},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OtherParagraphLine",
			pos:  position{line: 741, col: 1, offset: 25283},
			expr: &actionExpr{
				pos: position{line: 741, col: 23, offset: 25305},
				run: (*parser).callonOtherParagraphLine1,
				expr: &labeledExpr{
					pos:   position{line: 741, col: 23, offset: 25305},
					label: "elements",
					expr: &ruleRefExpr{
						pos:  position{line: 741, col: 33, offset: 25315},
						name: "InlineElements",
					},
				},
			},
		},
		{
			name: "ContinuedParagraph",
			pos:  position{line: 746, col: 1, offset: 25435},
			expr: &choiceExpr{
				pos: position{line: 748, col: 5, offset: 25491},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 748, col: 5, offset: 25491},
						run: (*parser).callonContinuedParagraph2,
						expr: &seqExpr{
							pos: position{line: 748, col: 5, offset: 25491},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 748, col: 5, offset: 25491},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 748, col: 16, offset: 25502},
										expr: &ruleRefExpr{
											pos:  position{line: 748, col: 17, offset: 25503},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 748, col: 37, offset: 25523},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 748, col: 40, offset: 25526},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 748, col: 56, offset: 25542},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 748, col: 61, offset: 25547},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 748, col: 68, offset: 25554},
										name: "ContinuedParagraphLines",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 752, col: 5, offset: 25754},
						run: (*parser).callonContinuedParagraph12,
						expr: &seqExpr{
							pos: position{line: 752, col: 5, offset: 25754},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 752, col: 5, offset: 25754},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 752, col: 16, offset: 25765},
										expr: &ruleRefExpr{
											pos:  position{line: 752, col: 17, offset: 25766},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 752, col: 37, offset: 25786},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 752, col: 44, offset: 25793},
										name: "ContinuedParagraphLines",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedParagraphLines",
			pos:  position{line: 756, col: 1, offset: 25894},
			expr: &actionExpr{
				pos: position{line: 756, col: 28, offset: 25921},
				run: (*parser).callonContinuedParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 756, col: 28, offset: 25921},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 756, col: 28, offset: 25921},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 756, col: 39, offset: 25932},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 756, col: 59, offset: 25952},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 756, col: 70, offset: 25963},
								expr: &seqExpr{
									pos: position{line: 756, col: 71, offset: 25964},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 756, col: 71, offset: 25964},
											expr: &ruleRefExpr{
												pos:  position{line: 756, col: 72, offset: 25965},
												name: "ListItemContinuation",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 756, col: 93, offset: 25986},
											name: "OtherParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseParagraph",
			pos:  position{line: 760, col: 1, offset: 26092},
			expr: &choiceExpr{
				pos: position{line: 762, col: 5, offset: 26144},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 762, col: 5, offset: 26144},
						run: (*parser).callonVerseParagraph2,
						expr: &seqExpr{
							pos: position{line: 762, col: 5, offset: 26144},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 762, col: 5, offset: 26144},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 762, col: 16, offset: 26155},
										expr: &ruleRefExpr{
											pos:  position{line: 762, col: 17, offset: 26156},
											name: "ElementAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 763, col: 5, offset: 26180},
									run: (*parser).callonVerseParagraph7,
								},
								&labeledExpr{
									pos:   position{line: 770, col: 5, offset: 26392},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 770, col: 8, offset: 26395},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 770, col: 24, offset: 26411},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 770, col: 29, offset: 26416},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 770, col: 35, offset: 26422},
										expr: &ruleRefExpr{
											pos:  position{line: 770, col: 36, offset: 26423},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 774, col: 5, offset: 26615},
						run: (*parser).callonVerseParagraph14,
						expr: &seqExpr{
							pos: position{line: 774, col: 5, offset: 26615},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 774, col: 5, offset: 26615},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 774, col: 16, offset: 26626},
										expr: &ruleRefExpr{
											pos:  position{line: 774, col: 17, offset: 26627},
											name: "ElementAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 775, col: 5, offset: 26651},
									run: (*parser).callonVerseParagraph19,
								},
								&labeledExpr{
									pos:   position{line: 782, col: 5, offset: 26863},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 782, col: 11, offset: 26869},
										expr: &ruleRefExpr{
											pos:  position{line: 782, col: 12, offset: 26870},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 786, col: 1, offset: 26971},
			expr: &actionExpr{
				pos: position{line: 786, col: 19, offset: 26989},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 786, col: 19, offset: 26989},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 786, col: 19, offset: 26989},
							expr: &ruleRefExpr{
								pos:  position{line: 786, col: 20, offset: 26990},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 787, col: 5, offset: 27004},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 787, col: 15, offset: 27014},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 787, col: 15, offset: 27014},
										run: (*parser).callonInlineElements7,
										expr: &labeledExpr{
											pos:   position{line: 787, col: 15, offset: 27014},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 787, col: 24, offset: 27023},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 789, col: 9, offset: 27115},
										run: (*parser).callonInlineElements10,
										expr: &seqExpr{
											pos: position{line: 789, col: 9, offset: 27115},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 789, col: 9, offset: 27115},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 789, col: 18, offset: 27124},
														expr: &ruleRefExpr{
															pos:  position{line: 789, col: 19, offset: 27125},
															name: "InlineElement",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 789, col: 35, offset: 27141},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 795, col: 1, offset: 27258},
			expr: &actionExpr{
				pos: position{line: 796, col: 5, offset: 27281},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 796, col: 5, offset: 27281},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 796, col: 14, offset: 27290},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 796, col: 14, offset: 27290},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 797, col: 11, offset: 27341},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 798, col: 11, offset: 27386},
								expr: &ruleRefExpr{
									pos:  position{line: 798, col: 11, offset: 27386},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 799, col: 11, offset: 27404},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 799, col: 11, offset: 27404},
										expr: &ruleRefExpr{
											pos:  position{line: 799, col: 12, offset: 27405},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 800, col: 13, offset: 27424},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 800, col: 13, offset: 27424},
												name: "QuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 801, col: 15, offset: 27450},
												name: "InlineImage",
											},
											&ruleRefExpr{
												pos:  position{line: 802, col: 15, offset: 27477},
												name: "Link",
											},
											&ruleRefExpr{
												pos:  position{line: 803, col: 15, offset: 27497},
												name: "Passthrough",
											},
											&ruleRefExpr{
												pos:  position{line: 804, col: 15, offset: 27524},
												name: "InlineFootnote",
											},
											&ruleRefExpr{
												pos:  position{line: 805, col: 15, offset: 27554},
												name: "CrossReference",
											},
											&ruleRefExpr{
												pos:  position{line: 806, col: 15, offset: 27584},
												name: "InlineUserMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 807, col: 15, offset: 27615},
												name: "DocumentAttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 808, col: 15, offset: 27660},
												name: "InlineElementID",
											},
											&ruleRefExpr{
												pos:  position{line: 809, col: 15, offset: 27691},
												name: "ConcealedIndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 810, col: 15, offset: 27724},
												name: "IndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 811, col: 15, offset: 27748},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 818, col: 1, offset: 27971},
			expr: &actionExpr{
				pos: position{line: 818, col: 14, offset: 27984},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 818, col: 14, offset: 27984},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 818, col: 14, offset: 27984},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 818, col: 20, offset: 27990},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 818, col: 24, offset: 27994},
							expr: &ruleRefExpr{
								pos:  position{line: 818, col: 24, offset: 27994},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 818, col: 31, offset: 28001},
							expr: &ruleRefExpr{
								pos:  position{line: 818, col: 32, offset: 28002},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 825, col: 1, offset: 28286},
			expr: &choiceExpr{
				pos: position{line: 825, col: 15, offset: 28300},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 825, col: 15, offset: 28300},
						name: "UnconstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 825, col: 41, offset: 28326},
						name: "ConstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 825, col: 65, offset: 28350},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 827, col: 1, offset: 28369},
			expr: &choiceExpr{
				pos: position{line: 827, col: 32, offset: 28400},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 827, col: 32, offset: 28400},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 827, col: 32, offset: 28400},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 827, col: 36, offset: 28404},
								expr: &litMatcher{
									pos:        position{line: 827, col: 37, offset: 28405},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 827, col: 43, offset: 28411},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 827, col: 43, offset: 28411},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 827, col: 47, offset: 28415},
								expr: &litMatcher{
									pos:        position{line: 827, col: 48, offset: 28416},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 827, col: 54, offset: 28422},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 827, col: 54, offset: 28422},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 827, col: 58, offset: 28426},
								expr: &litMatcher{
									pos:        position{line: 827, col: 59, offset: 28427},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 829, col: 1, offset: 28433},
			expr: &choiceExpr{
				pos: position{line: 829, col: 34, offset: 28466},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 829, col: 34, offset: 28466},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 829, col: 41, offset: 28473},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 829, col: 48, offset: 28480},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 829, col: 55, offset: 28487},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 829, col: 61, offset: 28493},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 831, col: 1, offset: 28498},
			expr: &actionExpr{
				pos: position{line: 831, col: 26, offset: 28523},
				run: (*parser).callonConstrainedQuotedText1,
				expr: &labeledExpr{
					pos:   position{line: 831, col: 26, offset: 28523},
					label: "text",
					expr: &choiceExpr{
						pos: position{line: 831, col: 32, offset: 28529},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 831, col: 32, offset: 28529},
								name: "SingleQuoteBoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 832, col: 15, offset: 28564},
								name: "SingleQuoteItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 833, col: 15, offset: 28601},
								name: "SingleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 834, col: 15, offset: 28641},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 835, col: 15, offset: 28670},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 836, col: 15, offset: 28701},
								name: "SubscriptOrSuperscriptPrefix",
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 840, col: 1, offset: 28855},
			expr: &choiceExpr{
				pos: position{line: 840, col: 28, offset: 28882},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 840, col: 28, offset: 28882},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 841, col: 15, offset: 28916},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 842, col: 15, offset: 28952},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 844, col: 1, offset: 28978},
			expr: &choiceExpr{
				pos: position{line: 844, col: 22, offset: 28999},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 844, col: 22, offset: 28999},
						name: "EscapedBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 845, col: 15, offset: 29030},
						name: "EscapedItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 846, col: 15, offset: 29063},
						name: "EscapedMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 847, col: 15, offset: 29099},
						name: "EscapedSubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 848, col: 15, offset: 29135},
						name: "EscapedSuperscriptText",
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 850, col: 1, offset: 29159},
			expr: &choiceExpr{
				pos: position{line: 850, col: 33, offset: 29191},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 850, col: 33, offset: 29191},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 850, col: 39, offset: 29197},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 850, col: 39, offset: 29197},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 854, col: 1, offset: 29330},
			expr: &actionExpr{
				pos: position{line: 854, col: 25, offset: 29354},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 854, col: 25, offset: 29354},
					expr: &litMatcher{
						pos:        position{line: 854, col: 25, offset: 29354},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 858, col: 1, offset: 29395},
			expr: &actionExpr{
				pos: position{line: 858, col: 25, offset: 29419},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 858, col: 25, offset: 29419},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 858, col: 25, offset: 29419},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 858, col: 30, offset: 29424},
							expr: &litMatcher{
								pos:        position{line: 858, col: 30, offset: 29424},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 866, col: 1, offset: 29521},
			expr: &choiceExpr{
				pos: position{line: 866, col: 13, offset: 29533},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 866, col: 13, offset: 29533},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 866, col: 35, offset: 29555},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 868, col: 1, offset: 29622},
			expr: &actionExpr{
				pos: position{line: 868, col: 24, offset: 29645},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 868, col: 24, offset: 29645},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 868, col: 24, offset: 29645},
							expr: &litMatcher{
								pos:        position{line: 868, col: 25, offset: 29646},
								val:        "\\\\",
								ignoreCase: false,
								want:       "\"\\\\\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 868, col: 30, offset: 29651},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 868, col: 35, offset: 29656},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 868, col: 45, offset: 29666},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 868, col: 74, offset: 29695},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 872, col: 1, offset: 29776},
			expr: &seqExpr{
				pos: position{line: 872, col: 32, offset: 29807},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 872, col: 32, offset: 29807},
						name: "DoubleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 872, col: 59, offset: 29834},
						expr: &seqExpr{
							pos: position{line: 872, col: 60, offset: 29835},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 872, col: 60, offset: 29835},
									expr: &litMatcher{
										pos:        position{line: 872, col: 62, offset: 29837},
										val:        "**",
										ignoreCase: false,
										want:       "\"**\"",
									},
								},
								&choiceExpr{
									pos: position{line: 872, col: 69, offset: 29844},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 872, col: 69, offset: 29844},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 872, col: 77, offset: 29852},
											name: "DoubleQuoteBoldTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 874, col: 1, offset: 29917},
			expr: &choiceExpr{
				pos: position{line: 874, col: 31, offset: 29947},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 874, col: 31, offset: 29947},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 875, col: 11, offset: 29963},
						name: "SingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 876, col: 11, offset: 29994},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 877, col: 11, offset: 30016},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 878, col: 11, offset: 30040},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 879, col: 11, offset: 30064},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 880, col: 11, offset: 30090},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 881, col: 11, offset: 30113},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 882, col: 11, offset: 30129},
						name: "Passthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 883, col: 11, offset: 30152},
						name: "DocumentAttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 884, col: 11, offset: 30192},
						name: "DoubleQuoteBoldTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 885, col: 11, offset: 30235},
						name: "DoubleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextStringElement",
			pos:  position{line: 888, col: 1, offset: 30274},
			expr: &actionExpr{
				pos: position{line: 888, col: 37, offset: 30310},
				run: (*parser).callonDoubleQuoteBoldTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 888, col: 37, offset: 30310},
					expr: &seqExpr{
						pos: position{line: 888, col: 38, offset: 30311},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 888, col: 38, offset: 30311},
								expr: &litMatcher{
									pos:        position{line: 888, col: 39, offset: 30312},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
							&charClassMatcher{
								pos:        position{line: 888, col: 44, offset: 30317},
								val:        "[^\\r\\n ^~{}]",
								chars:      []rune{'\r', '\n', ' ', '^', '~', '{', '}'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 892, col: 1, offset: 30388},
			expr: &choiceExpr{
				pos: position{line: 893, col: 5, offset: 30433},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 893, col: 5, offset: 30433},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 894, col: 7, offset: 30530},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 894, col: 7, offset: 30530},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 894, col: 7, offset: 30530},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 894, col: 12, offset: 30535},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 898, col: 1, offset: 30698},
			expr: &choiceExpr{
				pos: position{line: 898, col: 24, offset: 30721},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 898, col: 24, offset: 30721},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 898, col: 24, offset: 30721},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 898, col: 25, offset: 30722},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 898, col: 25, offset: 30722},
											expr: &litMatcher{
												pos:        position{line: 898, col: 26, offset: 30723},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
										&litMatcher{
											pos:        position{line: 898, col: 30, offset: 30727},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 898, col: 34, offset: 30731},
											expr: &litMatcher{
												pos:        position{line: 898, col: 35, offset: 30732},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 898, col: 40, offset: 30737},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 898, col: 50, offset: 30747},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 898, col: 79, offset: 30776},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 898, col: 83, offset: 30780},
									expr: &notExpr{
										pos: position{line: 898, col: 85, offset: 30782},
										expr: &ruleRefExpr{
											pos:  position{line: 898, col: 86, offset: 30783},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 900, col: 5, offset: 30970},
						run: (*parser).callonSingleQuoteBoldText16,
						expr: &seqExpr{
							pos: position{line: 900, col: 5, offset: 30970},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 900, col: 5, offset: 30970},
									expr: &litMatcher{
										pos:        position{line: 900, col: 6, offset: 30971},
										val:        "\\\\",
										ignoreCase: false,
										want:       "\"\\\\\\\\\"",
									},
								},
								&litMatcher{
									pos:        position{line: 900, col: 11, offset: 30976},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 900, col: 15, offset: 30980},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 900, col: 25, offset: 30990},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 900, col: 25, offset: 30990},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 900, col: 29, offset: 30994},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 900, col: 58, offset: 31023},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 904, col: 1, offset: 31222},
			expr: &seqExpr{
				pos: position{line: 904, col: 32, offset: 31253},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 904, col: 32, offset: 31253},
						expr: &ruleRefExpr{
							pos:  position{line: 904, col: 33, offset: 31254},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 904, col: 39, offset: 31260},
						expr: &ruleRefExpr{
							pos:  position{line: 904, col: 39, offset: 31260},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 906, col: 1, offset: 31289},
			expr: &choiceExpr{
				pos: position{line: 906, col: 31, offset: 31319},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 906, col: 31, offset: 31319},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 907, col: 11, offset: 31335},
						name: "DoubleQuoteBoldText",
					},
					&seqExpr{
						pos: position{line: 908, col: 11, offset: 31365},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 908, col: 11, offset: 31365},
								expr: &ruleRefExpr{
									pos:  position{line: 908, col: 11, offset: 31365},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 908, col: 18, offset: 31372},
								expr: &seqExpr{
									pos: position{line: 908, col: 19, offset: 31373},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 908, col: 19, offset: 31373},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 908, col: 23, offset: 31377},
											expr: &litMatcher{
												pos:        position{line: 908, col: 24, offset: 31378},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 909, col: 11, offset: 31394},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 910, col: 11, offset: 31416},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 911, col: 11, offset: 31440},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 912, col: 11, offset: 31464},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 913, col: 11, offset: 31490},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 914, col: 11, offset: 31513},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 915, col: 11, offset: 31530},
						name: "Passthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 916, col: 11, offset: 31553},
						name: "DocumentAttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 917, col: 11, offset: 31593},
						name: "SingleQuoteBoldTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 918, col: 11, offset: 31636},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextStringElement",
			pos:  position{line: 920, col: 1, offset: 31674},
			expr: &actionExpr{
				pos: position{line: 920, col: 37, offset: 31710},
				run: (*parser).callonSingleQuoteBoldTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 920, col: 37, offset: 31710},
					expr: &charClassMatcher{
						pos:        position{line: 920, col: 37, offset: 31710},
						val:        "[^\\r\\n{} *^~]",
						chars:      []rune{'\r', '\n', '{', '}', ' ', '*', '^', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 924, col: 1, offset: 31944},
			expr: &choiceExpr{
				pos: position{line: 925, col: 5, offset: 31989},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 925, col: 5, offset: 31989},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 926, col: 7, offset: 32086},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 926, col: 7, offset: 32086},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 926, col: 7, offset: 32086},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 926, col: 11, offset: 32090},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 930, col: 1, offset: 32253},
			expr: &choiceExpr{
				pos: position{line: 931, col: 5, offset: 32277},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 931, col: 5, offset: 32277},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 931, col: 5, offset: 32277},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 931, col: 5, offset: 32277},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 931, col: 18, offset: 32290},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 931, col: 40, offset: 32312},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 931, col: 45, offset: 32317},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 931, col: 55, offset: 32327},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 931, col: 84, offset: 32356},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 933, col: 9, offset: 32513},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 933, col: 9, offset: 32513},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 933, col: 9, offset: 32513},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 933, col: 22, offset: 32526},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 933, col: 44, offset: 32548},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 933, col: 49, offset: 32553},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 933, col: 59, offset: 32563},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 933, col: 88, offset: 32592},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 936, col: 9, offset: 32792},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 936, col: 9, offset: 32792},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 936, col: 9, offset: 32792},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 936, col: 22, offset: 32805},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 936, col: 44, offset: 32827},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 936, col: 48, offset: 32831},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 936, col: 58, offset: 32841},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 936, col: 87, offset: 32870},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 944, col: 1, offset: 33078},
			expr: &choiceExpr{
				pos: position{line: 944, col: 15, offset: 33092},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 944, col: 15, offset: 33092},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 944, col: 39, offset: 33116},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 946, col: 1, offset: 33139},
			expr: &actionExpr{
				pos: position{line: 946, col: 26, offset: 33164},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 946, col: 26, offset: 33164},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 946, col: 26, offset: 33164},
							expr: &litMatcher{
								pos:        position{line: 946, col: 27, offset: 33165},
								val:        "\\\\",
								ignoreCase: false,
								want:       "\"\\\\\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 946, col: 32, offset: 33170},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 946, col: 37, offset: 33175},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 946, col: 47, offset: 33185},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 946, col: 78, offset: 33216},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 950, col: 1, offset: 33343},
			expr: &seqExpr{
				pos: position{line: 950, col: 34, offset: 33376},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 950, col: 34, offset: 33376},
						name: "DoubleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 950, col: 63, offset: 33405},
						expr: &seqExpr{
							pos: position{line: 950, col: 64, offset: 33406},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 950, col: 64, offset: 33406},
									expr: &litMatcher{
										pos:        position{line: 950, col: 66, offset: 33408},
										val:        "__",
										ignoreCase: false,
										want:       "\"__\"",
									},
								},
								&choiceExpr{
									pos: position{line: 950, col: 73, offset: 33415},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 950, col: 73, offset: 33415},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 950, col: 81, offset: 33423},
											name: "DoubleQuoteItalicTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 952, col: 1, offset: 33490},
			expr: &choiceExpr{
				pos: position{line: 952, col: 33, offset: 33522},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 952, col: 33, offset: 33522},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 953, col: 11, offset: 33538},
						name: "SingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 954, col: 11, offset: 33571},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 955, col: 11, offset: 33591},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 956, col: 11, offset: 33615},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 957, col: 11, offset: 33639},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 958, col: 11, offset: 33665},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 959, col: 11, offset: 33688},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 960, col: 11, offset: 33704},
						name: "Passthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 961, col: 11, offset: 33727},
						name: "DoubleQuoteItalicTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 962, col: 11, offset: 33772},
						name: "DoubleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextStringElement",
			pos:  position{line: 964, col: 1, offset: 33812},
			expr: &actionExpr{
				pos: position{line: 964, col: 39, offset: 33850},
				run: (*parser).callonDoubleQuoteItalicTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 964, col: 39, offset: 33850},
					expr: &seqExpr{
						pos: position{line: 964, col: 40, offset: 33851},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 964, col: 40, offset: 33851},
								expr: &litMatcher{
									pos:        position{line: 964, col: 41, offset: 33852},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
							&charClassMatcher{
								pos:        position{line: 964, col: 46, offset: 33857},
								val:        "[^\\r\\n ^~{}]",
								chars:      []rune{'\r', '\n', ' ', '^', '~', '{', '}'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 968, col: 1, offset: 33928},
			expr: &choiceExpr{
				pos: position{line: 969, col: 5, offset: 33975},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 969, col: 5, offset: 33975},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 970, col: 7, offset: 34074},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 970, col: 7, offset: 34074},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 970, col: 7, offset: 34074},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 970, col: 12, offset: 34079},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 974, col: 1, offset: 34244},
			expr: &choiceExpr{
				pos: position{line: 974, col: 26, offset: 34269},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 974, col: 26, offset: 34269},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 974, col: 26, offset: 34269},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 974, col: 27, offset: 34270},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 974, col: 27, offset: 34270},
											expr: &litMatcher{
												pos:        position{line: 974, col: 28, offset: 34271},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
										&litMatcher{
											pos:        position{line: 974, col: 32, offset: 34275},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 974, col: 36, offset: 34279},
											expr: &litMatcher{
												pos:        position{line: 974, col: 37, offset: 34280},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 974, col: 42, offset: 34285},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 974, col: 52, offset: 34295},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 974, col: 83, offset: 34326},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 976, col: 5, offset: 34509},
						run: (*parser).callonSingleQuoteItalicText13,
						expr: &seqExpr{
							pos: position{line: 976, col: 5, offset: 34509},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 976, col: 5, offset: 34509},
									expr: &litMatcher{
										pos:        position{line: 976, col: 6, offset: 34510},
										val:        "\\\\",
										ignoreCase: false,
										want:       "\"\\\\\\\\\"",
									},
								},
								&litMatcher{
									pos:        position{line: 976, col: 11, offset: 34515},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 976, col: 15, offset: 34519},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 976, col: 25, offset: 34529},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 976, col: 25, offset: 34529},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 976, col: 29, offset: 34533},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 976, col: 60, offset: 34564},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 980, col: 1, offset: 34767},
			expr: &seqExpr{
				pos: position{line: 980, col: 34, offset: 34800},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 980, col: 34, offset: 34800},
						expr: &ruleRefExpr{
							pos:  position{line: 980, col: 35, offset: 34801},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 980, col: 41, offset: 34807},
						expr: &ruleRefExpr{
							pos:  position{line: 980, col: 41, offset: 34807},
							name: "SingleQuoteItalicTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 982, col: 1, offset: 34838},
			expr: &choiceExpr{
				pos: position{line: 982, col: 33, offset: 34870},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 982, col: 33, offset: 34870},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 983, col: 11, offset: 34886},
						name: "DoubleQuoteItalicText",
					},
					&seqExpr{
						pos: position{line: 984, col: 11, offset: 34918},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 984, col: 11, offset: 34918},
								expr: &ruleRefExpr{
									pos:  position{line: 984, col: 11, offset: 34918},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 984, col: 18, offset: 34925},
								expr: &seqExpr{
									pos: position{line: 984, col: 19, offset: 34926},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 984, col: 19, offset: 34926},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 984, col: 23, offset: 34930},
											expr: &litMatcher{
												pos:        position{line: 984, col: 24, offset: 34931},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 985, col: 11, offset: 34947},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 986, col: 11, offset: 34967},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 987, col: 11, offset: 34991},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 988, col: 11, offset: 35015},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 989, col: 11, offset: 35041},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 990, col: 11, offset: 35064},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 991, col: 11, offset: 35081},
						name: "Passthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 992, col: 11, offset: 35104},
						name: "DocumentAttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 993, col: 11, offset: 35144},
						name: "SingleQuoteItalicTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 994, col: 11, offset: 35189},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextStringElement",
			pos:  position{line: 996, col: 1, offset: 35229},
			expr: &actionExpr{
				pos: position{line: 996, col: 39, offset: 35267},
				run: (*parser).callonSingleQuoteItalicTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 996, col: 39, offset: 35267},
					expr: &charClassMatcher{
						pos:        position{line: 996, col: 39, offset: 35267},
						val:        "[^\\r\\n{} _^~]",
						chars:      []rune{'\r', '\n', '{', '}', ' ', '_', '^', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1000, col: 1, offset: 35501},
			expr: &choiceExpr{
				pos: position{line: 1001, col: 5, offset: 35548},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1001, col: 5, offset: 35548},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1002, col: 7, offset: 35647},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1002, col: 7, offset: 35647},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1002, col: 7, offset: 35647},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1002, col: 11, offset: 35651},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1006, col: 1, offset: 35817},
			expr: &choiceExpr{
				pos: position{line: 1007, col: 5, offset: 35843},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1007, col: 5, offset: 35843},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1007, col: 5, offset: 35843},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1007, col: 5, offset: 35843},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1007, col: 18, offset: 35856},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1007, col: 40, offset: 35878},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1007, col: 45, offset: 35883},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1007, col: 55, offset: 35893},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1007, col: 86, offset: 35924},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1009, col: 9, offset: 36081},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1009, col: 9, offset: 36081},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1009, col: 9, offset: 36081},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1009, col: 22, offset: 36094},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1009, col: 44, offset: 36116},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1009, col: 49, offset: 36121},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1009, col: 59, offset: 36131},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1009, col: 90, offset: 36162},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1012, col: 9, offset: 36362},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1012, col: 9, offset: 36362},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1012, col: 9, offset: 36362},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1012, col: 22, offset: 36375},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1012, col: 44, offset: 36397},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1012, col: 48, offset: 36401},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1012, col: 58, offset: 36411},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1012, col: 89, offset: 36442},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1019, col: 1, offset: 36652},
			expr: &choiceExpr{
				pos: position{line: 1019, col: 18, offset: 36669},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1019, col: 18, offset: 36669},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1019, col: 45, offset: 36696},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1021, col: 1, offset: 36722},
			expr: &actionExpr{
				pos: position{line: 1021, col: 29, offset: 36750},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1021, col: 29, offset: 36750},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1021, col: 29, offset: 36750},
							expr: &litMatcher{
								pos:        position{line: 1021, col: 30, offset: 36751},
								val:        "\\\\",
								ignoreCase: false,
								want:       "\"\\\\\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 1021, col: 35, offset: 36756},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1021, col: 40, offset: 36761},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1021, col: 50, offset: 36771},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1021, col: 84, offset: 36805},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1025, col: 1, offset: 36935},
			expr: &seqExpr{
				pos: position{line: 1025, col: 37, offset: 36971},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1025, col: 37, offset: 36971},
						name: "DoubleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1025, col: 69, offset: 37003},
						expr: &seqExpr{
							pos: position{line: 1025, col: 70, offset: 37004},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1025, col: 70, offset: 37004},
									expr: &litMatcher{
										pos:        position{line: 1025, col: 72, offset: 37006},
										val:        "``",
										ignoreCase: false,
										want:       "\"``\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1025, col: 79, offset: 37013},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1025, col: 79, offset: 37013},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1025, col: 87, offset: 37021},
											name: "DoubleQuoteMonospaceTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1027, col: 1, offset: 37090},
			expr: &choiceExpr{
				pos: position{line: 1027, col: 36, offset: 37125},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1027, col: 36, offset: 37125},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1028, col: 11, offset: 37141},
						name: "SingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1029, col: 11, offset: 37177},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1030, col: 11, offset: 37196},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1031, col: 11, offset: 37218},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1032, col: 11, offset: 37242},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1033, col: 11, offset: 37268},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1034, col: 11, offset: 37291},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1035, col: 11, offset: 37307},
						name: "Passthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1036, col: 11, offset: 37330},
						name: "DoubleQuoteMonospaceTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1037, col: 11, offset: 37378},
						name: "DoubleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextStringElement",
			pos:  position{line: 1039, col: 1, offset: 37421},
			expr: &actionExpr{
				pos: position{line: 1039, col: 42, offset: 37462},
				run: (*parser).callonDoubleQuoteMonospaceTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1039, col: 42, offset: 37462},
					expr: &seqExpr{
						pos: position{line: 1039, col: 43, offset: 37463},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1039, col: 43, offset: 37463},
								expr: &litMatcher{
									pos:        position{line: 1039, col: 44, offset: 37464},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
							&charClassMatcher{
								pos:        position{line: 1039, col: 49, offset: 37469},
								val:        "[^\\r\\n ^~{}]",
								chars:      []rune{'\r', '\n', ' ', '^', '~', '{', '}'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1043, col: 1, offset: 37540},
			expr: &choiceExpr{
				pos: position{line: 1044, col: 5, offset: 37590},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1044, col: 5, offset: 37590},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1045, col: 7, offset: 37692},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1045, col: 7, offset: 37692},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1045, col: 7, offset: 37692},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1045, col: 12, offset: 37697},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1049, col: 1, offset: 37865},
			expr: &choiceExpr{
				pos: position{line: 1049, col: 29, offset: 37893},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1049, col: 29, offset: 37893},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1049, col: 29, offset: 37893},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1049, col: 30, offset: 37894},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1049, col: 30, offset: 37894},
											expr: &litMatcher{
												pos:        position{line: 1049, col: 31, offset: 37895},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
										&litMatcher{
											pos:        position{line: 1049, col: 35, offset: 37899},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1049, col: 39, offset: 37903},
											expr: &litMatcher{
												pos:        position{line: 1049, col: 40, offset: 37904},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1049, col: 45, offset: 37909},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1049, col: 55, offset: 37919},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1049, col: 89, offset: 37953},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1051, col: 5, offset: 38139},
						run: (*parser).callonSingleQuoteMonospaceText13,
						expr: &seqExpr{
							pos: position{line: 1051, col: 5, offset: 38139},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1051, col: 5, offset: 38139},
									expr: &litMatcher{
										pos:        position{line: 1051, col: 6, offset: 38140},
										val:        "\\\\",
										ignoreCase: false,
										want:       "\"\\\\\\\\\"",
									},
								},
								&litMatcher{
									pos:        position{line: 1051, col: 11, offset: 38145},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1051, col: 15, offset: 38149},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1051, col: 25, offset: 38159},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1051, col: 25, offset: 38159},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1051, col: 29, offset: 38163},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1051, col: 63, offset: 38197},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1055, col: 1, offset: 38406},
			expr: &seqExpr{
				pos: position{line: 1055, col: 37, offset: 38442},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1055, col: 37, offset: 38442},
						expr: &ruleRefExpr{
							pos:  position{line: 1055, col: 38, offset: 38443},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1055, col: 44, offset: 38449},
						expr: &ruleRefExpr{
							pos:  position{line: 1055, col: 44, offset: 38449},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1057, col: 1, offset: 38483},
			expr: &choiceExpr{
				pos: position{line: 1057, col: 37, offset: 38519},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1057, col: 37, offset: 38519},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1058, col: 11, offset: 38535},
						name: "DoubleQuoteMonospaceText",
					},
					&seqExpr{
						pos: position{line: 1059, col: 11, offset: 38571},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1059, col: 11, offset: 38571},
								expr: &ruleRefExpr{
									pos:  position{line: 1059, col: 11, offset: 38571},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1059, col: 18, offset: 38578},
								expr: &seqExpr{
									pos: position{line: 1059, col: 19, offset: 38579},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1059, col: 19, offset: 38579},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1059, col: 23, offset: 38583},
											expr: &litMatcher{
												pos:        position{line: 1059, col: 24, offset: 38584},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1060, col: 11, offset: 38712},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 1061, col: 11, offset: 38750},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1062, col: 11, offset: 38769},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1063, col: 11, offset: 38790},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1064, col: 11, offset: 38814},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1065, col: 11, offset: 38840},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1066, col: 11, offset: 38863},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1067, col: 11, offset: 38879},
						name: "Passthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1068, col: 11, offset: 38902},
						name: "DocumentAttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1069, col: 11, offset: 38942},
						name: "SingleQuoteMonospaceTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1070, col: 11, offset: 38990},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextStringElement",
			pos:  position{line: 1072, col: 1, offset: 39033},
			expr: &actionExpr{
				pos: position{line: 1072, col: 42, offset: 39074},
				run: (*parser).callonSingleQuoteMonospaceTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1072, col: 42, offset: 39074},
					expr: &charClassMatcher{
						pos:        position{line: 1072, col: 42, offset: 39074},
						val:        "[^\\r\\n {}`^~]",
						chars:      []rune{'\r', '\n', ' ', '{', '}', '`', '^', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1076, col: 1, offset: 39300},
			expr: &choiceExpr{
				pos: position{line: 1077, col: 5, offset: 39350},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1077, col: 5, offset: 39350},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1078, col: 7, offset: 39452},
						run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1078, col: 7, offset: 39452},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1078, col: 7, offset: 39452},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1078, col: 11, offset: 39456},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1082, col: 1, offset: 39625},
			expr: &choiceExpr{
				pos: position{line: 1083, col: 5, offset: 39654},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1083, col: 5, offset: 39654},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1083, col: 5, offset: 39654},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1083, col: 5, offset: 39654},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1083, col: 18, offset: 39667},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1083, col: 40, offset: 39689},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1083, col: 45, offset: 39694},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1083, col: 55, offset: 39704},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1083, col: 89, offset: 39738},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1085, col: 9, offset: 39895},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1085, col: 9, offset: 39895},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1085, col: 9, offset: 39895},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1085, col: 22, offset: 39908},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1085, col: 44, offset: 39930},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1085, col: 49, offset: 39935},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1085, col: 59, offset: 39945},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1085, col: 93, offset: 39979},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1088, col: 9, offset: 40179},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1088, col: 9, offset: 40179},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1088, col: 9, offset: 40179},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1088, col: 22, offset: 40192},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1088, col: 44, offset: 40214},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1088, col: 48, offset: 40218},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1088, col: 58, offset: 40228},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1088, col: 92, offset: 40262},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1092, col: 1, offset: 40412},
			expr: &actionExpr{
				pos: position{line: 1092, col: 18, offset: 40429},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1092, col: 18, offset: 40429},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1092, col: 18, offset: 40429},
							expr: &litMatcher{
								pos:        position{line: 1092, col: 19, offset: 40430},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 1092, col: 23, offset: 40434},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1092, col: 27, offset: 40438},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1092, col: 36, offset: 40447},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1092, col: 58, offset: 40469},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1096, col: 1, offset: 40558},
			expr: &choiceExpr{
				pos: position{line: 1096, col: 25, offset: 40582},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1096, col: 25, offset: 40582},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1096, col: 38, offset: 40595},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1098, col: 1, offset: 40614},
			expr: &actionExpr{
				pos: position{line: 1098, col: 21, offset: 40634},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1098, col: 21, offset: 40634},
					expr: &charClassMatcher{
						pos:        position{line: 1098, col: 21, offset: 40634},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1102, col: 1, offset: 40711},
			expr: &actionExpr{
				pos: position{line: 1102, col: 25, offset: 40735},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1102, col: 25, offset: 40735},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1102, col: 25, offset: 40735},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1102, col: 38, offset: 40748},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1102, col: 60, offset: 40770},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1102, col: 64, offset: 40774},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1102, col: 73, offset: 40783},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1102, col: 95, offset: 40805},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1106, col: 1, offset: 40934},
			expr: &actionExpr{
				pos: position{line: 1106, col: 20, offset: 40953},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1106, col: 20, offset: 40953},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1106, col: 20, offset: 40953},
							expr: &litMatcher{
								pos:        position{line: 1106, col: 21, offset: 40954},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 1106, col: 25, offset: 40958},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1106, col: 29, offset: 40962},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1106, col: 38, offset: 40971},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1106, col: 62, offset: 40995},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1110, col: 1, offset: 41086},
			expr: &choiceExpr{
				pos: position{line: 1110, col: 27, offset: 41112},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1110, col: 27, offset: 41112},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1110, col: 40, offset: 41125},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1112, col: 1, offset: 41146},
			expr: &actionExpr{
				pos: position{line: 1112, col: 23, offset: 41168},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1112, col: 23, offset: 41168},
					expr: &charClassMatcher{
						pos:        position{line: 1112, col: 23, offset: 41168},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1116, col: 1, offset: 41245},
			expr: &actionExpr{
				pos: position{line: 1116, col: 27, offset: 41271},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1116, col: 27, offset: 41271},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1116, col: 27, offset: 41271},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1116, col: 40, offset: 41284},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1116, col: 62, offset: 41306},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1116, col: 66, offset: 41310},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1116, col: 75, offset: 41319},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1116, col: 99, offset: 41343},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "Passthrough",
			pos:  position{line: 1123, col: 1, offset: 41579},
			expr: &choiceExpr{
				pos: position{line: 1123, col: 16, offset: 41594},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1123, col: 16, offset: 41594},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1123, col: 40, offset: 41618},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1123, col: 64, offset: 41642},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1125, col: 1, offset: 41660},
			expr: &litMatcher{
				pos:        position{line: 1125, col: 32, offset: 41691},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1127, col: 1, offset: 41696},
			expr: &actionExpr{
				pos: position{line: 1127, col: 26, offset: 41721},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1127, col: 26, offset: 41721},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1127, col: 26, offset: 41721},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1127, col: 54, offset: 41749},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1127, col: 63, offset: 41758},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1127, col: 93, offset: 41788},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1127, col: 121, offset: 41816},
							expr: &ruleRefExpr{
								pos:  position{line: 1127, col: 122, offset: 41817},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1131, col: 1, offset: 41916},
			expr: &choiceExpr{
				pos: position{line: 1131, col: 33, offset: 41948},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1131, col: 34, offset: 41949},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1131, col: 34, offset: 41949},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1131, col: 35, offset: 41950},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1131, col: 35, offset: 41950},
											expr: &ruleRefExpr{
												pos:  position{line: 1131, col: 36, offset: 41951},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1131, col: 64, offset: 41979},
											expr: &ruleRefExpr{
												pos:  position{line: 1131, col: 65, offset: 41980},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 1131, col: 71, offset: 41986},
											expr: &ruleRefExpr{
												pos:  position{line: 1131, col: 72, offset: 41987},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 1131, col: 80, offset: 41995,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1131, col: 83, offset: 41998},
									expr: &seqExpr{
										pos: position{line: 1131, col: 84, offset: 41999},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1131, col: 84, offset: 41999},
												expr: &seqExpr{
													pos: position{line: 1131, col: 86, offset: 42001},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1131, col: 86, offset: 42001},
															expr: &ruleRefExpr{
																pos:  position{line: 1131, col: 86, offset: 42001},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1131, col: 93, offset: 42008},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1131, col: 122, offset: 42037},
												expr: &ruleRefExpr{
													pos:  position{line: 1131, col: 123, offset: 42038},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1131, col: 151, offset: 42066},
												expr: &ruleRefExpr{
													pos:  position{line: 1131, col: 152, offset: 42067},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 1131, col: 160, offset: 42075,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1133, col: 7, offset: 42217},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1133, col: 8, offset: 42218},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1133, col: 8, offset: 42218},
									expr: &ruleRefExpr{
										pos:  position{line: 1133, col: 9, offset: 42219},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 1133, col: 15, offset: 42225},
									expr: &ruleRefExpr{
										pos:  position{line: 1133, col: 16, offset: 42226},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1133, col: 24, offset: 42234},
									expr: &ruleRefExpr{
										pos:  position{line: 1133, col: 25, offset: 42235},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1133, col: 53, offset: 42263,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1137, col: 1, offset: 42345},
			expr: &litMatcher{
				pos:        position{line: 1137, col: 32, offset: 42376},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1139, col: 1, offset: 42383},
			expr: &actionExpr{
				pos: position{line: 1139, col: 26, offset: 42408},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1139, col: 26, offset: 42408},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1139, col: 26, offset: 42408},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1139, col: 54, offset: 42436},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1139, col: 63, offset: 42445},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1139, col: 93, offset: 42475},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1139, col: 121, offset: 42503},
							expr: &ruleRefExpr{
								pos:  position{line: 1139, col: 122, offset: 42504},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1143, col: 1, offset: 42603},
			expr: &choiceExpr{
				pos: position{line: 1143, col: 33, offset: 42635},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1143, col: 34, offset: 42636},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1143, col: 34, offset: 42636},
							expr: &seqExpr{
								pos: position{line: 1143, col: 35, offset: 42637},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1143, col: 35, offset: 42637},
										expr: &ruleRefExpr{
											pos:  position{line: 1143, col: 36, offset: 42638},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1143, col: 64, offset: 42666,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1145, col: 7, offset: 42831},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1145, col: 7, offset: 42831},
							expr: &seqExpr{
								pos: position{line: 1145, col: 8, offset: 42832},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1145, col: 8, offset: 42832},
										expr: &ruleRefExpr{
											pos:  position{line: 1145, col: 9, offset: 42833},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1145, col: 15, offset: 42839},
										expr: &ruleRefExpr{
											pos:  position{line: 1145, col: 16, offset: 42840},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1145, col: 24, offset: 42848},
										expr: &ruleRefExpr{
											pos:  position{line: 1145, col: 25, offset: 42849},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1145, col: 53, offset: 42877,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1149, col: 1, offset: 42960},
			expr: &choiceExpr{
				pos: position{line: 1149, col: 21, offset: 42980},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1149, col: 21, offset: 42980},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1149, col: 21, offset: 42980},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1149, col: 21, offset: 42980},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1149, col: 30, offset: 42989},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1149, col: 38, offset: 42997},
										expr: &ruleRefExpr{
											pos:  position{line: 1149, col: 39, offset: 42998},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1149, col: 67, offset: 43026},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1151, col: 5, offset: 43116},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1151, col: 5, offset: 43116},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1151, col: 5, offset: 43116},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 1151, col: 15, offset: 43126},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1151, col: 23, offset: 43134},
										expr: &choiceExpr{
											pos: position{line: 1151, col: 24, offset: 43135},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1151, col: 24, offset: 43135},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1151, col: 37, offset: 43148},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1151, col: 65, offset: 43176},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1155, col: 1, offset: 43266},
			expr: &actionExpr{
				pos: position{line: 1155, col: 30, offset: 43295},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 1155, col: 30, offset: 43295},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1162, col: 1, offset: 43468},
			expr: &choiceExpr{
				pos: position{line: 1162, col: 19, offset: 43486},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1162, col: 19, offset: 43486},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1162, col: 44, offset: 43511},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1164, col: 1, offset: 43536},
			expr: &choiceExpr{
				pos: position{line: 1164, col: 27, offset: 43562},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1164, col: 27, offset: 43562},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1164, col: 27, offset: 43562},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1164, col: 27, offset: 43562},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1164, col: 32, offset: 43567},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1164, col: 36, offset: 43571},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1164, col: 40, offset: 43575},
									expr: &ruleRefExpr{
										pos:  position{line: 1164, col: 40, offset: 43575},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 1164, col: 47, offset: 43582},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 1164, col: 51, offset: 43586},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1164, col: 58, offset: 43593},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1164, col: 79, offset: 43614},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1166, col: 5, offset: 43697},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1166, col: 5, offset: 43697},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1166, col: 5, offset: 43697},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1166, col: 10, offset: 43702},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1166, col: 14, offset: 43706},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1166, col: 18, offset: 43710},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 1170, col: 1, offset: 43782},
			expr: &actionExpr{
				pos: position{line: 1170, col: 27, offset: 43808},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1170, col: 27, offset: 43808},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1170, col: 27, offset: 43808},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 1170, col: 35, offset: 43816},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1170, col: 40, offset: 43821},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1170, col: 54, offset: 43835},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1170, col: 72, offset: 43853},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1174, col: 1, offset: 43983},
			expr: &ruleRefExpr{
				pos:  position{line: 1174, col: 24, offset: 44006},
				name: "ElementTitleContent",
			},
		},
		{
			name: "Link",
			pos:  position{line: 1179, col: 1, offset: 44128},
			expr: &choiceExpr{
				pos: position{line: 1179, col: 9, offset: 44136},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1179, col: 9, offset: 44136},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1179, col: 24, offset: 44151},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1182, col: 1, offset: 44232},
			expr: &actionExpr{
				pos: position{line: 1182, col: 17, offset: 44248},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1182, col: 17, offset: 44248},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1182, col: 17, offset: 44248},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1182, col: 25, offset: 44256},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1182, col: 30, offset: 44261},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1182, col: 40, offset: 44271},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1182, col: 58, offset: 44289},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1186, col: 1, offset: 44407},
			expr: &actionExpr{
				pos: position{line: 1186, col: 17, offset: 44423},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1186, col: 17, offset: 44423},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1186, col: 17, offset: 44423},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1186, col: 22, offset: 44428},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 1186, col: 42, offset: 44448},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1186, col: 59, offset: 44465},
								expr: &ruleRefExpr{
									pos:  position{line: 1186, col: 60, offset: 44466},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1190, col: 1, offset: 44559},
			expr: &actionExpr{
				pos: position{line: 1190, col: 19, offset: 44577},
				run: (*parser).callonLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1190, col: 19, offset: 44577},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1190, col: 19, offset: 44577},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1190, col: 23, offset: 44581},
							label: "firstAttr",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1190, col: 33, offset: 44591},
								expr: &ruleRefExpr{
									pos:  position{line: 1190, col: 34, offset: 44592},
									name: "FirstLinkAttributeElement",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1191, col: 5, offset: 44624},
							expr: &ruleRefExpr{
								pos:  position{line: 1191, col: 5, offset: 44624},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1191, col: 12, offset: 44631},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1191, col: 23, offset: 44642},
								expr: &ruleRefExpr{
									pos:  position{line: 1191, col: 24, offset: 44643},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1191, col: 43, offset: 44662},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstLinkAttributeElement",
			pos:  position{line: 1195, col: 1, offset: 44779},
			expr: &actionExpr{
				pos: position{line: 1195, col: 30, offset: 44808},
				run: (*parser).callonFirstLinkAttributeElement1,
				expr: &labeledExpr{
					pos:   position{line: 1195, col: 30, offset: 44808},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1197, col: 5, offset: 44859},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 1197, col: 6, offset: 44860},
								run: (*parser).callonFirstLinkAttributeElement4,
								expr: &seqExpr{
									pos: position{line: 1197, col: 6, offset: 44860},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1197, col: 6, offset: 44860},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&labeledExpr{
											pos:   position{line: 1197, col: 11, offset: 44865},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1197, col: 20, offset: 44874},
												expr: &choiceExpr{
													pos: position{line: 1197, col: 21, offset: 44875},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1197, col: 21, offset: 44875},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1197, col: 34, offset: 44888},
															name: "QuotedAttributeChar",
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 1197, col: 56, offset: 44910},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&andExpr{
											pos: position{line: 1197, col: 61, offset: 44915},
											expr: &notExpr{
												pos: position{line: 1197, col: 63, offset: 44917},
												expr: &litMatcher{
													pos:        position{line: 1197, col: 64, offset: 44918},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1197, col: 69, offset: 44923},
											expr: &litMatcher{
												pos:        position{line: 1197, col: 69, offset: 44923},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 1201, col: 6, offset: 45050},
								run: (*parser).callonFirstLinkAttributeElement18,
								expr: &seqExpr{
									pos: position{line: 1201, col: 6, offset: 45050},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1201, col: 6, offset: 45050},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1201, col: 15, offset: 45059},
												expr: &choiceExpr{
													pos: position{line: 1201, col: 16, offset: 45060},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1201, col: 16, offset: 45060},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1201, col: 29, offset: 45073},
															name: "UnquotedAttributeChar",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 1201, col: 53, offset: 45097},
											expr: &notExpr{
												pos: position{line: 1201, col: 55, offset: 45099},
												expr: &litMatcher{
													pos:        position{line: 1201, col: 56, offset: 45100},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1201, col: 61, offset: 45105},
											expr: &litMatcher{
												pos:        position{line: 1201, col: 61, offset: 45105},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeChar",
			pos:  position{line: 1207, col: 1, offset: 45219},
			expr: &actionExpr{
				pos: position{line: 1207, col: 18, offset: 45236},
				run: (*parser).callonAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1207, col: 18, offset: 45236},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "QuotedAttributeChar",
			pos:  position{line: 1211, col: 1, offset: 45322},
			expr: &actionExpr{
				pos: position{line: 1211, col: 24, offset: 45345},
				run: (*parser).callonQuotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1211, col: 24, offset: 45345},
					val:        "[^\\r\\n\"=\\]]",
					chars:      []rune{'\r', '\n', '"', '=', ']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "UnquotedAttributeChar",
			pos:  position{line: 1215, col: 1, offset: 45438},
			expr: &actionExpr{
				pos: position{line: 1215, col: 26, offset: 45463},
				run: (*parser).callonUnquotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1215, col: 26, offset: 45463},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "InlineLinks",
			pos:  position{line: 1220, col: 1, offset: 45620},
			expr: &actionExpr{
				pos: position{line: 1221, col: 5, offset: 45640},
				run: (*parser).callonInlineLinks1,
				expr: &seqExpr{
					pos: position{line: 1221, col: 5, offset: 45640},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1221, col: 5, offset: 45640},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1221, col: 14, offset: 45649},
								expr: &choiceExpr{
									pos: position{line: 1221, col: 15, offset: 45650},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1221, col: 15, offset: 45650},
											name: "Word",
										},
										&oneOrMoreExpr{
											pos: position{line: 1222, col: 11, offset: 45665},
											expr: &ruleRefExpr{
												pos:  position{line: 1222, col: 11, offset: 45665},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1223, col: 11, offset: 45683},
											name: "ResolvedLink",
										},
										&ruleRefExpr{
											pos:  position{line: 1224, col: 11, offset: 45707},
											name: "Parenthesis",
										},
										&ruleRefExpr{
											pos:  position{line: 1225, col: 11, offset: 45729},
											name: "AnyChar",
										},
										&ruleRefExpr{
											pos:  position{line: 1226, col: 11, offset: 45747},
											name: "Newline",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1226, col: 21, offset: 45757},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ResolvedLink",
			pos:  position{line: 1230, col: 1, offset: 45827},
			expr: &choiceExpr{
				pos: position{line: 1230, col: 17, offset: 45843},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1230, col: 17, offset: 45843},
						name: "ResolvedRelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1230, col: 40, offset: 45866},
						name: "ResolvedExternalLink",
					},
				},
			},
		},
		{
			name: "ResolvedRelativeLink",
			pos:  position{line: 1233, col: 1, offset: 46002},
			expr: &actionExpr{
				pos: position{line: 1233, col: 25, offset: 46026},
				run: (*parser).callonResolvedRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1233, col: 25, offset: 46026},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1233, col: 25, offset: 46026},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1233, col: 33, offset: 46034},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1233, col: 38, offset: 46039},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1233, col: 38, offset: 46039},
										name: "ResolvedLocation",
									},
									&ruleRefExpr{
										pos:  position{line: 1233, col: 57, offset: 46058},
										name: "ResolvedFileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1233, col: 79, offset: 46080},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1233, col: 97, offset: 46098},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedExternalLink",
			pos:  position{line: 1237, col: 1, offset: 46216},
			expr: &actionExpr{
				pos: position{line: 1237, col: 25, offset: 46240},
				run: (*parser).callonResolvedExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1237, col: 25, offset: 46240},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1237, col: 25, offset: 46240},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1237, col: 30, offset: 46245},
								name: "ResolvedLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1237, col: 48, offset: 46263},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1237, col: 65, offset: 46280},
								expr: &ruleRefExpr{
									pos:  position{line: 1237, col: 66, offset: 46281},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1244, col: 1, offset: 46476},
			expr: &actionExpr{
				pos: position{line: 1244, col: 15, offset: 46490},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1244, col: 15, offset: 46490},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1244, col: 15, offset: 46490},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1244, col: 26, offset: 46501},
								expr: &ruleRefExpr{
									pos:  position{line: 1244, col: 27, offset: 46502},
									name: "ElementAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1244, col: 47, offset: 46522},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 1244, col: 57, offset: 46532},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1244, col: 63, offset: 46538},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1244, col: 73, offset: 46548},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1244, col: 91, offset: 46566},
								name: "ImageAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1244, col: 108, offset: 46583},
							expr: &ruleRefExpr{
								pos:  position{line: 1244, col: 108, offset: 46583},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1244, col: 115, offset: 46590},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1248, col: 1, offset: 46709},
			expr: &actionExpr{
				pos: position{line: 1248, col: 16, offset: 46724},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1248, col: 16, offset: 46724},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1248, col: 16, offset: 46724},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 1248, col: 25, offset: 46733},
							expr: &litMatcher{
								pos:        position{line: 1248, col: 26, offset: 46734},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1248, col: 30, offset: 46738},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1248, col: 36, offset: 46744},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1248, col: 46, offset: 46754},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1248, col: 64, offset: 46772},
								name: "ImageAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAttributes",
			pos:  position{line: 1252, col: 1, offset: 46893},
			expr: &actionExpr{
				pos: position{line: 1252, col: 20, offset: 46912},
				run: (*parser).callonImageAttributes1,
				expr: &seqExpr{
					pos: position{line: 1252, col: 20, offset: 46912},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1252, col: 20, offset: 46912},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1252, col: 24, offset: 46916},
							label: "alt",
							expr: &zeroOrOneExpr{
								pos: position{line: 1252, col: 28, offset: 46920},
								expr: &ruleRefExpr{
									pos:  position{line: 1252, col: 29, offset: 46921},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1252, col: 56, offset: 46948},
							expr: &litMatcher{
								pos:        position{line: 1252, col: 56, offset: 46948},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1252, col: 61, offset: 46953},
							label: "width",
							expr: &zeroOrOneExpr{
								pos: position{line: 1252, col: 67, offset: 46959},
								expr: &ruleRefExpr{
									pos:  position{line: 1252, col: 68, offset: 46960},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1252, col: 95, offset: 46987},
							expr: &litMatcher{
								pos:        position{line: 1252, col: 95, offset: 46987},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1252, col: 100, offset: 46992},
							label: "height",
							expr: &zeroOrOneExpr{
								pos: position{line: 1252, col: 107, offset: 46999},
								expr: &ruleRefExpr{
									pos:  position{line: 1252, col: 108, offset: 47000},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1252, col: 135, offset: 47027},
							expr: &litMatcher{
								pos:        position{line: 1252, col: 135, offset: 47027},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1252, col: 140, offset: 47032},
							expr: &ruleRefExpr{
								pos:  position{line: 1252, col: 140, offset: 47032},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1252, col: 147, offset: 47039},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1252, col: 158, offset: 47050},
								expr: &ruleRefExpr{
									pos:  position{line: 1252, col: 159, offset: 47051},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1252, col: 178, offset: 47070},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1259, col: 1, offset: 47360},
			expr: &choiceExpr{
				pos: position{line: 1259, col: 19, offset: 47378},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1259, col: 19, offset: 47378},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1259, col: 19, offset: 47378},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1259, col: 19, offset: 47378},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1259, col: 32, offset: 47391},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1259, col: 41, offset: 47400},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1259, col: 58, offset: 47417},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1261, col: 5, offset: 47485},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1261, col: 5, offset: 47485},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1261, col: 5, offset: 47485},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 1261, col: 17, offset: 47497},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1261, col: 22, offset: 47502},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1261, col: 35, offset: 47515},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 1261, col: 39, offset: 47519},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 1261, col: 47, offset: 47527},
										expr: &ruleRefExpr{
											pos:  position{line: 1261, col: 48, offset: 47528},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1261, col: 66, offset: 47546},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1265, col: 1, offset: 47607},
			expr: &ruleRefExpr{
				pos:  position{line: 1265, col: 16, offset: 47622},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1267, col: 1, offset: 47633},
			expr: &actionExpr{
				pos: position{line: 1267, col: 20, offset: 47652},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1267, col: 20, offset: 47652},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1267, col: 29, offset: 47661},
						expr: &seqExpr{
							pos: position{line: 1267, col: 30, offset: 47662},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1267, col: 30, offset: 47662},
									expr: &litMatcher{
										pos:        position{line: 1267, col: 31, offset: 47663},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1267, col: 35, offset: 47667},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1274, col: 1, offset: 47991},
			expr: &actionExpr{
				pos: position{line: 1274, col: 19, offset: 48009},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1274, col: 19, offset: 48009},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1274, col: 19, offset: 48009},
							expr: &ruleRefExpr{
								pos:  position{line: 1274, col: 20, offset: 48010},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1275, col: 5, offset: 48098},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1275, col: 12, offset: 48105},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1275, col: 12, offset: 48105},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1276, col: 11, offset: 48128},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1277, col: 11, offset: 48152},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1278, col: 11, offset: 48176},
										name: "VerseBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1279, col: 11, offset: 48198},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1280, col: 11, offset: 48220},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1281, col: 11, offset: 48243},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1282, col: 11, offset: 48271},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1283, col: 11, offset: 48287},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1287, col: 1, offset: 48328},
			expr: &choiceExpr{
				pos: position{line: 1287, col: 19, offset: 48346},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1287, col: 19, offset: 48346},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1287, col: 19, offset: 48346},
								expr: &ruleRefExpr{
									pos:  position{line: 1287, col: 21, offset: 48348},
									name: "Alphanum",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1287, col: 31, offset: 48358},
								name: "LiteralBlockDelimiter",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1288, col: 19, offset: 48429},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1289, col: 19, offset: 48469},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1290, col: 19, offset: 48510},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1291, col: 19, offset: 48551},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1292, col: 19, offset: 48592},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1293, col: 19, offset: 48630},
						name: "SidebarBlockDelimiter",
					},
				},
			},
		},
		{
			name: "VerbatimContent",
			pos:  position{line: 1295, col: 1, offset: 48653},
			expr: &choiceExpr{
				pos: position{line: 1295, col: 20, offset: 48672},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1295, col: 20, offset: 48672},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1295, col: 36, offset: 48688},
						name: "VerbatimLine",
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1300, col: 1, offset: 48897},
			expr: &seqExpr{
				pos: position{line: 1300, col: 25, offset: 48921},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1300, col: 25, offset: 48921},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1300, col: 31, offset: 48927},
						expr: &ruleRefExpr{
							pos:  position{line: 1300, col: 31, offset: 48927},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1300, col: 38, offset: 48934},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockStartDelimiter",
			pos:  position{line: 1302, col: 1, offset: 48994},
			expr: &seqExpr{
				pos: position{line: 1302, col: 30, offset: 49023},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1302, col: 30, offset: 49023},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1302, col: 36, offset: 49029},
						expr: &ruleRefExpr{
							pos:  position{line: 1302, col: 36, offset: 49029},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1302, col: 43, offset: 49036},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockEndDelimiter",
			pos:  position{line: 1304, col: 1, offset: 49041},
			expr: &choiceExpr{
				pos: position{line: 1304, col: 28, offset: 49068},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1304, col: 29, offset: 49069},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1304, col: 29, offset: 49069},
								val:        "```",
								ignoreCase: false,
								want:       "\"```\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1304, col: 35, offset: 49075},
								expr: &ruleRefExpr{
									pos:  position{line: 1304, col: 35, offset: 49075},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1304, col: 42, offset: 49082},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1304, col: 49, offset: 49089},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1306, col: 1, offset: 49094},
			expr: &actionExpr{
				pos: position{line: 1306, col: 16, offset: 49109},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1306, col: 16, offset: 49109},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1306, col: 16, offset: 49109},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1306, col: 27, offset: 49120},
								expr: &ruleRefExpr{
									pos:  position{line: 1306, col: 28, offset: 49121},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1306, col: 48, offset: 49141},
							name: "FencedBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1306, col: 74, offset: 49167},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1306, col: 83, offset: 49176},
								name: "FencedBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1306, col: 111, offset: 49204},
							name: "FencedBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockVerbatimContent",
			pos:  position{line: 1310, col: 1, offset: 49319},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1310, col: 31, offset: 49349},
				expr: &actionExpr{
					pos: position{line: 1310, col: 32, offset: 49350},
					run: (*parser).callonFencedBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1310, col: 32, offset: 49350},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1310, col: 32, offset: 49350},
								expr: &ruleRefExpr{
									pos:  position{line: 1310, col: 33, offset: 49351},
									name: "FencedBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1310, col: 57, offset: 49375},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1310, col: 66, offset: 49384},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1317, col: 1, offset: 49721},
			expr: &seqExpr{
				pos: position{line: 1317, col: 26, offset: 49746},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1317, col: 26, offset: 49746},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1317, col: 33, offset: 49753},
						expr: &ruleRefExpr{
							pos:  position{line: 1317, col: 33, offset: 49753},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1317, col: 40, offset: 49760},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockStartDelimiter",
			pos:  position{line: 1319, col: 1, offset: 49765},
			expr: &seqExpr{
				pos: position{line: 1319, col: 31, offset: 49795},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1319, col: 31, offset: 49795},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1319, col: 38, offset: 49802},
						expr: &ruleRefExpr{
							pos:  position{line: 1319, col: 38, offset: 49802},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1319, col: 45, offset: 49809},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockEndDelimiter",
			pos:  position{line: 1321, col: 1, offset: 49814},
			expr: &choiceExpr{
				pos: position{line: 1321, col: 29, offset: 49842},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1321, col: 30, offset: 49843},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1321, col: 30, offset: 49843},
								val:        "----",
								ignoreCase: false,
								want:       "\"----\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1321, col: 37, offset: 49850},
								expr: &ruleRefExpr{
									pos:  position{line: 1321, col: 37, offset: 49850},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1321, col: 44, offset: 49857},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1321, col: 51, offset: 49864},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1323, col: 1, offset: 49869},
			expr: &actionExpr{
				pos: position{line: 1323, col: 17, offset: 49885},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1323, col: 17, offset: 49885},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1323, col: 17, offset: 49885},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1323, col: 28, offset: 49896},
								expr: &ruleRefExpr{
									pos:  position{line: 1323, col: 29, offset: 49897},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1323, col: 49, offset: 49917},
							name: "ListingBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1323, col: 76, offset: 49944},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1323, col: 85, offset: 49953},
								name: "ListingBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1323, col: 114, offset: 49982},
							name: "ListingBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockVerbatimContent",
			pos:  position{line: 1327, col: 1, offset: 50099},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1327, col: 32, offset: 50130},
				expr: &actionExpr{
					pos: position{line: 1327, col: 33, offset: 50131},
					run: (*parser).callonListingBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1327, col: 33, offset: 50131},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1327, col: 33, offset: 50131},
								expr: &ruleRefExpr{
									pos:  position{line: 1327, col: 34, offset: 50132},
									name: "ListingBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1327, col: 59, offset: 50157},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1327, col: 68, offset: 50166},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1334, col: 1, offset: 50503},
			expr: &seqExpr{
				pos: position{line: 1334, col: 26, offset: 50528},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1334, col: 26, offset: 50528},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1334, col: 33, offset: 50535},
						expr: &ruleRefExpr{
							pos:  position{line: 1334, col: 33, offset: 50535},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1334, col: 40, offset: 50542},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockStartDelimiter",
			pos:  position{line: 1336, col: 1, offset: 50547},
			expr: &seqExpr{
				pos: position{line: 1336, col: 31, offset: 50577},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1336, col: 31, offset: 50577},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1336, col: 38, offset: 50584},
						expr: &ruleRefExpr{
							pos:  position{line: 1336, col: 38, offset: 50584},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1336, col: 45, offset: 50591},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockEndDelimiter",
			pos:  position{line: 1338, col: 1, offset: 50596},
			expr: &choiceExpr{
				pos: position{line: 1338, col: 29, offset: 50624},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1338, col: 30, offset: 50625},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1338, col: 30, offset: 50625},
								val:        "====",
								ignoreCase: false,
								want:       "\"====\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1338, col: 37, offset: 50632},
								expr: &ruleRefExpr{
									pos:  position{line: 1338, col: 37, offset: 50632},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1338, col: 44, offset: 50639},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1338, col: 51, offset: 50646},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1340, col: 1, offset: 50651},
			expr: &actionExpr{
				pos: position{line: 1340, col: 17, offset: 50667},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1340, col: 17, offset: 50667},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1340, col: 17, offset: 50667},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1340, col: 28, offset: 50678},
								expr: &ruleRefExpr{
									pos:  position{line: 1340, col: 29, offset: 50679},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1340, col: 49, offset: 50699},
							name: "ExampleBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1340, col: 76, offset: 50726},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1340, col: 85, offset: 50735},
								name: "ExampleBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1340, col: 114, offset: 50764},
							name: "ExampleBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockVerbatimContent",
			pos:  position{line: 1344, col: 1, offset: 50881},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1344, col: 32, offset: 50912},
				expr: &actionExpr{
					pos: position{line: 1344, col: 33, offset: 50913},
					run: (*parser).callonExampleBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1344, col: 33, offset: 50913},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1344, col: 33, offset: 50913},
								expr: &ruleRefExpr{
									pos:  position{line: 1344, col: 34, offset: 50914},
									name: "ExampleBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1344, col: 59, offset: 50939},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1344, col: 68, offset: 50948},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1351, col: 1, offset: 51283},
			expr: &seqExpr{
				pos: position{line: 1351, col: 24, offset: 51306},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1351, col: 24, offset: 51306},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1351, col: 31, offset: 51313},
						expr: &ruleRefExpr{
							pos:  position{line: 1351, col: 31, offset: 51313},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1351, col: 38, offset: 51320},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockStartDelimiter",
			pos:  position{line: 1353, col: 1, offset: 51350},
			expr: &seqExpr{
				pos: position{line: 1353, col: 29, offset: 51378},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1353, col: 29, offset: 51378},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1353, col: 36, offset: 51385},
						expr: &ruleRefExpr{
							pos:  position{line: 1353, col: 36, offset: 51385},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1353, col: 43, offset: 51392},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockEndDelimiter",
			pos:  position{line: 1355, col: 1, offset: 51422},
			expr: &choiceExpr{
				pos: position{line: 1355, col: 27, offset: 51448},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1355, col: 28, offset: 51449},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1355, col: 28, offset: 51449},
								val:        "____",
								ignoreCase: false,
								want:       "\"____\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1355, col: 35, offset: 51456},
								expr: &ruleRefExpr{
									pos:  position{line: 1355, col: 35, offset: 51456},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1355, col: 42, offset: 51463},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1355, col: 49, offset: 51470},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1357, col: 1, offset: 51500},
			expr: &actionExpr{
				pos: position{line: 1357, col: 15, offset: 51514},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1357, col: 15, offset: 51514},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1357, col: 15, offset: 51514},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1357, col: 26, offset: 51525},
								expr: &ruleRefExpr{
									pos:  position{line: 1357, col: 27, offset: 51526},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1357, col: 47, offset: 51546},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1357, col: 72, offset: 51571},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1357, col: 81, offset: 51580},
								name: "QuoteBlockVerbatimElement",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1357, col: 108, offset: 51607},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockVerbatimElement",
			pos:  position{line: 1361, col: 1, offset: 51720},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1361, col: 30, offset: 51749},
				expr: &actionExpr{
					pos: position{line: 1361, col: 31, offset: 51750},
					run: (*parser).callonQuoteBlockVerbatimElement2,
					expr: &seqExpr{
						pos: position{line: 1361, col: 31, offset: 51750},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1361, col: 31, offset: 51750},
								expr: &ruleRefExpr{
									pos:  position{line: 1361, col: 32, offset: 51751},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1361, col: 55, offset: 51774},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1361, col: 64, offset: 51783},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlock",
			pos:  position{line: 1370, col: 1, offset: 52167},
			expr: &actionExpr{
				pos: position{line: 1370, col: 15, offset: 52181},
				run: (*parser).callonVerseBlock1,
				expr: &seqExpr{
					pos: position{line: 1370, col: 15, offset: 52181},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1370, col: 15, offset: 52181},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1370, col: 27, offset: 52193},
								name: "ElementAttributes",
							},
						},
						&andCodeExpr{
							pos: position{line: 1371, col: 5, offset: 52217},
							run: (*parser).callonVerseBlock5,
						},
						&ruleRefExpr{
							pos:  position{line: 1375, col: 5, offset: 52403},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1375, col: 30, offset: 52428},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1375, col: 39, offset: 52437},
								name: "VerseBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1375, col: 66, offset: 52464},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockVerbatimContent",
			pos:  position{line: 1379, col: 1, offset: 52585},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1379, col: 30, offset: 52614},
				expr: &actionExpr{
					pos: position{line: 1379, col: 31, offset: 52615},
					run: (*parser).callonVerseBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1379, col: 31, offset: 52615},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1379, col: 31, offset: 52615},
								expr: &ruleRefExpr{
									pos:  position{line: 1379, col: 32, offset: 52616},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1379, col: 55, offset: 52639},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1379, col: 64, offset: 52648},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1386, col: 1, offset: 52985},
			expr: &seqExpr{
				pos: position{line: 1386, col: 26, offset: 53010},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1386, col: 26, offset: 53010},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1386, col: 33, offset: 53017},
						expr: &ruleRefExpr{
							pos:  position{line: 1386, col: 33, offset: 53017},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1386, col: 40, offset: 53024},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockStartDelimiter",
			pos:  position{line: 1388, col: 1, offset: 53029},
			expr: &seqExpr{
				pos: position{line: 1388, col: 31, offset: 53059},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1388, col: 31, offset: 53059},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1388, col: 38, offset: 53066},
						expr: &ruleRefExpr{
							pos:  position{line: 1388, col: 38, offset: 53066},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1388, col: 45, offset: 53073},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockEndDelimiter",
			pos:  position{line: 1390, col: 1, offset: 53078},
			expr: &choiceExpr{
				pos: position{line: 1390, col: 29, offset: 53106},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1390, col: 30, offset: 53107},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1390, col: 30, offset: 53107},
								val:        "****",
								ignoreCase: false,
								want:       "\"****\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1390, col: 37, offset: 53114},
								expr: &ruleRefExpr{
									pos:  position{line: 1390, col: 37, offset: 53114},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1390, col: 44, offset: 53121},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1390, col: 51, offset: 53128},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1392, col: 1, offset: 53133},
			expr: &actionExpr{
				pos: position{line: 1392, col: 17, offset: 53149},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1392, col: 17, offset: 53149},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1392, col: 17, offset: 53149},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1392, col: 28, offset: 53160},
								expr: &ruleRefExpr{
									pos:  position{line: 1392, col: 29, offset: 53161},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1392, col: 49, offset: 53181},
							name: "SidebarBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1392, col: 76, offset: 53208},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1392, col: 85, offset: 53217},
								name: "SidebarBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1392, col: 114, offset: 53246},
							name: "SidebarBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockVerbatimContent",
			pos:  position{line: 1396, col: 1, offset: 53363},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1396, col: 32, offset: 53394},
				expr: &actionExpr{
					pos: position{line: 1396, col: 33, offset: 53395},
					run: (*parser).callonSidebarBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1396, col: 33, offset: 53395},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1396, col: 33, offset: 53395},
								expr: &ruleRefExpr{
									pos:  position{line: 1396, col: 34, offset: 53396},
									name: "SidebarBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1396, col: 59, offset: 53421},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1396, col: 68, offset: 53430},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NormalBlockContent",
			pos:  position{line: 1404, col: 1, offset: 53776},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1404, col: 23, offset: 53798},
				expr: &ruleRefExpr{
					pos:  position{line: 1404, col: 23, offset: 53798},
					name: "NormalBlockElement",
				},
			},
		},
		{
			name: "NormalBlockElement",
			pos:  position{line: 1406, col: 1, offset: 53819},
			expr: &actionExpr{
				pos: position{line: 1407, col: 5, offset: 53846},
				run: (*parser).callonNormalBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1407, col: 5, offset: 53846},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1407, col: 5, offset: 53846},
							expr: &ruleRefExpr{
								pos:  position{line: 1407, col: 6, offset: 53847},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1407, col: 10, offset: 53851},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1407, col: 19, offset: 53860},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1407, col: 19, offset: 53860},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1408, col: 15, offset: 53885},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 1409, col: 15, offset: 53913},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1410, col: 15, offset: 53939},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1411, col: 15, offset: 53970},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1412, col: 15, offset: 54003},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1413, col: 15, offset: 54034},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 1414, col: 15, offset: 54073},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1415, col: 15, offset: 54102},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1416, col: 15, offset: 54130},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 1417, col: 15, offset: 54174},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 1418, col: 15, offset: 54212},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1419, col: 15, offset: 54253},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockContent",
			pos:  position{line: 1423, col: 1, offset: 54302},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1423, col: 22, offset: 54323},
				expr: &ruleRefExpr{
					pos:  position{line: 1423, col: 22, offset: 54323},
					name: "VerseBlockElement",
				},
			},
		},
		{
			name: "VerseBlockElement",
			pos:  position{line: 1425, col: 1, offset: 54343},
			expr: &actionExpr{
				pos: position{line: 1425, col: 22, offset: 54364},
				run: (*parser).callonVerseBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1425, col: 22, offset: 54364},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1425, col: 22, offset: 54364},
							expr: &ruleRefExpr{
								pos:  position{line: 1425, col: 23, offset: 54365},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1425, col: 27, offset: 54369},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1425, col: 36, offset: 54378},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1425, col: 36, offset: 54378},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1425, col: 48, offset: 54390},
										name: "VerseBlockParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraph",
			pos:  position{line: 1429, col: 1, offset: 54440},
			expr: &actionExpr{
				pos: position{line: 1429, col: 24, offset: 54463},
				run: (*parser).callonVerseBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1429, col: 24, offset: 54463},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1429, col: 30, offset: 54469},
						expr: &ruleRefExpr{
							pos:  position{line: 1429, col: 31, offset: 54470},
							name: "VerseBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLine",
			pos:  position{line: 1433, col: 1, offset: 54560},
			expr: &actionExpr{
				pos: position{line: 1433, col: 28, offset: 54587},
				run: (*parser).callonVerseBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1433, col: 28, offset: 54587},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1433, col: 28, offset: 54587},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1433, col: 37, offset: 54596},
								expr: &ruleRefExpr{
									pos:  position{line: 1433, col: 38, offset: 54597},
									name: "InlineElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1433, col: 54, offset: 54613},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1440, col: 1, offset: 54855},
			expr: &actionExpr{
				pos: position{line: 1440, col: 10, offset: 54864},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1440, col: 10, offset: 54864},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1440, col: 10, offset: 54864},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1440, col: 21, offset: 54875},
								expr: &ruleRefExpr{
									pos:  position{line: 1440, col: 22, offset: 54876},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1440, col: 42, offset: 54896},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1441, col: 5, offset: 54915},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1441, col: 12, offset: 54922},
								expr: &ruleRefExpr{
									pos:  position{line: 1441, col: 13, offset: 54923},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1442, col: 5, offset: 54945},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1442, col: 11, offset: 54951},
								expr: &ruleRefExpr{
									pos:  position{line: 1442, col: 12, offset: 54952},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1443, col: 6, offset: 54969},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1443, col: 6, offset: 54969},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1443, col: 23, offset: 54986},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1447, col: 1, offset: 55101},
			expr: &seqExpr{
				pos: position{line: 1447, col: 23, offset: 55123},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1447, col: 23, offset: 55123},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1447, col: 27, offset: 55127},
						expr: &ruleRefExpr{
							pos:  position{line: 1447, col: 27, offset: 55127},
							name: "Space",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1449, col: 1, offset: 55135},
			expr: &seqExpr{
				pos: position{line: 1449, col: 19, offset: 55153},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1449, col: 19, offset: 55153},
						val:        "|===",
						ignoreCase: false,
						want:       "\"|===\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1449, col: 26, offset: 55160},
						expr: &ruleRefExpr{
							pos:  position{line: 1449, col: 26, offset: 55160},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1449, col: 33, offset: 55167},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1452, col: 1, offset: 55235},
			expr: &actionExpr{
				pos: position{line: 1452, col: 20, offset: 55254},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1452, col: 20, offset: 55254},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1452, col: 20, offset: 55254},
							expr: &ruleRefExpr{
								pos:  position{line: 1452, col: 21, offset: 55255},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1452, col: 36, offset: 55270},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1452, col: 42, offset: 55276},
								expr: &ruleRefExpr{
									pos:  position{line: 1452, col: 43, offset: 55277},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1452, col: 55, offset: 55289},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1452, col: 59, offset: 55293},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1456, col: 1, offset: 55361},
			expr: &actionExpr{
				pos: position{line: 1456, col: 14, offset: 55374},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1456, col: 14, offset: 55374},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1456, col: 14, offset: 55374},
							expr: &ruleRefExpr{
								pos:  position{line: 1456, col: 15, offset: 55375},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1456, col: 30, offset: 55390},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1456, col: 36, offset: 55396},
								expr: &ruleRefExpr{
									pos:  position{line: 1456, col: 37, offset: 55397},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1456, col: 49, offset: 55409},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1456, col: 53, offset: 55413},
							expr: &ruleRefExpr{
								pos:  position{line: 1456, col: 53, offset: 55413},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1460, col: 1, offset: 55482},
			expr: &actionExpr{
				pos: position{line: 1460, col: 14, offset: 55495},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1460, col: 14, offset: 55495},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1460, col: 14, offset: 55495},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1460, col: 33, offset: 55514},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1460, col: 42, offset: 55523},
								expr: &seqExpr{
									pos: position{line: 1460, col: 43, offset: 55524},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1460, col: 43, offset: 55524},
											expr: &ruleRefExpr{
												pos:  position{line: 1460, col: 44, offset: 55525},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1460, col: 63, offset: 55544},
											expr: &ruleRefExpr{
												pos:  position{line: 1460, col: 64, offset: 55545},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1460, col: 68, offset: 55549},
											expr: &ruleRefExpr{
												pos:  position{line: 1460, col: 68, offset: 55549},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1460, col: 75, offset: 55556},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1460, col: 89, offset: 55570},
											expr: &ruleRefExpr{
												pos:  position{line: 1460, col: 89, offset: 55570},
												name: "Space",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1467, col: 1, offset: 55819},
			expr: &seqExpr{
				pos: position{line: 1467, col: 26, offset: 55844},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1467, col: 26, offset: 55844},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1467, col: 33, offset: 55851},
						expr: &ruleRefExpr{
							pos:  position{line: 1467, col: 33, offset: 55851},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1467, col: 40, offset: 55858},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 1469, col: 1, offset: 55863},
			expr: &seqExpr{
				pos: position{line: 1469, col: 31, offset: 55893},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1469, col: 31, offset: 55893},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1469, col: 38, offset: 55900},
						expr: &ruleRefExpr{
							pos:  position{line: 1469, col: 38, offset: 55900},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1469, col: 45, offset: 55907},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 1471, col: 1, offset: 55912},
			expr: &choiceExpr{
				pos: position{line: 1471, col: 29, offset: 55940},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1471, col: 30, offset: 55941},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1471, col: 30, offset: 55941},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1471, col: 37, offset: 55948},
								expr: &ruleRefExpr{
									pos:  position{line: 1471, col: 37, offset: 55948},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1471, col: 44, offset: 55955},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1471, col: 51, offset: 55962},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1473, col: 1, offset: 55967},
			expr: &actionExpr{
				pos: position{line: 1473, col: 17, offset: 55983},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1473, col: 17, offset: 55983},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1473, col: 17, offset: 55983},
							name: "CommentBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1473, col: 44, offset: 56010},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1473, col: 53, offset: 56019},
								name: "CommentBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1473, col: 83, offset: 56049},
							name: "CommentBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockVerbatimContent",
			pos:  position{line: 1477, col: 1, offset: 56159},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1477, col: 32, offset: 56190},
				expr: &actionExpr{
					pos: position{line: 1477, col: 33, offset: 56191},
					run: (*parser).callonCommentBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1477, col: 33, offset: 56191},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1477, col: 33, offset: 56191},
								expr: &ruleRefExpr{
									pos:  position{line: 1477, col: 34, offset: 56192},
									name: "CommentBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1477, col: 59, offset: 56217},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1477, col: 68, offset: 56226},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1481, col: 1, offset: 56367},
			expr: &actionExpr{
				pos: position{line: 1481, col: 22, offset: 56388},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1481, col: 22, offset: 56388},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1481, col: 22, offset: 56388},
							expr: &ruleRefExpr{
								pos:  position{line: 1481, col: 23, offset: 56389},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1481, col: 45, offset: 56411},
							expr: &ruleRefExpr{
								pos:  position{line: 1481, col: 45, offset: 56411},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1481, col: 52, offset: 56418},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 1481, col: 57, offset: 56423},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1481, col: 66, offset: 56432},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1481, col: 92, offset: 56458},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1485, col: 1, offset: 56523},
			expr: &actionExpr{
				pos: position{line: 1485, col: 29, offset: 56551},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1485, col: 29, offset: 56551},
					expr: &charClassMatcher{
						pos:        position{line: 1485, col: 29, offset: 56551},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 1493, col: 1, offset: 56864},
			expr: &choiceExpr{
				pos: position{line: 1493, col: 17, offset: 56880},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1493, col: 17, offset: 56880},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 1493, col: 49, offset: 56912},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 1493, col: 78, offset: 56941},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 1495, col: 1, offset: 56977},
			expr: &litMatcher{
				pos:        position{line: 1495, col: 26, offset: 57002},
				val:        "....",
				ignoreCase: false,
				want:       "\"....\"",
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 1498, col: 1, offset: 57074},
			expr: &actionExpr{
				pos: position{line: 1498, col: 31, offset: 57104},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 1498, col: 31, offset: 57104},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1498, col: 31, offset: 57104},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1498, col: 42, offset: 57115},
								expr: &ruleRefExpr{
									pos:  position{line: 1498, col: 43, offset: 57116},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1498, col: 63, offset: 57136},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1498, col: 70, offset: 57143},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 1503, col: 1, offset: 57373},
			expr: &actionExpr{
				pos: position{line: 1504, col: 5, offset: 57413},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 1504, col: 5, offset: 57413},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1504, col: 5, offset: 57413},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1504, col: 16, offset: 57424},
								run: (*parser).callonParagraphWithHeadingSpacesLines4,
								expr: &seqExpr{
									pos: position{line: 1504, col: 16, offset: 57424},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 1504, col: 16, offset: 57424},
											expr: &ruleRefExpr{
												pos:  position{line: 1504, col: 16, offset: 57424},
												name: "Space",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1504, col: 23, offset: 57431},
											expr: &charClassMatcher{
												pos:        position{line: 1504, col: 23, offset: 57431},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1506, col: 8, offset: 57484},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 1507, col: 5, offset: 57547},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1507, col: 16, offset: 57558},
								expr: &actionExpr{
									pos: position{line: 1508, col: 9, offset: 57568},
									run: (*parser).callonParagraphWithHeadingSpacesLines13,
									expr: &seqExpr{
										pos: position{line: 1508, col: 9, offset: 57568},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1508, col: 9, offset: 57568},
												expr: &ruleRefExpr{
													pos:  position{line: 1508, col: 10, offset: 57569},
													name: "BlankLine",
												},
											},
											&labeledExpr{
												pos:   position{line: 1509, col: 9, offset: 57588},
												label: "otherLine",
												expr: &actionExpr{
													pos: position{line: 1509, col: 20, offset: 57599},
													run: (*parser).callonParagraphWithHeadingSpacesLines18,
													expr: &oneOrMoreExpr{
														pos: position{line: 1509, col: 20, offset: 57599},
														expr: &charClassMatcher{
															pos:        position{line: 1509, col: 20, offset: 57599},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1511, col: 12, offset: 57660},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 1518, col: 1, offset: 57890},
			expr: &actionExpr{
				pos: position{line: 1518, col: 39, offset: 57928},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1518, col: 39, offset: 57928},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1518, col: 39, offset: 57928},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1518, col: 50, offset: 57939},
								expr: &ruleRefExpr{
									pos:  position{line: 1518, col: 51, offset: 57940},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1519, col: 9, offset: 57968},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1519, col: 31, offset: 57990},
							expr: &ruleRefExpr{
								pos:  position{line: 1519, col: 31, offset: 57990},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1519, col: 38, offset: 57997},
							name: "Newline",
						},
						&labeledExpr{
							pos:   position{line: 1519, col: 46, offset: 58005},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1519, col: 53, offset: 58012},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 1519, col: 95, offset: 58054},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1519, col: 96, offset: 58055},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1519, col: 96, offset: 58055},
											name: "LiteralBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1519, col: 118, offset: 58077},
											expr: &ruleRefExpr{
												pos:  position{line: 1519, col: 118, offset: 58077},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1519, col: 125, offset: 58084},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1519, col: 132, offset: 58091},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 1524, col: 1, offset: 58250},
			expr: &actionExpr{
				pos: position{line: 1524, col: 44, offset: 58293},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 1524, col: 44, offset: 58293},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1524, col: 50, offset: 58299},
						expr: &ruleRefExpr{
							pos:  position{line: 1524, col: 51, offset: 58300},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 1528, col: 1, offset: 58384},
			expr: &actionExpr{
				pos: position{line: 1529, col: 5, offset: 58439},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 1529, col: 5, offset: 58439},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1529, col: 5, offset: 58439},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1529, col: 11, offset: 58445},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &seqExpr{
									pos: position{line: 1529, col: 11, offset: 58445},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1529, col: 11, offset: 58445},
											expr: &ruleRefExpr{
												pos:  position{line: 1529, col: 12, offset: 58446},
												name: "LiteralBlockDelimiter",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1529, col: 34, offset: 58468},
											expr: &charClassMatcher{
												pos:        position{line: 1529, col: 34, offset: 58468},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1531, col: 8, offset: 58521},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 1536, col: 1, offset: 58647},
			expr: &actionExpr{
				pos: position{line: 1537, col: 5, offset: 58685},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 1537, col: 5, offset: 58685},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1537, col: 5, offset: 58685},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1537, col: 16, offset: 58696},
								expr: &ruleRefExpr{
									pos:  position{line: 1537, col: 17, offset: 58697},
									name: "ElementAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1538, col: 5, offset: 58721},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 1545, col: 5, offset: 58935},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1545, col: 12, offset: 58942},
								name: "ParagraphWithLiteralAttributeLines",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 1549, col: 1, offset: 59092},
			expr: &actionExpr{
				pos: position{line: 1549, col: 16, offset: 59107},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 1549, col: 16, offset: 59107},
					val:        "literal",
					ignoreCase: false,
					want:       "\"literal\"",
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLines",
			pos:  position{line: 1554, col: 1, offset: 59190},
			expr: &actionExpr{
				pos: position{line: 1554, col: 39, offset: 59228},
				run: (*parser).callonParagraphWithLiteralAttributeLines1,
				expr: &labeledExpr{
					pos:   position{line: 1554, col: 39, offset: 59228},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1554, col: 45, offset: 59234},
						expr: &ruleRefExpr{
							pos:  position{line: 1554, col: 46, offset: 59235},
							name: "ParagraphWithLiteralAttributeLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLine",
			pos:  position{line: 1558, col: 1, offset: 59315},
			expr: &actionExpr{
				pos: position{line: 1558, col: 38, offset: 59352},
				run: (*parser).callonParagraphWithLiteralAttributeLine1,
				expr: &seqExpr{
					pos: position{line: 1558, col: 38, offset: 59352},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1558, col: 38, offset: 59352},
							expr: &ruleRefExpr{
								pos:  position{line: 1558, col: 39, offset: 59353},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1558, col: 49, offset: 59363},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 1558, col: 58, offset: 59372},
								run: (*parser).callonParagraphWithLiteralAttributeLine6,
								expr: &oneOrMoreExpr{
									pos: position{line: 1558, col: 58, offset: 59372},
									expr: &charClassMatcher{
										pos:        position{line: 1558, col: 58, offset: 59372},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1560, col: 4, offset: 59417},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 1567, col: 1, offset: 59603},
			expr: &actionExpr{
				pos: position{line: 1567, col: 14, offset: 59616},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1567, col: 14, offset: 59616},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1567, col: 14, offset: 59616},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 1567, col: 19, offset: 59621},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 1567, col: 25, offset: 59627},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 1567, col: 43, offset: 59645},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 1571, col: 1, offset: 59710},
			expr: &actionExpr{
				pos: position{line: 1571, col: 21, offset: 59730},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 1571, col: 21, offset: 59730},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1571, col: 30, offset: 59739},
						expr: &choiceExpr{
							pos: position{line: 1571, col: 31, offset: 59740},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1571, col: 31, offset: 59740},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 1571, col: 38, offset: 59747},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 1571, col: 51, offset: 59760},
									name: "Space",
								},
								&actionExpr{
									pos: position{line: 1571, col: 59, offset: 59768},
									run: (*parser).callonIndexTermContent8,
									expr: &seqExpr{
										pos: position{line: 1571, col: 60, offset: 59769},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1571, col: 60, offset: 59769},
												expr: &litMatcher{
													pos:        position{line: 1571, col: 61, offset: 59770},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 1571, col: 66, offset: 59775,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 1577, col: 1, offset: 59881},
			expr: &actionExpr{
				pos: position{line: 1577, col: 23, offset: 59903},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1577, col: 23, offset: 59903},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1577, col: 23, offset: 59903},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 1577, col: 29, offset: 59909},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 1577, col: 36, offset: 59916},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 1578, col: 5, offset: 59948},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 1578, col: 11, offset: 59954},
								expr: &actionExpr{
									pos: position{line: 1578, col: 12, offset: 59955},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 1578, col: 12, offset: 59955},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1578, col: 12, offset: 59955},
												expr: &ruleRefExpr{
													pos:  position{line: 1578, col: 12, offset: 59955},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 1578, col: 19, offset: 59962},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1578, col: 23, offset: 59966},
												expr: &ruleRefExpr{
													pos:  position{line: 1578, col: 23, offset: 59966},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 1578, col: 30, offset: 59973},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1578, col: 39, offset: 59982},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1579, col: 5, offset: 60040},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 1579, col: 11, offset: 60046},
								expr: &actionExpr{
									pos: position{line: 1579, col: 12, offset: 60047},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 1579, col: 12, offset: 60047},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1579, col: 12, offset: 60047},
												expr: &ruleRefExpr{
													pos:  position{line: 1579, col: 12, offset: 60047},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 1579, col: 19, offset: 60054},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1579, col: 23, offset: 60058},
												expr: &ruleRefExpr{
													pos:  position{line: 1579, col: 23, offset: 60058},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 1579, col: 30, offset: 60065},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1579, col: 39, offset: 60074},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1580, col: 5, offset: 60132},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 1584, col: 1, offset: 60211},
			expr: &actionExpr{
				pos: position{line: 1584, col: 30, offset: 60240},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1584, col: 30, offset: 60240},
					expr: &choiceExpr{
						pos: position{line: 1584, col: 31, offset: 60241},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1584, col: 31, offset: 60241},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 1584, col: 42, offset: 60252},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 1591, col: 1, offset: 60401},
			expr: &actionExpr{
				pos: position{line: 1591, col: 14, offset: 60414},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 1591, col: 14, offset: 60414},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1591, col: 14, offset: 60414},
							expr: &ruleRefExpr{
								pos:  position{line: 1591, col: 15, offset: 60415},
								name: "EOF",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1591, col: 19, offset: 60419},
							expr: &ruleRefExpr{
								pos:  position{line: 1591, col: 19, offset: 60419},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1591, col: 26, offset: 60426},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 1598, col: 1, offset: 60573},
			expr: &charClassMatcher{
				pos:        position{line: 1598, col: 13, offset: 60585},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 1600, col: 1, offset: 60595},
			expr: &choiceExpr{
				pos: position{line: 1600, col: 16, offset: 60610},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1600, col: 16, offset: 60610},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 1600, col: 22, offset: 60616},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 1600, col: 28, offset: 60622},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 1600, col: 34, offset: 60628},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 1600, col: 40, offset: 60634},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 1600, col: 46, offset: 60640},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 1602, col: 1, offset: 60646},
			expr: &actionExpr{
				pos: position{line: 1602, col: 14, offset: 60659},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1602, col: 14, offset: 60659},
					expr: &charClassMatcher{
						pos:        position{line: 1602, col: 14, offset: 60659},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 1606, col: 1, offset: 60705},
			expr: &choiceExpr{
				pos: position{line: 1610, col: 5, offset: 61033},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1610, col: 5, offset: 61033},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 1610, col: 5, offset: 61033},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1610, col: 5, offset: 61033},
									expr: &charClassMatcher{
										pos:        position{line: 1610, col: 5, offset: 61033},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1610, col: 15, offset: 61043},
									expr: &choiceExpr{
										pos: position{line: 1610, col: 17, offset: 61045},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1610, col: 17, offset: 61045},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 1610, col: 30, offset: 61058},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1612, col: 9, offset: 61128},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 1612, col: 9, offset: 61128},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1612, col: 9, offset: 61128},
									expr: &charClassMatcher{
										pos:        position{line: 1612, col: 9, offset: 61128},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1612, col: 19, offset: 61138},
									expr: &seqExpr{
										pos: position{line: 1612, col: 20, offset: 61139},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1612, col: 20, offset: 61139},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 1612, col: 27, offset: 61146},
												expr: &charClassMatcher{
													pos:        position{line: 1612, col: 27, offset: 61146},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 1616, col: 1, offset: 61222},
			expr: &choiceExpr{
				pos: position{line: 1617, col: 5, offset: 61303},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1617, col: 5, offset: 61303},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 1617, col: 5, offset: 61303},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1617, col: 5, offset: 61303},
									expr: &charClassMatcher{
										pos:        position{line: 1617, col: 5, offset: 61303},
										val:        "[\\pL0-9,.?!;]",
										chars:      []rune{',', '.', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1617, col: 20, offset: 61318},
									expr: &choiceExpr{
										pos: position{line: 1617, col: 22, offset: 61320},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1617, col: 22, offset: 61320},
												val:        "[\\r\\n ]",
												chars:      []rune{'\r', '\n', ' '},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 1617, col: 32, offset: 61330},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1619, col: 9, offset: 61400},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 1622, col: 1, offset: 61500},
			expr: &actionExpr{
				pos: position{line: 1622, col: 12, offset: 61511},
				run: (*parser).callonAnyChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1622, col: 12, offset: 61511},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 1626, col: 1, offset: 61669},
			expr: &actionExpr{
				pos: position{line: 1626, col: 17, offset: 61685},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1626, col: 17, offset: 61685},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 1626, col: 22, offset: 61690},
						expr: &choiceExpr{
							pos: position{line: 1626, col: 23, offset: 61691},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1626, col: 23, offset: 61691},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 1626, col: 34, offset: 61702},
									name: "DocumentAttributeSubstitution",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedFileLocation",
			pos:  position{line: 1630, col: 1, offset: 61794},
			expr: &actionExpr{
				pos: position{line: 1630, col: 25, offset: 61818},
				run: (*parser).callonResolvedFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1630, col: 25, offset: 61818},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 1630, col: 30, offset: 61823},
						expr: &charClassMatcher{
							pos:        position{line: 1630, col: 31, offset: 61824},
							val:        "[^\\r\\n []",
							chars:      []rune{'\r', '\n', ' ', '['},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 1634, col: 1, offset: 61896},
			expr: &actionExpr{
				pos: position{line: 1634, col: 13, offset: 61908},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 1634, col: 13, offset: 61908},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1634, col: 13, offset: 61908},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 1634, col: 20, offset: 61915},
								expr: &ruleRefExpr{
									pos:  position{line: 1634, col: 21, offset: 61916},
									name: "URL_SCHEME",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1634, col: 34, offset: 61929},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 1634, col: 39, offset: 61934},
								expr: &choiceExpr{
									pos: position{line: 1634, col: 40, offset: 61935},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1634, col: 40, offset: 61935},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 1634, col: 51, offset: 61946},
											name: "DocumentAttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 1638, col: 1, offset: 62042},
			expr: &actionExpr{
				pos: position{line: 1638, col: 23, offset: 62064},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 1638, col: 23, offset: 62064},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1638, col: 23, offset: 62064},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 1638, col: 31, offset: 62072},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 1638, col: 43, offset: 62084},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 1638, col: 48, offset: 62089},
								expr: &choiceExpr{
									pos: position{line: 1638, col: 49, offset: 62090},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1638, col: 49, offset: 62090},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 1638, col: 60, offset: 62101},
											name: "DocumentAttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 1642, col: 1, offset: 62197},
			expr: &oneOrMoreExpr{
				pos: position{line: 1642, col: 13, offset: 62209},
				expr: &charClassMatcher{
					pos:        position{line: 1642, col: 14, offset: 62210},
					val:        "[^\\r\\n{}[\\] ]",
					chars:      []rune{'\r', '\n', '{', '}', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "ResolvedLocation",
			pos:  position{line: 1644, col: 1, offset: 62344},
			expr: &actionExpr{
				pos: position{line: 1644, col: 21, offset: 62364},
				run: (*parser).callonResolvedLocation1,
				expr: &seqExpr{
					pos: position{line: 1644, col: 21, offset: 62364},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1644, col: 21, offset: 62364},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 1644, col: 29, offset: 62372},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 1644, col: 41, offset: 62384},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1644, col: 47, offset: 62390},
								name: "RESOLVED_FILENAME",
							},
						},
					},
				},
			},
		},
		{
			name: "RESOLVED_FILENAME",
			pos:  position{line: 1649, col: 1, offset: 62638},
			expr: &oneOrMoreExpr{
				pos: position{line: 1649, col: 22, offset: 62659},
				expr: &charClassMatcher{
					pos:        position{line: 1649, col: 23, offset: 62660},
					val:        "[^\\r\\n[\\] ]",
					chars:      []rune{'\r', '\n', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 1651, col: 1, offset: 62792},
			expr: &actionExpr{
				pos: position{line: 1651, col: 9, offset: 62800},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1651, col: 9, offset: 62800},
					expr: &charClassMatcher{
						pos:        position{line: 1651, col: 9, offset: 62800},
						val:        "[^\\r\\n[\\]]",
						chars:      []rune{'\r', '\n', '[', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 1655, col: 1, offset: 62848},
			expr: &choiceExpr{
				pos: position{line: 1655, col: 15, offset: 62862},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1655, col: 15, offset: 62862},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 1655, col: 27, offset: 62874},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 1655, col: 40, offset: 62887},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 1655, col: 51, offset: 62898},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 1655, col: 62, offset: 62909},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 1657, col: 1, offset: 62920},
			expr: &actionExpr{
				pos: position{line: 1657, col: 7, offset: 62926},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1657, col: 7, offset: 62926},
					expr: &charClassMatcher{
						pos:        position{line: 1657, col: 7, offset: 62926},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 1661, col: 1, offset: 63051},
			expr: &actionExpr{
				pos: position{line: 1661, col: 10, offset: 63060},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 1661, col: 10, offset: 63060},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 1665, col: 1, offset: 63102},
			expr: &actionExpr{
				pos: position{line: 1665, col: 11, offset: 63112},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 1665, col: 11, offset: 63112},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1665, col: 11, offset: 63112},
							expr: &litMatcher{
								pos:        position{line: 1665, col: 11, offset: 63112},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1665, col: 16, offset: 63117},
							expr: &ruleRefExpr{
								pos:  position{line: 1665, col: 16, offset: 63117},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 1669, col: 1, offset: 63169},
			expr: &choiceExpr{
				pos: position{line: 1669, col: 10, offset: 63178},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1669, col: 10, offset: 63178},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 1669, col: 16, offset: 63184},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 1669, col: 16, offset: 63184},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 1673, col: 1, offset: 63225},
			expr: &choiceExpr{
				pos: position{line: 1673, col: 12, offset: 63236},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1673, col: 12, offset: 63236},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&litMatcher{
						pos:        position{line: 1673, col: 21, offset: 63245},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
					&litMatcher{
						pos:        position{line: 1673, col: 28, offset: 63252},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1675, col: 1, offset: 63258},
			expr: &notExpr{
				pos: position{line: 1675, col: 8, offset: 63265},
				expr: &anyMatcher{
					line: 1675, col: 9, offset: 63266,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1677, col: 1, offset: 63269},
			expr: &choiceExpr{
				pos: position{line: 1677, col: 8, offset: 63276},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1677, col: 8, offset: 63276},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 1677, col: 18, offset: 63286},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onAsciidocDocument1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonAsciidocDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onVerbatimDocument1(blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonVerbatimDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimDocument1(stack["blocks"])
}

func (c *current) onTextDocument1(blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonTextDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocument1(stack["blocks"])
}

func (c *current) onAsciidocDocumentBlocks1(header, others interface{}) (interface{}, error) {
	if header != nil && others != nil {
		return append([]interface{}{header}, others.([]interface{})...), nil
	} else if others != nil {
		return others.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonAsciidocDocumentBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocumentBlocks1(stack["header"], stack["others"])
}

func (c *current) onDocumentBlockWithinDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlockWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlockWithinDelimitedBlock1(stack["block"])
}

func (c *current) onTextDocumentBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonTextDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocumentBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentHeader(title.([]interface{}), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onDocumentAttributeDeclaration9(value interface{}) (interface{}, error) {

	return value, nil

}

func (p *parser) callonDocumentAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclaration9(stack["value"])
}

func (c *current) onDocumentAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	return types.NewDocumentAttributeDeclaration(name.(string), value)
}

func (p *parser) callonDocumentAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onDocumentAttributeName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeName1()
}

func (c *current) onDocumentAttributeValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeValue1()
}

func (c *current) onDocumentAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.(string))
}

func (p *parser) callonDocumentAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeReset2(stack["name"])
}

func (c *current) onDocumentAttributeReset11(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.(string))
}

func (p *parser) callonDocumentAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeReset11(stack["name"])
}

func (c *current) onDocumentAttributeSubstitution1(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeSubstitution(name.(string))
}

func (p *parser) callonDocumentAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeSubstitution1(stack["name"])
}

func (c *current) onElementAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs.([]interface{})), nil
}

func (p *parser) callonElementAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {
	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID2(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID2(stack["id"])
}

func (c *current) onElementID11(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID11(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {
	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementTitleContent1() (interface{}, error) {
	// "<" and ">" characters are not allowed as they are used as cross-reference markers
	return string(c.text), nil
}

func (p *parser) callonElementTitleContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitleContent1()
}

func (c *current) onElementRole5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementRole5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole5()
}

func (c *current) onElementRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role.(string))
}

func (p *parser) callonElementRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole1(stack["role"])
}

func (c *current) onLiteralAttribute1() (interface{}, error) {
	return types.NewLiteralAttribute()
}

func (p *parser) callonLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {
	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes6(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes6(stack["attr"])
}

func (c *current) onSourceAttributes14(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes14(stack["attr"])
}

func (c *current) onSourceAttributes1(language, others interface{}) (interface{}, error) {
	return types.NewSourceAttributes(language, others.([]interface{})...)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["language"], stack["others"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttributeWithValue1(key, value interface{}) (interface{}, error) {
	// value is (optionally) set
	return types.NewGenericAttribute(key.(string), value)
}

func (p *parser) callonGenericAttributeWithValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithValue1(stack["key"], stack["value"])
}

func (c *current) onGenericAttributeWithoutValue1(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.(string), nil)
}

func (p *parser) callonGenericAttributeWithoutValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithoutValue1(stack["key"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onStandaloneAttributeValue1(value interface{}) (interface{}, error) {
	// standalone attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonStandaloneAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributeValue1(stack["value"])
}

func (c *current) onHorizontalLayout1() (interface{}, error) {
	return types.ElementAttributes{"layout": "horizontal"}, nil
}

func (p *parser) callonHorizontalLayout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHorizontalLayout1()
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onInlineAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attrs"])
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.([]interface{}), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), attrs.(types.ElementAttributes), string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), attrs.(types.ElementAttributes), string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.ElementAttributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedLineRanges10(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleQuotedLineRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges10(stack["other"])
}

func (c *current) onMultipleQuotedLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onMultiLineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onSingleLineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onTagRangesAttribute1(tags interface{}) (interface{}, error) {
	//TODO: check if 'tags'/'tag' is allowed for both single and multiple values
	return types.NewTagRangesAttribute(tags.([]interface{}))
}

func (p *parser) callonTagRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttribute1(stack["tags"])
}

func (c *current) onTagRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonTagRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onVerbatimLine6() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonVerbatimLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLine6()
}

func (c *current) onVerbatimLine1(content interface{}) (interface{}, error) {
	return types.NewVerbatimLine(content.(string))
}

func (p *parser) callonVerbatimLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLine1(stack["content"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {
	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine22(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonListParagraphLine22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine22(stack["elements"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(element interface{}) (interface{}, error) {
	return types.NewContinuedListItemElement(element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["element"])
}

func (c *current) onContinuedListItemContent1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonContinuedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent1(stack["content"])
}

func (c *current) onOrderedListItem1(attributes, prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attributes)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attributes"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attributes, prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attributes)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attributes"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {
	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attributes, term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListItem(len(separator.(string))-1, term.([]interface{}), description, attributes)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attributes"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onVerbatimLabeledListItemTerm3() (interface{}, error) {
	return types.NewStringElement(strings.TrimSpace(string(c.text)))
}

func (p *parser) callonVerbatimLabeledListItemTerm3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm3()
}

func (c *current) onVerbatimLabeledListItemTerm1(content interface{}) (interface{}, error) {
	return types.NewInlineElements(content)
}

func (p *parser) callonVerbatimLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm1(stack["content"])
}

func (c *current) onLabeledListItemTerm1(elements interface{}) (interface{}, error) {
	// rule as an extra entrypoint
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1(stack["elements"])
}

func (c *current) onLabeledListItemTermElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonLabeledListItemTermElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement1(stack["element"])
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil

}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil

}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil

}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil

}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onParagraph13(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph13(stack["attributes"], stack["lines"])
}

func (c *current) onSimpleParagraph6(attributes interface{}) (bool, error) {
	// skip if the '[literal]' attribute was set on this paragraph
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, found := attrs[types.AttrKind]
		return !found || kind != types.Literal, nil
	}
	return true, nil

}

func (p *parser) callonSimpleParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph6(stack["attributes"])
}

func (c *current) onSimpleParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphLine1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFirstParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphLine1(stack["elements"])
}

func (c *current) onOtherParagraphLine1(elements interface{}) (interface{}, error) {
	return elements, nil
}

func (p *parser) callonOtherParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherParagraphLine1(stack["elements"])
}

func (c *current) onContinuedParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonContinuedParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onContinuedParagraph12(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonContinuedParagraph12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraph12(stack["attributes"], stack["lines"])
}

func (c *current) onContinuedParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {
	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonContinuedParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onVerseParagraph7(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph7(stack["attributes"])
}

func (c *current) onVerseParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonVerseParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onVerseParagraph19(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph19(stack["attributes"])
}

func (c *current) onVerseParagraph14(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonVerseParagraph14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph14(stack["attributes"], stack["lines"])
}

func (c *current) onInlineElements7(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["comment"])
}

func (c *current) onInlineElements10(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements10(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onConstrainedQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonConstrainedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstrainedQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.Bold, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextStringElement1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextStringElement1()
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["elements"])
}

func (c *current) onSingleQuoteBoldText16(elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText16(stack["elements"])
}

func (c *current) onSingleQuoteBoldTextStringElement1() (interface{}, error) {
	// anything except EOL, space, bold and subscript/superscript delimiters and brackets. Excludes curly brackets to match with DocumentAttributeSubstitution elements
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextStringElement1()
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextStringElement1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextStringElement1()
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["elements"])
}

func (c *current) onSingleQuoteItalicText13(elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText13(stack["elements"])
}

func (c *current) onSingleQuoteItalicTextStringElement1() (interface{}, error) {
	// anything except EOL, space, bold and subscript/superscript delimiters and brackets. Excludes curly brackets to match with DocumentAttributeSubstitution elements
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextStringElement1()
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextStringElement1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextStringElement1()
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText13(elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText13(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextStringElement1() (interface{}, error) {
	// anything except EOL, space, monospace and subscript/superscript delimiters. Excludes curly brackets to match with DocumentAttributeSubstitution elements
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextStringElement1()
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, element)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, element)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), label.(string))
}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), nil)
}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onLinkAttributes1(firstAttr, otherattrs interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(append(firstAttr.([]interface{}), otherattrs.([]interface{})...))
}

func (p *parser) callonLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkAttributes1(stack["firstAttr"], stack["otherattrs"])
}

func (c *current) onFirstLinkAttributeElement4(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement4(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement18(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement18(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonFirstLinkAttributeElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement1(stack["element"])
}

func (c *current) onAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeChar1()
}

func (c *current) onQuotedAttributeChar1() (interface{}, error) {
	// does not exclude comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonQuotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedAttributeChar1()
}

func (c *current) onUnquotedAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonUnquotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeChar1()
}

func (c *current) onInlineLinks1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonInlineLinks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineLinks1(stack["elements"])
}

func (c *current) onResolvedRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonResolvedRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onResolvedExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonResolvedExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewImageBlock(path.(types.Location), inlineAttributes.(types.ElementAttributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onImageAttributes1(alt, width, height, otherattrs interface{}) (interface{}, error) {
	return types.NewImageAttributes(alt, width, height, otherattrs.([]interface{}))
}

func (p *parser) callonImageAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttributes1(stack["alt"], stack["width"], stack["height"], stack["otherattrs"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.([]interface{}))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content)
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}), attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonFencedBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockVerbatimContent2(stack["content"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Listing, content.([]interface{}), attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonListingBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockVerbatimContent2(stack["content"])
}

func (c *current) onExampleBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Example, content.([]interface{}), attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["content"])
}

func (c *current) onExampleBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonExampleBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockVerbatimContent2(stack["content"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Quote, content.([]interface{}), attributes)
}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockVerbatimElement2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonQuoteBlockVerbatimElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockVerbatimElement2(stack["content"])
}

func (c *current) onVerseBlock5(attributes interface{}) (bool, error) {

	kind := attributes.(types.ElementAttributes).GetAsString("kind") // once we got the attributes, check that `[verse]`  was set
	return kind == "verse", nil

}

func (p *parser) callonVerseBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock5(stack["attributes"])
}

func (c *current) onVerseBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Verse, content.([]interface{}), attributes)

}

func (p *parser) callonVerseBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock1(stack["attributes"], stack["content"])
}

func (c *current) onVerseBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonVerseBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockVerbatimContent2(stack["content"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}), attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onSidebarBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonSidebarBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockVerbatimContent2(stack["content"])
}

func (c *current) onNormalBlockElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonNormalBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalBlockElement1(stack["element"])
}

func (c *current) onVerseBlockElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonVerseBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockElement1(stack["element"])
}

func (c *current) onVerseBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonVerseBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlockParagraphLine1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonVerseBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine1(stack["elements"])
}

func (c *current) onTable1(attributes, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attributes)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attributes"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}), nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonCommentBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockVerbatimContent2(stack["content"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines4()
}

func (c *current) onParagraphWithHeadingSpacesLines18() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines18()
}

func (c *current) onParagraphWithHeadingSpacesLines13(otherLine interface{}) (interface{}, error) {
	return otherLine, nil // do not include the trailing 'EOL'

}

func (p *parser) callonParagraphWithHeadingSpacesLines13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines13(stack["otherLine"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Literal, nil
	}
	return false, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onParagraphWithLiteralAttributeLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralAttributeLine6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine6()
}

func (c *current) onParagraphWithLiteralAttributeLine1(content interface{}) (interface{}, error) {
	return content.(string), nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralAttributeLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine1(stack["content"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent8()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2()
}

func (c *current) onAnyChar1() (interface{}, error) {
	// this is a fall-back rule in case all preceeding rules failed to match the current content.
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onResolvedFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonResolvedFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onResolvedLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonResolvedLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedLocation1(stack["scheme"], stack["path"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onSpace3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
