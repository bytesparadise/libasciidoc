// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "AsciidocDocument",
			pos:  position{line: 17, col: 1, offset: 332},
			expr: &actionExpr{
				pos: position{line: 17, col: 21, offset: 352},
				run: (*parser).callonAsciidocDocument1,
				expr: &seqExpr{
					pos: position{line: 17, col: 21, offset: 352},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 21, offset: 352},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 34, offset: 365},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 34, offset: 365},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 48, offset: 379},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 56, offset: 387},
								name: "AsciidocDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 80, offset: 411},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "VerbatimDocument",
			pos:  position{line: 21, col: 1, offset: 491},
			expr: &actionExpr{
				pos: position{line: 21, col: 21, offset: 511},
				run: (*parser).callonVerbatimDocument1,
				expr: &seqExpr{
					pos: position{line: 21, col: 21, offset: 511},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 21, col: 21, offset: 511},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 21, col: 29, offset: 519},
								name: "VerbatimFileContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 50, offset: 540},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "TextDocument",
			pos:  position{line: 26, col: 1, offset: 640},
			expr: &actionExpr{
				pos: position{line: 26, col: 17, offset: 656},
				run: (*parser).callonTextDocument1,
				expr: &seqExpr{
					pos: position{line: 26, col: 17, offset: 656},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 26, col: 17, offset: 656},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 26, col: 25, offset: 664},
								name: "TextDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 26, col: 45, offset: 684},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocks",
			pos:  position{line: 33, col: 1, offset: 867},
			expr: &actionExpr{
				pos: position{line: 33, col: 27, offset: 893},
				run: (*parser).callonAsciidocDocumentBlocks1,
				expr: &seqExpr{
					pos: position{line: 33, col: 27, offset: 893},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 33, col: 27, offset: 893},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 33, col: 35, offset: 901},
								expr: &ruleRefExpr{
									pos:  position{line: 33, col: 35, offset: 901},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 33, col: 52, offset: 918},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 33, col: 60, offset: 926},
								expr: &ruleRefExpr{
									pos:  position{line: 33, col: 60, offset: 926},
									name: "DocumentBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentBlock",
			pos:  position{line: 42, col: 1, offset: 1175},
			expr: &choiceExpr{
				pos: position{line: 43, col: 9, offset: 1201},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 43, col: 9, offset: 1201},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 44, col: 11, offset: 1266},
						name: "SimpleParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 45, col: 11, offset: 1292},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 46, col: 11, offset: 1344},
						name: "Section",
					},
					&ruleRefExpr{
						pos:  position{line: 47, col: 11, offset: 1362},
						name: "DelimitedBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 48, col: 11, offset: 1387},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 49, col: 11, offset: 1411},
						name: "VerseParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 50, col: 11, offset: 1465},
						name: "ImageBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 51, col: 11, offset: 1486},
						name: "ThematicBreak",
					},
					&ruleRefExpr{
						pos:  position{line: 52, col: 11, offset: 1510},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 53, col: 11, offset: 1536},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 54, col: 11, offset: 1565},
						name: "CalloutListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 55, col: 11, offset: 1591},
						name: "ContinuedListItemElement",
					},
					&ruleRefExpr{
						pos:  position{line: 56, col: 11, offset: 1626},
						name: "LiteralBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 57, col: 11, offset: 1650},
						name: "AttributeDeclaration",
					},
					&ruleRefExpr{
						pos:  position{line: 58, col: 11, offset: 1682},
						name: "AttributeReset",
					},
					&ruleRefExpr{
						pos:  position{line: 59, col: 11, offset: 1708},
						name: "TableOfContentsPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 60, col: 11, offset: 1745},
						name: "UserMacroBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 61, col: 11, offset: 1770},
						name: "StandaloneAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 62, col: 11, offset: 1801},
						name: "Paragraph",
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocksWithinDelimitedBlock",
			pos:  position{line: 64, col: 1, offset: 1812},
			expr: &labeledExpr{
				pos:   position{line: 64, col: 47, offset: 1858},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 64, col: 54, offset: 1865},
					expr: &ruleRefExpr{
						pos:  position{line: 64, col: 55, offset: 1866},
						name: "DocumentBlockWithinDelimitedBlock",
					},
				},
			},
		},
		{
			name: "DocumentBlockWithinDelimitedBlock",
			pos:  position{line: 66, col: 1, offset: 1903},
			expr: &actionExpr{
				pos: position{line: 66, col: 38, offset: 1940},
				run: (*parser).callonDocumentBlockWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 66, col: 38, offset: 1940},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 66, col: 38, offset: 1940},
							expr: &ruleRefExpr{
								pos:  position{line: 66, col: 39, offset: 1941},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 67, col: 5, offset: 1950},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 67, col: 12, offset: 1957},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 67, col: 12, offset: 1957},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 68, col: 11, offset: 1982},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 69, col: 11, offset: 2034},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 70, col: 11, offset: 2058},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 71, col: 11, offset: 2083},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 72, col: 11, offset: 2104},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 73, col: 11, offset: 2128},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 74, col: 11, offset: 2154},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 75, col: 11, offset: 2183},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 76, col: 11, offset: 2210},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 77, col: 11, offset: 2245},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 78, col: 11, offset: 2269},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 79, col: 11, offset: 2301},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 80, col: 11, offset: 2327},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 81, col: 11, offset: 2364},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 82, col: 11, offset: 2389},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextDocumentBlocks",
			pos:  position{line: 86, col: 1, offset: 2427},
			expr: &labeledExpr{
				pos:   position{line: 86, col: 23, offset: 2449},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 86, col: 30, offset: 2456},
					expr: &ruleRefExpr{
						pos:  position{line: 86, col: 31, offset: 2457},
						name: "TextDocumentBlock",
					},
				},
			},
		},
		{
			name: "TextDocumentBlock",
			pos:  position{line: 88, col: 1, offset: 2478},
			expr: &actionExpr{
				pos: position{line: 88, col: 22, offset: 2499},
				run: (*parser).callonTextDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 88, col: 22, offset: 2499},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 88, col: 22, offset: 2499},
							expr: &ruleRefExpr{
								pos:  position{line: 88, col: 23, offset: 2500},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 89, col: 5, offset: 2509},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 89, col: 12, offset: 2516},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 89, col: 12, offset: 2516},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 89, col: 24, offset: 2528},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 96, col: 1, offset: 2674},
			expr: &ruleRefExpr{
				pos:  position{line: 96, col: 16, offset: 2689},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 98, col: 1, offset: 2707},
			expr: &actionExpr{
				pos: position{line: 98, col: 20, offset: 2726},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 98, col: 20, offset: 2726},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 98, col: 20, offset: 2726},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 98, col: 41, offset: 2747},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 98, col: 49, offset: 2755},
								expr: &ruleRefExpr{
									pos:  position{line: 98, col: 50, offset: 2756},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 98, col: 75, offset: 2781},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 102, col: 1, offset: 2861},
			expr: &seqExpr{
				pos: position{line: 102, col: 26, offset: 2886},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 102, col: 26, offset: 2886},
						val:        "---",
						ignoreCase: false,
						want:       "\"---\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 102, col: 32, offset: 2892},
						expr: &ruleRefExpr{
							pos:  position{line: 102, col: 32, offset: 2892},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 102, col: 39, offset: 2899},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 104, col: 1, offset: 2904},
			expr: &actionExpr{
				pos: position{line: 104, col: 27, offset: 2930},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 104, col: 27, offset: 2930},
					expr: &oneOrMoreExpr{
						pos: position{line: 104, col: 28, offset: 2931},
						expr: &seqExpr{
							pos: position{line: 104, col: 29, offset: 2932},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 104, col: 29, offset: 2932},
									expr: &ruleRefExpr{
										pos:  position{line: 104, col: 30, offset: 2933},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 104, col: 51, offset: 2954,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 111, col: 1, offset: 3120},
			expr: &actionExpr{
				pos: position{line: 111, col: 19, offset: 3138},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 111, col: 19, offset: 3138},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 111, col: 19, offset: 3138},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 111, col: 23, offset: 3142},
							expr: &ruleRefExpr{
								pos:  position{line: 111, col: 23, offset: 3142},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 111, col: 30, offset: 3149},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 111, col: 37, offset: 3156},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 111, col: 52, offset: 3171},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 111, col: 56, offset: 3175},
								expr: &ruleRefExpr{
									pos:  position{line: 111, col: 56, offset: 3175},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 111, col: 74, offset: 3193},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 112, col: 9, offset: 3205},
							expr: &choiceExpr{
								pos: position{line: 112, col: 10, offset: 3206},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 112, col: 10, offset: 3206},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 112, col: 30, offset: 3226},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 113, col: 9, offset: 3249},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 113, col: 18, offset: 3258},
								expr: &ruleRefExpr{
									pos:  position{line: 113, col: 18, offset: 3258},
									name: "DocumentAuthors",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 114, col: 9, offset: 3285},
							expr: &choiceExpr{
								pos: position{line: 114, col: 10, offset: 3286},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 114, col: 10, offset: 3286},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 114, col: 30, offset: 3306},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 115, col: 9, offset: 3329},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 115, col: 19, offset: 3339},
								expr: &ruleRefExpr{
									pos:  position{line: 115, col: 19, offset: 3339},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 119, col: 1, offset: 3440},
			expr: &choiceExpr{
				pos: position{line: 119, col: 20, offset: 3459},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 119, col: 20, offset: 3459},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 119, col: 48, offset: 3487},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 121, col: 1, offset: 3517},
			expr: &actionExpr{
				pos: position{line: 121, col: 30, offset: 3546},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 121, col: 30, offset: 3546},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 121, col: 30, offset: 3546},
							expr: &ruleRefExpr{
								pos:  position{line: 121, col: 30, offset: 3546},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 121, col: 37, offset: 3553},
							expr: &litMatcher{
								pos:        position{line: 121, col: 38, offset: 3554},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 121, col: 42, offset: 3558},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 121, col: 51, offset: 3567},
								expr: &ruleRefExpr{
									pos:  position{line: 121, col: 51, offset: 3567},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 121, col: 68, offset: 3584},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 125, col: 1, offset: 3654},
			expr: &actionExpr{
				pos: position{line: 125, col: 33, offset: 3686},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 125, col: 33, offset: 3686},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 125, col: 33, offset: 3686},
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 33, offset: 3686},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 125, col: 40, offset: 3693},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 125, col: 51, offset: 3704},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 59, offset: 3712},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 125, col: 75, offset: 3728},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 129, col: 1, offset: 3807},
			expr: &actionExpr{
				pos: position{line: 129, col: 19, offset: 3825},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 129, col: 19, offset: 3825},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 129, col: 19, offset: 3825},
							expr: &ruleRefExpr{
								pos:  position{line: 129, col: 19, offset: 3825},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 129, col: 26, offset: 3832},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 129, col: 36, offset: 3842},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 129, col: 56, offset: 3862},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 129, col: 62, offset: 3868},
								expr: &ruleRefExpr{
									pos:  position{line: 129, col: 63, offset: 3869},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 129, col: 85, offset: 3891},
							expr: &ruleRefExpr{
								pos:  position{line: 129, col: 85, offset: 3891},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 129, col: 92, offset: 3898},
							expr: &litMatcher{
								pos:        position{line: 129, col: 92, offset: 3898},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 129, col: 97, offset: 3903},
							expr: &ruleRefExpr{
								pos:  position{line: 129, col: 97, offset: 3903},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 134, col: 1, offset: 4048},
			expr: &actionExpr{
				pos: position{line: 134, col: 23, offset: 4070},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 134, col: 23, offset: 4070},
					expr: &charClassMatcher{
						pos:        position{line: 134, col: 23, offset: 4070},
						val:        "[^<;\\r\\n]",
						chars:      []rune{'<', ';', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 138, col: 1, offset: 4117},
			expr: &actionExpr{
				pos: position{line: 138, col: 24, offset: 4140},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 138, col: 24, offset: 4140},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 138, col: 24, offset: 4140},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 138, col: 28, offset: 4144},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 138, col: 35, offset: 4151},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 138, col: 36, offset: 4152},
									expr: &charClassMatcher{
										pos:        position{line: 138, col: 36, offset: 4152},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 140, col: 4, offset: 4199},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 146, col: 1, offset: 4360},
			expr: &actionExpr{
				pos: position{line: 146, col: 21, offset: 4380},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 146, col: 21, offset: 4380},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 146, col: 21, offset: 4380},
							expr: &ruleRefExpr{
								pos:  position{line: 146, col: 21, offset: 4380},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 146, col: 28, offset: 4387},
							expr: &litMatcher{
								pos:        position{line: 146, col: 29, offset: 4388},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 146, col: 33, offset: 4392},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 147, col: 9, offset: 4411},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 147, col: 10, offset: 4412},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 147, col: 10, offset: 4412},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 147, col: 10, offset: 4412},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 147, col: 21, offset: 4423},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 147, col: 45, offset: 4447},
													expr: &litMatcher{
														pos:        position{line: 147, col: 45, offset: 4447},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 147, col: 50, offset: 4452},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 147, col: 58, offset: 4460},
														expr: &ruleRefExpr{
															pos:  position{line: 147, col: 59, offset: 4461},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 147, col: 82, offset: 4484},
													expr: &litMatcher{
														pos:        position{line: 147, col: 82, offset: 4484},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 147, col: 87, offset: 4489},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 147, col: 97, offset: 4499},
														expr: &ruleRefExpr{
															pos:  position{line: 147, col: 98, offset: 4500},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 149, col: 15, offset: 4617},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 149, col: 15, offset: 4617},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 149, col: 15, offset: 4617},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 149, col: 24, offset: 4626},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 149, col: 46, offset: 4648},
													expr: &litMatcher{
														pos:        position{line: 149, col: 46, offset: 4648},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 149, col: 51, offset: 4653},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 149, col: 61, offset: 4663},
														expr: &ruleRefExpr{
															pos:  position{line: 149, col: 62, offset: 4664},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 151, col: 13, offset: 4773},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 156, col: 1, offset: 4903},
			expr: &choiceExpr{
				pos: position{line: 156, col: 27, offset: 4929},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 156, col: 27, offset: 4929},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 156, col: 27, offset: 4929},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 156, col: 27, offset: 4929},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 156, col: 32, offset: 4934},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 156, col: 39, offset: 4941},
									expr: &charClassMatcher{
										pos:        position{line: 156, col: 39, offset: 4941},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 158, col: 5, offset: 4989},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 158, col: 5, offset: 4989},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 158, col: 5, offset: 4989},
									expr: &litMatcher{
										pos:        position{line: 158, col: 5, offset: 4989},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 158, col: 11, offset: 4995},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 158, col: 18, offset: 5002},
									expr: &charClassMatcher{
										pos:        position{line: 158, col: 18, offset: 5002},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 158, col: 29, offset: 5013},
									expr: &ruleRefExpr{
										pos:  position{line: 158, col: 29, offset: 5013},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 158, col: 36, offset: 5020},
									expr: &litMatcher{
										pos:        position{line: 158, col: 37, offset: 5021},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 162, col: 1, offset: 5061},
			expr: &actionExpr{
				pos: position{line: 162, col: 25, offset: 5085},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 162, col: 25, offset: 5085},
					expr: &charClassMatcher{
						pos:        position{line: 162, col: 25, offset: 5085},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 166, col: 1, offset: 5131},
			expr: &actionExpr{
				pos: position{line: 166, col: 27, offset: 5157},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 166, col: 27, offset: 5157},
					expr: &charClassMatcher{
						pos:        position{line: 166, col: 27, offset: 5157},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 173, col: 1, offset: 5310},
			expr: &actionExpr{
				pos: position{line: 173, col: 25, offset: 5334},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 173, col: 25, offset: 5334},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 173, col: 25, offset: 5334},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 173, col: 29, offset: 5338},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 173, col: 35, offset: 5344},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 173, col: 50, offset: 5359},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 174, col: 9, offset: 5372},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 174, col: 15, offset: 5378},
								expr: &actionExpr{
									pos: position{line: 174, col: 16, offset: 5379},
									run: (*parser).callonAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 174, col: 17, offset: 5380},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 174, col: 17, offset: 5380},
												expr: &ruleRefExpr{
													pos:  position{line: 174, col: 17, offset: 5380},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 174, col: 24, offset: 5387},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 174, col: 31, offset: 5394},
													name: "AttributeDeclarationValue",
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 176, col: 13, offset: 5468},
							expr: &ruleRefExpr{
								pos:  position{line: 176, col: 13, offset: 5468},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 176, col: 20, offset: 5475},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeName",
			pos:  position{line: 183, col: 1, offset: 5715},
			expr: &actionExpr{
				pos: position{line: 183, col: 18, offset: 5732},
				run: (*parser).callonAttributeName1,
				expr: &seqExpr{
					pos: position{line: 183, col: 18, offset: 5732},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 183, col: 18, offset: 5732},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 183, col: 28, offset: 5742},
							expr: &charClassMatcher{
								pos:        position{line: 183, col: 29, offset: 5743},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 187, col: 1, offset: 5791},
			expr: &actionExpr{
				pos: position{line: 187, col: 30, offset: 5820},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 187, col: 30, offset: 5820},
					expr: &charClassMatcher{
						pos:        position{line: 187, col: 30, offset: 5820},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 191, col: 1, offset: 5865},
			expr: &choiceExpr{
				pos: position{line: 191, col: 19, offset: 5883},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 191, col: 19, offset: 5883},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 191, col: 19, offset: 5883},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 191, col: 19, offset: 5883},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 191, col: 24, offset: 5888},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 191, col: 30, offset: 5894},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 191, col: 45, offset: 5909},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 191, col: 49, offset: 5913},
									expr: &ruleRefExpr{
										pos:  position{line: 191, col: 49, offset: 5913},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 191, col: 56, offset: 5920},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 193, col: 5, offset: 5980},
						run: (*parser).callonAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 193, col: 5, offset: 5980},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 193, col: 5, offset: 5980},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 193, col: 9, offset: 5984},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 193, col: 15, offset: 5990},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 193, col: 30, offset: 6005},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 193, col: 35, offset: 6010},
									expr: &ruleRefExpr{
										pos:  position{line: 193, col: 35, offset: 6010},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 193, col: 42, offset: 6017},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeSubstitution",
			pos:  position{line: 197, col: 1, offset: 6076},
			expr: &actionExpr{
				pos: position{line: 197, col: 26, offset: 6101},
				run: (*parser).callonAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 197, col: 26, offset: 6101},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 197, col: 26, offset: 6101},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 197, col: 30, offset: 6105},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 197, col: 36, offset: 6111},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 197, col: 51, offset: 6126},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "Attributes",
			pos:  position{line: 201, col: 1, offset: 6192},
			expr: &actionExpr{
				pos: position{line: 201, col: 15, offset: 6206},
				run: (*parser).callonAttributes1,
				expr: &seqExpr{
					pos: position{line: 201, col: 15, offset: 6206},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 201, col: 15, offset: 6206},
							label: "attrs",
							expr: &oneOrMoreExpr{
								pos: position{line: 201, col: 21, offset: 6212},
								expr: &ruleRefExpr{
									pos:  position{line: 201, col: 22, offset: 6213},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 201, col: 41, offset: 6232},
							expr: &ruleRefExpr{
								pos:  position{line: 201, col: 41, offset: 6232},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 205, col: 1, offset: 6302},
			expr: &actionExpr{
				pos: position{line: 205, col: 21, offset: 6322},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 205, col: 21, offset: 6322},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 205, col: 21, offset: 6322},
							expr: &choiceExpr{
								pos: position{line: 205, col: 23, offset: 6324},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 205, col: 23, offset: 6324},
										val:        "[",
										ignoreCase: false,
										want:       "\"[\"",
									},
									&litMatcher{
										pos:        position{line: 205, col: 29, offset: 6330},
										val:        ".",
										ignoreCase: false,
										want:       "\".\"",
									},
									&litMatcher{
										pos:        position{line: 205, col: 35, offset: 6336},
										val:        "#",
										ignoreCase: false,
										want:       "\"#\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 206, col: 5, offset: 6412},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 206, col: 11, offset: 6418},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 206, col: 11, offset: 6418},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 207, col: 9, offset: 6439},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 208, col: 9, offset: 6463},
										name: "ElementRole",
									},
									&ruleRefExpr{
										pos:  position{line: 209, col: 9, offset: 6486},
										name: "LiteralAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 210, col: 9, offset: 6514},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 211, col: 9, offset: 6542},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 212, col: 9, offset: 6569},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 213, col: 9, offset: 6596},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 214, col: 9, offset: 6633},
										name: "HorizontalLayout",
									},
									&ruleRefExpr{
										pos:  position{line: 215, col: 9, offset: 6661},
										name: "PassthroughBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 216, col: 9, offset: 6698},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MasqueradeAttribute",
			pos:  position{line: 221, col: 1, offset: 6881},
			expr: &choiceExpr{
				pos: position{line: 221, col: 24, offset: 6904},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 221, col: 24, offset: 6904},
						name: "QuoteAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 221, col: 42, offset: 6922},
						name: "VerseAttributes",
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 223, col: 1, offset: 6939},
			expr: &choiceExpr{
				pos: position{line: 223, col: 14, offset: 6952},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 223, col: 14, offset: 6952},
						run: (*parser).callonElementID2,
						expr: &seqExpr{
							pos: position{line: 223, col: 14, offset: 6952},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 223, col: 14, offset: 6952},
									val:        "[[",
									ignoreCase: false,
									want:       "\"[[\"",
								},
								&labeledExpr{
									pos:   position{line: 223, col: 19, offset: 6957},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 223, col: 23, offset: 6961},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 223, col: 27, offset: 6965},
									val:        "]]",
									ignoreCase: false,
									want:       "\"]]\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 223, col: 32, offset: 6970},
									expr: &ruleRefExpr{
										pos:  position{line: 223, col: 32, offset: 6970},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 223, col: 39, offset: 6977},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 225, col: 5, offset: 7030},
						run: (*parser).callonElementID11,
						expr: &seqExpr{
							pos: position{line: 225, col: 5, offset: 7030},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 225, col: 5, offset: 7030},
									val:        "[#",
									ignoreCase: false,
									want:       "\"[#\"",
								},
								&labeledExpr{
									pos:   position{line: 225, col: 10, offset: 7035},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 225, col: 14, offset: 7039},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 225, col: 18, offset: 7043},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 225, col: 23, offset: 7048},
									expr: &ruleRefExpr{
										pos:  position{line: 225, col: 23, offset: 7048},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 225, col: 30, offset: 7055},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 229, col: 1, offset: 7107},
			expr: &actionExpr{
				pos: position{line: 229, col: 20, offset: 7126},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 229, col: 20, offset: 7126},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 229, col: 20, offset: 7126},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 229, col: 25, offset: 7131},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 229, col: 29, offset: 7135},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 229, col: 33, offset: 7139},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 229, col: 38, offset: 7144},
							expr: &ruleRefExpr{
								pos:  position{line: 229, col: 38, offset: 7144},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 235, col: 1, offset: 7421},
			expr: &actionExpr{
				pos: position{line: 235, col: 17, offset: 7437},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 235, col: 17, offset: 7437},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 235, col: 17, offset: 7437},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 235, col: 21, offset: 7441},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 235, col: 28, offset: 7448},
								name: "ElementTitleContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 235, col: 49, offset: 7469},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementTitleContent",
			pos:  position{line: 239, col: 1, offset: 7527},
			expr: &actionExpr{
				pos: position{line: 239, col: 24, offset: 7550},
				run: (*parser).callonElementTitleContent1,
				expr: &seqExpr{
					pos: position{line: 239, col: 24, offset: 7550},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 239, col: 24, offset: 7550},
							val:        "[\\pL0-9]",
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 239, col: 32, offset: 7558},
							expr: &charClassMatcher{
								pos:        position{line: 239, col: 32, offset: 7558},
								val:        "[^\\r\\n<>]",
								chars:      []rune{'\r', '\n', '<', '>'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "ElementRole",
			pos:  position{line: 245, col: 1, offset: 7785},
			expr: &actionExpr{
				pos: position{line: 245, col: 16, offset: 7800},
				run: (*parser).callonElementRole1,
				expr: &seqExpr{
					pos: position{line: 245, col: 16, offset: 7800},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 245, col: 16, offset: 7800},
							val:        "[.",
							ignoreCase: false,
							want:       "\"[.\"",
						},
						&labeledExpr{
							pos:   position{line: 245, col: 21, offset: 7805},
							label: "role",
							expr: &actionExpr{
								pos: position{line: 245, col: 27, offset: 7811},
								run: (*parser).callonElementRole5,
								expr: &seqExpr{
									pos: position{line: 245, col: 27, offset: 7811},
									exprs: []interface{}{
										&charClassMatcher{
											pos:        position{line: 245, col: 27, offset: 7811},
											val:        "[\\pL0-9]",
											ranges:     []rune{'0', '9'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
										&zeroOrMoreExpr{
											pos: position{line: 245, col: 36, offset: 7820},
											expr: &charClassMatcher{
												pos:        position{line: 245, col: 36, offset: 7820},
												val:        "[^\\]\\r\\n]",
												chars:      []rune{']', '\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 247, col: 4, offset: 7867},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 247, col: 8, offset: 7871},
							expr: &ruleRefExpr{
								pos:  position{line: 247, col: 8, offset: 7871},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 247, col: 15, offset: 7878},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "LiteralAttribute",
			pos:  position{line: 251, col: 1, offset: 7934},
			expr: &actionExpr{
				pos: position{line: 251, col: 21, offset: 7954},
				run: (*parser).callonLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 251, col: 21, offset: 7954},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 251, col: 21, offset: 7954},
							val:        "[literal]",
							ignoreCase: false,
							want:       "\"[literal]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 251, col: 33, offset: 7966},
							expr: &ruleRefExpr{
								pos:  position{line: 251, col: 33, offset: 7966},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 251, col: 40, offset: 7973},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockAttribute",
			pos:  position{line: 255, col: 1, offset: 8025},
			expr: &actionExpr{
				pos: position{line: 255, col: 30, offset: 8054},
				run: (*parser).callonPassthroughBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 255, col: 30, offset: 8054},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 255, col: 30, offset: 8054},
							val:        "[pass]",
							ignoreCase: false,
							want:       "\"[pass]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 255, col: 39, offset: 8063},
							expr: &ruleRefExpr{
								pos:  position{line: 255, col: 39, offset: 8063},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 255, col: 46, offset: 8070},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 260, col: 1, offset: 8211},
			expr: &actionExpr{
				pos: position{line: 260, col: 30, offset: 8240},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 260, col: 30, offset: 8240},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 260, col: 30, offset: 8240},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 260, col: 34, offset: 8244},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 260, col: 37, offset: 8247},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 260, col: 53, offset: 8263},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 260, col: 57, offset: 8267},
							expr: &ruleRefExpr{
								pos:  position{line: 260, col: 57, offset: 8267},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 260, col: 64, offset: 8274},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 265, col: 1, offset: 8429},
			expr: &actionExpr{
				pos: position{line: 265, col: 21, offset: 8449},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 265, col: 21, offset: 8449},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 265, col: 21, offset: 8449},
							val:        "[source",
							ignoreCase: false,
							want:       "\"[source\"",
						},
						&labeledExpr{
							pos:   position{line: 266, col: 5, offset: 8464},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 266, col: 14, offset: 8473},
								expr: &actionExpr{
									pos: position{line: 266, col: 15, offset: 8474},
									run: (*parser).callonSourceAttributes6,
									expr: &seqExpr{
										pos: position{line: 266, col: 15, offset: 8474},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 266, col: 15, offset: 8474},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 266, col: 19, offset: 8478},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 266, col: 24, offset: 8483},
													expr: &ruleRefExpr{
														pos:  position{line: 266, col: 25, offset: 8484},
														name: "StandaloneAttributeValue",
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 267, col: 5, offset: 8539},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 267, col: 12, offset: 8546},
								expr: &actionExpr{
									pos: position{line: 267, col: 13, offset: 8547},
									run: (*parser).callonSourceAttributes14,
									expr: &seqExpr{
										pos: position{line: 267, col: 13, offset: 8547},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 267, col: 13, offset: 8547},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 267, col: 17, offset: 8551},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 267, col: 22, offset: 8556},
													expr: &ruleRefExpr{
														pos:  position{line: 267, col: 23, offset: 8557},
														name: "GenericAttribute",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 268, col: 5, offset: 8604},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 268, col: 9, offset: 8608},
							expr: &ruleRefExpr{
								pos:  position{line: 268, col: 9, offset: 8608},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 268, col: 16, offset: 8615},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 273, col: 1, offset: 8766},
			expr: &actionExpr{
				pos: position{line: 273, col: 19, offset: 8784},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 273, col: 19, offset: 8784},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 273, col: 19, offset: 8784},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 273, col: 23, offset: 8788},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 273, col: 34, offset: 8799},
								expr: &ruleRefExpr{
									pos:  position{line: 273, col: 35, offset: 8800},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 273, col: 54, offset: 8819},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 273, col: 58, offset: 8823},
							expr: &ruleRefExpr{
								pos:  position{line: 273, col: 58, offset: 8823},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 273, col: 65, offset: 8830},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 277, col: 1, offset: 8902},
			expr: &choiceExpr{
				pos: position{line: 277, col: 21, offset: 8922},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 277, col: 21, offset: 8922},
						name: "GenericAttributeWithValue",
					},
					&ruleRefExpr{
						pos:  position{line: 277, col: 49, offset: 8950},
						name: "GenericAttributeWithoutValue",
					},
				},
			},
		},
		{
			name: "GenericAttributeWithValue",
			pos:  position{line: 279, col: 1, offset: 8980},
			expr: &actionExpr{
				pos: position{line: 279, col: 30, offset: 9009},
				run: (*parser).callonGenericAttributeWithValue1,
				expr: &seqExpr{
					pos: position{line: 279, col: 30, offset: 9009},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 279, col: 30, offset: 9009},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 279, col: 35, offset: 9014},
								name: "AttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 279, col: 49, offset: 9028},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 279, col: 53, offset: 9032},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 279, col: 59, offset: 9038},
								expr: &ruleRefExpr{
									pos:  position{line: 279, col: 60, offset: 9039},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 279, col: 77, offset: 9056},
							expr: &litMatcher{
								pos:        position{line: 279, col: 77, offset: 9056},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 279, col: 82, offset: 9061},
							expr: &ruleRefExpr{
								pos:  position{line: 279, col: 82, offset: 9061},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "GenericAttributeWithoutValue",
			pos:  position{line: 283, col: 1, offset: 9160},
			expr: &actionExpr{
				pos: position{line: 283, col: 33, offset: 9192},
				run: (*parser).callonGenericAttributeWithoutValue1,
				expr: &seqExpr{
					pos: position{line: 283, col: 33, offset: 9192},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 283, col: 33, offset: 9192},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 283, col: 38, offset: 9197},
								name: "AttributeKey",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 283, col: 52, offset: 9211},
							expr: &litMatcher{
								pos:        position{line: 283, col: 52, offset: 9211},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 283, col: 57, offset: 9216},
							expr: &ruleRefExpr{
								pos:  position{line: 283, col: 57, offset: 9216},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 287, col: 1, offset: 9304},
			expr: &actionExpr{
				pos: position{line: 287, col: 17, offset: 9320},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 287, col: 17, offset: 9320},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 287, col: 17, offset: 9320},
							expr: &litMatcher{
								pos:        position{line: 287, col: 18, offset: 9321},
								val:        "quote",
								ignoreCase: false,
								want:       "\"quote\"",
							},
						},
						&notExpr{
							pos: position{line: 287, col: 26, offset: 9329},
							expr: &litMatcher{
								pos:        position{line: 287, col: 27, offset: 9330},
								val:        "verse",
								ignoreCase: false,
								want:       "\"verse\"",
							},
						},
						&notExpr{
							pos: position{line: 287, col: 35, offset: 9338},
							expr: &litMatcher{
								pos:        position{line: 287, col: 36, offset: 9339},
								val:        "literal",
								ignoreCase: false,
								want:       "\"literal\"",
							},
						},
						&notExpr{
							pos: position{line: 287, col: 46, offset: 9349},
							expr: &oneOrMoreExpr{
								pos: position{line: 287, col: 48, offset: 9351},
								expr: &ruleRefExpr{
									pos:  position{line: 287, col: 48, offset: 9351},
									name: "Space",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 287, col: 56, offset: 9359},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 287, col: 61, offset: 9364},
								expr: &charClassMatcher{
									pos:        position{line: 287, col: 61, offset: 9364},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 287, col: 75, offset: 9378},
							expr: &ruleRefExpr{
								pos:  position{line: 287, col: 75, offset: 9378},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 291, col: 1, offset: 9421},
			expr: &actionExpr{
				pos: position{line: 291, col: 19, offset: 9439},
				run: (*parser).callonAttributeValue1,
				expr: &labeledExpr{
					pos:   position{line: 291, col: 19, offset: 9439},
					label: "value",
					expr: &oneOrMoreExpr{
						pos: position{line: 291, col: 26, offset: 9446},
						expr: &charClassMatcher{
							pos:        position{line: 291, col: 26, offset: 9446},
							val:        "[^\\r\\n=,\\]]",
							chars:      []rune{'\r', '\n', '=', ',', ']'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributeValue",
			pos:  position{line: 295, col: 1, offset: 9497},
			expr: &actionExpr{
				pos: position{line: 295, col: 29, offset: 9525},
				run: (*parser).callonStandaloneAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 295, col: 29, offset: 9525},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 295, col: 29, offset: 9525},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 295, col: 36, offset: 9532},
								expr: &charClassMatcher{
									pos:        position{line: 295, col: 36, offset: 9532},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&notExpr{
							pos: position{line: 295, col: 50, offset: 9546},
							expr: &litMatcher{
								pos:        position{line: 295, col: 51, offset: 9547},
								val:        "=",
								ignoreCase: false,
								want:       "\"=\"",
							},
						},
					},
				},
			},
		},
		{
			name: "HorizontalLayout",
			pos:  position{line: 299, col: 1, offset: 9713},
			expr: &actionExpr{
				pos: position{line: 299, col: 21, offset: 9733},
				run: (*parser).callonHorizontalLayout1,
				expr: &seqExpr{
					pos: position{line: 299, col: 21, offset: 9733},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 299, col: 21, offset: 9733},
							val:        "[horizontal]",
							ignoreCase: false,
							want:       "\"[horizontal]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 299, col: 36, offset: 9748},
							expr: &ruleRefExpr{
								pos:  position{line: 299, col: 36, offset: 9748},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 299, col: 43, offset: 9755},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 303, col: 1, offset: 9821},
			expr: &actionExpr{
				pos: position{line: 303, col: 20, offset: 9840},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 303, col: 20, offset: 9840},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 303, col: 20, offset: 9840},
							val:        "[quote",
							ignoreCase: false,
							want:       "\"[quote\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 303, col: 29, offset: 9849},
							expr: &ruleRefExpr{
								pos:  position{line: 303, col: 29, offset: 9849},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 303, col: 36, offset: 9856},
							expr: &litMatcher{
								pos:        position{line: 303, col: 36, offset: 9856},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 303, col: 41, offset: 9861},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 303, col: 48, offset: 9868},
								expr: &ruleRefExpr{
									pos:  position{line: 303, col: 49, offset: 9869},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 303, col: 66, offset: 9886},
							expr: &litMatcher{
								pos:        position{line: 303, col: 66, offset: 9886},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 303, col: 71, offset: 9891},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 303, col: 77, offset: 9897},
								expr: &ruleRefExpr{
									pos:  position{line: 303, col: 78, offset: 9898},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 303, col: 95, offset: 9915},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 303, col: 99, offset: 9919},
							expr: &ruleRefExpr{
								pos:  position{line: 303, col: 99, offset: 9919},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 303, col: 106, offset: 9926},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 307, col: 1, offset: 9995},
			expr: &actionExpr{
				pos: position{line: 307, col: 20, offset: 10014},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 307, col: 20, offset: 10014},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 307, col: 20, offset: 10014},
							val:        "[verse",
							ignoreCase: false,
							want:       "\"[verse\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 307, col: 29, offset: 10023},
							expr: &ruleRefExpr{
								pos:  position{line: 307, col: 29, offset: 10023},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 307, col: 36, offset: 10030},
							expr: &litMatcher{
								pos:        position{line: 307, col: 36, offset: 10030},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 307, col: 41, offset: 10035},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 307, col: 48, offset: 10042},
								expr: &ruleRefExpr{
									pos:  position{line: 307, col: 49, offset: 10043},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 307, col: 66, offset: 10060},
							expr: &litMatcher{
								pos:        position{line: 307, col: 66, offset: 10060},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 307, col: 71, offset: 10065},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 307, col: 77, offset: 10071},
								expr: &ruleRefExpr{
									pos:  position{line: 307, col: 78, offset: 10072},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 307, col: 95, offset: 10089},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 307, col: 99, offset: 10093},
							expr: &ruleRefExpr{
								pos:  position{line: 307, col: 99, offset: 10093},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 307, col: 106, offset: 10100},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 311, col: 1, offset: 10187},
			expr: &actionExpr{
				pos: position{line: 311, col: 19, offset: 10205},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 311, col: 20, offset: 10206},
					expr: &charClassMatcher{
						pos:        position{line: 311, col: 20, offset: 10206},
						val:        "[^\\r\\n,\\]]",
						chars:      []rune{'\r', '\n', ',', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 315, col: 1, offset: 10255},
			expr: &actionExpr{
				pos: position{line: 315, col: 21, offset: 10275},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 315, col: 21, offset: 10275},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 315, col: 21, offset: 10275},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 315, col: 25, offset: 10279},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 315, col: 31, offset: 10285},
								expr: &ruleRefExpr{
									pos:  position{line: 315, col: 32, offset: 10286},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 315, col: 51, offset: 10305},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedTextAttrs",
			pos:  position{line: 319, col: 1, offset: 10377},
			expr: &actionExpr{
				pos: position{line: 319, col: 20, offset: 10396},
				run: (*parser).callonQuotedTextAttrs1,
				expr: &seqExpr{
					pos: position{line: 319, col: 20, offset: 10396},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 319, col: 20, offset: 10396},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 319, col: 24, offset: 10400},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 319, col: 31, offset: 10407},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 319, col: 31, offset: 10407},
										expr: &ruleRefExpr{
											pos:  position{line: 319, col: 31, offset: 10407},
											name: "QuotedTextAttrRole",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 319, col: 51, offset: 10427},
										expr: &ruleRefExpr{
											pos:  position{line: 319, col: 51, offset: 10427},
											name: "ShortHandAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 319, col: 66, offset: 10442},
										expr: &ruleRefExpr{
											pos:  position{line: 319, col: 66, offset: 10442},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 319, col: 78, offset: 10454},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedTextAttrRole",
			pos:  position{line: 323, col: 1, offset: 10508},
			expr: &actionExpr{
				pos: position{line: 323, col: 23, offset: 10530},
				run: (*parser).callonQuotedTextAttrRole1,
				expr: &labeledExpr{
					pos:   position{line: 323, col: 23, offset: 10530},
					label: "role",
					expr: &ruleRefExpr{
						pos:  position{line: 323, col: 28, offset: 10535},
						name: "PositionalValue",
					},
				},
			},
		},
		{
			name: "StandaloneAttributes",
			pos:  position{line: 327, col: 1, offset: 10603},
			expr: &actionExpr{
				pos: position{line: 327, col: 25, offset: 10627},
				run: (*parser).callonStandaloneAttributes1,
				expr: &seqExpr{
					pos: position{line: 327, col: 25, offset: 10627},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 327, col: 25, offset: 10627},
							label: "attributes",
							expr: &oneOrMoreExpr{
								pos: position{line: 327, col: 36, offset: 10638},
								expr: &ruleRefExpr{
									pos:  position{line: 327, col: 37, offset: 10639},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 327, col: 56, offset: 10658},
							expr: &ruleRefExpr{
								pos:  position{line: 327, col: 56, offset: 10658},
								name: "BlankLine",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 327, col: 67, offset: 10669},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttr",
			pos:  position{line: 331, col: 1, offset: 10777},
			expr: &choiceExpr{
				pos: position{line: 331, col: 18, offset: 10794},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 331, col: 18, offset: 10794},
						name: "ShortHandAttrID",
					},
					&ruleRefExpr{
						pos:  position{line: 331, col: 36, offset: 10812},
						name: "ShortHandAttrOption",
					},
					&ruleRefExpr{
						pos:  position{line: 331, col: 58, offset: 10834},
						name: "ShortHandAttrRole",
					},
				},
			},
		},
		{
			name: "ShortHandAttrOption",
			pos:  position{line: 333, col: 1, offset: 10853},
			expr: &actionExpr{
				pos: position{line: 333, col: 24, offset: 10876},
				run: (*parser).callonShortHandAttrOption1,
				expr: &seqExpr{
					pos: position{line: 333, col: 24, offset: 10876},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 333, col: 24, offset: 10876},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 333, col: 28, offset: 10880},
							label: "option",
							expr: &ruleRefExpr{
								pos:  position{line: 333, col: 35, offset: 10887},
								name: "ShortHandValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttrID",
			pos:  position{line: 337, col: 1, offset: 10958},
			expr: &actionExpr{
				pos: position{line: 337, col: 20, offset: 10977},
				run: (*parser).callonShortHandAttrID1,
				expr: &seqExpr{
					pos: position{line: 337, col: 20, offset: 10977},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 337, col: 20, offset: 10977},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 337, col: 24, offset: 10981},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 337, col: 27, offset: 10984},
								name: "ShortHandValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttrRole",
			pos:  position{line: 341, col: 1, offset: 11047},
			expr: &actionExpr{
				pos: position{line: 341, col: 22, offset: 11068},
				run: (*parser).callonShortHandAttrRole1,
				expr: &seqExpr{
					pos: position{line: 341, col: 22, offset: 11068},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 341, col: 22, offset: 11068},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 341, col: 26, offset: 11072},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 341, col: 31, offset: 11077},
								name: "ShortHandValue",
							},
						},
					},
				},
			},
		},
		{
			name: "PositionalValue",
			pos:  position{line: 346, col: 1, offset: 11188},
			expr: &ruleRefExpr{
				pos:  position{line: 346, col: 20, offset: 11207},
				name: "ShortHandValue",
			},
		},
		{
			name: "ShortHandValue",
			pos:  position{line: 348, col: 1, offset: 11223},
			expr: &choiceExpr{
				pos: position{line: 348, col: 19, offset: 11241},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 348, col: 19, offset: 11241},
						name: "ShortHandValuePlain",
					},
					&ruleRefExpr{
						pos:  position{line: 348, col: 41, offset: 11263},
						name: "AttrValueSingleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 348, col: 65, offset: 11287},
						name: "AttrValueDoubleQuoted",
					},
				},
			},
		},
		{
			name: "ShortHandValuePlain",
			pos:  position{line: 352, col: 1, offset: 11485},
			expr: &actionExpr{
				pos: position{line: 352, col: 24, offset: 11508},
				run: (*parser).callonShortHandValuePlain1,
				expr: &seqExpr{
					pos: position{line: 352, col: 24, offset: 11508},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 352, col: 24, offset: 11508},
							val:        "[^,\\r\\n\"' \\t.#%=\\]]",
							chars:      []rune{',', '\r', '\n', '"', '\'', ' ', '\t', '.', '#', '%', '=', ']'},
							ignoreCase: false,
							inverted:   true,
						},
						&zeroOrMoreExpr{
							pos: position{line: 352, col: 43, offset: 11527},
							expr: &charClassMatcher{
								pos:        position{line: 352, col: 43, offset: 11527},
								val:        "[^,\\r\\n\"'.#%=\\]]",
								chars:      []rune{',', '\r', '\n', '"', '\'', '.', '#', '%', '=', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttr",
			pos:  position{line: 356, col: 1, offset: 11581},
			expr: &actionExpr{
				pos: position{line: 356, col: 14, offset: 11594},
				run: (*parser).callonNamedAttr1,
				expr: &seqExpr{
					pos: position{line: 356, col: 14, offset: 11594},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 356, col: 14, offset: 11594},
							expr: &seqExpr{
								pos: position{line: 356, col: 15, offset: 11595},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 356, col: 15, offset: 11595},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 356, col: 19, offset: 11599},
										expr: &ruleRefExpr{
											pos:  position{line: 356, col: 19, offset: 11599},
											name: "Space",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 356, col: 28, offset: 11608},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 356, col: 32, offset: 11612},
								name: "NamedAttrKey",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 356, col: 45, offset: 11625},
							expr: &ruleRefExpr{
								pos:  position{line: 356, col: 45, offset: 11625},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 356, col: 52, offset: 11632},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 356, col: 56, offset: 11636},
							expr: &ruleRefExpr{
								pos:  position{line: 356, col: 56, offset: 11636},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 356, col: 63, offset: 11643},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 356, col: 69, offset: 11649},
								name: "NamedAttrValue",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 356, col: 84, offset: 11664},
							expr: &ruleRefExpr{
								pos:  position{line: 356, col: 84, offset: 11664},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttrKey",
			pos:  position{line: 361, col: 1, offset: 11854},
			expr: &actionExpr{
				pos: position{line: 361, col: 17, offset: 11870},
				run: (*parser).callonNamedAttrKey1,
				expr: &seqExpr{
					pos: position{line: 361, col: 17, offset: 11870},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 361, col: 17, offset: 11870},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 361, col: 26, offset: 11879},
							expr: &charClassMatcher{
								pos:        position{line: 361, col: 26, offset: 11879},
								val:        "[\\pL0-9_-]",
								chars:      []rune{'_', '-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttrValue",
			pos:  position{line: 365, col: 1, offset: 11927},
			expr: &choiceExpr{
				pos: position{line: 365, col: 19, offset: 11945},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 365, col: 19, offset: 11945},
						name: "AttrValueNone",
					},
					&ruleRefExpr{
						pos:  position{line: 365, col: 35, offset: 11961},
						name: "AttrValueSingleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 365, col: 59, offset: 11985},
						name: "AttrValueDoubleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 365, col: 83, offset: 12009},
						name: "AttrValuePlain",
					},
				},
			},
		},
		{
			name: "AttrValuePlain",
			pos:  position{line: 367, col: 1, offset: 12025},
			expr: &actionExpr{
				pos: position{line: 367, col: 19, offset: 12043},
				run: (*parser).callonAttrValuePlain1,
				expr: &oneOrMoreExpr{
					pos: position{line: 367, col: 19, offset: 12043},
					expr: &charClassMatcher{
						pos:        position{line: 367, col: 19, offset: 12043},
						val:        "[^,\\r\\n\"' \\t\\]]",
						chars:      []rune{',', '\r', '\n', '"', '\'', ' ', '\t', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttrValueSingleQuoted",
			pos:  position{line: 371, col: 1, offset: 12096},
			expr: &actionExpr{
				pos: position{line: 371, col: 26, offset: 12121},
				run: (*parser).callonAttrValueSingleQuoted1,
				expr: &seqExpr{
					pos: position{line: 371, col: 26, offset: 12121},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 371, col: 26, offset: 12121},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 371, col: 30, offset: 12125},
							expr: &charClassMatcher{
								pos:        position{line: 371, col: 30, offset: 12125},
								val:        "[^'\\r\\n]",
								chars:      []rune{'\'', '\r', '\n'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 371, col: 40, offset: 12135},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "AttrValueDoubleQuoted",
			pos:  position{line: 375, col: 1, offset: 12192},
			expr: &actionExpr{
				pos: position{line: 375, col: 26, offset: 12217},
				run: (*parser).callonAttrValueDoubleQuoted1,
				expr: &seqExpr{
					pos: position{line: 375, col: 26, offset: 12217},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 375, col: 26, offset: 12217},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 375, col: 31, offset: 12222},
							expr: &charClassMatcher{
								pos:        position{line: 375, col: 31, offset: 12222},
								val:        "[^\"\\r\\n]",
								chars:      []rune{'"', '\r', '\n'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 375, col: 41, offset: 12232},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "AttrValueNone",
			pos:  position{line: 381, col: 1, offset: 12486},
			expr: &actionExpr{
				pos: position{line: 381, col: 18, offset: 12503},
				run: (*parser).callonAttrValueNone1,
				expr: &litMatcher{
					pos:        position{line: 381, col: 18, offset: 12503},
					val:        "None",
					ignoreCase: false,
					want:       "\"None\"",
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 389, col: 1, offset: 12685},
			expr: &choiceExpr{
				pos: position{line: 389, col: 17, offset: 12701},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 389, col: 17, offset: 12701},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 389, col: 38, offset: 12722},
						name: "DoubleQuotedString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 391, col: 1, offset: 12742},
			expr: &actionExpr{
				pos: position{line: 391, col: 23, offset: 12764},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 391, col: 23, offset: 12764},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 391, col: 23, offset: 12764},
							name: "SingleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 391, col: 46, offset: 12787},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 391, col: 55, offset: 12796},
								name: "SingleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 391, col: 82, offset: 12823},
							name: "SingleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 395, col: 1, offset: 12927},
			expr: &actionExpr{
				pos: position{line: 395, col: 31, offset: 12957},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 395, col: 31, offset: 12957},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 395, col: 41, offset: 12967},
						expr: &ruleRefExpr{
							pos:  position{line: 395, col: 41, offset: 12967},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringStart",
			pos:  position{line: 399, col: 1, offset: 13045},
			expr: &seqExpr{
				pos: position{line: 399, col: 27, offset: 13071},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 399, col: 27, offset: 13071},
						val:        "'`",
						ignoreCase: false,
						want:       "\"'`\"",
					},
					&notExpr{
						pos: position{line: 399, col: 32, offset: 13076},
						expr: &charClassMatcher{
							pos:        position{line: 399, col: 33, offset: 13077},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringEnd",
			pos:  position{line: 401, col: 1, offset: 13088},
			expr: &litMatcher{
				pos:        position{line: 401, col: 25, offset: 13112},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 404, col: 1, offset: 13200},
			expr: &actionExpr{
				pos: position{line: 404, col: 30, offset: 13229},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 404, col: 30, offset: 13229},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 405, col: 9, offset: 13247},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 405, col: 9, offset: 13247},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 405, col: 9, offset: 13247},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 405, col: 19, offset: 13257},
										expr: &ruleRefExpr{
											pos:  position{line: 405, col: 20, offset: 13258},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 406, col: 11, offset: 13314},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 406, col: 11, offset: 13314},
										expr: &ruleRefExpr{
											pos:  position{line: 406, col: 11, offset: 13314},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 406, col: 18, offset: 13321},
										expr: &ruleRefExpr{
											pos:  position{line: 406, col: 19, offset: 13322},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 407, col: 11, offset: 13353},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 407, col: 11, offset: 13353},
										expr: &litMatcher{
											pos:        position{line: 407, col: 12, offset: 13354},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 407, col: 16, offset: 13358},
										name: "Symbol",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 408, col: 11, offset: 13406},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 409, col: 11, offset: 13427},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 410, col: 11, offset: 13449},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 411, col: 11, offset: 13474},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 412, col: 11, offset: 13502},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 413, col: 11, offset: 13517},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 414, col: 11, offset: 13549},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 415, col: 11, offset: 13568},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 416, col: 11, offset: 13589},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 417, col: 11, offset: 13610},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 418, col: 11, offset: 13634},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 419, col: 11, offset: 13660},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 419, col: 11, offset: 13660},
										expr: &litMatcher{
											pos:        position{line: 419, col: 12, offset: 13661},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 419, col: 17, offset: 13666},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 420, col: 11, offset: 13690},
								name: "DoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 421, col: 11, offset: 13719},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 422, col: 11, offset: 13747},
								name: "SingleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringFallbackCharacter",
			pos:  position{line: 426, col: 1, offset: 13813},
			expr: &choiceExpr{
				pos: position{line: 426, col: 41, offset: 13853},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 426, col: 41, offset: 13853},
						val:        "[^\\r\\n\\t `]",
						chars:      []rune{'\r', '\n', '\t', ' ', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 426, col: 55, offset: 13867},
						run: (*parser).callonSingleQuotedStringFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 426, col: 55, offset: 13867},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 426, col: 55, offset: 13867},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 426, col: 59, offset: 13871},
									expr: &litMatcher{
										pos:        position{line: 426, col: 60, offset: 13872},
										val:        "'",
										ignoreCase: false,
										want:       "\"'\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 430, col: 1, offset: 13931},
			expr: &actionExpr{
				pos: position{line: 430, col: 23, offset: 13953},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 430, col: 23, offset: 13953},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 430, col: 23, offset: 13953},
							name: "DoubleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 430, col: 46, offset: 13976},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 430, col: 55, offset: 13985},
								name: "DoubleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 430, col: 82, offset: 14012},
							name: "DoubleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 434, col: 1, offset: 14116},
			expr: &actionExpr{
				pos: position{line: 434, col: 31, offset: 14146},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 434, col: 31, offset: 14146},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 434, col: 41, offset: 14156},
						expr: &ruleRefExpr{
							pos:  position{line: 434, col: 41, offset: 14156},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 439, col: 1, offset: 14316},
			expr: &actionExpr{
				pos: position{line: 439, col: 30, offset: 14345},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 439, col: 30, offset: 14345},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 440, col: 9, offset: 14363},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 440, col: 9, offset: 14363},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 440, col: 9, offset: 14363},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 440, col: 19, offset: 14373},
										expr: &ruleRefExpr{
											pos:  position{line: 440, col: 20, offset: 14374},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 441, col: 11, offset: 14430},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 441, col: 11, offset: 14430},
										expr: &ruleRefExpr{
											pos:  position{line: 441, col: 11, offset: 14430},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 441, col: 18, offset: 14437},
										expr: &ruleRefExpr{
											pos:  position{line: 441, col: 19, offset: 14438},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 442, col: 11, offset: 14469},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 443, col: 11, offset: 14486},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 444, col: 11, offset: 14507},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 445, col: 11, offset: 14529},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 446, col: 11, offset: 14554},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 447, col: 11, offset: 14582},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 448, col: 11, offset: 14597},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 449, col: 11, offset: 14629},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 450, col: 11, offset: 14648},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 451, col: 11, offset: 14669},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 452, col: 11, offset: 14690},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 453, col: 11, offset: 14714},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 454, col: 11, offset: 14740},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 454, col: 11, offset: 14740},
										expr: &litMatcher{
											pos:        position{line: 454, col: 12, offset: 14741},
											val:        "`\"",
											ignoreCase: false,
											want:       "\"`\\\"\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 454, col: 18, offset: 14747},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 455, col: 11, offset: 14771},
								name: "SingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 456, col: 11, offset: 14800},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 457, col: 11, offset: 14828},
								name: "DoubleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringStart",
			pos:  position{line: 461, col: 1, offset: 14902},
			expr: &seqExpr{
				pos: position{line: 461, col: 27, offset: 14928},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 461, col: 27, offset: 14928},
						val:        "\"`",
						ignoreCase: false,
						want:       "\"\\\"`\"",
					},
					&notExpr{
						pos: position{line: 461, col: 33, offset: 14934},
						expr: &charClassMatcher{
							pos:        position{line: 461, col: 34, offset: 14935},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringEnd",
			pos:  position{line: 463, col: 1, offset: 14946},
			expr: &litMatcher{
				pos:        position{line: 463, col: 25, offset: 14970},
				val:        "`\"",
				ignoreCase: false,
				want:       "\"`\\\"\"",
			},
		},
		{
			name: "DoubleQuotedStringFallbackCharacter",
			pos:  position{line: 465, col: 1, offset: 14977},
			expr: &actionExpr{
				pos: position{line: 465, col: 41, offset: 15017},
				run: (*parser).callonDoubleQuotedStringFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 465, col: 42, offset: 15018},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 465, col: 42, offset: 15018},
							val:        "[^\\r\\n\\t `]",
							chars:      []rune{'\r', '\n', '\t', ' ', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 465, col: 56, offset: 15032},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 465, col: 56, offset: 15032},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 465, col: 60, offset: 15036},
									expr: &litMatcher{
										pos:        position{line: 465, col: 61, offset: 15037},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 472, col: 1, offset: 15202},
			expr: &actionExpr{
				pos: position{line: 472, col: 12, offset: 15213},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 472, col: 12, offset: 15213},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 472, col: 12, offset: 15213},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 472, col: 23, offset: 15224},
								expr: &ruleRefExpr{
									pos:  position{line: 472, col: 24, offset: 15225},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 473, col: 5, offset: 15242},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 473, col: 12, offset: 15249},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 473, col: 12, offset: 15249},
									expr: &litMatcher{
										pos:        position{line: 473, col: 13, offset: 15250},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 477, col: 5, offset: 15341},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 481, col: 5, offset: 15493},
							expr: &ruleRefExpr{
								pos:  position{line: 481, col: 5, offset: 15493},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 481, col: 12, offset: 15500},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 481, col: 19, offset: 15507},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 481, col: 34, offset: 15522},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 481, col: 38, offset: 15526},
								expr: &ruleRefExpr{
									pos:  position{line: 481, col: 38, offset: 15526},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 481, col: 56, offset: 15544},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 485, col: 1, offset: 15650},
			expr: &actionExpr{
				pos: position{line: 485, col: 18, offset: 15667},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 485, col: 18, offset: 15667},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 485, col: 27, offset: 15676},
						expr: &seqExpr{
							pos: position{line: 485, col: 28, offset: 15677},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 485, col: 28, offset: 15677},
									expr: &ruleRefExpr{
										pos:  position{line: 485, col: 29, offset: 15678},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 485, col: 37, offset: 15686},
									expr: &ruleRefExpr{
										pos:  position{line: 485, col: 38, offset: 15687},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 485, col: 54, offset: 15703},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 489, col: 1, offset: 15824},
			expr: &actionExpr{
				pos: position{line: 489, col: 17, offset: 15840},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 489, col: 17, offset: 15840},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 489, col: 26, offset: 15849},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 489, col: 26, offset: 15849},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 490, col: 11, offset: 15864},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 491, col: 11, offset: 15909},
								expr: &ruleRefExpr{
									pos:  position{line: 491, col: 11, offset: 15909},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 492, col: 11, offset: 15927},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 493, col: 11, offset: 15952},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 494, col: 11, offset: 15980},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 495, col: 11, offset: 16001},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 496, col: 11, offset: 16023},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 497, col: 11, offset: 16038},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 498, col: 11, offset: 16063},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 499, col: 11, offset: 16086},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 500, col: 11, offset: 16107},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 501, col: 11, offset: 16124},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 502, col: 11, offset: 16156},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 503, col: 11, offset: 16184},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsPlaceHolder",
			pos:  position{line: 510, col: 1, offset: 16335},
			expr: &seqExpr{
				pos: position{line: 510, col: 31, offset: 16365},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 510, col: 31, offset: 16365},
						val:        "toc::[]",
						ignoreCase: false,
						want:       "\"toc::[]\"",
					},
					&ruleRefExpr{
						pos:  position{line: 510, col: 41, offset: 16375},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 515, col: 1, offset: 16486},
			expr: &actionExpr{
				pos: position{line: 515, col: 19, offset: 16504},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 515, col: 19, offset: 16504},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 515, col: 19, offset: 16504},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 515, col: 25, offset: 16510},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 515, col: 40, offset: 16525},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 515, col: 45, offset: 16530},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 515, col: 52, offset: 16537},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 515, col: 68, offset: 16553},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 515, col: 75, offset: 16560},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 519, col: 1, offset: 16675},
			expr: &actionExpr{
				pos: position{line: 519, col: 20, offset: 16694},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 519, col: 20, offset: 16694},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 519, col: 20, offset: 16694},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 519, col: 26, offset: 16700},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 519, col: 41, offset: 16715},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 519, col: 45, offset: 16719},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 519, col: 52, offset: 16726},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 519, col: 68, offset: 16742},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 519, col: 75, offset: 16749},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 523, col: 1, offset: 16865},
			expr: &actionExpr{
				pos: position{line: 523, col: 18, offset: 16882},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 523, col: 19, offset: 16883},
					expr: &charClassMatcher{
						pos:        position{line: 523, col: 19, offset: 16883},
						val:        "[\\pL0-9_-]",
						chars:      []rune{'_', '-'},
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 527, col: 1, offset: 16932},
			expr: &actionExpr{
				pos: position{line: 527, col: 19, offset: 16950},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 527, col: 19, offset: 16950},
					expr: &charClassMatcher{
						pos:        position{line: 527, col: 19, offset: 16950},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 531, col: 1, offset: 16998},
			expr: &actionExpr{
				pos: position{line: 531, col: 24, offset: 17021},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 531, col: 24, offset: 17021},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 531, col: 24, offset: 17021},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 531, col: 28, offset: 17025},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 531, col: 34, offset: 17031},
								expr: &ruleRefExpr{
									pos:  position{line: 531, col: 35, offset: 17032},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 531, col: 54, offset: 17051},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 538, col: 1, offset: 17233},
			expr: &actionExpr{
				pos: position{line: 538, col: 18, offset: 17250},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 538, col: 18, offset: 17250},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 538, col: 18, offset: 17250},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 538, col: 24, offset: 17256},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 538, col: 24, offset: 17256},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 538, col: 24, offset: 17256},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 538, col: 36, offset: 17268},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 538, col: 42, offset: 17274},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 538, col: 56, offset: 17288},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 538, col: 74, offset: 17306},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 540, col: 8, offset: 17453},
							expr: &ruleRefExpr{
								pos:  position{line: 540, col: 8, offset: 17453},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 540, col: 15, offset: 17460},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 544, col: 1, offset: 17512},
			expr: &actionExpr{
				pos: position{line: 544, col: 26, offset: 17537},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 544, col: 26, offset: 17537},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 544, col: 26, offset: 17537},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 544, col: 30, offset: 17541},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 544, col: 36, offset: 17547},
								expr: &choiceExpr{
									pos: position{line: 544, col: 37, offset: 17548},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 544, col: 37, offset: 17548},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 544, col: 59, offset: 17570},
											name: "TagRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 544, col: 80, offset: 17591},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 544, col: 99, offset: 17610},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 548, col: 1, offset: 17682},
			expr: &actionExpr{
				pos: position{line: 548, col: 24, offset: 17705},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 548, col: 24, offset: 17705},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 548, col: 24, offset: 17705},
							val:        "lines=",
							ignoreCase: false,
							want:       "\"lines=\"",
						},
						&labeledExpr{
							pos:   position{line: 548, col: 33, offset: 17714},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 548, col: 40, offset: 17721},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 548, col: 66, offset: 17747},
							expr: &litMatcher{
								pos:        position{line: 548, col: 66, offset: 17747},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 552, col: 1, offset: 17806},
			expr: &actionExpr{
				pos: position{line: 552, col: 29, offset: 17834},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 552, col: 29, offset: 17834},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 552, col: 29, offset: 17834},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 552, col: 36, offset: 17841},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 552, col: 36, offset: 17841},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 553, col: 11, offset: 17958},
										name: "MultipleQuotedLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 554, col: 11, offset: 17994},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 555, col: 11, offset: 18020},
										name: "MultiLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 556, col: 11, offset: 18052},
										name: "SingleLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 557, col: 11, offset: 18084},
										name: "SingleLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 558, col: 11, offset: 18111},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 558, col: 31, offset: 18131},
							expr: &ruleRefExpr{
								pos:  position{line: 558, col: 31, offset: 18131},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 558, col: 39, offset: 18139},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 558, col: 39, offset: 18139},
									expr: &litMatcher{
										pos:        position{line: 558, col: 40, offset: 18140},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 558, col: 46, offset: 18146},
									expr: &litMatcher{
										pos:        position{line: 558, col: 47, offset: 18147},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 562, col: 1, offset: 18179},
			expr: &actionExpr{
				pos: position{line: 562, col: 23, offset: 18201},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 562, col: 23, offset: 18201},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 562, col: 23, offset: 18201},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 562, col: 30, offset: 18208},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 562, col: 30, offset: 18208},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 562, col: 47, offset: 18225},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 563, col: 5, offset: 18247},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 563, col: 12, offset: 18254},
								expr: &actionExpr{
									pos: position{line: 563, col: 13, offset: 18255},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 563, col: 13, offset: 18255},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 563, col: 13, offset: 18255},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 563, col: 17, offset: 18259},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 563, col: 24, offset: 18266},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 563, col: 24, offset: 18266},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 563, col: 41, offset: 18283},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedLineRanges",
			pos:  position{line: 569, col: 1, offset: 18421},
			expr: &actionExpr{
				pos: position{line: 569, col: 29, offset: 18449},
				run: (*parser).callonMultipleQuotedLineRanges1,
				expr: &seqExpr{
					pos: position{line: 569, col: 29, offset: 18449},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 569, col: 29, offset: 18449},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 569, col: 34, offset: 18454},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 569, col: 41, offset: 18461},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 569, col: 41, offset: 18461},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 569, col: 58, offset: 18478},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 570, col: 5, offset: 18500},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 570, col: 12, offset: 18507},
								expr: &actionExpr{
									pos: position{line: 570, col: 13, offset: 18508},
									run: (*parser).callonMultipleQuotedLineRanges10,
									expr: &seqExpr{
										pos: position{line: 570, col: 13, offset: 18508},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 570, col: 13, offset: 18508},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 570, col: 17, offset: 18512},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 570, col: 24, offset: 18519},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 570, col: 24, offset: 18519},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 570, col: 41, offset: 18536},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 572, col: 9, offset: 18589},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 576, col: 1, offset: 18679},
			expr: &actionExpr{
				pos: position{line: 576, col: 19, offset: 18697},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 576, col: 19, offset: 18697},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 576, col: 19, offset: 18697},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 576, col: 26, offset: 18704},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 576, col: 34, offset: 18712},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 576, col: 39, offset: 18717},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 576, col: 44, offset: 18722},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineQuotedRange",
			pos:  position{line: 580, col: 1, offset: 18810},
			expr: &actionExpr{
				pos: position{line: 580, col: 25, offset: 18834},
				run: (*parser).callonMultiLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 580, col: 25, offset: 18834},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 580, col: 25, offset: 18834},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 580, col: 30, offset: 18839},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 580, col: 37, offset: 18846},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 580, col: 45, offset: 18854},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 580, col: 50, offset: 18859},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 580, col: 55, offset: 18864},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 580, col: 63, offset: 18872},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 584, col: 1, offset: 18957},
			expr: &actionExpr{
				pos: position{line: 584, col: 20, offset: 18976},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 584, col: 20, offset: 18976},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 584, col: 32, offset: 18988},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SingleLineQuotedRange",
			pos:  position{line: 588, col: 1, offset: 19083},
			expr: &actionExpr{
				pos: position{line: 588, col: 26, offset: 19108},
				run: (*parser).callonSingleLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 588, col: 26, offset: 19108},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 588, col: 26, offset: 19108},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 588, col: 31, offset: 19113},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 588, col: 43, offset: 19125},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 588, col: 51, offset: 19133},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 592, col: 1, offset: 19225},
			expr: &actionExpr{
				pos: position{line: 592, col: 23, offset: 19247},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 592, col: 23, offset: 19247},
					expr: &charClassMatcher{
						pos:        position{line: 592, col: 23, offset: 19247},
						val:        "[^\\], ]",
						chars:      []rune{']', ',', ' '},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "TagRangesAttribute",
			pos:  position{line: 596, col: 1, offset: 19292},
			expr: &actionExpr{
				pos: position{line: 596, col: 23, offset: 19314},
				run: (*parser).callonTagRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 596, col: 23, offset: 19314},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 596, col: 24, offset: 19315},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 596, col: 24, offset: 19315},
									val:        "tags=",
									ignoreCase: false,
									want:       "\"tags=\"",
								},
								&litMatcher{
									pos:        position{line: 596, col: 34, offset: 19325},
									val:        "tag=",
									ignoreCase: false,
									want:       "\"tag=\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 596, col: 42, offset: 19333},
							label: "tags",
							expr: &ruleRefExpr{
								pos:  position{line: 596, col: 48, offset: 19339},
								name: "TagRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 596, col: 73, offset: 19364},
							expr: &litMatcher{
								pos:        position{line: 596, col: 73, offset: 19364},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttributeValue",
			pos:  position{line: 600, col: 1, offset: 19513},
			expr: &actionExpr{
				pos: position{line: 600, col: 28, offset: 19540},
				run: (*parser).callonTagRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 600, col: 28, offset: 19540},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 600, col: 28, offset: 19540},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 600, col: 35, offset: 19547},
								name: "MultipleTagRanges",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 600, col: 54, offset: 19566},
							expr: &ruleRefExpr{
								pos:  position{line: 600, col: 54, offset: 19566},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 600, col: 62, offset: 19574},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 600, col: 62, offset: 19574},
									expr: &litMatcher{
										pos:        position{line: 600, col: 63, offset: 19575},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 600, col: 69, offset: 19581},
									expr: &litMatcher{
										pos:        position{line: 600, col: 70, offset: 19582},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 604, col: 1, offset: 19614},
			expr: &actionExpr{
				pos: position{line: 604, col: 22, offset: 19635},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 604, col: 22, offset: 19635},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 604, col: 22, offset: 19635},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 604, col: 29, offset: 19642},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 605, col: 5, offset: 19656},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 605, col: 12, offset: 19663},
								expr: &actionExpr{
									pos: position{line: 605, col: 13, offset: 19664},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 605, col: 13, offset: 19664},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 605, col: 13, offset: 19664},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 605, col: 17, offset: 19668},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 605, col: 24, offset: 19675},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 611, col: 1, offset: 19806},
			expr: &choiceExpr{
				pos: position{line: 611, col: 13, offset: 19818},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 611, col: 13, offset: 19818},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 611, col: 13, offset: 19818},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 611, col: 18, offset: 19823},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 611, col: 18, offset: 19823},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 611, col: 30, offset: 19835},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 613, col: 5, offset: 19903},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 613, col: 5, offset: 19903},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 613, col: 5, offset: 19903},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 613, col: 9, offset: 19907},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 613, col: 14, offset: 19912},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 613, col: 14, offset: 19912},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 613, col: 26, offset: 19924},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 617, col: 1, offset: 19992},
			expr: &actionExpr{
				pos: position{line: 617, col: 16, offset: 20007},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 617, col: 16, offset: 20007},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 617, col: 16, offset: 20007},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 617, col: 23, offset: 20014},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 617, col: 23, offset: 20014},
									expr: &litMatcher{
										pos:        position{line: 617, col: 24, offset: 20015},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 620, col: 5, offset: 20069},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "VerbatimFileContent",
			pos:  position{line: 628, col: 1, offset: 20311},
			expr: &zeroOrMoreExpr{
				pos: position{line: 628, col: 24, offset: 20334},
				expr: &choiceExpr{
					pos: position{line: 628, col: 25, offset: 20335},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 628, col: 25, offset: 20335},
							name: "FileInclusion",
						},
						&ruleRefExpr{
							pos:  position{line: 628, col: 41, offset: 20351},
							name: "VerbatimFileLine",
						},
					},
				},
			},
		},
		{
			name: "VerbatimFileLine",
			pos:  position{line: 630, col: 1, offset: 20371},
			expr: &actionExpr{
				pos: position{line: 630, col: 21, offset: 20391},
				run: (*parser).callonVerbatimFileLine1,
				expr: &seqExpr{
					pos: position{line: 630, col: 21, offset: 20391},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 630, col: 21, offset: 20391},
							expr: &ruleRefExpr{
								pos:  position{line: 630, col: 22, offset: 20392},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 630, col: 26, offset: 20396},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 630, col: 35, offset: 20405},
								run: (*parser).callonVerbatimFileLine6,
								expr: &zeroOrMoreExpr{
									pos: position{line: 630, col: 35, offset: 20405},
									expr: &charClassMatcher{
										pos:        position{line: 630, col: 35, offset: 20405},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 632, col: 12, offset: 20467},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 639, col: 1, offset: 20666},
			expr: &actionExpr{
				pos: position{line: 639, col: 21, offset: 20686},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 639, col: 21, offset: 20686},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 639, col: 21, offset: 20686},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 639, col: 29, offset: 20694},
								expr: &choiceExpr{
									pos: position{line: 639, col: 30, offset: 20695},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 639, col: 30, offset: 20695},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 639, col: 53, offset: 20718},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 639, col: 74, offset: 20739},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 639, col: 74, offset: 20739,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 639, col: 107, offset: 20772},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 643, col: 1, offset: 20843},
			expr: &actionExpr{
				pos: position{line: 643, col: 25, offset: 20867},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 643, col: 25, offset: 20867},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 643, col: 25, offset: 20867},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 643, col: 33, offset: 20875},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 643, col: 38, offset: 20880},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 643, col: 38, offset: 20880},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 643, col: 78, offset: 20920},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 647, col: 1, offset: 20985},
			expr: &actionExpr{
				pos: position{line: 647, col: 23, offset: 21007},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 647, col: 23, offset: 21007},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 647, col: 23, offset: 21007},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 647, col: 31, offset: 21015},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 647, col: 36, offset: 21020},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 647, col: 36, offset: 21020},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 647, col: 76, offset: 21060},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 654, col: 1, offset: 21224},
			expr: &choiceExpr{
				pos: position{line: 654, col: 18, offset: 21241},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 654, col: 18, offset: 21241},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 654, col: 18, offset: 21241},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 654, col: 27, offset: 21250},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 656, col: 9, offset: 21307},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 656, col: 9, offset: 21307},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 656, col: 15, offset: 21313},
								expr: &ruleRefExpr{
									pos:  position{line: 656, col: 16, offset: 21314},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 660, col: 1, offset: 21406},
			expr: &actionExpr{
				pos: position{line: 660, col: 22, offset: 21427},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 660, col: 22, offset: 21427},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 660, col: 22, offset: 21427},
							expr: &ruleRefExpr{
								pos:  position{line: 660, col: 23, offset: 21428},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 661, col: 5, offset: 21436},
							expr: &ruleRefExpr{
								pos:  position{line: 661, col: 6, offset: 21437},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 662, col: 5, offset: 21452},
							expr: &ruleRefExpr{
								pos:  position{line: 662, col: 6, offset: 21453},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 663, col: 5, offset: 21475},
							expr: &ruleRefExpr{
								pos:  position{line: 663, col: 6, offset: 21476},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 664, col: 5, offset: 21502},
							expr: &ruleRefExpr{
								pos:  position{line: 664, col: 6, offset: 21503},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 665, col: 5, offset: 21531},
							expr: &ruleRefExpr{
								pos:  position{line: 665, col: 6, offset: 21532},
								name: "CalloutListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 666, col: 5, offset: 21558},
							expr: &ruleRefExpr{
								pos:  position{line: 666, col: 6, offset: 21559},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 667, col: 5, offset: 21584},
							expr: &ruleRefExpr{
								pos:  position{line: 667, col: 6, offset: 21585},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 668, col: 5, offset: 21606},
							expr: &ruleRefExpr{
								pos:  position{line: 668, col: 6, offset: 21607},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 669, col: 5, offset: 21626},
							expr: &ruleRefExpr{
								pos:  position{line: 669, col: 6, offset: 21627},
								name: "LabeledListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 670, col: 5, offset: 21654},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 670, col: 11, offset: 21660},
								run: (*parser).callonListParagraphLine24,
								expr: &labeledExpr{
									pos:   position{line: 670, col: 11, offset: 21660},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 670, col: 20, offset: 21669},
										expr: &ruleRefExpr{
											pos:  position{line: 670, col: 21, offset: 21670},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 672, col: 12, offset: 21769},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 676, col: 1, offset: 21808},
			expr: &seqExpr{
				pos: position{line: 676, col: 25, offset: 21832},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 676, col: 25, offset: 21832},
						val:        "+",
						ignoreCase: false,
						want:       "\"+\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 676, col: 29, offset: 21836},
						expr: &ruleRefExpr{
							pos:  position{line: 676, col: 29, offset: 21836},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 676, col: 36, offset: 21843},
						name: "Newline",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 678, col: 1, offset: 21915},
			expr: &actionExpr{
				pos: position{line: 678, col: 29, offset: 21943},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 678, col: 29, offset: 21943},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 678, col: 29, offset: 21943},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 678, col: 50, offset: 21964},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 678, col: 58, offset: 21972},
								name: "ContinuedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedListItemContent",
			pos:  position{line: 682, col: 1, offset: 22078},
			expr: &actionExpr{
				pos: position{line: 682, col: 29, offset: 22106},
				run: (*parser).callonContinuedListItemContent1,
				expr: &seqExpr{
					pos: position{line: 682, col: 29, offset: 22106},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 682, col: 29, offset: 22106},
							expr: &ruleRefExpr{
								pos:  position{line: 682, col: 30, offset: 22107},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 683, col: 5, offset: 22116},
							label: "content",
							expr: &choiceExpr{
								pos: position{line: 683, col: 14, offset: 22125},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 683, col: 14, offset: 22125},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 684, col: 11, offset: 22150},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 685, col: 11, offset: 22174},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 686, col: 11, offset: 22228},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 687, col: 11, offset: 22249},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 688, col: 11, offset: 22273},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 689, col: 11, offset: 22300},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 690, col: 11, offset: 22329},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 692, col: 11, offset: 22394},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 693, col: 11, offset: 22445},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 694, col: 11, offset: 22469},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 695, col: 11, offset: 22501},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 696, col: 11, offset: 22527},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 697, col: 11, offset: 22564},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 698, col: 11, offset: 22589},
										name: "ContinuedParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 705, col: 1, offset: 22752},
			expr: &actionExpr{
				pos: position{line: 705, col: 20, offset: 22771},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 705, col: 20, offset: 22771},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 705, col: 20, offset: 22771},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 705, col: 31, offset: 22782},
								expr: &ruleRefExpr{
									pos:  position{line: 705, col: 32, offset: 22783},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 705, col: 45, offset: 22796},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 705, col: 53, offset: 22804},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 705, col: 76, offset: 22827},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 705, col: 85, offset: 22836},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 709, col: 1, offset: 22976},
			expr: &actionExpr{
				pos: position{line: 710, col: 5, offset: 23006},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 710, col: 5, offset: 23006},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 710, col: 5, offset: 23006},
							expr: &ruleRefExpr{
								pos:  position{line: 710, col: 5, offset: 23006},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 710, col: 12, offset: 23013},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 712, col: 9, offset: 23076},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 712, col: 9, offset: 23076},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 712, col: 9, offset: 23076},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 712, col: 9, offset: 23076},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 712, col: 16, offset: 23083},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 712, col: 16, offset: 23083},
															expr: &litMatcher{
																pos:        position{line: 712, col: 17, offset: 23084},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 716, col: 9, offset: 23184},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 735, col: 11, offset: 23901},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 735, col: 11, offset: 23901},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 735, col: 11, offset: 23901},
													expr: &charClassMatcher{
														pos:        position{line: 735, col: 12, offset: 23902},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 735, col: 20, offset: 23910},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 737, col: 13, offset: 24021},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 737, col: 13, offset: 24021},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 737, col: 14, offset: 24022},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 737, col: 21, offset: 24029},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 739, col: 13, offset: 24143},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 739, col: 13, offset: 24143},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 739, col: 14, offset: 24144},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 739, col: 21, offset: 24151},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 741, col: 13, offset: 24265},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 741, col: 13, offset: 24265},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 741, col: 13, offset: 24265},
													expr: &charClassMatcher{
														pos:        position{line: 741, col: 14, offset: 24266},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 741, col: 22, offset: 24274},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 743, col: 13, offset: 24388},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 743, col: 13, offset: 24388},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 743, col: 13, offset: 24388},
													expr: &charClassMatcher{
														pos:        position{line: 743, col: 14, offset: 24389},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 743, col: 22, offset: 24397},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 745, col: 12, offset: 24510},
							expr: &ruleRefExpr{
								pos:  position{line: 745, col: 12, offset: 24510},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 749, col: 1, offset: 24545},
			expr: &actionExpr{
				pos: position{line: 749, col: 27, offset: 24571},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 749, col: 27, offset: 24571},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 749, col: 37, offset: 24581},
						expr: &ruleRefExpr{
							pos:  position{line: 749, col: 37, offset: 24581},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 756, col: 1, offset: 24781},
			expr: &actionExpr{
				pos: position{line: 756, col: 22, offset: 24802},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 756, col: 22, offset: 24802},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 756, col: 22, offset: 24802},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 756, col: 33, offset: 24813},
								expr: &ruleRefExpr{
									pos:  position{line: 756, col: 34, offset: 24814},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 756, col: 47, offset: 24827},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 756, col: 55, offset: 24835},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 756, col: 80, offset: 24860},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 756, col: 91, offset: 24871},
								expr: &ruleRefExpr{
									pos:  position{line: 756, col: 92, offset: 24872},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 756, col: 122, offset: 24902},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 756, col: 131, offset: 24911},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 760, col: 1, offset: 25069},
			expr: &actionExpr{
				pos: position{line: 761, col: 5, offset: 25101},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 761, col: 5, offset: 25101},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 761, col: 5, offset: 25101},
							expr: &ruleRefExpr{
								pos:  position{line: 761, col: 5, offset: 25101},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 761, col: 12, offset: 25108},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 761, col: 20, offset: 25116},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 763, col: 9, offset: 25173},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 763, col: 9, offset: 25173},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 763, col: 9, offset: 25173},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 763, col: 16, offset: 25180},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 763, col: 16, offset: 25180},
															expr: &litMatcher{
																pos:        position{line: 763, col: 17, offset: 25181},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 767, col: 9, offset: 25281},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 784, col: 14, offset: 25988},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 784, col: 21, offset: 25995},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 784, col: 22, offset: 25996},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 786, col: 13, offset: 26082},
							expr: &ruleRefExpr{
								pos:  position{line: 786, col: 13, offset: 26082},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 790, col: 1, offset: 26118},
			expr: &actionExpr{
				pos: position{line: 790, col: 32, offset: 26149},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 790, col: 32, offset: 26149},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 790, col: 32, offset: 26149},
							expr: &litMatcher{
								pos:        position{line: 790, col: 33, offset: 26150},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 790, col: 37, offset: 26154},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 791, col: 7, offset: 26168},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 791, col: 7, offset: 26168},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 791, col: 7, offset: 26168},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 792, col: 7, offset: 26213},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 792, col: 7, offset: 26213},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 793, col: 7, offset: 26256},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 793, col: 7, offset: 26256},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 794, col: 7, offset: 26298},
							expr: &ruleRefExpr{
								pos:  position{line: 794, col: 7, offset: 26298},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 798, col: 1, offset: 26340},
			expr: &actionExpr{
				pos: position{line: 798, col: 29, offset: 26368},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 798, col: 29, offset: 26368},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 798, col: 39, offset: 26378},
						expr: &ruleRefExpr{
							pos:  position{line: 798, col: 39, offset: 26378},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 805, col: 1, offset: 26694},
			expr: &actionExpr{
				pos: position{line: 805, col: 20, offset: 26713},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 805, col: 20, offset: 26713},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 805, col: 20, offset: 26713},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 805, col: 31, offset: 26724},
								expr: &ruleRefExpr{
									pos:  position{line: 805, col: 32, offset: 26725},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 805, col: 45, offset: 26738},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 805, col: 51, offset: 26744},
								name: "VerbatimLabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 805, col: 80, offset: 26773},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 805, col: 91, offset: 26784},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 805, col: 117, offset: 26810},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 805, col: 129, offset: 26822},
								expr: &ruleRefExpr{
									pos:  position{line: 805, col: 130, offset: 26823},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemPrefix",
			pos:  position{line: 809, col: 1, offset: 26969},
			expr: &seqExpr{
				pos: position{line: 809, col: 26, offset: 26994},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 809, col: 26, offset: 26994},
						name: "VerbatimLabeledListItemTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 809, col: 54, offset: 27022},
						name: "LabeledListItemSeparator",
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemChars",
			pos:  position{line: 811, col: 1, offset: 27048},
			expr: &choiceExpr{
				pos: position{line: 811, col: 33, offset: 27080},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 811, col: 33, offset: 27080},
						expr: &charClassMatcher{
							pos:        position{line: 811, col: 33, offset: 27080},
							val:        "[^:\\r\\n]",
							chars:      []rune{':', '\r', '\n'},
							ignoreCase: false,
							inverted:   true,
						},
					},
					&seqExpr{
						pos: position{line: 811, col: 45, offset: 27092},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 811, col: 45, offset: 27092},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
							&notExpr{
								pos: position{line: 811, col: 49, offset: 27096},
								expr: &litMatcher{
									pos:        position{line: 811, col: 50, offset: 27097},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemTerm",
			pos:  position{line: 812, col: 1, offset: 27101},
			expr: &actionExpr{
				pos: position{line: 812, col: 32, offset: 27132},
				run: (*parser).callonVerbatimLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 812, col: 32, offset: 27132},
					label: "content",
					expr: &actionExpr{
						pos: position{line: 812, col: 42, offset: 27142},
						run: (*parser).callonVerbatimLabeledListItemTerm3,
						expr: &oneOrMoreExpr{
							pos: position{line: 812, col: 42, offset: 27142},
							expr: &ruleRefExpr{
								pos:  position{line: 812, col: 42, offset: 27142},
								name: "VerbatimLabeledListItemChars",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 818, col: 1, offset: 27297},
			expr: &actionExpr{
				pos: position{line: 818, col: 24, offset: 27320},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 818, col: 24, offset: 27320},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 818, col: 33, offset: 27329},
						expr: &seqExpr{
							pos: position{line: 818, col: 34, offset: 27330},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 818, col: 34, offset: 27330},
									expr: &ruleRefExpr{
										pos:  position{line: 818, col: 35, offset: 27331},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 818, col: 43, offset: 27339},
									expr: &litMatcher{
										pos:        position{line: 818, col: 44, offset: 27340},
										val:        "::",
										ignoreCase: false,
										want:       "\"::\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 818, col: 49, offset: 27345},
									name: "LabeledListItemTermElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTermElement",
			pos:  position{line: 822, col: 1, offset: 27472},
			expr: &actionExpr{
				pos: position{line: 822, col: 31, offset: 27502},
				run: (*parser).callonLabeledListItemTermElement1,
				expr: &labeledExpr{
					pos:   position{line: 822, col: 31, offset: 27502},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 822, col: 40, offset: 27511},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 822, col: 40, offset: 27511},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 823, col: 11, offset: 27526},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 824, col: 11, offset: 27575},
								expr: &ruleRefExpr{
									pos:  position{line: 824, col: 11, offset: 27575},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 825, col: 11, offset: 27593},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 826, col: 11, offset: 27618},
								name: "ConcealedIndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 827, col: 11, offset: 27647},
								name: "IndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 828, col: 11, offset: 27667},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 829, col: 11, offset: 27695},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 830, col: 11, offset: 27716},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 831, col: 11, offset: 27739},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 832, col: 11, offset: 27754},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 833, col: 11, offset: 27779},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 834, col: 11, offset: 27802},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 835, col: 11, offset: 27823},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 836, col: 11, offset: 27840},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 837, col: 11, offset: 27872},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 838, col: 11, offset: 27900},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 842, col: 1, offset: 27939},
			expr: &actionExpr{
				pos: position{line: 843, col: 5, offset: 27972},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 843, col: 5, offset: 27972},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 843, col: 5, offset: 27972},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 843, col: 16, offset: 27983},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 843, col: 16, offset: 27983},
									expr: &litMatcher{
										pos:        position{line: 843, col: 17, offset: 27984},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 846, col: 5, offset: 28042},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 850, col: 6, offset: 28218},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 850, col: 6, offset: 28218},
									expr: &choiceExpr{
										pos: position{line: 850, col: 7, offset: 28219},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 850, col: 7, offset: 28219},
												name: "Space",
											},
											&ruleRefExpr{
												pos:  position{line: 850, col: 15, offset: 28227},
												name: "Newline",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 850, col: 27, offset: 28239},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 854, col: 1, offset: 28279},
			expr: &actionExpr{
				pos: position{line: 854, col: 31, offset: 28309},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 854, col: 31, offset: 28309},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 854, col: 40, offset: 28318},
						expr: &ruleRefExpr{
							pos:  position{line: 854, col: 41, offset: 28319},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 861, col: 1, offset: 28510},
			expr: &choiceExpr{
				pos: position{line: 861, col: 19, offset: 28528},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 861, col: 19, offset: 28528},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 861, col: 19, offset: 28528},
							val:        "TIP",
							ignoreCase: false,
							want:       "\"TIP\"",
						},
					},
					&actionExpr{
						pos: position{line: 863, col: 9, offset: 28574},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 863, col: 9, offset: 28574},
							val:        "NOTE",
							ignoreCase: false,
							want:       "\"NOTE\"",
						},
					},
					&actionExpr{
						pos: position{line: 865, col: 9, offset: 28622},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 865, col: 9, offset: 28622},
							val:        "IMPORTANT",
							ignoreCase: false,
							want:       "\"IMPORTANT\"",
						},
					},
					&actionExpr{
						pos: position{line: 867, col: 9, offset: 28680},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 867, col: 9, offset: 28680},
							val:        "WARNING",
							ignoreCase: false,
							want:       "\"WARNING\"",
						},
					},
					&actionExpr{
						pos: position{line: 869, col: 9, offset: 28734},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 869, col: 9, offset: 28734},
							val:        "CAUTION",
							ignoreCase: false,
							want:       "\"CAUTION\"",
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 878, col: 1, offset: 29041},
			expr: &choiceExpr{
				pos: position{line: 880, col: 5, offset: 29088},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 880, col: 5, offset: 29088},
						run: (*parser).callonParagraph2,
						expr: &seqExpr{
							pos: position{line: 880, col: 5, offset: 29088},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 880, col: 5, offset: 29088},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 880, col: 16, offset: 29099},
										expr: &ruleRefExpr{
											pos:  position{line: 880, col: 17, offset: 29100},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 880, col: 30, offset: 29113},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 880, col: 33, offset: 29116},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 880, col: 49, offset: 29132},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 880, col: 54, offset: 29137},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 880, col: 60, offset: 29143},
										expr: &ruleRefExpr{
											pos:  position{line: 880, col: 61, offset: 29144},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 884, col: 5, offset: 29325},
						run: (*parser).callonParagraph13,
						expr: &seqExpr{
							pos: position{line: 884, col: 5, offset: 29325},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 884, col: 5, offset: 29325},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 884, col: 16, offset: 29336},
										expr: &ruleRefExpr{
											pos:  position{line: 884, col: 17, offset: 29337},
											name: "Attributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 884, col: 30, offset: 29350},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
								&labeledExpr{
									pos:   position{line: 884, col: 35, offset: 29355},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 884, col: 44, offset: 29364},
										name: "MarkdownQuoteBlockVerbatimContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 888, col: 5, offset: 29559},
						run: (*parser).callonParagraph21,
						expr: &seqExpr{
							pos: position{line: 888, col: 5, offset: 29559},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 888, col: 5, offset: 29559},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 888, col: 16, offset: 29570},
										expr: &ruleRefExpr{
											pos:  position{line: 888, col: 17, offset: 29571},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 888, col: 30, offset: 29584},
									run: (*parser).callonParagraph26,
								},
								&notExpr{
									pos: position{line: 895, col: 7, offset: 29863},
									expr: &ruleRefExpr{
										pos:  position{line: 895, col: 8, offset: 29864},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 895, col: 23, offset: 29879},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 895, col: 32, offset: 29888},
										name: "OpenPassthroughParagraphContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 899, col: 5, offset: 30085},
						run: (*parser).callonParagraph31,
						expr: &seqExpr{
							pos: position{line: 899, col: 5, offset: 30085},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 899, col: 5, offset: 30085},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 899, col: 16, offset: 30096},
										expr: &ruleRefExpr{
											pos:  position{line: 899, col: 17, offset: 30097},
											name: "Attributes",
										},
									},
								},
								&notExpr{
									pos: position{line: 899, col: 30, offset: 30110},
									expr: &ruleRefExpr{
										pos:  position{line: 899, col: 31, offset: 30111},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 899, col: 46, offset: 30126},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 899, col: 52, offset: 30132},
										expr: &ruleRefExpr{
											pos:  position{line: 899, col: 53, offset: 30133},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockVerbatimContent",
			pos:  position{line: 903, col: 1, offset: 30229},
			expr: &oneOrMoreExpr{
				pos: position{line: 903, col: 38, offset: 30266},
				expr: &actionExpr{
					pos: position{line: 903, col: 39, offset: 30267},
					run: (*parser).callonMarkdownQuoteBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 903, col: 39, offset: 30267},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 903, col: 39, offset: 30267},
								expr: &ruleRefExpr{
									pos:  position{line: 903, col: 40, offset: 30268},
									name: "BlankLine",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 903, col: 50, offset: 30278},
								expr: &litMatcher{
									pos:        position{line: 903, col: 50, offset: 30278},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
							},
							&labeledExpr{
								pos:   position{line: 903, col: 56, offset: 30284},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 903, col: 65, offset: 30293},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockAttribution",
			pos:  position{line: 907, col: 1, offset: 30434},
			expr: &actionExpr{
				pos: position{line: 907, col: 34, offset: 30467},
				run: (*parser).callonMarkdownQuoteBlockAttribution1,
				expr: &seqExpr{
					pos: position{line: 907, col: 34, offset: 30467},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 907, col: 34, offset: 30467},
							val:        "-- ",
							ignoreCase: false,
							want:       "\"-- \"",
						},
						&labeledExpr{
							pos:   position{line: 907, col: 40, offset: 30473},
							label: "author",
							expr: &actionExpr{
								pos: position{line: 907, col: 48, offset: 30481},
								run: (*parser).callonMarkdownQuoteBlockAttribution5,
								expr: &oneOrMoreExpr{
									pos: position{line: 907, col: 49, offset: 30482},
									expr: &charClassMatcher{
										pos:        position{line: 907, col: 49, offset: 30482},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 909, col: 8, offset: 30532},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OpenPassthroughParagraphContent",
			pos:  position{line: 913, col: 1, offset: 30564},
			expr: &oneOrMoreExpr{
				pos: position{line: 913, col: 36, offset: 30599},
				expr: &actionExpr{
					pos: position{line: 913, col: 37, offset: 30600},
					run: (*parser).callonOpenPassthroughParagraphContent2,
					expr: &seqExpr{
						pos: position{line: 913, col: 37, offset: 30600},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 913, col: 37, offset: 30600},
								expr: &ruleRefExpr{
									pos:  position{line: 913, col: 38, offset: 30601},
									name: "BlankLine",
								},
							},
							&labeledExpr{
								pos:   position{line: 913, col: 48, offset: 30611},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 913, col: 57, offset: 30620},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SimpleParagraph",
			pos:  position{line: 918, col: 1, offset: 30833},
			expr: &actionExpr{
				pos: position{line: 918, col: 20, offset: 30852},
				run: (*parser).callonSimpleParagraph1,
				expr: &seqExpr{
					pos: position{line: 918, col: 20, offset: 30852},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 918, col: 20, offset: 30852},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 918, col: 31, offset: 30863},
								expr: &ruleRefExpr{
									pos:  position{line: 918, col: 32, offset: 30864},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 919, col: 5, offset: 30882},
							run: (*parser).callonSimpleParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 927, col: 5, offset: 31168},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 927, col: 16, offset: 31179},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 928, col: 5, offset: 31202},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 928, col: 16, offset: 31213},
								expr: &ruleRefExpr{
									pos:  position{line: 928, col: 17, offset: 31214},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphLine",
			pos:  position{line: 932, col: 1, offset: 31348},
			expr: &actionExpr{
				pos: position{line: 933, col: 5, offset: 31375},
				run: (*parser).callonFirstParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 933, col: 5, offset: 31375},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 933, col: 5, offset: 31375},
							label: "elements",
							expr: &seqExpr{
								pos: position{line: 933, col: 15, offset: 31385},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 933, col: 15, offset: 31385},
										name: "Word",
									},
									&zeroOrMoreExpr{
										pos: position{line: 933, col: 20, offset: 31390},
										expr: &ruleRefExpr{
											pos:  position{line: 933, col: 20, offset: 31390},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 933, col: 36, offset: 31406},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OtherParagraphLine",
			pos:  position{line: 937, col: 1, offset: 31477},
			expr: &actionExpr{
				pos: position{line: 937, col: 23, offset: 31499},
				run: (*parser).callonOtherParagraphLine1,
				expr: &labeledExpr{
					pos:   position{line: 937, col: 23, offset: 31499},
					label: "elements",
					expr: &ruleRefExpr{
						pos:  position{line: 937, col: 33, offset: 31509},
						name: "InlineElements",
					},
				},
			},
		},
		{
			name: "ContinuedParagraph",
			pos:  position{line: 942, col: 1, offset: 31629},
			expr: &choiceExpr{
				pos: position{line: 944, col: 5, offset: 31685},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 944, col: 5, offset: 31685},
						run: (*parser).callonContinuedParagraph2,
						expr: &seqExpr{
							pos: position{line: 944, col: 5, offset: 31685},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 944, col: 5, offset: 31685},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 944, col: 16, offset: 31696},
										expr: &ruleRefExpr{
											pos:  position{line: 944, col: 17, offset: 31697},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 944, col: 30, offset: 31710},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 944, col: 33, offset: 31713},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 944, col: 49, offset: 31729},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 944, col: 54, offset: 31734},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 944, col: 61, offset: 31741},
										name: "ContinuedParagraphLines",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 948, col: 5, offset: 31941},
						run: (*parser).callonContinuedParagraph12,
						expr: &seqExpr{
							pos: position{line: 948, col: 5, offset: 31941},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 948, col: 5, offset: 31941},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 948, col: 16, offset: 31952},
										expr: &ruleRefExpr{
											pos:  position{line: 948, col: 17, offset: 31953},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 948, col: 30, offset: 31966},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 948, col: 37, offset: 31973},
										name: "ContinuedParagraphLines",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedParagraphLines",
			pos:  position{line: 952, col: 1, offset: 32074},
			expr: &actionExpr{
				pos: position{line: 952, col: 28, offset: 32101},
				run: (*parser).callonContinuedParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 952, col: 28, offset: 32101},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 952, col: 28, offset: 32101},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 952, col: 39, offset: 32112},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 952, col: 59, offset: 32132},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 952, col: 70, offset: 32143},
								expr: &seqExpr{
									pos: position{line: 952, col: 71, offset: 32144},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 952, col: 71, offset: 32144},
											expr: &ruleRefExpr{
												pos:  position{line: 952, col: 72, offset: 32145},
												name: "ListItemContinuation",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 952, col: 93, offset: 32166},
											name: "OtherParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseParagraph",
			pos:  position{line: 956, col: 1, offset: 32272},
			expr: &choiceExpr{
				pos: position{line: 958, col: 5, offset: 32324},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 958, col: 5, offset: 32324},
						run: (*parser).callonVerseParagraph2,
						expr: &seqExpr{
							pos: position{line: 958, col: 5, offset: 32324},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 958, col: 5, offset: 32324},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 958, col: 16, offset: 32335},
										expr: &ruleRefExpr{
											pos:  position{line: 958, col: 17, offset: 32336},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 959, col: 5, offset: 32353},
									run: (*parser).callonVerseParagraph7,
								},
								&labeledExpr{
									pos:   position{line: 966, col: 5, offset: 32558},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 966, col: 8, offset: 32561},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 966, col: 24, offset: 32577},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 966, col: 29, offset: 32582},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 966, col: 35, offset: 32588},
										expr: &ruleRefExpr{
											pos:  position{line: 966, col: 36, offset: 32589},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 970, col: 5, offset: 32781},
						run: (*parser).callonVerseParagraph14,
						expr: &seqExpr{
							pos: position{line: 970, col: 5, offset: 32781},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 970, col: 5, offset: 32781},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 970, col: 16, offset: 32792},
										expr: &ruleRefExpr{
											pos:  position{line: 970, col: 17, offset: 32793},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 971, col: 5, offset: 32810},
									run: (*parser).callonVerseParagraph19,
								},
								&labeledExpr{
									pos:   position{line: 978, col: 5, offset: 33015},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 978, col: 11, offset: 33021},
										expr: &ruleRefExpr{
											pos:  position{line: 978, col: 12, offset: 33022},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 982, col: 1, offset: 33123},
			expr: &actionExpr{
				pos: position{line: 982, col: 19, offset: 33141},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 982, col: 19, offset: 33141},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 982, col: 19, offset: 33141},
							expr: &ruleRefExpr{
								pos:  position{line: 982, col: 20, offset: 33142},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 983, col: 5, offset: 33156},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 983, col: 15, offset: 33166},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 983, col: 15, offset: 33166},
										run: (*parser).callonInlineElements7,
										expr: &labeledExpr{
											pos:   position{line: 983, col: 15, offset: 33166},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 983, col: 24, offset: 33175},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 985, col: 9, offset: 33267},
										run: (*parser).callonInlineElements10,
										expr: &seqExpr{
											pos: position{line: 985, col: 9, offset: 33267},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 985, col: 9, offset: 33267},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 985, col: 18, offset: 33276},
														expr: &ruleRefExpr{
															pos:  position{line: 985, col: 19, offset: 33277},
															name: "InlineElement",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 985, col: 35, offset: 33293},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 991, col: 1, offset: 33410},
			expr: &actionExpr{
				pos: position{line: 992, col: 5, offset: 33433},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 992, col: 5, offset: 33433},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 992, col: 14, offset: 33442},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 992, col: 14, offset: 33442},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 993, col: 11, offset: 33493},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 994, col: 11, offset: 33538},
								expr: &ruleRefExpr{
									pos:  position{line: 994, col: 11, offset: 33538},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 995, col: 11, offset: 33556},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 995, col: 11, offset: 33556},
										expr: &ruleRefExpr{
											pos:  position{line: 995, col: 12, offset: 33557},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 996, col: 13, offset: 33575},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 996, col: 13, offset: 33575},
												name: "QuotedString",
											},
											&ruleRefExpr{
												pos:  position{line: 997, col: 15, offset: 33602},
												name: "QuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 998, col: 15, offset: 33627},
												name: "Symbol",
											},
											&ruleRefExpr{
												pos:  position{line: 999, col: 15, offset: 33648},
												name: "InlineIcon",
											},
											&ruleRefExpr{
												pos:  position{line: 1000, col: 15, offset: 33673},
												name: "InlineImage",
											},
											&ruleRefExpr{
												pos:  position{line: 1001, col: 15, offset: 33700},
												name: "Link",
											},
											&ruleRefExpr{
												pos:  position{line: 1002, col: 15, offset: 33720},
												name: "InlinePassthrough",
											},
											&ruleRefExpr{
												pos:  position{line: 1003, col: 15, offset: 33753},
												name: "InlineFootnote",
											},
											&ruleRefExpr{
												pos:  position{line: 1004, col: 15, offset: 33783},
												name: "CrossReference",
											},
											&ruleRefExpr{
												pos:  position{line: 1005, col: 15, offset: 33813},
												name: "InlineUserMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 1006, col: 15, offset: 33844},
												name: "AttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 1007, col: 15, offset: 33881},
												name: "InlineElementID",
											},
											&ruleRefExpr{
												pos:  position{line: 1008, col: 15, offset: 33911},
												name: "ConcealedIndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 1009, col: 15, offset: 33944},
												name: "IndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 1010, col: 15, offset: 33968},
												name: "ImpliedApostrophe",
											},
											&ruleRefExpr{
												pos:  position{line: 1011, col: 15, offset: 34000},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 1018, col: 1, offset: 34223},
			expr: &actionExpr{
				pos: position{line: 1018, col: 14, offset: 34236},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 1018, col: 14, offset: 34236},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1018, col: 14, offset: 34236},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 1018, col: 20, offset: 34242},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1018, col: 24, offset: 34246},
							expr: &ruleRefExpr{
								pos:  position{line: 1018, col: 24, offset: 34246},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1018, col: 31, offset: 34253},
							expr: &ruleRefExpr{
								pos:  position{line: 1018, col: 32, offset: 34254},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 1025, col: 1, offset: 34538},
			expr: &choiceExpr{
				pos: position{line: 1025, col: 15, offset: 34552},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1025, col: 15, offset: 34552},
						name: "UnconstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1025, col: 41, offset: 34578},
						name: "ConstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1025, col: 65, offset: 34602},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 1027, col: 1, offset: 34621},
			expr: &choiceExpr{
				pos: position{line: 1027, col: 32, offset: 34652},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1027, col: 32, offset: 34652},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1027, col: 32, offset: 34652},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 1027, col: 36, offset: 34656},
								expr: &litMatcher{
									pos:        position{line: 1027, col: 37, offset: 34657},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1027, col: 43, offset: 34663},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1027, col: 43, offset: 34663},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 1027, col: 47, offset: 34667},
								expr: &litMatcher{
									pos:        position{line: 1027, col: 48, offset: 34668},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1027, col: 54, offset: 34674},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1027, col: 54, offset: 34674},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
							&notExpr{
								pos: position{line: 1027, col: 58, offset: 34678},
								expr: &litMatcher{
									pos:        position{line: 1027, col: 59, offset: 34679},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1027, col: 65, offset: 34685},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1027, col: 65, offset: 34685},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 1027, col: 69, offset: 34689},
								expr: &litMatcher{
									pos:        position{line: 1027, col: 70, offset: 34690},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 1029, col: 1, offset: 34695},
			expr: &choiceExpr{
				pos: position{line: 1029, col: 34, offset: 34728},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1029, col: 34, offset: 34728},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 1029, col: 41, offset: 34735},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 1029, col: 48, offset: 34742},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 1029, col: 55, offset: 34749},
						val:        "##",
						ignoreCase: false,
						want:       "\"##\"",
					},
					&litMatcher{
						pos:        position{line: 1029, col: 62, offset: 34756},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 1029, col: 68, offset: 34762},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 1031, col: 1, offset: 34767},
			expr: &actionExpr{
				pos: position{line: 1031, col: 26, offset: 34792},
				run: (*parser).callonConstrainedQuotedText1,
				expr: &labeledExpr{
					pos:   position{line: 1031, col: 26, offset: 34792},
					label: "text",
					expr: &choiceExpr{
						pos: position{line: 1031, col: 32, offset: 34798},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1031, col: 32, offset: 34798},
								name: "SingleQuoteBoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1032, col: 15, offset: 34833},
								name: "SingleQuoteItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1033, col: 15, offset: 34869},
								name: "SingleQuoteMarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1034, col: 15, offset: 34905},
								name: "SingleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 1035, col: 15, offset: 34945},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1036, col: 15, offset: 34974},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1037, col: 15, offset: 35005},
								name: "SubscriptOrSuperscriptPrefix",
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 1041, col: 1, offset: 35159},
			expr: &choiceExpr{
				pos: position{line: 1041, col: 28, offset: 35186},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1041, col: 28, offset: 35186},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1042, col: 15, offset: 35220},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1043, col: 15, offset: 35256},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1044, col: 15, offset: 35292},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 1046, col: 1, offset: 35318},
			expr: &choiceExpr{
				pos: position{line: 1046, col: 22, offset: 35339},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1046, col: 22, offset: 35339},
						name: "EscapedBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1047, col: 15, offset: 35370},
						name: "EscapedItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1048, col: 15, offset: 35402},
						name: "EscapedMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1049, col: 15, offset: 35434},
						name: "EscapedMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1050, col: 15, offset: 35470},
						name: "EscapedSubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1051, col: 15, offset: 35506},
						name: "EscapedSuperscriptText",
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 1053, col: 1, offset: 35530},
			expr: &choiceExpr{
				pos: position{line: 1053, col: 33, offset: 35562},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1053, col: 33, offset: 35562},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 1053, col: 39, offset: 35568},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 1053, col: 39, offset: 35568},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 1057, col: 1, offset: 35701},
			expr: &actionExpr{
				pos: position{line: 1057, col: 25, offset: 35725},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1057, col: 25, offset: 35725},
					expr: &litMatcher{
						pos:        position{line: 1057, col: 25, offset: 35725},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 1061, col: 1, offset: 35766},
			expr: &actionExpr{
				pos: position{line: 1061, col: 25, offset: 35790},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 1061, col: 25, offset: 35790},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1061, col: 25, offset: 35790},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1061, col: 30, offset: 35795},
							expr: &litMatcher{
								pos:        position{line: 1061, col: 30, offset: 35795},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 1069, col: 1, offset: 35892},
			expr: &choiceExpr{
				pos: position{line: 1069, col: 13, offset: 35904},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1069, col: 13, offset: 35904},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1069, col: 35, offset: 35926},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1071, col: 1, offset: 35993},
			expr: &actionExpr{
				pos: position{line: 1071, col: 24, offset: 36016},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1071, col: 24, offset: 36016},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1071, col: 24, offset: 36016},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1071, col: 30, offset: 36022},
								expr: &ruleRefExpr{
									pos:  position{line: 1071, col: 31, offset: 36023},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1071, col: 49, offset: 36041},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 1071, col: 54, offset: 36046},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1071, col: 64, offset: 36056},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1071, col: 93, offset: 36085},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1075, col: 1, offset: 36172},
			expr: &seqExpr{
				pos: position{line: 1075, col: 32, offset: 36203},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1075, col: 32, offset: 36203},
						name: "DoubleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1075, col: 59, offset: 36230},
						expr: &seqExpr{
							pos: position{line: 1075, col: 60, offset: 36231},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1075, col: 60, offset: 36231},
									expr: &litMatcher{
										pos:        position{line: 1075, col: 62, offset: 36233},
										val:        "**",
										ignoreCase: false,
										want:       "\"**\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1075, col: 69, offset: 36240},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1075, col: 69, offset: 36240},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1075, col: 77, offset: 36248},
											name: "DoubleQuoteBoldTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1077, col: 1, offset: 36313},
			expr: &choiceExpr{
				pos: position{line: 1077, col: 31, offset: 36343},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1077, col: 31, offset: 36343},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1078, col: 11, offset: 36358},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1078, col: 11, offset: 36358},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1078, col: 19, offset: 36366},
								expr: &ruleRefExpr{
									pos:  position{line: 1078, col: 20, offset: 36367},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1079, col: 11, offset: 36385},
						name: "SingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1080, col: 11, offset: 36415},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1081, col: 11, offset: 36438},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1082, col: 11, offset: 36459},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1083, col: 11, offset: 36480},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1084, col: 11, offset: 36504},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1085, col: 11, offset: 36528},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1086, col: 11, offset: 36554},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1087, col: 11, offset: 36571},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1088, col: 11, offset: 36592},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1089, col: 11, offset: 36614},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1090, col: 11, offset: 36629},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1091, col: 11, offset: 36657},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1092, col: 11, offset: 36689},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1093, col: 11, offset: 36717},
						name: "DoubleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1096, col: 1, offset: 36756},
			expr: &choiceExpr{
				pos: position{line: 1097, col: 5, offset: 36800},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1097, col: 5, offset: 36800},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1098, col: 7, offset: 36897},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1098, col: 7, offset: 36897},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1098, col: 7, offset: 36897},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1098, col: 12, offset: 36902},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1102, col: 1, offset: 37065},
			expr: &choiceExpr{
				pos: position{line: 1102, col: 24, offset: 37088},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1102, col: 24, offset: 37088},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 1102, col: 24, offset: 37088},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1102, col: 24, offset: 37088},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1102, col: 30, offset: 37094},
										expr: &ruleRefExpr{
											pos:  position{line: 1102, col: 31, offset: 37095},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1102, col: 51, offset: 37115},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1102, col: 51, offset: 37115},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1102, col: 55, offset: 37119},
											expr: &litMatcher{
												pos:        position{line: 1102, col: 56, offset: 37120},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1102, col: 61, offset: 37125},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1102, col: 71, offset: 37135},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1102, col: 100, offset: 37164},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 1102, col: 104, offset: 37168},
									expr: &notExpr{
										pos: position{line: 1102, col: 106, offset: 37170},
										expr: &ruleRefExpr{
											pos:  position{line: 1102, col: 107, offset: 37171},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1104, col: 5, offset: 37365},
						run: (*parser).callonSingleQuoteBoldText17,
						expr: &seqExpr{
							pos: position{line: 1104, col: 5, offset: 37365},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1104, col: 5, offset: 37365},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1104, col: 11, offset: 37371},
										expr: &ruleRefExpr{
											pos:  position{line: 1104, col: 12, offset: 37372},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1104, col: 30, offset: 37390},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1104, col: 34, offset: 37394},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1104, col: 44, offset: 37404},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1104, col: 44, offset: 37404},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1104, col: 48, offset: 37408},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1104, col: 77, offset: 37437},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1108, col: 1, offset: 37643},
			expr: &seqExpr{
				pos: position{line: 1108, col: 32, offset: 37674},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1108, col: 32, offset: 37674},
						expr: &ruleRefExpr{
							pos:  position{line: 1108, col: 33, offset: 37675},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1108, col: 39, offset: 37681},
						expr: &ruleRefExpr{
							pos:  position{line: 1108, col: 39, offset: 37681},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1110, col: 1, offset: 37710},
			expr: &choiceExpr{
				pos: position{line: 1110, col: 31, offset: 37740},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1110, col: 31, offset: 37740},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1111, col: 11, offset: 37755},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1111, col: 11, offset: 37755},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1111, col: 19, offset: 37763},
								expr: &ruleRefExpr{
									pos:  position{line: 1111, col: 20, offset: 37764},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1112, col: 11, offset: 37782},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1113, col: 11, offset: 37812},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1114, col: 11, offset: 37835},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1114, col: 11, offset: 37835},
								expr: &ruleRefExpr{
									pos:  position{line: 1114, col: 11, offset: 37835},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1114, col: 18, offset: 37842},
								expr: &seqExpr{
									pos: position{line: 1114, col: 19, offset: 37843},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1114, col: 19, offset: 37843},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1114, col: 23, offset: 37847},
											expr: &litMatcher{
												pos:        position{line: 1114, col: 24, offset: 37848},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1115, col: 11, offset: 37864},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1116, col: 11, offset: 37885},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1117, col: 11, offset: 37906},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1118, col: 11, offset: 37930},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1119, col: 11, offset: 37954},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1120, col: 11, offset: 37980},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1121, col: 11, offset: 37997},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1122, col: 11, offset: 38018},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1123, col: 11, offset: 38041},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1124, col: 11, offset: 38058},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1125, col: 11, offset: 38086},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1126, col: 11, offset: 38118},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1127, col: 11, offset: 38146},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1129, col: 1, offset: 38184},
			expr: &choiceExpr{
				pos: position{line: 1130, col: 5, offset: 38228},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1130, col: 5, offset: 38228},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1131, col: 7, offset: 38325},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1131, col: 7, offset: 38325},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1131, col: 7, offset: 38325},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1131, col: 11, offset: 38329},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1135, col: 1, offset: 38492},
			expr: &choiceExpr{
				pos: position{line: 1136, col: 5, offset: 38516},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1136, col: 5, offset: 38516},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1136, col: 5, offset: 38516},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1136, col: 5, offset: 38516},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1136, col: 18, offset: 38529},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1136, col: 40, offset: 38551},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1136, col: 45, offset: 38556},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1136, col: 55, offset: 38566},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1136, col: 84, offset: 38595},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1138, col: 9, offset: 38752},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 1138, col: 9, offset: 38752},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1138, col: 9, offset: 38752},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1138, col: 22, offset: 38765},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1138, col: 44, offset: 38787},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1138, col: 49, offset: 38792},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1138, col: 59, offset: 38802},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1138, col: 88, offset: 38831},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1141, col: 9, offset: 39031},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 1141, col: 9, offset: 39031},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1141, col: 9, offset: 39031},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1141, col: 22, offset: 39044},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1141, col: 44, offset: 39066},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1141, col: 48, offset: 39070},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1141, col: 58, offset: 39080},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1141, col: 87, offset: 39109},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1149, col: 1, offset: 39317},
			expr: &choiceExpr{
				pos: position{line: 1149, col: 15, offset: 39331},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1149, col: 15, offset: 39331},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1149, col: 39, offset: 39355},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1151, col: 1, offset: 39378},
			expr: &actionExpr{
				pos: position{line: 1151, col: 26, offset: 39403},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1151, col: 26, offset: 39403},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1151, col: 26, offset: 39403},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1151, col: 32, offset: 39409},
								expr: &ruleRefExpr{
									pos:  position{line: 1151, col: 33, offset: 39410},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1151, col: 51, offset: 39428},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1151, col: 56, offset: 39433},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1151, col: 66, offset: 39443},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1151, col: 97, offset: 39474},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1155, col: 1, offset: 39608},
			expr: &seqExpr{
				pos: position{line: 1155, col: 34, offset: 39641},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1155, col: 34, offset: 39641},
						name: "DoubleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1155, col: 63, offset: 39670},
						expr: &seqExpr{
							pos: position{line: 1155, col: 64, offset: 39671},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1155, col: 64, offset: 39671},
									expr: &litMatcher{
										pos:        position{line: 1155, col: 66, offset: 39673},
										val:        "__",
										ignoreCase: false,
										want:       "\"__\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1155, col: 73, offset: 39680},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1155, col: 73, offset: 39680},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1155, col: 81, offset: 39688},
											name: "DoubleQuoteItalicTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1157, col: 1, offset: 39755},
			expr: &choiceExpr{
				pos: position{line: 1157, col: 33, offset: 39787},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1157, col: 33, offset: 39787},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1158, col: 11, offset: 39802},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1158, col: 11, offset: 39802},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1158, col: 19, offset: 39810},
								expr: &ruleRefExpr{
									pos:  position{line: 1158, col: 20, offset: 39811},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1159, col: 11, offset: 39829},
						name: "SingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1160, col: 11, offset: 39861},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1161, col: 11, offset: 39884},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1162, col: 11, offset: 39903},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1163, col: 11, offset: 39924},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1164, col: 11, offset: 39948},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1165, col: 11, offset: 39972},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1166, col: 11, offset: 39998},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1167, col: 11, offset: 40015},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1168, col: 11, offset: 40036},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1169, col: 11, offset: 40059},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1170, col: 11, offset: 40075},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1171, col: 11, offset: 40103},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1172, col: 11, offset: 40131},
						name: "DoubleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1174, col: 1, offset: 40171},
			expr: &choiceExpr{
				pos: position{line: 1175, col: 5, offset: 40217},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1175, col: 5, offset: 40217},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1176, col: 7, offset: 40316},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1176, col: 7, offset: 40316},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1176, col: 7, offset: 40316},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1176, col: 12, offset: 40321},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1180, col: 1, offset: 40486},
			expr: &choiceExpr{
				pos: position{line: 1180, col: 26, offset: 40511},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1180, col: 26, offset: 40511},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1180, col: 26, offset: 40511},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1180, col: 26, offset: 40511},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1180, col: 32, offset: 40517},
										expr: &ruleRefExpr{
											pos:  position{line: 1180, col: 33, offset: 40518},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1180, col: 52, offset: 40537},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1180, col: 52, offset: 40537},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1180, col: 56, offset: 40541},
											expr: &litMatcher{
												pos:        position{line: 1180, col: 57, offset: 40542},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1180, col: 62, offset: 40547},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1180, col: 72, offset: 40557},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1180, col: 103, offset: 40588},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1182, col: 5, offset: 40778},
						run: (*parser).callonSingleQuoteItalicText14,
						expr: &seqExpr{
							pos: position{line: 1182, col: 5, offset: 40778},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1182, col: 5, offset: 40778},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1182, col: 11, offset: 40784},
										expr: &ruleRefExpr{
											pos:  position{line: 1182, col: 12, offset: 40785},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1182, col: 30, offset: 40803},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1182, col: 34, offset: 40807},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1182, col: 44, offset: 40817},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1182, col: 44, offset: 40817},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1182, col: 48, offset: 40821},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1182, col: 79, offset: 40852},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1186, col: 1, offset: 41062},
			expr: &seqExpr{
				pos: position{line: 1186, col: 34, offset: 41095},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1186, col: 34, offset: 41095},
						expr: &ruleRefExpr{
							pos:  position{line: 1186, col: 35, offset: 41096},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1186, col: 41, offset: 41102},
						expr: &ruleRefExpr{
							pos:  position{line: 1186, col: 41, offset: 41102},
							name: "SingleQuoteItalicTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1188, col: 1, offset: 41133},
			expr: &choiceExpr{
				pos: position{line: 1188, col: 33, offset: 41165},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1188, col: 33, offset: 41165},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1189, col: 11, offset: 41180},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1189, col: 11, offset: 41180},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1189, col: 19, offset: 41188},
								expr: &ruleRefExpr{
									pos:  position{line: 1189, col: 20, offset: 41189},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1190, col: 11, offset: 41207},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1191, col: 11, offset: 41239},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1192, col: 11, offset: 41262},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1192, col: 11, offset: 41262},
								expr: &ruleRefExpr{
									pos:  position{line: 1192, col: 11, offset: 41262},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1192, col: 18, offset: 41269},
								expr: &seqExpr{
									pos: position{line: 1192, col: 19, offset: 41270},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1192, col: 19, offset: 41270},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1192, col: 23, offset: 41274},
											expr: &litMatcher{
												pos:        position{line: 1192, col: 24, offset: 41275},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1193, col: 11, offset: 41291},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1194, col: 11, offset: 41310},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1195, col: 11, offset: 41331},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1196, col: 11, offset: 41355},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1197, col: 11, offset: 41379},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1198, col: 11, offset: 41405},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1199, col: 11, offset: 41422},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1200, col: 11, offset: 41443},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1201, col: 11, offset: 41466},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1202, col: 11, offset: 41483},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1203, col: 11, offset: 41512},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1204, col: 11, offset: 41544},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1205, col: 11, offset: 41572},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1207, col: 1, offset: 41612},
			expr: &choiceExpr{
				pos: position{line: 1208, col: 5, offset: 41658},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1208, col: 5, offset: 41658},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1209, col: 7, offset: 41757},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1209, col: 7, offset: 41757},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1209, col: 7, offset: 41757},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1209, col: 11, offset: 41761},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1213, col: 1, offset: 41927},
			expr: &choiceExpr{
				pos: position{line: 1214, col: 5, offset: 41953},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1214, col: 5, offset: 41953},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1214, col: 5, offset: 41953},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1214, col: 5, offset: 41953},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1214, col: 18, offset: 41966},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1214, col: 40, offset: 41988},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1214, col: 45, offset: 41993},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1214, col: 55, offset: 42003},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1214, col: 86, offset: 42034},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1216, col: 9, offset: 42191},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1216, col: 9, offset: 42191},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1216, col: 9, offset: 42191},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1216, col: 22, offset: 42204},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1216, col: 44, offset: 42226},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1216, col: 49, offset: 42231},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1216, col: 59, offset: 42241},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1216, col: 90, offset: 42272},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1219, col: 9, offset: 42472},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1219, col: 9, offset: 42472},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1219, col: 9, offset: 42472},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1219, col: 22, offset: 42485},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1219, col: 44, offset: 42507},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1219, col: 48, offset: 42511},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1219, col: 58, offset: 42521},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1219, col: 89, offset: 42552},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1226, col: 1, offset: 42762},
			expr: &choiceExpr{
				pos: position{line: 1226, col: 18, offset: 42779},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1226, col: 18, offset: 42779},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1226, col: 45, offset: 42806},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1228, col: 1, offset: 42832},
			expr: &actionExpr{
				pos: position{line: 1228, col: 29, offset: 42860},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1228, col: 29, offset: 42860},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1228, col: 29, offset: 42860},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1228, col: 35, offset: 42866},
								expr: &ruleRefExpr{
									pos:  position{line: 1228, col: 36, offset: 42867},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1228, col: 54, offset: 42885},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1228, col: 59, offset: 42890},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1228, col: 69, offset: 42900},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1228, col: 103, offset: 42934},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1232, col: 1, offset: 43071},
			expr: &seqExpr{
				pos: position{line: 1232, col: 37, offset: 43107},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1232, col: 37, offset: 43107},
						name: "DoubleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1232, col: 69, offset: 43139},
						expr: &seqExpr{
							pos: position{line: 1232, col: 70, offset: 43140},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1232, col: 70, offset: 43140},
									expr: &litMatcher{
										pos:        position{line: 1232, col: 72, offset: 43142},
										val:        "``",
										ignoreCase: false,
										want:       "\"``\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1232, col: 79, offset: 43149},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1232, col: 79, offset: 43149},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1232, col: 87, offset: 43157},
											name: "DoubleQuoteMonospaceTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1234, col: 1, offset: 43226},
			expr: &choiceExpr{
				pos: position{line: 1234, col: 36, offset: 43261},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1234, col: 36, offset: 43261},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1235, col: 11, offset: 43276},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1235, col: 11, offset: 43276},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1235, col: 19, offset: 43284},
								expr: &ruleRefExpr{
									pos:  position{line: 1235, col: 20, offset: 43285},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1236, col: 11, offset: 43303},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1237, col: 11, offset: 43320},
						name: "SingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1238, col: 11, offset: 43355},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1239, col: 11, offset: 43378},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1240, col: 11, offset: 43397},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1241, col: 11, offset: 43418},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1242, col: 11, offset: 43439},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1243, col: 11, offset: 43463},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1244, col: 11, offset: 43489},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1245, col: 11, offset: 43510},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1246, col: 11, offset: 43532},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1247, col: 11, offset: 43547},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1248, col: 11, offset: 43576},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1249, col: 11, offset: 43604},
						name: "DoubleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1251, col: 1, offset: 43647},
			expr: &choiceExpr{
				pos: position{line: 1252, col: 5, offset: 43696},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1252, col: 5, offset: 43696},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1253, col: 7, offset: 43798},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1253, col: 7, offset: 43798},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1253, col: 7, offset: 43798},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1253, col: 12, offset: 43803},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1257, col: 1, offset: 43971},
			expr: &choiceExpr{
				pos: position{line: 1257, col: 29, offset: 43999},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1257, col: 29, offset: 43999},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1257, col: 29, offset: 43999},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1257, col: 29, offset: 43999},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1257, col: 35, offset: 44005},
										expr: &ruleRefExpr{
											pos:  position{line: 1257, col: 36, offset: 44006},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1257, col: 55, offset: 44025},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1257, col: 55, offset: 44025},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1257, col: 59, offset: 44029},
											expr: &litMatcher{
												pos:        position{line: 1257, col: 60, offset: 44030},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1257, col: 65, offset: 44035},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1257, col: 75, offset: 44045},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1257, col: 109, offset: 44079},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1259, col: 5, offset: 44272},
						run: (*parser).callonSingleQuoteMonospaceText14,
						expr: &seqExpr{
							pos: position{line: 1259, col: 5, offset: 44272},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1259, col: 5, offset: 44272},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1259, col: 11, offset: 44278},
										expr: &ruleRefExpr{
											pos:  position{line: 1259, col: 12, offset: 44279},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1259, col: 30, offset: 44297},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1259, col: 34, offset: 44301},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1259, col: 44, offset: 44311},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1259, col: 44, offset: 44311},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1259, col: 48, offset: 44315},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1259, col: 82, offset: 44349},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1263, col: 1, offset: 44563},
			expr: &seqExpr{
				pos: position{line: 1263, col: 37, offset: 44599},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1263, col: 37, offset: 44599},
						expr: &ruleRefExpr{
							pos:  position{line: 1263, col: 38, offset: 44600},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1263, col: 44, offset: 44606},
						expr: &ruleRefExpr{
							pos:  position{line: 1263, col: 44, offset: 44606},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1265, col: 1, offset: 44640},
			expr: &choiceExpr{
				pos: position{line: 1265, col: 37, offset: 44676},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1265, col: 37, offset: 44676},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1266, col: 11, offset: 44691},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1266, col: 11, offset: 44691},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1266, col: 19, offset: 44699},
								expr: &ruleRefExpr{
									pos:  position{line: 1266, col: 20, offset: 44700},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1267, col: 11, offset: 44718},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1268, col: 11, offset: 44753},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1269, col: 11, offset: 44776},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1269, col: 11, offset: 44776},
								expr: &ruleRefExpr{
									pos:  position{line: 1269, col: 11, offset: 44776},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1269, col: 18, offset: 44783},
								expr: &seqExpr{
									pos: position{line: 1269, col: 19, offset: 44784},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1269, col: 19, offset: 44784},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1269, col: 23, offset: 44788},
											expr: &litMatcher{
												pos:        position{line: 1269, col: 24, offset: 44789},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1270, col: 11, offset: 44917},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1271, col: 11, offset: 44936},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1272, col: 11, offset: 44957},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1273, col: 11, offset: 44978},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1274, col: 11, offset: 45002},
						name: "SuperscriptText",
					},
					&seqExpr{
						pos: position{line: 1275, col: 11, offset: 45028},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1275, col: 11, offset: 45028},
								expr: &litMatcher{
									pos:        position{line: 1275, col: 12, offset: 45029},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1275, col: 16, offset: 45033},
								name: "Symbol",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1276, col: 11, offset: 45050},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1277, col: 11, offset: 45071},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1278, col: 11, offset: 45094},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1279, col: 11, offset: 45110},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1280, col: 11, offset: 45139},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1281, col: 11, offset: 45171},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1282, col: 11, offset: 45199},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1284, col: 1, offset: 45242},
			expr: &choiceExpr{
				pos: position{line: 1285, col: 5, offset: 45291},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1285, col: 5, offset: 45291},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1286, col: 7, offset: 45393},
						run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1286, col: 7, offset: 45393},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1286, col: 7, offset: 45393},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1286, col: 11, offset: 45397},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1290, col: 1, offset: 45566},
			expr: &choiceExpr{
				pos: position{line: 1291, col: 5, offset: 45595},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1291, col: 5, offset: 45595},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1291, col: 5, offset: 45595},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1291, col: 5, offset: 45595},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1291, col: 18, offset: 45608},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1291, col: 40, offset: 45630},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1291, col: 45, offset: 45635},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1291, col: 55, offset: 45645},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1291, col: 89, offset: 45679},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1293, col: 9, offset: 45836},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1293, col: 9, offset: 45836},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1293, col: 9, offset: 45836},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1293, col: 22, offset: 45849},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1293, col: 44, offset: 45871},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1293, col: 49, offset: 45876},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1293, col: 59, offset: 45886},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1293, col: 93, offset: 45920},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1296, col: 9, offset: 46120},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1296, col: 9, offset: 46120},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1296, col: 9, offset: 46120},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1296, col: 22, offset: 46133},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1296, col: 44, offset: 46155},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1296, col: 48, offset: 46159},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1296, col: 58, offset: 46169},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1296, col: 92, offset: 46203},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1304, col: 1, offset: 46411},
			expr: &choiceExpr{
				pos: position{line: 1304, col: 15, offset: 46425},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1304, col: 15, offset: 46425},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1304, col: 39, offset: 46449},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 1306, col: 1, offset: 46472},
			expr: &actionExpr{
				pos: position{line: 1306, col: 26, offset: 46497},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1306, col: 26, offset: 46497},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1306, col: 26, offset: 46497},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1306, col: 32, offset: 46503},
								expr: &ruleRefExpr{
									pos:  position{line: 1306, col: 33, offset: 46504},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1306, col: 51, offset: 46522},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1306, col: 56, offset: 46527},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1306, col: 66, offset: 46537},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1306, col: 97, offset: 46568},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 1310, col: 1, offset: 46702},
			expr: &seqExpr{
				pos: position{line: 1310, col: 34, offset: 46735},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1310, col: 34, offset: 46735},
						name: "DoubleQuoteMarkedTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1310, col: 63, offset: 46764},
						expr: &seqExpr{
							pos: position{line: 1310, col: 64, offset: 46765},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1310, col: 64, offset: 46765},
									expr: &litMatcher{
										pos:        position{line: 1310, col: 66, offset: 46767},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1310, col: 73, offset: 46774},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1310, col: 73, offset: 46774},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1310, col: 81, offset: 46782},
											name: "DoubleQuoteMarkedTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 1312, col: 1, offset: 46849},
			expr: &choiceExpr{
				pos: position{line: 1312, col: 33, offset: 46881},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1312, col: 33, offset: 46881},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1313, col: 11, offset: 46896},
						name: "SingleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1314, col: 11, offset: 46928},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1314, col: 11, offset: 46928},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1314, col: 19, offset: 46936},
								expr: &ruleRefExpr{
									pos:  position{line: 1314, col: 20, offset: 46937},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1315, col: 11, offset: 46955},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1316, col: 11, offset: 46978},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1317, col: 11, offset: 46997},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1318, col: 11, offset: 47018},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1319, col: 11, offset: 47042},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1320, col: 11, offset: 47066},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1321, col: 11, offset: 47092},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1322, col: 11, offset: 47109},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1323, col: 11, offset: 47130},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1324, col: 11, offset: 47152},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1325, col: 11, offset: 47167},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1326, col: 11, offset: 47195},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1327, col: 11, offset: 47223},
						name: "DoubleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1329, col: 1, offset: 47263},
			expr: &choiceExpr{
				pos: position{line: 1330, col: 5, offset: 47309},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1330, col: 5, offset: 47309},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1331, col: 7, offset: 47408},
						run: (*parser).callonDoubleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1331, col: 7, offset: 47408},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1331, col: 7, offset: 47408},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1331, col: 12, offset: 47413},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 1335, col: 1, offset: 47578},
			expr: &choiceExpr{
				pos: position{line: 1335, col: 26, offset: 47603},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1335, col: 26, offset: 47603},
						run: (*parser).callonSingleQuoteMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1335, col: 26, offset: 47603},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1335, col: 26, offset: 47603},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1335, col: 32, offset: 47609},
										expr: &ruleRefExpr{
											pos:  position{line: 1335, col: 33, offset: 47610},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1335, col: 52, offset: 47629},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1335, col: 52, offset: 47629},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1335, col: 56, offset: 47633},
											expr: &litMatcher{
												pos:        position{line: 1335, col: 57, offset: 47634},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1335, col: 62, offset: 47639},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1335, col: 72, offset: 47649},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1335, col: 103, offset: 47680},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1337, col: 5, offset: 47870},
						run: (*parser).callonSingleQuoteMarkedText14,
						expr: &seqExpr{
							pos: position{line: 1337, col: 5, offset: 47870},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1337, col: 5, offset: 47870},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1337, col: 11, offset: 47876},
										expr: &ruleRefExpr{
											pos:  position{line: 1337, col: 12, offset: 47877},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1337, col: 30, offset: 47895},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1337, col: 34, offset: 47899},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1337, col: 44, offset: 47909},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1337, col: 44, offset: 47909},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1337, col: 48, offset: 47913},
												name: "SingleQuoteMarkedTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1337, col: 79, offset: 47944},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 1341, col: 1, offset: 48153},
			expr: &seqExpr{
				pos: position{line: 1341, col: 34, offset: 48186},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1341, col: 34, offset: 48186},
						expr: &ruleRefExpr{
							pos:  position{line: 1341, col: 35, offset: 48187},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1341, col: 41, offset: 48193},
						expr: &ruleRefExpr{
							pos:  position{line: 1341, col: 41, offset: 48193},
							name: "SingleQuoteMarkedTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 1343, col: 1, offset: 48224},
			expr: &choiceExpr{
				pos: position{line: 1343, col: 33, offset: 48256},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1343, col: 33, offset: 48256},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1344, col: 11, offset: 48271},
						name: "DoubleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1345, col: 11, offset: 48303},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1345, col: 11, offset: 48303},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1345, col: 19, offset: 48311},
								expr: &ruleRefExpr{
									pos:  position{line: 1345, col: 20, offset: 48312},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1346, col: 11, offset: 48330},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1347, col: 11, offset: 48353},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1347, col: 11, offset: 48353},
								expr: &ruleRefExpr{
									pos:  position{line: 1347, col: 11, offset: 48353},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1347, col: 18, offset: 48360},
								expr: &seqExpr{
									pos: position{line: 1347, col: 19, offset: 48361},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1347, col: 19, offset: 48361},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1347, col: 23, offset: 48365},
											expr: &litMatcher{
												pos:        position{line: 1347, col: 24, offset: 48366},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1348, col: 11, offset: 48382},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1349, col: 11, offset: 48401},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1350, col: 11, offset: 48422},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1351, col: 11, offset: 48446},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1352, col: 11, offset: 48470},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1353, col: 11, offset: 48496},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1354, col: 11, offset: 48513},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1355, col: 11, offset: 48534},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1356, col: 11, offset: 48556},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1357, col: 11, offset: 48571},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1358, col: 11, offset: 48599},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1359, col: 11, offset: 48631},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1360, col: 11, offset: 48659},
						name: "SingleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1362, col: 1, offset: 48699},
			expr: &choiceExpr{
				pos: position{line: 1363, col: 5, offset: 48745},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1363, col: 5, offset: 48745},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1364, col: 7, offset: 48842},
						run: (*parser).callonSingleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1364, col: 7, offset: 48842},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1364, col: 7, offset: 48842},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1364, col: 11, offset: 48846},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 1368, col: 1, offset: 49009},
			expr: &choiceExpr{
				pos: position{line: 1369, col: 5, offset: 49034},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1369, col: 5, offset: 49034},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1369, col: 5, offset: 49034},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1369, col: 5, offset: 49034},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1369, col: 18, offset: 49047},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1369, col: 40, offset: 49069},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1369, col: 45, offset: 49074},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1369, col: 55, offset: 49084},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1369, col: 86, offset: 49115},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1371, col: 9, offset: 49272},
						run: (*parser).callonEscapedMarkedText10,
						expr: &seqExpr{
							pos: position{line: 1371, col: 9, offset: 49272},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1371, col: 9, offset: 49272},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1371, col: 22, offset: 49285},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1371, col: 44, offset: 49307},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1371, col: 49, offset: 49312},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1371, col: 59, offset: 49322},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1371, col: 90, offset: 49353},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1374, col: 9, offset: 49553},
						run: (*parser).callonEscapedMarkedText18,
						expr: &seqExpr{
							pos: position{line: 1374, col: 9, offset: 49553},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1374, col: 9, offset: 49553},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1374, col: 22, offset: 49566},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1374, col: 44, offset: 49588},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1374, col: 48, offset: 49592},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1374, col: 58, offset: 49602},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1374, col: 89, offset: 49633},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1379, col: 1, offset: 49783},
			expr: &actionExpr{
				pos: position{line: 1379, col: 18, offset: 49800},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1379, col: 18, offset: 49800},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1379, col: 18, offset: 49800},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1379, col: 24, offset: 49806},
								expr: &ruleRefExpr{
									pos:  position{line: 1379, col: 25, offset: 49807},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1379, col: 43, offset: 49825},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1379, col: 47, offset: 49829},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1379, col: 56, offset: 49838},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1379, col: 78, offset: 49860},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1383, col: 1, offset: 49956},
			expr: &choiceExpr{
				pos: position{line: 1383, col: 25, offset: 49980},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1383, col: 25, offset: 49980},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1383, col: 38, offset: 49993},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1385, col: 1, offset: 50012},
			expr: &actionExpr{
				pos: position{line: 1385, col: 21, offset: 50032},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1385, col: 21, offset: 50032},
					expr: &charClassMatcher{
						pos:        position{line: 1385, col: 21, offset: 50032},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1389, col: 1, offset: 50109},
			expr: &actionExpr{
				pos: position{line: 1389, col: 25, offset: 50133},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1389, col: 25, offset: 50133},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1389, col: 25, offset: 50133},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1389, col: 38, offset: 50146},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1389, col: 60, offset: 50168},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1389, col: 64, offset: 50172},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1389, col: 73, offset: 50181},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1389, col: 95, offset: 50203},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1393, col: 1, offset: 50332},
			expr: &actionExpr{
				pos: position{line: 1393, col: 20, offset: 50351},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1393, col: 20, offset: 50351},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1393, col: 20, offset: 50351},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1393, col: 26, offset: 50357},
								expr: &ruleRefExpr{
									pos:  position{line: 1393, col: 27, offset: 50358},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1393, col: 45, offset: 50376},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1393, col: 49, offset: 50380},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1393, col: 58, offset: 50389},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1393, col: 82, offset: 50413},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1397, col: 1, offset: 50511},
			expr: &choiceExpr{
				pos: position{line: 1397, col: 27, offset: 50537},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1397, col: 27, offset: 50537},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1397, col: 40, offset: 50550},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1399, col: 1, offset: 50571},
			expr: &actionExpr{
				pos: position{line: 1399, col: 23, offset: 50593},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1399, col: 23, offset: 50593},
					expr: &charClassMatcher{
						pos:        position{line: 1399, col: 23, offset: 50593},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1403, col: 1, offset: 50670},
			expr: &actionExpr{
				pos: position{line: 1403, col: 27, offset: 50696},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1403, col: 27, offset: 50696},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1403, col: 27, offset: 50696},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1403, col: 40, offset: 50709},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1403, col: 62, offset: 50731},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1403, col: 66, offset: 50735},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1403, col: 75, offset: 50744},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1403, col: 99, offset: 50768},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1410, col: 1, offset: 51010},
			expr: &choiceExpr{
				pos: position{line: 1410, col: 22, offset: 51031},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1410, col: 22, offset: 51031},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1410, col: 46, offset: 51055},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1410, col: 70, offset: 51079},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1412, col: 1, offset: 51097},
			expr: &litMatcher{
				pos:        position{line: 1412, col: 32, offset: 51128},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1414, col: 1, offset: 51133},
			expr: &actionExpr{
				pos: position{line: 1414, col: 26, offset: 51158},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1414, col: 26, offset: 51158},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1414, col: 26, offset: 51158},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1414, col: 54, offset: 51186},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1414, col: 63, offset: 51195},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1414, col: 93, offset: 51225},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1414, col: 121, offset: 51253},
							expr: &ruleRefExpr{
								pos:  position{line: 1414, col: 122, offset: 51254},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1418, col: 1, offset: 51359},
			expr: &choiceExpr{
				pos: position{line: 1418, col: 33, offset: 51391},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1418, col: 34, offset: 51392},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1418, col: 34, offset: 51392},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1418, col: 35, offset: 51393},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1418, col: 35, offset: 51393},
											expr: &ruleRefExpr{
												pos:  position{line: 1418, col: 36, offset: 51394},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1418, col: 64, offset: 51422},
											expr: &ruleRefExpr{
												pos:  position{line: 1418, col: 65, offset: 51423},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 1418, col: 71, offset: 51429},
											expr: &ruleRefExpr{
												pos:  position{line: 1418, col: 72, offset: 51430},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 1418, col: 80, offset: 51438,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1418, col: 83, offset: 51441},
									expr: &seqExpr{
										pos: position{line: 1418, col: 84, offset: 51442},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1418, col: 84, offset: 51442},
												expr: &seqExpr{
													pos: position{line: 1418, col: 86, offset: 51444},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1418, col: 86, offset: 51444},
															expr: &ruleRefExpr{
																pos:  position{line: 1418, col: 86, offset: 51444},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1418, col: 93, offset: 51451},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1418, col: 122, offset: 51480},
												expr: &ruleRefExpr{
													pos:  position{line: 1418, col: 123, offset: 51481},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1418, col: 151, offset: 51509},
												expr: &ruleRefExpr{
													pos:  position{line: 1418, col: 152, offset: 51510},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 1418, col: 160, offset: 51518,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1420, col: 7, offset: 51660},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1420, col: 8, offset: 51661},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1420, col: 8, offset: 51661},
									expr: &ruleRefExpr{
										pos:  position{line: 1420, col: 9, offset: 51662},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 1420, col: 15, offset: 51668},
									expr: &ruleRefExpr{
										pos:  position{line: 1420, col: 16, offset: 51669},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1420, col: 24, offset: 51677},
									expr: &ruleRefExpr{
										pos:  position{line: 1420, col: 25, offset: 51678},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1420, col: 53, offset: 51706,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1424, col: 1, offset: 51788},
			expr: &litMatcher{
				pos:        position{line: 1424, col: 32, offset: 51819},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1426, col: 1, offset: 51826},
			expr: &actionExpr{
				pos: position{line: 1426, col: 26, offset: 51851},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1426, col: 26, offset: 51851},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1426, col: 26, offset: 51851},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1426, col: 54, offset: 51879},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1426, col: 63, offset: 51888},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1426, col: 93, offset: 51918},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1426, col: 121, offset: 51946},
							expr: &ruleRefExpr{
								pos:  position{line: 1426, col: 122, offset: 51947},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1430, col: 1, offset: 52052},
			expr: &choiceExpr{
				pos: position{line: 1430, col: 33, offset: 52084},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1430, col: 34, offset: 52085},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1430, col: 34, offset: 52085},
							expr: &seqExpr{
								pos: position{line: 1430, col: 35, offset: 52086},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1430, col: 35, offset: 52086},
										expr: &ruleRefExpr{
											pos:  position{line: 1430, col: 36, offset: 52087},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1430, col: 64, offset: 52115,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1432, col: 7, offset: 52280},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1432, col: 7, offset: 52280},
							expr: &seqExpr{
								pos: position{line: 1432, col: 8, offset: 52281},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1432, col: 8, offset: 52281},
										expr: &ruleRefExpr{
											pos:  position{line: 1432, col: 9, offset: 52282},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1432, col: 15, offset: 52288},
										expr: &ruleRefExpr{
											pos:  position{line: 1432, col: 16, offset: 52289},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1432, col: 24, offset: 52297},
										expr: &ruleRefExpr{
											pos:  position{line: 1432, col: 25, offset: 52298},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1432, col: 53, offset: 52326,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1436, col: 1, offset: 52409},
			expr: &choiceExpr{
				pos: position{line: 1436, col: 21, offset: 52429},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1436, col: 21, offset: 52429},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1436, col: 21, offset: 52429},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1436, col: 21, offset: 52429},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1436, col: 30, offset: 52438},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1436, col: 38, offset: 52446},
										expr: &ruleRefExpr{
											pos:  position{line: 1436, col: 39, offset: 52447},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1436, col: 67, offset: 52475},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1438, col: 5, offset: 52571},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1438, col: 5, offset: 52571},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1438, col: 5, offset: 52571},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 1438, col: 15, offset: 52581},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1438, col: 23, offset: 52589},
										expr: &choiceExpr{
											pos: position{line: 1438, col: 24, offset: 52590},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1438, col: 24, offset: 52590},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1438, col: 37, offset: 52603},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1438, col: 65, offset: 52631},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1442, col: 1, offset: 52727},
			expr: &actionExpr{
				pos: position{line: 1442, col: 30, offset: 52756},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 1442, col: 30, offset: 52756},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1449, col: 1, offset: 52929},
			expr: &choiceExpr{
				pos: position{line: 1449, col: 19, offset: 52947},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1449, col: 19, offset: 52947},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1449, col: 44, offset: 52972},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1451, col: 1, offset: 52997},
			expr: &choiceExpr{
				pos: position{line: 1451, col: 27, offset: 53023},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1451, col: 27, offset: 53023},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1451, col: 27, offset: 53023},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1451, col: 27, offset: 53023},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1451, col: 32, offset: 53028},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1451, col: 36, offset: 53032},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1451, col: 40, offset: 53036},
									expr: &ruleRefExpr{
										pos:  position{line: 1451, col: 40, offset: 53036},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 1451, col: 47, offset: 53043},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 1451, col: 51, offset: 53047},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1451, col: 58, offset: 53054},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1451, col: 79, offset: 53075},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1453, col: 5, offset: 53158},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1453, col: 5, offset: 53158},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1453, col: 5, offset: 53158},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1453, col: 10, offset: 53163},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1453, col: 14, offset: 53167},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1453, col: 18, offset: 53171},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 1457, col: 1, offset: 53243},
			expr: &actionExpr{
				pos: position{line: 1457, col: 27, offset: 53269},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1457, col: 27, offset: 53269},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1457, col: 27, offset: 53269},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 1457, col: 35, offset: 53277},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1457, col: 40, offset: 53282},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1457, col: 54, offset: 53296},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1457, col: 72, offset: 53314},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1461, col: 1, offset: 53437},
			expr: &ruleRefExpr{
				pos:  position{line: 1461, col: 24, offset: 53460},
				name: "ElementTitleContent",
			},
		},
		{
			name: "Link",
			pos:  position{line: 1466, col: 1, offset: 53582},
			expr: &choiceExpr{
				pos: position{line: 1466, col: 9, offset: 53590},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1466, col: 9, offset: 53590},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1466, col: 24, offset: 53605},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1469, col: 1, offset: 53686},
			expr: &actionExpr{
				pos: position{line: 1469, col: 17, offset: 53702},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1469, col: 17, offset: 53702},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1469, col: 17, offset: 53702},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1469, col: 25, offset: 53710},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1469, col: 30, offset: 53715},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1469, col: 40, offset: 53725},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1469, col: 58, offset: 53743},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1473, col: 1, offset: 53854},
			expr: &actionExpr{
				pos: position{line: 1473, col: 17, offset: 53870},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1473, col: 17, offset: 53870},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1473, col: 17, offset: 53870},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1473, col: 22, offset: 53875},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 1473, col: 42, offset: 53895},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1473, col: 59, offset: 53912},
								expr: &ruleRefExpr{
									pos:  position{line: 1473, col: 60, offset: 53913},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1477, col: 1, offset: 54006},
			expr: &actionExpr{
				pos: position{line: 1477, col: 19, offset: 54024},
				run: (*parser).callonLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1477, col: 19, offset: 54024},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1477, col: 19, offset: 54024},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1477, col: 23, offset: 54028},
							label: "firstAttr",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1477, col: 33, offset: 54038},
								expr: &ruleRefExpr{
									pos:  position{line: 1477, col: 34, offset: 54039},
									name: "FirstLinkAttributeElement",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1478, col: 5, offset: 54071},
							expr: &ruleRefExpr{
								pos:  position{line: 1478, col: 5, offset: 54071},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1478, col: 12, offset: 54078},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1478, col: 23, offset: 54089},
								expr: &ruleRefExpr{
									pos:  position{line: 1478, col: 24, offset: 54090},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1478, col: 43, offset: 54109},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstLinkAttributeElement",
			pos:  position{line: 1482, col: 1, offset: 54226},
			expr: &actionExpr{
				pos: position{line: 1482, col: 30, offset: 54255},
				run: (*parser).callonFirstLinkAttributeElement1,
				expr: &labeledExpr{
					pos:   position{line: 1482, col: 30, offset: 54255},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1484, col: 5, offset: 54306},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 1484, col: 6, offset: 54307},
								run: (*parser).callonFirstLinkAttributeElement4,
								expr: &seqExpr{
									pos: position{line: 1484, col: 6, offset: 54307},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1484, col: 6, offset: 54307},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&labeledExpr{
											pos:   position{line: 1484, col: 11, offset: 54312},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1484, col: 20, offset: 54321},
												expr: &choiceExpr{
													pos: position{line: 1484, col: 21, offset: 54322},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1484, col: 21, offset: 54322},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1484, col: 36, offset: 54337},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1484, col: 49, offset: 54350},
															name: "QuotedAttributeChar",
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 1484, col: 71, offset: 54372},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&andExpr{
											pos: position{line: 1484, col: 76, offset: 54377},
											expr: &notExpr{
												pos: position{line: 1484, col: 78, offset: 54379},
												expr: &litMatcher{
													pos:        position{line: 1484, col: 79, offset: 54380},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1484, col: 84, offset: 54385},
											expr: &litMatcher{
												pos:        position{line: 1484, col: 84, offset: 54385},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 1488, col: 6, offset: 54512},
								run: (*parser).callonFirstLinkAttributeElement19,
								expr: &seqExpr{
									pos: position{line: 1488, col: 6, offset: 54512},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1488, col: 6, offset: 54512},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1488, col: 15, offset: 54521},
												expr: &choiceExpr{
													pos: position{line: 1488, col: 16, offset: 54522},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1488, col: 16, offset: 54522},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1488, col: 31, offset: 54537},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1488, col: 44, offset: 54550},
															name: "UnquotedAttributeChar",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 1488, col: 68, offset: 54574},
											expr: &notExpr{
												pos: position{line: 1488, col: 70, offset: 54576},
												expr: &litMatcher{
													pos:        position{line: 1488, col: 71, offset: 54577},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1488, col: 76, offset: 54582},
											expr: &litMatcher{
												pos:        position{line: 1488, col: 76, offset: 54582},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeChar",
			pos:  position{line: 1494, col: 1, offset: 54696},
			expr: &actionExpr{
				pos: position{line: 1494, col: 18, offset: 54713},
				run: (*parser).callonAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1494, col: 18, offset: 54713},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "QuotedAttributeChar",
			pos:  position{line: 1498, col: 1, offset: 54799},
			expr: &actionExpr{
				pos: position{line: 1498, col: 24, offset: 54822},
				run: (*parser).callonQuotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1498, col: 24, offset: 54822},
					val:        "[^\\r\\n\"=\\]]",
					chars:      []rune{'\r', '\n', '"', '=', ']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "UnquotedAttributeChar",
			pos:  position{line: 1502, col: 1, offset: 54915},
			expr: &actionExpr{
				pos: position{line: 1502, col: 26, offset: 54940},
				run: (*parser).callonUnquotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1502, col: 26, offset: 54940},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "InlineLinks",
			pos:  position{line: 1507, col: 1, offset: 55096},
			expr: &actionExpr{
				pos: position{line: 1508, col: 5, offset: 55115},
				run: (*parser).callonInlineLinks1,
				expr: &seqExpr{
					pos: position{line: 1508, col: 5, offset: 55115},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1508, col: 5, offset: 55115},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1508, col: 14, offset: 55124},
								expr: &choiceExpr{
									pos: position{line: 1508, col: 15, offset: 55125},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1508, col: 15, offset: 55125},
											name: "Word",
										},
										&ruleRefExpr{
											pos:  position{line: 1509, col: 11, offset: 55140},
											name: "Symbol",
										},
										&oneOrMoreExpr{
											pos: position{line: 1510, col: 11, offset: 55157},
											expr: &ruleRefExpr{
												pos:  position{line: 1510, col: 11, offset: 55157},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1511, col: 11, offset: 55175},
											name: "ResolvedLink",
										},
										&ruleRefExpr{
											pos:  position{line: 1512, col: 11, offset: 55199},
											name: "Parenthesis",
										},
										&ruleRefExpr{
											pos:  position{line: 1513, col: 11, offset: 55221},
											name: "ImpliedApostrophe",
										},
										&ruleRefExpr{
											pos:  position{line: 1514, col: 11, offset: 55249},
											name: "AnyChar",
										},
										&ruleRefExpr{
											pos:  position{line: 1515, col: 11, offset: 55267},
											name: "Newline",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1515, col: 21, offset: 55277},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ResolvedLink",
			pos:  position{line: 1519, col: 1, offset: 55347},
			expr: &choiceExpr{
				pos: position{line: 1519, col: 17, offset: 55363},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1519, col: 17, offset: 55363},
						name: "ResolvedRelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1519, col: 40, offset: 55386},
						name: "ResolvedExternalLink",
					},
				},
			},
		},
		{
			name: "ResolvedRelativeLink",
			pos:  position{line: 1522, col: 1, offset: 55514},
			expr: &actionExpr{
				pos: position{line: 1522, col: 25, offset: 55538},
				run: (*parser).callonResolvedRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1522, col: 25, offset: 55538},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1522, col: 25, offset: 55538},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1522, col: 33, offset: 55546},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1522, col: 38, offset: 55551},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1522, col: 38, offset: 55551},
										name: "ResolvedLocation",
									},
									&ruleRefExpr{
										pos:  position{line: 1522, col: 57, offset: 55570},
										name: "ResolvedFileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1522, col: 79, offset: 55592},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1522, col: 97, offset: 55610},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedExternalLink",
			pos:  position{line: 1526, col: 1, offset: 55721},
			expr: &actionExpr{
				pos: position{line: 1526, col: 25, offset: 55745},
				run: (*parser).callonResolvedExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1526, col: 25, offset: 55745},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1526, col: 25, offset: 55745},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1526, col: 30, offset: 55750},
								name: "ResolvedLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1526, col: 48, offset: 55768},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1526, col: 65, offset: 55785},
								expr: &ruleRefExpr{
									pos:  position{line: 1526, col: 66, offset: 55786},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1533, col: 1, offset: 55981},
			expr: &actionExpr{
				pos: position{line: 1533, col: 15, offset: 55995},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1533, col: 15, offset: 55995},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1533, col: 15, offset: 55995},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1533, col: 26, offset: 56006},
								expr: &ruleRefExpr{
									pos:  position{line: 1533, col: 27, offset: 56007},
									name: "Attributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1533, col: 40, offset: 56020},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 1533, col: 50, offset: 56030},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1533, col: 56, offset: 56036},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1533, col: 66, offset: 56046},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1533, col: 84, offset: 56064},
								name: "ImageAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1533, col: 101, offset: 56081},
							expr: &ruleRefExpr{
								pos:  position{line: 1533, col: 101, offset: 56081},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1533, col: 108, offset: 56088},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1537, col: 1, offset: 56200},
			expr: &actionExpr{
				pos: position{line: 1537, col: 16, offset: 56215},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1537, col: 16, offset: 56215},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1537, col: 16, offset: 56215},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 1537, col: 25, offset: 56224},
							expr: &litMatcher{
								pos:        position{line: 1537, col: 26, offset: 56225},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1537, col: 30, offset: 56229},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1537, col: 36, offset: 56235},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1537, col: 46, offset: 56245},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1537, col: 64, offset: 56263},
								name: "ImageAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAttributes",
			pos:  position{line: 1541, col: 1, offset: 56377},
			expr: &actionExpr{
				pos: position{line: 1541, col: 20, offset: 56396},
				run: (*parser).callonImageAttributes1,
				expr: &seqExpr{
					pos: position{line: 1541, col: 20, offset: 56396},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1541, col: 20, offset: 56396},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1541, col: 24, offset: 56400},
							label: "alt",
							expr: &zeroOrOneExpr{
								pos: position{line: 1541, col: 28, offset: 56404},
								expr: &ruleRefExpr{
									pos:  position{line: 1541, col: 29, offset: 56405},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1541, col: 56, offset: 56432},
							expr: &litMatcher{
								pos:        position{line: 1541, col: 56, offset: 56432},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1541, col: 61, offset: 56437},
							label: "width",
							expr: &zeroOrOneExpr{
								pos: position{line: 1541, col: 67, offset: 56443},
								expr: &ruleRefExpr{
									pos:  position{line: 1541, col: 68, offset: 56444},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1541, col: 95, offset: 56471},
							expr: &litMatcher{
								pos:        position{line: 1541, col: 95, offset: 56471},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1541, col: 100, offset: 56476},
							label: "height",
							expr: &zeroOrOneExpr{
								pos: position{line: 1541, col: 107, offset: 56483},
								expr: &ruleRefExpr{
									pos:  position{line: 1541, col: 108, offset: 56484},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1541, col: 135, offset: 56511},
							expr: &litMatcher{
								pos:        position{line: 1541, col: 135, offset: 56511},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1541, col: 140, offset: 56516},
							expr: &ruleRefExpr{
								pos:  position{line: 1541, col: 140, offset: 56516},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1541, col: 147, offset: 56523},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1541, col: 158, offset: 56534},
								expr: &ruleRefExpr{
									pos:  position{line: 1541, col: 159, offset: 56535},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1541, col: 178, offset: 56554},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 1548, col: 1, offset: 56839},
			expr: &actionExpr{
				pos: position{line: 1548, col: 15, offset: 56853},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 1548, col: 15, offset: 56853},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1548, col: 15, offset: 56853},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 1548, col: 23, offset: 56861},
							label: "iconClass",
							expr: &actionExpr{
								pos: position{line: 1548, col: 34, offset: 56872},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1548, col: 34, offset: 56872},
									expr: &charClassMatcher{
										pos:        position{line: 1548, col: 34, offset: 56872},
										val:        "[\\pL0-9_-]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1548, col: 78, offset: 56916},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1548, col: 96, offset: 56934},
								name: "IconAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "IconAttributes",
			pos:  position{line: 1552, col: 1, offset: 57037},
			expr: &actionExpr{
				pos: position{line: 1552, col: 19, offset: 57055},
				run: (*parser).callonIconAttributes1,
				expr: &seqExpr{
					pos: position{line: 1552, col: 19, offset: 57055},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1552, col: 19, offset: 57055},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1552, col: 23, offset: 57059},
							label: "size",
							expr: &zeroOrOneExpr{
								pos: position{line: 1552, col: 28, offset: 57064},
								expr: &ruleRefExpr{
									pos:  position{line: 1552, col: 29, offset: 57065},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1552, col: 56, offset: 57092},
							expr: &litMatcher{
								pos:        position{line: 1552, col: 56, offset: 57092},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1552, col: 61, offset: 57097},
							expr: &ruleRefExpr{
								pos:  position{line: 1552, col: 61, offset: 57097},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1552, col: 68, offset: 57104},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1552, col: 75, offset: 57111},
								expr: &ruleRefExpr{
									pos:  position{line: 1552, col: 76, offset: 57112},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1552, col: 95, offset: 57131},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1559, col: 1, offset: 57402},
			expr: &choiceExpr{
				pos: position{line: 1559, col: 19, offset: 57420},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1559, col: 19, offset: 57420},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1559, col: 19, offset: 57420},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1559, col: 19, offset: 57420},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1559, col: 32, offset: 57433},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1559, col: 41, offset: 57442},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1559, col: 58, offset: 57459},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1561, col: 5, offset: 57527},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1561, col: 5, offset: 57527},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1561, col: 5, offset: 57527},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 1561, col: 17, offset: 57539},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1561, col: 22, offset: 57544},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1561, col: 35, offset: 57557},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 1561, col: 39, offset: 57561},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 1561, col: 47, offset: 57569},
										expr: &ruleRefExpr{
											pos:  position{line: 1561, col: 48, offset: 57570},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1561, col: 66, offset: 57588},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1565, col: 1, offset: 57649},
			expr: &ruleRefExpr{
				pos:  position{line: 1565, col: 16, offset: 57664},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1567, col: 1, offset: 57675},
			expr: &actionExpr{
				pos: position{line: 1567, col: 20, offset: 57694},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1567, col: 20, offset: 57694},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1567, col: 29, offset: 57703},
						expr: &seqExpr{
							pos: position{line: 1567, col: 30, offset: 57704},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1567, col: 30, offset: 57704},
									expr: &litMatcher{
										pos:        position{line: 1567, col: 31, offset: 57705},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1567, col: 35, offset: 57709},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1574, col: 1, offset: 58033},
			expr: &actionExpr{
				pos: position{line: 1574, col: 19, offset: 58051},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1574, col: 19, offset: 58051},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1574, col: 19, offset: 58051},
							expr: &ruleRefExpr{
								pos:  position{line: 1574, col: 20, offset: 58052},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1575, col: 5, offset: 58140},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1575, col: 12, offset: 58147},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1575, col: 12, offset: 58147},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1576, col: 11, offset: 58170},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1577, col: 11, offset: 58194},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1578, col: 11, offset: 58218},
										name: "VerseBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1579, col: 11, offset: 58240},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1580, col: 11, offset: 58262},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1581, col: 11, offset: 58285},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1582, col: 11, offset: 58313},
										name: "PassthroughBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1583, col: 11, offset: 58340},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1584, col: 11, offset: 58356},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1588, col: 1, offset: 58397},
			expr: &choiceExpr{
				pos: position{line: 1588, col: 19, offset: 58415},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1588, col: 19, offset: 58415},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1588, col: 19, offset: 58415},
								expr: &ruleRefExpr{
									pos:  position{line: 1588, col: 21, offset: 58417},
									name: "Alphanum",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1588, col: 31, offset: 58427},
								name: "LiteralBlockDelimiter",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1589, col: 19, offset: 58498},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1590, col: 19, offset: 58538},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1591, col: 19, offset: 58579},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1592, col: 19, offset: 58620},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1593, col: 19, offset: 58661},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1594, col: 19, offset: 58699},
						name: "SidebarBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1595, col: 19, offset: 58739},
						name: "PassthroughBlockDelimiter",
					},
				},
			},
		},
		{
			name: "VerbatimContent",
			pos:  position{line: 1597, col: 1, offset: 58766},
			expr: &choiceExpr{
				pos: position{line: 1597, col: 20, offset: 58785},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1597, col: 20, offset: 58785},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1597, col: 36, offset: 58801},
						name: "VerbatimLine",
					},
				},
			},
		},
		{
			name: "VerbatimLine",
			pos:  position{line: 1599, col: 1, offset: 58815},
			expr: &actionExpr{
				pos: position{line: 1599, col: 17, offset: 58831},
				run: (*parser).callonVerbatimLine1,
				expr: &seqExpr{
					pos: position{line: 1599, col: 17, offset: 58831},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1599, col: 17, offset: 58831},
							expr: &ruleRefExpr{
								pos:  position{line: 1599, col: 18, offset: 58832},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1599, col: 22, offset: 58836},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1599, col: 31, offset: 58845},
								name: "VerbatimLineContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 1599, col: 52, offset: 58866},
							label: "callouts",
							expr: &zeroOrOneExpr{
								pos: position{line: 1599, col: 61, offset: 58875},
								expr: &ruleRefExpr{
									pos:  position{line: 1599, col: 62, offset: 58876},
									name: "Callouts",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1599, col: 73, offset: 58887},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerbatimLineContent",
			pos:  position{line: 1603, col: 1, offset: 58957},
			expr: &actionExpr{
				pos: position{line: 1603, col: 24, offset: 58980},
				run: (*parser).callonVerbatimLineContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1603, col: 24, offset: 58980},
					expr: &seqExpr{
						pos: position{line: 1603, col: 25, offset: 58981},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1603, col: 25, offset: 58981},
								expr: &ruleRefExpr{
									pos:  position{line: 1603, col: 26, offset: 58982},
									name: "Callouts",
								},
							},
							&choiceExpr{
								pos: position{line: 1603, col: 36, offset: 58992},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1603, col: 36, offset: 58992},
										expr: &ruleRefExpr{
											pos:  position{line: 1603, col: 36, offset: 58992},
											name: "Space",
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 1603, col: 45, offset: 59001},
										expr: &charClassMatcher{
											pos:        position{line: 1603, col: 45, offset: 59001},
											val:        "[^ \\r\\n]",
											chars:      []rune{' ', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Callouts",
			pos:  position{line: 1607, col: 1, offset: 59051},
			expr: &oneOrMoreExpr{
				pos: position{line: 1607, col: 13, offset: 59063},
				expr: &ruleRefExpr{
					pos:  position{line: 1607, col: 13, offset: 59063},
					name: "Callout",
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1609, col: 1, offset: 59073},
			expr: &actionExpr{
				pos: position{line: 1609, col: 12, offset: 59084},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1609, col: 12, offset: 59084},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1609, col: 12, offset: 59084},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1609, col: 16, offset: 59088},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1609, col: 21, offset: 59093},
								run: (*parser).callonCallout5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1609, col: 21, offset: 59093},
									expr: &charClassMatcher{
										pos:        position{line: 1609, col: 21, offset: 59093},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1609, col: 69, offset: 59141},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1609, col: 73, offset: 59145},
							expr: &ruleRefExpr{
								pos:  position{line: 1609, col: 73, offset: 59145},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1609, col: 80, offset: 59152},
							expr: &choiceExpr{
								pos: position{line: 1609, col: 82, offset: 59154},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1609, col: 82, offset: 59154},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 1609, col: 88, offset: 59160},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItem",
			pos:  position{line: 1613, col: 1, offset: 59213},
			expr: &actionExpr{
				pos: position{line: 1613, col: 20, offset: 59232},
				run: (*parser).callonCalloutListItem1,
				expr: &seqExpr{
					pos: position{line: 1613, col: 20, offset: 59232},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1613, col: 20, offset: 59232},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 1613, col: 25, offset: 59237},
								name: "CalloutListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1613, col: 48, offset: 59260},
							label: "description",
							expr: &oneOrMoreExpr{
								pos: position{line: 1613, col: 61, offset: 59273},
								expr: &ruleRefExpr{
									pos:  position{line: 1613, col: 61, offset: 59273},
									name: "ListParagraph",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItemPrefix",
			pos:  position{line: 1617, col: 1, offset: 59370},
			expr: &actionExpr{
				pos: position{line: 1617, col: 26, offset: 59395},
				run: (*parser).callonCalloutListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 1617, col: 26, offset: 59395},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1617, col: 26, offset: 59395},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1617, col: 30, offset: 59399},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1617, col: 35, offset: 59404},
								run: (*parser).callonCalloutListItemPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1617, col: 35, offset: 59404},
									expr: &charClassMatcher{
										pos:        position{line: 1617, col: 35, offset: 59404},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1617, col: 83, offset: 59452},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1617, col: 87, offset: 59456},
							expr: &ruleRefExpr{
								pos:  position{line: 1617, col: 87, offset: 59456},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1624, col: 1, offset: 59683},
			expr: &seqExpr{
				pos: position{line: 1624, col: 25, offset: 59707},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1624, col: 25, offset: 59707},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1624, col: 31, offset: 59713},
						expr: &ruleRefExpr{
							pos:  position{line: 1624, col: 31, offset: 59713},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1624, col: 38, offset: 59720},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockStartDelimiter",
			pos:  position{line: 1626, col: 1, offset: 59780},
			expr: &seqExpr{
				pos: position{line: 1626, col: 30, offset: 59809},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1626, col: 30, offset: 59809},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1626, col: 36, offset: 59815},
						expr: &ruleRefExpr{
							pos:  position{line: 1626, col: 36, offset: 59815},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1626, col: 43, offset: 59822},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockEndDelimiter",
			pos:  position{line: 1628, col: 1, offset: 59827},
			expr: &choiceExpr{
				pos: position{line: 1628, col: 28, offset: 59854},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1628, col: 29, offset: 59855},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1628, col: 29, offset: 59855},
								val:        "```",
								ignoreCase: false,
								want:       "\"```\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1628, col: 35, offset: 59861},
								expr: &ruleRefExpr{
									pos:  position{line: 1628, col: 35, offset: 59861},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1628, col: 42, offset: 59868},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1628, col: 49, offset: 59875},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1630, col: 1, offset: 59880},
			expr: &actionExpr{
				pos: position{line: 1630, col: 16, offset: 59895},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1630, col: 16, offset: 59895},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1630, col: 16, offset: 59895},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1630, col: 27, offset: 59906},
								expr: &ruleRefExpr{
									pos:  position{line: 1630, col: 28, offset: 59907},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1630, col: 41, offset: 59920},
							name: "FencedBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1630, col: 67, offset: 59946},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1630, col: 76, offset: 59955},
								name: "FencedBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1630, col: 104, offset: 59983},
							name: "FencedBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockVerbatimContent",
			pos:  position{line: 1634, col: 1, offset: 60098},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1634, col: 31, offset: 60128},
				expr: &actionExpr{
					pos: position{line: 1634, col: 32, offset: 60129},
					run: (*parser).callonFencedBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1634, col: 32, offset: 60129},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1634, col: 32, offset: 60129},
								expr: &ruleRefExpr{
									pos:  position{line: 1634, col: 33, offset: 60130},
									name: "FencedBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1634, col: 57, offset: 60154},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1634, col: 66, offset: 60163},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1641, col: 1, offset: 60500},
			expr: &seqExpr{
				pos: position{line: 1641, col: 26, offset: 60525},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1641, col: 26, offset: 60525},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1641, col: 33, offset: 60532},
						expr: &ruleRefExpr{
							pos:  position{line: 1641, col: 33, offset: 60532},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1641, col: 40, offset: 60539},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockStartDelimiter",
			pos:  position{line: 1643, col: 1, offset: 60544},
			expr: &seqExpr{
				pos: position{line: 1643, col: 31, offset: 60574},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1643, col: 31, offset: 60574},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1643, col: 38, offset: 60581},
						expr: &ruleRefExpr{
							pos:  position{line: 1643, col: 38, offset: 60581},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1643, col: 45, offset: 60588},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockEndDelimiter",
			pos:  position{line: 1645, col: 1, offset: 60593},
			expr: &choiceExpr{
				pos: position{line: 1645, col: 29, offset: 60621},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1645, col: 30, offset: 60622},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1645, col: 30, offset: 60622},
								val:        "----",
								ignoreCase: false,
								want:       "\"----\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1645, col: 37, offset: 60629},
								expr: &ruleRefExpr{
									pos:  position{line: 1645, col: 37, offset: 60629},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1645, col: 44, offset: 60636},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1645, col: 51, offset: 60643},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1647, col: 1, offset: 60648},
			expr: &actionExpr{
				pos: position{line: 1647, col: 17, offset: 60664},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1647, col: 17, offset: 60664},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1647, col: 17, offset: 60664},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1647, col: 28, offset: 60675},
								expr: &ruleRefExpr{
									pos:  position{line: 1647, col: 29, offset: 60676},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1647, col: 42, offset: 60689},
							name: "ListingBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1647, col: 69, offset: 60716},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1647, col: 78, offset: 60725},
								name: "ListingBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1647, col: 107, offset: 60754},
							name: "ListingBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockVerbatimContent",
			pos:  position{line: 1651, col: 1, offset: 60871},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1651, col: 32, offset: 60902},
				expr: &actionExpr{
					pos: position{line: 1651, col: 33, offset: 60903},
					run: (*parser).callonListingBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1651, col: 33, offset: 60903},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1651, col: 33, offset: 60903},
								expr: &ruleRefExpr{
									pos:  position{line: 1651, col: 34, offset: 60904},
									name: "ListingBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1651, col: 59, offset: 60929},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1651, col: 68, offset: 60938},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1658, col: 1, offset: 61275},
			expr: &seqExpr{
				pos: position{line: 1658, col: 26, offset: 61300},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1658, col: 26, offset: 61300},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1658, col: 33, offset: 61307},
						expr: &ruleRefExpr{
							pos:  position{line: 1658, col: 33, offset: 61307},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1658, col: 40, offset: 61314},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockStartDelimiter",
			pos:  position{line: 1660, col: 1, offset: 61319},
			expr: &seqExpr{
				pos: position{line: 1660, col: 31, offset: 61349},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1660, col: 31, offset: 61349},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1660, col: 38, offset: 61356},
						expr: &ruleRefExpr{
							pos:  position{line: 1660, col: 38, offset: 61356},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1660, col: 45, offset: 61363},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockEndDelimiter",
			pos:  position{line: 1662, col: 1, offset: 61368},
			expr: &choiceExpr{
				pos: position{line: 1662, col: 29, offset: 61396},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1662, col: 30, offset: 61397},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1662, col: 30, offset: 61397},
								val:        "====",
								ignoreCase: false,
								want:       "\"====\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1662, col: 37, offset: 61404},
								expr: &ruleRefExpr{
									pos:  position{line: 1662, col: 37, offset: 61404},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1662, col: 44, offset: 61411},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1662, col: 51, offset: 61418},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1664, col: 1, offset: 61423},
			expr: &actionExpr{
				pos: position{line: 1664, col: 17, offset: 61439},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1664, col: 17, offset: 61439},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1664, col: 17, offset: 61439},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1664, col: 28, offset: 61450},
								expr: &ruleRefExpr{
									pos:  position{line: 1664, col: 29, offset: 61451},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1664, col: 42, offset: 61464},
							name: "ExampleBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1664, col: 69, offset: 61491},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1664, col: 78, offset: 61500},
								name: "ExampleBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1664, col: 107, offset: 61529},
							name: "ExampleBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockVerbatimContent",
			pos:  position{line: 1668, col: 1, offset: 61646},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1668, col: 32, offset: 61677},
				expr: &actionExpr{
					pos: position{line: 1668, col: 33, offset: 61678},
					run: (*parser).callonExampleBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1668, col: 33, offset: 61678},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1668, col: 33, offset: 61678},
								expr: &ruleRefExpr{
									pos:  position{line: 1668, col: 34, offset: 61679},
									name: "ExampleBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1668, col: 59, offset: 61704},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1668, col: 68, offset: 61713},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1675, col: 1, offset: 62048},
			expr: &seqExpr{
				pos: position{line: 1675, col: 24, offset: 62071},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1675, col: 24, offset: 62071},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1675, col: 31, offset: 62078},
						expr: &ruleRefExpr{
							pos:  position{line: 1675, col: 31, offset: 62078},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1675, col: 38, offset: 62085},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockStartDelimiter",
			pos:  position{line: 1677, col: 1, offset: 62115},
			expr: &seqExpr{
				pos: position{line: 1677, col: 29, offset: 62143},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1677, col: 29, offset: 62143},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1677, col: 36, offset: 62150},
						expr: &ruleRefExpr{
							pos:  position{line: 1677, col: 36, offset: 62150},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1677, col: 43, offset: 62157},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockEndDelimiter",
			pos:  position{line: 1679, col: 1, offset: 62187},
			expr: &choiceExpr{
				pos: position{line: 1679, col: 27, offset: 62213},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1679, col: 28, offset: 62214},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1679, col: 28, offset: 62214},
								val:        "____",
								ignoreCase: false,
								want:       "\"____\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1679, col: 35, offset: 62221},
								expr: &ruleRefExpr{
									pos:  position{line: 1679, col: 35, offset: 62221},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1679, col: 42, offset: 62228},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1679, col: 49, offset: 62235},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1681, col: 1, offset: 62265},
			expr: &actionExpr{
				pos: position{line: 1681, col: 15, offset: 62279},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1681, col: 15, offset: 62279},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1681, col: 15, offset: 62279},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1681, col: 26, offset: 62290},
								expr: &ruleRefExpr{
									pos:  position{line: 1681, col: 27, offset: 62291},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1681, col: 40, offset: 62304},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1681, col: 65, offset: 62329},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1681, col: 74, offset: 62338},
								name: "QuoteBlockVerbatimElement",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1681, col: 101, offset: 62365},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockVerbatimElement",
			pos:  position{line: 1685, col: 1, offset: 62478},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1685, col: 30, offset: 62507},
				expr: &actionExpr{
					pos: position{line: 1685, col: 31, offset: 62508},
					run: (*parser).callonQuoteBlockVerbatimElement2,
					expr: &seqExpr{
						pos: position{line: 1685, col: 31, offset: 62508},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1685, col: 31, offset: 62508},
								expr: &ruleRefExpr{
									pos:  position{line: 1685, col: 32, offset: 62509},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1685, col: 55, offset: 62532},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1685, col: 64, offset: 62541},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlock",
			pos:  position{line: 1694, col: 1, offset: 62925},
			expr: &actionExpr{
				pos: position{line: 1694, col: 15, offset: 62939},
				run: (*parser).callonVerseBlock1,
				expr: &seqExpr{
					pos: position{line: 1694, col: 15, offset: 62939},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1694, col: 15, offset: 62939},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1694, col: 27, offset: 62951},
								name: "Attributes",
							},
						},
						&andCodeExpr{
							pos: position{line: 1695, col: 5, offset: 62968},
							run: (*parser).callonVerseBlock5,
						},
						&ruleRefExpr{
							pos:  position{line: 1699, col: 5, offset: 63163},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1699, col: 30, offset: 63188},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1699, col: 39, offset: 63197},
								name: "VerseBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1699, col: 66, offset: 63224},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockVerbatimContent",
			pos:  position{line: 1703, col: 1, offset: 63345},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1703, col: 30, offset: 63374},
				expr: &actionExpr{
					pos: position{line: 1703, col: 31, offset: 63375},
					run: (*parser).callonVerseBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1703, col: 31, offset: 63375},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1703, col: 31, offset: 63375},
								expr: &ruleRefExpr{
									pos:  position{line: 1703, col: 32, offset: 63376},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1703, col: 55, offset: 63399},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1703, col: 64, offset: 63408},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1710, col: 1, offset: 63745},
			expr: &seqExpr{
				pos: position{line: 1710, col: 26, offset: 63770},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1710, col: 26, offset: 63770},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1710, col: 33, offset: 63777},
						expr: &ruleRefExpr{
							pos:  position{line: 1710, col: 33, offset: 63777},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1710, col: 40, offset: 63784},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockStartDelimiter",
			pos:  position{line: 1712, col: 1, offset: 63789},
			expr: &seqExpr{
				pos: position{line: 1712, col: 31, offset: 63819},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1712, col: 31, offset: 63819},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1712, col: 38, offset: 63826},
						expr: &ruleRefExpr{
							pos:  position{line: 1712, col: 38, offset: 63826},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1712, col: 45, offset: 63833},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockEndDelimiter",
			pos:  position{line: 1714, col: 1, offset: 63838},
			expr: &choiceExpr{
				pos: position{line: 1714, col: 29, offset: 63866},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1714, col: 30, offset: 63867},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1714, col: 30, offset: 63867},
								val:        "****",
								ignoreCase: false,
								want:       "\"****\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1714, col: 37, offset: 63874},
								expr: &ruleRefExpr{
									pos:  position{line: 1714, col: 37, offset: 63874},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1714, col: 44, offset: 63881},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1714, col: 51, offset: 63888},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1716, col: 1, offset: 63893},
			expr: &actionExpr{
				pos: position{line: 1716, col: 17, offset: 63909},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1716, col: 17, offset: 63909},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1716, col: 17, offset: 63909},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1716, col: 28, offset: 63920},
								expr: &ruleRefExpr{
									pos:  position{line: 1716, col: 29, offset: 63921},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1716, col: 42, offset: 63934},
							name: "SidebarBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1716, col: 69, offset: 63961},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1716, col: 78, offset: 63970},
								name: "SidebarBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1716, col: 107, offset: 63999},
							name: "SidebarBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockVerbatimContent",
			pos:  position{line: 1720, col: 1, offset: 64116},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1720, col: 32, offset: 64147},
				expr: &actionExpr{
					pos: position{line: 1720, col: 33, offset: 64148},
					run: (*parser).callonSidebarBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1720, col: 33, offset: 64148},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1720, col: 33, offset: 64148},
								expr: &ruleRefExpr{
									pos:  position{line: 1720, col: 34, offset: 64149},
									name: "SidebarBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1720, col: 59, offset: 64174},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1720, col: 68, offset: 64183},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockDelimiter",
			pos:  position{line: 1727, col: 1, offset: 64524},
			expr: &seqExpr{
				pos: position{line: 1727, col: 30, offset: 64553},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1727, col: 30, offset: 64553},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1727, col: 37, offset: 64560},
						expr: &ruleRefExpr{
							pos:  position{line: 1727, col: 37, offset: 64560},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1727, col: 44, offset: 64567},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockStartDelimiter",
			pos:  position{line: 1729, col: 1, offset: 64572},
			expr: &seqExpr{
				pos: position{line: 1729, col: 35, offset: 64606},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1729, col: 35, offset: 64606},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1729, col: 42, offset: 64613},
						expr: &ruleRefExpr{
							pos:  position{line: 1729, col: 42, offset: 64613},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1729, col: 49, offset: 64620},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockEndDelimiter",
			pos:  position{line: 1731, col: 1, offset: 64625},
			expr: &choiceExpr{
				pos: position{line: 1731, col: 33, offset: 64657},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1731, col: 34, offset: 64658},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1731, col: 34, offset: 64658},
								val:        "++++",
								ignoreCase: false,
								want:       "\"++++\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1731, col: 41, offset: 64665},
								expr: &ruleRefExpr{
									pos:  position{line: 1731, col: 41, offset: 64665},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1731, col: 48, offset: 64672},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1731, col: 55, offset: 64679},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PassthroughBlock",
			pos:  position{line: 1733, col: 1, offset: 64684},
			expr: &actionExpr{
				pos: position{line: 1733, col: 21, offset: 64704},
				run: (*parser).callonPassthroughBlock1,
				expr: &seqExpr{
					pos: position{line: 1733, col: 21, offset: 64704},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1733, col: 21, offset: 64704},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1733, col: 32, offset: 64715},
								expr: &ruleRefExpr{
									pos:  position{line: 1733, col: 33, offset: 64716},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1733, col: 46, offset: 64729},
							name: "PassthroughBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1733, col: 77, offset: 64760},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1733, col: 86, offset: 64769},
								name: "PassthroughBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1733, col: 119, offset: 64802},
							name: "PassthroughBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockVerbatimContent",
			pos:  position{line: 1737, col: 1, offset: 64927},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1737, col: 36, offset: 64962},
				expr: &actionExpr{
					pos: position{line: 1737, col: 37, offset: 64963},
					run: (*parser).callonPassthroughBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1737, col: 37, offset: 64963},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1737, col: 37, offset: 64963},
								expr: &ruleRefExpr{
									pos:  position{line: 1737, col: 38, offset: 64964},
									name: "PassthroughBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1737, col: 67, offset: 64993},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1737, col: 76, offset: 65002},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ThematicBreak",
			pos:  position{line: 1742, col: 1, offset: 65161},
			expr: &actionExpr{
				pos: position{line: 1742, col: 18, offset: 65178},
				run: (*parser).callonThematicBreak1,
				expr: &seqExpr{
					pos: position{line: 1742, col: 18, offset: 65178},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1742, col: 19, offset: 65179},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1742, col: 19, offset: 65179},
									val:        "***",
									ignoreCase: false,
									want:       "\"***\"",
								},
								&litMatcher{
									pos:        position{line: 1742, col: 27, offset: 65187},
									val:        "* * *",
									ignoreCase: false,
									want:       "\"* * *\"",
								},
								&litMatcher{
									pos:        position{line: 1742, col: 37, offset: 65197},
									val:        "---",
									ignoreCase: false,
									want:       "\"---\"",
								},
								&litMatcher{
									pos:        position{line: 1742, col: 45, offset: 65205},
									val:        "- - -",
									ignoreCase: false,
									want:       "\"- - -\"",
								},
								&litMatcher{
									pos:        position{line: 1742, col: 55, offset: 65215},
									val:        "___",
									ignoreCase: false,
									want:       "\"___\"",
								},
								&litMatcher{
									pos:        position{line: 1742, col: 63, offset: 65223},
									val:        "_ _ _",
									ignoreCase: false,
									want:       "\"_ _ _\"",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1742, col: 72, offset: 65232},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "NormalBlockContent",
			pos:  position{line: 1750, col: 1, offset: 65482},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1750, col: 23, offset: 65504},
				expr: &ruleRefExpr{
					pos:  position{line: 1750, col: 23, offset: 65504},
					name: "NormalBlockElement",
				},
			},
		},
		{
			name: "NormalBlockElement",
			pos:  position{line: 1752, col: 1, offset: 65525},
			expr: &actionExpr{
				pos: position{line: 1753, col: 5, offset: 65552},
				run: (*parser).callonNormalBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1753, col: 5, offset: 65552},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1753, col: 5, offset: 65552},
							expr: &ruleRefExpr{
								pos:  position{line: 1753, col: 6, offset: 65553},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1753, col: 10, offset: 65557},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1753, col: 19, offset: 65566},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1753, col: 19, offset: 65566},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1754, col: 15, offset: 65591},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 1755, col: 15, offset: 65619},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1756, col: 15, offset: 65644},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 1757, col: 15, offset: 65672},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1758, col: 15, offset: 65703},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1759, col: 15, offset: 65736},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1760, col: 15, offset: 65767},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 1761, col: 15, offset: 65806},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1762, col: 15, offset: 65835},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1763, col: 15, offset: 65863},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 1764, col: 15, offset: 65899},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 1765, col: 15, offset: 65929},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1766, col: 15, offset: 65970},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockContent",
			pos:  position{line: 1770, col: 1, offset: 66019},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1770, col: 22, offset: 66040},
				expr: &ruleRefExpr{
					pos:  position{line: 1770, col: 22, offset: 66040},
					name: "VerseBlockElement",
				},
			},
		},
		{
			name: "VerseBlockElement",
			pos:  position{line: 1772, col: 1, offset: 66060},
			expr: &actionExpr{
				pos: position{line: 1772, col: 22, offset: 66081},
				run: (*parser).callonVerseBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1772, col: 22, offset: 66081},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1772, col: 22, offset: 66081},
							expr: &ruleRefExpr{
								pos:  position{line: 1772, col: 23, offset: 66082},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1772, col: 27, offset: 66086},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1772, col: 36, offset: 66095},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1772, col: 36, offset: 66095},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1772, col: 48, offset: 66107},
										name: "VerseBlockParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraph",
			pos:  position{line: 1776, col: 1, offset: 66157},
			expr: &actionExpr{
				pos: position{line: 1776, col: 24, offset: 66180},
				run: (*parser).callonVerseBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1776, col: 24, offset: 66180},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1776, col: 30, offset: 66186},
						expr: &ruleRefExpr{
							pos:  position{line: 1776, col: 31, offset: 66187},
							name: "VerseBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLine",
			pos:  position{line: 1780, col: 1, offset: 66277},
			expr: &actionExpr{
				pos: position{line: 1780, col: 28, offset: 66304},
				run: (*parser).callonVerseBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1780, col: 28, offset: 66304},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1780, col: 28, offset: 66304},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1780, col: 37, offset: 66313},
								expr: &ruleRefExpr{
									pos:  position{line: 1780, col: 38, offset: 66314},
									name: "InlineElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1780, col: 54, offset: 66330},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1787, col: 1, offset: 66572},
			expr: &actionExpr{
				pos: position{line: 1787, col: 10, offset: 66581},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1787, col: 10, offset: 66581},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1787, col: 10, offset: 66581},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1787, col: 21, offset: 66592},
								expr: &ruleRefExpr{
									pos:  position{line: 1787, col: 22, offset: 66593},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1787, col: 35, offset: 66606},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1788, col: 5, offset: 66625},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1788, col: 12, offset: 66632},
								expr: &ruleRefExpr{
									pos:  position{line: 1788, col: 13, offset: 66633},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1789, col: 5, offset: 66655},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1789, col: 11, offset: 66661},
								expr: &ruleRefExpr{
									pos:  position{line: 1789, col: 12, offset: 66662},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1790, col: 6, offset: 66679},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1790, col: 6, offset: 66679},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1790, col: 23, offset: 66696},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1794, col: 1, offset: 66811},
			expr: &seqExpr{
				pos: position{line: 1794, col: 23, offset: 66833},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1794, col: 23, offset: 66833},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1794, col: 27, offset: 66837},
						expr: &ruleRefExpr{
							pos:  position{line: 1794, col: 27, offset: 66837},
							name: "Space",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1796, col: 1, offset: 66845},
			expr: &seqExpr{
				pos: position{line: 1796, col: 19, offset: 66863},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1796, col: 19, offset: 66863},
						val:        "|===",
						ignoreCase: false,
						want:       "\"|===\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1796, col: 26, offset: 66870},
						expr: &ruleRefExpr{
							pos:  position{line: 1796, col: 26, offset: 66870},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1796, col: 33, offset: 66877},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1799, col: 1, offset: 66945},
			expr: &actionExpr{
				pos: position{line: 1799, col: 20, offset: 66964},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1799, col: 20, offset: 66964},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1799, col: 20, offset: 66964},
							expr: &ruleRefExpr{
								pos:  position{line: 1799, col: 21, offset: 66965},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1799, col: 36, offset: 66980},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1799, col: 42, offset: 66986},
								expr: &ruleRefExpr{
									pos:  position{line: 1799, col: 43, offset: 66987},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1799, col: 55, offset: 66999},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1799, col: 59, offset: 67003},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1803, col: 1, offset: 67071},
			expr: &actionExpr{
				pos: position{line: 1803, col: 14, offset: 67084},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1803, col: 14, offset: 67084},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1803, col: 14, offset: 67084},
							expr: &ruleRefExpr{
								pos:  position{line: 1803, col: 15, offset: 67085},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1803, col: 30, offset: 67100},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1803, col: 36, offset: 67106},
								expr: &ruleRefExpr{
									pos:  position{line: 1803, col: 37, offset: 67107},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1803, col: 49, offset: 67119},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1803, col: 53, offset: 67123},
							expr: &ruleRefExpr{
								pos:  position{line: 1803, col: 53, offset: 67123},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1807, col: 1, offset: 67192},
			expr: &actionExpr{
				pos: position{line: 1807, col: 14, offset: 67205},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1807, col: 14, offset: 67205},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1807, col: 14, offset: 67205},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1807, col: 33, offset: 67224},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1807, col: 42, offset: 67233},
								expr: &seqExpr{
									pos: position{line: 1807, col: 43, offset: 67234},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1807, col: 43, offset: 67234},
											expr: &ruleRefExpr{
												pos:  position{line: 1807, col: 44, offset: 67235},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1807, col: 63, offset: 67254},
											expr: &ruleRefExpr{
												pos:  position{line: 1807, col: 64, offset: 67255},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1807, col: 68, offset: 67259},
											expr: &ruleRefExpr{
												pos:  position{line: 1807, col: 68, offset: 67259},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1807, col: 75, offset: 67266},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1807, col: 89, offset: 67280},
											expr: &ruleRefExpr{
												pos:  position{line: 1807, col: 89, offset: 67280},
												name: "Space",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1814, col: 1, offset: 67529},
			expr: &seqExpr{
				pos: position{line: 1814, col: 26, offset: 67554},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1814, col: 26, offset: 67554},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1814, col: 33, offset: 67561},
						expr: &ruleRefExpr{
							pos:  position{line: 1814, col: 33, offset: 67561},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1814, col: 40, offset: 67568},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 1816, col: 1, offset: 67573},
			expr: &seqExpr{
				pos: position{line: 1816, col: 31, offset: 67603},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1816, col: 31, offset: 67603},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1816, col: 38, offset: 67610},
						expr: &ruleRefExpr{
							pos:  position{line: 1816, col: 38, offset: 67610},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1816, col: 45, offset: 67617},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 1818, col: 1, offset: 67622},
			expr: &choiceExpr{
				pos: position{line: 1818, col: 29, offset: 67650},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1818, col: 30, offset: 67651},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1818, col: 30, offset: 67651},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1818, col: 37, offset: 67658},
								expr: &ruleRefExpr{
									pos:  position{line: 1818, col: 37, offset: 67658},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1818, col: 44, offset: 67665},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1818, col: 51, offset: 67672},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1820, col: 1, offset: 67677},
			expr: &actionExpr{
				pos: position{line: 1820, col: 17, offset: 67693},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1820, col: 17, offset: 67693},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1820, col: 17, offset: 67693},
							name: "CommentBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1820, col: 44, offset: 67720},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1820, col: 53, offset: 67729},
								name: "CommentBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1820, col: 83, offset: 67759},
							name: "CommentBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockVerbatimContent",
			pos:  position{line: 1824, col: 1, offset: 67869},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1824, col: 32, offset: 67900},
				expr: &actionExpr{
					pos: position{line: 1824, col: 33, offset: 67901},
					run: (*parser).callonCommentBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1824, col: 33, offset: 67901},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1824, col: 33, offset: 67901},
								expr: &ruleRefExpr{
									pos:  position{line: 1824, col: 34, offset: 67902},
									name: "CommentBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1824, col: 59, offset: 67927},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1824, col: 68, offset: 67936},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1828, col: 1, offset: 68077},
			expr: &actionExpr{
				pos: position{line: 1828, col: 22, offset: 68098},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1828, col: 22, offset: 68098},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1828, col: 22, offset: 68098},
							expr: &ruleRefExpr{
								pos:  position{line: 1828, col: 23, offset: 68099},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1828, col: 45, offset: 68121},
							expr: &ruleRefExpr{
								pos:  position{line: 1828, col: 45, offset: 68121},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1828, col: 52, offset: 68128},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 1828, col: 57, offset: 68133},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1828, col: 66, offset: 68142},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1828, col: 92, offset: 68168},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1832, col: 1, offset: 68233},
			expr: &actionExpr{
				pos: position{line: 1832, col: 29, offset: 68261},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1832, col: 29, offset: 68261},
					expr: &charClassMatcher{
						pos:        position{line: 1832, col: 29, offset: 68261},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 1840, col: 1, offset: 68574},
			expr: &choiceExpr{
				pos: position{line: 1840, col: 17, offset: 68590},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1840, col: 17, offset: 68590},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 1840, col: 49, offset: 68622},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 1840, col: 78, offset: 68651},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 1842, col: 1, offset: 68687},
			expr: &litMatcher{
				pos:        position{line: 1842, col: 26, offset: 68712},
				val:        "....",
				ignoreCase: false,
				want:       "\"....\"",
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 1845, col: 1, offset: 68784},
			expr: &actionExpr{
				pos: position{line: 1845, col: 31, offset: 68814},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 1845, col: 31, offset: 68814},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1845, col: 31, offset: 68814},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1845, col: 42, offset: 68825},
								expr: &ruleRefExpr{
									pos:  position{line: 1845, col: 43, offset: 68826},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1845, col: 56, offset: 68839},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1845, col: 63, offset: 68846},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 1850, col: 1, offset: 69076},
			expr: &actionExpr{
				pos: position{line: 1851, col: 5, offset: 69116},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 1851, col: 5, offset: 69116},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1851, col: 5, offset: 69116},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1851, col: 16, offset: 69127},
								run: (*parser).callonParagraphWithHeadingSpacesLines4,
								expr: &seqExpr{
									pos: position{line: 1851, col: 16, offset: 69127},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 1851, col: 16, offset: 69127},
											expr: &ruleRefExpr{
												pos:  position{line: 1851, col: 16, offset: 69127},
												name: "Space",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1851, col: 23, offset: 69134},
											expr: &charClassMatcher{
												pos:        position{line: 1851, col: 23, offset: 69134},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1853, col: 8, offset: 69187},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 1854, col: 5, offset: 69250},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1854, col: 16, offset: 69261},
								expr: &actionExpr{
									pos: position{line: 1855, col: 9, offset: 69271},
									run: (*parser).callonParagraphWithHeadingSpacesLines13,
									expr: &seqExpr{
										pos: position{line: 1855, col: 9, offset: 69271},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1855, col: 9, offset: 69271},
												expr: &ruleRefExpr{
													pos:  position{line: 1855, col: 10, offset: 69272},
													name: "BlankLine",
												},
											},
											&labeledExpr{
												pos:   position{line: 1856, col: 9, offset: 69291},
												label: "otherLine",
												expr: &actionExpr{
													pos: position{line: 1856, col: 20, offset: 69302},
													run: (*parser).callonParagraphWithHeadingSpacesLines18,
													expr: &oneOrMoreExpr{
														pos: position{line: 1856, col: 20, offset: 69302},
														expr: &charClassMatcher{
															pos:        position{line: 1856, col: 20, offset: 69302},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1858, col: 12, offset: 69363},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 1865, col: 1, offset: 69593},
			expr: &actionExpr{
				pos: position{line: 1865, col: 39, offset: 69631},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1865, col: 39, offset: 69631},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1865, col: 39, offset: 69631},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1865, col: 50, offset: 69642},
								expr: &ruleRefExpr{
									pos:  position{line: 1865, col: 51, offset: 69643},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1866, col: 9, offset: 69664},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1866, col: 31, offset: 69686},
							expr: &ruleRefExpr{
								pos:  position{line: 1866, col: 31, offset: 69686},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1866, col: 38, offset: 69693},
							name: "Newline",
						},
						&labeledExpr{
							pos:   position{line: 1866, col: 46, offset: 69701},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1866, col: 53, offset: 69708},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 1866, col: 95, offset: 69750},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1866, col: 96, offset: 69751},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1866, col: 96, offset: 69751},
											name: "LiteralBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1866, col: 118, offset: 69773},
											expr: &ruleRefExpr{
												pos:  position{line: 1866, col: 118, offset: 69773},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1866, col: 125, offset: 69780},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1866, col: 132, offset: 69787},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 1871, col: 1, offset: 69946},
			expr: &actionExpr{
				pos: position{line: 1871, col: 44, offset: 69989},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 1871, col: 44, offset: 69989},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1871, col: 50, offset: 69995},
						expr: &ruleRefExpr{
							pos:  position{line: 1871, col: 51, offset: 69996},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 1875, col: 1, offset: 70080},
			expr: &actionExpr{
				pos: position{line: 1876, col: 5, offset: 70135},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 1876, col: 5, offset: 70135},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1876, col: 5, offset: 70135},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1876, col: 11, offset: 70141},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &seqExpr{
									pos: position{line: 1876, col: 11, offset: 70141},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1876, col: 11, offset: 70141},
											expr: &ruleRefExpr{
												pos:  position{line: 1876, col: 12, offset: 70142},
												name: "LiteralBlockDelimiter",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1876, col: 34, offset: 70164},
											expr: &charClassMatcher{
												pos:        position{line: 1876, col: 34, offset: 70164},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1878, col: 8, offset: 70217},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 1883, col: 1, offset: 70343},
			expr: &actionExpr{
				pos: position{line: 1884, col: 5, offset: 70381},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 1884, col: 5, offset: 70381},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1884, col: 5, offset: 70381},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1884, col: 16, offset: 70392},
								expr: &ruleRefExpr{
									pos:  position{line: 1884, col: 17, offset: 70393},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1885, col: 5, offset: 70410},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 1892, col: 5, offset: 70617},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1892, col: 12, offset: 70624},
								name: "ParagraphWithLiteralAttributeLines",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 1896, col: 1, offset: 70774},
			expr: &actionExpr{
				pos: position{line: 1896, col: 16, offset: 70789},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 1896, col: 16, offset: 70789},
					val:        "literal",
					ignoreCase: false,
					want:       "\"literal\"",
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLines",
			pos:  position{line: 1901, col: 1, offset: 70872},
			expr: &actionExpr{
				pos: position{line: 1901, col: 39, offset: 70910},
				run: (*parser).callonParagraphWithLiteralAttributeLines1,
				expr: &labeledExpr{
					pos:   position{line: 1901, col: 39, offset: 70910},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1901, col: 45, offset: 70916},
						expr: &ruleRefExpr{
							pos:  position{line: 1901, col: 46, offset: 70917},
							name: "ParagraphWithLiteralAttributeLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLine",
			pos:  position{line: 1905, col: 1, offset: 70997},
			expr: &actionExpr{
				pos: position{line: 1905, col: 38, offset: 71034},
				run: (*parser).callonParagraphWithLiteralAttributeLine1,
				expr: &seqExpr{
					pos: position{line: 1905, col: 38, offset: 71034},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1905, col: 38, offset: 71034},
							expr: &ruleRefExpr{
								pos:  position{line: 1905, col: 39, offset: 71035},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1905, col: 49, offset: 71045},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 1905, col: 58, offset: 71054},
								run: (*parser).callonParagraphWithLiteralAttributeLine6,
								expr: &oneOrMoreExpr{
									pos: position{line: 1905, col: 58, offset: 71054},
									expr: &charClassMatcher{
										pos:        position{line: 1905, col: 58, offset: 71054},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1907, col: 4, offset: 71099},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 1914, col: 1, offset: 71285},
			expr: &actionExpr{
				pos: position{line: 1914, col: 14, offset: 71298},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1914, col: 14, offset: 71298},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1914, col: 14, offset: 71298},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 1914, col: 19, offset: 71303},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 1914, col: 25, offset: 71309},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 1914, col: 43, offset: 71327},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 1918, col: 1, offset: 71392},
			expr: &actionExpr{
				pos: position{line: 1918, col: 21, offset: 71412},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 1918, col: 21, offset: 71412},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1918, col: 30, offset: 71421},
						expr: &choiceExpr{
							pos: position{line: 1918, col: 31, offset: 71422},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1918, col: 31, offset: 71422},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 1918, col: 38, offset: 71429},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 1918, col: 53, offset: 71444},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 1918, col: 66, offset: 71457},
									name: "Space",
								},
								&actionExpr{
									pos: position{line: 1918, col: 74, offset: 71465},
									run: (*parser).callonIndexTermContent9,
									expr: &seqExpr{
										pos: position{line: 1918, col: 75, offset: 71466},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1918, col: 75, offset: 71466},
												expr: &litMatcher{
													pos:        position{line: 1918, col: 76, offset: 71467},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 1918, col: 81, offset: 71472,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 1924, col: 1, offset: 71578},
			expr: &actionExpr{
				pos: position{line: 1924, col: 23, offset: 71600},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1924, col: 23, offset: 71600},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1924, col: 23, offset: 71600},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 1924, col: 29, offset: 71606},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 1924, col: 36, offset: 71613},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 1925, col: 5, offset: 71645},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 1925, col: 11, offset: 71651},
								expr: &actionExpr{
									pos: position{line: 1925, col: 12, offset: 71652},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 1925, col: 12, offset: 71652},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1925, col: 12, offset: 71652},
												expr: &ruleRefExpr{
													pos:  position{line: 1925, col: 12, offset: 71652},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 1925, col: 19, offset: 71659},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1925, col: 23, offset: 71663},
												expr: &ruleRefExpr{
													pos:  position{line: 1925, col: 23, offset: 71663},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 1925, col: 30, offset: 71670},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1925, col: 39, offset: 71679},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1926, col: 5, offset: 71737},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 1926, col: 11, offset: 71743},
								expr: &actionExpr{
									pos: position{line: 1926, col: 12, offset: 71744},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 1926, col: 12, offset: 71744},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1926, col: 12, offset: 71744},
												expr: &ruleRefExpr{
													pos:  position{line: 1926, col: 12, offset: 71744},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 1926, col: 19, offset: 71751},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1926, col: 23, offset: 71755},
												expr: &ruleRefExpr{
													pos:  position{line: 1926, col: 23, offset: 71755},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 1926, col: 30, offset: 71762},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1926, col: 39, offset: 71771},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1927, col: 5, offset: 71829},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 1931, col: 1, offset: 71908},
			expr: &actionExpr{
				pos: position{line: 1931, col: 30, offset: 71937},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1931, col: 30, offset: 71937},
					expr: &choiceExpr{
						pos: position{line: 1931, col: 31, offset: 71938},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1931, col: 31, offset: 71938},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 1931, col: 42, offset: 71949},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 1938, col: 1, offset: 72098},
			expr: &actionExpr{
				pos: position{line: 1938, col: 14, offset: 72111},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 1938, col: 14, offset: 72111},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1938, col: 14, offset: 72111},
							expr: &ruleRefExpr{
								pos:  position{line: 1938, col: 15, offset: 72112},
								name: "EOF",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1938, col: 19, offset: 72116},
							expr: &ruleRefExpr{
								pos:  position{line: 1938, col: 19, offset: 72116},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1938, col: 26, offset: 72123},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Symbol",
			pos:  position{line: 1946, col: 1, offset: 72268},
			expr: &choiceExpr{
				pos: position{line: 1946, col: 11, offset: 72278},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1946, col: 11, offset: 72278},
						name: "Apostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1946, col: 24, offset: 72291},
						name: "Copyright",
					},
					&ruleRefExpr{
						pos:  position{line: 1946, col: 36, offset: 72303},
						name: "Trademark",
					},
					&ruleRefExpr{
						pos:  position{line: 1946, col: 48, offset: 72315},
						name: "Registered",
					},
					&ruleRefExpr{
						pos:  position{line: 1946, col: 61, offset: 72328},
						name: "Ellipsis",
					},
				},
			},
		},
		{
			name: "Apostrophe",
			pos:  position{line: 1948, col: 1, offset: 72338},
			expr: &actionExpr{
				pos: position{line: 1948, col: 15, offset: 72352},
				run: (*parser).callonApostrophe1,
				expr: &litMatcher{
					pos:        position{line: 1948, col: 15, offset: 72352},
					val:        "`'",
					ignoreCase: false,
					want:       "\"`'\"",
				},
			},
		},
		{
			name: "Copyright",
			pos:  position{line: 1951, col: 1, offset: 72405},
			expr: &actionExpr{
				pos: position{line: 1951, col: 14, offset: 72418},
				run: (*parser).callonCopyright1,
				expr: &litMatcher{
					pos:        position{line: 1951, col: 14, offset: 72418},
					val:        "(C)",
					ignoreCase: false,
					want:       "\"(C)\"",
				},
			},
		},
		{
			name: "Trademark",
			pos:  position{line: 1954, col: 1, offset: 72472},
			expr: &actionExpr{
				pos: position{line: 1954, col: 14, offset: 72485},
				run: (*parser).callonTrademark1,
				expr: &litMatcher{
					pos:        position{line: 1954, col: 14, offset: 72485},
					val:        "(TM)",
					ignoreCase: false,
					want:       "\"(TM)\"",
				},
			},
		},
		{
			name: "Registered",
			pos:  position{line: 1957, col: 1, offset: 72540},
			expr: &actionExpr{
				pos: position{line: 1957, col: 15, offset: 72554},
				run: (*parser).callonRegistered1,
				expr: &litMatcher{
					pos:        position{line: 1957, col: 15, offset: 72554},
					val:        "(R)",
					ignoreCase: false,
					want:       "\"(R)\"",
				},
			},
		},
		{
			name: "Ellipsis",
			pos:  position{line: 1960, col: 1, offset: 72608},
			expr: &actionExpr{
				pos: position{line: 1960, col: 13, offset: 72620},
				run: (*parser).callonEllipsis1,
				expr: &litMatcher{
					pos:        position{line: 1960, col: 13, offset: 72620},
					val:        "...",
					ignoreCase: false,
					want:       "\"...\"",
				},
			},
		},
		{
			name: "ImpliedApostrophe",
			pos:  position{line: 1968, col: 1, offset: 72895},
			expr: &actionExpr{
				pos: position{line: 1968, col: 22, offset: 72916},
				run: (*parser).callonImpliedApostrophe1,
				expr: &seqExpr{
					pos: position{line: 1968, col: 22, offset: 72916},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1968, col: 22, offset: 72916},
							name: "Alphanum",
						},
						&litMatcher{
							pos:        position{line: 1968, col: 31, offset: 72925},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&andExpr{
							pos: position{line: 1968, col: 35, offset: 72929},
							expr: &charClassMatcher{
								pos:        position{line: 1968, col: 36, offset: 72930},
								val:        "[\\pL]",
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 1975, col: 1, offset: 73110},
			expr: &charClassMatcher{
				pos:        position{line: 1975, col: 13, offset: 73122},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 1977, col: 1, offset: 73132},
			expr: &choiceExpr{
				pos: position{line: 1977, col: 16, offset: 73147},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1977, col: 16, offset: 73147},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 1977, col: 22, offset: 73153},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 1977, col: 28, offset: 73159},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 1977, col: 34, offset: 73165},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 1977, col: 40, offset: 73171},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 1977, col: 46, offset: 73177},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 1979, col: 1, offset: 73183},
			expr: &actionExpr{
				pos: position{line: 1979, col: 14, offset: 73196},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1979, col: 14, offset: 73196},
					expr: &charClassMatcher{
						pos:        position{line: 1979, col: 14, offset: 73196},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 1983, col: 1, offset: 73242},
			expr: &choiceExpr{
				pos: position{line: 1987, col: 5, offset: 73569},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1987, col: 5, offset: 73569},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 1987, col: 5, offset: 73569},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1987, col: 5, offset: 73569},
									expr: &charClassMatcher{
										pos:        position{line: 1987, col: 5, offset: 73569},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1987, col: 15, offset: 73579},
									expr: &choiceExpr{
										pos: position{line: 1987, col: 17, offset: 73581},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1987, col: 17, offset: 73581},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 1987, col: 30, offset: 73594},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1989, col: 9, offset: 73664},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 1989, col: 9, offset: 73664},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1989, col: 9, offset: 73664},
									expr: &charClassMatcher{
										pos:        position{line: 1989, col: 9, offset: 73664},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1989, col: 19, offset: 73674},
									expr: &seqExpr{
										pos: position{line: 1989, col: 20, offset: 73675},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1989, col: 20, offset: 73675},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 1989, col: 27, offset: 73682},
												expr: &charClassMatcher{
													pos:        position{line: 1989, col: 27, offset: 73682},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 1993, col: 1, offset: 73758},
			expr: &choiceExpr{
				pos: position{line: 1994, col: 5, offset: 73839},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1994, col: 5, offset: 73839},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 1994, col: 5, offset: 73839},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1994, col: 5, offset: 73839},
									expr: &charClassMatcher{
										pos:        position{line: 1994, col: 5, offset: 73839},
										val:        "[\\pL0-9,?!;]",
										chars:      []rune{',', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1994, col: 19, offset: 73853},
									expr: &choiceExpr{
										pos: position{line: 1994, col: 21, offset: 73855},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1994, col: 21, offset: 73855},
												val:        "[\\r\\n ]",
												chars:      []rune{'\r', '\n', ' '},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 1994, col: 31, offset: 73865},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1996, col: 9, offset: 73934},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 1999, col: 1, offset: 74034},
			expr: &actionExpr{
				pos: position{line: 1999, col: 12, offset: 74045},
				run: (*parser).callonAnyChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1999, col: 12, offset: 74045},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 2003, col: 1, offset: 74110},
			expr: &actionExpr{
				pos: position{line: 2003, col: 17, offset: 74126},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2003, col: 17, offset: 74126},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2003, col: 22, offset: 74131},
						expr: &choiceExpr{
							pos: position{line: 2003, col: 23, offset: 74132},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2003, col: 23, offset: 74132},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 2003, col: 34, offset: 74143},
									name: "AttributeSubstitution",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedFileLocation",
			pos:  position{line: 2007, col: 1, offset: 74227},
			expr: &actionExpr{
				pos: position{line: 2007, col: 25, offset: 74251},
				run: (*parser).callonResolvedFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2007, col: 25, offset: 74251},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2007, col: 30, offset: 74256},
						expr: &charClassMatcher{
							pos:        position{line: 2007, col: 31, offset: 74257},
							val:        "[^\\r\\n []",
							chars:      []rune{'\r', '\n', ' ', '['},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 2011, col: 1, offset: 74329},
			expr: &actionExpr{
				pos: position{line: 2011, col: 13, offset: 74341},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 2011, col: 13, offset: 74341},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2011, col: 13, offset: 74341},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 2011, col: 20, offset: 74348},
								expr: &ruleRefExpr{
									pos:  position{line: 2011, col: 21, offset: 74349},
									name: "URL_SCHEME",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2011, col: 34, offset: 74362},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2011, col: 39, offset: 74367},
								expr: &choiceExpr{
									pos: position{line: 2011, col: 40, offset: 74368},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2011, col: 40, offset: 74368},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 2011, col: 51, offset: 74379},
											name: "AttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 2015, col: 1, offset: 74467},
			expr: &actionExpr{
				pos: position{line: 2015, col: 23, offset: 74489},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 2015, col: 23, offset: 74489},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2015, col: 23, offset: 74489},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2015, col: 31, offset: 74497},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 2015, col: 43, offset: 74509},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2015, col: 48, offset: 74514},
								expr: &choiceExpr{
									pos: position{line: 2015, col: 49, offset: 74515},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2015, col: 49, offset: 74515},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 2015, col: 60, offset: 74526},
											name: "AttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 2019, col: 1, offset: 74614},
			expr: &oneOrMoreExpr{
				pos: position{line: 2019, col: 13, offset: 74626},
				expr: &charClassMatcher{
					pos:        position{line: 2019, col: 14, offset: 74627},
					val:        "[^\\r\\n{}[\\] ]",
					chars:      []rune{'\r', '\n', '{', '}', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "ResolvedLocation",
			pos:  position{line: 2021, col: 1, offset: 74761},
			expr: &actionExpr{
				pos: position{line: 2021, col: 21, offset: 74781},
				run: (*parser).callonResolvedLocation1,
				expr: &seqExpr{
					pos: position{line: 2021, col: 21, offset: 74781},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2021, col: 21, offset: 74781},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2021, col: 29, offset: 74789},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 2021, col: 41, offset: 74801},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 2021, col: 47, offset: 74807},
								name: "RESOLVED_FILENAME",
							},
						},
					},
				},
			},
		},
		{
			name: "RESOLVED_FILENAME",
			pos:  position{line: 2026, col: 1, offset: 75055},
			expr: &oneOrMoreExpr{
				pos: position{line: 2026, col: 22, offset: 75076},
				expr: &charClassMatcher{
					pos:        position{line: 2026, col: 23, offset: 75077},
					val:        "[^\\r\\n[\\] ]",
					chars:      []rune{'\r', '\n', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 2028, col: 1, offset: 75209},
			expr: &actionExpr{
				pos: position{line: 2028, col: 9, offset: 75217},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2028, col: 9, offset: 75217},
					expr: &charClassMatcher{
						pos:        position{line: 2028, col: 9, offset: 75217},
						val:        "[^\\r\\n[\\]]",
						chars:      []rune{'\r', '\n', '[', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 2032, col: 1, offset: 75265},
			expr: &choiceExpr{
				pos: position{line: 2032, col: 15, offset: 75279},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2032, col: 15, offset: 75279},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 2032, col: 27, offset: 75291},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 2032, col: 40, offset: 75304},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 2032, col: 51, offset: 75315},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 2032, col: 62, offset: 75326},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 2034, col: 1, offset: 75337},
			expr: &actionExpr{
				pos: position{line: 2034, col: 7, offset: 75343},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2034, col: 7, offset: 75343},
					expr: &charClassMatcher{
						pos:        position{line: 2034, col: 7, offset: 75343},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 2038, col: 1, offset: 75468},
			expr: &actionExpr{
				pos: position{line: 2038, col: 10, offset: 75477},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 2038, col: 10, offset: 75477},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 2042, col: 1, offset: 75519},
			expr: &actionExpr{
				pos: position{line: 2042, col: 11, offset: 75529},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 2042, col: 11, offset: 75529},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 2042, col: 11, offset: 75529},
							expr: &litMatcher{
								pos:        position{line: 2042, col: 11, offset: 75529},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 2042, col: 16, offset: 75534},
							expr: &ruleRefExpr{
								pos:  position{line: 2042, col: 16, offset: 75534},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 2046, col: 1, offset: 75586},
			expr: &choiceExpr{
				pos: position{line: 2046, col: 10, offset: 75595},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2046, col: 10, offset: 75595},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 2046, col: 16, offset: 75601},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 2046, col: 16, offset: 75601},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 2050, col: 1, offset: 75642},
			expr: &choiceExpr{
				pos: position{line: 2050, col: 12, offset: 75653},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2050, col: 12, offset: 75653},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&litMatcher{
						pos:        position{line: 2050, col: 21, offset: 75662},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
					&litMatcher{
						pos:        position{line: 2050, col: 28, offset: 75669},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 2052, col: 1, offset: 75675},
			expr: &notExpr{
				pos: position{line: 2052, col: 8, offset: 75682},
				expr: &anyMatcher{
					line: 2052, col: 9, offset: 75683,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 2054, col: 1, offset: 75686},
			expr: &choiceExpr{
				pos: position{line: 2054, col: 8, offset: 75693},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2054, col: 8, offset: 75693},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 2054, col: 18, offset: 75703},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onAsciidocDocument1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonAsciidocDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onVerbatimDocument1(blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonVerbatimDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimDocument1(stack["blocks"])
}

func (c *current) onTextDocument1(blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonTextDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocument1(stack["blocks"])
}

func (c *current) onAsciidocDocumentBlocks1(header, others interface{}) (interface{}, error) {
	if header != nil && others != nil {
		return append([]interface{}{header}, others.([]interface{})...), nil
	} else if others != nil {
		return others.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonAsciidocDocumentBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocumentBlocks1(stack["header"], stack["others"])
}

func (c *current) onDocumentBlockWithinDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlockWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlockWithinDelimitedBlock1(stack["block"])
}

func (c *current) onTextDocumentBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonTextDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocumentBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentHeader(title.([]interface{}), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onAttributeDeclaration9(value interface{}) (interface{}, error) {

	return value, nil

}

func (p *parser) callonAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration9(stack["value"])
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	return types.NewAttributeDeclaration(name.(string), value)
}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeName1()
}

func (c *current) onAttributeDeclarationValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1()
}

func (c *current) onAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset11(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset11(stack["name"])
}

func (c *current) onAttributeSubstitution1(name interface{}) (interface{}, error) {
	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubstitution1(stack["name"])
}

func (c *current) onAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {
	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID2(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID2(stack["id"])
}

func (c *current) onElementID11(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID11(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {
	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementTitleContent1() (interface{}, error) {
	// "<" and ">" characters are not allowed as they are used as cross-reference markers
	return string(c.text), nil
}

func (p *parser) callonElementTitleContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitleContent1()
}

func (c *current) onElementRole5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementRole5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole5()
}

func (c *current) onElementRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role.(string))
}

func (p *parser) callonElementRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole1(stack["role"])
}

func (c *current) onLiteralAttribute1() (interface{}, error) {
	return types.NewLiteralAttribute()
}

func (p *parser) callonLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralAttribute1()
}

func (c *current) onPassthroughBlockAttribute1() (interface{}, error) {
	return types.NewPassthroughBlockAttribute()
}

func (p *parser) callonPassthroughBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {
	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes6(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes6(stack["attr"])
}

func (c *current) onSourceAttributes14(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes14(stack["attr"])
}

func (c *current) onSourceAttributes1(language, others interface{}) (interface{}, error) {
	return types.NewSourceAttributes(language, others.([]interface{})...)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["language"], stack["others"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttributeWithValue1(key, value interface{}) (interface{}, error) {
	// value is (optionally) set
	return types.NewGenericAttribute(key.(string), value)
}

func (p *parser) callonGenericAttributeWithValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithValue1(stack["key"], stack["value"])
}

func (c *current) onGenericAttributeWithoutValue1(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.(string), nil)
}

func (p *parser) callonGenericAttributeWithoutValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithoutValue1(stack["key"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onStandaloneAttributeValue1(value interface{}) (interface{}, error) {
	// standalone attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonStandaloneAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributeValue1(stack["value"])
}

func (c *current) onHorizontalLayout1() (interface{}, error) {
	return types.Attributes{"layout": "horizontal"}, nil
}

func (p *parser) callonHorizontalLayout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHorizontalLayout1()
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onInlineAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attrs"])
}

func (c *current) onQuotedTextAttrs1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonQuotedTextAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrs1(stack["attrs"])
}

func (c *current) onQuotedTextAttrRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role.(string))
}

func (p *parser) callonQuotedTextAttrRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrRole1(stack["role"])
}

func (c *current) onStandaloneAttributes1(attributes interface{}) (interface{}, error) {
	// standalone attributes, i.e., with nothing afterwards
	return types.NewAttributes(attributes)
}

func (p *parser) callonStandaloneAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributes1(stack["attributes"])
}

func (c *current) onShortHandAttrOption1(option interface{}) (interface{}, error) {
	return types.NewElementOption(option.(string))
}

func (p *parser) callonShortHandAttrOption1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrOption1(stack["option"])
}

func (c *current) onShortHandAttrID1(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonShortHandAttrID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrID1(stack["id"])
}

func (c *current) onShortHandAttrRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role.(string))
}

func (p *parser) callonShortHandAttrRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrRole1(stack["role"])
}

func (c *current) onShortHandValuePlain1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonShortHandValuePlain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandValuePlain1()
}

func (c *current) onNamedAttr1(key, value interface{}) (interface{}, error) {
	return types.NewElementNamedAttr(key.(string), value.(string))
}

func (p *parser) callonNamedAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttr1(stack["key"], stack["value"])
}

func (c *current) onNamedAttrKey1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonNamedAttrKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrKey1()
}

func (c *current) onAttrValuePlain1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttrValuePlain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValuePlain1()
}

func (c *current) onAttrValueSingleQuoted1() (interface{}, error) {
	return string(c.text[1 : len(c.text)-1]), nil
}

func (p *parser) callonAttrValueSingleQuoted1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueSingleQuoted1()
}

func (c *current) onAttrValueDoubleQuoted1() (interface{}, error) {
	return string(c.text[1 : len(c.text)-1]), nil
}

func (p *parser) callonAttrValueDoubleQuoted1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueDoubleQuoted1()
}

func (c *current) onAttrValueNone1() (interface{}, error) {
	return "", nil
}

func (p *parser) callonAttrValueNone1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueNone1()
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.SingleQuote, elements.([]interface{}))
}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringFallbackCharacter3()
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.DoubleQuote, elements.([]interface{}))
}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringFallbackCharacter1()
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.([]interface{}), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedLineRanges10(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleQuotedLineRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges10(stack["other"])
}

func (c *current) onMultipleQuotedLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onMultiLineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onSingleLineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onTagRangesAttribute1(tags interface{}) (interface{}, error) {
	//TODO: check if 'tags'/'tag' is allowed for both single and multiple values
	return types.NewTagRangesAttribute(tags.([]interface{}))
}

func (p *parser) callonTagRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttribute1(stack["tags"])
}

func (c *current) onTagRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonTagRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onVerbatimFileLine6() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonVerbatimFileLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimFileLine6()
}

func (c *current) onVerbatimFileLine1(content interface{}) (interface{}, error) {
	return types.NewVerbatimFileLine(content.(string))
}

func (p *parser) callonVerbatimFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimFileLine1(stack["content"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {
	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(element interface{}) (interface{}, error) {
	return types.NewContinuedListItemElement(element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["element"])
}

func (c *current) onContinuedListItemContent1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonContinuedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent1(stack["content"])
}

func (c *current) onOrderedListItem1(attributes, prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attributes)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attributes"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attributes, prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attributes)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attributes"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {
	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attributes, term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListItem(len(separator.(string))-1, term.([]interface{}), description, attributes)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attributes"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onVerbatimLabeledListItemTerm3() (interface{}, error) {
	return types.NewStringElement(strings.TrimSpace(string(c.text)))
}

func (p *parser) callonVerbatimLabeledListItemTerm3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm3()
}

func (c *current) onVerbatimLabeledListItemTerm1(content interface{}) (interface{}, error) {
	return types.NewInlineElements(content)
}

func (p *parser) callonVerbatimLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm1(stack["content"])
}

func (c *current) onLabeledListItemTerm1(elements interface{}) (interface{}, error) {
	// rule as an extra entrypoint
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1(stack["elements"])
}

func (c *current) onLabeledListItemTermElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonLabeledListItemTermElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement1(stack["element"])
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil

}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil

}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil

}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil

}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onParagraph13(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.MarkdownQuote, content.([]interface{}), attributes)

}

func (p *parser) callonParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph13(stack["attributes"], stack["content"])
}

func (c *current) onParagraph26(attributes interface{}) (bool, error) {

	// verify that one of the attributes is `passthrough`
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return exists && kind == types.Passthrough, nil
	}
	return false, nil

}

func (p *parser) callonParagraph26() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph26(stack["attributes"])
}

func (c *current) onParagraph21(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)

}

func (p *parser) callonParagraph21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph21(stack["attributes"], stack["content"])
}

func (c *current) onParagraph31(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonParagraph31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph31(stack["attributes"], stack["lines"])
}

func (c *current) onMarkdownQuoteBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonMarkdownQuoteBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockVerbatimContent2(stack["content"])
}

func (c *current) onMarkdownQuoteBlockAttribution5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonMarkdownQuoteBlockAttribution5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockAttribution5()
}

func (c *current) onMarkdownQuoteBlockAttribution1(author interface{}) (interface{}, error) {
	return author, nil
}

func (p *parser) callonMarkdownQuoteBlockAttribution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockAttribution1(stack["author"])
}

func (c *current) onOpenPassthroughParagraphContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonOpenPassthroughParagraphContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenPassthroughParagraphContent2(stack["content"])
}

func (c *current) onSimpleParagraph6(attributes interface{}) (bool, error) {
	// skip if the '[literal]' attribute was set on this paragraph
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return !exists || kind != types.Literal, nil
	}
	return true, nil

}

func (p *parser) callonSimpleParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph6(stack["attributes"])
}

func (c *current) onSimpleParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphLine1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFirstParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphLine1(stack["elements"])
}

func (c *current) onOtherParagraphLine1(elements interface{}) (interface{}, error) {
	return elements, nil
}

func (p *parser) callonOtherParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherParagraphLine1(stack["elements"])
}

func (c *current) onContinuedParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonContinuedParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onContinuedParagraph12(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonContinuedParagraph12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraph12(stack["attributes"], stack["lines"])
}

func (c *current) onContinuedParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {
	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonContinuedParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onVerseParagraph7(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph7(stack["attributes"])
}

func (c *current) onVerseParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonVerseParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onVerseParagraph19(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph19(stack["attributes"])
}

func (c *current) onVerseParagraph14(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonVerseParagraph14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph14(stack["attributes"], stack["lines"])
}

func (c *current) onInlineElements7(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["comment"])
}

func (c *current) onInlineElements10(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements10(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onConstrainedQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonConstrainedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstrainedQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(attrs, elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldText17(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText17(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMarkedText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '##' to emphazise a portion of a word)
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation.
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteMarkedText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))
}

func (p *parser) callonEscapedMarkedText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, attrs, element)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, attrs, element)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), label.(string))
}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), nil)
}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onLinkAttributes1(firstAttr, otherattrs interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(append(firstAttr.([]interface{}), otherattrs.([]interface{})...))
}

func (p *parser) callonLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkAttributes1(stack["firstAttr"], stack["otherattrs"])
}

func (c *current) onFirstLinkAttributeElement4(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement4(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement19(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement19(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonFirstLinkAttributeElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement1(stack["element"])
}

func (c *current) onAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeChar1()
}

func (c *current) onQuotedAttributeChar1() (interface{}, error) {
	// does not exclude comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonQuotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedAttributeChar1()
}

func (c *current) onUnquotedAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonUnquotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeChar1()
}

func (c *current) onInlineLinks1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonInlineLinks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineLinks1(stack["elements"])
}

func (c *current) onResolvedRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonResolvedRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onResolvedExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonResolvedExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewImageBlock(path.(types.Location), inlineAttributes.(types.Attributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onImageAttributes1(alt, width, height, otherattrs interface{}) (interface{}, error) {
	return types.NewImageAttributes(alt, width, height, otherattrs.([]interface{}))
}

func (p *parser) callonImageAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttributes1(stack["alt"], stack["width"], stack["height"], stack["otherattrs"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(iconClass, inlineAttributes interface{}) (interface{}, error) {
	return types.NewIcon(iconClass.(string), inlineAttributes.(types.Attributes))
}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["iconClass"], stack["inlineAttributes"])
}

func (c *current) onIconAttributes1(size, others interface{}) (interface{}, error) {
	return types.NewIconAttributes(size, others.([]interface{}))
}

func (p *parser) callonIconAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIconAttributes1(stack["size"], stack["others"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.([]interface{}))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content)
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onVerbatimLine1(content, callouts interface{}) (interface{}, error) {
	return types.NewVerbatimLine(content.(string), callouts)
}

func (p *parser) callonVerbatimLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLine1(stack["content"], stack["callouts"])
}

func (c *current) onVerbatimLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonVerbatimLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLineContent1()
}

func (c *current) onCallout5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout5()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {
	return types.NewCallout(ref.(int))
}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onCalloutListItem1(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListItem(ref.(int), description.([]interface{}))
}

func (p *parser) callonCalloutListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItem1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListItemPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListItemPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix5()
}

func (c *current) onCalloutListItemPrefix1(ref interface{}) (interface{}, error) {
	return ref, nil
}

func (p *parser) callonCalloutListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix1(stack["ref"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}), attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonFencedBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockVerbatimContent2(stack["content"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Listing, content.([]interface{}), attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonListingBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockVerbatimContent2(stack["content"])
}

func (c *current) onExampleBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Example, content.([]interface{}), attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["content"])
}

func (c *current) onExampleBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonExampleBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockVerbatimContent2(stack["content"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Quote, content.([]interface{}), attributes)
}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockVerbatimElement2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonQuoteBlockVerbatimElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockVerbatimElement2(stack["content"])
}

func (c *current) onVerseBlock5(attributes interface{}) (bool, error) {

	kind, found := attributes.(types.Attributes).GetAsString("kind") // once we got the attributes, check that `[verse]`  was set
	return found && kind == "verse", nil

}

func (p *parser) callonVerseBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock5(stack["attributes"])
}

func (c *current) onVerseBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Verse, content.([]interface{}), attributes)

}

func (p *parser) callonVerseBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock1(stack["attributes"], stack["content"])
}

func (c *current) onVerseBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonVerseBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockVerbatimContent2(stack["content"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}), attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onSidebarBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonSidebarBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockVerbatimContent2(stack["content"])
}

func (c *current) onPassthroughBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)
}

func (p *parser) callonPassthroughBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock1(stack["attributes"], stack["content"])
}

func (c *current) onPassthroughBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonPassthroughBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockVerbatimContent2(stack["content"])
}

func (c *current) onThematicBreak1() (interface{}, error) {
	return types.NewThematicBreak()
}

func (p *parser) callonThematicBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThematicBreak1()
}

func (c *current) onNormalBlockElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonNormalBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalBlockElement1(stack["element"])
}

func (c *current) onVerseBlockElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonVerseBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockElement1(stack["element"])
}

func (c *current) onVerseBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonVerseBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlockParagraphLine1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonVerseBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine1(stack["elements"])
}

func (c *current) onTable1(attributes, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attributes)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attributes"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}), nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonCommentBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockVerbatimContent2(stack["content"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines4()
}

func (c *current) onParagraphWithHeadingSpacesLines18() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines18()
}

func (c *current) onParagraphWithHeadingSpacesLines13(otherLine interface{}) (interface{}, error) {
	return otherLine, nil // do not include the trailing 'EOL'

}

func (p *parser) callonParagraphWithHeadingSpacesLines13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines13(stack["otherLine"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Literal, nil
	}
	return false, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onParagraphWithLiteralAttributeLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralAttributeLine6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine6()
}

func (c *current) onParagraphWithLiteralAttributeLine1(content interface{}) (interface{}, error) {
	return content.(string), nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralAttributeLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine1(stack["content"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent9()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onApostrophe1() (interface{}, error) {
	return types.NewStringElement("\u2019")
}

func (p *parser) callonApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe1()
}

func (c *current) onCopyright1() (interface{}, error) {
	return types.NewStringElement("\u00a9")
}

func (p *parser) callonCopyright1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCopyright1()
}

func (c *current) onTrademark1() (interface{}, error) {
	return types.NewStringElement("\u2122")
}

func (p *parser) callonTrademark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTrademark1()
}

func (c *current) onRegistered1() (interface{}, error) {
	return types.NewStringElement("\u00ae")
}

func (p *parser) callonRegistered1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegistered1()
}

func (c *current) onEllipsis1() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")
}

func (p *parser) callonEllipsis1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEllipsis1()
}

func (c *current) onImpliedApostrophe1() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")
}

func (p *parser) callonImpliedApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImpliedApostrophe1()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2()
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onResolvedFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonResolvedFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onResolvedLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonResolvedLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedLocation1(stack["scheme"], stack["path"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onSpace3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
