// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "AsciidocDocument",
			pos:  position{line: 17, col: 1, offset: 319},
			expr: &actionExpr{
				pos: position{line: 17, col: 21, offset: 339},
				run: (*parser).callonAsciidocDocument1,
				expr: &seqExpr{
					pos: position{line: 17, col: 21, offset: 339},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 21, offset: 339},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 34, offset: 352},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 34, offset: 352},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 48, offset: 366},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 56, offset: 374},
								name: "AsciidocDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 80, offset: 398},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentWithinDelimitedBlock",
			pos:  position{line: 21, col: 1, offset: 478},
			expr: &actionExpr{
				pos: position{line: 21, col: 41, offset: 518},
				run: (*parser).callonAsciidocDocumentWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 21, col: 41, offset: 518},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 21, col: 41, offset: 518},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 21, col: 54, offset: 531},
								expr: &ruleRefExpr{
									pos:  position{line: 21, col: 54, offset: 531},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 21, col: 68, offset: 545},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 21, col: 76, offset: 553},
								name: "AsciidocDocumentBlocksWithinDelimitedBlock",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 120, offset: 597},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "TextDocument",
			pos:  position{line: 25, col: 1, offset: 677},
			expr: &actionExpr{
				pos: position{line: 25, col: 17, offset: 693},
				run: (*parser).callonTextDocument1,
				expr: &seqExpr{
					pos: position{line: 25, col: 17, offset: 693},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 25, col: 17, offset: 693},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 25, col: 25, offset: 701},
								name: "TextDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 25, col: 45, offset: 721},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocks",
			pos:  position{line: 32, col: 1, offset: 904},
			expr: &actionExpr{
				pos: position{line: 32, col: 27, offset: 930},
				run: (*parser).callonAsciidocDocumentBlocks1,
				expr: &seqExpr{
					pos: position{line: 32, col: 27, offset: 930},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 32, col: 27, offset: 930},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 32, col: 35, offset: 938},
								expr: &ruleRefExpr{
									pos:  position{line: 32, col: 35, offset: 938},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 32, col: 52, offset: 955},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 32, col: 60, offset: 963},
								expr: &ruleRefExpr{
									pos:  position{line: 32, col: 60, offset: 963},
									name: "DocumentBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentBlock",
			pos:  position{line: 41, col: 1, offset: 1212},
			expr: &actionExpr{
				pos: position{line: 41, col: 18, offset: 1229},
				run: (*parser).callonDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 41, col: 18, offset: 1229},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 41, col: 18, offset: 1229},
							expr: &ruleRefExpr{
								pos:  position{line: 41, col: 19, offset: 1230},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 42, col: 5, offset: 1239},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 42, col: 12, offset: 1246},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 42, col: 12, offset: 1246},
										name: "SimpleParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 43, col: 11, offset: 1272},
										name: "Section",
									},
									&ruleRefExpr{
										pos:  position{line: 44, col: 11, offset: 1291},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 45, col: 11, offset: 1316},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 46, col: 11, offset: 1340},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 47, col: 11, offset: 1394},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 48, col: 11, offset: 1416},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 49, col: 11, offset: 1435},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 50, col: 11, offset: 1486},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 51, col: 11, offset: 1510},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 52, col: 11, offset: 1550},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 53, col: 11, offset: 1584},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 54, col: 11, offset: 1621},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 55, col: 11, offset: 1646},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocksWithinDelimitedBlock",
			pos:  position{line: 59, col: 1, offset: 1684},
			expr: &labeledExpr{
				pos:   position{line: 59, col: 47, offset: 1730},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 59, col: 54, offset: 1737},
					expr: &ruleRefExpr{
						pos:  position{line: 59, col: 55, offset: 1738},
						name: "DocumentBlockWithinDelimitedBlock",
					},
				},
			},
		},
		{
			name: "DocumentBlockWithinDelimitedBlock",
			pos:  position{line: 61, col: 1, offset: 1775},
			expr: &actionExpr{
				pos: position{line: 61, col: 38, offset: 1812},
				run: (*parser).callonDocumentBlockWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 61, col: 38, offset: 1812},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 61, col: 38, offset: 1812},
							expr: &ruleRefExpr{
								pos:  position{line: 61, col: 39, offset: 1813},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 62, col: 5, offset: 1822},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 62, col: 12, offset: 1829},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 62, col: 12, offset: 1829},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 63, col: 11, offset: 1854},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 64, col: 11, offset: 1878},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 65, col: 11, offset: 1903},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 66, col: 11, offset: 1925},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 67, col: 11, offset: 1944},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 68, col: 11, offset: 1995},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 69, col: 11, offset: 2019},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 70, col: 11, offset: 2059},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 71, col: 11, offset: 2093},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 72, col: 11, offset: 2130},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 73, col: 11, offset: 2155},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextDocumentBlocks",
			pos:  position{line: 77, col: 1, offset: 2193},
			expr: &labeledExpr{
				pos:   position{line: 77, col: 23, offset: 2215},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 77, col: 30, offset: 2222},
					expr: &ruleRefExpr{
						pos:  position{line: 77, col: 31, offset: 2223},
						name: "TextDocumentBlock",
					},
				},
			},
		},
		{
			name: "TextDocumentBlock",
			pos:  position{line: 79, col: 1, offset: 2244},
			expr: &actionExpr{
				pos: position{line: 79, col: 22, offset: 2265},
				run: (*parser).callonTextDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 79, col: 22, offset: 2265},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 79, col: 22, offset: 2265},
							expr: &ruleRefExpr{
								pos:  position{line: 79, col: 23, offset: 2266},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 80, col: 5, offset: 2275},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 80, col: 12, offset: 2282},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 80, col: 12, offset: 2282},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 80, col: 24, offset: 2294},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 87, col: 1, offset: 2440},
			expr: &ruleRefExpr{
				pos:  position{line: 87, col: 16, offset: 2455},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 89, col: 1, offset: 2473},
			expr: &actionExpr{
				pos: position{line: 89, col: 20, offset: 2492},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 89, col: 20, offset: 2492},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 89, col: 20, offset: 2492},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 89, col: 41, offset: 2513},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 89, col: 49, offset: 2521},
								expr: &ruleRefExpr{
									pos:  position{line: 89, col: 50, offset: 2522},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 89, col: 75, offset: 2547},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 93, col: 1, offset: 2627},
			expr: &seqExpr{
				pos: position{line: 93, col: 26, offset: 2652},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 93, col: 26, offset: 2652},
						val:        "---",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 93, col: 32, offset: 2658},
						expr: &ruleRefExpr{
							pos:  position{line: 93, col: 32, offset: 2658},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 93, col: 36, offset: 2662},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 95, col: 1, offset: 2667},
			expr: &actionExpr{
				pos: position{line: 95, col: 27, offset: 2693},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 95, col: 27, offset: 2693},
					expr: &oneOrMoreExpr{
						pos: position{line: 95, col: 28, offset: 2694},
						expr: &seqExpr{
							pos: position{line: 95, col: 29, offset: 2695},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 95, col: 29, offset: 2695},
									expr: &ruleRefExpr{
										pos:  position{line: 95, col: 30, offset: 2696},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 95, col: 51, offset: 2717,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 102, col: 1, offset: 2883},
			expr: &actionExpr{
				pos: position{line: 102, col: 19, offset: 2901},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 102, col: 19, offset: 2901},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 102, col: 19, offset: 2901},
							val:        "=",
							ignoreCase: false,
						},
						&oneOrMoreExpr{
							pos: position{line: 102, col: 23, offset: 2905},
							expr: &ruleRefExpr{
								pos:  position{line: 102, col: 23, offset: 2905},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 102, col: 27, offset: 2909},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 102, col: 34, offset: 2916},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 102, col: 49, offset: 2931},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 102, col: 53, offset: 2935},
								expr: &ruleRefExpr{
									pos:  position{line: 102, col: 53, offset: 2935},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 102, col: 71, offset: 2953},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 103, col: 9, offset: 2965},
							expr: &choiceExpr{
								pos: position{line: 103, col: 10, offset: 2966},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 103, col: 10, offset: 2966},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 103, col: 30, offset: 2986},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 104, col: 9, offset: 3009},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 104, col: 18, offset: 3018},
								expr: &ruleRefExpr{
									pos:  position{line: 104, col: 18, offset: 3018},
									name: "DocumentAuthors",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 105, col: 9, offset: 3045},
							expr: &choiceExpr{
								pos: position{line: 105, col: 10, offset: 3046},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 105, col: 10, offset: 3046},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 105, col: 30, offset: 3066},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 106, col: 9, offset: 3089},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 106, col: 19, offset: 3099},
								expr: &ruleRefExpr{
									pos:  position{line: 106, col: 19, offset: 3099},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 110, col: 1, offset: 3200},
			expr: &choiceExpr{
				pos: position{line: 110, col: 20, offset: 3219},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 110, col: 20, offset: 3219},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 110, col: 48, offset: 3247},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 112, col: 1, offset: 3277},
			expr: &actionExpr{
				pos: position{line: 112, col: 30, offset: 3306},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 112, col: 30, offset: 3306},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 112, col: 30, offset: 3306},
							expr: &ruleRefExpr{
								pos:  position{line: 112, col: 30, offset: 3306},
								name: "WS",
							},
						},
						&notExpr{
							pos: position{line: 112, col: 34, offset: 3310},
							expr: &litMatcher{
								pos:        position{line: 112, col: 35, offset: 3311},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 112, col: 39, offset: 3315},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 112, col: 48, offset: 3324},
								expr: &ruleRefExpr{
									pos:  position{line: 112, col: 48, offset: 3324},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 112, col: 65, offset: 3341},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 116, col: 1, offset: 3411},
			expr: &actionExpr{
				pos: position{line: 116, col: 33, offset: 3443},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 116, col: 33, offset: 3443},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 116, col: 33, offset: 3443},
							expr: &ruleRefExpr{
								pos:  position{line: 116, col: 33, offset: 3443},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 116, col: 37, offset: 3447},
							val:        ":author:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 116, col: 48, offset: 3458},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 116, col: 56, offset: 3466},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 116, col: 72, offset: 3482},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 120, col: 1, offset: 3561},
			expr: &actionExpr{
				pos: position{line: 120, col: 19, offset: 3579},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 120, col: 19, offset: 3579},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 120, col: 19, offset: 3579},
							expr: &ruleRefExpr{
								pos:  position{line: 120, col: 19, offset: 3579},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 120, col: 23, offset: 3583},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 120, col: 33, offset: 3593},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 120, col: 53, offset: 3613},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 120, col: 59, offset: 3619},
								expr: &ruleRefExpr{
									pos:  position{line: 120, col: 60, offset: 3620},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 120, col: 82, offset: 3642},
							expr: &ruleRefExpr{
								pos:  position{line: 120, col: 82, offset: 3642},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 120, col: 86, offset: 3646},
							expr: &litMatcher{
								pos:        position{line: 120, col: 86, offset: 3646},
								val:        ";",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 120, col: 91, offset: 3651},
							expr: &ruleRefExpr{
								pos:  position{line: 120, col: 91, offset: 3651},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 125, col: 1, offset: 3793},
			expr: &actionExpr{
				pos: position{line: 125, col: 23, offset: 3815},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 125, col: 23, offset: 3815},
					expr: &choiceExpr{
						pos: position{line: 125, col: 24, offset: 3816},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 125, col: 24, offset: 3816},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 125, col: 37, offset: 3829},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 125, col: 37, offset: 3829},
										expr: &litMatcher{
											pos:        position{line: 125, col: 38, offset: 3830},
											val:        "<",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 125, col: 42, offset: 3834},
										expr: &litMatcher{
											pos:        position{line: 125, col: 43, offset: 3835},
											val:        ";",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 125, col: 47, offset: 3839},
										expr: &ruleRefExpr{
											pos:  position{line: 125, col: 48, offset: 3840},
											name: "Newline",
										},
									},
									&anyMatcher{
										line: 125, col: 56, offset: 3848,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 129, col: 1, offset: 3889},
			expr: &actionExpr{
				pos: position{line: 129, col: 24, offset: 3912},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 129, col: 24, offset: 3912},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 129, col: 24, offset: 3912},
							val:        "<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 129, col: 28, offset: 3916},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 129, col: 35, offset: 3923},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 129, col: 35, offset: 3923},
									expr: &choiceExpr{
										pos: position{line: 129, col: 36, offset: 3924},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 129, col: 36, offset: 3924},
												name: "Alphanums",
											},
											&seqExpr{
												pos: position{line: 129, col: 49, offset: 3937},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 129, col: 49, offset: 3937},
														expr: &litMatcher{
															pos:        position{line: 129, col: 50, offset: 3938},
															val:        ">",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 129, col: 54, offset: 3942},
														expr: &ruleRefExpr{
															pos:  position{line: 129, col: 55, offset: 3943},
															name: "EOL",
														},
													},
													&anyMatcher{
														line: 129, col: 60, offset: 3948,
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 131, col: 4, offset: 3989},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 137, col: 1, offset: 4150},
			expr: &actionExpr{
				pos: position{line: 137, col: 21, offset: 4170},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 137, col: 21, offset: 4170},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 137, col: 21, offset: 4170},
							expr: &ruleRefExpr{
								pos:  position{line: 137, col: 21, offset: 4170},
								name: "WS",
							},
						},
						&notExpr{
							pos: position{line: 137, col: 25, offset: 4174},
							expr: &litMatcher{
								pos:        position{line: 137, col: 26, offset: 4175},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 137, col: 30, offset: 4179},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 138, col: 9, offset: 4198},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 138, col: 10, offset: 4199},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 138, col: 10, offset: 4199},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 138, col: 10, offset: 4199},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 138, col: 21, offset: 4210},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 138, col: 45, offset: 4234},
													expr: &litMatcher{
														pos:        position{line: 138, col: 45, offset: 4234},
														val:        ",",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 138, col: 50, offset: 4239},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 138, col: 58, offset: 4247},
														expr: &ruleRefExpr{
															pos:  position{line: 138, col: 59, offset: 4248},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 138, col: 82, offset: 4271},
													expr: &litMatcher{
														pos:        position{line: 138, col: 82, offset: 4271},
														val:        ":",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 138, col: 87, offset: 4276},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 138, col: 97, offset: 4286},
														expr: &ruleRefExpr{
															pos:  position{line: 138, col: 98, offset: 4287},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 140, col: 15, offset: 4404},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 140, col: 15, offset: 4404},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 140, col: 15, offset: 4404},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 140, col: 24, offset: 4413},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 140, col: 46, offset: 4435},
													expr: &litMatcher{
														pos:        position{line: 140, col: 46, offset: 4435},
														val:        ":",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 140, col: 51, offset: 4440},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 140, col: 61, offset: 4450},
														expr: &ruleRefExpr{
															pos:  position{line: 140, col: 62, offset: 4451},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 142, col: 13, offset: 4560},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 147, col: 1, offset: 4690},
			expr: &choiceExpr{
				pos: position{line: 147, col: 27, offset: 4716},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 147, col: 27, offset: 4716},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 147, col: 27, offset: 4716},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 147, col: 27, offset: 4716},
									val:        "v",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 147, col: 32, offset: 4721},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 147, col: 39, offset: 4728},
									expr: &choiceExpr{
										pos: position{line: 147, col: 40, offset: 4729},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 147, col: 40, offset: 4729},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 147, col: 52, offset: 4741},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 147, col: 62, offset: 4751},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 147, col: 62, offset: 4751},
														expr: &ruleRefExpr{
															pos:  position{line: 147, col: 63, offset: 4752},
															name: "EOL",
														},
													},
													&notExpr{
														pos: position{line: 147, col: 67, offset: 4756},
														expr: &litMatcher{
															pos:        position{line: 147, col: 68, offset: 4757},
															val:        ",",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 147, col: 72, offset: 4761},
														expr: &litMatcher{
															pos:        position{line: 147, col: 73, offset: 4762},
															val:        ":",
															ignoreCase: false,
														},
													},
													&anyMatcher{
														line: 147, col: 78, offset: 4767,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 149, col: 5, offset: 4809},
						run: (*parser).callonDocumentRevisionNumber18,
						expr: &seqExpr{
							pos: position{line: 149, col: 5, offset: 4809},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 149, col: 5, offset: 4809},
									expr: &litMatcher{
										pos:        position{line: 149, col: 5, offset: 4809},
										val:        "v",
										ignoreCase: true,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 149, col: 11, offset: 4815},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 149, col: 18, offset: 4822},
									expr: &choiceExpr{
										pos: position{line: 149, col: 19, offset: 4823},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 149, col: 19, offset: 4823},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 149, col: 31, offset: 4835},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 149, col: 41, offset: 4845},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 149, col: 41, offset: 4845},
														expr: &ruleRefExpr{
															pos:  position{line: 149, col: 42, offset: 4846},
															name: "EOL",
														},
													},
													&notExpr{
														pos: position{line: 149, col: 46, offset: 4850},
														expr: &litMatcher{
															pos:        position{line: 149, col: 47, offset: 4851},
															val:        ",",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 149, col: 51, offset: 4855},
														expr: &litMatcher{
															pos:        position{line: 149, col: 52, offset: 4856},
															val:        ":",
															ignoreCase: false,
														},
													},
													&anyMatcher{
														line: 149, col: 57, offset: 4861,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 149, col: 62, offset: 4866},
									expr: &ruleRefExpr{
										pos:  position{line: 149, col: 62, offset: 4866},
										name: "WS",
									},
								},
								&andExpr{
									pos: position{line: 149, col: 66, offset: 4870},
									expr: &litMatcher{
										pos:        position{line: 149, col: 67, offset: 4871},
										val:        ",",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 153, col: 1, offset: 4911},
			expr: &actionExpr{
				pos: position{line: 153, col: 25, offset: 4935},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 153, col: 25, offset: 4935},
					expr: &choiceExpr{
						pos: position{line: 153, col: 26, offset: 4936},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 153, col: 26, offset: 4936},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 153, col: 38, offset: 4948},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 153, col: 48, offset: 4958},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 153, col: 48, offset: 4958},
										expr: &ruleRefExpr{
											pos:  position{line: 153, col: 49, offset: 4959},
											name: "EOL",
										},
									},
									&notExpr{
										pos: position{line: 153, col: 53, offset: 4963},
										expr: &litMatcher{
											pos:        position{line: 153, col: 54, offset: 4964},
											val:        ":",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 153, col: 59, offset: 4969,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 157, col: 1, offset: 5010},
			expr: &actionExpr{
				pos: position{line: 157, col: 27, offset: 5036},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 157, col: 27, offset: 5036},
					expr: &choiceExpr{
						pos: position{line: 157, col: 28, offset: 5037},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 157, col: 28, offset: 5037},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 157, col: 40, offset: 5049},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 157, col: 50, offset: 5059},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 157, col: 50, offset: 5059},
										expr: &ruleRefExpr{
											pos:  position{line: 157, col: 51, offset: 5060},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 157, col: 56, offset: 5065,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeDeclaration",
			pos:  position{line: 164, col: 1, offset: 5221},
			expr: &actionExpr{
				pos: position{line: 164, col: 33, offset: 5253},
				run: (*parser).callonDocumentAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 164, col: 33, offset: 5253},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 164, col: 33, offset: 5253},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 164, col: 37, offset: 5257},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 164, col: 43, offset: 5263},
								name: "DocumentAttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 164, col: 66, offset: 5286},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 164, col: 70, offset: 5290},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 164, col: 76, offset: 5296},
								expr: &actionExpr{
									pos: position{line: 164, col: 77, offset: 5297},
									run: (*parser).callonDocumentAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 164, col: 78, offset: 5298},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 164, col: 78, offset: 5298},
												expr: &ruleRefExpr{
													pos:  position{line: 164, col: 78, offset: 5298},
													name: "WS",
												},
											},
											&labeledExpr{
												pos:   position{line: 164, col: 82, offset: 5302},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 164, col: 89, offset: 5309},
													name: "DocumentAttributeValue",
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 164, col: 138, offset: 5358},
							expr: &ruleRefExpr{
								pos:  position{line: 164, col: 138, offset: 5358},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 164, col: 142, offset: 5362},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeName",
			pos:  position{line: 171, col: 1, offset: 5610},
			expr: &actionExpr{
				pos: position{line: 171, col: 26, offset: 5635},
				run: (*parser).callonDocumentAttributeName1,
				expr: &seqExpr{
					pos: position{line: 171, col: 26, offset: 5635},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 171, col: 27, offset: 5636},
							alternatives: []interface{}{
								&charClassMatcher{
									pos:        position{line: 171, col: 27, offset: 5636},
									val:        "[A-Z]",
									ranges:     []rune{'A', 'Z'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 171, col: 35, offset: 5644},
									val:        "[a-z]",
									ranges:     []rune{'a', 'z'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 171, col: 43, offset: 5652},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 171, col: 51, offset: 5660},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 171, col: 56, offset: 5665},
							expr: &choiceExpr{
								pos: position{line: 171, col: 57, offset: 5666},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 171, col: 57, offset: 5666},
										val:        "[A-Z]",
										ranges:     []rune{'A', 'Z'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 171, col: 65, offset: 5674},
										val:        "[a-z]",
										ranges:     []rune{'a', 'z'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 171, col: 73, offset: 5682},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
									&litMatcher{
										pos:        position{line: 171, col: 81, offset: 5690},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeValue",
			pos:  position{line: 175, col: 1, offset: 5732},
			expr: &actionExpr{
				pos: position{line: 175, col: 27, offset: 5758},
				run: (*parser).callonDocumentAttributeValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 175, col: 27, offset: 5758},
					expr: &seqExpr{
						pos: position{line: 175, col: 28, offset: 5759},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 175, col: 28, offset: 5759},
								expr: &ruleRefExpr{
									pos:  position{line: 175, col: 29, offset: 5760},
									name: "Newline",
								},
							},
							&anyMatcher{
								line: 175, col: 37, offset: 5768,
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeReset",
			pos:  position{line: 179, col: 1, offset: 5808},
			expr: &choiceExpr{
				pos: position{line: 179, col: 27, offset: 5834},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 179, col: 27, offset: 5834},
						run: (*parser).callonDocumentAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 179, col: 27, offset: 5834},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 179, col: 27, offset: 5834},
									val:        ":!",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 179, col: 32, offset: 5839},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 179, col: 38, offset: 5845},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 179, col: 61, offset: 5868},
									val:        ":",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 179, col: 65, offset: 5872},
									expr: &ruleRefExpr{
										pos:  position{line: 179, col: 65, offset: 5872},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 179, col: 69, offset: 5876},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 181, col: 5, offset: 5944},
						run: (*parser).callonDocumentAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 181, col: 5, offset: 5944},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 181, col: 5, offset: 5944},
									val:        ":",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 181, col: 9, offset: 5948},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 181, col: 15, offset: 5954},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 181, col: 38, offset: 5977},
									val:        "!:",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 181, col: 43, offset: 5982},
									expr: &ruleRefExpr{
										pos:  position{line: 181, col: 43, offset: 5982},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 181, col: 47, offset: 5986},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeSubstitution",
			pos:  position{line: 185, col: 1, offset: 6053},
			expr: &actionExpr{
				pos: position{line: 185, col: 34, offset: 6086},
				run: (*parser).callonDocumentAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 185, col: 34, offset: 6086},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 185, col: 34, offset: 6086},
							val:        "{",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 185, col: 38, offset: 6090},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 185, col: 44, offset: 6096},
								name: "DocumentAttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 185, col: 67, offset: 6119},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ElementAttributes",
			pos:  position{line: 192, col: 1, offset: 6307},
			expr: &actionExpr{
				pos: position{line: 192, col: 22, offset: 6328},
				run: (*parser).callonElementAttributes1,
				expr: &seqExpr{
					pos: position{line: 192, col: 22, offset: 6328},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 192, col: 22, offset: 6328},
							label: "attrs",
							expr: &oneOrMoreExpr{
								pos: position{line: 192, col: 28, offset: 6334},
								expr: &ruleRefExpr{
									pos:  position{line: 192, col: 29, offset: 6335},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 192, col: 48, offset: 6354},
							expr: &ruleRefExpr{
								pos:  position{line: 192, col: 48, offset: 6354},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 196, col: 1, offset: 6436},
			expr: &actionExpr{
				pos: position{line: 196, col: 21, offset: 6456},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 196, col: 21, offset: 6456},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 196, col: 21, offset: 6456},
							expr: &choiceExpr{
								pos: position{line: 196, col: 23, offset: 6458},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 196, col: 23, offset: 6458},
										val:        "[",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 196, col: 29, offset: 6464},
										val:        ".",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 196, col: 35, offset: 6470},
										val:        "#",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 197, col: 5, offset: 6546},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 197, col: 11, offset: 6552},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 197, col: 11, offset: 6552},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 198, col: 9, offset: 6573},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 199, col: 9, offset: 6597},
										name: "ElementRole",
									},
									&ruleRefExpr{
										pos:  position{line: 200, col: 9, offset: 6620},
										name: "LiteralAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 201, col: 9, offset: 6648},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 202, col: 9, offset: 6676},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 203, col: 9, offset: 6703},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 204, col: 9, offset: 6730},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 205, col: 9, offset: 6767},
										name: "HorizontalLayout",
									},
									&ruleRefExpr{
										pos:  position{line: 206, col: 9, offset: 6795},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MasqueradeAttribute",
			pos:  position{line: 211, col: 1, offset: 6978},
			expr: &choiceExpr{
				pos: position{line: 211, col: 24, offset: 7001},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 211, col: 24, offset: 7001},
						name: "QuoteAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 211, col: 42, offset: 7019},
						name: "VerseAttributes",
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 213, col: 1, offset: 7036},
			expr: &choiceExpr{
				pos: position{line: 213, col: 14, offset: 7049},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 213, col: 14, offset: 7049},
						run: (*parser).callonElementID2,
						expr: &seqExpr{
							pos: position{line: 213, col: 14, offset: 7049},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 213, col: 14, offset: 7049},
									val:        "[[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 213, col: 19, offset: 7054},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 213, col: 23, offset: 7058},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 213, col: 27, offset: 7062},
									val:        "]]",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 213, col: 32, offset: 7067},
									expr: &ruleRefExpr{
										pos:  position{line: 213, col: 32, offset: 7067},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 213, col: 36, offset: 7071},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 215, col: 5, offset: 7124},
						run: (*parser).callonElementID11,
						expr: &seqExpr{
							pos: position{line: 215, col: 5, offset: 7124},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 215, col: 5, offset: 7124},
									val:        "[#",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 215, col: 10, offset: 7129},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 215, col: 14, offset: 7133},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 215, col: 18, offset: 7137},
									val:        "]",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 215, col: 23, offset: 7142},
									expr: &ruleRefExpr{
										pos:  position{line: 215, col: 23, offset: 7142},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 215, col: 27, offset: 7146},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 219, col: 1, offset: 7198},
			expr: &actionExpr{
				pos: position{line: 219, col: 20, offset: 7217},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 219, col: 20, offset: 7217},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 219, col: 20, offset: 7217},
							val:        "[[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 219, col: 25, offset: 7222},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 219, col: 29, offset: 7226},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 219, col: 33, offset: 7230},
							val:        "]]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 219, col: 38, offset: 7235},
							expr: &ruleRefExpr{
								pos:  position{line: 219, col: 38, offset: 7235},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 225, col: 1, offset: 7509},
			expr: &actionExpr{
				pos: position{line: 225, col: 17, offset: 7525},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 225, col: 17, offset: 7525},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 225, col: 17, offset: 7525},
							val:        ".",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 225, col: 21, offset: 7529},
							label: "title",
							expr: &actionExpr{
								pos: position{line: 225, col: 28, offset: 7536},
								run: (*parser).callonElementTitle5,
								expr: &seqExpr{
									pos: position{line: 225, col: 28, offset: 7536},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 225, col: 28, offset: 7536},
											name: "Alphanums",
										},
										&zeroOrMoreExpr{
											pos: position{line: 225, col: 38, offset: 7546},
											expr: &choiceExpr{
												pos: position{line: 225, col: 39, offset: 7547},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 225, col: 39, offset: 7547},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 225, col: 51, offset: 7559},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 225, col: 61, offset: 7569},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 225, col: 61, offset: 7569},
																expr: &ruleRefExpr{
																	pos:  position{line: 225, col: 62, offset: 7570},
																	name: "Newline",
																},
															},
															&anyMatcher{
																line: 225, col: 70, offset: 7578,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 227, col: 4, offset: 7619},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementRole",
			pos:  position{line: 233, col: 1, offset: 7771},
			expr: &actionExpr{
				pos: position{line: 233, col: 16, offset: 7786},
				run: (*parser).callonElementRole1,
				expr: &seqExpr{
					pos: position{line: 233, col: 16, offset: 7786},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 233, col: 16, offset: 7786},
							val:        "[.",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 233, col: 21, offset: 7791},
							label: "role",
							expr: &actionExpr{
								pos: position{line: 233, col: 27, offset: 7797},
								run: (*parser).callonElementRole5,
								expr: &seqExpr{
									pos: position{line: 233, col: 27, offset: 7797},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 233, col: 27, offset: 7797},
											name: "Alphanums",
										},
										&zeroOrMoreExpr{
											pos: position{line: 233, col: 37, offset: 7807},
											expr: &choiceExpr{
												pos: position{line: 233, col: 38, offset: 7808},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 233, col: 38, offset: 7808},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 233, col: 50, offset: 7820},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 233, col: 60, offset: 7830},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 233, col: 60, offset: 7830},
																expr: &ruleRefExpr{
																	pos:  position{line: 233, col: 61, offset: 7831},
																	name: "Newline",
																},
															},
															&notExpr{
																pos: position{line: 233, col: 69, offset: 7839},
																expr: &litMatcher{
																	pos:        position{line: 233, col: 70, offset: 7840},
																	val:        "]",
																	ignoreCase: false,
																},
															},
															&anyMatcher{
																line: 233, col: 74, offset: 7844,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 235, col: 4, offset: 7885},
							val:        "]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 235, col: 8, offset: 7889},
							expr: &ruleRefExpr{
								pos:  position{line: 235, col: 8, offset: 7889},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 235, col: 12, offset: 7893},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "LiteralAttribute",
			pos:  position{line: 239, col: 1, offset: 7949},
			expr: &actionExpr{
				pos: position{line: 239, col: 21, offset: 7969},
				run: (*parser).callonLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 239, col: 21, offset: 7969},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 239, col: 21, offset: 7969},
							val:        "[literal]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 239, col: 33, offset: 7981},
							expr: &ruleRefExpr{
								pos:  position{line: 239, col: 33, offset: 7981},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 239, col: 37, offset: 7985},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 244, col: 1, offset: 8117},
			expr: &actionExpr{
				pos: position{line: 244, col: 30, offset: 8146},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 244, col: 30, offset: 8146},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 244, col: 30, offset: 8146},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 244, col: 34, offset: 8150},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 244, col: 37, offset: 8153},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 244, col: 53, offset: 8169},
							val:        "]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 244, col: 57, offset: 8173},
							expr: &ruleRefExpr{
								pos:  position{line: 244, col: 57, offset: 8173},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 244, col: 61, offset: 8177},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 249, col: 1, offset: 8332},
			expr: &actionExpr{
				pos: position{line: 249, col: 21, offset: 8352},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 249, col: 21, offset: 8352},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 249, col: 21, offset: 8352},
							val:        "[source",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 250, col: 5, offset: 8367},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 250, col: 14, offset: 8376},
								expr: &actionExpr{
									pos: position{line: 250, col: 15, offset: 8377},
									run: (*parser).callonSourceAttributes6,
									expr: &seqExpr{
										pos: position{line: 250, col: 15, offset: 8377},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 250, col: 15, offset: 8377},
												val:        ",",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 250, col: 19, offset: 8381},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 250, col: 24, offset: 8386},
													expr: &ruleRefExpr{
														pos:  position{line: 250, col: 25, offset: 8387},
														name: "StandaloneAttributeValue",
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 251, col: 5, offset: 8442},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 251, col: 12, offset: 8449},
								expr: &actionExpr{
									pos: position{line: 251, col: 13, offset: 8450},
									run: (*parser).callonSourceAttributes14,
									expr: &seqExpr{
										pos: position{line: 251, col: 13, offset: 8450},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 251, col: 13, offset: 8450},
												val:        ",",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 251, col: 17, offset: 8454},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 251, col: 22, offset: 8459},
													expr: &ruleRefExpr{
														pos:  position{line: 251, col: 23, offset: 8460},
														name: "GenericAttribute",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 252, col: 5, offset: 8507},
							val:        "]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 252, col: 9, offset: 8511},
							expr: &ruleRefExpr{
								pos:  position{line: 252, col: 9, offset: 8511},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 252, col: 13, offset: 8515},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 257, col: 1, offset: 8666},
			expr: &actionExpr{
				pos: position{line: 257, col: 19, offset: 8684},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 257, col: 19, offset: 8684},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 257, col: 19, offset: 8684},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 257, col: 23, offset: 8688},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 257, col: 34, offset: 8699},
								expr: &ruleRefExpr{
									pos:  position{line: 257, col: 35, offset: 8700},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 257, col: 54, offset: 8719},
							val:        "]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 257, col: 58, offset: 8723},
							expr: &ruleRefExpr{
								pos:  position{line: 257, col: 58, offset: 8723},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 257, col: 62, offset: 8727},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 261, col: 1, offset: 8799},
			expr: &choiceExpr{
				pos: position{line: 261, col: 21, offset: 8819},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 261, col: 21, offset: 8819},
						name: "GenericAttributeWithValue",
					},
					&ruleRefExpr{
						pos:  position{line: 261, col: 49, offset: 8847},
						name: "GenericAttributeWithoutValue",
					},
				},
			},
		},
		{
			name: "GenericAttributeWithValue",
			pos:  position{line: 263, col: 1, offset: 8877},
			expr: &actionExpr{
				pos: position{line: 263, col: 30, offset: 8906},
				run: (*parser).callonGenericAttributeWithValue1,
				expr: &seqExpr{
					pos: position{line: 263, col: 30, offset: 8906},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 263, col: 30, offset: 8906},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 263, col: 35, offset: 8911},
								name: "AttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 263, col: 49, offset: 8925},
							val:        "=",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 263, col: 53, offset: 8929},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 263, col: 59, offset: 8935},
								expr: &ruleRefExpr{
									pos:  position{line: 263, col: 60, offset: 8936},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 263, col: 77, offset: 8953},
							expr: &litMatcher{
								pos:        position{line: 263, col: 77, offset: 8953},
								val:        ",",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 263, col: 82, offset: 8958},
							expr: &ruleRefExpr{
								pos:  position{line: 263, col: 82, offset: 8958},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "GenericAttributeWithoutValue",
			pos:  position{line: 267, col: 1, offset: 9054},
			expr: &actionExpr{
				pos: position{line: 267, col: 33, offset: 9086},
				run: (*parser).callonGenericAttributeWithoutValue1,
				expr: &seqExpr{
					pos: position{line: 267, col: 33, offset: 9086},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 267, col: 33, offset: 9086},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 267, col: 38, offset: 9091},
								name: "AttributeKey",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 267, col: 52, offset: 9105},
							expr: &litMatcher{
								pos:        position{line: 267, col: 52, offset: 9105},
								val:        ",",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 267, col: 57, offset: 9110},
							expr: &ruleRefExpr{
								pos:  position{line: 267, col: 57, offset: 9110},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 271, col: 1, offset: 9195},
			expr: &actionExpr{
				pos: position{line: 271, col: 17, offset: 9211},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 271, col: 17, offset: 9211},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 271, col: 17, offset: 9211},
							expr: &litMatcher{
								pos:        position{line: 271, col: 18, offset: 9212},
								val:        "quote",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 271, col: 26, offset: 9220},
							expr: &litMatcher{
								pos:        position{line: 271, col: 27, offset: 9221},
								val:        "verse",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 271, col: 35, offset: 9229},
							expr: &litMatcher{
								pos:        position{line: 271, col: 36, offset: 9230},
								val:        "literal",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 271, col: 46, offset: 9240},
							expr: &ruleRefExpr{
								pos:  position{line: 271, col: 47, offset: 9241},
								name: "Spaces",
							},
						},
						&labeledExpr{
							pos:   position{line: 271, col: 54, offset: 9248},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 271, col: 58, offset: 9252},
								expr: &choiceExpr{
									pos: position{line: 271, col: 59, offset: 9253},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 271, col: 59, offset: 9253},
											name: "Alphanums",
										},
										&ruleRefExpr{
											pos:  position{line: 271, col: 71, offset: 9265},
											name: "OtherAttributeChar",
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 271, col: 92, offset: 9286},
							expr: &ruleRefExpr{
								pos:  position{line: 271, col: 92, offset: 9286},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 275, col: 1, offset: 9326},
			expr: &actionExpr{
				pos: position{line: 275, col: 19, offset: 9344},
				run: (*parser).callonAttributeValue1,
				expr: &labeledExpr{
					pos:   position{line: 275, col: 19, offset: 9344},
					label: "value",
					expr: &oneOrMoreExpr{
						pos: position{line: 275, col: 25, offset: 9350},
						expr: &choiceExpr{
							pos: position{line: 275, col: 26, offset: 9351},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 275, col: 26, offset: 9351},
									name: "Alphanums",
								},
								&ruleRefExpr{
									pos:  position{line: 275, col: 38, offset: 9363},
									name: "Spaces",
								},
								&ruleRefExpr{
									pos:  position{line: 275, col: 47, offset: 9372},
									name: "OtherAttributeChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributeValue",
			pos:  position{line: 279, col: 1, offset: 9430},
			expr: &actionExpr{
				pos: position{line: 279, col: 29, offset: 9458},
				run: (*parser).callonStandaloneAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 279, col: 29, offset: 9458},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 279, col: 29, offset: 9458},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 279, col: 35, offset: 9464},
								expr: &choiceExpr{
									pos: position{line: 279, col: 36, offset: 9465},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 279, col: 36, offset: 9465},
											name: "Alphanums",
										},
										&ruleRefExpr{
											pos:  position{line: 279, col: 48, offset: 9477},
											name: "Spaces",
										},
										&ruleRefExpr{
											pos:  position{line: 279, col: 57, offset: 9486},
											name: "OtherAttributeChar",
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 279, col: 78, offset: 9507},
							expr: &litMatcher{
								pos:        position{line: 279, col: 79, offset: 9508},
								val:        "=",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "OtherAttributeChar",
			pos:  position{line: 283, col: 1, offset: 9674},
			expr: &seqExpr{
				pos: position{line: 283, col: 24, offset: 9697},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 283, col: 24, offset: 9697},
						expr: &ruleRefExpr{
							pos:  position{line: 283, col: 25, offset: 9698},
							name: "Newline",
						},
					},
					&notExpr{
						pos: position{line: 283, col: 33, offset: 9706},
						expr: &litMatcher{
							pos:        position{line: 283, col: 34, offset: 9707},
							val:        "=",
							ignoreCase: false,
						},
					},
					&notExpr{
						pos: position{line: 283, col: 38, offset: 9711},
						expr: &litMatcher{
							pos:        position{line: 283, col: 39, offset: 9712},
							val:        ",",
							ignoreCase: false,
						},
					},
					&notExpr{
						pos: position{line: 283, col: 43, offset: 9716},
						expr: &litMatcher{
							pos:        position{line: 283, col: 44, offset: 9717},
							val:        "]",
							ignoreCase: false,
						},
					},
					&anyMatcher{
						line: 283, col: 48, offset: 9721,
					},
				},
			},
		},
		{
			name: "HorizontalLayout",
			pos:  position{line: 285, col: 1, offset: 9725},
			expr: &actionExpr{
				pos: position{line: 285, col: 21, offset: 9745},
				run: (*parser).callonHorizontalLayout1,
				expr: &seqExpr{
					pos: position{line: 285, col: 21, offset: 9745},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 285, col: 21, offset: 9745},
							val:        "[horizontal]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 285, col: 36, offset: 9760},
							expr: &ruleRefExpr{
								pos:  position{line: 285, col: 36, offset: 9760},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 285, col: 40, offset: 9764},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 289, col: 1, offset: 9837},
			expr: &actionExpr{
				pos: position{line: 289, col: 20, offset: 9856},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 289, col: 20, offset: 9856},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 289, col: 20, offset: 9856},
							val:        "[quote",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 289, col: 29, offset: 9865},
							expr: &ruleRefExpr{
								pos:  position{line: 289, col: 29, offset: 9865},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 289, col: 33, offset: 9869},
							expr: &litMatcher{
								pos:        position{line: 289, col: 33, offset: 9869},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 289, col: 38, offset: 9874},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 289, col: 45, offset: 9881},
								expr: &ruleRefExpr{
									pos:  position{line: 289, col: 46, offset: 9882},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 289, col: 63, offset: 9899},
							expr: &litMatcher{
								pos:        position{line: 289, col: 63, offset: 9899},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 289, col: 68, offset: 9904},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 289, col: 74, offset: 9910},
								expr: &ruleRefExpr{
									pos:  position{line: 289, col: 75, offset: 9911},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 289, col: 92, offset: 9928},
							val:        "]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 289, col: 96, offset: 9932},
							expr: &ruleRefExpr{
								pos:  position{line: 289, col: 96, offset: 9932},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 289, col: 100, offset: 9936},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 293, col: 1, offset: 10005},
			expr: &actionExpr{
				pos: position{line: 293, col: 20, offset: 10024},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 293, col: 20, offset: 10024},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 293, col: 20, offset: 10024},
							val:        "[verse",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 293, col: 29, offset: 10033},
							expr: &ruleRefExpr{
								pos:  position{line: 293, col: 29, offset: 10033},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 293, col: 33, offset: 10037},
							expr: &litMatcher{
								pos:        position{line: 293, col: 33, offset: 10037},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 293, col: 38, offset: 10042},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 293, col: 45, offset: 10049},
								expr: &ruleRefExpr{
									pos:  position{line: 293, col: 46, offset: 10050},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 293, col: 63, offset: 10067},
							expr: &litMatcher{
								pos:        position{line: 293, col: 63, offset: 10067},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 293, col: 68, offset: 10072},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 293, col: 74, offset: 10078},
								expr: &ruleRefExpr{
									pos:  position{line: 293, col: 75, offset: 10079},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 293, col: 92, offset: 10096},
							val:        "]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 293, col: 96, offset: 10100},
							expr: &ruleRefExpr{
								pos:  position{line: 293, col: 96, offset: 10100},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 293, col: 100, offset: 10104},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 297, col: 1, offset: 10191},
			expr: &actionExpr{
				pos: position{line: 297, col: 19, offset: 10209},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 297, col: 19, offset: 10209},
					expr: &choiceExpr{
						pos: position{line: 297, col: 20, offset: 10210},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 297, col: 20, offset: 10210},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 297, col: 32, offset: 10222},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 297, col: 42, offset: 10232},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 297, col: 42, offset: 10232},
										expr: &litMatcher{
											pos:        position{line: 297, col: 43, offset: 10233},
											val:        ",",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 297, col: 47, offset: 10237},
										expr: &litMatcher{
											pos:        position{line: 297, col: 48, offset: 10238},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 297, col: 52, offset: 10242},
										expr: &ruleRefExpr{
											pos:  position{line: 297, col: 53, offset: 10243},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 297, col: 57, offset: 10247,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 301, col: 1, offset: 10288},
			expr: &actionExpr{
				pos: position{line: 301, col: 21, offset: 10308},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 301, col: 21, offset: 10308},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 301, col: 21, offset: 10308},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 301, col: 25, offset: 10312},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 301, col: 31, offset: 10318},
								expr: &ruleRefExpr{
									pos:  position{line: 301, col: 32, offset: 10319},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 301, col: 51, offset: 10338},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 308, col: 1, offset: 10512},
			expr: &actionExpr{
				pos: position{line: 308, col: 12, offset: 10523},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 308, col: 12, offset: 10523},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 308, col: 12, offset: 10523},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 308, col: 23, offset: 10534},
								expr: &ruleRefExpr{
									pos:  position{line: 308, col: 24, offset: 10535},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 309, col: 5, offset: 10559},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 309, col: 12, offset: 10566},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 309, col: 12, offset: 10566},
									expr: &litMatcher{
										pos:        position{line: 309, col: 13, offset: 10567},
										val:        "=",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 313, col: 5, offset: 10658},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 317, col: 5, offset: 10810},
							expr: &ruleRefExpr{
								pos:  position{line: 317, col: 5, offset: 10810},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 317, col: 9, offset: 10814},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 317, col: 16, offset: 10821},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 317, col: 31, offset: 10836},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 317, col: 35, offset: 10840},
								expr: &ruleRefExpr{
									pos:  position{line: 317, col: 35, offset: 10840},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 317, col: 53, offset: 10858},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 321, col: 1, offset: 10964},
			expr: &actionExpr{
				pos: position{line: 321, col: 18, offset: 10981},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 321, col: 18, offset: 10981},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 321, col: 27, offset: 10990},
						expr: &seqExpr{
							pos: position{line: 321, col: 28, offset: 10991},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 321, col: 28, offset: 10991},
									expr: &ruleRefExpr{
										pos:  position{line: 321, col: 29, offset: 10992},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 321, col: 37, offset: 11000},
									expr: &ruleRefExpr{
										pos:  position{line: 321, col: 38, offset: 11001},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 321, col: 54, offset: 11017},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 325, col: 1, offset: 11138},
			expr: &actionExpr{
				pos: position{line: 325, col: 17, offset: 11154},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 325, col: 17, offset: 11154},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 325, col: 26, offset: 11163},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 325, col: 26, offset: 11163},
								name: "SimpleWord",
							},
							&ruleRefExpr{
								pos:  position{line: 326, col: 11, offset: 11184},
								name: "Spaces",
							},
							&ruleRefExpr{
								pos:  position{line: 327, col: 11, offset: 11202},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 328, col: 11, offset: 11227},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 329, col: 11, offset: 11249},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 330, col: 11, offset: 11272},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 331, col: 11, offset: 11287},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 332, col: 11, offset: 11312},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 333, col: 11, offset: 11333},
								name: "DocumentAttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 334, col: 11, offset: 11373},
								name: "LineBreak",
							},
							&ruleRefExpr{
								pos:  position{line: 335, col: 11, offset: 11393},
								name: "Parenthesis",
							},
							&ruleRefExpr{
								pos:  position{line: 336, col: 11, offset: 11415},
								name: "AnyChars",
							},
							&ruleRefExpr{
								pos:  position{line: 337, col: 11, offset: 11434},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsPlaceHolder",
			pos:  position{line: 344, col: 1, offset: 11586},
			expr: &seqExpr{
				pos: position{line: 344, col: 31, offset: 11616},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 344, col: 31, offset: 11616},
						val:        "toc::[]",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 344, col: 41, offset: 11626},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 349, col: 1, offset: 11737},
			expr: &actionExpr{
				pos: position{line: 349, col: 19, offset: 11755},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 349, col: 19, offset: 11755},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 349, col: 19, offset: 11755},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 349, col: 25, offset: 11761},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 349, col: 40, offset: 11776},
							val:        "::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 349, col: 45, offset: 11781},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 349, col: 52, offset: 11788},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 349, col: 68, offset: 11804},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 349, col: 75, offset: 11811},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 353, col: 1, offset: 11952},
			expr: &actionExpr{
				pos: position{line: 353, col: 20, offset: 11971},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 353, col: 20, offset: 11971},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 353, col: 20, offset: 11971},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 353, col: 26, offset: 11977},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 353, col: 41, offset: 11992},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 353, col: 45, offset: 11996},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 353, col: 52, offset: 12003},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 353, col: 68, offset: 12019},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 353, col: 75, offset: 12026},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 357, col: 1, offset: 12168},
			expr: &actionExpr{
				pos: position{line: 357, col: 18, offset: 12185},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 357, col: 18, offset: 12185},
					expr: &choiceExpr{
						pos: position{line: 357, col: 19, offset: 12186},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 357, col: 19, offset: 12186},
								val:        "[a-zA-Z0-9]",
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
							&litMatcher{
								pos:        position{line: 357, col: 33, offset: 12200},
								val:        "_",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 357, col: 39, offset: 12206},
								val:        "-",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 361, col: 1, offset: 12248},
			expr: &actionExpr{
				pos: position{line: 361, col: 19, offset: 12266},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 361, col: 19, offset: 12266},
					expr: &choiceExpr{
						pos: position{line: 361, col: 20, offset: 12267},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 361, col: 20, offset: 12267},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 361, col: 33, offset: 12280},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 361, col: 33, offset: 12280},
										expr: &ruleRefExpr{
											pos:  position{line: 361, col: 34, offset: 12281},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 361, col: 37, offset: 12284},
										expr: &litMatcher{
											pos:        position{line: 361, col: 38, offset: 12285},
											val:        ":",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 361, col: 42, offset: 12289},
										expr: &litMatcher{
											pos:        position{line: 361, col: 43, offset: 12290},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 361, col: 47, offset: 12294},
										expr: &ruleRefExpr{
											pos:  position{line: 361, col: 48, offset: 12295},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 361, col: 52, offset: 12299,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 365, col: 1, offset: 12340},
			expr: &actionExpr{
				pos: position{line: 365, col: 24, offset: 12363},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 365, col: 24, offset: 12363},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 365, col: 24, offset: 12363},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 365, col: 28, offset: 12367},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 365, col: 34, offset: 12373},
								expr: &ruleRefExpr{
									pos:  position{line: 365, col: 35, offset: 12374},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 365, col: 54, offset: 12393},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 372, col: 1, offset: 12573},
			expr: &actionExpr{
				pos: position{line: 372, col: 18, offset: 12590},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 372, col: 18, offset: 12590},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 372, col: 18, offset: 12590},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 372, col: 24, offset: 12596},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 372, col: 24, offset: 12596},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 372, col: 24, offset: 12596},
											val:        "include::",
											ignoreCase: false,
										},
										&labeledExpr{
											pos:   position{line: 372, col: 36, offset: 12608},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 372, col: 42, offset: 12614},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 372, col: 56, offset: 12628},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 372, col: 74, offset: 12646},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 374, col: 8, offset: 12800},
							expr: &ruleRefExpr{
								pos:  position{line: 374, col: 8, offset: 12800},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 374, col: 12, offset: 12804},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 378, col: 1, offset: 12856},
			expr: &actionExpr{
				pos: position{line: 378, col: 26, offset: 12881},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 378, col: 26, offset: 12881},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 378, col: 26, offset: 12881},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 378, col: 30, offset: 12885},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 378, col: 36, offset: 12891},
								expr: &choiceExpr{
									pos: position{line: 378, col: 37, offset: 12892},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 378, col: 37, offset: 12892},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 378, col: 59, offset: 12914},
											name: "TagRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 378, col: 80, offset: 12935},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 378, col: 99, offset: 12954},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 382, col: 1, offset: 13024},
			expr: &actionExpr{
				pos: position{line: 382, col: 24, offset: 13047},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 382, col: 24, offset: 13047},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 382, col: 24, offset: 13047},
							val:        "lines=",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 382, col: 33, offset: 13056},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 382, col: 40, offset: 13063},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 382, col: 66, offset: 13089},
							expr: &litMatcher{
								pos:        position{line: 382, col: 66, offset: 13089},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 386, col: 1, offset: 13148},
			expr: &actionExpr{
				pos: position{line: 386, col: 29, offset: 13176},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 386, col: 29, offset: 13176},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 386, col: 29, offset: 13176},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 386, col: 36, offset: 13183},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 386, col: 36, offset: 13183},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 387, col: 11, offset: 13300},
										name: "MultipleQuotedLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 388, col: 11, offset: 13336},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 389, col: 11, offset: 13362},
										name: "MultiLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 390, col: 11, offset: 13394},
										name: "SingleLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 391, col: 11, offset: 13426},
										name: "SingleLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 392, col: 11, offset: 13453},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 392, col: 31, offset: 13473},
							expr: &ruleRefExpr{
								pos:  position{line: 392, col: 31, offset: 13473},
								name: "WS",
							},
						},
						&choiceExpr{
							pos: position{line: 392, col: 36, offset: 13478},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 392, col: 36, offset: 13478},
									expr: &litMatcher{
										pos:        position{line: 392, col: 37, offset: 13479},
										val:        ",",
										ignoreCase: false,
									},
								},
								&andExpr{
									pos: position{line: 392, col: 43, offset: 13485},
									expr: &litMatcher{
										pos:        position{line: 392, col: 44, offset: 13486},
										val:        "]",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 396, col: 1, offset: 13518},
			expr: &actionExpr{
				pos: position{line: 396, col: 23, offset: 13540},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 396, col: 23, offset: 13540},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 396, col: 23, offset: 13540},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 396, col: 30, offset: 13547},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 396, col: 30, offset: 13547},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 396, col: 47, offset: 13564},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 397, col: 5, offset: 13586},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 397, col: 12, offset: 13593},
								expr: &actionExpr{
									pos: position{line: 397, col: 13, offset: 13594},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 397, col: 13, offset: 13594},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 397, col: 13, offset: 13594},
												val:        ";",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 397, col: 17, offset: 13598},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 397, col: 24, offset: 13605},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 397, col: 24, offset: 13605},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 397, col: 41, offset: 13622},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedLineRanges",
			pos:  position{line: 403, col: 1, offset: 13760},
			expr: &actionExpr{
				pos: position{line: 403, col: 29, offset: 13788},
				run: (*parser).callonMultipleQuotedLineRanges1,
				expr: &seqExpr{
					pos: position{line: 403, col: 29, offset: 13788},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 403, col: 29, offset: 13788},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 403, col: 34, offset: 13793},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 403, col: 41, offset: 13800},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 403, col: 41, offset: 13800},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 403, col: 58, offset: 13817},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 404, col: 5, offset: 13839},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 404, col: 12, offset: 13846},
								expr: &actionExpr{
									pos: position{line: 404, col: 13, offset: 13847},
									run: (*parser).callonMultipleQuotedLineRanges10,
									expr: &seqExpr{
										pos: position{line: 404, col: 13, offset: 13847},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 404, col: 13, offset: 13847},
												val:        ",",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 404, col: 17, offset: 13851},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 404, col: 24, offset: 13858},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 404, col: 24, offset: 13858},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 404, col: 41, offset: 13875},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 406, col: 9, offset: 13928},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 410, col: 1, offset: 14018},
			expr: &actionExpr{
				pos: position{line: 410, col: 19, offset: 14036},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 410, col: 19, offset: 14036},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 410, col: 19, offset: 14036},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 410, col: 26, offset: 14043},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 410, col: 34, offset: 14051},
							val:        "..",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 410, col: 39, offset: 14056},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 410, col: 44, offset: 14061},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineQuotedRange",
			pos:  position{line: 414, col: 1, offset: 14149},
			expr: &actionExpr{
				pos: position{line: 414, col: 25, offset: 14173},
				run: (*parser).callonMultiLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 414, col: 25, offset: 14173},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 414, col: 25, offset: 14173},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 414, col: 30, offset: 14178},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 414, col: 37, offset: 14185},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 414, col: 45, offset: 14193},
							val:        "..",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 414, col: 50, offset: 14198},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 414, col: 55, offset: 14203},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 414, col: 63, offset: 14211},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 418, col: 1, offset: 14296},
			expr: &actionExpr{
				pos: position{line: 418, col: 20, offset: 14315},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 418, col: 20, offset: 14315},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 418, col: 32, offset: 14327},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SingleLineQuotedRange",
			pos:  position{line: 422, col: 1, offset: 14422},
			expr: &actionExpr{
				pos: position{line: 422, col: 26, offset: 14447},
				run: (*parser).callonSingleLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 422, col: 26, offset: 14447},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 422, col: 26, offset: 14447},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 422, col: 31, offset: 14452},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 422, col: 43, offset: 14464},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 422, col: 51, offset: 14472},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 426, col: 1, offset: 14564},
			expr: &actionExpr{
				pos: position{line: 426, col: 23, offset: 14586},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 426, col: 23, offset: 14586},
					expr: &seqExpr{
						pos: position{line: 426, col: 24, offset: 14587},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 426, col: 24, offset: 14587},
								expr: &litMatcher{
									pos:        position{line: 426, col: 25, offset: 14588},
									val:        "]",
									ignoreCase: false,
								},
							},
							&notExpr{
								pos: position{line: 426, col: 29, offset: 14592},
								expr: &litMatcher{
									pos:        position{line: 426, col: 30, offset: 14593},
									val:        ",",
									ignoreCase: false,
								},
							},
							&notExpr{
								pos: position{line: 426, col: 34, offset: 14597},
								expr: &ruleRefExpr{
									pos:  position{line: 426, col: 35, offset: 14598},
									name: "WS",
								},
							},
							&anyMatcher{
								line: 426, col: 38, offset: 14601,
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttribute",
			pos:  position{line: 430, col: 1, offset: 14641},
			expr: &actionExpr{
				pos: position{line: 430, col: 23, offset: 14663},
				run: (*parser).callonTagRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 430, col: 23, offset: 14663},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 430, col: 24, offset: 14664},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 430, col: 24, offset: 14664},
									val:        "tags=",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 430, col: 34, offset: 14674},
									val:        "tag=",
									ignoreCase: false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 430, col: 42, offset: 14682},
							label: "tags",
							expr: &ruleRefExpr{
								pos:  position{line: 430, col: 48, offset: 14688},
								name: "TagRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 430, col: 73, offset: 14713},
							expr: &litMatcher{
								pos:        position{line: 430, col: 73, offset: 14713},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttributeValue",
			pos:  position{line: 434, col: 1, offset: 14862},
			expr: &actionExpr{
				pos: position{line: 434, col: 28, offset: 14889},
				run: (*parser).callonTagRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 434, col: 28, offset: 14889},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 434, col: 28, offset: 14889},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 434, col: 35, offset: 14896},
								name: "MultipleTagRanges",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 434, col: 54, offset: 14915},
							expr: &ruleRefExpr{
								pos:  position{line: 434, col: 54, offset: 14915},
								name: "WS",
							},
						},
						&choiceExpr{
							pos: position{line: 434, col: 59, offset: 14920},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 434, col: 59, offset: 14920},
									expr: &litMatcher{
										pos:        position{line: 434, col: 60, offset: 14921},
										val:        ",",
										ignoreCase: false,
									},
								},
								&andExpr{
									pos: position{line: 434, col: 66, offset: 14927},
									expr: &litMatcher{
										pos:        position{line: 434, col: 67, offset: 14928},
										val:        "]",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 438, col: 1, offset: 14960},
			expr: &actionExpr{
				pos: position{line: 438, col: 22, offset: 14981},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 438, col: 22, offset: 14981},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 438, col: 22, offset: 14981},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 438, col: 29, offset: 14988},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 439, col: 5, offset: 15002},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 439, col: 12, offset: 15009},
								expr: &actionExpr{
									pos: position{line: 439, col: 13, offset: 15010},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 439, col: 13, offset: 15010},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 439, col: 13, offset: 15010},
												val:        ";",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 439, col: 17, offset: 15014},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 439, col: 24, offset: 15021},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 445, col: 1, offset: 15152},
			expr: &choiceExpr{
				pos: position{line: 445, col: 13, offset: 15164},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 445, col: 13, offset: 15164},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 445, col: 13, offset: 15164},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 445, col: 18, offset: 15169},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 445, col: 18, offset: 15169},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 445, col: 30, offset: 15181},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 447, col: 5, offset: 15249},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 447, col: 5, offset: 15249},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 447, col: 5, offset: 15249},
									val:        "!",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 447, col: 9, offset: 15253},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 447, col: 14, offset: 15258},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 447, col: 14, offset: 15258},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 447, col: 26, offset: 15270},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 451, col: 1, offset: 15338},
			expr: &actionExpr{
				pos: position{line: 451, col: 16, offset: 15353},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 451, col: 16, offset: 15353},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 451, col: 16, offset: 15353},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 451, col: 23, offset: 15360},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 451, col: 23, offset: 15360},
									expr: &litMatcher{
										pos:        position{line: 451, col: 24, offset: 15361},
										val:        "*",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 454, col: 5, offset: 15415},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 464, col: 1, offset: 15709},
			expr: &actionExpr{
				pos: position{line: 464, col: 21, offset: 15729},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 464, col: 21, offset: 15729},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 464, col: 21, offset: 15729},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 464, col: 29, offset: 15737},
								expr: &choiceExpr{
									pos: position{line: 464, col: 30, offset: 15738},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 464, col: 30, offset: 15738},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 464, col: 53, offset: 15761},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 464, col: 74, offset: 15782},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 464, col: 74, offset: 15782,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 464, col: 107, offset: 15815},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 468, col: 1, offset: 15886},
			expr: &actionExpr{
				pos: position{line: 468, col: 25, offset: 15910},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 468, col: 25, offset: 15910},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 468, col: 25, offset: 15910},
							val:        "tag::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 468, col: 33, offset: 15918},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 468, col: 38, offset: 15923},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 468, col: 38, offset: 15923},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 468, col: 78, offset: 15963},
							val:        "[]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 472, col: 1, offset: 16028},
			expr: &actionExpr{
				pos: position{line: 472, col: 23, offset: 16050},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 472, col: 23, offset: 16050},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 472, col: 23, offset: 16050},
							val:        "end::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 472, col: 31, offset: 16058},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 472, col: 36, offset: 16063},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 472, col: 36, offset: 16063},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 472, col: 76, offset: 16103},
							val:        "[]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ListItems",
			pos:  position{line: 479, col: 1, offset: 16267},
			expr: &oneOrMoreExpr{
				pos: position{line: 479, col: 14, offset: 16280},
				expr: &ruleRefExpr{
					pos:  position{line: 479, col: 14, offset: 16280},
					name: "ListItem",
				},
			},
		},
		{
			name: "ListItem",
			pos:  position{line: 481, col: 1, offset: 16291},
			expr: &choiceExpr{
				pos: position{line: 481, col: 13, offset: 16303},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 481, col: 13, offset: 16303},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 481, col: 31, offset: 16321},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 481, col: 51, offset: 16341},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 481, col: 69, offset: 16359},
						name: "ContinuedListItemElement",
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 483, col: 1, offset: 16385},
			expr: &choiceExpr{
				pos: position{line: 483, col: 18, offset: 16402},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 483, col: 18, offset: 16402},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 483, col: 18, offset: 16402},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 483, col: 27, offset: 16411},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 485, col: 9, offset: 16468},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 485, col: 9, offset: 16468},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 485, col: 15, offset: 16474},
								expr: &ruleRefExpr{
									pos:  position{line: 485, col: 16, offset: 16475},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 489, col: 1, offset: 16567},
			expr: &actionExpr{
				pos: position{line: 489, col: 22, offset: 16588},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 489, col: 22, offset: 16588},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 489, col: 22, offset: 16588},
							expr: &ruleRefExpr{
								pos:  position{line: 489, col: 23, offset: 16589},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 490, col: 5, offset: 16597},
							expr: &ruleRefExpr{
								pos:  position{line: 490, col: 6, offset: 16598},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 491, col: 5, offset: 16613},
							expr: &ruleRefExpr{
								pos:  position{line: 491, col: 6, offset: 16614},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 492, col: 5, offset: 16636},
							expr: &ruleRefExpr{
								pos:  position{line: 492, col: 6, offset: 16637},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 493, col: 5, offset: 16663},
							expr: &ruleRefExpr{
								pos:  position{line: 493, col: 6, offset: 16664},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 494, col: 5, offset: 16692},
							expr: &ruleRefExpr{
								pos:  position{line: 494, col: 6, offset: 16693},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 495, col: 5, offset: 16718},
							expr: &ruleRefExpr{
								pos:  position{line: 495, col: 6, offset: 16719},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 496, col: 5, offset: 16740},
							expr: &ruleRefExpr{
								pos:  position{line: 496, col: 6, offset: 16741},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 497, col: 5, offset: 16760},
							expr: &seqExpr{
								pos: position{line: 497, col: 7, offset: 16762},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 497, col: 7, offset: 16762},
										name: "SimpleLabeledListItemTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 497, col: 33, offset: 16788},
										name: "LabeledListItemSeparator",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 498, col: 5, offset: 16819},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 499, col: 9, offset: 16834},
								run: (*parser).callonListParagraphLine24,
								expr: &seqExpr{
									pos: position{line: 499, col: 9, offset: 16834},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 499, col: 9, offset: 16834},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 499, col: 18, offset: 16843},
												expr: &ruleRefExpr{
													pos:  position{line: 499, col: 19, offset: 16844},
													name: "InlineElement",
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 499, col: 35, offset: 16860},
											label: "linebreak",
											expr: &zeroOrOneExpr{
												pos: position{line: 499, col: 45, offset: 16870},
												expr: &ruleRefExpr{
													pos:  position{line: 499, col: 46, offset: 16871},
													name: "LineBreak",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 501, col: 12, offset: 17023},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 505, col: 1, offset: 17070},
			expr: &seqExpr{
				pos: position{line: 505, col: 25, offset: 17094},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 505, col: 25, offset: 17094},
						val:        "+",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 505, col: 29, offset: 17098},
						expr: &ruleRefExpr{
							pos:  position{line: 505, col: 29, offset: 17098},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 505, col: 33, offset: 17102},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 507, col: 1, offset: 17108},
			expr: &actionExpr{
				pos: position{line: 507, col: 29, offset: 17136},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 507, col: 29, offset: 17136},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 507, col: 29, offset: 17136},
							label: "blanklines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 507, col: 41, offset: 17148},
								expr: &ruleRefExpr{
									pos:  position{line: 507, col: 41, offset: 17148},
									name: "BlankLine",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 507, col: 53, offset: 17160},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 507, col: 74, offset: 17181},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 507, col: 82, offset: 17189},
								name: "ContinuedListItemBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedListItemBlock",
			pos:  position{line: 511, col: 1, offset: 17327},
			expr: &actionExpr{
				pos: position{line: 511, col: 27, offset: 17353},
				run: (*parser).callonContinuedListItemBlock1,
				expr: &seqExpr{
					pos: position{line: 511, col: 27, offset: 17353},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 511, col: 27, offset: 17353},
							expr: &ruleRefExpr{
								pos:  position{line: 511, col: 28, offset: 17354},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 512, col: 5, offset: 17363},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 512, col: 12, offset: 17370},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 512, col: 12, offset: 17370},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 513, col: 11, offset: 17395},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 514, col: 11, offset: 17419},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 515, col: 11, offset: 17473},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 516, col: 11, offset: 17495},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 517, col: 11, offset: 17514},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 518, col: 11, offset: 17565},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 519, col: 11, offset: 17589},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 520, col: 11, offset: 17629},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 521, col: 11, offset: 17663},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 522, col: 11, offset: 17700},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 523, col: 11, offset: 17725},
										name: "ContinuedParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 530, col: 1, offset: 17886},
			expr: &actionExpr{
				pos: position{line: 530, col: 20, offset: 17905},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 530, col: 20, offset: 17905},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 530, col: 20, offset: 17905},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 530, col: 31, offset: 17916},
								expr: &ruleRefExpr{
									pos:  position{line: 530, col: 32, offset: 17917},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 530, col: 52, offset: 17937},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 530, col: 60, offset: 17945},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 530, col: 83, offset: 17968},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 530, col: 92, offset: 17977},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 534, col: 1, offset: 18117},
			expr: &actionExpr{
				pos: position{line: 535, col: 5, offset: 18147},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 535, col: 5, offset: 18147},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 535, col: 5, offset: 18147},
							expr: &ruleRefExpr{
								pos:  position{line: 535, col: 5, offset: 18147},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 535, col: 9, offset: 18151},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 537, col: 9, offset: 18214},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 537, col: 9, offset: 18214},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 537, col: 9, offset: 18214},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 537, col: 9, offset: 18214},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 537, col: 16, offset: 18221},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 537, col: 16, offset: 18221},
															expr: &litMatcher{
																pos:        position{line: 537, col: 17, offset: 18222},
																val:        ".",
																ignoreCase: false,
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 541, col: 9, offset: 18322},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 560, col: 11, offset: 19039},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 560, col: 11, offset: 19039},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 560, col: 11, offset: 19039},
													expr: &charClassMatcher{
														pos:        position{line: 560, col: 12, offset: 19040},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 560, col: 20, offset: 19048},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 562, col: 13, offset: 19159},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 562, col: 13, offset: 19159},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 562, col: 14, offset: 19160},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 562, col: 21, offset: 19167},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 564, col: 13, offset: 19281},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 564, col: 13, offset: 19281},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 564, col: 14, offset: 19282},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 564, col: 21, offset: 19289},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 566, col: 13, offset: 19403},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 566, col: 13, offset: 19403},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 566, col: 13, offset: 19403},
													expr: &charClassMatcher{
														pos:        position{line: 566, col: 14, offset: 19404},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 566, col: 22, offset: 19412},
													val:        ")",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 568, col: 13, offset: 19526},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 568, col: 13, offset: 19526},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 568, col: 13, offset: 19526},
													expr: &charClassMatcher{
														pos:        position{line: 568, col: 14, offset: 19527},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 568, col: 22, offset: 19535},
													val:        ")",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 570, col: 12, offset: 19648},
							expr: &ruleRefExpr{
								pos:  position{line: 570, col: 12, offset: 19648},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 574, col: 1, offset: 19680},
			expr: &actionExpr{
				pos: position{line: 574, col: 27, offset: 19706},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 574, col: 27, offset: 19706},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 574, col: 37, offset: 19716},
						expr: &ruleRefExpr{
							pos:  position{line: 574, col: 37, offset: 19716},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 581, col: 1, offset: 19916},
			expr: &actionExpr{
				pos: position{line: 581, col: 22, offset: 19937},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 581, col: 22, offset: 19937},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 581, col: 22, offset: 19937},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 581, col: 33, offset: 19948},
								expr: &ruleRefExpr{
									pos:  position{line: 581, col: 34, offset: 19949},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 581, col: 54, offset: 19969},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 581, col: 62, offset: 19977},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 581, col: 87, offset: 20002},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 581, col: 98, offset: 20013},
								expr: &ruleRefExpr{
									pos:  position{line: 581, col: 99, offset: 20014},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 581, col: 129, offset: 20044},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 581, col: 138, offset: 20053},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 585, col: 1, offset: 20211},
			expr: &actionExpr{
				pos: position{line: 586, col: 5, offset: 20243},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 586, col: 5, offset: 20243},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 586, col: 5, offset: 20243},
							expr: &ruleRefExpr{
								pos:  position{line: 586, col: 5, offset: 20243},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 586, col: 9, offset: 20247},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 586, col: 17, offset: 20255},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 588, col: 9, offset: 20312},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 588, col: 9, offset: 20312},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 588, col: 9, offset: 20312},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 588, col: 16, offset: 20319},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 588, col: 16, offset: 20319},
															expr: &litMatcher{
																pos:        position{line: 588, col: 17, offset: 20320},
																val:        "*",
																ignoreCase: false,
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 592, col: 9, offset: 20420},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 609, col: 14, offset: 21127},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 609, col: 21, offset: 21134},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 609, col: 22, offset: 21135},
												val:        "-",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 611, col: 13, offset: 21221},
							expr: &ruleRefExpr{
								pos:  position{line: 611, col: 13, offset: 21221},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 615, col: 1, offset: 21254},
			expr: &actionExpr{
				pos: position{line: 615, col: 32, offset: 21285},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 615, col: 32, offset: 21285},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 615, col: 32, offset: 21285},
							expr: &litMatcher{
								pos:        position{line: 615, col: 33, offset: 21286},
								val:        "[",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 615, col: 37, offset: 21290},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 616, col: 7, offset: 21304},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 616, col: 7, offset: 21304},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 616, col: 7, offset: 21304},
											val:        "[ ]",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 617, col: 7, offset: 21349},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 617, col: 7, offset: 21349},
											val:        "[*]",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 618, col: 7, offset: 21392},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 618, col: 7, offset: 21392},
											val:        "[x]",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 619, col: 7, offset: 21434},
							expr: &ruleRefExpr{
								pos:  position{line: 619, col: 7, offset: 21434},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 623, col: 1, offset: 21473},
			expr: &actionExpr{
				pos: position{line: 623, col: 29, offset: 21501},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 623, col: 29, offset: 21501},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 623, col: 39, offset: 21511},
						expr: &ruleRefExpr{
							pos:  position{line: 623, col: 39, offset: 21511},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 630, col: 1, offset: 21827},
			expr: &actionExpr{
				pos: position{line: 630, col: 20, offset: 21846},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 630, col: 20, offset: 21846},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 630, col: 20, offset: 21846},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 630, col: 31, offset: 21857},
								expr: &ruleRefExpr{
									pos:  position{line: 630, col: 32, offset: 21858},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 630, col: 52, offset: 21878},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 630, col: 58, offset: 21884},
								name: "SimpleLabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 630, col: 85, offset: 21911},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 630, col: 96, offset: 21922},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 630, col: 122, offset: 21948},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 630, col: 134, offset: 21960},
								expr: &ruleRefExpr{
									pos:  position{line: 630, col: 135, offset: 21961},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SimpleLabeledListItemTerm",
			pos:  position{line: 634, col: 1, offset: 22107},
			expr: &actionExpr{
				pos: position{line: 634, col: 30, offset: 22136},
				run: (*parser).callonSimpleLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 634, col: 30, offset: 22136},
					label: "content",
					expr: &actionExpr{
						pos: position{line: 634, col: 39, offset: 22145},
						run: (*parser).callonSimpleLabeledListItemTerm3,
						expr: &oneOrMoreExpr{
							pos: position{line: 634, col: 39, offset: 22145},
							expr: &choiceExpr{
								pos: position{line: 634, col: 40, offset: 22146},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 634, col: 40, offset: 22146},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 634, col: 52, offset: 22158},
										name: "Spaces",
									},
									&seqExpr{
										pos: position{line: 634, col: 62, offset: 22168},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 634, col: 62, offset: 22168},
												expr: &ruleRefExpr{
													pos:  position{line: 634, col: 63, offset: 22169},
													name: "Newline",
												},
											},
											&notExpr{
												pos: position{line: 634, col: 71, offset: 22177},
												expr: &ruleRefExpr{
													pos:  position{line: 634, col: 72, offset: 22178},
													name: "LabeledListItemSeparator",
												},
											},
											&anyMatcher{
												line: 634, col: 97, offset: 22203,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 640, col: 1, offset: 22332},
			expr: &actionExpr{
				pos: position{line: 640, col: 24, offset: 22355},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 640, col: 24, offset: 22355},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 640, col: 33, offset: 22364},
						expr: &seqExpr{
							pos: position{line: 640, col: 34, offset: 22365},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 640, col: 34, offset: 22365},
									expr: &ruleRefExpr{
										pos:  position{line: 640, col: 35, offset: 22366},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 640, col: 43, offset: 22374},
									expr: &ruleRefExpr{
										pos:  position{line: 640, col: 44, offset: 22375},
										name: "LabeledListItemSeparator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 640, col: 69, offset: 22400},
									name: "LabeledListItemTermElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTermElement",
			pos:  position{line: 644, col: 1, offset: 22535},
			expr: &actionExpr{
				pos: position{line: 644, col: 31, offset: 22565},
				run: (*parser).callonLabeledListItemTermElement1,
				expr: &labeledExpr{
					pos:   position{line: 644, col: 31, offset: 22565},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 644, col: 40, offset: 22574},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 644, col: 40, offset: 22574},
								name: "SimpleWord",
							},
							&ruleRefExpr{
								pos:  position{line: 645, col: 11, offset: 22595},
								name: "Spaces",
							},
							&ruleRefExpr{
								pos:  position{line: 646, col: 11, offset: 22613},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 647, col: 11, offset: 22638},
								name: "ConcealedIndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 648, col: 11, offset: 22667},
								name: "IndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 649, col: 11, offset: 22687},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 650, col: 11, offset: 22709},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 651, col: 11, offset: 22732},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 652, col: 11, offset: 22747},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 653, col: 11, offset: 22772},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 654, col: 11, offset: 22793},
								name: "DocumentAttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 655, col: 11, offset: 22833},
								name: "LineBreak",
							},
							&ruleRefExpr{
								pos:  position{line: 656, col: 11, offset: 22853},
								name: "Parenthesis",
							},
							&ruleRefExpr{
								pos:  position{line: 657, col: 11, offset: 22875},
								name: "AnyChars",
							},
							&ruleRefExpr{
								pos:  position{line: 658, col: 11, offset: 22894},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 662, col: 1, offset: 22933},
			expr: &actionExpr{
				pos: position{line: 663, col: 5, offset: 22966},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 663, col: 5, offset: 22966},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 663, col: 5, offset: 22966},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 663, col: 16, offset: 22977},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 663, col: 16, offset: 22977},
									expr: &litMatcher{
										pos:        position{line: 663, col: 17, offset: 22978},
										val:        ":",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 666, col: 5, offset: 23036},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 670, col: 6, offset: 23212},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 670, col: 6, offset: 23212},
									expr: &choiceExpr{
										pos: position{line: 670, col: 7, offset: 23213},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 670, col: 7, offset: 23213},
												name: "WS",
											},
											&ruleRefExpr{
												pos:  position{line: 670, col: 12, offset: 23218},
												name: "Newline",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 670, col: 24, offset: 23230},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 674, col: 1, offset: 23270},
			expr: &actionExpr{
				pos: position{line: 674, col: 31, offset: 23300},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 674, col: 31, offset: 23300},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 674, col: 40, offset: 23309},
						expr: &ruleRefExpr{
							pos:  position{line: 674, col: 41, offset: 23310},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 681, col: 1, offset: 23501},
			expr: &choiceExpr{
				pos: position{line: 681, col: 19, offset: 23519},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 681, col: 19, offset: 23519},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 681, col: 19, offset: 23519},
							val:        "TIP",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 683, col: 9, offset: 23565},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 683, col: 9, offset: 23565},
							val:        "NOTE",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 685, col: 9, offset: 23613},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 685, col: 9, offset: 23613},
							val:        "IMPORTANT",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 687, col: 9, offset: 23671},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 687, col: 9, offset: 23671},
							val:        "WARNING",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 689, col: 9, offset: 23725},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 689, col: 9, offset: 23725},
							val:        "CAUTION",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 698, col: 1, offset: 24032},
			expr: &choiceExpr{
				pos: position{line: 700, col: 5, offset: 24079},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 700, col: 5, offset: 24079},
						run: (*parser).callonParagraph2,
						expr: &seqExpr{
							pos: position{line: 700, col: 5, offset: 24079},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 700, col: 5, offset: 24079},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 700, col: 16, offset: 24090},
										expr: &ruleRefExpr{
											pos:  position{line: 700, col: 17, offset: 24091},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 700, col: 37, offset: 24111},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 700, col: 40, offset: 24114},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 700, col: 56, offset: 24130},
									val:        ": ",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 700, col: 61, offset: 24135},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 700, col: 67, offset: 24141},
										expr: &ruleRefExpr{
											pos:  position{line: 700, col: 68, offset: 24142},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 704, col: 5, offset: 24334},
						run: (*parser).callonParagraph13,
						expr: &seqExpr{
							pos: position{line: 704, col: 5, offset: 24334},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 704, col: 5, offset: 24334},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 704, col: 16, offset: 24345},
										expr: &ruleRefExpr{
											pos:  position{line: 704, col: 17, offset: 24346},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 704, col: 37, offset: 24366},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 704, col: 43, offset: 24372},
										expr: &ruleRefExpr{
											pos:  position{line: 704, col: 44, offset: 24373},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SimpleParagraph",
			pos:  position{line: 709, col: 1, offset: 24538},
			expr: &actionExpr{
				pos: position{line: 709, col: 20, offset: 24557},
				run: (*parser).callonSimpleParagraph1,
				expr: &seqExpr{
					pos: position{line: 709, col: 20, offset: 24557},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 709, col: 20, offset: 24557},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 709, col: 31, offset: 24568},
								expr: &ruleRefExpr{
									pos:  position{line: 709, col: 32, offset: 24569},
									name: "ElementAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 710, col: 5, offset: 24594},
							run: (*parser).callonSimpleParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 718, col: 5, offset: 24885},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 718, col: 16, offset: 24896},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 719, col: 5, offset: 24919},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 719, col: 16, offset: 24930},
								expr: &ruleRefExpr{
									pos:  position{line: 719, col: 17, offset: 24931},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedParagraph",
			pos:  position{line: 724, col: 1, offset: 25139},
			expr: &choiceExpr{
				pos: position{line: 726, col: 5, offset: 25195},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 726, col: 5, offset: 25195},
						run: (*parser).callonContinuedParagraph2,
						expr: &seqExpr{
							pos: position{line: 726, col: 5, offset: 25195},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 726, col: 5, offset: 25195},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 726, col: 16, offset: 25206},
										expr: &ruleRefExpr{
											pos:  position{line: 726, col: 17, offset: 25207},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 726, col: 37, offset: 25227},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 726, col: 40, offset: 25230},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 726, col: 56, offset: 25246},
									val:        ": ",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 726, col: 61, offset: 25251},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 726, col: 68, offset: 25258},
										name: "ContinuedParagraphLines",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 730, col: 5, offset: 25458},
						run: (*parser).callonContinuedParagraph12,
						expr: &seqExpr{
							pos: position{line: 730, col: 5, offset: 25458},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 730, col: 5, offset: 25458},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 730, col: 16, offset: 25469},
										expr: &ruleRefExpr{
											pos:  position{line: 730, col: 17, offset: 25470},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 730, col: 37, offset: 25490},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 730, col: 44, offset: 25497},
										name: "ContinuedParagraphLines",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedParagraphLines",
			pos:  position{line: 734, col: 1, offset: 25598},
			expr: &actionExpr{
				pos: position{line: 734, col: 28, offset: 25625},
				run: (*parser).callonContinuedParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 734, col: 28, offset: 25625},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 734, col: 28, offset: 25625},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 734, col: 39, offset: 25636},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 734, col: 59, offset: 25656},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 734, col: 70, offset: 25667},
								expr: &seqExpr{
									pos: position{line: 734, col: 71, offset: 25668},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 734, col: 71, offset: 25668},
											expr: &ruleRefExpr{
												pos:  position{line: 734, col: 72, offset: 25669},
												name: "ListItemContinuation",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 734, col: 93, offset: 25690},
											name: "OtherParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphLine",
			pos:  position{line: 738, col: 1, offset: 25796},
			expr: &actionExpr{
				pos: position{line: 738, col: 23, offset: 25818},
				run: (*parser).callonFirstParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 738, col: 23, offset: 25818},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 738, col: 23, offset: 25818},
							expr: &seqExpr{
								pos: position{line: 738, col: 25, offset: 25820},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 738, col: 25, offset: 25820},
										name: "SimpleLabeledListItemTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 738, col: 51, offset: 25846},
										name: "LabeledListItemSeparator",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 739, col: 5, offset: 25876},
							label: "elements",
							expr: &seqExpr{
								pos: position{line: 739, col: 15, offset: 25886},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 739, col: 15, offset: 25886},
										name: "SimpleWord",
									},
									&zeroOrMoreExpr{
										pos: position{line: 739, col: 26, offset: 25897},
										expr: &ruleRefExpr{
											pos:  position{line: 739, col: 26, offset: 25897},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 739, col: 42, offset: 25913},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 739, col: 52, offset: 25923},
								expr: &ruleRefExpr{
									pos:  position{line: 739, col: 53, offset: 25924},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 739, col: 65, offset: 25936},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OtherParagraphLine",
			pos:  position{line: 743, col: 1, offset: 26026},
			expr: &actionExpr{
				pos: position{line: 743, col: 23, offset: 26048},
				run: (*parser).callonOtherParagraphLine1,
				expr: &labeledExpr{
					pos:   position{line: 743, col: 23, offset: 26048},
					label: "elements",
					expr: &ruleRefExpr{
						pos:  position{line: 743, col: 33, offset: 26058},
						name: "InlineElements",
					},
				},
			},
		},
		{
			name: "VerseParagraph",
			pos:  position{line: 747, col: 1, offset: 26104},
			expr: &choiceExpr{
				pos: position{line: 749, col: 5, offset: 26156},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 749, col: 5, offset: 26156},
						run: (*parser).callonVerseParagraph2,
						expr: &seqExpr{
							pos: position{line: 749, col: 5, offset: 26156},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 749, col: 5, offset: 26156},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 749, col: 16, offset: 26167},
										expr: &ruleRefExpr{
											pos:  position{line: 749, col: 17, offset: 26168},
											name: "ElementAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 750, col: 5, offset: 26192},
									run: (*parser).callonVerseParagraph7,
								},
								&labeledExpr{
									pos:   position{line: 757, col: 5, offset: 26404},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 757, col: 8, offset: 26407},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 757, col: 24, offset: 26423},
									val:        ": ",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 757, col: 29, offset: 26428},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 757, col: 35, offset: 26434},
										expr: &ruleRefExpr{
											pos:  position{line: 757, col: 36, offset: 26435},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 761, col: 5, offset: 26627},
						run: (*parser).callonVerseParagraph14,
						expr: &seqExpr{
							pos: position{line: 761, col: 5, offset: 26627},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 761, col: 5, offset: 26627},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 761, col: 16, offset: 26638},
										expr: &ruleRefExpr{
											pos:  position{line: 761, col: 17, offset: 26639},
											name: "ElementAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 762, col: 5, offset: 26663},
									run: (*parser).callonVerseParagraph19,
								},
								&labeledExpr{
									pos:   position{line: 769, col: 5, offset: 26875},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 769, col: 11, offset: 26881},
										expr: &ruleRefExpr{
											pos:  position{line: 769, col: 12, offset: 26882},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 773, col: 1, offset: 26983},
			expr: &actionExpr{
				pos: position{line: 773, col: 19, offset: 27001},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 773, col: 19, offset: 27001},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 773, col: 19, offset: 27001},
							expr: &ruleRefExpr{
								pos:  position{line: 773, col: 20, offset: 27002},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 773, col: 24, offset: 27006},
							expr: &ruleRefExpr{
								pos:  position{line: 773, col: 25, offset: 27007},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 774, col: 5, offset: 27021},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 774, col: 15, offset: 27031},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 774, col: 15, offset: 27031},
										run: (*parser).callonInlineElements9,
										expr: &labeledExpr{
											pos:   position{line: 774, col: 15, offset: 27031},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 774, col: 24, offset: 27040},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 776, col: 9, offset: 27132},
										run: (*parser).callonInlineElements12,
										expr: &seqExpr{
											pos: position{line: 776, col: 9, offset: 27132},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 776, col: 9, offset: 27132},
													expr: &ruleRefExpr{
														pos:  position{line: 776, col: 10, offset: 27133},
														name: "BlockDelimiter",
													},
												},
												&labeledExpr{
													pos:   position{line: 776, col: 25, offset: 27148},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 776, col: 34, offset: 27157},
														expr: &ruleRefExpr{
															pos:  position{line: 776, col: 35, offset: 27158},
															name: "InlineElement",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 776, col: 51, offset: 27174},
													label: "linebreak",
													expr: &zeroOrOneExpr{
														pos: position{line: 776, col: 61, offset: 27184},
														expr: &ruleRefExpr{
															pos:  position{line: 776, col: 62, offset: 27185},
															name: "LineBreak",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 776, col: 74, offset: 27197},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 782, col: 1, offset: 27333},
			expr: &actionExpr{
				pos: position{line: 782, col: 18, offset: 27350},
				run: (*parser).callonInlineElement1,
				expr: &seqExpr{
					pos: position{line: 782, col: 18, offset: 27350},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 782, col: 18, offset: 27350},
							expr: &ruleRefExpr{
								pos:  position{line: 782, col: 19, offset: 27351},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 782, col: 23, offset: 27355},
							expr: &ruleRefExpr{
								pos:  position{line: 782, col: 24, offset: 27356},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 783, col: 5, offset: 27371},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 783, col: 14, offset: 27380},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 783, col: 14, offset: 27380},
										name: "SimpleWord",
									},
									&ruleRefExpr{
										pos:  position{line: 784, col: 11, offset: 27401},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 785, col: 11, offset: 27423},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 786, col: 11, offset: 27441},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 787, col: 11, offset: 27464},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 788, col: 11, offset: 27480},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 789, col: 11, offset: 27503},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 790, col: 11, offset: 27529},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 791, col: 11, offset: 27555},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 792, col: 11, offset: 27582},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 793, col: 11, offset: 27623},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 794, col: 11, offset: 27650},
										name: "ConcealedIndexTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 795, col: 11, offset: 27679},
										name: "IndexTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 796, col: 11, offset: 27699},
										name: "Parenthesis",
									},
									&ruleRefExpr{
										pos:  position{line: 797, col: 11, offset: 27721},
										name: "AnyChars",
									},
									&ruleRefExpr{
										pos:  position{line: 798, col: 11, offset: 27740},
										name: "AnyChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementsWithoutSubtitution",
			pos:  position{line: 806, col: 1, offset: 28000},
			expr: &actionExpr{
				pos: position{line: 806, col: 37, offset: 28036},
				run: (*parser).callonInlineElementsWithoutSubtitution1,
				expr: &seqExpr{
					pos: position{line: 806, col: 37, offset: 28036},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 806, col: 37, offset: 28036},
							expr: &ruleRefExpr{
								pos:  position{line: 806, col: 38, offset: 28037},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 806, col: 48, offset: 28047},
							expr: &ruleRefExpr{
								pos:  position{line: 806, col: 49, offset: 28048},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 806, col: 64, offset: 28063},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 806, col: 73, offset: 28072},
								expr: &ruleRefExpr{
									pos:  position{line: 806, col: 74, offset: 28073},
									name: "InlineElementWithoutSubtitution",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 806, col: 108, offset: 28107},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 806, col: 118, offset: 28117},
								expr: &ruleRefExpr{
									pos:  position{line: 806, col: 119, offset: 28118},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 806, col: 131, offset: 28130},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineElementWithoutSubtitution",
			pos:  position{line: 810, col: 1, offset: 28221},
			expr: &actionExpr{
				pos: position{line: 810, col: 36, offset: 28256},
				run: (*parser).callonInlineElementWithoutSubtitution1,
				expr: &seqExpr{
					pos: position{line: 810, col: 36, offset: 28256},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 810, col: 36, offset: 28256},
							expr: &ruleRefExpr{
								pos:  position{line: 810, col: 37, offset: 28257},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 810, col: 41, offset: 28261},
							expr: &ruleRefExpr{
								pos:  position{line: 810, col: 42, offset: 28262},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 811, col: 5, offset: 28277},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 811, col: 14, offset: 28286},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 811, col: 14, offset: 28286},
										name: "SimpleWord",
									},
									&ruleRefExpr{
										pos:  position{line: 812, col: 11, offset: 28307},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 813, col: 11, offset: 28329},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 814, col: 11, offset: 28347},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 815, col: 11, offset: 28370},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 816, col: 11, offset: 28386},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 817, col: 11, offset: 28409},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 818, col: 11, offset: 28435},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 819, col: 11, offset: 28461},
										name: "Parenthesis",
									},
									&ruleRefExpr{
										pos:  position{line: 820, col: 11, offset: 28483},
										name: "AnyChars",
									},
									&ruleRefExpr{
										pos:  position{line: 821, col: 11, offset: 28502},
										name: "AnyChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraph",
			pos:  position{line: 825, col: 1, offset: 28541},
			expr: &actionExpr{
				pos: position{line: 825, col: 22, offset: 28562},
				run: (*parser).callonVerbatimParagraph1,
				expr: &seqExpr{
					pos: position{line: 825, col: 22, offset: 28562},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 825, col: 22, offset: 28562},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 825, col: 33, offset: 28573},
								expr: &ruleRefExpr{
									pos:  position{line: 825, col: 34, offset: 28574},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 825, col: 54, offset: 28594},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 825, col: 60, offset: 28600},
								expr: &actionExpr{
									pos: position{line: 825, col: 61, offset: 28601},
									run: (*parser).callonVerbatimParagraph8,
									expr: &seqExpr{
										pos: position{line: 825, col: 61, offset: 28601},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 825, col: 61, offset: 28601},
												expr: &ruleRefExpr{
													pos:  position{line: 825, col: 62, offset: 28602},
													name: "EOF",
												},
											},
											&labeledExpr{
												pos:   position{line: 825, col: 66, offset: 28606},
												label: "line",
												expr: &ruleRefExpr{
													pos:  position{line: 825, col: 72, offset: 28612},
													name: "VerbatimParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraphLine",
			pos:  position{line: 831, col: 1, offset: 28732},
			expr: &actionExpr{
				pos: position{line: 831, col: 26, offset: 28757},
				run: (*parser).callonVerbatimParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 831, col: 26, offset: 28757},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 831, col: 26, offset: 28757},
							expr: &ruleRefExpr{
								pos:  position{line: 831, col: 27, offset: 28758},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 831, col: 42, offset: 28773},
							expr: &ruleRefExpr{
								pos:  position{line: 831, col: 43, offset: 28774},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 831, col: 53, offset: 28784},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 831, col: 62, offset: 28793},
								expr: &ruleRefExpr{
									pos:  position{line: 831, col: 63, offset: 28794},
									name: "VerbatimParagraphLineElement",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 831, col: 94, offset: 28825},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 831, col: 104, offset: 28835},
								expr: &ruleRefExpr{
									pos:  position{line: 831, col: 105, offset: 28836},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 831, col: 117, offset: 28848},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraphLineElement",
			pos:  position{line: 835, col: 1, offset: 28939},
			expr: &actionExpr{
				pos: position{line: 835, col: 33, offset: 28971},
				run: (*parser).callonVerbatimParagraphLineElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 835, col: 33, offset: 28971},
					expr: &seqExpr{
						pos: position{line: 835, col: 34, offset: 28972},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 835, col: 34, offset: 28972},
								expr: &ruleRefExpr{
									pos:  position{line: 835, col: 35, offset: 28973},
									name: "EOL",
								},
							},
							&notExpr{
								pos: position{line: 835, col: 39, offset: 28977},
								expr: &ruleRefExpr{
									pos:  position{line: 835, col: 40, offset: 28978},
									name: "LineBreak",
								},
							},
							&anyMatcher{
								line: 835, col: 50, offset: 28988,
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 842, col: 1, offset: 29212},
			expr: &actionExpr{
				pos: position{line: 842, col: 14, offset: 29225},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 842, col: 14, offset: 29225},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 842, col: 14, offset: 29225},
							name: "WS",
						},
						&litMatcher{
							pos:        position{line: 842, col: 17, offset: 29228},
							val:        "+",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 842, col: 21, offset: 29232},
							expr: &ruleRefExpr{
								pos:  position{line: 842, col: 21, offset: 29232},
								name: "WS",
							},
						},
						&andExpr{
							pos: position{line: 842, col: 25, offset: 29236},
							expr: &ruleRefExpr{
								pos:  position{line: 842, col: 26, offset: 29237},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 849, col: 1, offset: 29521},
			expr: &choiceExpr{
				pos: position{line: 849, col: 15, offset: 29535},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 849, col: 15, offset: 29535},
						name: "UnconstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 849, col: 41, offset: 29561},
						name: "ConstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 849, col: 65, offset: 29585},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 851, col: 1, offset: 29604},
			expr: &choiceExpr{
				pos: position{line: 851, col: 32, offset: 29635},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 851, col: 32, offset: 29635},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 851, col: 32, offset: 29635},
								val:        "*",
								ignoreCase: false,
							},
							&notExpr{
								pos: position{line: 851, col: 36, offset: 29639},
								expr: &litMatcher{
									pos:        position{line: 851, col: 37, offset: 29640},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 851, col: 43, offset: 29646},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 851, col: 43, offset: 29646},
								val:        "_",
								ignoreCase: false,
							},
							&notExpr{
								pos: position{line: 851, col: 47, offset: 29650},
								expr: &litMatcher{
									pos:        position{line: 851, col: 48, offset: 29651},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 851, col: 54, offset: 29657},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 851, col: 54, offset: 29657},
								val:        "`",
								ignoreCase: false,
							},
							&notExpr{
								pos: position{line: 851, col: 58, offset: 29661},
								expr: &litMatcher{
									pos:        position{line: 851, col: 59, offset: 29662},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 853, col: 1, offset: 29668},
			expr: &choiceExpr{
				pos: position{line: 853, col: 34, offset: 29701},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 853, col: 34, offset: 29701},
						val:        "**",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 853, col: 41, offset: 29708},
						val:        "__",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 853, col: 48, offset: 29715},
						val:        "``",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 853, col: 55, offset: 29722},
						val:        "^",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 853, col: 61, offset: 29728},
						val:        "~",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 855, col: 1, offset: 29733},
			expr: &actionExpr{
				pos: position{line: 855, col: 26, offset: 29758},
				run: (*parser).callonConstrainedQuotedText1,
				expr: &seqExpr{
					pos: position{line: 855, col: 26, offset: 29758},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 855, col: 26, offset: 29758},
							expr: &ruleRefExpr{
								pos:  position{line: 855, col: 27, offset: 29759},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 855, col: 30, offset: 29762},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 855, col: 36, offset: 29768},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 855, col: 36, offset: 29768},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 856, col: 15, offset: 29803},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 857, col: 15, offset: 29840},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 858, col: 15, offset: 29880},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 859, col: 15, offset: 29909},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 860, col: 15, offset: 29940},
										name: "SubscriptOrSuperscriptPrefix",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 864, col: 1, offset: 30094},
			expr: &choiceExpr{
				pos: position{line: 864, col: 28, offset: 30121},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 864, col: 28, offset: 30121},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 865, col: 15, offset: 30155},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 866, col: 15, offset: 30191},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 868, col: 1, offset: 30217},
			expr: &choiceExpr{
				pos: position{line: 868, col: 22, offset: 30238},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 868, col: 22, offset: 30238},
						name: "EscapedBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 869, col: 15, offset: 30269},
						name: "EscapedItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 870, col: 15, offset: 30302},
						name: "EscapedMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 871, col: 15, offset: 30338},
						name: "EscapedSubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 872, col: 15, offset: 30374},
						name: "EscapedSuperscriptText",
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 874, col: 1, offset: 30398},
			expr: &choiceExpr{
				pos: position{line: 874, col: 33, offset: 30430},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 874, col: 33, offset: 30430},
						val:        "^",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 874, col: 39, offset: 30436},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 874, col: 39, offset: 30436},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 878, col: 1, offset: 30569},
			expr: &actionExpr{
				pos: position{line: 878, col: 25, offset: 30593},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 878, col: 25, offset: 30593},
					expr: &litMatcher{
						pos:        position{line: 878, col: 25, offset: 30593},
						val:        "\\",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 882, col: 1, offset: 30634},
			expr: &actionExpr{
				pos: position{line: 882, col: 25, offset: 30658},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 882, col: 25, offset: 30658},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 882, col: 25, offset: 30658},
							val:        "\\\\",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 882, col: 30, offset: 30663},
							expr: &litMatcher{
								pos:        position{line: 882, col: 30, offset: 30663},
								val:        "\\",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 890, col: 1, offset: 30760},
			expr: &choiceExpr{
				pos: position{line: 890, col: 13, offset: 30772},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 890, col: 13, offset: 30772},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 890, col: 35, offset: 30794},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 892, col: 1, offset: 30861},
			expr: &actionExpr{
				pos: position{line: 892, col: 24, offset: 30884},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 892, col: 24, offset: 30884},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 892, col: 24, offset: 30884},
							expr: &litMatcher{
								pos:        position{line: 892, col: 25, offset: 30885},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 892, col: 30, offset: 30890},
							val:        "**",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 892, col: 35, offset: 30895},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 892, col: 45, offset: 30905},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 892, col: 74, offset: 30934},
							val:        "**",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 896, col: 1, offset: 31015},
			expr: &seqExpr{
				pos: position{line: 896, col: 32, offset: 31046},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 896, col: 32, offset: 31046},
						name: "DoubleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 896, col: 59, offset: 31073},
						expr: &seqExpr{
							pos: position{line: 896, col: 60, offset: 31074},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 896, col: 60, offset: 31074},
									expr: &litMatcher{
										pos:        position{line: 896, col: 62, offset: 31076},
										val:        "**",
										ignoreCase: false,
									},
								},
								&choiceExpr{
									pos: position{line: 896, col: 69, offset: 31083},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 896, col: 69, offset: 31083},
											name: "WS",
										},
										&ruleRefExpr{
											pos:  position{line: 896, col: 74, offset: 31088},
											name: "DoubleQuoteBoldTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 898, col: 1, offset: 31153},
			expr: &actionExpr{
				pos: position{line: 898, col: 31, offset: 31183},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 898, col: 31, offset: 31183},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 898, col: 31, offset: 31183},
							expr: &ruleRefExpr{
								pos:  position{line: 898, col: 32, offset: 31184},
								name: "Newline",
							},
						},
						&labeledExpr{
							pos:   position{line: 898, col: 40, offset: 31192},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 898, col: 49, offset: 31201},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 898, col: 49, offset: 31201},
										name: "SimpleWord",
									},
									&ruleRefExpr{
										pos:  position{line: 899, col: 11, offset: 31223},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 900, col: 11, offset: 31254},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 901, col: 11, offset: 31276},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 902, col: 11, offset: 31300},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 903, col: 11, offset: 31324},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 904, col: 11, offset: 31350},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 905, col: 11, offset: 31373},
										name: "QuotedLink",
									},
									&ruleRefExpr{
										pos:  position{line: 906, col: 11, offset: 31395},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 907, col: 11, offset: 31418},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 908, col: 11, offset: 31458},
										name: "NonDoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 909, col: 11, offset: 31491},
										name: "Parenthesis",
									},
									&ruleRefExpr{
										pos:  position{line: 910, col: 11, offset: 31513},
										name: "AnyChars",
									},
									&ruleRefExpr{
										pos:  position{line: 911, col: 11, offset: 31532},
										name: "AnyChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteBoldText",
			pos:  position{line: 915, col: 1, offset: 31674},
			expr: &actionExpr{
				pos: position{line: 915, col: 27, offset: 31700},
				run: (*parser).callonNonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 915, col: 27, offset: 31700},
					exprs: []interface{}{
						&anyMatcher{
							line: 915, col: 28, offset: 31701,
						},
						&zeroOrMoreExpr{
							pos: position{line: 915, col: 31, offset: 31704},
							expr: &seqExpr{
								pos: position{line: 915, col: 32, offset: 31705},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 915, col: 32, offset: 31705},
										expr: &litMatcher{
											pos:        position{line: 915, col: 33, offset: 31706},
											val:        "**",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 915, col: 38, offset: 31711},
										expr: &ruleRefExpr{
											pos:  position{line: 915, col: 39, offset: 31712},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 915, col: 42, offset: 31715},
										expr: &litMatcher{
											pos:        position{line: 915, col: 43, offset: 31716},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 915, col: 47, offset: 31720},
										expr: &litMatcher{
											pos:        position{line: 915, col: 48, offset: 31721},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 915, col: 52, offset: 31725},
										expr: &ruleRefExpr{
											pos:  position{line: 915, col: 53, offset: 31726},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 915, col: 61, offset: 31734},
										expr: &ruleRefExpr{
											pos:  position{line: 915, col: 62, offset: 31735},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 915, col: 74, offset: 31747,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 919, col: 1, offset: 31807},
			expr: &choiceExpr{
				pos: position{line: 919, col: 24, offset: 31830},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 919, col: 24, offset: 31830},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 919, col: 24, offset: 31830},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 919, col: 24, offset: 31830},
									expr: &litMatcher{
										pos:        position{line: 919, col: 25, offset: 31831},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 919, col: 29, offset: 31835},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 919, col: 33, offset: 31839},
									expr: &litMatcher{
										pos:        position{line: 919, col: 34, offset: 31840},
										val:        "*",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 919, col: 38, offset: 31844},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 919, col: 48, offset: 31854},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 919, col: 77, offset: 31883},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 921, col: 5, offset: 32064},
						run: (*parser).callonSingleQuoteBoldText12,
						expr: &seqExpr{
							pos: position{line: 921, col: 5, offset: 32064},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 921, col: 5, offset: 32064},
									expr: &litMatcher{
										pos:        position{line: 921, col: 6, offset: 32065},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 921, col: 11, offset: 32070},
									val:        "*",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 921, col: 15, offset: 32074},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 921, col: 25, offset: 32084},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 921, col: 25, offset: 32084},
												val:        "*",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 921, col: 29, offset: 32088},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 921, col: 58, offset: 32117},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 925, col: 1, offset: 32316},
			expr: &seqExpr{
				pos: position{line: 925, col: 32, offset: 32347},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 925, col: 32, offset: 32347},
						expr: &ruleRefExpr{
							pos:  position{line: 925, col: 33, offset: 32348},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 925, col: 36, offset: 32351},
						name: "SingleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 925, col: 63, offset: 32378},
						expr: &seqExpr{
							pos: position{line: 925, col: 64, offset: 32379},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 925, col: 64, offset: 32379},
									expr: &seqExpr{
										pos: position{line: 925, col: 66, offset: 32381},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 925, col: 66, offset: 32381},
												val:        "*",
												ignoreCase: false,
											},
											&notExpr{
												pos: position{line: 925, col: 70, offset: 32385},
												expr: &ruleRefExpr{
													pos:  position{line: 925, col: 71, offset: 32386},
													name: "Alphanum",
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 925, col: 81, offset: 32396},
									expr: &ruleRefExpr{
										pos:  position{line: 925, col: 81, offset: 32396},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 925, col: 85, offset: 32400},
									name: "SingleQuoteBoldTextElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 927, col: 1, offset: 32431},
			expr: &actionExpr{
				pos: position{line: 927, col: 31, offset: 32461},
				run: (*parser).callonSingleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 927, col: 31, offset: 32461},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 927, col: 31, offset: 32461},
							expr: &ruleRefExpr{
								pos:  position{line: 927, col: 32, offset: 32462},
								name: "Newline",
							},
						},
						&labeledExpr{
							pos:   position{line: 927, col: 40, offset: 32470},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 927, col: 49, offset: 32479},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 927, col: 49, offset: 32479},
										name: "SimpleWord",
									},
									&ruleRefExpr{
										pos:  position{line: 928, col: 11, offset: 32501},
										name: "DoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 929, col: 11, offset: 32531},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 930, col: 11, offset: 32553},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 931, col: 11, offset: 32577},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 932, col: 11, offset: 32601},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 933, col: 11, offset: 32627},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 934, col: 11, offset: 32650},
										name: "QuotedLink",
									},
									&ruleRefExpr{
										pos:  position{line: 935, col: 11, offset: 32672},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 936, col: 11, offset: 32695},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 937, col: 11, offset: 32735},
										name: "NonSingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 938, col: 11, offset: 32768},
										name: "Parenthesis",
									},
									&ruleRefExpr{
										pos:  position{line: 939, col: 11, offset: 32790},
										name: "AnyChars",
									},
									&ruleRefExpr{
										pos:  position{line: 940, col: 11, offset: 32809},
										name: "AnyChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteBoldText",
			pos:  position{line: 944, col: 1, offset: 32951},
			expr: &actionExpr{
				pos: position{line: 944, col: 27, offset: 32977},
				run: (*parser).callonNonSingleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 944, col: 27, offset: 32977},
					exprs: []interface{}{
						&anyMatcher{
							line: 944, col: 28, offset: 32978,
						},
						&zeroOrMoreExpr{
							pos: position{line: 944, col: 31, offset: 32981},
							expr: &seqExpr{
								pos: position{line: 944, col: 32, offset: 32982},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 944, col: 32, offset: 32982},
										expr: &litMatcher{
											pos:        position{line: 944, col: 33, offset: 32983},
											val:        "*",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 944, col: 37, offset: 32987},
										expr: &ruleRefExpr{
											pos:  position{line: 944, col: 38, offset: 32988},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 944, col: 41, offset: 32991},
										expr: &litMatcher{
											pos:        position{line: 944, col: 42, offset: 32992},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 944, col: 46, offset: 32996},
										expr: &litMatcher{
											pos:        position{line: 944, col: 47, offset: 32997},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 944, col: 51, offset: 33001},
										expr: &ruleRefExpr{
											pos:  position{line: 944, col: 52, offset: 33002},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 944, col: 60, offset: 33010},
										expr: &ruleRefExpr{
											pos:  position{line: 944, col: 61, offset: 33011},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 944, col: 73, offset: 33023,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 948, col: 1, offset: 33083},
			expr: &choiceExpr{
				pos: position{line: 949, col: 5, offset: 33107},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 949, col: 5, offset: 33107},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 949, col: 5, offset: 33107},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 949, col: 5, offset: 33107},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 949, col: 18, offset: 33120},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 949, col: 40, offset: 33142},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 949, col: 45, offset: 33147},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 949, col: 55, offset: 33157},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 949, col: 84, offset: 33186},
									val:        "**",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 951, col: 9, offset: 33343},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 951, col: 9, offset: 33343},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 951, col: 9, offset: 33343},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 951, col: 22, offset: 33356},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 951, col: 44, offset: 33378},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 951, col: 49, offset: 33383},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 951, col: 59, offset: 33393},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 951, col: 88, offset: 33422},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 954, col: 9, offset: 33622},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 954, col: 9, offset: 33622},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 954, col: 9, offset: 33622},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 954, col: 22, offset: 33635},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 954, col: 44, offset: 33657},
									val:        "*",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 954, col: 48, offset: 33661},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 954, col: 58, offset: 33671},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 954, col: 87, offset: 33700},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 962, col: 1, offset: 33908},
			expr: &choiceExpr{
				pos: position{line: 962, col: 15, offset: 33922},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 962, col: 15, offset: 33922},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 962, col: 39, offset: 33946},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 964, col: 1, offset: 33969},
			expr: &actionExpr{
				pos: position{line: 964, col: 26, offset: 33994},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 964, col: 26, offset: 33994},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 964, col: 26, offset: 33994},
							expr: &litMatcher{
								pos:        position{line: 964, col: 27, offset: 33995},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 964, col: 32, offset: 34000},
							val:        "__",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 964, col: 37, offset: 34005},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 964, col: 47, offset: 34015},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 964, col: 78, offset: 34046},
							val:        "__",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 968, col: 1, offset: 34173},
			expr: &seqExpr{
				pos: position{line: 968, col: 34, offset: 34206},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 968, col: 34, offset: 34206},
						name: "DoubleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 968, col: 63, offset: 34235},
						expr: &seqExpr{
							pos: position{line: 968, col: 64, offset: 34236},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 968, col: 64, offset: 34236},
									expr: &litMatcher{
										pos:        position{line: 968, col: 66, offset: 34238},
										val:        "__",
										ignoreCase: false,
									},
								},
								&choiceExpr{
									pos: position{line: 968, col: 73, offset: 34245},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 968, col: 73, offset: 34245},
											name: "WS",
										},
										&ruleRefExpr{
											pos:  position{line: 968, col: 78, offset: 34250},
											name: "DoubleQuoteItalicTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 970, col: 1, offset: 34317},
			expr: &actionExpr{
				pos: position{line: 970, col: 33, offset: 34349},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 970, col: 33, offset: 34349},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 970, col: 33, offset: 34349},
							expr: &ruleRefExpr{
								pos:  position{line: 970, col: 34, offset: 34350},
								name: "Newline",
							},
						},
						&labeledExpr{
							pos:   position{line: 970, col: 42, offset: 34358},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 970, col: 51, offset: 34367},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 970, col: 51, offset: 34367},
										name: "SimpleWord",
									},
									&ruleRefExpr{
										pos:  position{line: 971, col: 11, offset: 34389},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 972, col: 11, offset: 34422},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 973, col: 11, offset: 34442},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 974, col: 11, offset: 34466},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 975, col: 11, offset: 34490},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 976, col: 11, offset: 34516},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 977, col: 11, offset: 34539},
										name: "QuotedLink",
									},
									&ruleRefExpr{
										pos:  position{line: 978, col: 11, offset: 34561},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 979, col: 11, offset: 34584},
										name: "NonDoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 980, col: 11, offset: 34619},
										name: "Parenthesis",
									},
									&ruleRefExpr{
										pos:  position{line: 981, col: 11, offset: 34641},
										name: "AnyChars",
									},
									&ruleRefExpr{
										pos:  position{line: 982, col: 11, offset: 34660},
										name: "AnyChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteItalicText",
			pos:  position{line: 986, col: 1, offset: 34802},
			expr: &actionExpr{
				pos: position{line: 986, col: 29, offset: 34830},
				run: (*parser).callonNonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 986, col: 29, offset: 34830},
					exprs: []interface{}{
						&anyMatcher{
							line: 986, col: 30, offset: 34831,
						},
						&zeroOrMoreExpr{
							pos: position{line: 986, col: 33, offset: 34834},
							expr: &seqExpr{
								pos: position{line: 986, col: 34, offset: 34835},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 986, col: 34, offset: 34835},
										expr: &litMatcher{
											pos:        position{line: 986, col: 35, offset: 34836},
											val:        "__",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 986, col: 40, offset: 34841},
										expr: &litMatcher{
											pos:        position{line: 986, col: 41, offset: 34842},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 986, col: 45, offset: 34846},
										expr: &litMatcher{
											pos:        position{line: 986, col: 46, offset: 34847},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 986, col: 50, offset: 34851},
										expr: &ruleRefExpr{
											pos:  position{line: 986, col: 51, offset: 34852},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 986, col: 59, offset: 34860},
										expr: &ruleRefExpr{
											pos:  position{line: 986, col: 60, offset: 34861},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 986, col: 72, offset: 34873,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 990, col: 1, offset: 34933},
			expr: &choiceExpr{
				pos: position{line: 990, col: 26, offset: 34958},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 990, col: 26, offset: 34958},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 990, col: 26, offset: 34958},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 990, col: 26, offset: 34958},
									expr: &litMatcher{
										pos:        position{line: 990, col: 27, offset: 34959},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 990, col: 31, offset: 34963},
									val:        "_",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 990, col: 35, offset: 34967},
									expr: &litMatcher{
										pos:        position{line: 990, col: 36, offset: 34968},
										val:        "_",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 990, col: 40, offset: 34972},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 990, col: 50, offset: 34982},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 990, col: 81, offset: 35013},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 992, col: 5, offset: 35196},
						run: (*parser).callonSingleQuoteItalicText12,
						expr: &seqExpr{
							pos: position{line: 992, col: 5, offset: 35196},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 992, col: 5, offset: 35196},
									expr: &litMatcher{
										pos:        position{line: 992, col: 6, offset: 35197},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 992, col: 11, offset: 35202},
									val:        "_",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 992, col: 15, offset: 35206},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 992, col: 25, offset: 35216},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 992, col: 25, offset: 35216},
												val:        "_",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 992, col: 29, offset: 35220},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 992, col: 60, offset: 35251},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 996, col: 1, offset: 35454},
			expr: &seqExpr{
				pos: position{line: 996, col: 34, offset: 35487},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 996, col: 34, offset: 35487},
						expr: &ruleRefExpr{
							pos:  position{line: 996, col: 35, offset: 35488},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 996, col: 38, offset: 35491},
						name: "SingleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 996, col: 67, offset: 35520},
						expr: &seqExpr{
							pos: position{line: 996, col: 68, offset: 35521},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 996, col: 68, offset: 35521},
									expr: &seqExpr{
										pos: position{line: 996, col: 70, offset: 35523},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 996, col: 70, offset: 35523},
												val:        "_",
												ignoreCase: false,
											},
											&notExpr{
												pos: position{line: 996, col: 74, offset: 35527},
												expr: &ruleRefExpr{
													pos:  position{line: 996, col: 75, offset: 35528},
													name: "Alphanum",
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 996, col: 85, offset: 35538},
									expr: &ruleRefExpr{
										pos:  position{line: 996, col: 85, offset: 35538},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 996, col: 89, offset: 35542},
									name: "SingleQuoteItalicTextElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 998, col: 1, offset: 35574},
			expr: &actionExpr{
				pos: position{line: 998, col: 33, offset: 35606},
				run: (*parser).callonSingleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 998, col: 33, offset: 35606},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 998, col: 33, offset: 35606},
							expr: &ruleRefExpr{
								pos:  position{line: 998, col: 34, offset: 35607},
								name: "Newline",
							},
						},
						&labeledExpr{
							pos:   position{line: 998, col: 42, offset: 35615},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 998, col: 51, offset: 35624},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 998, col: 51, offset: 35624},
										name: "SimpleWord",
									},
									&ruleRefExpr{
										pos:  position{line: 999, col: 11, offset: 35646},
										name: "DoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1000, col: 11, offset: 35678},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1001, col: 11, offset: 35698},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1002, col: 11, offset: 35722},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1003, col: 11, offset: 35746},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1004, col: 11, offset: 35772},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 1005, col: 11, offset: 35795},
										name: "QuotedLink",
									},
									&ruleRefExpr{
										pos:  position{line: 1006, col: 11, offset: 35817},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1007, col: 11, offset: 35840},
										name: "NonSingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1008, col: 11, offset: 35875},
										name: "Parenthesis",
									},
									&ruleRefExpr{
										pos:  position{line: 1009, col: 11, offset: 35897},
										name: "AnyChars",
									},
									&ruleRefExpr{
										pos:  position{line: 1010, col: 11, offset: 35916},
										name: "AnyChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteItalicText",
			pos:  position{line: 1014, col: 1, offset: 36058},
			expr: &actionExpr{
				pos: position{line: 1014, col: 29, offset: 36086},
				run: (*parser).callonNonSingleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1014, col: 29, offset: 36086},
					exprs: []interface{}{
						&anyMatcher{
							line: 1014, col: 30, offset: 36087,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1014, col: 33, offset: 36090},
							expr: &seqExpr{
								pos: position{line: 1014, col: 34, offset: 36091},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1014, col: 34, offset: 36091},
										expr: &litMatcher{
											pos:        position{line: 1014, col: 35, offset: 36092},
											val:        "_",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1014, col: 39, offset: 36096},
										expr: &ruleRefExpr{
											pos:  position{line: 1014, col: 40, offset: 36097},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1014, col: 43, offset: 36100},
										expr: &litMatcher{
											pos:        position{line: 1014, col: 44, offset: 36101},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1014, col: 48, offset: 36105},
										expr: &litMatcher{
											pos:        position{line: 1014, col: 49, offset: 36106},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1014, col: 53, offset: 36110},
										expr: &ruleRefExpr{
											pos:  position{line: 1014, col: 54, offset: 36111},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1014, col: 62, offset: 36119},
										expr: &ruleRefExpr{
											pos:  position{line: 1014, col: 63, offset: 36120},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 1014, col: 75, offset: 36132,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1018, col: 1, offset: 36192},
			expr: &choiceExpr{
				pos: position{line: 1019, col: 5, offset: 36218},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1019, col: 5, offset: 36218},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1019, col: 5, offset: 36218},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1019, col: 5, offset: 36218},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1019, col: 18, offset: 36231},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1019, col: 40, offset: 36253},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1019, col: 45, offset: 36258},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1019, col: 55, offset: 36268},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1019, col: 86, offset: 36299},
									val:        "__",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1021, col: 9, offset: 36456},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1021, col: 9, offset: 36456},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1021, col: 9, offset: 36456},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1021, col: 22, offset: 36469},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1021, col: 44, offset: 36491},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1021, col: 49, offset: 36496},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1021, col: 59, offset: 36506},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1021, col: 90, offset: 36537},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1024, col: 9, offset: 36737},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1024, col: 9, offset: 36737},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1024, col: 9, offset: 36737},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1024, col: 22, offset: 36750},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1024, col: 44, offset: 36772},
									val:        "_",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1024, col: 48, offset: 36776},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1024, col: 58, offset: 36786},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1024, col: 89, offset: 36817},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1031, col: 1, offset: 37027},
			expr: &choiceExpr{
				pos: position{line: 1031, col: 18, offset: 37044},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1031, col: 18, offset: 37044},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1031, col: 45, offset: 37071},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1033, col: 1, offset: 37097},
			expr: &actionExpr{
				pos: position{line: 1033, col: 29, offset: 37125},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1033, col: 29, offset: 37125},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1033, col: 29, offset: 37125},
							expr: &litMatcher{
								pos:        position{line: 1033, col: 30, offset: 37126},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 1033, col: 35, offset: 37131},
							val:        "``",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1033, col: 40, offset: 37136},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1033, col: 50, offset: 37146},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1033, col: 84, offset: 37180},
							val:        "``",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1037, col: 1, offset: 37310},
			expr: &seqExpr{
				pos: position{line: 1037, col: 37, offset: 37346},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1037, col: 37, offset: 37346},
						name: "DoubleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1037, col: 69, offset: 37378},
						expr: &seqExpr{
							pos: position{line: 1037, col: 70, offset: 37379},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1037, col: 70, offset: 37379},
									expr: &litMatcher{
										pos:        position{line: 1037, col: 72, offset: 37381},
										val:        "``",
										ignoreCase: false,
									},
								},
								&choiceExpr{
									pos: position{line: 1037, col: 79, offset: 37388},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1037, col: 79, offset: 37388},
											name: "WS",
										},
										&ruleRefExpr{
											pos:  position{line: 1037, col: 84, offset: 37393},
											name: "DoubleQuoteMonospaceTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1039, col: 1, offset: 37462},
			expr: &actionExpr{
				pos: position{line: 1039, col: 36, offset: 37497},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 1039, col: 36, offset: 37497},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1039, col: 36, offset: 37497},
							expr: &ruleRefExpr{
								pos:  position{line: 1039, col: 37, offset: 37498},
								name: "Newline",
							},
						},
						&labeledExpr{
							pos:   position{line: 1039, col: 45, offset: 37506},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1039, col: 54, offset: 37515},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1039, col: 54, offset: 37515},
										name: "SimpleWord",
									},
									&ruleRefExpr{
										pos:  position{line: 1040, col: 11, offset: 37537},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1041, col: 11, offset: 37573},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1042, col: 11, offset: 37592},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1043, col: 11, offset: 37614},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1044, col: 11, offset: 37638},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1045, col: 11, offset: 37664},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 1046, col: 11, offset: 37687},
										name: "QuotedLink",
									},
									&ruleRefExpr{
										pos:  position{line: 1047, col: 11, offset: 37709},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1048, col: 11, offset: 37732},
										name: "NonDoubleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1049, col: 11, offset: 37770},
										name: "Parenthesis",
									},
									&ruleRefExpr{
										pos:  position{line: 1050, col: 11, offset: 37792},
										name: "AnyChars",
									},
									&ruleRefExpr{
										pos:  position{line: 1051, col: 11, offset: 37811},
										name: "AnyChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteMonospaceText",
			pos:  position{line: 1055, col: 1, offset: 37953},
			expr: &actionExpr{
				pos: position{line: 1055, col: 32, offset: 37984},
				run: (*parser).callonNonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1055, col: 32, offset: 37984},
					exprs: []interface{}{
						&anyMatcher{
							line: 1055, col: 33, offset: 37985,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1055, col: 36, offset: 37988},
							expr: &seqExpr{
								pos: position{line: 1055, col: 37, offset: 37989},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1055, col: 37, offset: 37989},
										expr: &litMatcher{
											pos:        position{line: 1055, col: 38, offset: 37990},
											val:        "``",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1055, col: 43, offset: 37995},
										expr: &ruleRefExpr{
											pos:  position{line: 1055, col: 44, offset: 37996},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1055, col: 47, offset: 37999},
										expr: &litMatcher{
											pos:        position{line: 1055, col: 48, offset: 38000},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1055, col: 52, offset: 38004},
										expr: &litMatcher{
											pos:        position{line: 1055, col: 53, offset: 38005},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1055, col: 57, offset: 38009},
										expr: &ruleRefExpr{
											pos:  position{line: 1055, col: 58, offset: 38010},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1055, col: 66, offset: 38018},
										expr: &ruleRefExpr{
											pos:  position{line: 1055, col: 67, offset: 38019},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 1055, col: 79, offset: 38031,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1059, col: 1, offset: 38091},
			expr: &choiceExpr{
				pos: position{line: 1059, col: 29, offset: 38119},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1059, col: 29, offset: 38119},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1059, col: 29, offset: 38119},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1059, col: 29, offset: 38119},
									expr: &litMatcher{
										pos:        position{line: 1059, col: 30, offset: 38120},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 1059, col: 34, offset: 38124},
									expr: &litMatcher{
										pos:        position{line: 1059, col: 35, offset: 38125},
										val:        "``",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1059, col: 40, offset: 38130},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1059, col: 44, offset: 38134},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1059, col: 54, offset: 38144},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1059, col: 88, offset: 38178},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1061, col: 5, offset: 38364},
						run: (*parser).callonSingleQuoteMonospaceText12,
						expr: &seqExpr{
							pos: position{line: 1061, col: 5, offset: 38364},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1061, col: 5, offset: 38364},
									expr: &litMatcher{
										pos:        position{line: 1061, col: 6, offset: 38365},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1061, col: 11, offset: 38370},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1061, col: 15, offset: 38374},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1061, col: 25, offset: 38384},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1061, col: 25, offset: 38384},
												val:        "`",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1061, col: 29, offset: 38388},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1061, col: 63, offset: 38422},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1065, col: 1, offset: 38631},
			expr: &seqExpr{
				pos: position{line: 1065, col: 37, offset: 38667},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1065, col: 37, offset: 38667},
						expr: &ruleRefExpr{
							pos:  position{line: 1065, col: 38, offset: 38668},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1065, col: 41, offset: 38671},
						name: "SingleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1065, col: 73, offset: 38703},
						expr: &seqExpr{
							pos: position{line: 1065, col: 74, offset: 38704},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1065, col: 74, offset: 38704},
									expr: &seqExpr{
										pos: position{line: 1065, col: 76, offset: 38706},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1065, col: 76, offset: 38706},
												val:        "`",
												ignoreCase: false,
											},
											&notExpr{
												pos: position{line: 1065, col: 80, offset: 38710},
												expr: &ruleRefExpr{
													pos:  position{line: 1065, col: 81, offset: 38711},
													name: "Alphanum",
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1065, col: 91, offset: 38721},
									expr: &ruleRefExpr{
										pos:  position{line: 1065, col: 91, offset: 38721},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1065, col: 95, offset: 38725},
									name: "SingleQuoteMonospaceTextElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1067, col: 1, offset: 38760},
			expr: &actionExpr{
				pos: position{line: 1067, col: 37, offset: 38796},
				run: (*parser).callonSingleQuoteMonospaceTextElement1,
				expr: &labeledExpr{
					pos:   position{line: 1067, col: 37, offset: 38796},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1067, col: 46, offset: 38805},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1067, col: 46, offset: 38805},
								name: "SimpleWord",
							},
							&ruleRefExpr{
								pos:  position{line: 1068, col: 11, offset: 38827},
								name: "Newline",
							},
							&ruleRefExpr{
								pos:  position{line: 1069, col: 11, offset: 38865},
								name: "DoubleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 1070, col: 11, offset: 38901},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1071, col: 11, offset: 38920},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1072, col: 11, offset: 38941},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1073, col: 11, offset: 38965},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1074, col: 11, offset: 38991},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 1075, col: 11, offset: 39014},
								name: "QuotedLink",
							},
							&ruleRefExpr{
								pos:  position{line: 1076, col: 11, offset: 39036},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 1077, col: 11, offset: 39059},
								name: "NonSingleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 1078, col: 11, offset: 39097},
								name: "Parenthesis",
							},
							&ruleRefExpr{
								pos:  position{line: 1079, col: 11, offset: 39119},
								name: "AnyChars",
							},
							&ruleRefExpr{
								pos:  position{line: 1080, col: 11, offset: 39138},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteMonospaceText",
			pos:  position{line: 1084, col: 1, offset: 39280},
			expr: &actionExpr{
				pos: position{line: 1084, col: 32, offset: 39311},
				run: (*parser).callonNonSingleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1084, col: 32, offset: 39311},
					exprs: []interface{}{
						&anyMatcher{
							line: 1084, col: 33, offset: 39312,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1084, col: 36, offset: 39315},
							expr: &seqExpr{
								pos: position{line: 1084, col: 37, offset: 39316},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1084, col: 37, offset: 39316},
										expr: &ruleRefExpr{
											pos:  position{line: 1084, col: 38, offset: 39317},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1084, col: 41, offset: 39320},
										expr: &litMatcher{
											pos:        position{line: 1084, col: 42, offset: 39321},
											val:        "`",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1084, col: 46, offset: 39325},
										expr: &litMatcher{
											pos:        position{line: 1084, col: 47, offset: 39326},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1084, col: 51, offset: 39330},
										expr: &litMatcher{
											pos:        position{line: 1084, col: 52, offset: 39331},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1084, col: 56, offset: 39335},
										expr: &ruleRefExpr{
											pos:  position{line: 1084, col: 57, offset: 39336},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1084, col: 65, offset: 39344},
										expr: &ruleRefExpr{
											pos:  position{line: 1084, col: 66, offset: 39345},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 1084, col: 78, offset: 39357,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1088, col: 1, offset: 39438},
			expr: &choiceExpr{
				pos: position{line: 1089, col: 5, offset: 39467},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1089, col: 5, offset: 39467},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1089, col: 5, offset: 39467},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1089, col: 5, offset: 39467},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1089, col: 18, offset: 39480},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1089, col: 40, offset: 39502},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1089, col: 45, offset: 39507},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1089, col: 55, offset: 39517},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1089, col: 89, offset: 39551},
									val:        "``",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1091, col: 9, offset: 39708},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1091, col: 9, offset: 39708},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1091, col: 9, offset: 39708},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1091, col: 22, offset: 39721},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1091, col: 44, offset: 39743},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1091, col: 49, offset: 39748},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1091, col: 59, offset: 39758},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1091, col: 93, offset: 39792},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1094, col: 9, offset: 39992},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1094, col: 9, offset: 39992},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1094, col: 9, offset: 39992},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1094, col: 22, offset: 40005},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1094, col: 44, offset: 40027},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1094, col: 48, offset: 40031},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1094, col: 58, offset: 40041},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1094, col: 92, offset: 40075},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1098, col: 1, offset: 40225},
			expr: &actionExpr{
				pos: position{line: 1098, col: 18, offset: 40242},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1098, col: 18, offset: 40242},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1098, col: 18, offset: 40242},
							expr: &litMatcher{
								pos:        position{line: 1098, col: 19, offset: 40243},
								val:        "\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 1098, col: 23, offset: 40247},
							val:        "~",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1098, col: 27, offset: 40251},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1098, col: 36, offset: 40260},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1098, col: 58, offset: 40282},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1102, col: 1, offset: 40371},
			expr: &choiceExpr{
				pos: position{line: 1102, col: 25, offset: 40395},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1102, col: 25, offset: 40395},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1102, col: 38, offset: 40408},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1104, col: 1, offset: 40427},
			expr: &actionExpr{
				pos: position{line: 1104, col: 21, offset: 40447},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1104, col: 21, offset: 40447},
					expr: &seqExpr{
						pos: position{line: 1104, col: 22, offset: 40448},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1104, col: 22, offset: 40448},
								expr: &ruleRefExpr{
									pos:  position{line: 1104, col: 23, offset: 40449},
									name: "Newline",
								},
							},
							&notExpr{
								pos: position{line: 1104, col: 31, offset: 40457},
								expr: &ruleRefExpr{
									pos:  position{line: 1104, col: 32, offset: 40458},
									name: "WS",
								},
							},
							&notExpr{
								pos: position{line: 1104, col: 35, offset: 40461},
								expr: &litMatcher{
									pos:        position{line: 1104, col: 36, offset: 40462},
									val:        "~",
									ignoreCase: false,
								},
							},
							&anyMatcher{
								line: 1104, col: 40, offset: 40466,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1108, col: 1, offset: 40499},
			expr: &actionExpr{
				pos: position{line: 1108, col: 25, offset: 40523},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1108, col: 25, offset: 40523},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1108, col: 25, offset: 40523},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1108, col: 38, offset: 40536},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1108, col: 60, offset: 40558},
							val:        "~",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1108, col: 64, offset: 40562},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1108, col: 73, offset: 40571},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1108, col: 95, offset: 40593},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1112, col: 1, offset: 40722},
			expr: &actionExpr{
				pos: position{line: 1112, col: 20, offset: 40741},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1112, col: 20, offset: 40741},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1112, col: 20, offset: 40741},
							expr: &litMatcher{
								pos:        position{line: 1112, col: 21, offset: 40742},
								val:        "\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 1112, col: 25, offset: 40746},
							val:        "^",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1112, col: 29, offset: 40750},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1112, col: 38, offset: 40759},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1112, col: 62, offset: 40783},
							val:        "^",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1116, col: 1, offset: 40874},
			expr: &choiceExpr{
				pos: position{line: 1116, col: 27, offset: 40900},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1116, col: 27, offset: 40900},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1116, col: 40, offset: 40913},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1118, col: 1, offset: 40934},
			expr: &actionExpr{
				pos: position{line: 1118, col: 23, offset: 40956},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1118, col: 23, offset: 40956},
					expr: &seqExpr{
						pos: position{line: 1118, col: 24, offset: 40957},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1118, col: 24, offset: 40957},
								expr: &ruleRefExpr{
									pos:  position{line: 1118, col: 25, offset: 40958},
									name: "Newline",
								},
							},
							&notExpr{
								pos: position{line: 1118, col: 33, offset: 40966},
								expr: &ruleRefExpr{
									pos:  position{line: 1118, col: 34, offset: 40967},
									name: "WS",
								},
							},
							&notExpr{
								pos: position{line: 1118, col: 37, offset: 40970},
								expr: &litMatcher{
									pos:        position{line: 1118, col: 38, offset: 40971},
									val:        "^",
									ignoreCase: false,
								},
							},
							&anyMatcher{
								line: 1118, col: 42, offset: 40975,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1122, col: 1, offset: 41008},
			expr: &actionExpr{
				pos: position{line: 1122, col: 27, offset: 41034},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1122, col: 27, offset: 41034},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1122, col: 27, offset: 41034},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1122, col: 40, offset: 41047},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1122, col: 62, offset: 41069},
							val:        "^",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1122, col: 66, offset: 41073},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1122, col: 75, offset: 41082},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1122, col: 99, offset: 41106},
							val:        "^",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Passthrough",
			pos:  position{line: 1129, col: 1, offset: 41342},
			expr: &choiceExpr{
				pos: position{line: 1129, col: 16, offset: 41357},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1129, col: 16, offset: 41357},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1129, col: 40, offset: 41381},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1129, col: 64, offset: 41405},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1131, col: 1, offset: 41423},
			expr: &litMatcher{
				pos:        position{line: 1131, col: 32, offset: 41454},
				val:        "+",
				ignoreCase: false,
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1133, col: 1, offset: 41459},
			expr: &actionExpr{
				pos: position{line: 1133, col: 26, offset: 41484},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1133, col: 26, offset: 41484},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1133, col: 26, offset: 41484},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1133, col: 54, offset: 41512},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1133, col: 63, offset: 41521},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1133, col: 93, offset: 41551},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1133, col: 121, offset: 41579},
							expr: &ruleRefExpr{
								pos:  position{line: 1133, col: 122, offset: 41580},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1137, col: 1, offset: 41679},
			expr: &choiceExpr{
				pos: position{line: 1137, col: 33, offset: 41711},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1137, col: 34, offset: 41712},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1137, col: 34, offset: 41712},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1137, col: 35, offset: 41713},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1137, col: 35, offset: 41713},
											expr: &ruleRefExpr{
												pos:  position{line: 1137, col: 36, offset: 41714},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1137, col: 64, offset: 41742},
											expr: &ruleRefExpr{
												pos:  position{line: 1137, col: 65, offset: 41743},
												name: "WS",
											},
										},
										&notExpr{
											pos: position{line: 1137, col: 68, offset: 41746},
											expr: &ruleRefExpr{
												pos:  position{line: 1137, col: 69, offset: 41747},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 1137, col: 77, offset: 41755,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1137, col: 80, offset: 41758},
									expr: &seqExpr{
										pos: position{line: 1137, col: 81, offset: 41759},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1137, col: 81, offset: 41759},
												expr: &seqExpr{
													pos: position{line: 1137, col: 83, offset: 41761},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1137, col: 83, offset: 41761},
															expr: &ruleRefExpr{
																pos:  position{line: 1137, col: 83, offset: 41761},
																name: "WS",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1137, col: 87, offset: 41765},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1137, col: 116, offset: 41794},
												expr: &ruleRefExpr{
													pos:  position{line: 1137, col: 117, offset: 41795},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1137, col: 145, offset: 41823},
												expr: &ruleRefExpr{
													pos:  position{line: 1137, col: 146, offset: 41824},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 1137, col: 154, offset: 41832,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1139, col: 7, offset: 41974},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1139, col: 8, offset: 41975},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1139, col: 8, offset: 41975},
									expr: &ruleRefExpr{
										pos:  position{line: 1139, col: 9, offset: 41976},
										name: "WS",
									},
								},
								&notExpr{
									pos: position{line: 1139, col: 12, offset: 41979},
									expr: &ruleRefExpr{
										pos:  position{line: 1139, col: 13, offset: 41980},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1139, col: 21, offset: 41988},
									expr: &ruleRefExpr{
										pos:  position{line: 1139, col: 22, offset: 41989},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1139, col: 50, offset: 42017,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1143, col: 1, offset: 42099},
			expr: &litMatcher{
				pos:        position{line: 1143, col: 32, offset: 42130},
				val:        "+++",
				ignoreCase: false,
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1145, col: 1, offset: 42137},
			expr: &actionExpr{
				pos: position{line: 1145, col: 26, offset: 42162},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1145, col: 26, offset: 42162},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1145, col: 26, offset: 42162},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1145, col: 54, offset: 42190},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1145, col: 63, offset: 42199},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1145, col: 93, offset: 42229},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1145, col: 121, offset: 42257},
							expr: &ruleRefExpr{
								pos:  position{line: 1145, col: 122, offset: 42258},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1149, col: 1, offset: 42357},
			expr: &choiceExpr{
				pos: position{line: 1149, col: 33, offset: 42389},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1149, col: 34, offset: 42390},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1149, col: 34, offset: 42390},
							expr: &seqExpr{
								pos: position{line: 1149, col: 35, offset: 42391},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1149, col: 35, offset: 42391},
										expr: &ruleRefExpr{
											pos:  position{line: 1149, col: 36, offset: 42392},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1149, col: 64, offset: 42420,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1151, col: 7, offset: 42585},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1151, col: 7, offset: 42585},
							expr: &seqExpr{
								pos: position{line: 1151, col: 8, offset: 42586},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1151, col: 8, offset: 42586},
										expr: &ruleRefExpr{
											pos:  position{line: 1151, col: 9, offset: 42587},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1151, col: 12, offset: 42590},
										expr: &ruleRefExpr{
											pos:  position{line: 1151, col: 13, offset: 42591},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1151, col: 21, offset: 42599},
										expr: &ruleRefExpr{
											pos:  position{line: 1151, col: 22, offset: 42600},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1151, col: 50, offset: 42628,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1155, col: 1, offset: 42711},
			expr: &choiceExpr{
				pos: position{line: 1155, col: 21, offset: 42731},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1155, col: 21, offset: 42731},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1155, col: 21, offset: 42731},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1155, col: 21, offset: 42731},
									val:        "pass:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1155, col: 30, offset: 42740},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1155, col: 38, offset: 42748},
										expr: &ruleRefExpr{
											pos:  position{line: 1155, col: 39, offset: 42749},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1155, col: 67, offset: 42777},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1157, col: 5, offset: 42867},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1157, col: 5, offset: 42867},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1157, col: 5, offset: 42867},
									val:        "pass:q[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1157, col: 15, offset: 42877},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1157, col: 23, offset: 42885},
										expr: &choiceExpr{
											pos: position{line: 1157, col: 24, offset: 42886},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1157, col: 24, offset: 42886},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1157, col: 37, offset: 42899},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1157, col: 65, offset: 42927},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1161, col: 1, offset: 43017},
			expr: &choiceExpr{
				pos: position{line: 1161, col: 31, offset: 43047},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1161, col: 31, offset: 43047},
						name: "Alphanums",
					},
					&ruleRefExpr{
						pos:  position{line: 1161, col: 43, offset: 43059},
						name: "Spaces",
					},
					&actionExpr{
						pos: position{line: 1161, col: 52, offset: 43068},
						run: (*parser).callonPassthroughMacroCharacter4,
						expr: &seqExpr{
							pos: position{line: 1161, col: 53, offset: 43069},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1161, col: 53, offset: 43069},
									expr: &litMatcher{
										pos:        position{line: 1161, col: 54, offset: 43070},
										val:        "]",
										ignoreCase: false,
									},
								},
								&anyMatcher{
									line: 1161, col: 58, offset: 43074,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1168, col: 1, offset: 43244},
			expr: &choiceExpr{
				pos: position{line: 1168, col: 19, offset: 43262},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1168, col: 19, offset: 43262},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1168, col: 44, offset: 43287},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1170, col: 1, offset: 43312},
			expr: &choiceExpr{
				pos: position{line: 1170, col: 27, offset: 43338},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1170, col: 27, offset: 43338},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1170, col: 27, offset: 43338},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1170, col: 27, offset: 43338},
									val:        "<<",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1170, col: 32, offset: 43343},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1170, col: 36, offset: 43347},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1170, col: 40, offset: 43351},
									expr: &ruleRefExpr{
										pos:  position{line: 1170, col: 40, offset: 43351},
										name: "WS",
									},
								},
								&litMatcher{
									pos:        position{line: 1170, col: 44, offset: 43355},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1170, col: 48, offset: 43359},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1170, col: 55, offset: 43366},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1170, col: 76, offset: 43387},
									val:        ">>",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1172, col: 5, offset: 43470},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1172, col: 5, offset: 43470},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1172, col: 5, offset: 43470},
									val:        "<<",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1172, col: 10, offset: 43475},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1172, col: 14, offset: 43479},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1172, col: 18, offset: 43483},
									val:        ">>",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 1176, col: 1, offset: 43555},
			expr: &actionExpr{
				pos: position{line: 1176, col: 27, offset: 43581},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1176, col: 27, offset: 43581},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1176, col: 27, offset: 43581},
							val:        "xref:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1176, col: 35, offset: 43589},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1176, col: 40, offset: 43594},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1176, col: 54, offset: 43608},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1176, col: 72, offset: 43626},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1180, col: 1, offset: 43756},
			expr: &actionExpr{
				pos: position{line: 1180, col: 24, offset: 43779},
				run: (*parser).callonCrossReferenceLabel1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1180, col: 24, offset: 43779},
					expr: &choiceExpr{
						pos: position{line: 1180, col: 25, offset: 43780},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1180, col: 25, offset: 43780},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1180, col: 37, offset: 43792},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1180, col: 47, offset: 43802},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1180, col: 47, offset: 43802},
										expr: &litMatcher{
											pos:        position{line: 1180, col: 48, offset: 43803},
											val:        ">>",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1180, col: 54, offset: 43809,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 1187, col: 1, offset: 43951},
			expr: &choiceExpr{
				pos: position{line: 1187, col: 9, offset: 43959},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1187, col: 9, offset: 43959},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1187, col: 24, offset: 43974},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1190, col: 1, offset: 44055},
			expr: &actionExpr{
				pos: position{line: 1190, col: 17, offset: 44071},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1190, col: 17, offset: 44071},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1190, col: 17, offset: 44071},
							val:        "link:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1190, col: 25, offset: 44079},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1190, col: 30, offset: 44084},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1190, col: 30, offset: 44084},
										name: "Location",
									},
									&ruleRefExpr{
										pos:  position{line: 1190, col: 41, offset: 44095},
										name: "FileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1190, col: 55, offset: 44109},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1190, col: 73, offset: 44127},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1194, col: 1, offset: 44245},
			expr: &actionExpr{
				pos: position{line: 1194, col: 17, offset: 44261},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1194, col: 17, offset: 44261},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1194, col: 17, offset: 44261},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1194, col: 22, offset: 44266},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1194, col: 32, offset: 44276},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1194, col: 49, offset: 44293},
								expr: &ruleRefExpr{
									pos:  position{line: 1194, col: 50, offset: 44294},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1198, col: 1, offset: 44387},
			expr: &choiceExpr{
				pos: position{line: 1198, col: 19, offset: 44405},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1198, col: 19, offset: 44405},
						name: "TextOnlyLinkAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 1198, col: 44, offset: 44430},
						name: "TextAndMoreLinkAttributes",
					},
				},
			},
		},
		{
			name: "TextOnlyLinkAttributes",
			pos:  position{line: 1200, col: 1, offset: 44457},
			expr: &actionExpr{
				pos: position{line: 1200, col: 27, offset: 44483},
				run: (*parser).callonTextOnlyLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1200, col: 27, offset: 44483},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1200, col: 27, offset: 44483},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1200, col: 31, offset: 44487},
							label: "text",
							expr: &zeroOrOneExpr{
								pos: position{line: 1200, col: 36, offset: 44492},
								expr: &choiceExpr{
									pos: position{line: 1202, col: 5, offset: 44535},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 1202, col: 5, offset: 44535},
											run: (*parser).callonTextOnlyLinkAttributes7,
											expr: &seqExpr{
												pos: position{line: 1202, col: 5, offset: 44535},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 1202, col: 5, offset: 44535},
														val:        "\"",
														ignoreCase: false,
													},
													&labeledExpr{
														pos:   position{line: 1202, col: 10, offset: 44540},
														label: "elements",
														expr: &oneOrMoreExpr{
															pos: position{line: 1202, col: 19, offset: 44549},
															expr: &seqExpr{
																pos: position{line: 1202, col: 20, offset: 44550},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1202, col: 20, offset: 44550},
																		expr: &litMatcher{
																			pos:        position{line: 1202, col: 21, offset: 44551},
																			val:        "\"",
																			ignoreCase: false,
																		},
																	},
																	&notExpr{
																		pos: position{line: 1202, col: 26, offset: 44556},
																		expr: &litMatcher{
																			pos:        position{line: 1202, col: 27, offset: 44557},
																			val:        "]",
																			ignoreCase: false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 1202, col: 32, offset: 44562},
																		alternatives: []interface{}{
																			&ruleRefExpr{
																				pos:  position{line: 1202, col: 32, offset: 44562},
																				name: "SimpleWord",
																			},
																			&ruleRefExpr{
																				pos:  position{line: 1202, col: 45, offset: 44575},
																				name: "Spaces",
																			},
																			&ruleRefExpr{
																				pos:  position{line: 1202, col: 54, offset: 44584},
																				name: "QuotedText",
																			},
																			&ruleRefExpr{
																				pos:  position{line: 1202, col: 67, offset: 44597},
																				name: "AnyChar",
																			},
																		},
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 1202, col: 78, offset: 44608},
														val:        "\"",
														ignoreCase: false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 1202, col: 83, offset: 44613},
														expr: &ruleRefExpr{
															pos:  position{line: 1202, col: 83, offset: 44613},
															name: "Spaces",
														},
													},
													&andExpr{
														pos: position{line: 1202, col: 91, offset: 44621},
														expr: &notExpr{
															pos: position{line: 1202, col: 93, offset: 44623},
															expr: &litMatcher{
																pos:        position{line: 1202, col: 94, offset: 44624},
																val:        "=",
																ignoreCase: false,
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 1206, col: 5, offset: 44749},
											run: (*parser).callonTextOnlyLinkAttributes28,
											expr: &seqExpr{
												pos: position{line: 1206, col: 5, offset: 44749},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 1206, col: 5, offset: 44749},
														label: "elements",
														expr: &oneOrMoreExpr{
															pos: position{line: 1206, col: 14, offset: 44758},
															expr: &seqExpr{
																pos: position{line: 1206, col: 15, offset: 44759},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1206, col: 15, offset: 44759},
																		expr: &litMatcher{
																			pos:        position{line: 1206, col: 16, offset: 44760},
																			val:        "=",
																			ignoreCase: false,
																		},
																	},
																	&notExpr{
																		pos: position{line: 1206, col: 20, offset: 44764},
																		expr: &litMatcher{
																			pos:        position{line: 1206, col: 21, offset: 44765},
																			val:        "]",
																			ignoreCase: false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 1206, col: 26, offset: 44770},
																		alternatives: []interface{}{
																			&ruleRefExpr{
																				pos:  position{line: 1206, col: 26, offset: 44770},
																				name: "SimpleWord",
																			},
																			&ruleRefExpr{
																				pos:  position{line: 1206, col: 39, offset: 44783},
																				name: "Spaces",
																			},
																			&ruleRefExpr{
																				pos:  position{line: 1206, col: 48, offset: 44792},
																				name: "QuotedText",
																			},
																			&ruleRefExpr{
																				pos:  position{line: 1206, col: 61, offset: 44805},
																				name: "AnyChar",
																			},
																		},
																	},
																},
															},
														},
													},
													&andExpr{
														pos: position{line: 1206, col: 72, offset: 44816},
														expr: &notExpr{
															pos: position{line: 1206, col: 74, offset: 44818},
															expr: &litMatcher{
																pos:        position{line: 1206, col: 75, offset: 44819},
																val:        "=",
																ignoreCase: false,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1208, col: 9, offset: 44899},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TextAndMoreLinkAttributes",
			pos:  position{line: 1212, col: 1, offset: 44965},
			expr: &actionExpr{
				pos: position{line: 1212, col: 30, offset: 44994},
				run: (*parser).callonTextAndMoreLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1212, col: 30, offset: 44994},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1212, col: 30, offset: 44994},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1212, col: 34, offset: 44998},
							label: "text",
							expr: &zeroOrOneExpr{
								pos: position{line: 1212, col: 39, offset: 45003},
								expr: &choiceExpr{
									pos: position{line: 1214, col: 5, offset: 45046},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 1214, col: 5, offset: 45046},
											run: (*parser).callonTextAndMoreLinkAttributes7,
											expr: &seqExpr{
												pos: position{line: 1214, col: 5, offset: 45046},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 1214, col: 5, offset: 45046},
														val:        "\"",
														ignoreCase: false,
													},
													&labeledExpr{
														pos:   position{line: 1214, col: 10, offset: 45051},
														label: "elements",
														expr: &oneOrMoreExpr{
															pos: position{line: 1214, col: 19, offset: 45060},
															expr: &seqExpr{
																pos: position{line: 1214, col: 20, offset: 45061},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1214, col: 20, offset: 45061},
																		expr: &litMatcher{
																			pos:        position{line: 1214, col: 21, offset: 45062},
																			val:        "\"",
																			ignoreCase: false,
																		},
																	},
																	&notExpr{
																		pos: position{line: 1214, col: 26, offset: 45067},
																		expr: &litMatcher{
																			pos:        position{line: 1214, col: 27, offset: 45068},
																			val:        "]",
																			ignoreCase: false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 1214, col: 32, offset: 45073},
																		alternatives: []interface{}{
																			&ruleRefExpr{
																				pos:  position{line: 1214, col: 32, offset: 45073},
																				name: "SimpleWord",
																			},
																			&ruleRefExpr{
																				pos:  position{line: 1214, col: 45, offset: 45086},
																				name: "Spaces",
																			},
																			&ruleRefExpr{
																				pos:  position{line: 1214, col: 54, offset: 45095},
																				name: "QuotedText",
																			},
																			&ruleRefExpr{
																				pos:  position{line: 1214, col: 67, offset: 45108},
																				name: "AnyChar",
																			},
																		},
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 1214, col: 78, offset: 45119},
														val:        "\"",
														ignoreCase: false,
													},
													&andExpr{
														pos: position{line: 1214, col: 83, offset: 45124},
														expr: &notExpr{
															pos: position{line: 1214, col: 85, offset: 45126},
															expr: &litMatcher{
																pos:        position{line: 1214, col: 86, offset: 45127},
																val:        "=",
																ignoreCase: false,
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 1218, col: 5, offset: 45252},
											run: (*parser).callonTextAndMoreLinkAttributes26,
											expr: &seqExpr{
												pos: position{line: 1218, col: 5, offset: 45252},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 1218, col: 5, offset: 45252},
														label: "elements",
														expr: &oneOrMoreExpr{
															pos: position{line: 1218, col: 14, offset: 45261},
															expr: &seqExpr{
																pos: position{line: 1218, col: 15, offset: 45262},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1218, col: 15, offset: 45262},
																		expr: &litMatcher{
																			pos:        position{line: 1218, col: 16, offset: 45263},
																			val:        ",",
																			ignoreCase: false,
																		},
																	},
																	&notExpr{
																		pos: position{line: 1218, col: 20, offset: 45267},
																		expr: &litMatcher{
																			pos:        position{line: 1218, col: 21, offset: 45268},
																			val:        "=",
																			ignoreCase: false,
																		},
																	},
																	&notExpr{
																		pos: position{line: 1218, col: 25, offset: 45272},
																		expr: &litMatcher{
																			pos:        position{line: 1218, col: 26, offset: 45273},
																			val:        "]",
																			ignoreCase: false,
																		},
																	},
																	&notExpr{
																		pos: position{line: 1218, col: 30, offset: 45277},
																		expr: &litMatcher{
																			pos:        position{line: 1218, col: 31, offset: 45278},
																			val:        "\"",
																			ignoreCase: false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 1218, col: 37, offset: 45284},
																		alternatives: []interface{}{
																			&ruleRefExpr{
																				pos:  position{line: 1218, col: 37, offset: 45284},
																				name: "SimpleWord",
																			},
																			&ruleRefExpr{
																				pos:  position{line: 1218, col: 50, offset: 45297},
																				name: "Spaces",
																			},
																			&ruleRefExpr{
																				pos:  position{line: 1218, col: 59, offset: 45306},
																				name: "QuotedText",
																			},
																			&ruleRefExpr{
																				pos:  position{line: 1218, col: 72, offset: 45319},
																				name: "AnyChar",
																			},
																		},
																	},
																},
															},
														},
													},
													&andExpr{
														pos: position{line: 1218, col: 83, offset: 45330},
														expr: &notExpr{
															pos: position{line: 1218, col: 85, offset: 45332},
															expr: &litMatcher{
																pos:        position{line: 1218, col: 86, offset: 45333},
																val:        "=",
																ignoreCase: false,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1220, col: 9, offset: 45413},
							expr: &litMatcher{
								pos:        position{line: 1220, col: 9, offset: 45413},
								val:        ",",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1220, col: 14, offset: 45418},
							expr: &ruleRefExpr{
								pos:  position{line: 1220, col: 14, offset: 45418},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 1220, col: 18, offset: 45422},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1220, col: 29, offset: 45433},
								expr: &ruleRefExpr{
									pos:  position{line: 1220, col: 30, offset: 45434},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1220, col: 49, offset: 45453},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "InlineLinks",
			pos:  position{line: 1225, col: 1, offset: 45609},
			expr: &actionExpr{
				pos: position{line: 1226, col: 5, offset: 45629},
				run: (*parser).callonInlineLinks1,
				expr: &seqExpr{
					pos: position{line: 1226, col: 5, offset: 45629},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1226, col: 5, offset: 45629},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1226, col: 14, offset: 45638},
								expr: &choiceExpr{
									pos: position{line: 1226, col: 15, offset: 45639},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1226, col: 15, offset: 45639},
											name: "SimpleWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1227, col: 11, offset: 45660},
											name: "Spaces",
										},
										&ruleRefExpr{
											pos:  position{line: 1228, col: 11, offset: 45678},
											name: "ResolvedLink",
										},
										&ruleRefExpr{
											pos:  position{line: 1229, col: 11, offset: 45702},
											name: "Parenthesis",
										},
										&ruleRefExpr{
											pos:  position{line: 1230, col: 11, offset: 45724},
											name: "AnyChars",
										},
										&ruleRefExpr{
											pos:  position{line: 1231, col: 11, offset: 45743},
											name: "AnyChar",
										},
										&ruleRefExpr{
											pos:  position{line: 1232, col: 11, offset: 45761},
											name: "Newline",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1232, col: 21, offset: 45771},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ResolvedLink",
			pos:  position{line: 1236, col: 1, offset: 45841},
			expr: &choiceExpr{
				pos: position{line: 1236, col: 17, offset: 45857},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1236, col: 17, offset: 45857},
						name: "ResolvedRelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1236, col: 40, offset: 45880},
						name: "ResolvedExternalLink",
					},
				},
			},
		},
		{
			name: "ResolvedRelativeLink",
			pos:  position{line: 1239, col: 1, offset: 46016},
			expr: &actionExpr{
				pos: position{line: 1239, col: 25, offset: 46040},
				run: (*parser).callonResolvedRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1239, col: 25, offset: 46040},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1239, col: 25, offset: 46040},
							val:        "link:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1239, col: 33, offset: 46048},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1239, col: 38, offset: 46053},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1239, col: 38, offset: 46053},
										name: "ResolvedLocation",
									},
									&ruleRefExpr{
										pos:  position{line: 1239, col: 57, offset: 46072},
										name: "ResolvedFileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1239, col: 79, offset: 46094},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1239, col: 97, offset: 46112},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedExternalLink",
			pos:  position{line: 1243, col: 1, offset: 46230},
			expr: &actionExpr{
				pos: position{line: 1243, col: 25, offset: 46254},
				run: (*parser).callonResolvedExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1243, col: 25, offset: 46254},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1243, col: 25, offset: 46254},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1243, col: 30, offset: 46259},
								name: "ResolvedLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1243, col: 48, offset: 46277},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1243, col: 65, offset: 46294},
								expr: &ruleRefExpr{
									pos:  position{line: 1243, col: 66, offset: 46295},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedLink",
			pos:  position{line: 1247, col: 1, offset: 46388},
			expr: &choiceExpr{
				pos: position{line: 1247, col: 15, offset: 46402},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1247, col: 15, offset: 46402},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1247, col: 30, offset: 46417},
						name: "ExternalQuotedLink",
					},
				},
			},
		},
		{
			name: "ExternalQuotedLink",
			pos:  position{line: 1249, col: 1, offset: 46437},
			expr: &actionExpr{
				pos: position{line: 1249, col: 23, offset: 46459},
				run: (*parser).callonExternalQuotedLink1,
				expr: &seqExpr{
					pos: position{line: 1249, col: 23, offset: 46459},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1249, col: 23, offset: 46459},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1249, col: 28, offset: 46464},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1249, col: 38, offset: 46474},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1249, col: 56, offset: 46492},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1256, col: 1, offset: 46827},
			expr: &actionExpr{
				pos: position{line: 1256, col: 15, offset: 46841},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1256, col: 15, offset: 46841},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1256, col: 15, offset: 46841},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1256, col: 26, offset: 46852},
								expr: &ruleRefExpr{
									pos:  position{line: 1256, col: 27, offset: 46853},
									name: "ElementAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1256, col: 47, offset: 46873},
							val:        "image::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1256, col: 57, offset: 46883},
							label: "path",
							expr: &choiceExpr{
								pos: position{line: 1256, col: 63, offset: 46889},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1256, col: 63, offset: 46889},
										name: "Location",
									},
									&ruleRefExpr{
										pos:  position{line: 1256, col: 74, offset: 46900},
										name: "FileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1256, col: 88, offset: 46914},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1256, col: 106, offset: 46932},
								name: "ImageAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1256, col: 123, offset: 46949},
							expr: &ruleRefExpr{
								pos:  position{line: 1256, col: 123, offset: 46949},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1256, col: 127, offset: 46953},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1260, col: 1, offset: 47072},
			expr: &actionExpr{
				pos: position{line: 1260, col: 16, offset: 47087},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1260, col: 16, offset: 47087},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1260, col: 16, offset: 47087},
							val:        "image:",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1260, col: 25, offset: 47096},
							expr: &litMatcher{
								pos:        position{line: 1260, col: 26, offset: 47097},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1260, col: 30, offset: 47101},
							label: "path",
							expr: &choiceExpr{
								pos: position{line: 1260, col: 36, offset: 47107},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1260, col: 36, offset: 47107},
										name: "Location",
									},
									&ruleRefExpr{
										pos:  position{line: 1260, col: 47, offset: 47118},
										name: "FileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1260, col: 61, offset: 47132},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1260, col: 79, offset: 47150},
								name: "ImageAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAttributes",
			pos:  position{line: 1264, col: 1, offset: 47271},
			expr: &actionExpr{
				pos: position{line: 1264, col: 20, offset: 47290},
				run: (*parser).callonImageAttributes1,
				expr: &seqExpr{
					pos: position{line: 1264, col: 20, offset: 47290},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1264, col: 20, offset: 47290},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1264, col: 24, offset: 47294},
							label: "alt",
							expr: &zeroOrOneExpr{
								pos: position{line: 1264, col: 28, offset: 47298},
								expr: &ruleRefExpr{
									pos:  position{line: 1264, col: 29, offset: 47299},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1264, col: 56, offset: 47326},
							expr: &litMatcher{
								pos:        position{line: 1264, col: 56, offset: 47326},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1264, col: 61, offset: 47331},
							label: "width",
							expr: &zeroOrOneExpr{
								pos: position{line: 1264, col: 67, offset: 47337},
								expr: &ruleRefExpr{
									pos:  position{line: 1264, col: 68, offset: 47338},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1264, col: 95, offset: 47365},
							expr: &litMatcher{
								pos:        position{line: 1264, col: 95, offset: 47365},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1264, col: 100, offset: 47370},
							label: "height",
							expr: &zeroOrOneExpr{
								pos: position{line: 1264, col: 107, offset: 47377},
								expr: &ruleRefExpr{
									pos:  position{line: 1264, col: 108, offset: 47378},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1264, col: 135, offset: 47405},
							expr: &litMatcher{
								pos:        position{line: 1264, col: 135, offset: 47405},
								val:        ",",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1264, col: 140, offset: 47410},
							expr: &ruleRefExpr{
								pos:  position{line: 1264, col: 140, offset: 47410},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 1264, col: 144, offset: 47414},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1264, col: 155, offset: 47425},
								expr: &ruleRefExpr{
									pos:  position{line: 1264, col: 156, offset: 47426},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1264, col: 175, offset: 47445},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1271, col: 1, offset: 47735},
			expr: &choiceExpr{
				pos: position{line: 1271, col: 19, offset: 47753},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1271, col: 19, offset: 47753},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1271, col: 19, offset: 47753},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1271, col: 19, offset: 47753},
									val:        "footnote:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1271, col: 32, offset: 47766},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1271, col: 41, offset: 47775},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1271, col: 58, offset: 47792},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1273, col: 5, offset: 47860},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1273, col: 5, offset: 47860},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1273, col: 5, offset: 47860},
									val:        "footnote:",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1273, col: 17, offset: 47872},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1273, col: 22, offset: 47877},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1273, col: 35, offset: 47890},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1273, col: 39, offset: 47894},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 1273, col: 47, offset: 47902},
										expr: &ruleRefExpr{
											pos:  position{line: 1273, col: 48, offset: 47903},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1273, col: 66, offset: 47921},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1277, col: 1, offset: 47982},
			expr: &actionExpr{
				pos: position{line: 1277, col: 16, offset: 47997},
				run: (*parser).callonFootnoteRef1,
				expr: &ruleRefExpr{
					pos:  position{line: 1277, col: 16, offset: 47997},
					name: "Alphanums",
				},
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1281, col: 1, offset: 48044},
			expr: &actionExpr{
				pos: position{line: 1281, col: 20, offset: 48063},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1281, col: 20, offset: 48063},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1281, col: 29, offset: 48072},
						expr: &seqExpr{
							pos: position{line: 1281, col: 30, offset: 48073},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1281, col: 30, offset: 48073},
									expr: &litMatcher{
										pos:        position{line: 1281, col: 31, offset: 48074},
										val:        "]",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 1281, col: 35, offset: 48078},
									expr: &ruleRefExpr{
										pos:  position{line: 1281, col: 36, offset: 48079},
										name: "EOL",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1281, col: 40, offset: 48083},
									expr: &ruleRefExpr{
										pos:  position{line: 1281, col: 40, offset: 48083},
										name: "WS",
									},
								},
								&notExpr{
									pos: position{line: 1281, col: 44, offset: 48087},
									expr: &ruleRefExpr{
										pos:  position{line: 1281, col: 45, offset: 48088},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1281, col: 61, offset: 48104},
									name: "InlineElement",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1281, col: 75, offset: 48118},
									expr: &ruleRefExpr{
										pos:  position{line: 1281, col: 75, offset: 48118},
										name: "WS",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1288, col: 1, offset: 48432},
			expr: &actionExpr{
				pos: position{line: 1288, col: 19, offset: 48450},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1288, col: 19, offset: 48450},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1288, col: 19, offset: 48450},
							expr: &ruleRefExpr{
								pos:  position{line: 1288, col: 20, offset: 48451},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1289, col: 5, offset: 48480},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1289, col: 12, offset: 48487},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1289, col: 12, offset: 48487},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1290, col: 11, offset: 48510},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1291, col: 11, offset: 48534},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1292, col: 11, offset: 48558},
										name: "VerseBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1293, col: 11, offset: 48580},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1294, col: 11, offset: 48602},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1295, col: 11, offset: 48625},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1296, col: 11, offset: 48653},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1297, col: 11, offset: 48669},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1301, col: 1, offset: 48710},
			expr: &choiceExpr{
				pos: position{line: 1301, col: 19, offset: 48728},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1301, col: 19, offset: 48728},
						name: "LiteralBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1302, col: 19, offset: 48769},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1303, col: 19, offset: 48809},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1304, col: 19, offset: 48850},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1305, col: 19, offset: 48891},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1306, col: 19, offset: 48932},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1307, col: 19, offset: 48970},
						name: "SidebarBlockDelimiter",
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1313, col: 1, offset: 49189},
			expr: &seqExpr{
				pos: position{line: 1313, col: 25, offset: 49213},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1313, col: 25, offset: 49213},
						val:        "```",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1313, col: 31, offset: 49219},
						expr: &ruleRefExpr{
							pos:  position{line: 1313, col: 31, offset: 49219},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1313, col: 35, offset: 49223},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1315, col: 1, offset: 49228},
			expr: &actionExpr{
				pos: position{line: 1315, col: 16, offset: 49243},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1315, col: 16, offset: 49243},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1315, col: 16, offset: 49243},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1315, col: 27, offset: 49254},
								expr: &ruleRefExpr{
									pos:  position{line: 1315, col: 28, offset: 49255},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1315, col: 48, offset: 49275},
							name: "FencedBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1315, col: 69, offset: 49296},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1315, col: 77, offset: 49304},
								expr: &ruleRefExpr{
									pos:  position{line: 1315, col: 78, offset: 49305},
									name: "FencedBlockContent",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1315, col: 100, offset: 49327},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1315, col: 100, offset: 49327},
									name: "FencedBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1315, col: 123, offset: 49350},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockContent",
			pos:  position{line: 1319, col: 1, offset: 49458},
			expr: &choiceExpr{
				pos: position{line: 1319, col: 23, offset: 49480},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1319, col: 23, offset: 49480},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1319, col: 35, offset: 49492},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1319, col: 51, offset: 49508},
						name: "ListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 1319, col: 62, offset: 49519},
						name: "FencedBlockParagraph",
					},
				},
			},
		},
		{
			name: "FencedBlockParagraph",
			pos:  position{line: 1322, col: 1, offset: 49559},
			expr: &actionExpr{
				pos: position{line: 1322, col: 25, offset: 49583},
				run: (*parser).callonFencedBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1322, col: 25, offset: 49583},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1322, col: 31, offset: 49589},
						expr: &ruleRefExpr{
							pos:  position{line: 1322, col: 32, offset: 49590},
							name: "FencedBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockParagraphLine",
			pos:  position{line: 1326, col: 1, offset: 49703},
			expr: &actionExpr{
				pos: position{line: 1326, col: 29, offset: 49731},
				run: (*parser).callonFencedBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1326, col: 29, offset: 49731},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1326, col: 29, offset: 49731},
							expr: &ruleRefExpr{
								pos:  position{line: 1326, col: 30, offset: 49732},
								name: "FencedBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1326, col: 51, offset: 49753},
							expr: &ruleRefExpr{
								pos:  position{line: 1326, col: 52, offset: 49754},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1326, col: 62, offset: 49764},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1326, col: 68, offset: 49770},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1333, col: 1, offset: 50008},
			expr: &seqExpr{
				pos: position{line: 1333, col: 26, offset: 50033},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1333, col: 26, offset: 50033},
						val:        "----",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1333, col: 33, offset: 50040},
						expr: &ruleRefExpr{
							pos:  position{line: 1333, col: 33, offset: 50040},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1333, col: 37, offset: 50044},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1335, col: 1, offset: 50049},
			expr: &actionExpr{
				pos: position{line: 1335, col: 17, offset: 50065},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1335, col: 17, offset: 50065},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1335, col: 17, offset: 50065},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1335, col: 28, offset: 50076},
								expr: &ruleRefExpr{
									pos:  position{line: 1335, col: 29, offset: 50077},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1335, col: 49, offset: 50097},
							name: "ListingBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1335, col: 71, offset: 50119},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1335, col: 79, offset: 50127},
								expr: &ruleRefExpr{
									pos:  position{line: 1335, col: 80, offset: 50128},
									name: "ListingBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1335, col: 103, offset: 50151},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1335, col: 103, offset: 50151},
									name: "ListingBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1335, col: 127, offset: 50175},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockElement",
			pos:  position{line: 1339, col: 1, offset: 50284},
			expr: &choiceExpr{
				pos: position{line: 1339, col: 24, offset: 50307},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1339, col: 24, offset: 50307},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1339, col: 40, offset: 50323},
						name: "ListingBlockParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 1339, col: 64, offset: 50347},
						name: "BlankLine",
					},
				},
			},
		},
		{
			name: "ListingBlockParagraph",
			pos:  position{line: 1341, col: 1, offset: 50358},
			expr: &actionExpr{
				pos: position{line: 1341, col: 26, offset: 50383},
				run: (*parser).callonListingBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1341, col: 26, offset: 50383},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1341, col: 32, offset: 50389},
						expr: &ruleRefExpr{
							pos:  position{line: 1341, col: 33, offset: 50390},
							name: "ListingBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockParagraphLine",
			pos:  position{line: 1345, col: 1, offset: 50509},
			expr: &actionExpr{
				pos: position{line: 1345, col: 30, offset: 50538},
				run: (*parser).callonListingBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1345, col: 30, offset: 50538},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1345, col: 30, offset: 50538},
							expr: &ruleRefExpr{
								pos:  position{line: 1345, col: 31, offset: 50539},
								name: "ListingBlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1345, col: 53, offset: 50561},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1345, col: 59, offset: 50567},
								run: (*parser).callonListingBlockParagraphLine6,
								expr: &seqExpr{
									pos: position{line: 1345, col: 59, offset: 50567},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1345, col: 59, offset: 50567},
											expr: &ruleRefExpr{
												pos:  position{line: 1345, col: 60, offset: 50568},
												name: "EOF",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1345, col: 64, offset: 50572},
											expr: &choiceExpr{
												pos: position{line: 1345, col: 65, offset: 50573},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1345, col: 65, offset: 50573},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1345, col: 77, offset: 50585},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 1345, col: 87, offset: 50595},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 1345, col: 87, offset: 50595},
																expr: &ruleRefExpr{
																	pos:  position{line: 1345, col: 88, offset: 50596},
																	name: "EOL",
																},
															},
															&anyMatcher{
																line: 1345, col: 92, offset: 50600,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1345, col: 128, offset: 50636},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1352, col: 1, offset: 50962},
			expr: &seqExpr{
				pos: position{line: 1352, col: 26, offset: 50987},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1352, col: 26, offset: 50987},
						val:        "====",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1352, col: 33, offset: 50994},
						expr: &ruleRefExpr{
							pos:  position{line: 1352, col: 33, offset: 50994},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1352, col: 37, offset: 50998},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1354, col: 1, offset: 51003},
			expr: &actionExpr{
				pos: position{line: 1354, col: 17, offset: 51019},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1354, col: 17, offset: 51019},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1354, col: 17, offset: 51019},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1354, col: 28, offset: 51030},
								expr: &ruleRefExpr{
									pos:  position{line: 1354, col: 29, offset: 51031},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1354, col: 49, offset: 51051},
							name: "ExampleBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1354, col: 71, offset: 51073},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1354, col: 79, offset: 51081},
								expr: &choiceExpr{
									pos: position{line: 1354, col: 80, offset: 51082},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1354, col: 80, offset: 51082},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 1354, col: 92, offset: 51094},
											name: "FileInclusion",
										},
										&ruleRefExpr{
											pos:  position{line: 1354, col: 108, offset: 51110},
											name: "ListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1354, col: 119, offset: 51121},
											name: "ExampleBlockParagraph",
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1354, col: 145, offset: 51147},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1354, col: 145, offset: 51147},
									name: "ExampleBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1354, col: 169, offset: 51171},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockParagraph",
			pos:  position{line: 1359, col: 1, offset: 51298},
			expr: &actionExpr{
				pos: position{line: 1359, col: 26, offset: 51323},
				run: (*parser).callonExampleBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1359, col: 26, offset: 51323},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1359, col: 32, offset: 51329},
						expr: &ruleRefExpr{
							pos:  position{line: 1359, col: 33, offset: 51330},
							name: "ExampleBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockParagraphLine",
			pos:  position{line: 1363, col: 1, offset: 51444},
			expr: &actionExpr{
				pos: position{line: 1363, col: 30, offset: 51473},
				run: (*parser).callonExampleBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1363, col: 30, offset: 51473},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1363, col: 30, offset: 51473},
							expr: &ruleRefExpr{
								pos:  position{line: 1363, col: 31, offset: 51474},
								name: "ExampleBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1363, col: 53, offset: 51496},
							expr: &ruleRefExpr{
								pos:  position{line: 1363, col: 54, offset: 51497},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1363, col: 64, offset: 51507},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1363, col: 70, offset: 51513},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1370, col: 1, offset: 51749},
			expr: &seqExpr{
				pos: position{line: 1370, col: 24, offset: 51772},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1370, col: 24, offset: 51772},
						val:        "____",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1370, col: 31, offset: 51779},
						expr: &ruleRefExpr{
							pos:  position{line: 1370, col: 31, offset: 51779},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1370, col: 35, offset: 51783},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1372, col: 1, offset: 51813},
			expr: &actionExpr{
				pos: position{line: 1372, col: 15, offset: 51827},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1372, col: 15, offset: 51827},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1372, col: 15, offset: 51827},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1372, col: 26, offset: 51838},
								expr: &ruleRefExpr{
									pos:  position{line: 1372, col: 27, offset: 51839},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1372, col: 47, offset: 51859},
							name: "QuoteBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1372, col: 67, offset: 51879},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1372, col: 75, offset: 51887},
								expr: &ruleRefExpr{
									pos:  position{line: 1372, col: 76, offset: 51888},
									name: "QuoteBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1372, col: 97, offset: 51909},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1372, col: 97, offset: 51909},
									name: "QuoteBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1372, col: 119, offset: 51931},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockElement",
			pos:  position{line: 1376, col: 1, offset: 52038},
			expr: &actionExpr{
				pos: position{line: 1377, col: 5, offset: 52064},
				run: (*parser).callonQuoteBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1377, col: 5, offset: 52064},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1377, col: 5, offset: 52064},
							expr: &ruleRefExpr{
								pos:  position{line: 1377, col: 6, offset: 52065},
								name: "QuoteBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1377, col: 26, offset: 52085},
							expr: &ruleRefExpr{
								pos:  position{line: 1377, col: 27, offset: 52086},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1377, col: 31, offset: 52090},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1377, col: 40, offset: 52099},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1377, col: 40, offset: 52099},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1378, col: 15, offset: 52124},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 1379, col: 15, offset: 52152},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1380, col: 15, offset: 52178},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1381, col: 15, offset: 52201},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1382, col: 15, offset: 52227},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1383, col: 15, offset: 52254},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1384, col: 15, offset: 52281},
										name: "CommentBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1385, col: 15, offset: 52308},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1386, col: 15, offset: 52340},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1387, col: 15, offset: 52366},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1388, col: 15, offset: 52393},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1389, col: 15, offset: 52414},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1390, col: 15, offset: 52442},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 1391, col: 15, offset: 52486},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 1392, col: 15, offset: 52524},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1393, col: 15, offset: 52565},
										name: "QuoteBlockParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockParagraph",
			pos:  position{line: 1397, col: 1, offset: 52624},
			expr: &actionExpr{
				pos: position{line: 1397, col: 24, offset: 52647},
				run: (*parser).callonQuoteBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1397, col: 24, offset: 52647},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1397, col: 30, offset: 52653},
						expr: &ruleRefExpr{
							pos:  position{line: 1397, col: 31, offset: 52654},
							name: "InlineElements",
						},
					},
				},
			},
		},
		{
			name: "VerseBlock",
			pos:  position{line: 1406, col: 1, offset: 53000},
			expr: &actionExpr{
				pos: position{line: 1406, col: 15, offset: 53014},
				run: (*parser).callonVerseBlock1,
				expr: &seqExpr{
					pos: position{line: 1406, col: 15, offset: 53014},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1406, col: 15, offset: 53014},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1406, col: 27, offset: 53026},
								name: "ElementAttributes",
							},
						},
						&andCodeExpr{
							pos: position{line: 1407, col: 5, offset: 53050},
							run: (*parser).callonVerseBlock5,
						},
						&ruleRefExpr{
							pos:  position{line: 1411, col: 5, offset: 53236},
							name: "QuoteBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1411, col: 25, offset: 53256},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1411, col: 33, offset: 53264},
								expr: &ruleRefExpr{
									pos:  position{line: 1411, col: 34, offset: 53265},
									name: "VerseBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1411, col: 55, offset: 53286},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1411, col: 55, offset: 53286},
									name: "QuoteBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1411, col: 77, offset: 53308},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockElement",
			pos:  position{line: 1415, col: 1, offset: 53423},
			expr: &choiceExpr{
				pos: position{line: 1415, col: 22, offset: 53444},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1415, col: 22, offset: 53444},
						name: "VerseFileInclude",
					},
					&ruleRefExpr{
						pos:  position{line: 1415, col: 41, offset: 53463},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1415, col: 53, offset: 53475},
						name: "VerseBlockParagraph",
					},
				},
			},
		},
		{
			name: "VerseFileInclude",
			pos:  position{line: 1417, col: 1, offset: 53496},
			expr: &actionExpr{
				pos: position{line: 1417, col: 21, offset: 53516},
				run: (*parser).callonVerseFileInclude1,
				expr: &seqExpr{
					pos: position{line: 1417, col: 21, offset: 53516},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1417, col: 21, offset: 53516},
							expr: &ruleRefExpr{
								pos:  position{line: 1417, col: 22, offset: 53517},
								name: "QuoteBlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1417, col: 42, offset: 53537},
							label: "include",
							expr: &ruleRefExpr{
								pos:  position{line: 1417, col: 51, offset: 53546},
								name: "FileInclusion",
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraph",
			pos:  position{line: 1422, col: 1, offset: 53608},
			expr: &actionExpr{
				pos: position{line: 1422, col: 24, offset: 53631},
				run: (*parser).callonVerseBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1422, col: 24, offset: 53631},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1422, col: 30, offset: 53637},
						expr: &ruleRefExpr{
							pos:  position{line: 1422, col: 31, offset: 53638},
							name: "VerseBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLine",
			pos:  position{line: 1426, col: 1, offset: 53728},
			expr: &actionExpr{
				pos: position{line: 1426, col: 28, offset: 53755},
				run: (*parser).callonVerseBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1426, col: 28, offset: 53755},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1426, col: 28, offset: 53755},
							expr: &ruleRefExpr{
								pos:  position{line: 1426, col: 29, offset: 53756},
								name: "QuoteBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1426, col: 49, offset: 53776},
							expr: &ruleRefExpr{
								pos:  position{line: 1426, col: 50, offset: 53777},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1426, col: 60, offset: 53787},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1426, col: 66, offset: 53793},
								run: (*parser).callonVerseBlockParagraphLine8,
								expr: &seqExpr{
									pos: position{line: 1426, col: 66, offset: 53793},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1426, col: 66, offset: 53793},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1426, col: 75, offset: 53802},
												expr: &ruleRefExpr{
													pos:  position{line: 1426, col: 76, offset: 53803},
													name: "VerseBlockParagraphLineElement",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1426, col: 109, offset: 53836},
											name: "EOL",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLineElement",
			pos:  position{line: 1432, col: 1, offset: 53932},
			expr: &actionExpr{
				pos: position{line: 1432, col: 35, offset: 53966},
				run: (*parser).callonVerseBlockParagraphLineElement1,
				expr: &seqExpr{
					pos: position{line: 1432, col: 35, offset: 53966},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1432, col: 35, offset: 53966},
							expr: &ruleRefExpr{
								pos:  position{line: 1432, col: 36, offset: 53967},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 1432, col: 40, offset: 53971},
							expr: &ruleRefExpr{
								pos:  position{line: 1432, col: 41, offset: 53972},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 1433, col: 5, offset: 53987},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1433, col: 14, offset: 53996},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1433, col: 14, offset: 53996},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 1434, col: 11, offset: 54014},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 1435, col: 11, offset: 54037},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 1436, col: 11, offset: 54053},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1437, col: 11, offset: 54076},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 1438, col: 11, offset: 54102},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1439, col: 11, offset: 54124},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 1440, col: 11, offset: 54150},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1441, col: 11, offset: 54177},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1442, col: 11, offset: 54218},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 1443, col: 11, offset: 54245},
										name: "Parenthesis",
									},
									&ruleRefExpr{
										pos:  position{line: 1444, col: 11, offset: 54267},
										name: "AnyChars",
									},
									&ruleRefExpr{
										pos:  position{line: 1445, col: 11, offset: 54286},
										name: "AnyChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1452, col: 1, offset: 54515},
			expr: &seqExpr{
				pos: position{line: 1452, col: 26, offset: 54540},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1452, col: 26, offset: 54540},
						val:        "****",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1452, col: 33, offset: 54547},
						expr: &ruleRefExpr{
							pos:  position{line: 1452, col: 33, offset: 54547},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1452, col: 37, offset: 54551},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1454, col: 1, offset: 54556},
			expr: &actionExpr{
				pos: position{line: 1454, col: 17, offset: 54572},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1454, col: 17, offset: 54572},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1454, col: 17, offset: 54572},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1454, col: 28, offset: 54583},
								expr: &ruleRefExpr{
									pos:  position{line: 1454, col: 29, offset: 54584},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1454, col: 49, offset: 54604},
							name: "SidebarBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1454, col: 71, offset: 54626},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1454, col: 79, offset: 54634},
								expr: &ruleRefExpr{
									pos:  position{line: 1454, col: 80, offset: 54635},
									name: "SidebarBlockContent",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1454, col: 104, offset: 54659},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1454, col: 104, offset: 54659},
									name: "SidebarBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1454, col: 128, offset: 54683},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockContent",
			pos:  position{line: 1458, col: 1, offset: 54792},
			expr: &choiceExpr{
				pos: position{line: 1458, col: 24, offset: 54815},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1458, col: 24, offset: 54815},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1458, col: 36, offset: 54827},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1458, col: 52, offset: 54843},
						name: "ListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 1458, col: 63, offset: 54854},
						name: "NonSidebarBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 1458, col: 81, offset: 54872},
						name: "SidebarBlockParagraph",
					},
				},
			},
		},
		{
			name: "NonSidebarBlock",
			pos:  position{line: 1460, col: 1, offset: 54895},
			expr: &actionExpr{
				pos: position{line: 1460, col: 20, offset: 54914},
				run: (*parser).callonNonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1460, col: 20, offset: 54914},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1460, col: 20, offset: 54914},
							expr: &ruleRefExpr{
								pos:  position{line: 1460, col: 21, offset: 54915},
								name: "SidebarBlock",
							},
						},
						&labeledExpr{
							pos:   position{line: 1460, col: 34, offset: 54928},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1460, col: 43, offset: 54937},
								name: "DelimitedBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockParagraph",
			pos:  position{line: 1465, col: 1, offset: 55000},
			expr: &actionExpr{
				pos: position{line: 1465, col: 26, offset: 55025},
				run: (*parser).callonSidebarBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1465, col: 26, offset: 55025},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1465, col: 32, offset: 55031},
						expr: &ruleRefExpr{
							pos:  position{line: 1465, col: 33, offset: 55032},
							name: "SidebarBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockParagraphLine",
			pos:  position{line: 1469, col: 1, offset: 55146},
			expr: &actionExpr{
				pos: position{line: 1469, col: 30, offset: 55175},
				run: (*parser).callonSidebarBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1469, col: 30, offset: 55175},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1469, col: 30, offset: 55175},
							expr: &ruleRefExpr{
								pos:  position{line: 1469, col: 31, offset: 55176},
								name: "SidebarBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1469, col: 53, offset: 55198},
							expr: &ruleRefExpr{
								pos:  position{line: 1469, col: 54, offset: 55199},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1469, col: 64, offset: 55209},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1469, col: 70, offset: 55215},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1477, col: 1, offset: 55446},
			expr: &actionExpr{
				pos: position{line: 1477, col: 10, offset: 55455},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1477, col: 10, offset: 55455},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1477, col: 10, offset: 55455},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1477, col: 21, offset: 55466},
								expr: &ruleRefExpr{
									pos:  position{line: 1477, col: 22, offset: 55467},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1477, col: 42, offset: 55487},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1478, col: 5, offset: 55506},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1478, col: 12, offset: 55513},
								expr: &ruleRefExpr{
									pos:  position{line: 1478, col: 13, offset: 55514},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1479, col: 5, offset: 55536},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1479, col: 11, offset: 55542},
								expr: &ruleRefExpr{
									pos:  position{line: 1479, col: 12, offset: 55543},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1480, col: 6, offset: 55560},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1480, col: 6, offset: 55560},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1480, col: 23, offset: 55577},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1484, col: 1, offset: 55692},
			expr: &seqExpr{
				pos: position{line: 1484, col: 23, offset: 55714},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1484, col: 23, offset: 55714},
						val:        "|",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1484, col: 27, offset: 55718},
						expr: &ruleRefExpr{
							pos:  position{line: 1484, col: 27, offset: 55718},
							name: "WS",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1486, col: 1, offset: 55723},
			expr: &seqExpr{
				pos: position{line: 1486, col: 19, offset: 55741},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1486, col: 19, offset: 55741},
						val:        "|===",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1486, col: 26, offset: 55748},
						expr: &ruleRefExpr{
							pos:  position{line: 1486, col: 26, offset: 55748},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1486, col: 30, offset: 55752},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1489, col: 1, offset: 55820},
			expr: &actionExpr{
				pos: position{line: 1489, col: 20, offset: 55839},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1489, col: 20, offset: 55839},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1489, col: 20, offset: 55839},
							expr: &ruleRefExpr{
								pos:  position{line: 1489, col: 21, offset: 55840},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1489, col: 36, offset: 55855},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1489, col: 42, offset: 55861},
								expr: &ruleRefExpr{
									pos:  position{line: 1489, col: 43, offset: 55862},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1489, col: 55, offset: 55874},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1489, col: 59, offset: 55878},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1493, col: 1, offset: 55946},
			expr: &actionExpr{
				pos: position{line: 1493, col: 14, offset: 55959},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1493, col: 14, offset: 55959},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1493, col: 14, offset: 55959},
							expr: &ruleRefExpr{
								pos:  position{line: 1493, col: 15, offset: 55960},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1493, col: 30, offset: 55975},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1493, col: 36, offset: 55981},
								expr: &ruleRefExpr{
									pos:  position{line: 1493, col: 37, offset: 55982},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1493, col: 49, offset: 55994},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1493, col: 53, offset: 55998},
							expr: &ruleRefExpr{
								pos:  position{line: 1493, col: 53, offset: 55998},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1497, col: 1, offset: 56067},
			expr: &actionExpr{
				pos: position{line: 1497, col: 14, offset: 56080},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1497, col: 14, offset: 56080},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1497, col: 14, offset: 56080},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1497, col: 33, offset: 56099},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1497, col: 42, offset: 56108},
								expr: &seqExpr{
									pos: position{line: 1497, col: 43, offset: 56109},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1497, col: 43, offset: 56109},
											expr: &ruleRefExpr{
												pos:  position{line: 1497, col: 44, offset: 56110},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1497, col: 63, offset: 56129},
											expr: &ruleRefExpr{
												pos:  position{line: 1497, col: 64, offset: 56130},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1497, col: 68, offset: 56134},
											expr: &ruleRefExpr{
												pos:  position{line: 1497, col: 68, offset: 56134},
												name: "WS",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1497, col: 72, offset: 56138},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1497, col: 86, offset: 56152},
											expr: &ruleRefExpr{
												pos:  position{line: 1497, col: 86, offset: 56152},
												name: "WS",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1504, col: 1, offset: 56398},
			expr: &litMatcher{
				pos:        position{line: 1504, col: 26, offset: 56423},
				val:        "////",
				ignoreCase: false,
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1506, col: 1, offset: 56431},
			expr: &actionExpr{
				pos: position{line: 1506, col: 17, offset: 56447},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1506, col: 17, offset: 56447},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1506, col: 17, offset: 56447},
							name: "CommentBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1506, col: 39, offset: 56469},
							expr: &ruleRefExpr{
								pos:  position{line: 1506, col: 39, offset: 56469},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1506, col: 43, offset: 56473},
							name: "Newline",
						},
						&labeledExpr{
							pos:   position{line: 1506, col: 51, offset: 56481},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1506, col: 59, offset: 56489},
								expr: &ruleRefExpr{
									pos:  position{line: 1506, col: 60, offset: 56490},
									name: "CommentBlockLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1506, col: 81, offset: 56511},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1506, col: 82, offset: 56512},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1506, col: 82, offset: 56512},
											name: "CommentBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1506, col: 104, offset: 56534},
											expr: &ruleRefExpr{
												pos:  position{line: 1506, col: 104, offset: 56534},
												name: "WS",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1506, col: 108, offset: 56538},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1506, col: 115, offset: 56545},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockLine",
			pos:  position{line: 1510, col: 1, offset: 56651},
			expr: &actionExpr{
				pos: position{line: 1510, col: 21, offset: 56671},
				run: (*parser).callonCommentBlockLine1,
				expr: &seqExpr{
					pos: position{line: 1510, col: 21, offset: 56671},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1510, col: 21, offset: 56671},
							expr: &choiceExpr{
								pos: position{line: 1510, col: 22, offset: 56672},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1510, col: 22, offset: 56672},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 1510, col: 34, offset: 56684},
										name: "Spaces",
									},
									&seqExpr{
										pos: position{line: 1510, col: 44, offset: 56694},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1510, col: 44, offset: 56694},
												expr: &ruleRefExpr{
													pos:  position{line: 1510, col: 45, offset: 56695},
													name: "CommentBlockDelimiter",
												},
											},
											&notExpr{
												pos: position{line: 1510, col: 67, offset: 56717},
												expr: &ruleRefExpr{
													pos:  position{line: 1510, col: 68, offset: 56718},
													name: "EOL",
												},
											},
											&anyMatcher{
												line: 1510, col: 72, offset: 56722,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1510, col: 77, offset: 56727},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1514, col: 1, offset: 56767},
			expr: &actionExpr{
				pos: position{line: 1514, col: 22, offset: 56788},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1514, col: 22, offset: 56788},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1514, col: 22, offset: 56788},
							expr: &ruleRefExpr{
								pos:  position{line: 1514, col: 23, offset: 56789},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1514, col: 45, offset: 56811},
							expr: &ruleRefExpr{
								pos:  position{line: 1514, col: 45, offset: 56811},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 1514, col: 49, offset: 56815},
							val:        "//",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1514, col: 54, offset: 56820},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1514, col: 63, offset: 56829},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1514, col: 89, offset: 56855},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1518, col: 1, offset: 56920},
			expr: &actionExpr{
				pos: position{line: 1518, col: 29, offset: 56948},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1518, col: 29, offset: 56948},
					expr: &choiceExpr{
						pos: position{line: 1518, col: 30, offset: 56949},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1518, col: 30, offset: 56949},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1518, col: 42, offset: 56961},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1518, col: 52, offset: 56971},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1518, col: 52, offset: 56971},
										expr: &ruleRefExpr{
											pos:  position{line: 1518, col: 53, offset: 56972},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 1518, col: 58, offset: 56977,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 1526, col: 1, offset: 57286},
			expr: &choiceExpr{
				pos: position{line: 1526, col: 17, offset: 57302},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1526, col: 17, offset: 57302},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 1526, col: 49, offset: 57334},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 1526, col: 78, offset: 57363},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 1528, col: 1, offset: 57399},
			expr: &litMatcher{
				pos:        position{line: 1528, col: 26, offset: 57424},
				val:        "....",
				ignoreCase: false,
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 1531, col: 1, offset: 57496},
			expr: &actionExpr{
				pos: position{line: 1531, col: 31, offset: 57526},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 1531, col: 31, offset: 57526},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1531, col: 31, offset: 57526},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1531, col: 42, offset: 57537},
								expr: &ruleRefExpr{
									pos:  position{line: 1531, col: 43, offset: 57538},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1531, col: 63, offset: 57558},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1531, col: 70, offset: 57565},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 1536, col: 1, offset: 57795},
			expr: &actionExpr{
				pos: position{line: 1537, col: 5, offset: 57835},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 1537, col: 5, offset: 57835},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1537, col: 5, offset: 57835},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1537, col: 16, offset: 57846},
								run: (*parser).callonParagraphWithHeadingSpacesLines4,
								expr: &seqExpr{
									pos: position{line: 1537, col: 16, offset: 57846},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1537, col: 16, offset: 57846},
											name: "WS",
										},
										&oneOrMoreExpr{
											pos: position{line: 1537, col: 19, offset: 57849},
											expr: &choiceExpr{
												pos: position{line: 1537, col: 20, offset: 57850},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1537, col: 20, offset: 57850},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1537, col: 32, offset: 57862},
														name: "Spaces",
													},
													&actionExpr{
														pos: position{line: 1537, col: 41, offset: 57871},
														run: (*parser).callonParagraphWithHeadingSpacesLines11,
														expr: &seqExpr{
															pos: position{line: 1537, col: 42, offset: 57872},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 1537, col: 42, offset: 57872},
																	expr: &ruleRefExpr{
																		pos:  position{line: 1537, col: 43, offset: 57873},
																		name: "EOL",
																	},
																},
																&anyMatcher{
																	line: 1537, col: 48, offset: 57878,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1541, col: 8, offset: 57969},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 1542, col: 5, offset: 58032},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1542, col: 16, offset: 58043},
								expr: &actionExpr{
									pos: position{line: 1543, col: 9, offset: 58053},
									run: (*parser).callonParagraphWithHeadingSpacesLines19,
									expr: &seqExpr{
										pos: position{line: 1543, col: 9, offset: 58053},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1543, col: 9, offset: 58053},
												expr: &ruleRefExpr{
													pos:  position{line: 1543, col: 10, offset: 58054},
													name: "BlankLine",
												},
											},
											&labeledExpr{
												pos:   position{line: 1544, col: 9, offset: 58073},
												label: "otherLine",
												expr: &actionExpr{
													pos: position{line: 1544, col: 20, offset: 58084},
													run: (*parser).callonParagraphWithHeadingSpacesLines24,
													expr: &oneOrMoreExpr{
														pos: position{line: 1544, col: 20, offset: 58084},
														expr: &choiceExpr{
															pos: position{line: 1544, col: 21, offset: 58085},
															alternatives: []interface{}{
																&ruleRefExpr{
																	pos:  position{line: 1544, col: 21, offset: 58085},
																	name: "Alphanums",
																},
																&ruleRefExpr{
																	pos:  position{line: 1544, col: 33, offset: 58097},
																	name: "Spaces",
																},
																&seqExpr{
																	pos: position{line: 1544, col: 43, offset: 58107},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 1544, col: 43, offset: 58107},
																			expr: &ruleRefExpr{
																				pos:  position{line: 1544, col: 44, offset: 58108},
																				name: "EOL",
																			},
																		},
																		&anyMatcher{
																			line: 1544, col: 49, offset: 58113,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1546, col: 12, offset: 58170},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 1553, col: 1, offset: 58400},
			expr: &actionExpr{
				pos: position{line: 1553, col: 39, offset: 58438},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1553, col: 39, offset: 58438},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1553, col: 39, offset: 58438},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1553, col: 50, offset: 58449},
								expr: &ruleRefExpr{
									pos:  position{line: 1553, col: 51, offset: 58450},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1554, col: 9, offset: 58478},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1554, col: 31, offset: 58500},
							expr: &ruleRefExpr{
								pos:  position{line: 1554, col: 31, offset: 58500},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1554, col: 35, offset: 58504},
							name: "Newline",
						},
						&labeledExpr{
							pos:   position{line: 1554, col: 43, offset: 58512},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1554, col: 50, offset: 58519},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 1554, col: 92, offset: 58561},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1554, col: 93, offset: 58562},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1554, col: 93, offset: 58562},
											name: "LiteralBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1554, col: 115, offset: 58584},
											expr: &ruleRefExpr{
												pos:  position{line: 1554, col: 115, offset: 58584},
												name: "WS",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1554, col: 119, offset: 58588},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1554, col: 126, offset: 58595},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 1559, col: 1, offset: 58754},
			expr: &actionExpr{
				pos: position{line: 1559, col: 44, offset: 58797},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 1559, col: 44, offset: 58797},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1559, col: 50, offset: 58803},
						expr: &ruleRefExpr{
							pos:  position{line: 1559, col: 51, offset: 58804},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 1563, col: 1, offset: 58888},
			expr: &actionExpr{
				pos: position{line: 1564, col: 5, offset: 58943},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 1564, col: 5, offset: 58943},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1564, col: 5, offset: 58943},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1564, col: 11, offset: 58949},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &zeroOrMoreExpr{
									pos: position{line: 1564, col: 11, offset: 58949},
									expr: &choiceExpr{
										pos: position{line: 1564, col: 12, offset: 58950},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1564, col: 12, offset: 58950},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 1564, col: 24, offset: 58962},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 1564, col: 34, offset: 58972},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 1564, col: 34, offset: 58972},
														expr: &ruleRefExpr{
															pos:  position{line: 1564, col: 35, offset: 58973},
															name: "LiteralBlockDelimiter",
														},
													},
													&notExpr{
														pos: position{line: 1564, col: 57, offset: 58995},
														expr: &ruleRefExpr{
															pos:  position{line: 1564, col: 58, offset: 58996},
															name: "EOL",
														},
													},
													&anyMatcher{
														line: 1564, col: 62, offset: 59000,
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1566, col: 8, offset: 59049},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 1571, col: 1, offset: 59175},
			expr: &actionExpr{
				pos: position{line: 1572, col: 5, offset: 59213},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 1572, col: 5, offset: 59213},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1572, col: 5, offset: 59213},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1572, col: 16, offset: 59224},
								expr: &ruleRefExpr{
									pos:  position{line: 1572, col: 17, offset: 59225},
									name: "ElementAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1573, col: 5, offset: 59249},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 1580, col: 5, offset: 59463},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1580, col: 12, offset: 59470},
								name: "ParagraphWithLiteralAttributeLines",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 1584, col: 1, offset: 59620},
			expr: &actionExpr{
				pos: position{line: 1584, col: 16, offset: 59635},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 1584, col: 16, offset: 59635},
					val:        "literal",
					ignoreCase: false,
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLines",
			pos:  position{line: 1589, col: 1, offset: 59718},
			expr: &actionExpr{
				pos: position{line: 1589, col: 39, offset: 59756},
				run: (*parser).callonParagraphWithLiteralAttributeLines1,
				expr: &labeledExpr{
					pos:   position{line: 1589, col: 39, offset: 59756},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1589, col: 45, offset: 59762},
						expr: &ruleRefExpr{
							pos:  position{line: 1589, col: 46, offset: 59763},
							name: "ParagraphWithLiteralAttributeLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLine",
			pos:  position{line: 1593, col: 1, offset: 59843},
			expr: &actionExpr{
				pos: position{line: 1593, col: 38, offset: 59880},
				run: (*parser).callonParagraphWithLiteralAttributeLine1,
				expr: &seqExpr{
					pos: position{line: 1593, col: 38, offset: 59880},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1593, col: 38, offset: 59880},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1593, col: 44, offset: 59886},
								run: (*parser).callonParagraphWithLiteralAttributeLine4,
								expr: &seqExpr{
									pos: position{line: 1593, col: 44, offset: 59886},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1593, col: 44, offset: 59886},
											expr: &ruleRefExpr{
												pos:  position{line: 1593, col: 46, offset: 59888},
												name: "BlankLine",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1593, col: 57, offset: 59899},
											expr: &choiceExpr{
												pos: position{line: 1593, col: 58, offset: 59900},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1593, col: 58, offset: 59900},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1593, col: 70, offset: 59912},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 1593, col: 80, offset: 59922},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 1593, col: 80, offset: 59922},
																expr: &ruleRefExpr{
																	pos:  position{line: 1593, col: 81, offset: 59923},
																	name: "EOL",
																},
															},
															&anyMatcher{
																line: 1593, col: 86, offset: 59928,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1595, col: 4, offset: 59969},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 1602, col: 1, offset: 60143},
			expr: &actionExpr{
				pos: position{line: 1602, col: 14, offset: 60156},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1602, col: 14, offset: 60156},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1602, col: 14, offset: 60156},
							val:        "((",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1602, col: 19, offset: 60161},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 1602, col: 25, offset: 60167},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 1602, col: 43, offset: 60185},
							val:        "))",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 1606, col: 1, offset: 60250},
			expr: &actionExpr{
				pos: position{line: 1606, col: 21, offset: 60270},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 1606, col: 21, offset: 60270},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1606, col: 30, offset: 60279},
						expr: &choiceExpr{
							pos: position{line: 1606, col: 31, offset: 60280},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1606, col: 31, offset: 60280},
									name: "SimpleWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1606, col: 44, offset: 60293},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 1606, col: 57, offset: 60306},
									name: "WS",
								},
								&ruleRefExpr{
									pos:  position{line: 1606, col: 62, offset: 60311},
									name: "AnyChars",
								},
								&actionExpr{
									pos: position{line: 1606, col: 73, offset: 60322},
									run: (*parser).callonIndexTermContent9,
									expr: &oneOrMoreExpr{
										pos: position{line: 1606, col: 73, offset: 60322},
										expr: &seqExpr{
											pos: position{line: 1606, col: 74, offset: 60323},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1606, col: 74, offset: 60323},
													expr: &litMatcher{
														pos:        position{line: 1606, col: 75, offset: 60324},
														val:        "))",
														ignoreCase: false,
													},
												},
												&anyMatcher{
													line: 1606, col: 80, offset: 60329,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 1612, col: 1, offset: 60436},
			expr: &actionExpr{
				pos: position{line: 1612, col: 23, offset: 60458},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1612, col: 23, offset: 60458},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1612, col: 23, offset: 60458},
							val:        "(((",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1612, col: 29, offset: 60464},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 1612, col: 36, offset: 60471},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 1613, col: 5, offset: 60503},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 1613, col: 11, offset: 60509},
								expr: &actionExpr{
									pos: position{line: 1613, col: 12, offset: 60510},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 1613, col: 12, offset: 60510},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1613, col: 12, offset: 60510},
												expr: &ruleRefExpr{
													pos:  position{line: 1613, col: 12, offset: 60510},
													name: "WS",
												},
											},
											&litMatcher{
												pos:        position{line: 1613, col: 16, offset: 60514},
												val:        ",",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 1613, col: 20, offset: 60518},
												expr: &ruleRefExpr{
													pos:  position{line: 1613, col: 20, offset: 60518},
													name: "WS",
												},
											},
											&labeledExpr{
												pos:   position{line: 1613, col: 24, offset: 60522},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1613, col: 33, offset: 60531},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1614, col: 5, offset: 60589},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 1614, col: 11, offset: 60595},
								expr: &actionExpr{
									pos: position{line: 1614, col: 12, offset: 60596},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 1614, col: 12, offset: 60596},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1614, col: 12, offset: 60596},
												expr: &ruleRefExpr{
													pos:  position{line: 1614, col: 12, offset: 60596},
													name: "WS",
												},
											},
											&litMatcher{
												pos:        position{line: 1614, col: 16, offset: 60600},
												val:        ",",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 1614, col: 20, offset: 60604},
												expr: &ruleRefExpr{
													pos:  position{line: 1614, col: 20, offset: 60604},
													name: "WS",
												},
											},
											&labeledExpr{
												pos:   position{line: 1614, col: 24, offset: 60608},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1614, col: 33, offset: 60617},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1615, col: 5, offset: 60675},
							val:        ")))",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 1619, col: 1, offset: 60754},
			expr: &actionExpr{
				pos: position{line: 1619, col: 30, offset: 60783},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1619, col: 30, offset: 60783},
					expr: &choiceExpr{
						pos: position{line: 1619, col: 31, offset: 60784},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1619, col: 31, offset: 60784},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 1619, col: 42, offset: 60795},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 1625, col: 1, offset: 60940},
			expr: &actionExpr{
				pos: position{line: 1625, col: 14, offset: 60953},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 1625, col: 14, offset: 60953},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1625, col: 14, offset: 60953},
							expr: &ruleRefExpr{
								pos:  position{line: 1625, col: 15, offset: 60954},
								name: "EOF",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1625, col: 19, offset: 60958},
							expr: &ruleRefExpr{
								pos:  position{line: 1625, col: 19, offset: 60958},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1625, col: 23, offset: 60962},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 1632, col: 1, offset: 61109},
			expr: &charClassMatcher{
				pos:        position{line: 1632, col: 13, offset: 61121},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 1634, col: 1, offset: 61131},
			expr: &choiceExpr{
				pos: position{line: 1634, col: 16, offset: 61146},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1634, col: 16, offset: 61146},
						val:        "(",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1634, col: 22, offset: 61152},
						val:        ")",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1634, col: 28, offset: 61158},
						val:        "[",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1634, col: 34, offset: 61164},
						val:        "]",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1634, col: 40, offset: 61170},
						val:        "{",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1634, col: 46, offset: 61176},
						val:        "}",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 1636, col: 1, offset: 61182},
			expr: &actionExpr{
				pos: position{line: 1636, col: 14, offset: 61195},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1636, col: 14, offset: 61195},
					expr: &charClassMatcher{
						pos:        position{line: 1636, col: 14, offset: 61195},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "PunctuationMark",
			pos:  position{line: 1640, col: 1, offset: 61241},
			expr: &choiceExpr{
				pos: position{line: 1640, col: 20, offset: 61260},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1640, col: 20, offset: 61260},
						val:        ".",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1640, col: 26, offset: 61266},
						val:        "?",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1640, col: 32, offset: 61272},
						val:        "!",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1640, col: 38, offset: 61278},
						val:        ",",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1640, col: 44, offset: 61284},
						val:        ";",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1640, col: 50, offset: 61290},
						val:        ":",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SimpleWord",
			pos:  position{line: 1642, col: 1, offset: 61295},
			expr: &actionExpr{
				pos: position{line: 1642, col: 15, offset: 61309},
				run: (*parser).callonSimpleWord1,
				expr: &seqExpr{
					pos: position{line: 1642, col: 15, offset: 61309},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1642, col: 15, offset: 61309},
							name: "Alphanums",
						},
						&andExpr{
							pos: position{line: 1642, col: 25, offset: 61319},
							expr: &choiceExpr{
								pos: position{line: 1642, col: 27, offset: 61321},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1642, col: 27, offset: 61321},
										name: "WS",
									},
									&litMatcher{
										pos:        position{line: 1642, col: 32, offset: 61326},
										val:        ",",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 1642, col: 38, offset: 61332},
										val:        "]",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 1642, col: 44, offset: 61338},
										name: "EOL",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AnyChars",
			pos:  position{line: 1646, col: 1, offset: 61545},
			expr: &choiceExpr{
				pos: position{line: 1646, col: 13, offset: 61557},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 1646, col: 13, offset: 61557},
						expr: &choiceExpr{
							pos: position{line: 1648, col: 5, offset: 61714},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 1648, col: 5, offset: 61714},
									run: (*parser).callonAnyChars4,
									expr: &seqExpr{
										pos: position{line: 1648, col: 6, offset: 61715},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1648, col: 6, offset: 61715},
												expr: &choiceExpr{
													pos: position{line: 1648, col: 8, offset: 61717},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1648, col: 8, offset: 61717},
															name: "Alphanum",
														},
														&litMatcher{
															pos:        position{line: 1648, col: 19, offset: 61728},
															val:        ",",
															ignoreCase: false,
														},
														&litMatcher{
															pos:        position{line: 1648, col: 25, offset: 61734},
															val:        ";",
															ignoreCase: false,
														},
														&litMatcher{
															pos:        position{line: 1648, col: 31, offset: 61740},
															val:        "}",
															ignoreCase: false,
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1648, col: 36, offset: 61745},
												name: "ConstrainedQuotedTextMarker",
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1652, col: 8, offset: 61893},
									run: (*parser).callonAnyChars13,
									expr: &seqExpr{
										pos: position{line: 1652, col: 9, offset: 61894},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1652, col: 9, offset: 61894},
												name: "Alphanums",
											},
											&zeroOrOneExpr{
												pos: position{line: 1652, col: 19, offset: 61904},
												expr: &seqExpr{
													pos: position{line: 1652, col: 20, offset: 61905},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 1652, col: 20, offset: 61905},
															expr: &ruleRefExpr{
																pos:  position{line: 1652, col: 21, offset: 61906},
																name: "Newline",
															},
														},
														&notExpr{
															pos: position{line: 1652, col: 29, offset: 61914},
															expr: &ruleRefExpr{
																pos:  position{line: 1652, col: 30, offset: 61915},
																name: "WS",
															},
														},
														&notExpr{
															pos: position{line: 1652, col: 33, offset: 61918},
															expr: &ruleRefExpr{
																pos:  position{line: 1652, col: 34, offset: 61919},
																name: "Parenthesis",
															},
														},
														&notExpr{
															pos: position{line: 1652, col: 46, offset: 61931},
															expr: &ruleRefExpr{
																pos:  position{line: 1652, col: 47, offset: 61932},
																name: "UnconstrainedQuotedTextPrefix",
															},
														},
														&notExpr{
															pos: position{line: 1652, col: 77, offset: 61962},
															expr: &ruleRefExpr{
																pos:  position{line: 1652, col: 78, offset: 61963},
																name: "LabeledListItemSeparator",
															},
														},
														&notExpr{
															pos: position{line: 1652, col: 103, offset: 61988},
															expr: &ruleRefExpr{
																pos:  position{line: 1652, col: 104, offset: 61989},
																name: "PunctuationMark",
															},
														},
														&anyMatcher{
															line: 1652, col: 120, offset: 62005,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1655, col: 7, offset: 62063},
						run: (*parser).callonAnyChars31,
						expr: &ruleRefExpr{
							pos:  position{line: 1655, col: 7, offset: 62063},
							name: "PunctuationMark",
						},
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 1660, col: 1, offset: 62353},
			expr: &actionExpr{
				pos: position{line: 1660, col: 12, offset: 62364},
				run: (*parser).callonAnyChar1,
				expr: &seqExpr{
					pos: position{line: 1660, col: 12, offset: 62364},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1660, col: 12, offset: 62364},
							expr: &ruleRefExpr{
								pos:  position{line: 1660, col: 13, offset: 62365},
								name: "EOF",
							},
						},
						&anyMatcher{
							line: 1660, col: 17, offset: 62369,
						},
					},
				},
			},
		},
		{
			name: "Spaces",
			pos:  position{line: 1664, col: 1, offset: 62521},
			expr: &oneOrMoreExpr{
				pos: position{line: 1664, col: 11, offset: 62531},
				expr: &ruleRefExpr{
					pos:  position{line: 1664, col: 11, offset: 62531},
					name: "WS",
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 1666, col: 1, offset: 62537},
			expr: &actionExpr{
				pos: position{line: 1666, col: 17, offset: 62553},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1666, col: 17, offset: 62553},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1666, col: 26, offset: 62562},
						expr: &choiceExpr{
							pos: position{line: 1666, col: 27, offset: 62563},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1666, col: 27, offset: 62563},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 1666, col: 38, offset: 62574},
									name: "DocumentAttributeSubstitution",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedFileLocation",
			pos:  position{line: 1670, col: 1, offset: 62666},
			expr: &actionExpr{
				pos: position{line: 1670, col: 25, offset: 62690},
				run: (*parser).callonResolvedFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1670, col: 25, offset: 62690},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1670, col: 34, offset: 62699},
						expr: &seqExpr{
							pos: position{line: 1670, col: 35, offset: 62700},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1670, col: 35, offset: 62700},
									expr: &ruleRefExpr{
										pos:  position{line: 1670, col: 36, offset: 62701},
										name: "EOL",
									},
								},
								&notExpr{
									pos: position{line: 1670, col: 40, offset: 62705},
									expr: &ruleRefExpr{
										pos:  position{line: 1670, col: 41, offset: 62706},
										name: "WS",
									},
								},
								&notExpr{
									pos: position{line: 1670, col: 44, offset: 62709},
									expr: &litMatcher{
										pos:        position{line: 1670, col: 45, offset: 62710},
										val:        "[",
										ignoreCase: false,
									},
								},
								&anyMatcher{
									line: 1670, col: 49, offset: 62714,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 1674, col: 1, offset: 62778},
			expr: &actionExpr{
				pos: position{line: 1674, col: 13, offset: 62790},
				run: (*parser).callonLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1674, col: 13, offset: 62790},
					label: "elements",
					expr: &seqExpr{
						pos: position{line: 1674, col: 23, offset: 62800},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1674, col: 23, offset: 62800},
								name: "URL_SCHEME",
							},
							&oneOrMoreExpr{
								pos: position{line: 1674, col: 34, offset: 62811},
								expr: &choiceExpr{
									pos: position{line: 1674, col: 35, offset: 62812},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1674, col: 35, offset: 62812},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 1674, col: 46, offset: 62823},
											name: "DocumentAttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 1678, col: 1, offset: 62916},
			expr: &oneOrMoreExpr{
				pos: position{line: 1678, col: 13, offset: 62928},
				expr: &choiceExpr{
					pos: position{line: 1678, col: 14, offset: 62929},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1678, col: 14, offset: 62929},
							val:        "[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789~:/?#@!$&;=()*+,_%]",
							chars:      []rune{'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '~', ':', '/', '?', '#', '@', '!', '$', '&', ';', '=', '(', ')', '*', '+', ',', '_', '%'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 1678, col: 99, offset: 63014},
							val:        "-",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1678, col: 105, offset: 63020},
							val:        ".",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ResolvedLocation",
			pos:  position{line: 1680, col: 1, offset: 63141},
			expr: &actionExpr{
				pos: position{line: 1680, col: 21, offset: 63161},
				run: (*parser).callonResolvedLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1680, col: 21, offset: 63161},
					label: "elements",
					expr: &seqExpr{
						pos: position{line: 1680, col: 31, offset: 63171},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1680, col: 31, offset: 63171},
								name: "URL_SCHEME",
							},
							&ruleRefExpr{
								pos:  position{line: 1680, col: 42, offset: 63182},
								name: "RESOLVED_FILENAME",
							},
						},
					},
				},
			},
		},
		{
			name: "RESOLVED_FILENAME",
			pos:  position{line: 1684, col: 1, offset: 63261},
			expr: &oneOrMoreExpr{
				pos: position{line: 1684, col: 22, offset: 63282},
				expr: &choiceExpr{
					pos: position{line: 1684, col: 23, offset: 63283},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1684, col: 23, offset: 63283},
							val:        "[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789~:/?#@!$&;=()*+_,%{}]",
							chars:      []rune{'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '~', ':', '/', '?', '#', '@', '!', '$', '&', ';', '=', '(', ')', '*', '+', '_', ',', '%', '{', '}'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 1684, col: 110, offset: 63370},
							val:        "-",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1684, col: 116, offset: 63376},
							val:        ".",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 1686, col: 1, offset: 63425},
			expr: &actionExpr{
				pos: position{line: 1686, col: 8, offset: 63432},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1686, col: 8, offset: 63432},
					expr: &choiceExpr{
						pos: position{line: 1686, col: 9, offset: 63433},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1686, col: 9, offset: 63433},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 1686, col: 22, offset: 63446},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1686, col: 22, offset: 63446},
										expr: &ruleRefExpr{
											pos:  position{line: 1686, col: 23, offset: 63447},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1686, col: 31, offset: 63455},
										expr: &ruleRefExpr{
											pos:  position{line: 1686, col: 32, offset: 63456},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1686, col: 35, offset: 63459},
										expr: &litMatcher{
											pos:        position{line: 1686, col: 36, offset: 63460},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1686, col: 40, offset: 63464},
										expr: &litMatcher{
											pos:        position{line: 1686, col: 41, offset: 63465},
											val:        "]",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1686, col: 46, offset: 63470,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 1690, col: 1, offset: 63511},
			expr: &choiceExpr{
				pos: position{line: 1690, col: 15, offset: 63525},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1690, col: 15, offset: 63525},
						val:        "http://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1690, col: 27, offset: 63537},
						val:        "https://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1690, col: 40, offset: 63550},
						val:        "ftp://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1690, col: 51, offset: 63561},
						val:        "irc://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1690, col: 62, offset: 63572},
						val:        "mailto:",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 1692, col: 1, offset: 63583},
			expr: &actionExpr{
				pos: position{line: 1692, col: 7, offset: 63589},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1692, col: 7, offset: 63589},
					expr: &choiceExpr{
						pos: position{line: 1692, col: 8, offset: 63590},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1692, col: 8, offset: 63590},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 1692, col: 21, offset: 63603},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1692, col: 21, offset: 63603},
										expr: &ruleRefExpr{
											pos:  position{line: 1692, col: 22, offset: 63604},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1692, col: 30, offset: 63612},
										expr: &ruleRefExpr{
											pos:  position{line: 1692, col: 31, offset: 63613},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1692, col: 34, offset: 63616},
										expr: &litMatcher{
											pos:        position{line: 1692, col: 35, offset: 63617},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1692, col: 39, offset: 63621},
										expr: &litMatcher{
											pos:        position{line: 1692, col: 40, offset: 63622},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1692, col: 44, offset: 63626},
										expr: &litMatcher{
											pos:        position{line: 1692, col: 45, offset: 63627},
											val:        "<<",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1692, col: 50, offset: 63632},
										expr: &litMatcher{
											pos:        position{line: 1692, col: 51, offset: 63633},
											val:        ">>",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1692, col: 56, offset: 63638},
										expr: &litMatcher{
											pos:        position{line: 1692, col: 57, offset: 63639},
											val:        ",",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1692, col: 62, offset: 63644,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 1696, col: 1, offset: 63685},
			expr: &actionExpr{
				pos: position{line: 1696, col: 10, offset: 63694},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 1696, col: 10, offset: 63694},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 1700, col: 1, offset: 63736},
			expr: &actionExpr{
				pos: position{line: 1700, col: 11, offset: 63746},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 1700, col: 11, offset: 63746},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1700, col: 11, offset: 63746},
							expr: &litMatcher{
								pos:        position{line: 1700, col: 11, offset: 63746},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1700, col: 16, offset: 63751},
							expr: &ruleRefExpr{
								pos:  position{line: 1700, col: 16, offset: 63751},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "WS",
			pos:  position{line: 1704, col: 1, offset: 63803},
			expr: &choiceExpr{
				pos: position{line: 1704, col: 7, offset: 63809},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1704, col: 7, offset: 63809},
						val:        " ",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1704, col: 13, offset: 63815},
						run: (*parser).callonWS3,
						expr: &litMatcher{
							pos:        position{line: 1704, col: 13, offset: 63815},
							val:        "\t",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 1708, col: 1, offset: 63856},
			expr: &choiceExpr{
				pos: position{line: 1708, col: 12, offset: 63867},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1708, col: 12, offset: 63867},
						val:        "\r\n",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1708, col: 21, offset: 63876},
						val:        "\r",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1708, col: 28, offset: 63883},
						val:        "\n",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1710, col: 1, offset: 63889},
			expr: &notExpr{
				pos: position{line: 1710, col: 8, offset: 63896},
				expr: &anyMatcher{
					line: 1710, col: 9, offset: 63897,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1712, col: 1, offset: 63900},
			expr: &choiceExpr{
				pos: position{line: 1712, col: 8, offset: 63907},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1712, col: 8, offset: 63907},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 1712, col: 18, offset: 63917},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onAsciidocDocument1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonAsciidocDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onAsciidocDocumentWithinDelimitedBlock1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonAsciidocDocumentWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocumentWithinDelimitedBlock1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onTextDocument1(blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonTextDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocument1(stack["blocks"])
}

func (c *current) onAsciidocDocumentBlocks1(header, others interface{}) (interface{}, error) {
	if header != nil && others != nil {
		return append([]interface{}{header}, others.([]interface{})...), nil
	} else if others != nil {
		return others.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonAsciidocDocumentBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocumentBlocks1(stack["header"], stack["others"])
}

func (c *current) onDocumentBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock1(stack["block"])
}

func (c *current) onDocumentBlockWithinDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlockWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlockWithinDelimitedBlock1(stack["block"])
}

func (c *current) onTextDocumentBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonTextDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocumentBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentHeader(title.([]interface{}), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber18() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber18()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onDocumentAttributeDeclaration9(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonDocumentAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclaration9(stack["value"])
}

func (c *current) onDocumentAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	return types.NewDocumentAttributeDeclaration(name.(string), value)
}

func (p *parser) callonDocumentAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onDocumentAttributeName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeName1()
}

func (c *current) onDocumentAttributeValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeValue1()
}

func (c *current) onDocumentAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.(string))
}

func (p *parser) callonDocumentAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeReset2(stack["name"])
}

func (c *current) onDocumentAttributeReset11(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.(string))
}

func (p *parser) callonDocumentAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeReset11(stack["name"])
}

func (c *current) onDocumentAttributeSubstitution1(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeSubstitution(name.(string))
}

func (p *parser) callonDocumentAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeSubstitution1(stack["name"])
}

func (c *current) onElementAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs.([]interface{})), nil
}

func (p *parser) callonElementAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {
	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID2(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID2(stack["id"])
}

func (c *current) onElementID11(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID11(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementTitle5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle5()
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {
	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementRole5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementRole5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole5()
}

func (c *current) onElementRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role.(string))
}

func (p *parser) callonElementRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole1(stack["role"])
}

func (c *current) onLiteralAttribute1() (interface{}, error) {
	return types.NewLiteralAttribute()
}

func (p *parser) callonLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {
	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes6(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes6(stack["attr"])
}

func (c *current) onSourceAttributes14(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes14(stack["attr"])
}

func (c *current) onSourceAttributes1(language, others interface{}) (interface{}, error) {
	return types.NewSourceAttributes(language, others.([]interface{})...)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["language"], stack["others"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttributeWithValue1(key, value interface{}) (interface{}, error) {
	// value is (optionally) set
	return types.NewGenericAttribute(key.(string), value)
}

func (p *parser) callonGenericAttributeWithValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithValue1(stack["key"], stack["value"])
}

func (c *current) onGenericAttributeWithoutValue1(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.(string), nil)
}

func (p *parser) callonGenericAttributeWithoutValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithoutValue1(stack["key"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onStandaloneAttributeValue1(value interface{}) (interface{}, error) {
	// standalone attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonStandaloneAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributeValue1(stack["value"])
}

func (c *current) onHorizontalLayout1() (interface{}, error) {
	return types.ElementAttributes{"layout": "horizontal"}, nil
}

func (p *parser) callonHorizontalLayout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHorizontalLayout1()
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onInlineAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attrs"])
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.([]interface{}), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), attrs.(types.ElementAttributes), string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), attrs.(types.ElementAttributes), string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.ElementAttributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedLineRanges10(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleQuotedLineRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges10(stack["other"])
}

func (c *current) onMultipleQuotedLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onMultiLineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onSingleLineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onTagRangesAttribute1(tags interface{}) (interface{}, error) {
	//TODO: check if 'tags'/'tag' is allowed for both single and multiple values
	return types.NewTagRangesAttribute(tags.([]interface{}))
}

func (p *parser) callonTagRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttribute1(stack["tags"])
}

func (c *current) onTagRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonTagRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {
	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements, linebreak interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(append(elements.([]interface{}), linebreak))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"], stack["linebreak"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(blanklines, element interface{}) (interface{}, error) {
	return types.NewContinuedListItemElement(-len(blanklines.([]interface{})), element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["blanklines"], stack["element"])
}

func (c *current) onContinuedListItemBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonContinuedListItemBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemBlock1(stack["block"])
}

func (c *current) onOrderedListItem1(attributes, prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attributes)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attributes"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attributes, prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attributes)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attributes"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {
	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attributes, term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListItem(len(separator.(string))-1, term.([]interface{}), description, attributes)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attributes"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onSimpleLabeledListItemTerm3() (interface{}, error) {
	return types.NewStringElement(strings.TrimSpace(string(c.text)))
}

func (p *parser) callonSimpleLabeledListItemTerm3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleLabeledListItemTerm3()
}

func (c *current) onSimpleLabeledListItemTerm1(content interface{}) (interface{}, error) {
	return types.NewInlineElements(content)
}

func (p *parser) callonSimpleLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleLabeledListItemTerm1(stack["content"])
}

func (c *current) onLabeledListItemTerm1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1(stack["elements"])
}

func (c *current) onLabeledListItemTermElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonLabeledListItemTermElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement1(stack["element"])
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil

}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil

}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil

}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil

}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onParagraph13(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph13(stack["attributes"], stack["lines"])
}

func (c *current) onSimpleParagraph6(attributes interface{}) (bool, error) {
	// skip if the '[literal]' attribute was set on this paragraph
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, found := attrs[types.AttrKind]
		return !found || kind != types.Literal, nil
	}
	return true, nil

}

func (p *parser) callonSimpleParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph6(stack["attributes"])
}

func (c *current) onSimpleParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onContinuedParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonContinuedParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onContinuedParagraph12(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonContinuedParagraph12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraph12(stack["attributes"], stack["lines"])
}

func (c *current) onContinuedParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {
	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonContinuedParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphLine1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonFirstParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphLine1(stack["elements"], stack["linebreak"])
}

func (c *current) onOtherParagraphLine1(elements interface{}) (interface{}, error) {
	return elements, nil
}

func (p *parser) callonOtherParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherParagraphLine1(stack["elements"])
}

func (c *current) onVerseParagraph7(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph7(stack["attributes"])
}

func (c *current) onVerseParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonVerseParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onVerseParagraph19(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph19(stack["attributes"])
}

func (c *current) onVerseParagraph14(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonVerseParagraph14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph14(stack["attributes"], stack["lines"])
}

func (c *current) onInlineElements9(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements9(stack["comment"])
}

func (c *current) onInlineElements12(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))

}

func (p *parser) callonInlineElements12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements12(stack["elements"], stack["linebreak"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onInlineElementsWithoutSubtitution1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonInlineElementsWithoutSubtitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementsWithoutSubtitution1(stack["elements"], stack["linebreak"])
}

func (c *current) onInlineElementWithoutSubtitution1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElementWithoutSubtitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementWithoutSubtitution1(stack["element"])
}

func (c *current) onVerbatimParagraph8(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonVerbatimParagraph8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraph8(stack["line"])
}

func (c *current) onVerbatimParagraph1(attributes, lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonVerbatimParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraph1(stack["attributes"], stack["lines"])
}

func (c *current) onVerbatimParagraphLine1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonVerbatimParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraphLine1(stack["elements"], stack["linebreak"])
}

func (c *current) onVerbatimParagraphLineElement1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonVerbatimParagraphLineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraphLineElement1()
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onConstrainedQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonConstrainedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstrainedQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.Bold, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteBoldText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteBoldText1()
}

func (c *current) onSingleQuoteBoldText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["elements"])
}

func (c *current) onSingleQuoteBoldText12(elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText12(stack["elements"])
}

func (c *current) onSingleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteBoldText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteBoldText1()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteItalicText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteItalicText1()
}

func (c *current) onSingleQuoteItalicText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["elements"])
}

func (c *current) onSingleQuoteItalicText12(elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText12(stack["elements"])
}

func (c *current) onSingleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteItalicText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteItalicText1()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteMonospaceText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteMonospaceText1()
}

func (c *current) onSingleQuoteMonospaceText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText12(elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText12(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteMonospaceText1() (interface{}, error) {
	// break at multiline
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteMonospaceText1()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, element)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {

	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, element)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {

	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter4() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter4()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), label.(string))
}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), nil)
}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onCrossReferenceLabel1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonCrossReferenceLabel1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel1()
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onTextOnlyLinkAttributes7(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonTextOnlyLinkAttributes7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextOnlyLinkAttributes7(stack["elements"])
}

func (c *current) onTextOnlyLinkAttributes28(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonTextOnlyLinkAttributes28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextOnlyLinkAttributes28(stack["elements"])
}

func (c *current) onTextOnlyLinkAttributes1(text interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(text, nil)
}

func (p *parser) callonTextOnlyLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextOnlyLinkAttributes1(stack["text"])
}

func (c *current) onTextAndMoreLinkAttributes7(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonTextAndMoreLinkAttributes7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextAndMoreLinkAttributes7(stack["elements"])
}

func (c *current) onTextAndMoreLinkAttributes26(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonTextAndMoreLinkAttributes26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextAndMoreLinkAttributes26(stack["elements"])
}

func (c *current) onTextAndMoreLinkAttributes1(text, otherattrs interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(text, otherattrs.([]interface{}))
}

func (p *parser) callonTextAndMoreLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextAndMoreLinkAttributes1(stack["text"], stack["otherattrs"])
}

func (c *current) onInlineLinks1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonInlineLinks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineLinks1(stack["elements"])
}

func (c *current) onResolvedRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonResolvedRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onResolvedExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonResolvedExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalQuotedLink1(url, inlineAttributes interface{}) (interface{}, error) {
	// here attributes are required, so we can safely use the `_` and `*` characters in the URL without messing with the bold or italic markers.
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalQuotedLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalQuotedLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewImageBlock(path.(types.Location), inlineAttributes.(types.ElementAttributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onImageAttributes1(alt, width, height, otherattrs interface{}) (interface{}, error) {
	return types.NewImageAttributes(alt, width, height, otherattrs.([]interface{}))
}

func (p *parser) callonImageAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttributes1(stack["alt"], stack["width"], stack["height"], stack["otherattrs"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.([]interface{}))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content)
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteRef1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonFootnoteRef1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteRef1()
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonFencedBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockParagraph1(stack["lines"])
}

func (c *current) onFencedBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonFencedBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockParagraphLine1(stack["line"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Listing, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), nil) // no attributes supported
}

func (p *parser) callonListingBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraph1(stack["lines"])
}

func (c *current) onListingBlockParagraphLine6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonListingBlockParagraphLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraphLine6()
}

func (c *current) onListingBlockParagraphLine1(line interface{}) (interface{}, error) {
	// skip EOL in line content, and stop when quote block delimiter is encountered
	return types.NewInlineElements(line)
}

func (p *parser) callonListingBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraphLine1(stack["line"])
}

func (c *current) onExampleBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Example, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["content"])
}

func (c *current) onExampleBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonExampleBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockParagraph1(stack["lines"])
}

func (c *current) onExampleBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonExampleBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockParagraphLine1(stack["line"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Quote, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuoteBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockElement1(stack["element"])
}

func (c *current) onQuoteBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonQuoteBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlock5(attributes interface{}) (bool, error) {

	kind := attributes.(types.ElementAttributes).GetAsString("kind") // once we got the attributes, check that `[verse]`  was set
	return kind == "verse", nil

}

func (p *parser) callonVerseBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock5(stack["attributes"])
}

func (c *current) onVerseBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Verse, content.([]interface{}), types.None, attributes)

}

func (p *parser) callonVerseBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock1(stack["attributes"], stack["content"])
}

func (c *current) onVerseFileInclude1(include interface{}) (interface{}, error) {
	return include, nil
}

func (p *parser) callonVerseFileInclude1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseFileInclude1(stack["include"])
}

func (c *current) onVerseBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonVerseBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlockParagraphLine8(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonVerseBlockParagraphLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine8(stack["elements"])
}

func (c *current) onVerseBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonVerseBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine1(stack["line"])
}

func (c *current) onVerseBlockParagraphLineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonVerseBlockParagraphLineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLineElement1(stack["element"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onNonSidebarBlock1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonNonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSidebarBlock1(stack["content"])
}

func (c *current) onSidebarBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonSidebarBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockParagraph1(stack["lines"])
}

func (c *current) onSidebarBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonSidebarBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockParagraphLine1(stack["line"])
}

func (c *current) onTable1(attributes, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attributes)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attributes"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}), types.Verbatim, nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockLine1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonCommentBlockLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockLine1()
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines11()
}

func (c *current) onParagraphWithHeadingSpacesLines4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines4()
}

func (c *current) onParagraphWithHeadingSpacesLines24() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines24()
}

func (c *current) onParagraphWithHeadingSpacesLines19(otherLine interface{}) (interface{}, error) {
	return otherLine, nil // do not include the trailing 'EOL'

}

func (p *parser) callonParagraphWithHeadingSpacesLines19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines19(stack["otherLine"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Literal, nil
	}
	return false, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onParagraphWithLiteralAttributeLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralAttributeLine4() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine4()
}

func (c *current) onParagraphWithLiteralAttributeLine1(line interface{}) (interface{}, error) {
	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralAttributeLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine1(stack["line"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent9()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onSimpleWord1() (interface{}, error) {
	// very straightforward content: alphanums followed by spaces but not the "+" signs because it needs a heading space to become a LineBreak element
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSimpleWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleWord1()
}

func (c *current) onAnyChars4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAnyChars4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChars4()
}

func (c *current) onAnyChars13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAnyChars13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChars13()
}

func (c *current) onAnyChars31() (interface{}, error) {
	// punctuation marks are treated separately, so any following macro (image, footnote, etc.) is not included in this rule
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAnyChars31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChars31()
}

func (c *current) onAnyChar1() (interface{}, error) {
	// this is a fall-back rule in case all preceeding rules failed to match the current content.
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["elements"])
}

func (c *current) onResolvedFileLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonResolvedFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedFileLocation1(stack["elements"])
}

func (c *current) onLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["elements"])
}

func (c *current) onResolvedLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonResolvedLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedLocation1(stack["elements"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onWS3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonWS3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWS3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := string(strconv.AppendQuote([]byte{}, lit.val)) + ignoreCase // wrap 'lit.val' with double quotes
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
