// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
	log "github.com/sirupsen/logrus"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "RawSource",
			pos:  position{line: 17, col: 1, offset: 336},
			expr: &actionExpr{
				pos: position{line: 17, col: 14, offset: 349},
				run: (*parser).callonRawSource1,
				expr: &labeledExpr{
					pos:   position{line: 17, col: 14, offset: 349},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 17, col: 20, offset: 355},
						expr: &choiceExpr{
							pos: position{line: 17, col: 21, offset: 356},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 17, col: 21, offset: 356},
									name: "AttributeDeclaration",
								},
								&ruleRefExpr{
									pos:  position{line: 17, col: 44, offset: 379},
									name: "RawSection",
								},
								&ruleRefExpr{
									pos:  position{line: 17, col: 57, offset: 392},
									name: "FileInclusion",
								},
								&ruleRefExpr{
									pos:  position{line: 17, col: 73, offset: 408},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawSection",
			pos:  position{line: 22, col: 1, offset: 553},
			expr: &actionExpr{
				pos: position{line: 23, col: 5, offset: 572},
				run: (*parser).callonRawSection1,
				expr: &seqExpr{
					pos: position{line: 23, col: 5, offset: 572},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 23, col: 5, offset: 572},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 23, col: 12, offset: 579},
								run: (*parser).callonRawSection4,
								expr: &oneOrMoreExpr{
									pos: position{line: 23, col: 12, offset: 579},
									expr: &litMatcher{
										pos:        position{line: 23, col: 13, offset: 580},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 27, col: 5, offset: 671},
							run: (*parser).callonRawSection7,
						},
						&oneOrMoreExpr{
							pos: position{line: 31, col: 5, offset: 823},
							expr: &ruleRefExpr{
								pos:  position{line: 31, col: 5, offset: 823},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 31, col: 12, offset: 830},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 31, col: 19, offset: 837},
								name: "RawSectionTitle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 31, col: 36, offset: 854},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawSectionTitle",
			pos:  position{line: 35, col: 1, offset: 924},
			expr: &actionExpr{
				pos: position{line: 35, col: 20, offset: 943},
				run: (*parser).callonRawSectionTitle1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 35, col: 20, offset: 943},
					expr: &charClassMatcher{
						pos:        position{line: 35, col: 20, offset: 943},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "RawLine",
			pos:  position{line: 39, col: 1, offset: 990},
			expr: &actionExpr{
				pos: position{line: 39, col: 12, offset: 1001},
				run: (*parser).callonRawLine1,
				expr: &seqExpr{
					pos: position{line: 39, col: 12, offset: 1001},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 39, col: 12, offset: 1001},
							expr: &ruleRefExpr{
								pos:  position{line: 39, col: 13, offset: 1002},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 39, col: 17, offset: 1006},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 39, col: 26, offset: 1015},
								run: (*parser).callonRawLine6,
								expr: &zeroOrMoreExpr{
									pos: position{line: 39, col: 26, offset: 1015},
									expr: &charClassMatcher{
										pos:        position{line: 39, col: 26, offset: 1015},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 41, col: 8, offset: 1070},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawDocument",
			pos:  position{line: 48, col: 1, offset: 1349},
			expr: &actionExpr{
				pos: position{line: 48, col: 16, offset: 1364},
				run: (*parser).callonRawDocument1,
				expr: &seqExpr{
					pos: position{line: 48, col: 16, offset: 1364},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 48, col: 16, offset: 1364},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 48, col: 29, offset: 1377},
								expr: &ruleRefExpr{
									pos:  position{line: 48, col: 29, offset: 1377},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 48, col: 43, offset: 1391},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 48, col: 51, offset: 1399},
								name: "RawBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 48, col: 62, offset: 1410},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "RawBlocks",
			pos:  position{line: 55, col: 1, offset: 1599},
			expr: &actionExpr{
				pos: position{line: 55, col: 14, offset: 1612},
				run: (*parser).callonRawBlocks1,
				expr: &seqExpr{
					pos: position{line: 55, col: 14, offset: 1612},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 55, col: 14, offset: 1612},
							expr: &ruleRefExpr{
								pos:  position{line: 55, col: 14, offset: 1612},
								name: "Newline",
							},
						},
						&labeledExpr{
							pos:   position{line: 55, col: 23, offset: 1621},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 55, col: 31, offset: 1629},
								expr: &ruleRefExpr{
									pos:  position{line: 55, col: 31, offset: 1629},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 55, col: 48, offset: 1646},
							label: "blocks",
							expr: &zeroOrMoreExpr{
								pos: position{line: 55, col: 56, offset: 1654},
								expr: &ruleRefExpr{
									pos:  position{line: 55, col: 56, offset: 1654},
									name: "DocumentRawBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRawBlock",
			pos:  position{line: 64, col: 1, offset: 1906},
			expr: &actionExpr{
				pos: position{line: 65, col: 9, offset: 1935},
				run: (*parser).callonDocumentRawBlock1,
				expr: &labeledExpr{
					pos:   position{line: 65, col: 9, offset: 1935},
					label: "block",
					expr: &choiceExpr{
						pos: position{line: 65, col: 16, offset: 1942},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 65, col: 16, offset: 1942},
								name: "LabeledListItem",
							},
							&ruleRefExpr{
								pos:  position{line: 66, col: 11, offset: 2007},
								name: "ImageBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 67, col: 11, offset: 2028},
								name: "SimpleRawParagraph",
							},
							&ruleRefExpr{
								pos:  position{line: 68, col: 11, offset: 2057},
								name: "BlankLine",
							},
							&ruleRefExpr{
								pos:  position{line: 69, col: 11, offset: 2109},
								name: "Section",
							},
							&ruleRefExpr{
								pos:  position{line: 70, col: 11, offset: 2127},
								name: "DelimitedBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 71, col: 11, offset: 2152},
								name: "SingleLineComment",
							},
							&ruleRefExpr{
								pos:  position{line: 72, col: 11, offset: 2180},
								name: "Table",
							},
							&ruleRefExpr{
								pos:  position{line: 73, col: 11, offset: 2196},
								name: "ThematicBreak",
							},
							&ruleRefExpr{
								pos:  position{line: 74, col: 11, offset: 2220},
								name: "OrderedListItem",
							},
							&ruleRefExpr{
								pos:  position{line: 75, col: 11, offset: 2246},
								name: "UnorderedListItem",
							},
							&ruleRefExpr{
								pos:  position{line: 76, col: 11, offset: 2275},
								name: "CalloutListItem",
							},
							&ruleRefExpr{
								pos:  position{line: 77, col: 11, offset: 2301},
								name: "ContinuedListItemElement",
							},
							&ruleRefExpr{
								pos:  position{line: 78, col: 11, offset: 2336},
								name: "LiteralBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 79, col: 11, offset: 2360},
								name: "AttributeDeclaration",
							},
							&ruleRefExpr{
								pos:  position{line: 80, col: 11, offset: 2392},
								name: "AttributeReset",
							},
							&ruleRefExpr{
								pos:  position{line: 81, col: 11, offset: 2418},
								name: "TableOfContentsPlaceHolder",
							},
							&ruleRefExpr{
								pos:  position{line: 82, col: 11, offset: 2455},
								name: "UserMacroBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 83, col: 11, offset: 2480},
								name: "RawParagraph",
							},
							&ruleRefExpr{
								pos:  position{line: 84, col: 11, offset: 2503},
								name: "StandaloneAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 92, col: 1, offset: 2712},
			expr: &ruleRefExpr{
				pos:  position{line: 92, col: 16, offset: 2727},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 94, col: 1, offset: 2745},
			expr: &actionExpr{
				pos: position{line: 94, col: 20, offset: 2764},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 94, col: 20, offset: 2764},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 94, col: 20, offset: 2764},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 94, col: 41, offset: 2785},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 94, col: 49, offset: 2793},
								expr: &ruleRefExpr{
									pos:  position{line: 94, col: 50, offset: 2794},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 94, col: 75, offset: 2819},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 98, col: 1, offset: 2899},
			expr: &seqExpr{
				pos: position{line: 98, col: 26, offset: 2924},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 98, col: 26, offset: 2924},
						val:        "---",
						ignoreCase: false,
						want:       "\"---\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 98, col: 32, offset: 2930},
						expr: &ruleRefExpr{
							pos:  position{line: 98, col: 32, offset: 2930},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 98, col: 39, offset: 2937},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 100, col: 1, offset: 2942},
			expr: &actionExpr{
				pos: position{line: 100, col: 27, offset: 2968},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 100, col: 27, offset: 2968},
					expr: &oneOrMoreExpr{
						pos: position{line: 100, col: 28, offset: 2969},
						expr: &seqExpr{
							pos: position{line: 100, col: 29, offset: 2970},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 100, col: 29, offset: 2970},
									expr: &ruleRefExpr{
										pos:  position{line: 100, col: 30, offset: 2971},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 100, col: 51, offset: 2992,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 107, col: 1, offset: 3158},
			expr: &actionExpr{
				pos: position{line: 107, col: 19, offset: 3176},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 107, col: 19, offset: 3176},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 107, col: 19, offset: 3176},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 107, col: 23, offset: 3180},
							expr: &ruleRefExpr{
								pos:  position{line: 107, col: 23, offset: 3180},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 107, col: 30, offset: 3187},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 107, col: 37, offset: 3194},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 107, col: 52, offset: 3209},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 107, col: 56, offset: 3213},
								expr: &ruleRefExpr{
									pos:  position{line: 107, col: 56, offset: 3213},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 107, col: 74, offset: 3231},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 108, col: 9, offset: 3243},
							expr: &choiceExpr{
								pos: position{line: 108, col: 10, offset: 3244},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 108, col: 10, offset: 3244},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 108, col: 10, offset: 3244},
												expr: &ruleRefExpr{
													pos:  position{line: 108, col: 10, offset: 3244},
													name: "Space",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 108, col: 17, offset: 3251},
												name: "SingleLineComment",
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 108, col: 37, offset: 3271},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 109, col: 9, offset: 3294},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 109, col: 18, offset: 3303},
								expr: &ruleRefExpr{
									pos:  position{line: 109, col: 18, offset: 3303},
									name: "DocumentAuthors",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 110, col: 9, offset: 3330},
							expr: &choiceExpr{
								pos: position{line: 110, col: 10, offset: 3331},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 110, col: 10, offset: 3331},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 110, col: 10, offset: 3331},
												expr: &ruleRefExpr{
													pos:  position{line: 110, col: 10, offset: 3331},
													name: "Space",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 110, col: 17, offset: 3338},
												name: "SingleLineComment",
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 110, col: 37, offset: 3358},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 111, col: 9, offset: 3381},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 111, col: 19, offset: 3391},
								expr: &ruleRefExpr{
									pos:  position{line: 111, col: 19, offset: 3391},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 115, col: 1, offset: 3492},
			expr: &choiceExpr{
				pos: position{line: 115, col: 20, offset: 3511},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 115, col: 20, offset: 3511},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 115, col: 48, offset: 3539},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 117, col: 1, offset: 3569},
			expr: &actionExpr{
				pos: position{line: 117, col: 30, offset: 3598},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 117, col: 30, offset: 3598},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 117, col: 30, offset: 3598},
							expr: &ruleRefExpr{
								pos:  position{line: 117, col: 30, offset: 3598},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 117, col: 37, offset: 3605},
							expr: &litMatcher{
								pos:        position{line: 117, col: 38, offset: 3606},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 117, col: 42, offset: 3610},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 117, col: 51, offset: 3619},
								expr: &ruleRefExpr{
									pos:  position{line: 117, col: 51, offset: 3619},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 117, col: 68, offset: 3636},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 121, col: 1, offset: 3706},
			expr: &actionExpr{
				pos: position{line: 121, col: 33, offset: 3738},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 121, col: 33, offset: 3738},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 121, col: 33, offset: 3738},
							expr: &ruleRefExpr{
								pos:  position{line: 121, col: 33, offset: 3738},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 121, col: 40, offset: 3745},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 121, col: 51, offset: 3756},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 121, col: 59, offset: 3764},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 121, col: 75, offset: 3780},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 125, col: 1, offset: 3859},
			expr: &actionExpr{
				pos: position{line: 125, col: 19, offset: 3877},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 125, col: 19, offset: 3877},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 125, col: 19, offset: 3877},
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 19, offset: 3877},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 125, col: 26, offset: 3884},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 36, offset: 3894},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 125, col: 56, offset: 3914},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 125, col: 62, offset: 3920},
								expr: &ruleRefExpr{
									pos:  position{line: 125, col: 63, offset: 3921},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 125, col: 85, offset: 3943},
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 85, offset: 3943},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 125, col: 92, offset: 3950},
							expr: &litMatcher{
								pos:        position{line: 125, col: 92, offset: 3950},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 125, col: 97, offset: 3955},
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 97, offset: 3955},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 130, col: 1, offset: 4100},
			expr: &actionExpr{
				pos: position{line: 130, col: 23, offset: 4122},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 130, col: 23, offset: 4122},
					expr: &charClassMatcher{
						pos:        position{line: 130, col: 23, offset: 4122},
						val:        "[^<;\\r\\n]",
						chars:      []rune{'<', ';', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 134, col: 1, offset: 4169},
			expr: &actionExpr{
				pos: position{line: 134, col: 24, offset: 4192},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 134, col: 24, offset: 4192},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 134, col: 24, offset: 4192},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 134, col: 28, offset: 4196},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 134, col: 35, offset: 4203},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 134, col: 36, offset: 4204},
									expr: &charClassMatcher{
										pos:        position{line: 134, col: 36, offset: 4204},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 136, col: 4, offset: 4251},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 142, col: 1, offset: 4412},
			expr: &actionExpr{
				pos: position{line: 142, col: 21, offset: 4432},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 142, col: 21, offset: 4432},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 142, col: 21, offset: 4432},
							expr: &ruleRefExpr{
								pos:  position{line: 142, col: 21, offset: 4432},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 142, col: 28, offset: 4439},
							expr: &litMatcher{
								pos:        position{line: 142, col: 29, offset: 4440},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 142, col: 33, offset: 4444},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 143, col: 9, offset: 4463},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 143, col: 10, offset: 4464},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 143, col: 10, offset: 4464},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 143, col: 10, offset: 4464},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 143, col: 21, offset: 4475},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 143, col: 45, offset: 4499},
													expr: &litMatcher{
														pos:        position{line: 143, col: 45, offset: 4499},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 143, col: 50, offset: 4504},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 143, col: 58, offset: 4512},
														expr: &ruleRefExpr{
															pos:  position{line: 143, col: 59, offset: 4513},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 143, col: 82, offset: 4536},
													expr: &litMatcher{
														pos:        position{line: 143, col: 82, offset: 4536},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 143, col: 87, offset: 4541},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 143, col: 97, offset: 4551},
														expr: &ruleRefExpr{
															pos:  position{line: 143, col: 98, offset: 4552},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 145, col: 15, offset: 4669},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 145, col: 15, offset: 4669},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 145, col: 15, offset: 4669},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 145, col: 24, offset: 4678},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 145, col: 46, offset: 4700},
													expr: &litMatcher{
														pos:        position{line: 145, col: 46, offset: 4700},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 145, col: 51, offset: 4705},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 145, col: 61, offset: 4715},
														expr: &ruleRefExpr{
															pos:  position{line: 145, col: 62, offset: 4716},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 147, col: 13, offset: 4825},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 152, col: 1, offset: 4955},
			expr: &choiceExpr{
				pos: position{line: 152, col: 27, offset: 4981},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 152, col: 27, offset: 4981},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 152, col: 27, offset: 4981},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 152, col: 27, offset: 4981},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 152, col: 32, offset: 4986},
									name: "Digit",
								},
								&oneOrMoreExpr{
									pos: position{line: 152, col: 39, offset: 4993},
									expr: &charClassMatcher{
										pos:        position{line: 152, col: 39, offset: 4993},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 154, col: 5, offset: 5041},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 154, col: 5, offset: 5041},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 154, col: 5, offset: 5041},
									expr: &litMatcher{
										pos:        position{line: 154, col: 5, offset: 5041},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 154, col: 11, offset: 5047},
									name: "Digit",
								},
								&oneOrMoreExpr{
									pos: position{line: 154, col: 18, offset: 5054},
									expr: &charClassMatcher{
										pos:        position{line: 154, col: 18, offset: 5054},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 154, col: 29, offset: 5065},
									expr: &ruleRefExpr{
										pos:  position{line: 154, col: 29, offset: 5065},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 154, col: 36, offset: 5072},
									expr: &litMatcher{
										pos:        position{line: 154, col: 37, offset: 5073},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 158, col: 1, offset: 5113},
			expr: &actionExpr{
				pos: position{line: 158, col: 25, offset: 5137},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 158, col: 25, offset: 5137},
					expr: &charClassMatcher{
						pos:        position{line: 158, col: 25, offset: 5137},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 162, col: 1, offset: 5183},
			expr: &actionExpr{
				pos: position{line: 162, col: 27, offset: 5209},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 162, col: 27, offset: 5209},
					expr: &charClassMatcher{
						pos:        position{line: 162, col: 27, offset: 5209},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 169, col: 1, offset: 5362},
			expr: &actionExpr{
				pos: position{line: 169, col: 25, offset: 5386},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 169, col: 25, offset: 5386},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 169, col: 25, offset: 5386},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 169, col: 29, offset: 5390},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 169, col: 35, offset: 5396},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 169, col: 50, offset: 5411},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 170, col: 9, offset: 5424},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 170, col: 15, offset: 5430},
								expr: &actionExpr{
									pos: position{line: 170, col: 16, offset: 5431},
									run: (*parser).callonAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 170, col: 17, offset: 5432},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 170, col: 17, offset: 5432},
												expr: &ruleRefExpr{
													pos:  position{line: 170, col: 17, offset: 5432},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 170, col: 24, offset: 5439},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 170, col: 31, offset: 5446},
													name: "AttributeDeclarationValue",
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 172, col: 13, offset: 5520},
							expr: &ruleRefExpr{
								pos:  position{line: 172, col: 13, offset: 5520},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 172, col: 20, offset: 5527},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeName",
			pos:  position{line: 179, col: 1, offset: 5767},
			expr: &actionExpr{
				pos: position{line: 179, col: 18, offset: 5784},
				run: (*parser).callonAttributeName1,
				expr: &seqExpr{
					pos: position{line: 179, col: 18, offset: 5784},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 179, col: 18, offset: 5784},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 179, col: 28, offset: 5794},
							expr: &charClassMatcher{
								pos:        position{line: 179, col: 29, offset: 5795},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 183, col: 1, offset: 5843},
			expr: &actionExpr{
				pos: position{line: 183, col: 30, offset: 5872},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 183, col: 30, offset: 5872},
					expr: &charClassMatcher{
						pos:        position{line: 183, col: 30, offset: 5872},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 187, col: 1, offset: 5917},
			expr: &choiceExpr{
				pos: position{line: 187, col: 19, offset: 5935},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 187, col: 19, offset: 5935},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 187, col: 19, offset: 5935},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 187, col: 19, offset: 5935},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 187, col: 24, offset: 5940},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 187, col: 30, offset: 5946},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 187, col: 45, offset: 5961},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 187, col: 49, offset: 5965},
									expr: &ruleRefExpr{
										pos:  position{line: 187, col: 49, offset: 5965},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 187, col: 56, offset: 5972},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 189, col: 5, offset: 6032},
						run: (*parser).callonAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 189, col: 5, offset: 6032},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 189, col: 5, offset: 6032},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 189, col: 9, offset: 6036},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 189, col: 15, offset: 6042},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 189, col: 30, offset: 6057},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 189, col: 35, offset: 6062},
									expr: &ruleRefExpr{
										pos:  position{line: 189, col: 35, offset: 6062},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 189, col: 42, offset: 6069},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeSubstitution",
			pos:  position{line: 193, col: 1, offset: 6128},
			expr: &choiceExpr{
				pos: position{line: 193, col: 26, offset: 6153},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 193, col: 26, offset: 6153},
						name: "CounterSub",
					},
					&ruleRefExpr{
						pos:  position{line: 193, col: 39, offset: 6166},
						name: "AttrSub",
					},
				},
			},
		},
		{
			name: "AttrSub",
			pos:  position{line: 195, col: 1, offset: 6175},
			expr: &actionExpr{
				pos: position{line: 195, col: 12, offset: 6186},
				run: (*parser).callonAttrSub1,
				expr: &seqExpr{
					pos: position{line: 195, col: 12, offset: 6186},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 195, col: 12, offset: 6186},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 195, col: 16, offset: 6190},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 195, col: 21, offset: 6195},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 195, col: 35, offset: 6209},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSub",
			pos:  position{line: 199, col: 1, offset: 6275},
			expr: &choiceExpr{
				pos: position{line: 199, col: 15, offset: 6289},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 199, col: 15, offset: 6289},
						name: "CounterSub1",
					},
					&ruleRefExpr{
						pos:  position{line: 199, col: 29, offset: 6303},
						name: "CounterSub2",
					},
					&ruleRefExpr{
						pos:  position{line: 199, col: 43, offset: 6317},
						name: "CounterSubAlpha",
					},
					&ruleRefExpr{
						pos:  position{line: 199, col: 61, offset: 6335},
						name: "CounterSubAlpha2",
					},
					&ruleRefExpr{
						pos:  position{line: 199, col: 80, offset: 6354},
						name: "CounterSubStart",
					},
					&ruleRefExpr{
						pos:  position{line: 199, col: 98, offset: 6372},
						name: "CounterSubStart2",
					},
				},
			},
		},
		{
			name: "CounterSub1",
			pos:  position{line: 201, col: 1, offset: 6390},
			expr: &actionExpr{
				pos: position{line: 201, col: 16, offset: 6405},
				run: (*parser).callonCounterSub11,
				expr: &seqExpr{
					pos: position{line: 201, col: 16, offset: 6405},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 201, col: 16, offset: 6405},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 201, col: 28, offset: 6417},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 201, col: 33, offset: 6422},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 201, col: 47, offset: 6436},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSub2",
			pos:  position{line: 205, col: 1, offset: 6512},
			expr: &actionExpr{
				pos: position{line: 205, col: 16, offset: 6527},
				run: (*parser).callonCounterSub21,
				expr: &seqExpr{
					pos: position{line: 205, col: 16, offset: 6527},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 205, col: 16, offset: 6527},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 205, col: 29, offset: 6540},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 205, col: 34, offset: 6545},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 205, col: 48, offset: 6559},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubAlpha",
			pos:  position{line: 209, col: 1, offset: 6634},
			expr: &actionExpr{
				pos: position{line: 209, col: 20, offset: 6653},
				run: (*parser).callonCounterSubAlpha1,
				expr: &seqExpr{
					pos: position{line: 209, col: 20, offset: 6653},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 209, col: 20, offset: 6653},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 209, col: 32, offset: 6665},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 209, col: 37, offset: 6670},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 209, col: 51, offset: 6684},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 209, col: 55, offset: 6688},
							label: "start",
							expr: &charClassMatcher{
								pos:        position{line: 209, col: 61, offset: 6694},
								val:        "[A-Za-z]",
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 209, col: 70, offset: 6703},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubAlpha2",
			pos:  position{line: 213, col: 1, offset: 6781},
			expr: &actionExpr{
				pos: position{line: 213, col: 21, offset: 6801},
				run: (*parser).callonCounterSubAlpha21,
				expr: &seqExpr{
					pos: position{line: 213, col: 21, offset: 6801},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 213, col: 21, offset: 6801},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 213, col: 34, offset: 6814},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 213, col: 39, offset: 6819},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 213, col: 53, offset: 6833},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 213, col: 57, offset: 6837},
							label: "start",
							expr: &charClassMatcher{
								pos:        position{line: 213, col: 63, offset: 6843},
								val:        "[A-Za-z]",
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 213, col: 72, offset: 6852},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubStart",
			pos:  position{line: 217, col: 1, offset: 6929},
			expr: &actionExpr{
				pos: position{line: 217, col: 20, offset: 6948},
				run: (*parser).callonCounterSubStart1,
				expr: &seqExpr{
					pos: position{line: 217, col: 20, offset: 6948},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 217, col: 20, offset: 6948},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 217, col: 32, offset: 6960},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 217, col: 37, offset: 6965},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 217, col: 51, offset: 6979},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 217, col: 55, offset: 6983},
							label: "num",
							expr: &actionExpr{
								pos: position{line: 217, col: 60, offset: 6988},
								run: (*parser).callonCounterSubStart8,
								expr: &oneOrMoreExpr{
									pos: position{line: 217, col: 60, offset: 6988},
									expr: &charClassMatcher{
										pos:        position{line: 217, col: 60, offset: 6988},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 217, col: 108, offset: 7036},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubStart2",
			pos:  position{line: 221, col: 1, offset: 7118},
			expr: &actionExpr{
				pos: position{line: 221, col: 21, offset: 7138},
				run: (*parser).callonCounterSubStart21,
				expr: &seqExpr{
					pos: position{line: 221, col: 21, offset: 7138},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 221, col: 21, offset: 7138},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 221, col: 34, offset: 7151},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 221, col: 39, offset: 7156},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 221, col: 53, offset: 7170},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 221, col: 57, offset: 7174},
							label: "num",
							expr: &actionExpr{
								pos: position{line: 221, col: 62, offset: 7179},
								run: (*parser).callonCounterSubStart28,
								expr: &oneOrMoreExpr{
									pos: position{line: 221, col: 62, offset: 7179},
									expr: &charClassMatcher{
										pos:        position{line: 221, col: 62, offset: 7179},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 221, col: 110, offset: 7227},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 225, col: 1, offset: 7308},
			expr: &actionExpr{
				pos: position{line: 225, col: 21, offset: 7328},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 225, col: 21, offset: 7328},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 225, col: 21, offset: 7328},
							expr: &choiceExpr{
								pos: position{line: 225, col: 23, offset: 7330},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 225, col: 23, offset: 7330},
										val:        "[",
										ignoreCase: false,
										want:       "\"[\"",
									},
									&litMatcher{
										pos:        position{line: 225, col: 29, offset: 7336},
										val:        ".",
										ignoreCase: false,
										want:       "\".\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 226, col: 5, offset: 7460},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 226, col: 11, offset: 7466},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 226, col: 11, offset: 7466},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 227, col: 9, offset: 7487},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 228, col: 9, offset: 7511},
										name: "ElementShortHandAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 229, col: 9, offset: 7548},
										name: "LiteralBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 230, col: 9, offset: 7581},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 231, col: 9, offset: 7609},
										name: "ExampleBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 232, col: 9, offset: 7641},
										name: "ListingBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 233, col: 9, offset: 7673},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 234, col: 9, offset: 7700},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 235, col: 9, offset: 7727},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 236, col: 9, offset: 7764},
										name: "PassthroughBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 237, col: 9, offset: 7800},
										name: "AttributeGroup",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 237, col: 25, offset: 7816},
							expr: &ruleRefExpr{
								pos:  position{line: 237, col: 25, offset: 7816},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 241, col: 1, offset: 7914},
			expr: &actionExpr{
				pos: position{line: 241, col: 14, offset: 7927},
				run: (*parser).callonElementID1,
				expr: &seqExpr{
					pos: position{line: 241, col: 14, offset: 7927},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 241, col: 14, offset: 7927},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 241, col: 19, offset: 7932},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 241, col: 23, offset: 7936},
								name: "Id",
							},
						},
						&litMatcher{
							pos:        position{line: 241, col: 27, offset: 7940},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 241, col: 32, offset: 7945},
							expr: &ruleRefExpr{
								pos:  position{line: 241, col: 32, offset: 7945},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 241, col: 39, offset: 7952},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 245, col: 1, offset: 7995},
			expr: &actionExpr{
				pos: position{line: 245, col: 20, offset: 8014},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 245, col: 20, offset: 8014},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 245, col: 20, offset: 8014},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 245, col: 25, offset: 8019},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 245, col: 29, offset: 8023},
								name: "Id",
							},
						},
						&litMatcher{
							pos:        position{line: 245, col: 33, offset: 8027},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 245, col: 38, offset: 8032},
							expr: &ruleRefExpr{
								pos:  position{line: 245, col: 38, offset: 8032},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 251, col: 1, offset: 8309},
			expr: &actionExpr{
				pos: position{line: 251, col: 17, offset: 8325},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 251, col: 17, offset: 8325},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 251, col: 17, offset: 8325},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 251, col: 21, offset: 8329},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 251, col: 28, offset: 8336},
								name: "ElementTitleContent",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 251, col: 49, offset: 8357},
							expr: &ruleRefExpr{
								pos:  position{line: 251, col: 49, offset: 8357},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 251, col: 56, offset: 8364},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementTitleContent",
			pos:  position{line: 255, col: 1, offset: 8422},
			expr: &actionExpr{
				pos: position{line: 255, col: 24, offset: 8445},
				run: (*parser).callonElementTitleContent1,
				expr: &seqExpr{
					pos: position{line: 255, col: 24, offset: 8445},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 255, col: 24, offset: 8445},
							val:        "[\\pL0-9]",
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 255, col: 32, offset: 8453},
							expr: &charClassMatcher{
								pos:        position{line: 255, col: 32, offset: 8453},
								val:        "[^\\r\\n<>]",
								chars:      []rune{'\r', '\n', '<', '>'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "ElementShortHandAttributes",
			pos:  position{line: 261, col: 1, offset: 8707},
			expr: &actionExpr{
				pos: position{line: 261, col: 31, offset: 8737},
				run: (*parser).callonElementShortHandAttributes1,
				expr: &seqExpr{
					pos: position{line: 261, col: 31, offset: 8737},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 261, col: 31, offset: 8737},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 261, col: 35, offset: 8741},
							label: "attributes",
							expr: &seqExpr{
								pos: position{line: 261, col: 47, offset: 8753},
								exprs: []interface{}{
									&zeroOrMoreExpr{
										pos: position{line: 261, col: 47, offset: 8753},
										expr: &ruleRefExpr{
											pos:  position{line: 261, col: 47, offset: 8753},
											name: "ShortHandAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 261, col: 62, offset: 8768},
										expr: &ruleRefExpr{
											pos:  position{line: 261, col: 62, offset: 8768},
											name: "NamedAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 261, col: 79, offset: 8785},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 261, col: 83, offset: 8789},
							expr: &ruleRefExpr{
								pos:  position{line: 261, col: 83, offset: 8789},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 261, col: 90, offset: 8796},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlockAttribute",
			pos:  position{line: 265, col: 1, offset: 8871},
			expr: &choiceExpr{
				pos: position{line: 265, col: 19, offset: 8889},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 265, col: 19, offset: 8889},
						name: "BlockAttributeList",
					},
					&ruleRefExpr{
						pos:  position{line: 265, col: 40, offset: 8910},
						name: "ElementTitle",
					},
					&ruleRefExpr{
						pos:  position{line: 265, col: 55, offset: 8925},
						name: "ElementID",
					},
				},
			},
		},
		{
			name: "BlockAttributeList",
			pos:  position{line: 269, col: 1, offset: 9153},
			expr: &actionExpr{
				pos: position{line: 269, col: 23, offset: 9175},
				run: (*parser).callonBlockAttributeList1,
				expr: &seqExpr{
					pos: position{line: 269, col: 23, offset: 9175},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 269, col: 23, offset: 9175},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 269, col: 27, offset: 9179},
							label: "attributes",
							expr: &seqExpr{
								pos: position{line: 269, col: 39, offset: 9191},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 269, col: 39, offset: 9191},
										expr: &ruleRefExpr{
											pos:  position{line: 269, col: 39, offset: 9191},
											name: "BlockAttrStyle",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 269, col: 55, offset: 9207},
										expr: &ruleRefExpr{
											pos:  position{line: 269, col: 55, offset: 9207},
											name: "ShortHandAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 269, col: 70, offset: 9222},
										expr: &ruleRefExpr{
											pos:  position{line: 269, col: 70, offset: 9222},
											name: "BlockAttrPositional2",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 269, col: 92, offset: 9244},
										expr: &ruleRefExpr{
											pos:  position{line: 269, col: 92, offset: 9244},
											name: "BlockAttrPositional3",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 269, col: 114, offset: 9266},
										expr: &ruleRefExpr{
											pos:  position{line: 269, col: 114, offset: 9266},
											name: "NamedAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 269, col: 131, offset: 9283},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:  position{line: 269, col: 135, offset: 9287},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlockAttrStyle",
			pos:  position{line: 273, col: 1, offset: 9362},
			expr: &actionExpr{
				pos: position{line: 273, col: 19, offset: 9380},
				run: (*parser).callonBlockAttrStyle1,
				expr: &labeledExpr{
					pos:   position{line: 273, col: 19, offset: 9380},
					label: "style",
					expr: &ruleRefExpr{
						pos:  position{line: 273, col: 25, offset: 9386},
						name: "PositionalValue",
					},
				},
			},
		},
		{
			name: "BlockAttrPositional2",
			pos:  position{line: 277, col: 1, offset: 9447},
			expr: &actionExpr{
				pos: position{line: 277, col: 25, offset: 9471},
				run: (*parser).callonBlockAttrPositional21,
				expr: &seqExpr{
					pos: position{line: 277, col: 25, offset: 9471},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 277, col: 25, offset: 9471},
							expr: &ruleRefExpr{
								pos:  position{line: 277, col: 25, offset: 9471},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 277, col: 32, offset: 9478},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 277, col: 36, offset: 9482},
							expr: &ruleRefExpr{
								pos:  position{line: 277, col: 36, offset: 9482},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 277, col: 43, offset: 9489},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 277, col: 49, offset: 9495},
								expr: &ruleRefExpr{
									pos:  position{line: 277, col: 49, offset: 9495},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockAttrPositional3",
			pos:  position{line: 284, col: 1, offset: 9634},
			expr: &actionExpr{
				pos: position{line: 284, col: 25, offset: 9658},
				run: (*parser).callonBlockAttrPositional31,
				expr: &seqExpr{
					pos: position{line: 284, col: 25, offset: 9658},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 284, col: 25, offset: 9658},
							expr: &ruleRefExpr{
								pos:  position{line: 284, col: 25, offset: 9658},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 284, col: 32, offset: 9665},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 284, col: 36, offset: 9669},
							expr: &ruleRefExpr{
								pos:  position{line: 284, col: 36, offset: 9669},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 284, col: 43, offset: 9676},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 284, col: 49, offset: 9682},
								expr: &ruleRefExpr{
									pos:  position{line: 284, col: 49, offset: 9682},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlockAttribute",
			pos:  position{line: 291, col: 1, offset: 9821},
			expr: &actionExpr{
				pos: position{line: 291, col: 26, offset: 9846},
				run: (*parser).callonLiteralBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 291, col: 26, offset: 9846},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 291, col: 26, offset: 9846},
							val:        "[literal]",
							ignoreCase: false,
							want:       "\"[literal]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 291, col: 38, offset: 9858},
							expr: &ruleRefExpr{
								pos:  position{line: 291, col: 38, offset: 9858},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 291, col: 45, offset: 9865},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockAttribute",
			pos:  position{line: 295, col: 1, offset: 9922},
			expr: &actionExpr{
				pos: position{line: 295, col: 30, offset: 9951},
				run: (*parser).callonPassthroughBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 295, col: 30, offset: 9951},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 295, col: 30, offset: 9951},
							val:        "[pass]",
							ignoreCase: false,
							want:       "\"[pass]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 295, col: 39, offset: 9960},
							expr: &ruleRefExpr{
								pos:  position{line: 295, col: 39, offset: 9960},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 295, col: 46, offset: 9967},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockAttribute",
			pos:  position{line: 299, col: 1, offset: 10028},
			expr: &actionExpr{
				pos: position{line: 299, col: 26, offset: 10053},
				run: (*parser).callonExampleBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 299, col: 26, offset: 10053},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 299, col: 26, offset: 10053},
							val:        "[example]",
							ignoreCase: false,
							want:       "\"[example]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 299, col: 38, offset: 10065},
							expr: &ruleRefExpr{
								pos:  position{line: 299, col: 38, offset: 10065},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 299, col: 45, offset: 10072},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockAttribute",
			pos:  position{line: 303, col: 1, offset: 10125},
			expr: &actionExpr{
				pos: position{line: 303, col: 26, offset: 10150},
				run: (*parser).callonListingBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 303, col: 26, offset: 10150},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 303, col: 26, offset: 10150},
							val:        "[listing]",
							ignoreCase: false,
							want:       "\"[listing]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 303, col: 38, offset: 10162},
							expr: &ruleRefExpr{
								pos:  position{line: 303, col: 38, offset: 10162},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 303, col: 45, offset: 10169},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 308, col: 1, offset: 10302},
			expr: &actionExpr{
				pos: position{line: 308, col: 30, offset: 10331},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 308, col: 30, offset: 10331},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 308, col: 30, offset: 10331},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 308, col: 34, offset: 10335},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 308, col: 37, offset: 10338},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 308, col: 53, offset: 10354},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 308, col: 57, offset: 10358},
							expr: &ruleRefExpr{
								pos:  position{line: 308, col: 57, offset: 10358},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 308, col: 64, offset: 10365},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 313, col: 1, offset: 10520},
			expr: &actionExpr{
				pos: position{line: 313, col: 21, offset: 10540},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 313, col: 21, offset: 10540},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 313, col: 21, offset: 10540},
							val:        "[source",
							ignoreCase: false,
							want:       "\"[source\"",
						},
						&labeledExpr{
							pos:   position{line: 314, col: 5, offset: 10555},
							label: "option",
							expr: &zeroOrOneExpr{
								pos: position{line: 314, col: 12, offset: 10562},
								expr: &actionExpr{
									pos: position{line: 314, col: 13, offset: 10563},
									run: (*parser).callonSourceAttributes6,
									expr: &litMatcher{
										pos:        position{line: 314, col: 13, offset: 10563},
										val:        "%nowrap",
										ignoreCase: false,
										want:       "\"%nowrap\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 317, col: 5, offset: 10616},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 317, col: 14, offset: 10625},
								expr: &actionExpr{
									pos: position{line: 317, col: 15, offset: 10626},
									run: (*parser).callonSourceAttributes10,
									expr: &seqExpr{
										pos: position{line: 317, col: 15, offset: 10626},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 317, col: 15, offset: 10626},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 317, col: 19, offset: 10630},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 317, col: 24, offset: 10635},
													expr: &ruleRefExpr{
														pos:  position{line: 317, col: 25, offset: 10636},
														name: "AttributeValue",
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 318, col: 5, offset: 10681},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 318, col: 12, offset: 10688},
								expr: &actionExpr{
									pos: position{line: 318, col: 13, offset: 10689},
									run: (*parser).callonSourceAttributes18,
									expr: &seqExpr{
										pos: position{line: 318, col: 13, offset: 10689},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 318, col: 13, offset: 10689},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 318, col: 17, offset: 10693},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 318, col: 22, offset: 10698},
													expr: &choiceExpr{
														pos: position{line: 318, col: 23, offset: 10699},
														alternatives: []interface{}{
															&ruleRefExpr{
																pos:  position{line: 318, col: 23, offset: 10699},
																name: "NamedAttribute",
															},
															&ruleRefExpr{
																pos:  position{line: 318, col: 40, offset: 10716},
																name: "StandaloneAttributeKey",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 319, col: 5, offset: 10769},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 319, col: 9, offset: 10773},
							expr: &ruleRefExpr{
								pos:  position{line: 319, col: 9, offset: 10773},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 319, col: 16, offset: 10780},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 324, col: 1, offset: 10939},
			expr: &actionExpr{
				pos: position{line: 324, col: 19, offset: 10957},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 324, col: 19, offset: 10957},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 324, col: 19, offset: 10957},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 324, col: 23, offset: 10961},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 324, col: 35, offset: 10973},
								name: "Attributes",
							},
						},
						&litMatcher{
							pos:        position{line: 324, col: 47, offset: 10985},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 324, col: 51, offset: 10989},
							expr: &ruleRefExpr{
								pos:  position{line: 324, col: 51, offset: 10989},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 324, col: 58, offset: 10996},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Attributes",
			pos:  position{line: 328, col: 1, offset: 11071},
			expr: &zeroOrMoreExpr{
				pos: position{line: 328, col: 15, offset: 11085},
				expr: &choiceExpr{
					pos: position{line: 328, col: 16, offset: 11086},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 328, col: 16, offset: 11086},
							name: "NamedAttribute",
						},
						&ruleRefExpr{
							pos:  position{line: 328, col: 33, offset: 11103},
							name: "StandaloneAttributeKey",
						},
					},
				},
			},
		},
		{
			name: "NamedAttributes",
			pos:  position{line: 330, col: 1, offset: 11129},
			expr: &actionExpr{
				pos: position{line: 330, col: 20, offset: 11148},
				run: (*parser).callonNamedAttributes1,
				expr: &labeledExpr{
					pos:   position{line: 330, col: 20, offset: 11148},
					label: "attributes",
					expr: &zeroOrMoreExpr{
						pos: position{line: 330, col: 31, offset: 11159},
						expr: &ruleRefExpr{
							pos:  position{line: 330, col: 32, offset: 11160},
							name: "NamedAttribute",
						},
					},
				},
			},
		},
		{
			name: "NamedAttribute",
			pos:  position{line: 334, col: 1, offset: 11248},
			expr: &actionExpr{
				pos: position{line: 334, col: 19, offset: 11266},
				run: (*parser).callonNamedAttribute1,
				expr: &seqExpr{
					pos: position{line: 334, col: 19, offset: 11266},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 334, col: 19, offset: 11266},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 334, col: 24, offset: 11271},
								name: "NamedAttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 334, col: 44, offset: 11291},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 334, col: 48, offset: 11295},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 334, col: 55, offset: 11302},
								name: "AttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 334, col: 71, offset: 11318},
							expr: &seqExpr{
								pos: position{line: 334, col: 72, offset: 11319},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 334, col: 72, offset: 11319},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 334, col: 76, offset: 11323},
										expr: &ruleRefExpr{
											pos:  position{line: 334, col: 76, offset: 11323},
											name: "Space",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttributeKey",
			pos:  position{line: 339, col: 1, offset: 11513},
			expr: &actionExpr{
				pos: position{line: 339, col: 22, offset: 11534},
				run: (*parser).callonNamedAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 339, col: 22, offset: 11534},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 339, col: 22, offset: 11534},
							expr: &ruleRefExpr{
								pos:  position{line: 339, col: 23, offset: 11535},
								name: "Space",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 339, col: 29, offset: 11541},
							expr: &charClassMatcher{
								pos:        position{line: 339, col: 29, offset: 11541},
								val:        "[^\\r\\n=,\\]]",
								chars:      []rune{'\r', '\n', '=', ',', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 339, col: 42, offset: 11554},
							expr: &ruleRefExpr{
								pos:  position{line: 339, col: 42, offset: 11554},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 343, col: 1, offset: 11616},
			expr: &choiceExpr{
				pos: position{line: 343, col: 19, offset: 11634},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 343, col: 19, offset: 11634},
						name: "SingleQuotedAttributeValue",
					},
					&ruleRefExpr{
						pos:  position{line: 343, col: 48, offset: 11663},
						name: "DoubleQuotedAttributeValue",
					},
					&ruleRefExpr{
						pos:  position{line: 343, col: 77, offset: 11692},
						name: "UnquotedAttributeValue",
					},
				},
			},
		},
		{
			name: "SingleQuotedAttributeValue",
			pos:  position{line: 347, col: 1, offset: 11821},
			expr: &actionExpr{
				pos: position{line: 347, col: 31, offset: 11851},
				run: (*parser).callonSingleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 347, col: 31, offset: 11851},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 347, col: 31, offset: 11851},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 347, col: 35, offset: 11855},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 347, col: 40, offset: 11860},
								name: "SingleQuotedAttributeValueContent",
							},
						},
						&litMatcher{
							pos:        position{line: 347, col: 75, offset: 11895},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 347, col: 79, offset: 11899},
							expr: &ruleRefExpr{
								pos:  position{line: 347, col: 79, offset: 11899},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedAttributeValueContent",
			pos:  position{line: 351, col: 1, offset: 11933},
			expr: &actionExpr{
				pos: position{line: 351, col: 38, offset: 11970},
				run: (*parser).callonSingleQuotedAttributeValueContent1,
				expr: &labeledExpr{
					pos:   position{line: 351, col: 38, offset: 11970},
					label: "val",
					expr: &zeroOrMoreExpr{
						pos: position{line: 351, col: 42, offset: 11974},
						expr: &choiceExpr{
							pos: position{line: 352, col: 5, offset: 11981},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 352, col: 6, offset: 11982},
									run: (*parser).callonSingleQuotedAttributeValueContent5,
									expr: &litMatcher{
										pos:        position{line: 352, col: 6, offset: 11982},
										val:        "\\'",
										ignoreCase: false,
										want:       "\"\\\\'\"",
									},
								},
								&actionExpr{
									pos: position{line: 353, col: 6, offset: 12016},
									run: (*parser).callonSingleQuotedAttributeValueContent7,
									expr: &oneOrMoreExpr{
										pos: position{line: 353, col: 6, offset: 12016},
										expr: &charClassMatcher{
											pos:        position{line: 353, col: 6, offset: 12016},
											val:        "[^\\r\\n'\\uFFFD\\\\]",
											chars:      []rune{'\r', '\n', '\'', '�', '\\'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&actionExpr{
									pos: position{line: 354, col: 6, offset: 12073},
									run: (*parser).callonSingleQuotedAttributeValueContent10,
									expr: &litMatcher{
										pos:        position{line: 354, col: 6, offset: 12073},
										val:        "\\",
										ignoreCase: false,
										want:       "\"\\\\\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValueSingleQuoted",
			pos:  position{line: 360, col: 1, offset: 12276},
			expr: &actionExpr{
				pos: position{line: 360, col: 26, offset: 12301},
				run: (*parser).callonAttrValueSingleQuoted1,
				expr: &seqExpr{
					pos: position{line: 360, col: 26, offset: 12301},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 360, col: 26, offset: 12301},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 360, col: 30, offset: 12305},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 360, col: 39, offset: 12314},
								expr: &choiceExpr{
									pos: position{line: 361, col: 5, offset: 12320},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 361, col: 6, offset: 12321},
											run: (*parser).callonAttrValueSingleQuoted7,
											expr: &oneOrMoreExpr{
												pos: position{line: 361, col: 6, offset: 12321},
												expr: &charClassMatcher{
													pos:        position{line: 361, col: 6, offset: 12321},
													val:        "[^'\\r\\n\\uFFFD]",
													chars:      []rune{'\'', '\r', '\n', '�'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 363, col: 10, offset: 12403},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 363, col: 31, offset: 12424},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedAttributeValue",
			pos:  position{line: 368, col: 1, offset: 12500},
			expr: &actionExpr{
				pos: position{line: 368, col: 31, offset: 12530},
				run: (*parser).callonDoubleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 368, col: 31, offset: 12530},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 368, col: 31, offset: 12530},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 368, col: 35, offset: 12534},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 368, col: 40, offset: 12539},
								name: "DoubleQuotedAttributeValueContent",
							},
						},
						&litMatcher{
							pos:        position{line: 368, col: 75, offset: 12574},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 368, col: 79, offset: 12578},
							expr: &ruleRefExpr{
								pos:  position{line: 368, col: 79, offset: 12578},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedAttributeValueContent",
			pos:  position{line: 372, col: 1, offset: 12612},
			expr: &actionExpr{
				pos: position{line: 372, col: 38, offset: 12649},
				run: (*parser).callonDoubleQuotedAttributeValueContent1,
				expr: &labeledExpr{
					pos:   position{line: 372, col: 38, offset: 12649},
					label: "val",
					expr: &zeroOrMoreExpr{
						pos: position{line: 372, col: 42, offset: 12653},
						expr: &choiceExpr{
							pos: position{line: 373, col: 5, offset: 12660},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 373, col: 6, offset: 12661},
									run: (*parser).callonDoubleQuotedAttributeValueContent5,
									expr: &litMatcher{
										pos:        position{line: 373, col: 6, offset: 12661},
										val:        "\\\"",
										ignoreCase: false,
										want:       "\"\\\\\\\"\"",
									},
								},
								&actionExpr{
									pos: position{line: 374, col: 6, offset: 12696},
									run: (*parser).callonDoubleQuotedAttributeValueContent7,
									expr: &oneOrMoreExpr{
										pos: position{line: 374, col: 6, offset: 12696},
										expr: &charClassMatcher{
											pos:        position{line: 374, col: 6, offset: 12696},
											val:        "[^\\r\\n\"\\\\]",
											chars:      []rune{'\r', '\n', '"', '\\'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&actionExpr{
									pos: position{line: 375, col: 6, offset: 12747},
									run: (*parser).callonDoubleQuotedAttributeValueContent10,
									expr: &litMatcher{
										pos:        position{line: 375, col: 6, offset: 12747},
										val:        "\\",
										ignoreCase: false,
										want:       "\"\\\\\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValueDoubleQuoted",
			pos:  position{line: 381, col: 1, offset: 12949},
			expr: &actionExpr{
				pos: position{line: 381, col: 26, offset: 12974},
				run: (*parser).callonAttrValueDoubleQuoted1,
				expr: &seqExpr{
					pos: position{line: 381, col: 26, offset: 12974},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 381, col: 26, offset: 12974},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 381, col: 31, offset: 12979},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 381, col: 40, offset: 12988},
								expr: &choiceExpr{
									pos: position{line: 382, col: 5, offset: 12994},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 382, col: 6, offset: 12995},
											run: (*parser).callonAttrValueDoubleQuoted7,
											expr: &oneOrMoreExpr{
												pos: position{line: 382, col: 6, offset: 12995},
												expr: &charClassMatcher{
													pos:        position{line: 382, col: 6, offset: 12995},
													val:        "[^\"\\r\\n\\uFFFD]",
													chars:      []rune{'"', '\r', '\n', '�'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 384, col: 10, offset: 13077},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 384, col: 31, offset: 13098},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UnquotedAttributeValue",
			pos:  position{line: 389, col: 1, offset: 13195},
			expr: &actionExpr{
				pos: position{line: 389, col: 27, offset: 13221},
				run: (*parser).callonUnquotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 389, col: 27, offset: 13221},
					exprs: []interface{}{
						&oneOrMoreExpr{
							pos: position{line: 389, col: 27, offset: 13221},
							expr: &charClassMatcher{
								pos:        position{line: 389, col: 27, offset: 13221},
								val:        "[^,=\\r\\n\\]]",
								chars:      []rune{',', '=', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&andExpr{
							pos: position{line: 389, col: 40, offset: 13234},
							expr: &charClassMatcher{
								pos:        position{line: 389, col: 41, offset: 13235},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributeKey",
			pos:  position{line: 391, col: 1, offset: 13292},
			expr: &actionExpr{
				pos: position{line: 391, col: 27, offset: 13318},
				run: (*parser).callonStandaloneAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 391, col: 27, offset: 13318},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 391, col: 27, offset: 13318},
							expr: &litMatcher{
								pos:        position{line: 391, col: 28, offset: 13319},
								val:        "quote",
								ignoreCase: false,
								want:       "\"quote\"",
							},
						},
						&notExpr{
							pos: position{line: 391, col: 36, offset: 13327},
							expr: &litMatcher{
								pos:        position{line: 391, col: 37, offset: 13328},
								val:        "verse",
								ignoreCase: false,
								want:       "\"verse\"",
							},
						},
						&notExpr{
							pos: position{line: 391, col: 45, offset: 13336},
							expr: &litMatcher{
								pos:        position{line: 391, col: 46, offset: 13337},
								val:        "literal",
								ignoreCase: false,
								want:       "\"literal\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 391, col: 56, offset: 13347},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 391, col: 61, offset: 13352},
								name: "NamedAttributeKey",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 391, col: 80, offset: 13371},
							expr: &seqExpr{
								pos: position{line: 391, col: 81, offset: 13372},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 391, col: 81, offset: 13372},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 391, col: 85, offset: 13376},
										expr: &ruleRefExpr{
											pos:  position{line: 391, col: 85, offset: 13376},
											name: "Space",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 395, col: 1, offset: 13468},
			expr: &actionExpr{
				pos: position{line: 395, col: 20, offset: 13487},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 395, col: 20, offset: 13487},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 395, col: 20, offset: 13487},
							val:        "[quote",
							ignoreCase: false,
							want:       "\"[quote\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 395, col: 29, offset: 13496},
							expr: &ruleRefExpr{
								pos:  position{line: 395, col: 29, offset: 13496},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 395, col: 36, offset: 13503},
							expr: &litMatcher{
								pos:        position{line: 395, col: 36, offset: 13503},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 395, col: 41, offset: 13508},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 395, col: 48, offset: 13515},
								expr: &ruleRefExpr{
									pos:  position{line: 395, col: 49, offset: 13516},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 395, col: 66, offset: 13533},
							expr: &litMatcher{
								pos:        position{line: 395, col: 66, offset: 13533},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 395, col: 71, offset: 13538},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 395, col: 77, offset: 13544},
								expr: &ruleRefExpr{
									pos:  position{line: 395, col: 78, offset: 13545},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 395, col: 95, offset: 13562},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 395, col: 99, offset: 13566},
							expr: &ruleRefExpr{
								pos:  position{line: 395, col: 99, offset: 13566},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 395, col: 106, offset: 13573},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 399, col: 1, offset: 13642},
			expr: &actionExpr{
				pos: position{line: 399, col: 20, offset: 13661},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 399, col: 20, offset: 13661},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 399, col: 20, offset: 13661},
							val:        "[verse",
							ignoreCase: false,
							want:       "\"[verse\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 399, col: 29, offset: 13670},
							expr: &ruleRefExpr{
								pos:  position{line: 399, col: 29, offset: 13670},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 399, col: 36, offset: 13677},
							expr: &litMatcher{
								pos:        position{line: 399, col: 36, offset: 13677},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 399, col: 41, offset: 13682},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 399, col: 48, offset: 13689},
								expr: &ruleRefExpr{
									pos:  position{line: 399, col: 49, offset: 13690},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 399, col: 66, offset: 13707},
							expr: &litMatcher{
								pos:        position{line: 399, col: 66, offset: 13707},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 399, col: 71, offset: 13712},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 399, col: 77, offset: 13718},
								expr: &ruleRefExpr{
									pos:  position{line: 399, col: 78, offset: 13719},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 399, col: 95, offset: 13736},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 399, col: 99, offset: 13740},
							expr: &ruleRefExpr{
								pos:  position{line: 399, col: 99, offset: 13740},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 399, col: 106, offset: 13747},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 403, col: 1, offset: 13834},
			expr: &actionExpr{
				pos: position{line: 403, col: 19, offset: 13852},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 403, col: 20, offset: 13853},
					expr: &charClassMatcher{
						pos:        position{line: 403, col: 20, offset: 13853},
						val:        "[^\\r\\n,\\]]",
						chars:      []rune{'\r', '\n', ',', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "QuotedTextAttributes",
			pos:  position{line: 407, col: 1, offset: 13902},
			expr: &actionExpr{
				pos: position{line: 407, col: 25, offset: 13926},
				run: (*parser).callonQuotedTextAttributes1,
				expr: &seqExpr{
					pos: position{line: 407, col: 25, offset: 13926},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 407, col: 25, offset: 13926},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 407, col: 29, offset: 13930},
							label: "attributes",
							expr: &seqExpr{
								pos: position{line: 407, col: 41, offset: 13942},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 407, col: 41, offset: 13942},
										expr: &ruleRefExpr{
											pos:  position{line: 407, col: 41, offset: 13942},
											name: "QuotedTextAttrRole",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 407, col: 61, offset: 13962},
										expr: &ruleRefExpr{
											pos:  position{line: 407, col: 61, offset: 13962},
											name: "ShortHandAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 407, col: 76, offset: 13977},
										expr: &ruleRefExpr{
											pos:  position{line: 407, col: 76, offset: 13977},
											name: "NamedAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 407, col: 93, offset: 13994},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedTextAttrRole",
			pos:  position{line: 411, col: 1, offset: 14069},
			expr: &actionExpr{
				pos: position{line: 411, col: 23, offset: 14091},
				run: (*parser).callonQuotedTextAttrRole1,
				expr: &seqExpr{
					pos: position{line: 411, col: 23, offset: 14091},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 411, col: 23, offset: 14091},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 411, col: 28, offset: 14096},
								name: "PositionalValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 411, col: 44, offset: 14112},
							expr: &seqExpr{
								pos: position{line: 411, col: 45, offset: 14113},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 411, col: 45, offset: 14113},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 411, col: 49, offset: 14117},
										expr: &ruleRefExpr{
											pos:  position{line: 411, col: 49, offset: 14117},
											name: "Space",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributes",
			pos:  position{line: 415, col: 1, offset: 14169},
			expr: &actionExpr{
				pos: position{line: 415, col: 25, offset: 14193},
				run: (*parser).callonStandaloneAttributes1,
				expr: &seqExpr{
					pos: position{line: 415, col: 25, offset: 14193},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 415, col: 25, offset: 14193},
							label: "attributes",
							expr: &oneOrMoreExpr{
								pos: position{line: 415, col: 36, offset: 14204},
								expr: &ruleRefExpr{
									pos:  position{line: 415, col: 37, offset: 14205},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 415, col: 56, offset: 14224},
							expr: &ruleRefExpr{
								pos:  position{line: 415, col: 56, offset: 14224},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttr",
			pos:  position{line: 419, col: 1, offset: 14362},
			expr: &choiceExpr{
				pos: position{line: 419, col: 18, offset: 14379},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 419, col: 18, offset: 14379},
						name: "ShortHandAttrID",
					},
					&ruleRefExpr{
						pos:  position{line: 419, col: 36, offset: 14397},
						name: "ShortHandAttrOption",
					},
					&ruleRefExpr{
						pos:  position{line: 419, col: 58, offset: 14419},
						name: "ShortHandAttrRole",
					},
				},
			},
		},
		{
			name: "ShortHandAttrOption",
			pos:  position{line: 421, col: 1, offset: 14438},
			expr: &actionExpr{
				pos: position{line: 421, col: 24, offset: 14461},
				run: (*parser).callonShortHandAttrOption1,
				expr: &seqExpr{
					pos: position{line: 421, col: 24, offset: 14461},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 421, col: 24, offset: 14461},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 421, col: 28, offset: 14465},
							label: "option",
							expr: &ruleRefExpr{
								pos:  position{line: 421, col: 36, offset: 14473},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 421, col: 52, offset: 14489},
							expr: &charClassMatcher{
								pos:        position{line: 421, col: 53, offset: 14490},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 421, col: 66, offset: 14503},
							expr: &seqExpr{
								pos: position{line: 421, col: 67, offset: 14504},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 421, col: 67, offset: 14504},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 421, col: 71, offset: 14508},
										expr: &ruleRefExpr{
											pos:  position{line: 421, col: 71, offset: 14508},
											name: "Space",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttrID",
			pos:  position{line: 425, col: 1, offset: 14564},
			expr: &actionExpr{
				pos: position{line: 425, col: 20, offset: 14583},
				run: (*parser).callonShortHandAttrID1,
				expr: &seqExpr{
					pos: position{line: 425, col: 20, offset: 14583},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 425, col: 20, offset: 14583},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 425, col: 24, offset: 14587},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 425, col: 28, offset: 14591},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 425, col: 44, offset: 14607},
							expr: &charClassMatcher{
								pos:        position{line: 425, col: 45, offset: 14608},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 425, col: 58, offset: 14621},
							expr: &seqExpr{
								pos: position{line: 425, col: 59, offset: 14622},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 425, col: 59, offset: 14622},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 425, col: 63, offset: 14626},
										expr: &ruleRefExpr{
											pos:  position{line: 425, col: 63, offset: 14626},
											name: "Space",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttrRole",
			pos:  position{line: 429, col: 1, offset: 14674},
			expr: &actionExpr{
				pos: position{line: 429, col: 22, offset: 14695},
				run: (*parser).callonShortHandAttrRole1,
				expr: &seqExpr{
					pos: position{line: 429, col: 22, offset: 14695},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 429, col: 22, offset: 14695},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 429, col: 26, offset: 14699},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 429, col: 32, offset: 14705},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 429, col: 48, offset: 14721},
							expr: &charClassMatcher{
								pos:        position{line: 429, col: 49, offset: 14722},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 429, col: 62, offset: 14735},
							expr: &seqExpr{
								pos: position{line: 429, col: 63, offset: 14736},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 429, col: 63, offset: 14736},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 429, col: 67, offset: 14740},
										expr: &ruleRefExpr{
											pos:  position{line: 429, col: 67, offset: 14740},
											name: "Space",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PositionalValue",
			pos:  position{line: 434, col: 1, offset: 14836},
			expr: &actionExpr{
				pos: position{line: 434, col: 20, offset: 14855},
				run: (*parser).callonPositionalValue1,
				expr: &seqExpr{
					pos: position{line: 434, col: 20, offset: 14855},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 434, col: 20, offset: 14855},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 434, col: 27, offset: 14862},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 434, col: 43, offset: 14878},
							expr: &charClassMatcher{
								pos:        position{line: 434, col: 44, offset: 14879},
								val:        "[,#%.\\]]",
								chars:      []rune{',', '#', '%', '.', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandValue",
			pos:  position{line: 438, col: 1, offset: 14915},
			expr: &choiceExpr{
				pos: position{line: 438, col: 19, offset: 14933},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 438, col: 19, offset: 14933},
						name: "ShortHandValuePlain",
					},
					&ruleRefExpr{
						pos:  position{line: 438, col: 41, offset: 14955},
						name: "AttrValueSingleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 438, col: 65, offset: 14979},
						name: "AttrValueDoubleQuoted",
					},
				},
			},
		},
		{
			name: "ShortHandValuePlain",
			pos:  position{line: 442, col: 1, offset: 15177},
			expr: &actionExpr{
				pos: position{line: 442, col: 24, offset: 15200},
				run: (*parser).callonShortHandValuePlain1,
				expr: &seqExpr{
					pos: position{line: 442, col: 24, offset: 15200},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 442, col: 24, offset: 15200},
							label: "first",
							expr: &actionExpr{
								pos: position{line: 442, col: 31, offset: 15207},
								run: (*parser).callonShortHandValuePlain4,
								expr: &charClassMatcher{
									pos:        position{line: 442, col: 31, offset: 15207},
									val:        "[^,\\r\\n\"' \\t.#%=\\]]",
									chars:      []rune{',', '\r', '\n', '"', '\'', ' ', '\t', '.', '#', '%', '=', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 445, col: 5, offset: 15293},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 445, col: 13, offset: 15301},
								expr: &choiceExpr{
									pos: position{line: 445, col: 14, offset: 15302},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 445, col: 14, offset: 15302},
											name: "ElementPlaceHolder",
										},
										&choiceExpr{
											pos: position{line: 446, col: 12, offset: 15333},
											alternatives: []interface{}{
												&charClassMatcher{
													pos:        position{line: 446, col: 12, offset: 15333},
													val:        "[^ \\t,\\r\\n\"'.#%=\\]]",
													chars:      []rune{' ', '\t', ',', '\r', '\n', '"', '\'', '.', '#', '%', '=', ']'},
													ignoreCase: false,
													inverted:   true,
												},
												&actionExpr{
													pos: position{line: 446, col: 34, offset: 15355},
													run: (*parser).callonShortHandValuePlain12,
													expr: &seqExpr{
														pos: position{line: 446, col: 34, offset: 15355},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 446, col: 34, offset: 15355},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 446, col: 39, offset: 15360},
																val:        "[^ \\t,\\r\\n\"'.#%=\\]]",
																chars:      []rune{' ', '\t', ',', '\r', '\n', '"', '\'', '.', '#', '%', '=', ']'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 456, col: 1, offset: 15647},
			expr: &actionExpr{
				pos: position{line: 456, col: 12, offset: 15658},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 456, col: 12, offset: 15658},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 456, col: 12, offset: 15658},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 456, col: 23, offset: 15669},
								expr: &ruleRefExpr{
									pos:  position{line: 456, col: 24, offset: 15670},
									name: "BlockAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 457, col: 5, offset: 15691},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 457, col: 12, offset: 15698},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 457, col: 12, offset: 15698},
									expr: &litMatcher{
										pos:        position{line: 457, col: 13, offset: 15699},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 461, col: 5, offset: 15790},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 465, col: 5, offset: 15942},
							expr: &ruleRefExpr{
								pos:  position{line: 465, col: 5, offset: 15942},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 465, col: 12, offset: 15949},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 465, col: 19, offset: 15956},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 465, col: 34, offset: 15971},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 465, col: 38, offset: 15975},
								expr: &ruleRefExpr{
									pos:  position{line: 465, col: 38, offset: 15975},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 465, col: 56, offset: 15993},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 469, col: 1, offset: 16115},
			expr: &actionExpr{
				pos: position{line: 469, col: 18, offset: 16132},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 469, col: 18, offset: 16132},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 469, col: 27, offset: 16141},
						expr: &seqExpr{
							pos: position{line: 469, col: 28, offset: 16142},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 469, col: 28, offset: 16142},
									expr: &ruleRefExpr{
										pos:  position{line: 469, col: 29, offset: 16143},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 469, col: 37, offset: 16151},
									expr: &ruleRefExpr{
										pos:  position{line: 469, col: 38, offset: 16152},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 469, col: 54, offset: 16168},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 473, col: 1, offset: 16289},
			expr: &actionExpr{
				pos: position{line: 473, col: 17, offset: 16305},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 473, col: 17, offset: 16305},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 473, col: 26, offset: 16314},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 473, col: 26, offset: 16314},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 474, col: 11, offset: 16329},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 475, col: 11, offset: 16374},
								expr: &ruleRefExpr{
									pos:  position{line: 475, col: 11, offset: 16374},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 476, col: 11, offset: 16392},
								name: "ElementPlaceHolder",
							},
							&ruleRefExpr{
								pos:  position{line: 477, col: 11, offset: 16421},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsPlaceHolder",
			pos:  position{line: 484, col: 1, offset: 16572},
			expr: &seqExpr{
				pos: position{line: 484, col: 31, offset: 16602},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 484, col: 31, offset: 16602},
						val:        "toc::[]",
						ignoreCase: false,
						want:       "\"toc::[]\"",
					},
					&ruleRefExpr{
						pos:  position{line: 484, col: 41, offset: 16612},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 489, col: 1, offset: 16723},
			expr: &actionExpr{
				pos: position{line: 489, col: 19, offset: 16741},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 489, col: 19, offset: 16741},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 489, col: 19, offset: 16741},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 489, col: 25, offset: 16747},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 489, col: 40, offset: 16762},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 489, col: 45, offset: 16767},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 489, col: 52, offset: 16774},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 489, col: 68, offset: 16790},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 489, col: 80, offset: 16802},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 493, col: 1, offset: 16941},
			expr: &actionExpr{
				pos: position{line: 493, col: 20, offset: 16960},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 493, col: 20, offset: 16960},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 493, col: 20, offset: 16960},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 493, col: 26, offset: 16966},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 493, col: 41, offset: 16981},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 493, col: 45, offset: 16985},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 493, col: 52, offset: 16992},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 493, col: 68, offset: 17008},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 493, col: 80, offset: 17020},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 497, col: 1, offset: 17160},
			expr: &actionExpr{
				pos: position{line: 497, col: 18, offset: 17177},
				run: (*parser).callonUserMacroName1,
				expr: &seqExpr{
					pos: position{line: 497, col: 18, offset: 17177},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 497, col: 18, offset: 17177},
							expr: &litMatcher{
								pos:        position{line: 497, col: 19, offset: 17178},
								val:        "include",
								ignoreCase: false,
								want:       "\"include\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 497, col: 30, offset: 17189},
							expr: &charClassMatcher{
								pos:        position{line: 497, col: 30, offset: 17189},
								val:        "[\\pL0-9_-]",
								chars:      []rune{'_', '-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 501, col: 1, offset: 17238},
			expr: &actionExpr{
				pos: position{line: 501, col: 19, offset: 17256},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 501, col: 19, offset: 17256},
					expr: &charClassMatcher{
						pos:        position{line: 501, col: 19, offset: 17256},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 505, col: 1, offset: 17304},
			expr: &actionExpr{
				pos: position{line: 505, col: 24, offset: 17327},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 505, col: 24, offset: 17327},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 505, col: 24, offset: 17327},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 505, col: 28, offset: 17331},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 505, col: 39, offset: 17342},
								expr: &ruleRefExpr{
									pos:  position{line: 505, col: 40, offset: 17343},
									name: "NamedAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 505, col: 57, offset: 17360},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 512, col: 1, offset: 17546},
			expr: &actionExpr{
				pos: position{line: 512, col: 18, offset: 17563},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 512, col: 18, offset: 17563},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 512, col: 18, offset: 17563},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 512, col: 24, offset: 17569},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 512, col: 24, offset: 17569},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 512, col: 24, offset: 17569},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 512, col: 36, offset: 17581},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 512, col: 42, offset: 17587},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 512, col: 56, offset: 17601},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 512, col: 74, offset: 17619},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 514, col: 8, offset: 17766},
							expr: &ruleRefExpr{
								pos:  position{line: 514, col: 8, offset: 17766},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 514, col: 15, offset: 17773},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 518, col: 1, offset: 17825},
			expr: &actionExpr{
				pos: position{line: 518, col: 26, offset: 17850},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 518, col: 26, offset: 17850},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 518, col: 26, offset: 17850},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 518, col: 30, offset: 17854},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 518, col: 41, offset: 17865},
								expr: &choiceExpr{
									pos: position{line: 518, col: 42, offset: 17866},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 518, col: 42, offset: 17866},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 518, col: 64, offset: 17888},
											name: "TagRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 518, col: 85, offset: 17909},
											name: "NamedAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 518, col: 102, offset: 17926},
											name: "StandaloneAttributeKey",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 518, col: 127, offset: 17951},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 522, col: 1, offset: 18027},
			expr: &actionExpr{
				pos: position{line: 522, col: 24, offset: 18050},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 522, col: 24, offset: 18050},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 522, col: 24, offset: 18050},
							val:        "lines=",
							ignoreCase: false,
							want:       "\"lines=\"",
						},
						&labeledExpr{
							pos:   position{line: 522, col: 33, offset: 18059},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 522, col: 40, offset: 18066},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 522, col: 66, offset: 18092},
							expr: &litMatcher{
								pos:        position{line: 522, col: 66, offset: 18092},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 526, col: 1, offset: 18151},
			expr: &actionExpr{
				pos: position{line: 526, col: 29, offset: 18179},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 526, col: 29, offset: 18179},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 526, col: 29, offset: 18179},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 526, col: 36, offset: 18186},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 526, col: 36, offset: 18186},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 527, col: 11, offset: 18303},
										name: "MultipleQuotedLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 528, col: 11, offset: 18339},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 529, col: 11, offset: 18365},
										name: "MultiLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 530, col: 11, offset: 18397},
										name: "SingleLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 531, col: 11, offset: 18429},
										name: "SingleLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 532, col: 11, offset: 18456},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 532, col: 31, offset: 18476},
							expr: &ruleRefExpr{
								pos:  position{line: 532, col: 31, offset: 18476},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 532, col: 39, offset: 18484},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 532, col: 39, offset: 18484},
									expr: &litMatcher{
										pos:        position{line: 532, col: 40, offset: 18485},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 532, col: 46, offset: 18491},
									expr: &litMatcher{
										pos:        position{line: 532, col: 47, offset: 18492},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 536, col: 1, offset: 18524},
			expr: &actionExpr{
				pos: position{line: 536, col: 23, offset: 18546},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 536, col: 23, offset: 18546},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 536, col: 23, offset: 18546},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 536, col: 30, offset: 18553},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 536, col: 30, offset: 18553},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 536, col: 47, offset: 18570},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 537, col: 5, offset: 18592},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 537, col: 12, offset: 18599},
								expr: &actionExpr{
									pos: position{line: 537, col: 13, offset: 18600},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 537, col: 13, offset: 18600},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 537, col: 13, offset: 18600},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 537, col: 17, offset: 18604},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 537, col: 24, offset: 18611},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 537, col: 24, offset: 18611},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 537, col: 41, offset: 18628},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedLineRanges",
			pos:  position{line: 543, col: 1, offset: 18766},
			expr: &actionExpr{
				pos: position{line: 543, col: 29, offset: 18794},
				run: (*parser).callonMultipleQuotedLineRanges1,
				expr: &seqExpr{
					pos: position{line: 543, col: 29, offset: 18794},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 543, col: 29, offset: 18794},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 543, col: 34, offset: 18799},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 543, col: 41, offset: 18806},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 543, col: 41, offset: 18806},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 543, col: 58, offset: 18823},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 544, col: 5, offset: 18845},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 544, col: 12, offset: 18852},
								expr: &actionExpr{
									pos: position{line: 544, col: 13, offset: 18853},
									run: (*parser).callonMultipleQuotedLineRanges10,
									expr: &seqExpr{
										pos: position{line: 544, col: 13, offset: 18853},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 544, col: 13, offset: 18853},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 544, col: 17, offset: 18857},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 544, col: 24, offset: 18864},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 544, col: 24, offset: 18864},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 544, col: 41, offset: 18881},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 546, col: 9, offset: 18934},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 550, col: 1, offset: 19024},
			expr: &actionExpr{
				pos: position{line: 550, col: 19, offset: 19042},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 550, col: 19, offset: 19042},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 550, col: 19, offset: 19042},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 550, col: 26, offset: 19049},
								name: "Number",
							},
						},
						&litMatcher{
							pos:        position{line: 550, col: 34, offset: 19057},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 550, col: 39, offset: 19062},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 550, col: 44, offset: 19067},
								name: "Number",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineQuotedRange",
			pos:  position{line: 554, col: 1, offset: 19155},
			expr: &actionExpr{
				pos: position{line: 554, col: 25, offset: 19179},
				run: (*parser).callonMultiLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 554, col: 25, offset: 19179},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 554, col: 25, offset: 19179},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 554, col: 30, offset: 19184},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 554, col: 37, offset: 19191},
								name: "Number",
							},
						},
						&litMatcher{
							pos:        position{line: 554, col: 45, offset: 19199},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 554, col: 50, offset: 19204},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 554, col: 55, offset: 19209},
								name: "Number",
							},
						},
						&litMatcher{
							pos:        position{line: 554, col: 63, offset: 19217},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 558, col: 1, offset: 19302},
			expr: &actionExpr{
				pos: position{line: 558, col: 20, offset: 19321},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 558, col: 20, offset: 19321},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 558, col: 32, offset: 19333},
						name: "Number",
					},
				},
			},
		},
		{
			name: "SingleLineQuotedRange",
			pos:  position{line: 562, col: 1, offset: 19428},
			expr: &actionExpr{
				pos: position{line: 562, col: 26, offset: 19453},
				run: (*parser).callonSingleLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 562, col: 26, offset: 19453},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 562, col: 26, offset: 19453},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 562, col: 31, offset: 19458},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 562, col: 43, offset: 19470},
								name: "Number",
							},
						},
						&litMatcher{
							pos:        position{line: 562, col: 51, offset: 19478},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 566, col: 1, offset: 19570},
			expr: &actionExpr{
				pos: position{line: 566, col: 23, offset: 19592},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 566, col: 23, offset: 19592},
					expr: &charClassMatcher{
						pos:        position{line: 566, col: 23, offset: 19592},
						val:        "[^\\], ]",
						chars:      []rune{']', ',', ' '},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "TagRangesAttribute",
			pos:  position{line: 570, col: 1, offset: 19637},
			expr: &actionExpr{
				pos: position{line: 570, col: 23, offset: 19659},
				run: (*parser).callonTagRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 570, col: 23, offset: 19659},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 570, col: 24, offset: 19660},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 570, col: 24, offset: 19660},
									val:        "tags=",
									ignoreCase: false,
									want:       "\"tags=\"",
								},
								&litMatcher{
									pos:        position{line: 570, col: 34, offset: 19670},
									val:        "tag=",
									ignoreCase: false,
									want:       "\"tag=\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 570, col: 42, offset: 19678},
							label: "tags",
							expr: &ruleRefExpr{
								pos:  position{line: 570, col: 48, offset: 19684},
								name: "TagRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 570, col: 73, offset: 19709},
							expr: &litMatcher{
								pos:        position{line: 570, col: 73, offset: 19709},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttributeValue",
			pos:  position{line: 574, col: 1, offset: 19858},
			expr: &actionExpr{
				pos: position{line: 574, col: 28, offset: 19885},
				run: (*parser).callonTagRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 574, col: 28, offset: 19885},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 574, col: 28, offset: 19885},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 574, col: 35, offset: 19892},
								name: "MultipleTagRanges",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 574, col: 54, offset: 19911},
							expr: &ruleRefExpr{
								pos:  position{line: 574, col: 54, offset: 19911},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 574, col: 62, offset: 19919},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 574, col: 62, offset: 19919},
									expr: &litMatcher{
										pos:        position{line: 574, col: 63, offset: 19920},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 574, col: 69, offset: 19926},
									expr: &litMatcher{
										pos:        position{line: 574, col: 70, offset: 19927},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 578, col: 1, offset: 19959},
			expr: &actionExpr{
				pos: position{line: 578, col: 22, offset: 19980},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 578, col: 22, offset: 19980},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 578, col: 22, offset: 19980},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 578, col: 29, offset: 19987},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 579, col: 5, offset: 20001},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 579, col: 12, offset: 20008},
								expr: &actionExpr{
									pos: position{line: 579, col: 13, offset: 20009},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 579, col: 13, offset: 20009},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 579, col: 13, offset: 20009},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 579, col: 17, offset: 20013},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 579, col: 24, offset: 20020},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 585, col: 1, offset: 20151},
			expr: &choiceExpr{
				pos: position{line: 585, col: 13, offset: 20163},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 585, col: 13, offset: 20163},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 585, col: 13, offset: 20163},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 585, col: 18, offset: 20168},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 585, col: 18, offset: 20168},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 585, col: 30, offset: 20180},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 587, col: 5, offset: 20248},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 587, col: 5, offset: 20248},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 587, col: 5, offset: 20248},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 587, col: 9, offset: 20252},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 587, col: 14, offset: 20257},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 587, col: 14, offset: 20257},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 587, col: 26, offset: 20269},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 591, col: 1, offset: 20337},
			expr: &actionExpr{
				pos: position{line: 591, col: 16, offset: 20352},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 591, col: 16, offset: 20352},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 591, col: 16, offset: 20352},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 591, col: 23, offset: 20359},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 591, col: 23, offset: 20359},
									expr: &litMatcher{
										pos:        position{line: 591, col: 24, offset: 20360},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 594, col: 5, offset: 20414},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 604, col: 1, offset: 20708},
			expr: &actionExpr{
				pos: position{line: 604, col: 21, offset: 20728},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 604, col: 21, offset: 20728},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 604, col: 21, offset: 20728},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 604, col: 29, offset: 20736},
								expr: &choiceExpr{
									pos: position{line: 604, col: 30, offset: 20737},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 604, col: 30, offset: 20737},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 604, col: 53, offset: 20760},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 604, col: 74, offset: 20781},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 604, col: 74, offset: 20781,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 604, col: 107, offset: 20814},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 608, col: 1, offset: 20885},
			expr: &actionExpr{
				pos: position{line: 608, col: 25, offset: 20909},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 608, col: 25, offset: 20909},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 608, col: 25, offset: 20909},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 608, col: 33, offset: 20917},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 608, col: 38, offset: 20922},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 608, col: 38, offset: 20922},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 608, col: 78, offset: 20962},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 612, col: 1, offset: 21027},
			expr: &actionExpr{
				pos: position{line: 612, col: 23, offset: 21049},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 612, col: 23, offset: 21049},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 612, col: 23, offset: 21049},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 612, col: 31, offset: 21057},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 612, col: 36, offset: 21062},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 612, col: 36, offset: 21062},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 612, col: 76, offset: 21102},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 619, col: 1, offset: 21266},
			expr: &choiceExpr{
				pos: position{line: 619, col: 18, offset: 21283},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 619, col: 18, offset: 21283},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 619, col: 18, offset: 21283},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 619, col: 27, offset: 21292},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 621, col: 9, offset: 21349},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 621, col: 9, offset: 21349},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 621, col: 15, offset: 21355},
								expr: &ruleRefExpr{
									pos:  position{line: 621, col: 16, offset: 21356},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 625, col: 1, offset: 21448},
			expr: &actionExpr{
				pos: position{line: 625, col: 22, offset: 21469},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 625, col: 22, offset: 21469},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 625, col: 22, offset: 21469},
							expr: &ruleRefExpr{
								pos:  position{line: 625, col: 23, offset: 21470},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 626, col: 5, offset: 21478},
							expr: &ruleRefExpr{
								pos:  position{line: 626, col: 6, offset: 21479},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 627, col: 5, offset: 21493},
							expr: &ruleRefExpr{
								pos:  position{line: 627, col: 6, offset: 21494},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 628, col: 5, offset: 21516},
							expr: &ruleRefExpr{
								pos:  position{line: 628, col: 6, offset: 21517},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 629, col: 5, offset: 21543},
							expr: &ruleRefExpr{
								pos:  position{line: 629, col: 6, offset: 21544},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 630, col: 5, offset: 21572},
							expr: &ruleRefExpr{
								pos:  position{line: 630, col: 6, offset: 21573},
								name: "CalloutListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 631, col: 5, offset: 21599},
							expr: &ruleRefExpr{
								pos:  position{line: 631, col: 6, offset: 21600},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 632, col: 5, offset: 21625},
							expr: &ruleRefExpr{
								pos:  position{line: 632, col: 6, offset: 21626},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 633, col: 5, offset: 21647},
							expr: &ruleRefExpr{
								pos:  position{line: 633, col: 6, offset: 21648},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 634, col: 5, offset: 21667},
							expr: &ruleRefExpr{
								pos:  position{line: 634, col: 6, offset: 21668},
								name: "LabeledListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 635, col: 5, offset: 21695},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 635, col: 11, offset: 21701},
								run: (*parser).callonListParagraphLine24,
								expr: &seqExpr{
									pos: position{line: 635, col: 11, offset: 21701},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 635, col: 11, offset: 21701},
											expr: &ruleRefExpr{
												pos:  position{line: 635, col: 11, offset: 21701},
												name: "Space",
											},
										},
										&labeledExpr{
											pos:   position{line: 635, col: 18, offset: 21708},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 635, col: 27, offset: 21717},
												expr: &ruleRefExpr{
													pos:  position{line: 635, col: 28, offset: 21718},
													name: "InlineElement",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 637, col: 12, offset: 21817},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 641, col: 1, offset: 21856},
			expr: &seqExpr{
				pos: position{line: 641, col: 25, offset: 21880},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 641, col: 25, offset: 21880},
						val:        "+",
						ignoreCase: false,
						want:       "\"+\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 641, col: 29, offset: 21884},
						expr: &ruleRefExpr{
							pos:  position{line: 641, col: 29, offset: 21884},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 641, col: 36, offset: 21891},
						name: "Newline",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 643, col: 1, offset: 21963},
			expr: &actionExpr{
				pos: position{line: 643, col: 29, offset: 21991},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 643, col: 29, offset: 21991},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 643, col: 29, offset: 21991},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 643, col: 50, offset: 22012},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 643, col: 58, offset: 22020},
								name: "ContinuedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedListItemContent",
			pos:  position{line: 647, col: 1, offset: 22126},
			expr: &actionExpr{
				pos: position{line: 647, col: 29, offset: 22154},
				run: (*parser).callonContinuedListItemContent1,
				expr: &seqExpr{
					pos: position{line: 647, col: 29, offset: 22154},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 647, col: 29, offset: 22154},
							expr: &ruleRefExpr{
								pos:  position{line: 647, col: 30, offset: 22155},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 648, col: 5, offset: 22164},
							label: "content",
							expr: &choiceExpr{
								pos: position{line: 648, col: 14, offset: 22173},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 648, col: 14, offset: 22173},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 649, col: 11, offset: 22198},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 650, col: 11, offset: 22226},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 651, col: 11, offset: 22242},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 652, col: 11, offset: 22263},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 653, col: 11, offset: 22287},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 654, col: 11, offset: 22314},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 655, col: 11, offset: 22343},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 656, col: 11, offset: 22370},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 657, col: 11, offset: 22421},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 658, col: 11, offset: 22445},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 659, col: 11, offset: 22477},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 660, col: 11, offset: 22503},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 661, col: 11, offset: 22540},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 662, col: 11, offset: 22565},
										name: "ContinuedRawParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 669, col: 1, offset: 22731},
			expr: &actionExpr{
				pos: position{line: 669, col: 20, offset: 22750},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 669, col: 20, offset: 22750},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 669, col: 20, offset: 22750},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 669, col: 31, offset: 22761},
								expr: &ruleRefExpr{
									pos:  position{line: 669, col: 32, offset: 22762},
									name: "BlockAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 669, col: 49, offset: 22779},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 669, col: 57, offset: 22787},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 669, col: 80, offset: 22810},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 669, col: 89, offset: 22819},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 673, col: 1, offset: 22975},
			expr: &actionExpr{
				pos: position{line: 674, col: 5, offset: 23005},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 674, col: 5, offset: 23005},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 674, col: 5, offset: 23005},
							expr: &ruleRefExpr{
								pos:  position{line: 674, col: 5, offset: 23005},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 674, col: 12, offset: 23012},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 676, col: 9, offset: 23075},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 676, col: 9, offset: 23075},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 676, col: 9, offset: 23075},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 676, col: 9, offset: 23075},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 676, col: 16, offset: 23082},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 676, col: 16, offset: 23082},
															expr: &litMatcher{
																pos:        position{line: 676, col: 17, offset: 23083},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 680, col: 9, offset: 23183},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 699, col: 11, offset: 23900},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 699, col: 11, offset: 23900},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 699, col: 11, offset: 23900},
													expr: &charClassMatcher{
														pos:        position{line: 699, col: 12, offset: 23901},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 699, col: 20, offset: 23909},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 701, col: 13, offset: 24020},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 701, col: 13, offset: 24020},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 701, col: 14, offset: 24021},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 701, col: 21, offset: 24028},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 703, col: 13, offset: 24142},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 703, col: 13, offset: 24142},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 703, col: 14, offset: 24143},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 703, col: 21, offset: 24150},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 705, col: 13, offset: 24264},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 705, col: 13, offset: 24264},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 705, col: 13, offset: 24264},
													expr: &charClassMatcher{
														pos:        position{line: 705, col: 14, offset: 24265},
														val:        "[ivxdlcm]",
														chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 705, col: 26, offset: 24277},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 707, col: 13, offset: 24391},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 707, col: 13, offset: 24391},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 707, col: 13, offset: 24391},
													expr: &charClassMatcher{
														pos:        position{line: 707, col: 14, offset: 24392},
														val:        "[IVXDLCM]",
														chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 707, col: 26, offset: 24404},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 709, col: 12, offset: 24517},
							expr: &ruleRefExpr{
								pos:  position{line: 709, col: 12, offset: 24517},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 713, col: 1, offset: 24552},
			expr: &actionExpr{
				pos: position{line: 713, col: 27, offset: 24578},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 713, col: 27, offset: 24578},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 713, col: 37, offset: 24588},
						expr: &ruleRefExpr{
							pos:  position{line: 713, col: 37, offset: 24588},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 720, col: 1, offset: 24788},
			expr: &actionExpr{
				pos: position{line: 720, col: 22, offset: 24809},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 720, col: 22, offset: 24809},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 720, col: 22, offset: 24809},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 720, col: 33, offset: 24820},
								expr: &ruleRefExpr{
									pos:  position{line: 720, col: 34, offset: 24821},
									name: "BlockAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 720, col: 51, offset: 24838},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 720, col: 59, offset: 24846},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 720, col: 84, offset: 24871},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 720, col: 95, offset: 24882},
								expr: &ruleRefExpr{
									pos:  position{line: 720, col: 96, offset: 24883},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 720, col: 126, offset: 24913},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 720, col: 135, offset: 24922},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 724, col: 1, offset: 25096},
			expr: &actionExpr{
				pos: position{line: 725, col: 5, offset: 25128},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 725, col: 5, offset: 25128},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 725, col: 5, offset: 25128},
							expr: &ruleRefExpr{
								pos:  position{line: 725, col: 5, offset: 25128},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 725, col: 12, offset: 25135},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 725, col: 20, offset: 25143},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 727, col: 9, offset: 25200},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 727, col: 9, offset: 25200},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 727, col: 9, offset: 25200},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 727, col: 16, offset: 25207},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 727, col: 16, offset: 25207},
															expr: &litMatcher{
																pos:        position{line: 727, col: 17, offset: 25208},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 731, col: 9, offset: 25308},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 748, col: 14, offset: 26015},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 748, col: 21, offset: 26022},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 748, col: 22, offset: 26023},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 750, col: 13, offset: 26109},
							expr: &ruleRefExpr{
								pos:  position{line: 750, col: 13, offset: 26109},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 754, col: 1, offset: 26145},
			expr: &actionExpr{
				pos: position{line: 754, col: 32, offset: 26176},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 754, col: 32, offset: 26176},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 754, col: 32, offset: 26176},
							expr: &litMatcher{
								pos:        position{line: 754, col: 33, offset: 26177},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 754, col: 37, offset: 26181},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 755, col: 7, offset: 26195},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 755, col: 7, offset: 26195},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 755, col: 7, offset: 26195},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 756, col: 7, offset: 26240},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 756, col: 7, offset: 26240},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 757, col: 7, offset: 26283},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 757, col: 7, offset: 26283},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 758, col: 7, offset: 26325},
							expr: &ruleRefExpr{
								pos:  position{line: 758, col: 7, offset: 26325},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 762, col: 1, offset: 26367},
			expr: &actionExpr{
				pos: position{line: 762, col: 29, offset: 26395},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 762, col: 29, offset: 26395},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 762, col: 39, offset: 26405},
						expr: &ruleRefExpr{
							pos:  position{line: 762, col: 39, offset: 26405},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 769, col: 1, offset: 26721},
			expr: &actionExpr{
				pos: position{line: 769, col: 20, offset: 26740},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 769, col: 20, offset: 26740},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 769, col: 20, offset: 26740},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 769, col: 31, offset: 26751},
								expr: &ruleRefExpr{
									pos:  position{line: 769, col: 32, offset: 26752},
									name: "BlockAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 769, col: 49, offset: 26769},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 769, col: 55, offset: 26775},
								name: "VerbatimLabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 769, col: 84, offset: 26804},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 769, col: 95, offset: 26815},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 769, col: 121, offset: 26841},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 769, col: 133, offset: 26853},
								expr: &ruleRefExpr{
									pos:  position{line: 769, col: 134, offset: 26854},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemPrefix",
			pos:  position{line: 773, col: 1, offset: 27016},
			expr: &seqExpr{
				pos: position{line: 773, col: 26, offset: 27041},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 773, col: 26, offset: 27041},
						name: "VerbatimLabeledListItemTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 773, col: 54, offset: 27069},
						name: "LabeledListItemSeparator",
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemChars",
			pos:  position{line: 775, col: 1, offset: 27095},
			expr: &choiceExpr{
				pos: position{line: 775, col: 33, offset: 27127},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 775, col: 33, offset: 27127},
						expr: &charClassMatcher{
							pos:        position{line: 775, col: 33, offset: 27127},
							val:        "[^:\\r\\n]",
							chars:      []rune{':', '\r', '\n'},
							ignoreCase: false,
							inverted:   true,
						},
					},
					&seqExpr{
						pos: position{line: 775, col: 45, offset: 27139},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 775, col: 45, offset: 27139},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
							&notExpr{
								pos: position{line: 775, col: 49, offset: 27143},
								expr: &litMatcher{
									pos:        position{line: 775, col: 50, offset: 27144},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemTerm",
			pos:  position{line: 776, col: 1, offset: 27148},
			expr: &actionExpr{
				pos: position{line: 776, col: 32, offset: 27179},
				run: (*parser).callonVerbatimLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 776, col: 32, offset: 27179},
					label: "content",
					expr: &actionExpr{
						pos: position{line: 776, col: 42, offset: 27189},
						run: (*parser).callonVerbatimLabeledListItemTerm3,
						expr: &oneOrMoreExpr{
							pos: position{line: 776, col: 42, offset: 27189},
							expr: &ruleRefExpr{
								pos:  position{line: 776, col: 42, offset: 27189},
								name: "VerbatimLabeledListItemChars",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 782, col: 1, offset: 27344},
			expr: &actionExpr{
				pos: position{line: 782, col: 24, offset: 27367},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 782, col: 24, offset: 27367},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 782, col: 33, offset: 27376},
						expr: &seqExpr{
							pos: position{line: 782, col: 34, offset: 27377},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 782, col: 34, offset: 27377},
									expr: &ruleRefExpr{
										pos:  position{line: 782, col: 35, offset: 27378},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 782, col: 43, offset: 27386},
									expr: &litMatcher{
										pos:        position{line: 782, col: 44, offset: 27387},
										val:        "::",
										ignoreCase: false,
										want:       "\"::\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 782, col: 49, offset: 27392},
									name: "LabeledListItemTermElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTermElement",
			pos:  position{line: 786, col: 1, offset: 27519},
			expr: &actionExpr{
				pos: position{line: 786, col: 31, offset: 27549},
				run: (*parser).callonLabeledListItemTermElement1,
				expr: &labeledExpr{
					pos:   position{line: 786, col: 31, offset: 27549},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 786, col: 40, offset: 27558},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 786, col: 40, offset: 27558},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 787, col: 11, offset: 27573},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 788, col: 11, offset: 27622},
								expr: &ruleRefExpr{
									pos:  position{line: 788, col: 11, offset: 27622},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 789, col: 11, offset: 27640},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 790, col: 11, offset: 27665},
								name: "ConcealedIndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 791, col: 11, offset: 27694},
								name: "IndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 792, col: 11, offset: 27714},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 793, col: 11, offset: 27803},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 794, col: 11, offset: 27824},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 795, col: 11, offset: 27847},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 796, col: 11, offset: 27862},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 797, col: 11, offset: 27887},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 798, col: 11, offset: 27910},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 799, col: 11, offset: 27931},
								name: "SpecialCharacter",
							},
							&ruleRefExpr{
								pos:  position{line: 800, col: 11, offset: 27958},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 801, col: 11, offset: 27975},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 802, col: 11, offset: 28007},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 806, col: 1, offset: 28046},
			expr: &actionExpr{
				pos: position{line: 807, col: 5, offset: 28079},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 807, col: 5, offset: 28079},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 807, col: 5, offset: 28079},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 807, col: 16, offset: 28090},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 807, col: 16, offset: 28090},
									expr: &litMatcher{
										pos:        position{line: 807, col: 17, offset: 28091},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 810, col: 5, offset: 28149},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 814, col: 6, offset: 28325},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 814, col: 6, offset: 28325},
									expr: &choiceExpr{
										pos: position{line: 814, col: 7, offset: 28326},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 814, col: 7, offset: 28326},
												name: "Space",
											},
											&ruleRefExpr{
												pos:  position{line: 814, col: 15, offset: 28334},
												name: "Newline",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 814, col: 27, offset: 28346},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 818, col: 1, offset: 28386},
			expr: &actionExpr{
				pos: position{line: 818, col: 31, offset: 28416},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 818, col: 31, offset: 28416},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 818, col: 40, offset: 28425},
						expr: &ruleRefExpr{
							pos:  position{line: 818, col: 41, offset: 28426},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 825, col: 1, offset: 28617},
			expr: &choiceExpr{
				pos: position{line: 825, col: 19, offset: 28635},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 825, col: 19, offset: 28635},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 825, col: 19, offset: 28635},
							val:        "TIP",
							ignoreCase: false,
							want:       "\"TIP\"",
						},
					},
					&actionExpr{
						pos: position{line: 827, col: 5, offset: 28673},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 827, col: 5, offset: 28673},
							val:        "NOTE",
							ignoreCase: false,
							want:       "\"NOTE\"",
						},
					},
					&actionExpr{
						pos: position{line: 829, col: 5, offset: 28713},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 829, col: 5, offset: 28713},
							val:        "IMPORTANT",
							ignoreCase: false,
							want:       "\"IMPORTANT\"",
						},
					},
					&actionExpr{
						pos: position{line: 831, col: 5, offset: 28763},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 831, col: 5, offset: 28763},
							val:        "WARNING",
							ignoreCase: false,
							want:       "\"WARNING\"",
						},
					},
					&actionExpr{
						pos: position{line: 833, col: 5, offset: 28809},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 833, col: 5, offset: 28809},
							val:        "CAUTION",
							ignoreCase: false,
							want:       "\"CAUTION\"",
						},
					},
				},
			},
		},
		{
			name: "RawParagraph",
			pos:  position{line: 845, col: 1, offset: 29189},
			expr: &choiceExpr{
				pos: position{line: 847, col: 6, offset: 29240},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 847, col: 6, offset: 29240},
						run: (*parser).callonRawParagraph2,
						expr: &seqExpr{
							pos: position{line: 847, col: 6, offset: 29240},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 847, col: 6, offset: 29240},
									label: "attributes",
									expr: &zeroOrMoreExpr{
										pos: position{line: 847, col: 17, offset: 29251},
										expr: &ruleRefExpr{
											pos:  position{line: 847, col: 18, offset: 29252},
											name: "ElementAttribute",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 847, col: 37, offset: 29271},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 847, col: 40, offset: 29274},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 847, col: 56, offset: 29290},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 847, col: 61, offset: 29295},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 847, col: 67, offset: 29301},
										expr: &choiceExpr{
											pos: position{line: 847, col: 68, offset: 29302},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 847, col: 68, offset: 29302},
													name: "SingleLineComment",
												},
												&ruleRefExpr{
													pos:  position{line: 847, col: 88, offset: 29322},
													name: "RawParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 852, col: 5, offset: 29573},
						run: (*parser).callonRawParagraph15,
						expr: &seqExpr{
							pos: position{line: 852, col: 5, offset: 29573},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 852, col: 5, offset: 29573},
									label: "attributes",
									expr: &zeroOrMoreExpr{
										pos: position{line: 852, col: 16, offset: 29584},
										expr: &ruleRefExpr{
											pos:  position{line: 852, col: 17, offset: 29585},
											name: "ElementAttribute",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 852, col: 36, offset: 29604},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
								&labeledExpr{
									pos:   position{line: 852, col: 41, offset: 29609},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 852, col: 50, offset: 29618},
										name: "MarkdownQuoteBlockRawContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 856, col: 5, offset: 29807},
						run: (*parser).callonRawParagraph23,
						expr: &seqExpr{
							pos: position{line: 856, col: 5, offset: 29807},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 856, col: 5, offset: 29807},
									label: "attributes",
									expr: &zeroOrMoreExpr{
										pos: position{line: 856, col: 16, offset: 29818},
										expr: &ruleRefExpr{
											pos:  position{line: 856, col: 17, offset: 29819},
											name: "ElementAttribute",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 856, col: 36, offset: 29838},
									run: (*parser).callonRawParagraph28,
								},
								&labeledExpr{
									pos:   position{line: 859, col: 7, offset: 30014},
									label: "content",
									expr: &oneOrMoreExpr{
										pos: position{line: 859, col: 15, offset: 30022},
										expr: &ruleRefExpr{
											pos:  position{line: 859, col: 16, offset: 30023},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 863, col: 5, offset: 30205},
						run: (*parser).callonRawParagraph32,
						expr: &seqExpr{
							pos: position{line: 863, col: 5, offset: 30205},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 863, col: 5, offset: 30205},
									label: "attributes",
									expr: &zeroOrMoreExpr{
										pos: position{line: 863, col: 16, offset: 30216},
										expr: &ruleRefExpr{
											pos:  position{line: 863, col: 17, offset: 30217},
											name: "ElementAttribute",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 863, col: 36, offset: 30236},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 863, col: 42, offset: 30242},
										expr: &choiceExpr{
											pos: position{line: 863, col: 43, offset: 30243},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 863, col: 43, offset: 30243},
													name: "SingleLineComment",
												},
												&ruleRefExpr{
													pos:  position{line: 863, col: 63, offset: 30263},
													name: "RawParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockRawContent",
			pos:  position{line: 867, col: 1, offset: 30377},
			expr: &oneOrMoreExpr{
				pos: position{line: 867, col: 33, offset: 30409},
				expr: &actionExpr{
					pos: position{line: 867, col: 34, offset: 30410},
					run: (*parser).callonMarkdownQuoteBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 867, col: 34, offset: 30410},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 867, col: 34, offset: 30410},
								expr: &ruleRefExpr{
									pos:  position{line: 867, col: 35, offset: 30411},
									name: "BlankLine",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 867, col: 45, offset: 30421},
								expr: &litMatcher{
									pos:        position{line: 867, col: 45, offset: 30421},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
							},
							&labeledExpr{
								pos:   position{line: 867, col: 51, offset: 30427},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 867, col: 60, offset: 30436},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawParagraphLine",
			pos:  position{line: 871, col: 1, offset: 30477},
			expr: &actionExpr{
				pos: position{line: 871, col: 21, offset: 30497},
				run: (*parser).callonRawParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 871, col: 21, offset: 30497},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 871, col: 21, offset: 30497},
							expr: &ruleRefExpr{
								pos:  position{line: 871, col: 22, offset: 30498},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 872, col: 5, offset: 30518},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 872, col: 14, offset: 30527},
								name: "RawParagraphLineContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 872, col: 39, offset: 30552},
							name: "EOL",
						},
						&andCodeExpr{
							pos: position{line: 872, col: 43, offset: 30556},
							run: (*parser).callonRawParagraphLine8,
						},
					},
				},
			},
		},
		{
			name: "RawParagraphLineContent",
			pos:  position{line: 882, col: 1, offset: 30791},
			expr: &actionExpr{
				pos: position{line: 882, col: 28, offset: 30818},
				run: (*parser).callonRawParagraphLineContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 882, col: 28, offset: 30818},
					expr: &charClassMatcher{
						pos:        position{line: 882, col: 28, offset: 30818},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SimpleRawParagraph",
			pos:  position{line: 887, col: 1, offset: 30935},
			expr: &actionExpr{
				pos: position{line: 887, col: 23, offset: 30957},
				run: (*parser).callonSimpleRawParagraph1,
				expr: &seqExpr{
					pos: position{line: 887, col: 23, offset: 30957},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 887, col: 23, offset: 30957},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 887, col: 34, offset: 30968},
								expr: &ruleRefExpr{
									pos:  position{line: 887, col: 35, offset: 30969},
									name: "ElementAttribute",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 888, col: 5, offset: 30993},
							run: (*parser).callonSimpleRawParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 891, col: 5, offset: 31103},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 891, col: 16, offset: 31114},
								name: "FirstParagraphRawLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 892, col: 5, offset: 31140},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 892, col: 16, offset: 31151},
								expr: &choiceExpr{
									pos: position{line: 892, col: 17, offset: 31152},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 892, col: 17, offset: 31152},
											name: "SingleLineComment",
										},
										&ruleRefExpr{
											pos:  position{line: 892, col: 37, offset: 31172},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphRawLine",
			pos:  position{line: 896, col: 1, offset: 31320},
			expr: &actionExpr{
				pos: position{line: 897, col: 5, offset: 31350},
				run: (*parser).callonFirstParagraphRawLine1,
				expr: &seqExpr{
					pos: position{line: 897, col: 5, offset: 31350},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 897, col: 5, offset: 31350},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 897, col: 14, offset: 31359},
								run: (*parser).callonFirstParagraphRawLine4,
								expr: &seqExpr{
									pos: position{line: 897, col: 14, offset: 31359},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 897, col: 14, offset: 31359},
											label: "elements",
											expr: &ruleRefExpr{
												pos:  position{line: 897, col: 23, offset: 31368},
												name: "Word",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 897, col: 28, offset: 31373},
											expr: &charClassMatcher{
												pos:        position{line: 897, col: 28, offset: 31373},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 897, col: 68, offset: 31413},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ContinuedRawParagraph",
			pos:  position{line: 908, col: 1, offset: 31665},
			expr: &choiceExpr{
				pos: position{line: 910, col: 5, offset: 31724},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 910, col: 5, offset: 31724},
						run: (*parser).callonContinuedRawParagraph2,
						expr: &seqExpr{
							pos: position{line: 910, col: 5, offset: 31724},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 910, col: 5, offset: 31724},
									label: "attributes",
									expr: &zeroOrMoreExpr{
										pos: position{line: 910, col: 16, offset: 31735},
										expr: &ruleRefExpr{
											pos:  position{line: 910, col: 17, offset: 31736},
											name: "ElementAttribute",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 910, col: 36, offset: 31755},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 910, col: 39, offset: 31758},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 910, col: 55, offset: 31774},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 910, col: 60, offset: 31779},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 910, col: 67, offset: 31786},
										name: "ContinuedRawParagraphLines",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 914, col: 5, offset: 32005},
						run: (*parser).callonContinuedRawParagraph12,
						expr: &seqExpr{
							pos: position{line: 914, col: 5, offset: 32005},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 914, col: 5, offset: 32005},
									label: "attributes",
									expr: &zeroOrMoreExpr{
										pos: position{line: 914, col: 16, offset: 32016},
										expr: &ruleRefExpr{
											pos:  position{line: 914, col: 17, offset: 32017},
											name: "ElementAttribute",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 914, col: 36, offset: 32036},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 914, col: 43, offset: 32043},
										name: "ContinuedRawParagraphLines",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedRawParagraphLines",
			pos:  position{line: 918, col: 1, offset: 32163},
			expr: &actionExpr{
				pos: position{line: 918, col: 31, offset: 32193},
				run: (*parser).callonContinuedRawParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 918, col: 31, offset: 32193},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 918, col: 31, offset: 32193},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 918, col: 42, offset: 32204},
								name: "FirstParagraphRawLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 918, col: 65, offset: 32227},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 918, col: 76, offset: 32238},
								expr: &actionExpr{
									pos: position{line: 918, col: 77, offset: 32239},
									run: (*parser).callonContinuedRawParagraphLines7,
									expr: &seqExpr{
										pos: position{line: 918, col: 77, offset: 32239},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 918, col: 77, offset: 32239},
												expr: &ruleRefExpr{
													pos:  position{line: 918, col: 78, offset: 32240},
													name: "ListItemContinuation",
												},
											},
											&labeledExpr{
												pos:   position{line: 918, col: 99, offset: 32261},
												label: "line",
												expr: &choiceExpr{
													pos: position{line: 918, col: 105, offset: 32267},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 918, col: 105, offset: 32267},
															name: "SingleLineComment",
														},
														&ruleRefExpr{
															pos:  position{line: 918, col: 125, offset: 32287},
															name: "RawParagraphLine",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 926, col: 1, offset: 32529},
			expr: &actionExpr{
				pos: position{line: 926, col: 19, offset: 32547},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 926, col: 19, offset: 32547},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 926, col: 19, offset: 32547},
							expr: &ruleRefExpr{
								pos:  position{line: 926, col: 20, offset: 32548},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 927, col: 5, offset: 32562},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 927, col: 15, offset: 32572},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 927, col: 15, offset: 32572},
										run: (*parser).callonInlineElements7,
										expr: &labeledExpr{
											pos:   position{line: 927, col: 15, offset: 32572},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 927, col: 24, offset: 32581},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 929, col: 9, offset: 32673},
										run: (*parser).callonInlineElements10,
										expr: &seqExpr{
											pos: position{line: 929, col: 9, offset: 32673},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 929, col: 9, offset: 32673},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 929, col: 18, offset: 32682},
														expr: &ruleRefExpr{
															pos:  position{line: 929, col: 19, offset: 32683},
															name: "InlineElement",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 929, col: 35, offset: 32699},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 935, col: 1, offset: 32816},
			expr: &actionExpr{
				pos: position{line: 936, col: 5, offset: 32839},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 936, col: 5, offset: 32839},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 936, col: 14, offset: 32848},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 936, col: 14, offset: 32848},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 937, col: 11, offset: 32909},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 938, col: 11, offset: 32954},
								expr: &ruleRefExpr{
									pos:  position{line: 938, col: 11, offset: 32954},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 939, col: 11, offset: 32972},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 939, col: 11, offset: 32972},
										expr: &ruleRefExpr{
											pos:  position{line: 939, col: 12, offset: 32973},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 940, col: 13, offset: 32991},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 940, col: 13, offset: 32991},
												name: "QuotedString",
											},
											&ruleRefExpr{
												pos:  position{line: 941, col: 15, offset: 33018},
												name: "QuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 942, col: 15, offset: 33043},
												name: "InlineIcon",
											},
											&ruleRefExpr{
												pos:  position{line: 943, col: 15, offset: 33068},
												name: "InlineImage",
											},
											&ruleRefExpr{
												pos:  position{line: 944, col: 15, offset: 33095},
												name: "Link",
											},
											&ruleRefExpr{
												pos:  position{line: 945, col: 15, offset: 33115},
												name: "InlinePassthrough",
											},
											&ruleRefExpr{
												pos:  position{line: 946, col: 15, offset: 33208},
												name: "InlineFootnote",
											},
											&ruleRefExpr{
												pos:  position{line: 947, col: 15, offset: 33238},
												name: "CrossReference",
											},
											&ruleRefExpr{
												pos:  position{line: 948, col: 15, offset: 33306},
												name: "SpecialCharacter",
											},
											&ruleRefExpr{
												pos:  position{line: 949, col: 15, offset: 33337},
												name: "Symbol",
											},
											&ruleRefExpr{
												pos:  position{line: 950, col: 15, offset: 33358},
												name: "InlineUserMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 951, col: 15, offset: 33389},
												name: "AttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 952, col: 15, offset: 33426},
												name: "InlineElementID",
											},
											&ruleRefExpr{
												pos:  position{line: 953, col: 15, offset: 33456},
												name: "ConcealedIndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 954, col: 15, offset: 33489},
												name: "IndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 955, col: 15, offset: 33513},
												name: "ElementPlaceHolder",
											},
											&ruleRefExpr{
												pos:  position{line: 956, col: 15, offset: 33546},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 963, col: 1, offset: 33769},
			expr: &actionExpr{
				pos: position{line: 963, col: 14, offset: 33782},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 963, col: 14, offset: 33782},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 963, col: 14, offset: 33782},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 963, col: 20, offset: 33788},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 963, col: 24, offset: 33792},
							expr: &ruleRefExpr{
								pos:  position{line: 963, col: 24, offset: 33792},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 963, col: 31, offset: 33799},
							expr: &ruleRefExpr{
								pos:  position{line: 963, col: 32, offset: 33800},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 970, col: 1, offset: 34084},
			expr: &choiceExpr{
				pos: position{line: 970, col: 15, offset: 34098},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 970, col: 15, offset: 34098},
						name: "UnconstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 970, col: 41, offset: 34124},
						name: "ConstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 970, col: 65, offset: 34148},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 972, col: 1, offset: 34167},
			expr: &choiceExpr{
				pos: position{line: 972, col: 32, offset: 34198},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 972, col: 32, offset: 34198},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 972, col: 32, offset: 34198},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 972, col: 36, offset: 34202},
								expr: &litMatcher{
									pos:        position{line: 972, col: 37, offset: 34203},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 972, col: 43, offset: 34209},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 972, col: 43, offset: 34209},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 972, col: 47, offset: 34213},
								expr: &litMatcher{
									pos:        position{line: 972, col: 48, offset: 34214},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 972, col: 54, offset: 34220},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 972, col: 54, offset: 34220},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
							&notExpr{
								pos: position{line: 972, col: 58, offset: 34224},
								expr: &litMatcher{
									pos:        position{line: 972, col: 59, offset: 34225},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 972, col: 65, offset: 34231},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 972, col: 65, offset: 34231},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 972, col: 69, offset: 34235},
								expr: &litMatcher{
									pos:        position{line: 972, col: 70, offset: 34236},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 974, col: 1, offset: 34241},
			expr: &choiceExpr{
				pos: position{line: 974, col: 34, offset: 34274},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 974, col: 34, offset: 34274},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 974, col: 41, offset: 34281},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 974, col: 48, offset: 34288},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 974, col: 55, offset: 34295},
						val:        "##",
						ignoreCase: false,
						want:       "\"##\"",
					},
					&litMatcher{
						pos:        position{line: 974, col: 62, offset: 34302},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 974, col: 68, offset: 34308},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 976, col: 1, offset: 34313},
			expr: &actionExpr{
				pos: position{line: 976, col: 26, offset: 34338},
				run: (*parser).callonConstrainedQuotedText1,
				expr: &labeledExpr{
					pos:   position{line: 976, col: 26, offset: 34338},
					label: "text",
					expr: &choiceExpr{
						pos: position{line: 976, col: 32, offset: 34344},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 976, col: 32, offset: 34344},
								name: "SingleQuoteBoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 977, col: 15, offset: 34379},
								name: "SingleQuoteItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 978, col: 15, offset: 34415},
								name: "SingleQuoteMarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 979, col: 15, offset: 34451},
								name: "SingleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 980, col: 15, offset: 34491},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 981, col: 15, offset: 34520},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 982, col: 15, offset: 34551},
								name: "SubscriptOrSuperscriptPrefix",
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 986, col: 1, offset: 34705},
			expr: &choiceExpr{
				pos: position{line: 986, col: 28, offset: 34732},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 986, col: 28, offset: 34732},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 987, col: 15, offset: 34766},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 988, col: 15, offset: 34802},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 989, col: 15, offset: 34838},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 991, col: 1, offset: 34864},
			expr: &choiceExpr{
				pos: position{line: 991, col: 22, offset: 34885},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 991, col: 22, offset: 34885},
						name: "EscapedBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 992, col: 15, offset: 34916},
						name: "EscapedItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 993, col: 15, offset: 34948},
						name: "EscapedMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 994, col: 15, offset: 34980},
						name: "EscapedMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 995, col: 15, offset: 35016},
						name: "EscapedSubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 996, col: 15, offset: 35052},
						name: "EscapedSuperscriptText",
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 998, col: 1, offset: 35076},
			expr: &choiceExpr{
				pos: position{line: 998, col: 33, offset: 35108},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 998, col: 33, offset: 35108},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 998, col: 39, offset: 35114},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 998, col: 39, offset: 35114},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 1002, col: 1, offset: 35247},
			expr: &actionExpr{
				pos: position{line: 1002, col: 25, offset: 35271},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1002, col: 25, offset: 35271},
					expr: &litMatcher{
						pos:        position{line: 1002, col: 25, offset: 35271},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 1006, col: 1, offset: 35312},
			expr: &actionExpr{
				pos: position{line: 1006, col: 25, offset: 35336},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 1006, col: 25, offset: 35336},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1006, col: 25, offset: 35336},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1006, col: 30, offset: 35341},
							expr: &litMatcher{
								pos:        position{line: 1006, col: 30, offset: 35341},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 1014, col: 1, offset: 35438},
			expr: &choiceExpr{
				pos: position{line: 1014, col: 13, offset: 35450},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1014, col: 13, offset: 35450},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1014, col: 35, offset: 35472},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1016, col: 1, offset: 35539},
			expr: &actionExpr{
				pos: position{line: 1016, col: 24, offset: 35562},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1016, col: 24, offset: 35562},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1016, col: 24, offset: 35562},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1016, col: 35, offset: 35573},
								expr: &ruleRefExpr{
									pos:  position{line: 1016, col: 36, offset: 35574},
									name: "QuotedTextAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1016, col: 59, offset: 35597},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 1016, col: 64, offset: 35602},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1016, col: 74, offset: 35612},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1016, col: 103, offset: 35641},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1020, col: 1, offset: 35733},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1020, col: 32, offset: 35764},
				expr: &ruleRefExpr{
					pos:  position{line: 1020, col: 32, offset: 35764},
					name: "DoubleQuoteBoldTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1022, col: 1, offset: 35795},
			expr: &actionExpr{
				pos: position{line: 1022, col: 31, offset: 35825},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 1022, col: 31, offset: 35825},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1022, col: 31, offset: 35825},
							expr: &litMatcher{
								pos:        position{line: 1022, col: 33, offset: 35827},
								val:        "**",
								ignoreCase: false,
								want:       "\"**\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1022, col: 39, offset: 35833},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1022, col: 48, offset: 35842},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1022, col: 48, offset: 35842},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1023, col: 11, offset: 35857},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1024, col: 11, offset: 35906},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1024, col: 11, offset: 35906},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1024, col: 19, offset: 35914},
												expr: &ruleRefExpr{
													pos:  position{line: 1024, col: 20, offset: 35915},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1025, col: 11, offset: 35933},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1026, col: 11, offset: 35963},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1027, col: 11, offset: 35986},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1028, col: 11, offset: 36007},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1029, col: 11, offset: 36028},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1030, col: 11, offset: 36052},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1031, col: 11, offset: 36076},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1032, col: 11, offset: 36102},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1033, col: 11, offset: 36131},
										name: "DoubleQuoteBoldTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1037, col: 1, offset: 36198},
			expr: &choiceExpr{
				pos: position{line: 1038, col: 5, offset: 36242},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1038, col: 5, offset: 36242},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1039, col: 7, offset: 36339},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1039, col: 7, offset: 36339},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1039, col: 7, offset: 36339},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1039, col: 12, offset: 36344},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1043, col: 1, offset: 36507},
			expr: &choiceExpr{
				pos: position{line: 1043, col: 24, offset: 36530},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1043, col: 24, offset: 36530},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 1043, col: 24, offset: 36530},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1043, col: 24, offset: 36530},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1043, col: 35, offset: 36541},
										expr: &ruleRefExpr{
											pos:  position{line: 1043, col: 36, offset: 36542},
											name: "QuotedTextAttributes",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1043, col: 61, offset: 36567},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1043, col: 61, offset: 36567},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1043, col: 65, offset: 36571},
											expr: &litMatcher{
												pos:        position{line: 1043, col: 66, offset: 36572},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1043, col: 71, offset: 36577},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1043, col: 81, offset: 36587},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1043, col: 110, offset: 36616},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 1043, col: 114, offset: 36620},
									expr: &notExpr{
										pos: position{line: 1043, col: 116, offset: 36622},
										expr: &ruleRefExpr{
											pos:  position{line: 1043, col: 117, offset: 36623},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1045, col: 5, offset: 36822},
						run: (*parser).callonSingleQuoteBoldText17,
						expr: &seqExpr{
							pos: position{line: 1045, col: 5, offset: 36822},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1045, col: 5, offset: 36822},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1045, col: 16, offset: 36833},
										expr: &ruleRefExpr{
											pos:  position{line: 1045, col: 17, offset: 36834},
											name: "QuotedTextAttributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1045, col: 40, offset: 36857},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1045, col: 44, offset: 36861},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1045, col: 54, offset: 36871},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1045, col: 54, offset: 36871},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1045, col: 58, offset: 36875},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1045, col: 87, offset: 36904},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1049, col: 1, offset: 37115},
			expr: &seqExpr{
				pos: position{line: 1049, col: 32, offset: 37146},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1049, col: 32, offset: 37146},
						expr: &ruleRefExpr{
							pos:  position{line: 1049, col: 33, offset: 37147},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1049, col: 39, offset: 37153},
						expr: &ruleRefExpr{
							pos:  position{line: 1049, col: 39, offset: 37153},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1051, col: 1, offset: 37182},
			expr: &choiceExpr{
				pos: position{line: 1051, col: 31, offset: 37212},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1051, col: 31, offset: 37212},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1052, col: 11, offset: 37227},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1052, col: 11, offset: 37227},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1052, col: 19, offset: 37235},
								expr: &ruleRefExpr{
									pos:  position{line: 1052, col: 20, offset: 37236},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1053, col: 11, offset: 37254},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1054, col: 11, offset: 37284},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1055, col: 11, offset: 37307},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1055, col: 11, offset: 37307},
								expr: &ruleRefExpr{
									pos:  position{line: 1055, col: 11, offset: 37307},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1055, col: 18, offset: 37314},
								expr: &seqExpr{
									pos: position{line: 1055, col: 19, offset: 37315},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1055, col: 19, offset: 37315},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1055, col: 23, offset: 37319},
											expr: &litMatcher{
												pos:        position{line: 1055, col: 24, offset: 37320},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1056, col: 11, offset: 37336},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1057, col: 11, offset: 37357},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1058, col: 11, offset: 37378},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1059, col: 11, offset: 37402},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1060, col: 11, offset: 37426},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1061, col: 11, offset: 37452},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1062, col: 11, offset: 37481},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1064, col: 1, offset: 37519},
			expr: &choiceExpr{
				pos: position{line: 1065, col: 5, offset: 37563},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1065, col: 5, offset: 37563},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1066, col: 7, offset: 37660},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1066, col: 7, offset: 37660},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1066, col: 7, offset: 37660},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1066, col: 11, offset: 37664},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1070, col: 1, offset: 37827},
			expr: &choiceExpr{
				pos: position{line: 1071, col: 5, offset: 37851},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1071, col: 5, offset: 37851},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1071, col: 5, offset: 37851},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1071, col: 5, offset: 37851},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1071, col: 18, offset: 37864},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1071, col: 40, offset: 37886},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1071, col: 45, offset: 37891},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1071, col: 55, offset: 37901},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1071, col: 84, offset: 37930},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1073, col: 9, offset: 38087},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 1073, col: 9, offset: 38087},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1073, col: 9, offset: 38087},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1073, col: 22, offset: 38100},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1073, col: 44, offset: 38122},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1073, col: 49, offset: 38127},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1073, col: 59, offset: 38137},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1073, col: 88, offset: 38166},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1076, col: 9, offset: 38366},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 1076, col: 9, offset: 38366},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1076, col: 9, offset: 38366},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1076, col: 22, offset: 38379},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1076, col: 44, offset: 38401},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1076, col: 48, offset: 38405},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1076, col: 58, offset: 38415},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1076, col: 87, offset: 38444},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1084, col: 1, offset: 38652},
			expr: &choiceExpr{
				pos: position{line: 1084, col: 15, offset: 38666},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1084, col: 15, offset: 38666},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1084, col: 39, offset: 38690},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1086, col: 1, offset: 38713},
			expr: &actionExpr{
				pos: position{line: 1086, col: 26, offset: 38738},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1086, col: 26, offset: 38738},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1086, col: 26, offset: 38738},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1086, col: 37, offset: 38749},
								expr: &ruleRefExpr{
									pos:  position{line: 1086, col: 38, offset: 38750},
									name: "QuotedTextAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1086, col: 61, offset: 38773},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1086, col: 66, offset: 38778},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1086, col: 76, offset: 38788},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1086, col: 107, offset: 38819},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1090, col: 1, offset: 38958},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1090, col: 34, offset: 38991},
				expr: &ruleRefExpr{
					pos:  position{line: 1090, col: 34, offset: 38991},
					name: "DoubleQuoteItalicTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1092, col: 1, offset: 39023},
			expr: &actionExpr{
				pos: position{line: 1092, col: 33, offset: 39055},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 1092, col: 33, offset: 39055},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1092, col: 33, offset: 39055},
							expr: &litMatcher{
								pos:        position{line: 1092, col: 35, offset: 39057},
								val:        "__",
								ignoreCase: false,
								want:       "\"__\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1092, col: 41, offset: 39063},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1092, col: 50, offset: 39072},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1092, col: 50, offset: 39072},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1093, col: 11, offset: 39087},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1094, col: 11, offset: 39136},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1094, col: 11, offset: 39136},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1094, col: 19, offset: 39144},
												expr: &ruleRefExpr{
													pos:  position{line: 1094, col: 20, offset: 39145},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1095, col: 11, offset: 39163},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1096, col: 11, offset: 39195},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1097, col: 11, offset: 39218},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1098, col: 11, offset: 39237},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1099, col: 11, offset: 39258},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1100, col: 11, offset: 39282},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1101, col: 11, offset: 39306},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1102, col: 11, offset: 39332},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1103, col: 11, offset: 39361},
										name: "DoubleQuoteItalicTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1107, col: 1, offset: 39430},
			expr: &choiceExpr{
				pos: position{line: 1108, col: 5, offset: 39476},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1108, col: 5, offset: 39476},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1109, col: 7, offset: 39575},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1109, col: 7, offset: 39575},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1109, col: 7, offset: 39575},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1109, col: 12, offset: 39580},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1113, col: 1, offset: 39745},
			expr: &choiceExpr{
				pos: position{line: 1113, col: 26, offset: 39770},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1113, col: 26, offset: 39770},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1113, col: 26, offset: 39770},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1113, col: 26, offset: 39770},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1113, col: 37, offset: 39781},
										expr: &ruleRefExpr{
											pos:  position{line: 1113, col: 38, offset: 39782},
											name: "QuotedTextAttributes",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1113, col: 62, offset: 39806},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1113, col: 62, offset: 39806},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1113, col: 66, offset: 39810},
											expr: &litMatcher{
												pos:        position{line: 1113, col: 67, offset: 39811},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1113, col: 72, offset: 39816},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1113, col: 82, offset: 39826},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1113, col: 113, offset: 39857},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1115, col: 5, offset: 40052},
						run: (*parser).callonSingleQuoteItalicText14,
						expr: &seqExpr{
							pos: position{line: 1115, col: 5, offset: 40052},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1115, col: 5, offset: 40052},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1115, col: 16, offset: 40063},
										expr: &ruleRefExpr{
											pos:  position{line: 1115, col: 17, offset: 40064},
											name: "QuotedTextAttributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1115, col: 40, offset: 40087},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1115, col: 44, offset: 40091},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1115, col: 54, offset: 40101},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1115, col: 54, offset: 40101},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1115, col: 58, offset: 40105},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1115, col: 89, offset: 40136},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1119, col: 1, offset: 40351},
			expr: &seqExpr{
				pos: position{line: 1119, col: 34, offset: 40384},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1119, col: 34, offset: 40384},
						expr: &ruleRefExpr{
							pos:  position{line: 1119, col: 35, offset: 40385},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1119, col: 41, offset: 40391},
						expr: &ruleRefExpr{
							pos:  position{line: 1119, col: 41, offset: 40391},
							name: "SingleQuoteItalicTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1121, col: 1, offset: 40422},
			expr: &choiceExpr{
				pos: position{line: 1121, col: 33, offset: 40454},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1121, col: 33, offset: 40454},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1122, col: 11, offset: 40469},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1122, col: 11, offset: 40469},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1122, col: 19, offset: 40477},
								expr: &ruleRefExpr{
									pos:  position{line: 1122, col: 20, offset: 40478},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1123, col: 11, offset: 40496},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1124, col: 11, offset: 40528},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1125, col: 11, offset: 40551},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1125, col: 11, offset: 40551},
								expr: &ruleRefExpr{
									pos:  position{line: 1125, col: 11, offset: 40551},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1125, col: 18, offset: 40558},
								expr: &seqExpr{
									pos: position{line: 1125, col: 19, offset: 40559},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1125, col: 19, offset: 40559},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1125, col: 23, offset: 40563},
											expr: &litMatcher{
												pos:        position{line: 1125, col: 24, offset: 40564},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1126, col: 11, offset: 40580},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1127, col: 11, offset: 40599},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1128, col: 11, offset: 40620},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1129, col: 11, offset: 40644},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1130, col: 11, offset: 40668},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1131, col: 11, offset: 40694},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1132, col: 11, offset: 40723},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1134, col: 1, offset: 40763},
			expr: &choiceExpr{
				pos: position{line: 1135, col: 5, offset: 40809},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1135, col: 5, offset: 40809},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1136, col: 7, offset: 40908},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1136, col: 7, offset: 40908},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1136, col: 7, offset: 40908},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1136, col: 11, offset: 40912},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1140, col: 1, offset: 41078},
			expr: &choiceExpr{
				pos: position{line: 1141, col: 5, offset: 41104},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1141, col: 5, offset: 41104},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1141, col: 5, offset: 41104},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1141, col: 5, offset: 41104},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1141, col: 18, offset: 41117},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1141, col: 40, offset: 41139},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1141, col: 45, offset: 41144},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1141, col: 55, offset: 41154},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1141, col: 86, offset: 41185},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1143, col: 9, offset: 41342},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1143, col: 9, offset: 41342},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1143, col: 9, offset: 41342},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1143, col: 22, offset: 41355},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1143, col: 44, offset: 41377},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1143, col: 49, offset: 41382},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1143, col: 59, offset: 41392},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1143, col: 90, offset: 41423},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1146, col: 9, offset: 41623},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1146, col: 9, offset: 41623},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1146, col: 9, offset: 41623},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1146, col: 22, offset: 41636},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1146, col: 44, offset: 41658},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1146, col: 48, offset: 41662},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1146, col: 58, offset: 41672},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1146, col: 89, offset: 41703},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1153, col: 1, offset: 41913},
			expr: &choiceExpr{
				pos: position{line: 1153, col: 18, offset: 41930},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1153, col: 18, offset: 41930},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1153, col: 45, offset: 41957},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1155, col: 1, offset: 41983},
			expr: &actionExpr{
				pos: position{line: 1155, col: 29, offset: 42011},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1155, col: 29, offset: 42011},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1155, col: 29, offset: 42011},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1155, col: 40, offset: 42022},
								expr: &ruleRefExpr{
									pos:  position{line: 1155, col: 41, offset: 42023},
									name: "QuotedTextAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1155, col: 64, offset: 42046},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1155, col: 69, offset: 42051},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1155, col: 79, offset: 42061},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1155, col: 113, offset: 42095},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1159, col: 1, offset: 42237},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1159, col: 37, offset: 42273},
				expr: &ruleRefExpr{
					pos:  position{line: 1159, col: 37, offset: 42273},
					name: "DoubleQuoteMonospaceTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1161, col: 1, offset: 42340},
			expr: &actionExpr{
				pos: position{line: 1161, col: 36, offset: 42375},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 1161, col: 36, offset: 42375},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1161, col: 36, offset: 42375},
							expr: &litMatcher{
								pos:        position{line: 1161, col: 38, offset: 42377},
								val:        "``",
								ignoreCase: false,
								want:       "\"``\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1161, col: 44, offset: 42383},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1161, col: 53, offset: 42392},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1161, col: 53, offset: 42392},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1162, col: 11, offset: 42407},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1163, col: 11, offset: 42456},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1163, col: 11, offset: 42456},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1163, col: 19, offset: 42464},
												expr: &ruleRefExpr{
													pos:  position{line: 1163, col: 20, offset: 42465},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1164, col: 11, offset: 42483},
										name: "QuotedString",
									},
									&actionExpr{
										pos: position{line: 1165, col: 11, offset: 42506},
										run: (*parser).callonDoubleQuoteMonospaceTextElement14,
										expr: &ruleRefExpr{
											pos:  position{line: 1165, col: 11, offset: 42506},
											name: "Apostrophe",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1169, col: 11, offset: 42690},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1170, col: 11, offset: 42725},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1171, col: 11, offset: 42744},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1172, col: 11, offset: 42765},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1173, col: 11, offset: 42786},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1174, col: 11, offset: 42810},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1175, col: 11, offset: 42836},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1176, col: 11, offset: 42865},
										name: "DoubleQuoteMonospaceTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1180, col: 1, offset: 42937},
			expr: &choiceExpr{
				pos: position{line: 1181, col: 5, offset: 42986},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1181, col: 5, offset: 42986},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1182, col: 7, offset: 43088},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1182, col: 7, offset: 43088},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1182, col: 7, offset: 43088},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1182, col: 12, offset: 43093},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1186, col: 1, offset: 43261},
			expr: &choiceExpr{
				pos: position{line: 1186, col: 29, offset: 43289},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1186, col: 29, offset: 43289},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1186, col: 29, offset: 43289},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1186, col: 29, offset: 43289},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1186, col: 40, offset: 43300},
										expr: &ruleRefExpr{
											pos:  position{line: 1186, col: 41, offset: 43301},
											name: "QuotedTextAttributes",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1186, col: 65, offset: 43325},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1186, col: 65, offset: 43325},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1186, col: 69, offset: 43329},
											expr: &litMatcher{
												pos:        position{line: 1186, col: 70, offset: 43330},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1186, col: 75, offset: 43335},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1186, col: 85, offset: 43345},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1186, col: 119, offset: 43379},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1188, col: 5, offset: 43577},
						run: (*parser).callonSingleQuoteMonospaceText14,
						expr: &seqExpr{
							pos: position{line: 1188, col: 5, offset: 43577},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1188, col: 5, offset: 43577},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1188, col: 16, offset: 43588},
										expr: &ruleRefExpr{
											pos:  position{line: 1188, col: 17, offset: 43589},
											name: "QuotedTextAttributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1188, col: 40, offset: 43612},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1188, col: 44, offset: 43616},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1188, col: 54, offset: 43626},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1188, col: 54, offset: 43626},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1188, col: 58, offset: 43630},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1188, col: 92, offset: 43664},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1192, col: 1, offset: 43883},
			expr: &seqExpr{
				pos: position{line: 1192, col: 37, offset: 43919},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1192, col: 37, offset: 43919},
						expr: &ruleRefExpr{
							pos:  position{line: 1192, col: 38, offset: 43920},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1192, col: 44, offset: 43926},
						expr: &ruleRefExpr{
							pos:  position{line: 1192, col: 44, offset: 43926},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1194, col: 1, offset: 43960},
			expr: &choiceExpr{
				pos: position{line: 1194, col: 37, offset: 43996},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1194, col: 37, offset: 43996},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1195, col: 11, offset: 44011},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1195, col: 11, offset: 44011},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1195, col: 19, offset: 44019},
								expr: &ruleRefExpr{
									pos:  position{line: 1195, col: 20, offset: 44020},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1196, col: 11, offset: 44038},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1197, col: 11, offset: 44073},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1198, col: 11, offset: 44096},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1198, col: 11, offset: 44096},
								expr: &ruleRefExpr{
									pos:  position{line: 1198, col: 11, offset: 44096},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1198, col: 18, offset: 44103},
								expr: &seqExpr{
									pos: position{line: 1198, col: 19, offset: 44104},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1198, col: 19, offset: 44104},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1198, col: 23, offset: 44108},
											expr: &litMatcher{
												pos:        position{line: 1198, col: 24, offset: 44109},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1199, col: 11, offset: 44237},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1200, col: 11, offset: 44256},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1201, col: 11, offset: 44277},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1202, col: 11, offset: 44298},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1203, col: 11, offset: 44322},
						name: "SuperscriptText",
					},
					&actionExpr{
						pos: position{line: 1204, col: 11, offset: 44348},
						run: (*parser).callonSingleQuoteMonospaceTextElement22,
						expr: &ruleRefExpr{
							pos:  position{line: 1204, col: 11, offset: 44348},
							name: "Apostrophe",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1208, col: 11, offset: 44489},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1209, col: 11, offset: 44518},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1211, col: 1, offset: 44561},
			expr: &choiceExpr{
				pos: position{line: 1212, col: 5, offset: 44610},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1212, col: 5, offset: 44610},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1213, col: 7, offset: 44712},
						run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1213, col: 7, offset: 44712},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1213, col: 7, offset: 44712},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1213, col: 11, offset: 44716},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1217, col: 1, offset: 44885},
			expr: &choiceExpr{
				pos: position{line: 1218, col: 5, offset: 44914},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1218, col: 5, offset: 44914},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1218, col: 5, offset: 44914},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1218, col: 5, offset: 44914},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1218, col: 18, offset: 44927},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1218, col: 40, offset: 44949},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1218, col: 45, offset: 44954},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1218, col: 55, offset: 44964},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1218, col: 89, offset: 44998},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1220, col: 9, offset: 45155},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1220, col: 9, offset: 45155},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1220, col: 9, offset: 45155},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1220, col: 22, offset: 45168},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1220, col: 44, offset: 45190},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1220, col: 49, offset: 45195},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1220, col: 59, offset: 45205},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1220, col: 93, offset: 45239},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1223, col: 9, offset: 45439},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1223, col: 9, offset: 45439},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1223, col: 9, offset: 45439},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1223, col: 22, offset: 45452},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1223, col: 44, offset: 45474},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1223, col: 48, offset: 45478},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1223, col: 58, offset: 45488},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1223, col: 92, offset: 45522},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1231, col: 1, offset: 45847},
			expr: &choiceExpr{
				pos: position{line: 1231, col: 17, offset: 45863},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1231, col: 17, offset: 45863},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1231, col: 38, offset: 45884},
						name: "DoubleQuotedString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 1233, col: 1, offset: 45904},
			expr: &actionExpr{
				pos: position{line: 1233, col: 23, offset: 45926},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1233, col: 23, offset: 45926},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1233, col: 23, offset: 45926},
							name: "SingleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1233, col: 46, offset: 45949},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1233, col: 55, offset: 45958},
								name: "SingleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1233, col: 82, offset: 45985},
							name: "SingleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 1237, col: 1, offset: 46089},
			expr: &actionExpr{
				pos: position{line: 1237, col: 31, offset: 46119},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1237, col: 31, offset: 46119},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1237, col: 41, offset: 46129},
						expr: &ruleRefExpr{
							pos:  position{line: 1237, col: 41, offset: 46129},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringStart",
			pos:  position{line: 1241, col: 1, offset: 46207},
			expr: &seqExpr{
				pos: position{line: 1241, col: 27, offset: 46233},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1241, col: 27, offset: 46233},
						val:        "'`",
						ignoreCase: false,
						want:       "\"'`\"",
					},
					&notExpr{
						pos: position{line: 1241, col: 32, offset: 46238},
						expr: &charClassMatcher{
							pos:        position{line: 1241, col: 33, offset: 46239},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringEnd",
			pos:  position{line: 1243, col: 1, offset: 46250},
			expr: &litMatcher{
				pos:        position{line: 1243, col: 25, offset: 46274},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 1246, col: 1, offset: 46362},
			expr: &actionExpr{
				pos: position{line: 1246, col: 30, offset: 46391},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1246, col: 30, offset: 46391},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1247, col: 9, offset: 46409},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1247, col: 9, offset: 46409},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1247, col: 9, offset: 46409},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1247, col: 19, offset: 46419},
										expr: &ruleRefExpr{
											pos:  position{line: 1247, col: 20, offset: 46420},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1248, col: 11, offset: 46476},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1248, col: 11, offset: 46476},
										expr: &ruleRefExpr{
											pos:  position{line: 1248, col: 11, offset: 46476},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1248, col: 18, offset: 46483},
										expr: &ruleRefExpr{
											pos:  position{line: 1248, col: 19, offset: 46484},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1249, col: 11, offset: 46515},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1249, col: 11, offset: 46515},
										expr: &litMatcher{
											pos:        position{line: 1249, col: 12, offset: 46516},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1249, col: 16, offset: 46520},
										name: "Symbol",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1250, col: 11, offset: 46568},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1251, col: 11, offset: 46587},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1252, col: 11, offset: 46608},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1253, col: 11, offset: 46629},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1254, col: 11, offset: 46653},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 1255, col: 11, offset: 46679},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1255, col: 11, offset: 46679},
										expr: &litMatcher{
											pos:        position{line: 1255, col: 12, offset: 46680},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1255, col: 17, offset: 46685},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1256, col: 11, offset: 46709},
								name: "DoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1257, col: 11, offset: 46738},
								name: "SingleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringFallbackCharacter",
			pos:  position{line: 1261, col: 1, offset: 46804},
			expr: &choiceExpr{
				pos: position{line: 1261, col: 41, offset: 46844},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1261, col: 41, offset: 46844},
						val:        "[^\\r\\n\\t `]",
						chars:      []rune{'\r', '\n', '\t', ' ', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1261, col: 55, offset: 46858},
						run: (*parser).callonSingleQuotedStringFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1261, col: 55, offset: 46858},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1261, col: 55, offset: 46858},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1261, col: 59, offset: 46862},
									expr: &litMatcher{
										pos:        position{line: 1261, col: 60, offset: 46863},
										val:        "'",
										ignoreCase: false,
										want:       "\"'\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 1265, col: 1, offset: 46922},
			expr: &actionExpr{
				pos: position{line: 1265, col: 23, offset: 46944},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1265, col: 23, offset: 46944},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1265, col: 23, offset: 46944},
							name: "DoubleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1265, col: 46, offset: 46967},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1265, col: 55, offset: 46976},
								name: "DoubleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1265, col: 82, offset: 47003},
							name: "DoubleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 1269, col: 1, offset: 47107},
			expr: &actionExpr{
				pos: position{line: 1269, col: 31, offset: 47137},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1269, col: 31, offset: 47137},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1269, col: 41, offset: 47147},
						expr: &ruleRefExpr{
							pos:  position{line: 1269, col: 41, offset: 47147},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 1274, col: 1, offset: 47307},
			expr: &actionExpr{
				pos: position{line: 1274, col: 30, offset: 47336},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1274, col: 30, offset: 47336},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1275, col: 9, offset: 47354},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1275, col: 9, offset: 47354},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1275, col: 9, offset: 47354},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1275, col: 19, offset: 47364},
										expr: &ruleRefExpr{
											pos:  position{line: 1275, col: 20, offset: 47365},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1276, col: 11, offset: 47421},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1276, col: 11, offset: 47421},
										expr: &ruleRefExpr{
											pos:  position{line: 1276, col: 11, offset: 47421},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1276, col: 18, offset: 47428},
										expr: &ruleRefExpr{
											pos:  position{line: 1276, col: 19, offset: 47429},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1277, col: 11, offset: 47460},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1278, col: 11, offset: 47479},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1279, col: 11, offset: 47500},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1280, col: 11, offset: 47521},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1281, col: 11, offset: 47545},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 1282, col: 11, offset: 47571},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1282, col: 11, offset: 47571},
										expr: &litMatcher{
											pos:        position{line: 1282, col: 12, offset: 47572},
											val:        "`\"",
											ignoreCase: false,
											want:       "\"`\\\"\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1282, col: 18, offset: 47578},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1283, col: 10, offset: 47601},
								name: "SingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1284, col: 11, offset: 47630},
								name: "DoubleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringStart",
			pos:  position{line: 1288, col: 1, offset: 47704},
			expr: &seqExpr{
				pos: position{line: 1288, col: 27, offset: 47730},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1288, col: 27, offset: 47730},
						val:        "\"`",
						ignoreCase: false,
						want:       "\"\\\"`\"",
					},
					&notExpr{
						pos: position{line: 1288, col: 33, offset: 47736},
						expr: &charClassMatcher{
							pos:        position{line: 1288, col: 34, offset: 47737},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringEnd",
			pos:  position{line: 1290, col: 1, offset: 47748},
			expr: &litMatcher{
				pos:        position{line: 1290, col: 25, offset: 47772},
				val:        "`\"",
				ignoreCase: false,
				want:       "\"`\\\"\"",
			},
		},
		{
			name: "DoubleQuotedStringFallbackCharacter",
			pos:  position{line: 1292, col: 1, offset: 47779},
			expr: &actionExpr{
				pos: position{line: 1292, col: 41, offset: 47819},
				run: (*parser).callonDoubleQuotedStringFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 1292, col: 42, offset: 47820},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1292, col: 42, offset: 47820},
							val:        "[^\\r\\n\\t `]",
							chars:      []rune{'\r', '\n', '\t', ' ', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 1292, col: 56, offset: 47834},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1292, col: 56, offset: 47834},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1292, col: 60, offset: 47838},
									expr: &litMatcher{
										pos:        position{line: 1292, col: 61, offset: 47839},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1301, col: 1, offset: 47959},
			expr: &choiceExpr{
				pos: position{line: 1301, col: 15, offset: 47973},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1301, col: 15, offset: 47973},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1301, col: 39, offset: 47997},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 1303, col: 1, offset: 48020},
			expr: &actionExpr{
				pos: position{line: 1303, col: 26, offset: 48045},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1303, col: 26, offset: 48045},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1303, col: 26, offset: 48045},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1303, col: 37, offset: 48056},
								expr: &ruleRefExpr{
									pos:  position{line: 1303, col: 38, offset: 48057},
									name: "QuotedTextAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1303, col: 61, offset: 48080},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1303, col: 66, offset: 48085},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1303, col: 76, offset: 48095},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1303, col: 107, offset: 48126},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 1307, col: 1, offset: 48265},
			expr: &seqExpr{
				pos: position{line: 1307, col: 34, offset: 48298},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1307, col: 34, offset: 48298},
						name: "DoubleQuoteMarkedTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1307, col: 63, offset: 48327},
						expr: &seqExpr{
							pos: position{line: 1307, col: 64, offset: 48328},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1307, col: 64, offset: 48328},
									expr: &litMatcher{
										pos:        position{line: 1307, col: 66, offset: 48330},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1307, col: 73, offset: 48337},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1307, col: 73, offset: 48337},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1307, col: 81, offset: 48345},
											name: "DoubleQuoteMarkedTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 1309, col: 1, offset: 48412},
			expr: &choiceExpr{
				pos: position{line: 1309, col: 33, offset: 48444},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1309, col: 33, offset: 48444},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1310, col: 11, offset: 48459},
						name: "SingleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1311, col: 11, offset: 48491},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1311, col: 11, offset: 48491},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1311, col: 19, offset: 48499},
								expr: &ruleRefExpr{
									pos:  position{line: 1311, col: 20, offset: 48500},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1312, col: 11, offset: 48518},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1313, col: 11, offset: 48541},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1314, col: 11, offset: 48560},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1315, col: 11, offset: 48581},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1316, col: 11, offset: 48605},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1317, col: 11, offset: 48629},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1318, col: 11, offset: 48655},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1319, col: 11, offset: 48684},
						name: "DoubleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1321, col: 1, offset: 48724},
			expr: &choiceExpr{
				pos: position{line: 1322, col: 5, offset: 48770},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1322, col: 5, offset: 48770},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1323, col: 7, offset: 48869},
						run: (*parser).callonDoubleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1323, col: 7, offset: 48869},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1323, col: 7, offset: 48869},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1323, col: 12, offset: 48874},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 1327, col: 1, offset: 49039},
			expr: &choiceExpr{
				pos: position{line: 1327, col: 26, offset: 49064},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1327, col: 26, offset: 49064},
						run: (*parser).callonSingleQuoteMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1327, col: 26, offset: 49064},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1327, col: 26, offset: 49064},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1327, col: 37, offset: 49075},
										expr: &ruleRefExpr{
											pos:  position{line: 1327, col: 38, offset: 49076},
											name: "QuotedTextAttributes",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1327, col: 62, offset: 49100},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1327, col: 62, offset: 49100},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1327, col: 66, offset: 49104},
											expr: &litMatcher{
												pos:        position{line: 1327, col: 67, offset: 49105},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1327, col: 72, offset: 49110},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1327, col: 82, offset: 49120},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1327, col: 113, offset: 49151},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1329, col: 5, offset: 49346},
						run: (*parser).callonSingleQuoteMarkedText14,
						expr: &seqExpr{
							pos: position{line: 1329, col: 5, offset: 49346},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1329, col: 5, offset: 49346},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1329, col: 16, offset: 49357},
										expr: &ruleRefExpr{
											pos:  position{line: 1329, col: 17, offset: 49358},
											name: "QuotedTextAttributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1329, col: 40, offset: 49381},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1329, col: 44, offset: 49385},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1329, col: 54, offset: 49395},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1329, col: 54, offset: 49395},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1329, col: 58, offset: 49399},
												name: "SingleQuoteMarkedTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1329, col: 89, offset: 49430},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 1333, col: 1, offset: 49644},
			expr: &seqExpr{
				pos: position{line: 1333, col: 34, offset: 49677},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1333, col: 34, offset: 49677},
						expr: &ruleRefExpr{
							pos:  position{line: 1333, col: 35, offset: 49678},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1333, col: 41, offset: 49684},
						expr: &ruleRefExpr{
							pos:  position{line: 1333, col: 41, offset: 49684},
							name: "SingleQuoteMarkedTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 1335, col: 1, offset: 49715},
			expr: &choiceExpr{
				pos: position{line: 1335, col: 33, offset: 49747},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1335, col: 33, offset: 49747},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1336, col: 11, offset: 49762},
						name: "DoubleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1337, col: 11, offset: 49794},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1337, col: 11, offset: 49794},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1337, col: 19, offset: 49802},
								expr: &ruleRefExpr{
									pos:  position{line: 1337, col: 20, offset: 49803},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1338, col: 11, offset: 49821},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1339, col: 11, offset: 49844},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1339, col: 11, offset: 49844},
								expr: &ruleRefExpr{
									pos:  position{line: 1339, col: 11, offset: 49844},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1339, col: 18, offset: 49851},
								expr: &seqExpr{
									pos: position{line: 1339, col: 19, offset: 49852},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1339, col: 19, offset: 49852},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1339, col: 23, offset: 49856},
											expr: &litMatcher{
												pos:        position{line: 1339, col: 24, offset: 49857},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1340, col: 11, offset: 49873},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1341, col: 11, offset: 49892},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1342, col: 11, offset: 49913},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1343, col: 11, offset: 49937},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1344, col: 11, offset: 49961},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1345, col: 11, offset: 49987},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1346, col: 11, offset: 50016},
						name: "SingleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1348, col: 1, offset: 50056},
			expr: &choiceExpr{
				pos: position{line: 1349, col: 5, offset: 50102},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1349, col: 5, offset: 50102},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1350, col: 7, offset: 50199},
						run: (*parser).callonSingleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1350, col: 7, offset: 50199},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1350, col: 7, offset: 50199},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1350, col: 11, offset: 50203},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 1354, col: 1, offset: 50366},
			expr: &choiceExpr{
				pos: position{line: 1355, col: 5, offset: 50391},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1355, col: 5, offset: 50391},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1355, col: 5, offset: 50391},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1355, col: 5, offset: 50391},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1355, col: 18, offset: 50404},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1355, col: 40, offset: 50426},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1355, col: 45, offset: 50431},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1355, col: 55, offset: 50441},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1355, col: 86, offset: 50472},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1357, col: 9, offset: 50629},
						run: (*parser).callonEscapedMarkedText10,
						expr: &seqExpr{
							pos: position{line: 1357, col: 9, offset: 50629},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1357, col: 9, offset: 50629},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1357, col: 22, offset: 50642},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1357, col: 44, offset: 50664},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1357, col: 49, offset: 50669},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1357, col: 59, offset: 50679},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1357, col: 90, offset: 50710},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1360, col: 9, offset: 50910},
						run: (*parser).callonEscapedMarkedText18,
						expr: &seqExpr{
							pos: position{line: 1360, col: 9, offset: 50910},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1360, col: 9, offset: 50910},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1360, col: 22, offset: 50923},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1360, col: 44, offset: 50945},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1360, col: 48, offset: 50949},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1360, col: 58, offset: 50959},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1360, col: 89, offset: 50990},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1365, col: 1, offset: 51140},
			expr: &actionExpr{
				pos: position{line: 1365, col: 18, offset: 51157},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1365, col: 18, offset: 51157},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1365, col: 18, offset: 51157},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1365, col: 29, offset: 51168},
								expr: &ruleRefExpr{
									pos:  position{line: 1365, col: 30, offset: 51169},
									name: "QuotedTextAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1365, col: 53, offset: 51192},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1365, col: 57, offset: 51196},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1365, col: 66, offset: 51205},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1365, col: 88, offset: 51227},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1369, col: 1, offset: 51328},
			expr: &choiceExpr{
				pos: position{line: 1369, col: 25, offset: 51352},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1369, col: 25, offset: 51352},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1369, col: 38, offset: 51365},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1371, col: 1, offset: 51384},
			expr: &actionExpr{
				pos: position{line: 1371, col: 21, offset: 51404},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1371, col: 21, offset: 51404},
					expr: &charClassMatcher{
						pos:        position{line: 1371, col: 21, offset: 51404},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1375, col: 1, offset: 51481},
			expr: &actionExpr{
				pos: position{line: 1375, col: 25, offset: 51505},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1375, col: 25, offset: 51505},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1375, col: 25, offset: 51505},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1375, col: 38, offset: 51518},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1375, col: 60, offset: 51540},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1375, col: 64, offset: 51544},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1375, col: 73, offset: 51553},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1375, col: 95, offset: 51575},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1379, col: 1, offset: 51704},
			expr: &actionExpr{
				pos: position{line: 1379, col: 20, offset: 51723},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1379, col: 20, offset: 51723},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1379, col: 20, offset: 51723},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1379, col: 31, offset: 51734},
								expr: &ruleRefExpr{
									pos:  position{line: 1379, col: 32, offset: 51735},
									name: "QuotedTextAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1379, col: 55, offset: 51758},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1379, col: 59, offset: 51762},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1379, col: 68, offset: 51771},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1379, col: 92, offset: 51795},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1383, col: 1, offset: 51898},
			expr: &choiceExpr{
				pos: position{line: 1383, col: 27, offset: 51924},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1383, col: 27, offset: 51924},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1383, col: 40, offset: 51937},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1385, col: 1, offset: 51958},
			expr: &actionExpr{
				pos: position{line: 1385, col: 23, offset: 51980},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1385, col: 23, offset: 51980},
					expr: &charClassMatcher{
						pos:        position{line: 1385, col: 23, offset: 51980},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1389, col: 1, offset: 52057},
			expr: &actionExpr{
				pos: position{line: 1389, col: 27, offset: 52083},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1389, col: 27, offset: 52083},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1389, col: 27, offset: 52083},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1389, col: 40, offset: 52096},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1389, col: 62, offset: 52118},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1389, col: 66, offset: 52122},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1389, col: 75, offset: 52131},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1389, col: 99, offset: 52155},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1396, col: 1, offset: 52397},
			expr: &choiceExpr{
				pos: position{line: 1396, col: 22, offset: 52418},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1396, col: 22, offset: 52418},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1396, col: 46, offset: 52442},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1396, col: 70, offset: 52466},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1398, col: 1, offset: 52484},
			expr: &litMatcher{
				pos:        position{line: 1398, col: 32, offset: 52515},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1400, col: 1, offset: 52520},
			expr: &actionExpr{
				pos: position{line: 1400, col: 26, offset: 52545},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1400, col: 26, offset: 52545},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1400, col: 26, offset: 52545},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1400, col: 54, offset: 52573},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1400, col: 63, offset: 52582},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1400, col: 93, offset: 52612},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1400, col: 121, offset: 52640},
							expr: &ruleRefExpr{
								pos:  position{line: 1400, col: 122, offset: 52641},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1404, col: 1, offset: 52746},
			expr: &choiceExpr{
				pos: position{line: 1404, col: 33, offset: 52778},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1404, col: 34, offset: 52779},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1404, col: 34, offset: 52779},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1404, col: 35, offset: 52780},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1404, col: 35, offset: 52780},
											expr: &ruleRefExpr{
												pos:  position{line: 1404, col: 36, offset: 52781},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1404, col: 64, offset: 52809},
											expr: &ruleRefExpr{
												pos:  position{line: 1404, col: 65, offset: 52810},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 1404, col: 71, offset: 52816},
											expr: &ruleRefExpr{
												pos:  position{line: 1404, col: 72, offset: 52817},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 1404, col: 80, offset: 52825,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1404, col: 83, offset: 52828},
									expr: &seqExpr{
										pos: position{line: 1404, col: 84, offset: 52829},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1404, col: 84, offset: 52829},
												expr: &seqExpr{
													pos: position{line: 1404, col: 86, offset: 52831},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1404, col: 86, offset: 52831},
															expr: &ruleRefExpr{
																pos:  position{line: 1404, col: 86, offset: 52831},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1404, col: 93, offset: 52838},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1404, col: 122, offset: 52867},
												expr: &ruleRefExpr{
													pos:  position{line: 1404, col: 123, offset: 52868},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1404, col: 151, offset: 52896},
												expr: &ruleRefExpr{
													pos:  position{line: 1404, col: 152, offset: 52897},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 1404, col: 160, offset: 52905,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1406, col: 7, offset: 53047},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1406, col: 8, offset: 53048},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1406, col: 8, offset: 53048},
									expr: &ruleRefExpr{
										pos:  position{line: 1406, col: 9, offset: 53049},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 1406, col: 15, offset: 53055},
									expr: &ruleRefExpr{
										pos:  position{line: 1406, col: 16, offset: 53056},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1406, col: 24, offset: 53064},
									expr: &ruleRefExpr{
										pos:  position{line: 1406, col: 25, offset: 53065},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1406, col: 53, offset: 53093,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1410, col: 1, offset: 53175},
			expr: &litMatcher{
				pos:        position{line: 1410, col: 32, offset: 53206},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1412, col: 1, offset: 53213},
			expr: &actionExpr{
				pos: position{line: 1412, col: 26, offset: 53238},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1412, col: 26, offset: 53238},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1412, col: 26, offset: 53238},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1412, col: 54, offset: 53266},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1412, col: 63, offset: 53275},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1412, col: 93, offset: 53305},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1412, col: 121, offset: 53333},
							expr: &ruleRefExpr{
								pos:  position{line: 1412, col: 122, offset: 53334},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1416, col: 1, offset: 53439},
			expr: &choiceExpr{
				pos: position{line: 1416, col: 33, offset: 53471},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1416, col: 34, offset: 53472},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1416, col: 34, offset: 53472},
							expr: &seqExpr{
								pos: position{line: 1416, col: 35, offset: 53473},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1416, col: 35, offset: 53473},
										expr: &ruleRefExpr{
											pos:  position{line: 1416, col: 36, offset: 53474},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1416, col: 64, offset: 53502,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1418, col: 7, offset: 53667},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1418, col: 7, offset: 53667},
							expr: &seqExpr{
								pos: position{line: 1418, col: 8, offset: 53668},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1418, col: 8, offset: 53668},
										expr: &ruleRefExpr{
											pos:  position{line: 1418, col: 9, offset: 53669},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1418, col: 15, offset: 53675},
										expr: &ruleRefExpr{
											pos:  position{line: 1418, col: 16, offset: 53676},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1418, col: 24, offset: 53684},
										expr: &ruleRefExpr{
											pos:  position{line: 1418, col: 25, offset: 53685},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1418, col: 53, offset: 53713,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1422, col: 1, offset: 53796},
			expr: &choiceExpr{
				pos: position{line: 1422, col: 21, offset: 53816},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1422, col: 21, offset: 53816},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1422, col: 21, offset: 53816},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1422, col: 21, offset: 53816},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1422, col: 30, offset: 53825},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1422, col: 38, offset: 53833},
										expr: &ruleRefExpr{
											pos:  position{line: 1422, col: 39, offset: 53834},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1422, col: 67, offset: 53862},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1424, col: 5, offset: 53958},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1424, col: 5, offset: 53958},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1424, col: 5, offset: 53958},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 1424, col: 15, offset: 53968},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1424, col: 23, offset: 53976},
										expr: &choiceExpr{
											pos: position{line: 1424, col: 24, offset: 53977},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1424, col: 24, offset: 53977},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1424, col: 37, offset: 53990},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1424, col: 65, offset: 54018},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1428, col: 1, offset: 54114},
			expr: &actionExpr{
				pos: position{line: 1428, col: 30, offset: 54143},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 1428, col: 30, offset: 54143},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1435, col: 1, offset: 54316},
			expr: &choiceExpr{
				pos: position{line: 1435, col: 19, offset: 54334},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1435, col: 19, offset: 54334},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1435, col: 44, offset: 54359},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1437, col: 1, offset: 54384},
			expr: &choiceExpr{
				pos: position{line: 1437, col: 27, offset: 54410},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1437, col: 27, offset: 54410},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1437, col: 27, offset: 54410},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1437, col: 27, offset: 54410},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1437, col: 32, offset: 54415},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1437, col: 36, offset: 54419},
										name: "Id",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1437, col: 40, offset: 54423},
									expr: &ruleRefExpr{
										pos:  position{line: 1437, col: 40, offset: 54423},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 1437, col: 47, offset: 54430},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 1437, col: 51, offset: 54434},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1437, col: 58, offset: 54441},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1437, col: 79, offset: 54462},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1439, col: 5, offset: 54545},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1439, col: 5, offset: 54545},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1439, col: 5, offset: 54545},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1439, col: 10, offset: 54550},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1439, col: 14, offset: 54554},
										name: "Id",
									},
								},
								&litMatcher{
									pos:        position{line: 1439, col: 18, offset: 54558},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 1443, col: 1, offset: 54630},
			expr: &actionExpr{
				pos: position{line: 1443, col: 27, offset: 54656},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1443, col: 27, offset: 54656},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1443, col: 27, offset: 54656},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 1443, col: 35, offset: 54664},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1443, col: 40, offset: 54669},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1443, col: 54, offset: 54683},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1443, col: 72, offset: 54701},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1447, col: 1, offset: 54824},
			expr: &ruleRefExpr{
				pos:  position{line: 1447, col: 24, offset: 54847},
				name: "ElementTitleContent",
			},
		},
		{
			name: "Link",
			pos:  position{line: 1452, col: 1, offset: 54969},
			expr: &choiceExpr{
				pos: position{line: 1452, col: 9, offset: 54977},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1452, col: 9, offset: 54977},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1452, col: 24, offset: 54992},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1455, col: 1, offset: 55073},
			expr: &actionExpr{
				pos: position{line: 1455, col: 17, offset: 55089},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1455, col: 17, offset: 55089},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1455, col: 17, offset: 55089},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1455, col: 25, offset: 55097},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1455, col: 30, offset: 55102},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1455, col: 40, offset: 55112},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1455, col: 58, offset: 55130},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1459, col: 1, offset: 55241},
			expr: &actionExpr{
				pos: position{line: 1459, col: 17, offset: 55257},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1459, col: 17, offset: 55257},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1459, col: 17, offset: 55257},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1459, col: 22, offset: 55262},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 1459, col: 42, offset: 55282},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1459, col: 59, offset: 55299},
								expr: &ruleRefExpr{
									pos:  position{line: 1459, col: 60, offset: 55300},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1463, col: 1, offset: 55393},
			expr: &actionExpr{
				pos: position{line: 1463, col: 19, offset: 55411},
				run: (*parser).callonLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1463, col: 19, offset: 55411},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1463, col: 19, offset: 55411},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1463, col: 23, offset: 55415},
							label: "firstAttr",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1463, col: 33, offset: 55425},
								expr: &ruleRefExpr{
									pos:  position{line: 1463, col: 34, offset: 55426},
									name: "FirstLinkAttributeElement",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1464, col: 5, offset: 55458},
							expr: &ruleRefExpr{
								pos:  position{line: 1464, col: 5, offset: 55458},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1464, col: 12, offset: 55465},
							label: "otherAttrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1464, col: 23, offset: 55476},
								expr: &ruleRefExpr{
									pos:  position{line: 1464, col: 24, offset: 55477},
									name: "NamedAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1464, col: 41, offset: 55494},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstLinkAttributeElement",
			pos:  position{line: 1468, col: 1, offset: 55611},
			expr: &actionExpr{
				pos: position{line: 1468, col: 30, offset: 55640},
				run: (*parser).callonFirstLinkAttributeElement1,
				expr: &labeledExpr{
					pos:   position{line: 1468, col: 30, offset: 55640},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1470, col: 5, offset: 55691},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 1470, col: 6, offset: 55692},
								run: (*parser).callonFirstLinkAttributeElement4,
								expr: &seqExpr{
									pos: position{line: 1470, col: 6, offset: 55692},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1470, col: 6, offset: 55692},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&labeledExpr{
											pos:   position{line: 1470, col: 11, offset: 55697},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1470, col: 20, offset: 55706},
												expr: &choiceExpr{
													pos: position{line: 1470, col: 21, offset: 55707},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1470, col: 21, offset: 55707},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1470, col: 36, offset: 55722},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1470, col: 49, offset: 55735},
															name: "ElementPlaceHolder",
														},
														&ruleRefExpr{
															pos:  position{line: 1470, col: 70, offset: 55756},
															name: "QuotedAttributeChar",
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 1470, col: 92, offset: 55778},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&andExpr{
											pos: position{line: 1470, col: 97, offset: 55783},
											expr: &notExpr{
												pos: position{line: 1470, col: 99, offset: 55785},
												expr: &litMatcher{
													pos:        position{line: 1470, col: 100, offset: 55786},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1470, col: 105, offset: 55791},
											expr: &litMatcher{
												pos:        position{line: 1470, col: 105, offset: 55791},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 1474, col: 6, offset: 55918},
								run: (*parser).callonFirstLinkAttributeElement20,
								expr: &seqExpr{
									pos: position{line: 1474, col: 6, offset: 55918},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1474, col: 6, offset: 55918},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1474, col: 15, offset: 55927},
												expr: &choiceExpr{
													pos: position{line: 1474, col: 16, offset: 55928},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1474, col: 16, offset: 55928},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1474, col: 31, offset: 55943},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1474, col: 44, offset: 55956},
															name: "ElementPlaceHolder",
														},
														&ruleRefExpr{
															pos:  position{line: 1474, col: 65, offset: 55977},
															name: "UnquotedAttributeChar",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 1474, col: 89, offset: 56001},
											expr: &notExpr{
												pos: position{line: 1474, col: 91, offset: 56003},
												expr: &litMatcher{
													pos:        position{line: 1474, col: 92, offset: 56004},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1474, col: 97, offset: 56009},
											expr: &litMatcher{
												pos:        position{line: 1474, col: 97, offset: 56009},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeChar",
			pos:  position{line: 1480, col: 1, offset: 56123},
			expr: &actionExpr{
				pos: position{line: 1480, col: 18, offset: 56140},
				run: (*parser).callonAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1480, col: 18, offset: 56140},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "QuotedAttributeChar",
			pos:  position{line: 1484, col: 1, offset: 56226},
			expr: &actionExpr{
				pos: position{line: 1484, col: 24, offset: 56249},
				run: (*parser).callonQuotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1484, col: 24, offset: 56249},
					val:        "[^\\r\\n\"=\\]]",
					chars:      []rune{'\r', '\n', '"', '=', ']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "UnquotedAttributeChar",
			pos:  position{line: 1488, col: 1, offset: 56342},
			expr: &actionExpr{
				pos: position{line: 1488, col: 26, offset: 56367},
				run: (*parser).callonUnquotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1488, col: 26, offset: 56367},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1495, col: 1, offset: 56555},
			expr: &actionExpr{
				pos: position{line: 1495, col: 15, offset: 56569},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1495, col: 15, offset: 56569},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1495, col: 15, offset: 56569},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1495, col: 27, offset: 56581},
								name: "ImageBlockAttributes",
							},
						},
						&litMatcher{
							pos:        position{line: 1495, col: 49, offset: 56603},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 1495, col: 59, offset: 56613},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1495, col: 65, offset: 56619},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1495, col: 75, offset: 56629},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1495, col: 93, offset: 56647},
								name: "InlineImageAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1495, col: 116, offset: 56670},
							expr: &ruleRefExpr{
								pos:  position{line: 1495, col: 116, offset: 56670},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1495, col: 123, offset: 56677},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ImageBlockAttributes",
			pos:  position{line: 1500, col: 1, offset: 56908},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1500, col: 25, offset: 56932},
				expr: &actionExpr{
					pos: position{line: 1500, col: 26, offset: 56933},
					run: (*parser).callonImageBlockAttributes2,
					expr: &seqExpr{
						pos: position{line: 1500, col: 26, offset: 56933},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1500, col: 26, offset: 56933},
								expr: &ruleRefExpr{
									pos:  position{line: 1500, col: 27, offset: 56934},
									name: "VerseAttributes",
								},
							},
							&labeledExpr{
								pos:   position{line: 1500, col: 43, offset: 56950},
								label: "attribute",
								expr: &choiceExpr{
									pos: position{line: 1500, col: 54, offset: 56961},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1500, col: 54, offset: 56961},
											name: "ElementShortHandAttributes",
										},
										&ruleRefExpr{
											pos:  position{line: 1500, col: 83, offset: 56990},
											name: "ElementTitle",
										},
										&ruleRefExpr{
											pos:  position{line: 1500, col: 98, offset: 57005},
											name: "ElementID",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAttrList",
			pos:  position{line: 1502, col: 1, offset: 57046},
			expr: &actionExpr{
				pos: position{line: 1502, col: 18, offset: 57063},
				run: (*parser).callonImageAttrList1,
				expr: &seqExpr{
					pos: position{line: 1502, col: 18, offset: 57063},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1502, col: 18, offset: 57063},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1502, col: 22, offset: 57067},
							label: "alt",
							expr: &zeroOrOneExpr{
								pos: position{line: 1502, col: 26, offset: 57071},
								expr: &ruleRefExpr{
									pos:  position{line: 1502, col: 27, offset: 57072},
									name: "ImageAlt",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1502, col: 38, offset: 57083},
							label: "shortHands",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1502, col: 49, offset: 57094},
								expr: &ruleRefExpr{
									pos:  position{line: 1502, col: 50, offset: 57095},
									name: "ShortHandAttr",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1502, col: 66, offset: 57111},
							expr: &seqExpr{
								pos: position{line: 1502, col: 67, offset: 57112},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1502, col: 67, offset: 57112},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1502, col: 71, offset: 57116},
										expr: &ruleRefExpr{
											pos:  position{line: 1502, col: 71, offset: 57116},
											name: "Space",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1502, col: 80, offset: 57125},
							label: "width",
							expr: &zeroOrOneExpr{
								pos: position{line: 1502, col: 86, offset: 57131},
								expr: &ruleRefExpr{
									pos:  position{line: 1502, col: 87, offset: 57132},
									name: "ImageWidth",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1502, col: 100, offset: 57145},
							expr: &seqExpr{
								pos: position{line: 1502, col: 101, offset: 57146},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1502, col: 101, offset: 57146},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1502, col: 105, offset: 57150},
										expr: &ruleRefExpr{
											pos:  position{line: 1502, col: 105, offset: 57150},
											name: "Space",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1502, col: 114, offset: 57159},
							label: "height",
							expr: &zeroOrOneExpr{
								pos: position{line: 1502, col: 121, offset: 57166},
								expr: &ruleRefExpr{
									pos:  position{line: 1502, col: 122, offset: 57167},
									name: "ImageHeight",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1502, col: 136, offset: 57181},
							expr: &seqExpr{
								pos: position{line: 1502, col: 137, offset: 57182},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1502, col: 137, offset: 57182},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1502, col: 141, offset: 57186},
										expr: &ruleRefExpr{
											pos:  position{line: 1502, col: 141, offset: 57186},
											name: "Space",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1502, col: 150, offset: 57195},
							label: "others",
							expr: &ruleRefExpr{
								pos:  position{line: 1502, col: 158, offset: 57203},
								name: "NamedAttributes",
							},
						},
						&litMatcher{
							pos:        position{line: 1502, col: 175, offset: 57220},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1502, col: 179, offset: 57224},
							expr: &ruleRefExpr{
								pos:  position{line: 1502, col: 179, offset: 57224},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1502, col: 186, offset: 57231},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1506, col: 1, offset: 57303},
			expr: &actionExpr{
				pos: position{line: 1506, col: 16, offset: 57318},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1506, col: 16, offset: 57318},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1506, col: 16, offset: 57318},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 1506, col: 25, offset: 57327},
							expr: &litMatcher{
								pos:        position{line: 1506, col: 26, offset: 57328},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1506, col: 30, offset: 57332},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1506, col: 36, offset: 57338},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1506, col: 46, offset: 57348},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1506, col: 64, offset: 57366},
								name: "InlineImageAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineImageAttributes",
			pos:  position{line: 1510, col: 1, offset: 57514},
			expr: &actionExpr{
				pos: position{line: 1510, col: 26, offset: 57539},
				run: (*parser).callonInlineImageAttributes1,
				expr: &seqExpr{
					pos: position{line: 1510, col: 26, offset: 57539},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1510, col: 26, offset: 57539},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1510, col: 30, offset: 57543},
							expr: &ruleRefExpr{
								pos:  position{line: 1510, col: 30, offset: 57543},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1510, col: 37, offset: 57550},
							label: "alt",
							expr: &zeroOrOneExpr{
								pos: position{line: 1510, col: 41, offset: 57554},
								expr: &ruleRefExpr{
									pos:  position{line: 1510, col: 42, offset: 57555},
									name: "ImageAlt",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1510, col: 53, offset: 57566},
							expr: &seqExpr{
								pos: position{line: 1510, col: 54, offset: 57567},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1510, col: 54, offset: 57567},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1510, col: 58, offset: 57571},
										expr: &ruleRefExpr{
											pos:  position{line: 1510, col: 58, offset: 57571},
											name: "Space",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1510, col: 67, offset: 57580},
							label: "width",
							expr: &zeroOrOneExpr{
								pos: position{line: 1510, col: 73, offset: 57586},
								expr: &ruleRefExpr{
									pos:  position{line: 1510, col: 74, offset: 57587},
									name: "ImageWidth",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1510, col: 87, offset: 57600},
							expr: &seqExpr{
								pos: position{line: 1510, col: 88, offset: 57601},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1510, col: 88, offset: 57601},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1510, col: 92, offset: 57605},
										expr: &ruleRefExpr{
											pos:  position{line: 1510, col: 92, offset: 57605},
											name: "Space",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1510, col: 101, offset: 57614},
							label: "height",
							expr: &zeroOrOneExpr{
								pos: position{line: 1510, col: 108, offset: 57621},
								expr: &ruleRefExpr{
									pos:  position{line: 1510, col: 109, offset: 57622},
									name: "ImageHeight",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1510, col: 123, offset: 57636},
							expr: &seqExpr{
								pos: position{line: 1510, col: 124, offset: 57637},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1510, col: 124, offset: 57637},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1510, col: 128, offset: 57641},
										expr: &ruleRefExpr{
											pos:  position{line: 1510, col: 128, offset: 57641},
											name: "Space",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1510, col: 137, offset: 57650},
							label: "others",
							expr: &ruleRefExpr{
								pos:  position{line: 1510, col: 145, offset: 57658},
								name: "NamedAttributes",
							},
						},
						&litMatcher{
							pos:        position{line: 1510, col: 162, offset: 57675},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "ImageAlt",
			pos:  position{line: 1514, col: 1, offset: 57747},
			expr: &actionExpr{
				pos: position{line: 1514, col: 13, offset: 57759},
				run: (*parser).callonImageAlt1,
				expr: &labeledExpr{
					pos:   position{line: 1514, col: 13, offset: 57759},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 1514, col: 20, offset: 57766},
						name: "AttributeValue",
					},
				},
			},
		},
		{
			name: "ImageWidth",
			pos:  position{line: 1518, col: 1, offset: 57850},
			expr: &actionExpr{
				pos: position{line: 1518, col: 15, offset: 57864},
				run: (*parser).callonImageWidth1,
				expr: &labeledExpr{
					pos:   position{line: 1518, col: 15, offset: 57864},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 1518, col: 22, offset: 57871},
						name: "AttributeValue",
					},
				},
			},
		},
		{
			name: "ImageHeight",
			pos:  position{line: 1522, col: 1, offset: 57952},
			expr: &actionExpr{
				pos: position{line: 1522, col: 16, offset: 57967},
				run: (*parser).callonImageHeight1,
				expr: &labeledExpr{
					pos:   position{line: 1522, col: 16, offset: 57967},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 1522, col: 23, offset: 57974},
						name: "AttributeValue",
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 1529, col: 1, offset: 58253},
			expr: &actionExpr{
				pos: position{line: 1529, col: 15, offset: 58267},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 1529, col: 15, offset: 58267},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1529, col: 15, offset: 58267},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 1529, col: 23, offset: 58275},
							label: "icon",
							expr: &actionExpr{
								pos: position{line: 1529, col: 29, offset: 58281},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1529, col: 29, offset: 58281},
									expr: &charClassMatcher{
										pos:        position{line: 1529, col: 29, offset: 58281},
										val:        "[\\pL0-9_-]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1529, col: 73, offset: 58325},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1529, col: 85, offset: 58337},
								name: "IconAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "IconAttributes",
			pos:  position{line: 1533, col: 1, offset: 58429},
			expr: &actionExpr{
				pos: position{line: 1533, col: 19, offset: 58447},
				run: (*parser).callonIconAttributes1,
				expr: &seqExpr{
					pos: position{line: 1533, col: 19, offset: 58447},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1533, col: 19, offset: 58447},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1533, col: 23, offset: 58451},
							label: "size",
							expr: &zeroOrOneExpr{
								pos: position{line: 1533, col: 28, offset: 58456},
								expr: &ruleRefExpr{
									pos:  position{line: 1533, col: 29, offset: 58457},
									name: "IconSize",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1533, col: 40, offset: 58468},
							label: "others",
							expr: &ruleRefExpr{
								pos:  position{line: 1533, col: 48, offset: 58476},
								name: "NamedAttributes",
							},
						},
						&litMatcher{
							pos:        position{line: 1533, col: 65, offset: 58493},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "IconSize",
			pos:  position{line: 1538, col: 1, offset: 58586},
			expr: &actionExpr{
				pos: position{line: 1538, col: 13, offset: 58598},
				run: (*parser).callonIconSize1,
				expr: &seqExpr{
					pos: position{line: 1538, col: 13, offset: 58598},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1538, col: 13, offset: 58598},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1538, col: 20, offset: 58605},
								name: "AttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1538, col: 36, offset: 58621},
							expr: &seqExpr{
								pos: position{line: 1538, col: 37, offset: 58622},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1538, col: 37, offset: 58622},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1538, col: 41, offset: 58626},
										expr: &ruleRefExpr{
											pos:  position{line: 1538, col: 41, offset: 58626},
											name: "Space",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1545, col: 1, offset: 58900},
			expr: &choiceExpr{
				pos: position{line: 1545, col: 19, offset: 58918},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1545, col: 19, offset: 58918},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1545, col: 19, offset: 58918},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1545, col: 19, offset: 58918},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1545, col: 32, offset: 58931},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1545, col: 41, offset: 58940},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1545, col: 58, offset: 58957},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1547, col: 5, offset: 59025},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1547, col: 5, offset: 59025},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1547, col: 5, offset: 59025},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 1547, col: 17, offset: 59037},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1547, col: 22, offset: 59042},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1547, col: 35, offset: 59055},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 1547, col: 39, offset: 59059},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 1547, col: 47, offset: 59067},
										expr: &ruleRefExpr{
											pos:  position{line: 1547, col: 48, offset: 59068},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1547, col: 66, offset: 59086},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1551, col: 1, offset: 59147},
			expr: &ruleRefExpr{
				pos:  position{line: 1551, col: 16, offset: 59162},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1553, col: 1, offset: 59173},
			expr: &actionExpr{
				pos: position{line: 1553, col: 20, offset: 59192},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1553, col: 20, offset: 59192},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1553, col: 29, offset: 59201},
						expr: &seqExpr{
							pos: position{line: 1553, col: 30, offset: 59202},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1553, col: 30, offset: 59202},
									expr: &litMatcher{
										pos:        position{line: 1553, col: 31, offset: 59203},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1553, col: 35, offset: 59207},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1561, col: 1, offset: 59523},
			expr: &actionExpr{
				pos: position{line: 1561, col: 12, offset: 59534},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1561, col: 12, offset: 59534},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1561, col: 12, offset: 59534},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1561, col: 16, offset: 59538},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1561, col: 21, offset: 59543},
								run: (*parser).callonCallout5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1561, col: 21, offset: 59543},
									expr: &charClassMatcher{
										pos:        position{line: 1561, col: 21, offset: 59543},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1561, col: 69, offset: 59591},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1561, col: 73, offset: 59595},
							expr: &ruleRefExpr{
								pos:  position{line: 1561, col: 73, offset: 59595},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1561, col: 80, offset: 59602},
							expr: &choiceExpr{
								pos: position{line: 1561, col: 82, offset: 59604},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1561, col: 82, offset: 59604},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 1561, col: 88, offset: 59610},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItem",
			pos:  position{line: 1565, col: 1, offset: 59663},
			expr: &actionExpr{
				pos: position{line: 1565, col: 20, offset: 59682},
				run: (*parser).callonCalloutListItem1,
				expr: &seqExpr{
					pos: position{line: 1565, col: 20, offset: 59682},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1565, col: 20, offset: 59682},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 1565, col: 25, offset: 59687},
								name: "CalloutListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1565, col: 48, offset: 59710},
							label: "description",
							expr: &oneOrMoreExpr{
								pos: position{line: 1565, col: 61, offset: 59723},
								expr: &ruleRefExpr{
									pos:  position{line: 1565, col: 61, offset: 59723},
									name: "ListParagraph",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItemPrefix",
			pos:  position{line: 1569, col: 1, offset: 59820},
			expr: &actionExpr{
				pos: position{line: 1569, col: 26, offset: 59845},
				run: (*parser).callonCalloutListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 1569, col: 26, offset: 59845},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1569, col: 26, offset: 59845},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1569, col: 30, offset: 59849},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1569, col: 35, offset: 59854},
								run: (*parser).callonCalloutListItemPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1569, col: 35, offset: 59854},
									expr: &charClassMatcher{
										pos:        position{line: 1569, col: 35, offset: 59854},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1569, col: 83, offset: 59902},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1569, col: 87, offset: 59906},
							expr: &ruleRefExpr{
								pos:  position{line: 1569, col: 87, offset: 59906},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ThematicBreak",
			pos:  position{line: 1578, col: 1, offset: 60153},
			expr: &actionExpr{
				pos: position{line: 1578, col: 18, offset: 60170},
				run: (*parser).callonThematicBreak1,
				expr: &seqExpr{
					pos: position{line: 1578, col: 18, offset: 60170},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1578, col: 19, offset: 60171},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1578, col: 19, offset: 60171},
									val:        "***",
									ignoreCase: false,
									want:       "\"***\"",
								},
								&litMatcher{
									pos:        position{line: 1578, col: 27, offset: 60179},
									val:        "* * *",
									ignoreCase: false,
									want:       "\"* * *\"",
								},
								&litMatcher{
									pos:        position{line: 1578, col: 37, offset: 60189},
									val:        "---",
									ignoreCase: false,
									want:       "\"---\"",
								},
								&litMatcher{
									pos:        position{line: 1578, col: 45, offset: 60197},
									val:        "- - -",
									ignoreCase: false,
									want:       "\"- - -\"",
								},
								&litMatcher{
									pos:        position{line: 1578, col: 55, offset: 60207},
									val:        "___",
									ignoreCase: false,
									want:       "\"___\"",
								},
								&litMatcher{
									pos:        position{line: 1578, col: 63, offset: 60215},
									val:        "_ _ _",
									ignoreCase: false,
									want:       "\"_ _ _\"",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1578, col: 72, offset: 60224},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1588, col: 1, offset: 60474},
			expr: &actionExpr{
				pos: position{line: 1588, col: 19, offset: 60492},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1588, col: 19, offset: 60492},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1588, col: 19, offset: 60492},
							expr: &ruleRefExpr{
								pos:  position{line: 1588, col: 20, offset: 60493},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1589, col: 5, offset: 60581},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1589, col: 12, offset: 60588},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1589, col: 12, offset: 60588},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1590, col: 11, offset: 60611},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1591, col: 11, offset: 60635},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1592, col: 11, offset: 60659},
										name: "VerseBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1593, col: 11, offset: 60680},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1594, col: 11, offset: 60701},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1595, col: 11, offset: 60724},
										name: "PassthroughBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1596, col: 11, offset: 60751},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1600, col: 1, offset: 60792},
			expr: &choiceExpr{
				pos: position{line: 1600, col: 19, offset: 60810},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1600, col: 19, offset: 60810},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1600, col: 19, offset: 60810},
								expr: &ruleRefExpr{
									pos:  position{line: 1600, col: 21, offset: 60812},
									name: "Alphanum",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1600, col: 31, offset: 60822},
								name: "LiteralBlockDelimiter",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1601, col: 19, offset: 60893},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1602, col: 19, offset: 60933},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1603, col: 19, offset: 60974},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1604, col: 19, offset: 61015},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1605, col: 19, offset: 61056},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1606, col: 19, offset: 61094},
						name: "SidebarBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1607, col: 19, offset: 61134},
						name: "PassthroughBlockDelimiter",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1612, col: 1, offset: 61357},
			expr: &actionExpr{
				pos: position{line: 1612, col: 17, offset: 61373},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1612, col: 17, offset: 61373},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1612, col: 17, offset: 61373},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1612, col: 28, offset: 61384},
								expr: &ruleRefExpr{
									pos:  position{line: 1612, col: 29, offset: 61385},
									name: "ElementAttribute",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1612, col: 48, offset: 61404},
							name: "ExampleBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1612, col: 75, offset: 61431},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 1612, col: 83, offset: 61439},
								name: "ExampleBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1612, col: 107, offset: 61463},
							name: "ExampleBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1616, col: 1, offset: 61578},
			expr: &seqExpr{
				pos: position{line: 1616, col: 26, offset: 61603},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1616, col: 26, offset: 61603},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1616, col: 33, offset: 61610},
						expr: &ruleRefExpr{
							pos:  position{line: 1616, col: 33, offset: 61610},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1616, col: 40, offset: 61617},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockStartDelimiter",
			pos:  position{line: 1618, col: 1, offset: 61622},
			expr: &seqExpr{
				pos: position{line: 1618, col: 31, offset: 61652},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1618, col: 31, offset: 61652},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1618, col: 38, offset: 61659},
						expr: &ruleRefExpr{
							pos:  position{line: 1618, col: 38, offset: 61659},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1618, col: 45, offset: 61666},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockEndDelimiter",
			pos:  position{line: 1620, col: 1, offset: 61671},
			expr: &choiceExpr{
				pos: position{line: 1620, col: 29, offset: 61699},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1620, col: 30, offset: 61700},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1620, col: 30, offset: 61700},
								val:        "====",
								ignoreCase: false,
								want:       "\"====\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1620, col: 37, offset: 61707},
								expr: &ruleRefExpr{
									pos:  position{line: 1620, col: 37, offset: 61707},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1620, col: 44, offset: 61714},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1620, col: 51, offset: 61721},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ExampleBlockRawContent",
			pos:  position{line: 1622, col: 1, offset: 61726},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1622, col: 27, offset: 61752},
				expr: &actionExpr{
					pos: position{line: 1623, col: 8, offset: 61761},
					run: (*parser).callonExampleBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1623, col: 8, offset: 61761},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1623, col: 8, offset: 61761},
								expr: &ruleRefExpr{
									pos:  position{line: 1623, col: 9, offset: 61762},
									name: "ExampleBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1624, col: 8, offset: 61795},
								label: "element",
								expr: &choiceExpr{
									pos: position{line: 1624, col: 17, offset: 61804},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1624, col: 17, offset: 61804},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 1625, col: 15, offset: 61828},
											name: "ImageBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1626, col: 15, offset: 61853},
											name: "ThematicBreak",
										},
										&ruleRefExpr{
											pos:  position{line: 1627, col: 15, offset: 61881},
											name: "OrderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1628, col: 15, offset: 61912},
											name: "UnorderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1629, col: 15, offset: 61945},
											name: "LabeledListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1630, col: 15, offset: 61976},
											name: "ContinuedListItemElement",
										},
										&ruleRefExpr{
											pos:  position{line: 1631, col: 15, offset: 62015},
											name: "FencedBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1632, col: 15, offset: 62042},
											name: "ListingBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1633, col: 15, offset: 62070},
											name: "VerseBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1634, col: 15, offset: 62095},
											name: "QuoteBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1635, col: 15, offset: 62120},
											name: "SidebarBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1636, col: 15, offset: 62147},
											name: "SingleLineComment",
										},
										&ruleRefExpr{
											pos:  position{line: 1637, col: 15, offset: 62179},
											name: "PassthroughBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1638, col: 15, offset: 62210},
											name: "Table",
										},
										&ruleRefExpr{
											pos:  position{line: 1639, col: 15, offset: 62230},
											name: "CommentBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1640, col: 15, offset: 62257},
											name: "LiteralBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1641, col: 15, offset: 62285},
											name: "RawParagraph",
										},
										&ruleRefExpr{
											pos:  position{line: 1642, col: 15, offset: 62312},
											name: "StandaloneAttributes",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1649, col: 1, offset: 62568},
			expr: &actionExpr{
				pos: position{line: 1649, col: 15, offset: 62582},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1649, col: 15, offset: 62582},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1649, col: 15, offset: 62582},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1649, col: 26, offset: 62593},
								expr: &ruleRefExpr{
									pos:  position{line: 1649, col: 27, offset: 62594},
									name: "ElementAttribute",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1650, col: 5, offset: 62618},
							run: (*parser).callonQuoteBlock6,
						},
						&ruleRefExpr{
							pos:  position{line: 1658, col: 5, offset: 62922},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1658, col: 30, offset: 62947},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1658, col: 39, offset: 62956},
								name: "QuoteBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1658, col: 61, offset: 62978},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1662, col: 1, offset: 63098},
			expr: &seqExpr{
				pos: position{line: 1662, col: 24, offset: 63121},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1662, col: 24, offset: 63121},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1662, col: 31, offset: 63128},
						expr: &ruleRefExpr{
							pos:  position{line: 1662, col: 31, offset: 63128},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1662, col: 38, offset: 63135},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockStartDelimiter",
			pos:  position{line: 1664, col: 1, offset: 63165},
			expr: &seqExpr{
				pos: position{line: 1664, col: 29, offset: 63193},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1664, col: 29, offset: 63193},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1664, col: 36, offset: 63200},
						expr: &ruleRefExpr{
							pos:  position{line: 1664, col: 36, offset: 63200},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1664, col: 43, offset: 63207},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockEndDelimiter",
			pos:  position{line: 1666, col: 1, offset: 63237},
			expr: &choiceExpr{
				pos: position{line: 1666, col: 27, offset: 63263},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1666, col: 28, offset: 63264},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1666, col: 28, offset: 63264},
								val:        "____",
								ignoreCase: false,
								want:       "\"____\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1666, col: 35, offset: 63271},
								expr: &ruleRefExpr{
									pos:  position{line: 1666, col: 35, offset: 63271},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1666, col: 42, offset: 63278},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1666, col: 49, offset: 63285},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuoteBlockRawContent",
			pos:  position{line: 1668, col: 1, offset: 63315},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1668, col: 25, offset: 63339},
				expr: &actionExpr{
					pos: position{line: 1669, col: 8, offset: 63348},
					run: (*parser).callonQuoteBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1669, col: 8, offset: 63348},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1669, col: 8, offset: 63348},
								expr: &ruleRefExpr{
									pos:  position{line: 1669, col: 9, offset: 63349},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1670, col: 8, offset: 63380},
								label: "element",
								expr: &choiceExpr{
									pos: position{line: 1670, col: 17, offset: 63389},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1670, col: 17, offset: 63389},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 1671, col: 15, offset: 63413},
											name: "ImageBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1672, col: 15, offset: 63438},
											name: "ThematicBreak",
										},
										&ruleRefExpr{
											pos:  position{line: 1673, col: 15, offset: 63466},
											name: "OrderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1674, col: 15, offset: 63497},
											name: "UnorderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1675, col: 15, offset: 63530},
											name: "LabeledListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1676, col: 15, offset: 63561},
											name: "ContinuedListItemElement",
										},
										&ruleRefExpr{
											pos:  position{line: 1677, col: 15, offset: 63600},
											name: "FencedBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1678, col: 15, offset: 63627},
											name: "ListingBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1679, col: 15, offset: 63655},
											name: "VerseBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1680, col: 15, offset: 63680},
											name: "ExampleBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1681, col: 15, offset: 63707},
											name: "SidebarBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1682, col: 15, offset: 63734},
											name: "SingleLineComment",
										},
										&ruleRefExpr{
											pos:  position{line: 1683, col: 15, offset: 63766},
											name: "PassthroughBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1684, col: 15, offset: 63797},
											name: "Table",
										},
										&ruleRefExpr{
											pos:  position{line: 1685, col: 15, offset: 63817},
											name: "CommentBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1686, col: 15, offset: 63844},
											name: "LiteralBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1687, col: 15, offset: 63872},
											name: "RawParagraph",
										},
										&ruleRefExpr{
											pos:  position{line: 1688, col: 15, offset: 63899},
											name: "StandaloneAttributes",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1695, col: 1, offset: 64157},
			expr: &actionExpr{
				pos: position{line: 1695, col: 17, offset: 64173},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1695, col: 17, offset: 64173},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1695, col: 17, offset: 64173},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1695, col: 28, offset: 64184},
								expr: &ruleRefExpr{
									pos:  position{line: 1695, col: 29, offset: 64185},
									name: "ElementAttribute",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1695, col: 48, offset: 64204},
							name: "SidebarBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1695, col: 75, offset: 64231},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1695, col: 84, offset: 64240},
								name: "SidebarBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1695, col: 108, offset: 64264},
							name: "SidebarBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1699, col: 1, offset: 64380},
			expr: &seqExpr{
				pos: position{line: 1699, col: 26, offset: 64405},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1699, col: 26, offset: 64405},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1699, col: 33, offset: 64412},
						expr: &ruleRefExpr{
							pos:  position{line: 1699, col: 33, offset: 64412},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1699, col: 40, offset: 64419},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockStartDelimiter",
			pos:  position{line: 1701, col: 1, offset: 64424},
			expr: &seqExpr{
				pos: position{line: 1701, col: 31, offset: 64454},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1701, col: 31, offset: 64454},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1701, col: 38, offset: 64461},
						expr: &ruleRefExpr{
							pos:  position{line: 1701, col: 38, offset: 64461},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1701, col: 45, offset: 64468},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockEndDelimiter",
			pos:  position{line: 1703, col: 1, offset: 64473},
			expr: &choiceExpr{
				pos: position{line: 1703, col: 29, offset: 64501},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1703, col: 30, offset: 64502},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1703, col: 30, offset: 64502},
								val:        "****",
								ignoreCase: false,
								want:       "\"****\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1703, col: 37, offset: 64509},
								expr: &ruleRefExpr{
									pos:  position{line: 1703, col: 37, offset: 64509},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1703, col: 44, offset: 64516},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1703, col: 51, offset: 64523},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SidebarBlockRawContent",
			pos:  position{line: 1705, col: 1, offset: 64528},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1705, col: 27, offset: 64554},
				expr: &actionExpr{
					pos: position{line: 1706, col: 8, offset: 64563},
					run: (*parser).callonSidebarBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1706, col: 8, offset: 64563},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1706, col: 8, offset: 64563},
								expr: &ruleRefExpr{
									pos:  position{line: 1706, col: 9, offset: 64564},
									name: "SidebarBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1707, col: 8, offset: 64597},
								label: "element",
								expr: &choiceExpr{
									pos: position{line: 1707, col: 17, offset: 64606},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1707, col: 17, offset: 64606},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 1708, col: 15, offset: 64630},
											name: "ImageBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1709, col: 15, offset: 64655},
											name: "ThematicBreak",
										},
										&ruleRefExpr{
											pos:  position{line: 1710, col: 15, offset: 64683},
											name: "OrderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1711, col: 15, offset: 64714},
											name: "UnorderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1712, col: 15, offset: 64747},
											name: "LabeledListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1713, col: 15, offset: 64778},
											name: "ContinuedListItemElement",
										},
										&ruleRefExpr{
											pos:  position{line: 1714, col: 15, offset: 64817},
											name: "FencedBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1715, col: 15, offset: 64844},
											name: "ListingBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1716, col: 15, offset: 64871},
											name: "VerseBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1717, col: 15, offset: 64897},
											name: "ExampleBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1718, col: 15, offset: 64924},
											name: "QuoteBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1719, col: 15, offset: 64949},
											name: "SingleLineComment",
										},
										&ruleRefExpr{
											pos:  position{line: 1720, col: 15, offset: 64981},
											name: "PassthroughBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1721, col: 15, offset: 65012},
											name: "Table",
										},
										&ruleRefExpr{
											pos:  position{line: 1722, col: 15, offset: 65032},
											name: "CommentBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1723, col: 15, offset: 65059},
											name: "LiteralBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1724, col: 15, offset: 65087},
											name: "RawParagraph",
										},
										&ruleRefExpr{
											pos:  position{line: 1725, col: 15, offset: 65114},
											name: "StandaloneAttributes",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1732, col: 1, offset: 65371},
			expr: &actionExpr{
				pos: position{line: 1732, col: 16, offset: 65386},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1732, col: 16, offset: 65386},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1732, col: 16, offset: 65386},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1732, col: 27, offset: 65397},
								expr: &ruleRefExpr{
									pos:  position{line: 1732, col: 28, offset: 65398},
									name: "ElementAttribute",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1732, col: 47, offset: 65417},
							name: "FencedBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1732, col: 73, offset: 65443},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1732, col: 82, offset: 65452},
								name: "FencedBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1732, col: 105, offset: 65475},
							name: "FencedBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1736, col: 1, offset: 65589},
			expr: &seqExpr{
				pos: position{line: 1736, col: 25, offset: 65613},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1736, col: 25, offset: 65613},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1736, col: 31, offset: 65619},
						expr: &ruleRefExpr{
							pos:  position{line: 1736, col: 31, offset: 65619},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1736, col: 38, offset: 65626},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockStartDelimiter",
			pos:  position{line: 1738, col: 1, offset: 65686},
			expr: &seqExpr{
				pos: position{line: 1738, col: 30, offset: 65715},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1738, col: 30, offset: 65715},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1738, col: 36, offset: 65721},
						expr: &ruleRefExpr{
							pos:  position{line: 1738, col: 36, offset: 65721},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1738, col: 43, offset: 65728},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockEndDelimiter",
			pos:  position{line: 1740, col: 1, offset: 65733},
			expr: &choiceExpr{
				pos: position{line: 1740, col: 28, offset: 65760},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1740, col: 29, offset: 65761},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1740, col: 29, offset: 65761},
								val:        "```",
								ignoreCase: false,
								want:       "\"```\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1740, col: 35, offset: 65767},
								expr: &ruleRefExpr{
									pos:  position{line: 1740, col: 35, offset: 65767},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1740, col: 42, offset: 65774},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1740, col: 49, offset: 65781},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "FencedBlockRawContent",
			pos:  position{line: 1742, col: 1, offset: 65786},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1742, col: 26, offset: 65811},
				expr: &actionExpr{
					pos: position{line: 1742, col: 27, offset: 65812},
					run: (*parser).callonFencedBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1742, col: 27, offset: 65812},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1742, col: 27, offset: 65812},
								expr: &ruleRefExpr{
									pos:  position{line: 1742, col: 28, offset: 65813},
									name: "FencedBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1742, col: 52, offset: 65837},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1742, col: 58, offset: 65843},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1749, col: 1, offset: 66077},
			expr: &actionExpr{
				pos: position{line: 1749, col: 17, offset: 66093},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1749, col: 17, offset: 66093},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1749, col: 17, offset: 66093},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1749, col: 28, offset: 66104},
								expr: &ruleRefExpr{
									pos:  position{line: 1749, col: 29, offset: 66105},
									name: "ElementAttribute",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1749, col: 48, offset: 66124},
							name: "ListingBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1749, col: 75, offset: 66151},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1749, col: 84, offset: 66160},
								name: "ListingBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1749, col: 108, offset: 66184},
							name: "ListingBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1753, col: 1, offset: 66300},
			expr: &seqExpr{
				pos: position{line: 1753, col: 26, offset: 66325},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1753, col: 26, offset: 66325},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1753, col: 33, offset: 66332},
						expr: &ruleRefExpr{
							pos:  position{line: 1753, col: 33, offset: 66332},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1753, col: 40, offset: 66339},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockStartDelimiter",
			pos:  position{line: 1755, col: 1, offset: 66344},
			expr: &seqExpr{
				pos: position{line: 1755, col: 31, offset: 66374},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1755, col: 31, offset: 66374},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1755, col: 38, offset: 66381},
						expr: &ruleRefExpr{
							pos:  position{line: 1755, col: 38, offset: 66381},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1755, col: 45, offset: 66388},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockEndDelimiter",
			pos:  position{line: 1757, col: 1, offset: 66393},
			expr: &choiceExpr{
				pos: position{line: 1757, col: 29, offset: 66421},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1757, col: 30, offset: 66422},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1757, col: 30, offset: 66422},
								val:        "----",
								ignoreCase: false,
								want:       "\"----\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1757, col: 37, offset: 66429},
								expr: &ruleRefExpr{
									pos:  position{line: 1757, col: 37, offset: 66429},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1757, col: 44, offset: 66436},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1757, col: 51, offset: 66443},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ListingBlockRawContent",
			pos:  position{line: 1759, col: 1, offset: 66448},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1759, col: 27, offset: 66474},
				expr: &actionExpr{
					pos: position{line: 1759, col: 28, offset: 66475},
					run: (*parser).callonListingBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1759, col: 28, offset: 66475},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1759, col: 28, offset: 66475},
								expr: &ruleRefExpr{
									pos:  position{line: 1759, col: 29, offset: 66476},
									name: "ListingBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1759, col: 54, offset: 66501},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1759, col: 60, offset: 66507},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlock",
			pos:  position{line: 1766, col: 1, offset: 66739},
			expr: &actionExpr{
				pos: position{line: 1766, col: 15, offset: 66753},
				run: (*parser).callonVerseBlock1,
				expr: &seqExpr{
					pos: position{line: 1766, col: 15, offset: 66753},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1766, col: 15, offset: 66753},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1766, col: 26, offset: 66764},
								expr: &ruleRefExpr{
									pos:  position{line: 1766, col: 27, offset: 66765},
									name: "ElementAttribute",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1767, col: 5, offset: 66789},
							run: (*parser).callonVerseBlock6,
						},
						&ruleRefExpr{
							pos:  position{line: 1771, col: 5, offset: 66946},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1771, col: 30, offset: 66971},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1771, col: 39, offset: 66980},
								name: "VerseBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1771, col: 61, offset: 67002},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockRawContent",
			pos:  position{line: 1775, col: 1, offset: 67122},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1775, col: 25, offset: 67146},
				expr: &actionExpr{
					pos: position{line: 1775, col: 26, offset: 67147},
					run: (*parser).callonVerseBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1775, col: 26, offset: 67147},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1775, col: 26, offset: 67147},
								expr: &ruleRefExpr{
									pos:  position{line: 1775, col: 27, offset: 67148},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1775, col: 50, offset: 67171},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1775, col: 56, offset: 67177},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlock",
			pos:  position{line: 1782, col: 1, offset: 67415},
			expr: &actionExpr{
				pos: position{line: 1782, col: 21, offset: 67435},
				run: (*parser).callonPassthroughBlock1,
				expr: &seqExpr{
					pos: position{line: 1782, col: 21, offset: 67435},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1782, col: 21, offset: 67435},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1782, col: 32, offset: 67446},
								expr: &ruleRefExpr{
									pos:  position{line: 1782, col: 33, offset: 67447},
									name: "ElementAttribute",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1782, col: 52, offset: 67466},
							name: "PassthroughBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1782, col: 83, offset: 67497},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1782, col: 92, offset: 67506},
								name: "PassthroughBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1782, col: 120, offset: 67534},
							name: "PassthroughBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockDelimiter",
			pos:  position{line: 1786, col: 1, offset: 67658},
			expr: &seqExpr{
				pos: position{line: 1786, col: 30, offset: 67687},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1786, col: 30, offset: 67687},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1786, col: 37, offset: 67694},
						expr: &ruleRefExpr{
							pos:  position{line: 1786, col: 37, offset: 67694},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1786, col: 44, offset: 67701},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockStartDelimiter",
			pos:  position{line: 1788, col: 1, offset: 67706},
			expr: &seqExpr{
				pos: position{line: 1788, col: 35, offset: 67740},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1788, col: 35, offset: 67740},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1788, col: 42, offset: 67747},
						expr: &ruleRefExpr{
							pos:  position{line: 1788, col: 42, offset: 67747},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1788, col: 49, offset: 67754},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockEndDelimiter",
			pos:  position{line: 1790, col: 1, offset: 67759},
			expr: &choiceExpr{
				pos: position{line: 1790, col: 33, offset: 67791},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1790, col: 34, offset: 67792},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1790, col: 34, offset: 67792},
								val:        "++++",
								ignoreCase: false,
								want:       "\"++++\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1790, col: 41, offset: 67799},
								expr: &ruleRefExpr{
									pos:  position{line: 1790, col: 41, offset: 67799},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1790, col: 48, offset: 67806},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1790, col: 55, offset: 67813},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PassthroughBlockRawContent",
			pos:  position{line: 1792, col: 1, offset: 67818},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1792, col: 31, offset: 67848},
				expr: &actionExpr{
					pos: position{line: 1792, col: 32, offset: 67849},
					run: (*parser).callonPassthroughBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1792, col: 32, offset: 67849},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1792, col: 32, offset: 67849},
								expr: &ruleRefExpr{
									pos:  position{line: 1792, col: 33, offset: 67850},
									name: "PassthroughBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1792, col: 62, offset: 67879},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1792, col: 68, offset: 67885},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1799, col: 1, offset: 68119},
			expr: &seqExpr{
				pos: position{line: 1799, col: 26, offset: 68144},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1799, col: 26, offset: 68144},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1799, col: 33, offset: 68151},
						expr: &ruleRefExpr{
							pos:  position{line: 1799, col: 33, offset: 68151},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1799, col: 40, offset: 68158},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 1801, col: 1, offset: 68163},
			expr: &seqExpr{
				pos: position{line: 1801, col: 31, offset: 68193},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1801, col: 31, offset: 68193},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1801, col: 38, offset: 68200},
						expr: &ruleRefExpr{
							pos:  position{line: 1801, col: 38, offset: 68200},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1801, col: 45, offset: 68207},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 1803, col: 1, offset: 68212},
			expr: &choiceExpr{
				pos: position{line: 1803, col: 29, offset: 68240},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1803, col: 30, offset: 68241},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1803, col: 30, offset: 68241},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1803, col: 37, offset: 68248},
								expr: &ruleRefExpr{
									pos:  position{line: 1803, col: 37, offset: 68248},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1803, col: 44, offset: 68255},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1803, col: 51, offset: 68262},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1805, col: 1, offset: 68267},
			expr: &actionExpr{
				pos: position{line: 1805, col: 17, offset: 68283},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1805, col: 17, offset: 68283},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1805, col: 17, offset: 68283},
							name: "CommentBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1805, col: 44, offset: 68310},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1805, col: 53, offset: 68319},
								name: "CommentBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1805, col: 78, offset: 68344},
							name: "CommentBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockRawContent",
			pos:  position{line: 1809, col: 1, offset: 68437},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1809, col: 27, offset: 68463},
				expr: &actionExpr{
					pos: position{line: 1809, col: 28, offset: 68464},
					run: (*parser).callonCommentBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1809, col: 28, offset: 68464},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1809, col: 28, offset: 68464},
								expr: &ruleRefExpr{
									pos:  position{line: 1809, col: 29, offset: 68465},
									name: "CommentBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1809, col: 54, offset: 68490},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1809, col: 60, offset: 68496},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1813, col: 1, offset: 68534},
			expr: &actionExpr{
				pos: position{line: 1813, col: 22, offset: 68555},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1813, col: 22, offset: 68555},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1813, col: 22, offset: 68555},
							expr: &ruleRefExpr{
								pos:  position{line: 1813, col: 23, offset: 68556},
								name: "CommentBlockDelimiter",
							},
						},
						&litMatcher{
							pos:        position{line: 1813, col: 45, offset: 68578},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 1813, col: 50, offset: 68583},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1813, col: 59, offset: 68592},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1813, col: 85, offset: 68618},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1817, col: 1, offset: 68683},
			expr: &actionExpr{
				pos: position{line: 1817, col: 29, offset: 68711},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1817, col: 29, offset: 68711},
					expr: &charClassMatcher{
						pos:        position{line: 1817, col: 29, offset: 68711},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "InlineMacros",
			pos:  position{line: 1825, col: 1, offset: 69000},
			expr: &choiceExpr{
				pos: position{line: 1825, col: 17, offset: 69016},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1825, col: 17, offset: 69016},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1826, col: 19, offset: 69045},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1827, col: 19, offset: 69076},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1828, col: 19, offset: 69100},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1829, col: 19, offset: 69137},
						name: "InlineFootnote",
					},
					&ruleRefExpr{
						pos:  position{line: 1830, col: 19, offset: 69171},
						name: "CrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1831, col: 19, offset: 69205},
						name: "InlineUserMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1832, col: 19, offset: 69240},
						name: "InlineElementID",
					},
					&ruleRefExpr{
						pos:  position{line: 1833, col: 19, offset: 69274},
						name: "ConcealedIndexTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 1834, col: 19, offset: 69311},
						name: "IndexTerm",
					},
				},
			},
		},
		{
			name: "ElementPlaceHolder",
			pos:  position{line: 1836, col: 1, offset: 69322},
			expr: &actionExpr{
				pos: position{line: 1836, col: 23, offset: 69344},
				run: (*parser).callonElementPlaceHolder1,
				expr: &seqExpr{
					pos: position{line: 1836, col: 23, offset: 69344},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1836, col: 23, offset: 69344},
							val:        "�",
							ignoreCase: false,
							want:       "\"�\"",
						},
						&labeledExpr{
							pos:   position{line: 1836, col: 32, offset: 69353},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1836, col: 37, offset: 69358},
								run: (*parser).callonElementPlaceHolder5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1836, col: 37, offset: 69358},
									expr: &charClassMatcher{
										pos:        position{line: 1836, col: 37, offset: 69358},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1836, col: 76, offset: 69397},
							val:        "�",
							ignoreCase: false,
							want:       "\"�\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthroughSubs",
			pos:  position{line: 1841, col: 1, offset: 69549},
			expr: &seqExpr{
				pos: position{line: 1842, col: 5, offset: 69579},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1842, col: 5, offset: 69579},
						expr: &choiceExpr{
							pos: position{line: 1842, col: 6, offset: 69580},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1842, col: 6, offset: 69580},
									name: "InlinePassthrough",
								},
								&ruleRefExpr{
									pos:  position{line: 1843, col: 11, offset: 69609},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1844, col: 11, offset: 69670},
									name: "ElementPlaceHolder",
								},
								&oneOrMoreExpr{
									pos: position{line: 1845, col: 11, offset: 69699},
									expr: &ruleRefExpr{
										pos:  position{line: 1845, col: 11, offset: 69699},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1846, col: 11, offset: 69717},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1847, col: 11, offset: 69735},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1847, col: 21, offset: 69745},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SpecialCharacterSubs",
			pos:  position{line: 1850, col: 1, offset: 69866},
			expr: &seqExpr{
				pos: position{line: 1851, col: 5, offset: 69895},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1851, col: 5, offset: 69895},
						expr: &choiceExpr{
							pos: position{line: 1851, col: 6, offset: 69896},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1851, col: 6, offset: 69896},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1852, col: 11, offset: 69957},
									name: "SpecialCharacter",
								},
								&ruleRefExpr{
									pos:  position{line: 1853, col: 11, offset: 69984},
									name: "ElementPlaceHolder",
								},
								&oneOrMoreExpr{
									pos: position{line: 1854, col: 11, offset: 70013},
									expr: &ruleRefExpr{
										pos:  position{line: 1854, col: 11, offset: 70013},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1855, col: 11, offset: 70030},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1856, col: 11, offset: 70048},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1856, col: 21, offset: 70058},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuotedTextSubs",
			pos:  position{line: 1859, col: 1, offset: 70112},
			expr: &seqExpr{
				pos: position{line: 1860, col: 5, offset: 70135},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1860, col: 5, offset: 70135},
						expr: &choiceExpr{
							pos: position{line: 1860, col: 6, offset: 70136},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1860, col: 6, offset: 70136},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1861, col: 11, offset: 70197},
									expr: &ruleRefExpr{
										pos:  position{line: 1861, col: 11, offset: 70197},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1862, col: 11, offset: 70215},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 1863, col: 11, offset: 70237},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 1864, col: 11, offset: 70260},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1865, col: 11, offset: 70289},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1866, col: 11, offset: 70307},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1866, col: 21, offset: 70317},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "AttributeSubs",
			pos:  position{line: 1869, col: 1, offset: 70375},
			expr: &seqExpr{
				pos: position{line: 1870, col: 5, offset: 70397},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1870, col: 5, offset: 70397},
						expr: &choiceExpr{
							pos: position{line: 1870, col: 6, offset: 70398},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1870, col: 6, offset: 70398},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1871, col: 11, offset: 70459},
									expr: &ruleRefExpr{
										pos:  position{line: 1871, col: 11, offset: 70459},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1872, col: 11, offset: 70477},
									name: "AttributeSubstitution",
								},
								&ruleRefExpr{
									pos:  position{line: 1873, col: 11, offset: 70509},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1874, col: 11, offset: 70538},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1875, col: 11, offset: 70556},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1875, col: 21, offset: 70566},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "InlineMacroSubs",
			pos:  position{line: 1878, col: 1, offset: 70620},
			expr: &seqExpr{
				pos: position{line: 1879, col: 5, offset: 70644},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1879, col: 5, offset: 70644},
						expr: &choiceExpr{
							pos: position{line: 1879, col: 6, offset: 70645},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1879, col: 6, offset: 70645},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1880, col: 11, offset: 70706},
									expr: &ruleRefExpr{
										pos:  position{line: 1880, col: 11, offset: 70706},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1881, col: 11, offset: 70724},
									name: "InlineMacros",
								},
								&ruleRefExpr{
									pos:  position{line: 1882, col: 11, offset: 70747},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1883, col: 11, offset: 70776},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1884, col: 11, offset: 70794},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1884, col: 21, offset: 70804},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "MarkdownQuoteMacroSubs",
			pos:  position{line: 1887, col: 1, offset: 70884},
			expr: &actionExpr{
				pos: position{line: 1887, col: 27, offset: 70910},
				run: (*parser).callonMarkdownQuoteMacroSubs1,
				expr: &seqExpr{
					pos: position{line: 1887, col: 27, offset: 70910},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1887, col: 27, offset: 70910},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1887, col: 33, offset: 70916},
								expr: &ruleRefExpr{
									pos:  position{line: 1887, col: 34, offset: 70917},
									name: "MarkdownQuoteLine",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1887, col: 54, offset: 70937},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteLine",
			pos:  position{line: 1891, col: 1, offset: 71004},
			expr: &actionExpr{
				pos: position{line: 1892, col: 5, offset: 71030},
				run: (*parser).callonMarkdownQuoteLine1,
				expr: &seqExpr{
					pos: position{line: 1892, col: 5, offset: 71030},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1892, col: 5, offset: 71030},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1892, col: 14, offset: 71039},
								expr: &choiceExpr{
									pos: position{line: 1892, col: 15, offset: 71040},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1892, col: 15, offset: 71040},
											name: "InlineWord",
										},
										&oneOrMoreExpr{
											pos: position{line: 1893, col: 11, offset: 71101},
											expr: &ruleRefExpr{
												pos:  position{line: 1893, col: 11, offset: 71101},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1894, col: 11, offset: 71119},
											name: "InlineMacros",
										},
										&ruleRefExpr{
											pos:  position{line: 1895, col: 11, offset: 71142},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1896, col: 11, offset: 71171},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1896, col: 21, offset: 71181},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteAttribution",
			pos:  position{line: 1900, col: 1, offset: 71252},
			expr: &actionExpr{
				pos: position{line: 1900, col: 29, offset: 71280},
				run: (*parser).callonMarkdownQuoteAttribution1,
				expr: &seqExpr{
					pos: position{line: 1900, col: 29, offset: 71280},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1900, col: 29, offset: 71280},
							val:        "-- ",
							ignoreCase: false,
							want:       "\"-- \"",
						},
						&labeledExpr{
							pos:   position{line: 1900, col: 35, offset: 71286},
							label: "author",
							expr: &actionExpr{
								pos: position{line: 1900, col: 43, offset: 71294},
								run: (*parser).callonMarkdownQuoteAttribution5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1900, col: 44, offset: 71295},
									expr: &charClassMatcher{
										pos:        position{line: 1900, col: 44, offset: 71295},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1902, col: 8, offset: 71345},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ReplacementSubs",
			pos:  position{line: 1907, col: 1, offset: 71432},
			expr: &seqExpr{
				pos: position{line: 1908, col: 5, offset: 71456},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1908, col: 5, offset: 71456},
						expr: &choiceExpr{
							pos: position{line: 1908, col: 6, offset: 71457},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1908, col: 6, offset: 71457},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1909, col: 11, offset: 71518},
									expr: &ruleRefExpr{
										pos:  position{line: 1909, col: 11, offset: 71518},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1910, col: 11, offset: 71536},
									name: "Symbol",
								},
								&ruleRefExpr{
									pos:  position{line: 1911, col: 11, offset: 71554},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1912, col: 11, offset: 71583},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1913, col: 11, offset: 71601},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1913, col: 21, offset: 71611},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PostReplacementSubs",
			pos:  position{line: 1917, col: 1, offset: 71759},
			expr: &seqExpr{
				pos: position{line: 1917, col: 24, offset: 71782},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1917, col: 24, offset: 71782},
						expr: &choiceExpr{
							pos: position{line: 1918, col: 5, offset: 71788},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1918, col: 5, offset: 71788},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1919, col: 7, offset: 71845},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1920, col: 7, offset: 71870},
									name: "LineBreak",
								},
								&oneOrMoreExpr{
									pos: position{line: 1921, col: 7, offset: 71913},
									expr: &ruleRefExpr{
										pos:  position{line: 1921, col: 7, offset: 71913},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1922, col: 7, offset: 71927},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1923, col: 7, offset: 71941},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1923, col: 17, offset: 71951},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CalloutSubs",
			pos:  position{line: 1926, col: 1, offset: 72008},
			expr: &seqExpr{
				pos: position{line: 1927, col: 5, offset: 72028},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1927, col: 5, offset: 72028},
						expr: &choiceExpr{
							pos: position{line: 1927, col: 6, offset: 72029},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1927, col: 6, offset: 72029},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1928, col: 11, offset: 72090},
									name: "ElementPlaceHolder",
								},
								&oneOrMoreExpr{
									pos: position{line: 1929, col: 11, offset: 72119},
									expr: &ruleRefExpr{
										pos:  position{line: 1929, col: 11, offset: 72119},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1930, col: 11, offset: 72136},
									name: "Callout",
								},
								&ruleRefExpr{
									pos:  position{line: 1931, col: 11, offset: 72154},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1932, col: 11, offset: 72172},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1932, col: 21, offset: 72182},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "NoneSubs",
			pos:  position{line: 1935, col: 1, offset: 72234},
			expr: &seqExpr{
				pos: position{line: 1935, col: 13, offset: 72246},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1935, col: 13, offset: 72246},
						expr: &choiceExpr{
							pos: position{line: 1936, col: 5, offset: 72252},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1936, col: 5, offset: 72252},
									name: "ElementPlaceHolder",
								},
								&actionExpr{
									pos: position{line: 1937, col: 8, offset: 72279},
									run: (*parser).callonNoneSubs5,
									expr: &seqExpr{
										pos: position{line: 1937, col: 8, offset: 72279},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1937, col: 8, offset: 72279},
												expr: &ruleRefExpr{
													pos:  position{line: 1937, col: 9, offset: 72280},
													name: "EOF",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 1937, col: 13, offset: 72284},
												expr: &charClassMatcher{
													pos:        position{line: 1937, col: 13, offset: 72284},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1937, col: 22, offset: 72293},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1939, col: 10, offset: 72398},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1944, col: 1, offset: 72591},
			expr: &actionExpr{
				pos: position{line: 1944, col: 10, offset: 72600},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1944, col: 10, offset: 72600},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1944, col: 10, offset: 72600},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1944, col: 21, offset: 72611},
								expr: &ruleRefExpr{
									pos:  position{line: 1944, col: 22, offset: 72612},
									name: "BlockAttribute",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1944, col: 39, offset: 72629},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1945, col: 5, offset: 72648},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1945, col: 12, offset: 72655},
								expr: &ruleRefExpr{
									pos:  position{line: 1945, col: 13, offset: 72656},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1946, col: 5, offset: 72678},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1946, col: 11, offset: 72684},
								expr: &ruleRefExpr{
									pos:  position{line: 1946, col: 12, offset: 72685},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1947, col: 6, offset: 72702},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1947, col: 6, offset: 72702},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1947, col: 23, offset: 72719},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1951, col: 1, offset: 72854},
			expr: &seqExpr{
				pos: position{line: 1951, col: 23, offset: 72876},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1951, col: 23, offset: 72876},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1951, col: 27, offset: 72880},
						expr: &ruleRefExpr{
							pos:  position{line: 1951, col: 27, offset: 72880},
							name: "Space",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1953, col: 1, offset: 72888},
			expr: &seqExpr{
				pos: position{line: 1953, col: 19, offset: 72906},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1953, col: 19, offset: 72906},
						val:        "|===",
						ignoreCase: false,
						want:       "\"|===\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1953, col: 26, offset: 72913},
						expr: &ruleRefExpr{
							pos:  position{line: 1953, col: 26, offset: 72913},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1953, col: 33, offset: 72920},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1956, col: 1, offset: 72988},
			expr: &actionExpr{
				pos: position{line: 1956, col: 20, offset: 73007},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1956, col: 20, offset: 73007},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1956, col: 20, offset: 73007},
							expr: &ruleRefExpr{
								pos:  position{line: 1956, col: 21, offset: 73008},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1956, col: 36, offset: 73023},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1956, col: 42, offset: 73029},
								expr: &ruleRefExpr{
									pos:  position{line: 1956, col: 43, offset: 73030},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1956, col: 55, offset: 73042},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1956, col: 59, offset: 73046},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1960, col: 1, offset: 73114},
			expr: &actionExpr{
				pos: position{line: 1960, col: 14, offset: 73127},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1960, col: 14, offset: 73127},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1960, col: 14, offset: 73127},
							expr: &ruleRefExpr{
								pos:  position{line: 1960, col: 15, offset: 73128},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1960, col: 30, offset: 73143},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1960, col: 36, offset: 73149},
								expr: &ruleRefExpr{
									pos:  position{line: 1960, col: 37, offset: 73150},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1960, col: 49, offset: 73162},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1960, col: 53, offset: 73166},
							expr: &ruleRefExpr{
								pos:  position{line: 1960, col: 53, offset: 73166},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1964, col: 1, offset: 73235},
			expr: &actionExpr{
				pos: position{line: 1964, col: 14, offset: 73248},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1964, col: 14, offset: 73248},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1964, col: 14, offset: 73248},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1964, col: 33, offset: 73267},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1964, col: 42, offset: 73276},
								expr: &seqExpr{
									pos: position{line: 1964, col: 43, offset: 73277},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1964, col: 43, offset: 73277},
											expr: &ruleRefExpr{
												pos:  position{line: 1964, col: 44, offset: 73278},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1964, col: 63, offset: 73297},
											expr: &ruleRefExpr{
												pos:  position{line: 1964, col: 64, offset: 73298},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1964, col: 68, offset: 73302},
											expr: &ruleRefExpr{
												pos:  position{line: 1964, col: 68, offset: 73302},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1964, col: 75, offset: 73309},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1964, col: 89, offset: 73323},
											expr: &ruleRefExpr{
												pos:  position{line: 1964, col: 89, offset: 73323},
												name: "Space",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 1971, col: 1, offset: 73649},
			expr: &choiceExpr{
				pos: position{line: 1971, col: 17, offset: 73665},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1971, col: 17, offset: 73665},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 1971, col: 49, offset: 73697},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 1971, col: 78, offset: 73726},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 1973, col: 1, offset: 73762},
			expr: &litMatcher{
				pos:        position{line: 1973, col: 26, offset: 73787},
				val:        "....",
				ignoreCase: false,
				want:       "\"....\"",
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 1976, col: 1, offset: 73859},
			expr: &actionExpr{
				pos: position{line: 1976, col: 31, offset: 73889},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 1976, col: 31, offset: 73889},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1976, col: 31, offset: 73889},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1976, col: 42, offset: 73900},
								expr: &ruleRefExpr{
									pos:  position{line: 1976, col: 43, offset: 73901},
									name: "ElementAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1976, col: 62, offset: 73920},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1976, col: 69, offset: 73927},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 1981, col: 1, offset: 74173},
			expr: &actionExpr{
				pos: position{line: 1982, col: 5, offset: 74213},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 1982, col: 5, offset: 74213},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1982, col: 5, offset: 74213},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 1982, col: 16, offset: 74224},
								name: "ParagraphWithHeadingSpacesLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1983, col: 5, offset: 74260},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1983, col: 16, offset: 74271},
								expr: &ruleRefExpr{
									pos:  position{line: 1983, col: 17, offset: 74272},
									name: "LiteralParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLine",
			pos:  position{line: 1987, col: 1, offset: 74381},
			expr: &actionExpr{
				pos: position{line: 1987, col: 35, offset: 74415},
				run: (*parser).callonParagraphWithHeadingSpacesLine1,
				expr: &seqExpr{
					pos: position{line: 1987, col: 35, offset: 74415},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1987, col: 35, offset: 74415},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1987, col: 41, offset: 74421},
								run: (*parser).callonParagraphWithHeadingSpacesLine4,
								expr: &seqExpr{
									pos: position{line: 1987, col: 41, offset: 74421},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 1987, col: 41, offset: 74421},
											expr: &ruleRefExpr{
												pos:  position{line: 1987, col: 41, offset: 74421},
												name: "Space",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1987, col: 48, offset: 74428},
											expr: &charClassMatcher{
												pos:        position{line: 1987, col: 48, offset: 74428},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1989, col: 8, offset: 74494},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 1994, col: 1, offset: 74634},
			expr: &actionExpr{
				pos: position{line: 1994, col: 39, offset: 74672},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1994, col: 39, offset: 74672},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1994, col: 39, offset: 74672},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1994, col: 50, offset: 74683},
								expr: &ruleRefExpr{
									pos:  position{line: 1994, col: 51, offset: 74684},
									name: "ElementAttribute",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1995, col: 9, offset: 74711},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1995, col: 31, offset: 74733},
							expr: &ruleRefExpr{
								pos:  position{line: 1995, col: 31, offset: 74733},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1995, col: 38, offset: 74740},
							name: "Newline",
						},
						&labeledExpr{
							pos:   position{line: 1995, col: 46, offset: 74748},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1995, col: 53, offset: 74755},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 1995, col: 95, offset: 74797},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1995, col: 96, offset: 74798},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1995, col: 96, offset: 74798},
											name: "LiteralBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1995, col: 118, offset: 74820},
											expr: &ruleRefExpr{
												pos:  position{line: 1995, col: 118, offset: 74820},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1995, col: 125, offset: 74827},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1995, col: 132, offset: 74834},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 2000, col: 1, offset: 75009},
			expr: &actionExpr{
				pos: position{line: 2000, col: 44, offset: 75052},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 2000, col: 44, offset: 75052},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 2000, col: 50, offset: 75058},
						expr: &ruleRefExpr{
							pos:  position{line: 2000, col: 51, offset: 75059},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 2004, col: 1, offset: 75143},
			expr: &actionExpr{
				pos: position{line: 2005, col: 5, offset: 75198},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 2005, col: 5, offset: 75198},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2005, col: 5, offset: 75198},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 2005, col: 11, offset: 75204},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &seqExpr{
									pos: position{line: 2005, col: 11, offset: 75204},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 2005, col: 11, offset: 75204},
											expr: &ruleRefExpr{
												pos:  position{line: 2005, col: 12, offset: 75205},
												name: "LiteralBlockDelimiter",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 2005, col: 34, offset: 75227},
											expr: &charClassMatcher{
												pos:        position{line: 2005, col: 34, offset: 75227},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2007, col: 8, offset: 75293},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 2012, col: 1, offset: 75419},
			expr: &actionExpr{
				pos: position{line: 2013, col: 5, offset: 75457},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 2013, col: 5, offset: 75457},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2013, col: 5, offset: 75457},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2013, col: 16, offset: 75468},
								expr: &ruleRefExpr{
									pos:  position{line: 2013, col: 17, offset: 75469},
									name: "ElementAttribute",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2014, col: 5, offset: 75492},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 2017, col: 5, offset: 75601},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 2017, col: 11, offset: 75607},
								expr: &ruleRefExpr{
									pos:  position{line: 2017, col: 12, offset: 75608},
									name: "LiteralParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 2021, col: 1, offset: 75761},
			expr: &actionExpr{
				pos: position{line: 2021, col: 16, offset: 75776},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 2021, col: 16, offset: 75776},
					val:        "literal",
					ignoreCase: false,
					want:       "\"literal\"",
				},
			},
		},
		{
			name: "LiteralParagraphLine",
			pos:  position{line: 2025, col: 1, offset: 75822},
			expr: &actionExpr{
				pos: position{line: 2025, col: 25, offset: 75846},
				run: (*parser).callonLiteralParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 2025, col: 25, offset: 75846},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2025, col: 25, offset: 75846},
							expr: &ruleRefExpr{
								pos:  position{line: 2025, col: 26, offset: 75847},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 2025, col: 36, offset: 75857},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 2025, col: 45, offset: 75866},
								run: (*parser).callonLiteralParagraphLine6,
								expr: &oneOrMoreExpr{
									pos: position{line: 2025, col: 45, offset: 75866},
									expr: &charClassMatcher{
										pos:        position{line: 2025, col: 45, offset: 75866},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2027, col: 4, offset: 75924},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 2034, col: 1, offset: 76101},
			expr: &actionExpr{
				pos: position{line: 2034, col: 14, offset: 76114},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 2034, col: 14, offset: 76114},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2034, col: 14, offset: 76114},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 2034, col: 19, offset: 76119},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 2034, col: 25, offset: 76125},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 2034, col: 43, offset: 76143},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 2038, col: 1, offset: 76208},
			expr: &actionExpr{
				pos: position{line: 2038, col: 21, offset: 76228},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 2038, col: 21, offset: 76228},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 2038, col: 30, offset: 76237},
						expr: &choiceExpr{
							pos: position{line: 2038, col: 31, offset: 76238},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2038, col: 31, offset: 76238},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 2038, col: 38, offset: 76245},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 2038, col: 53, offset: 76260},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 2038, col: 66, offset: 76273},
									name: "Space",
								},
								&ruleRefExpr{
									pos:  position{line: 2038, col: 74, offset: 76281},
									name: "SpecialCharacter",
								},
								&ruleRefExpr{
									pos:  position{line: 2038, col: 93, offset: 76300},
									name: "ElementPlaceHolder",
								},
								&actionExpr{
									pos: position{line: 2038, col: 114, offset: 76321},
									run: (*parser).callonIndexTermContent11,
									expr: &seqExpr{
										pos: position{line: 2038, col: 115, offset: 76322},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2038, col: 115, offset: 76322},
												expr: &litMatcher{
													pos:        position{line: 2038, col: 116, offset: 76323},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 2038, col: 121, offset: 76328,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 2044, col: 1, offset: 76434},
			expr: &actionExpr{
				pos: position{line: 2044, col: 23, offset: 76456},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 2044, col: 23, offset: 76456},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2044, col: 23, offset: 76456},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 2044, col: 29, offset: 76462},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 2044, col: 36, offset: 76469},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 2045, col: 5, offset: 76501},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 2045, col: 11, offset: 76507},
								expr: &actionExpr{
									pos: position{line: 2045, col: 12, offset: 76508},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 2045, col: 12, offset: 76508},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2045, col: 12, offset: 76508},
												expr: &ruleRefExpr{
													pos:  position{line: 2045, col: 12, offset: 76508},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 2045, col: 19, offset: 76515},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2045, col: 23, offset: 76519},
												expr: &ruleRefExpr{
													pos:  position{line: 2045, col: 23, offset: 76519},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 2045, col: 30, offset: 76526},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 2045, col: 39, offset: 76535},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2046, col: 5, offset: 76593},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 2046, col: 11, offset: 76599},
								expr: &actionExpr{
									pos: position{line: 2046, col: 12, offset: 76600},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 2046, col: 12, offset: 76600},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2046, col: 12, offset: 76600},
												expr: &ruleRefExpr{
													pos:  position{line: 2046, col: 12, offset: 76600},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 2046, col: 19, offset: 76607},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2046, col: 23, offset: 76611},
												expr: &ruleRefExpr{
													pos:  position{line: 2046, col: 23, offset: 76611},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 2046, col: 30, offset: 76618},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 2046, col: 39, offset: 76627},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 2047, col: 5, offset: 76685},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 2051, col: 1, offset: 76764},
			expr: &actionExpr{
				pos: position{line: 2051, col: 30, offset: 76793},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2051, col: 30, offset: 76793},
					expr: &choiceExpr{
						pos: position{line: 2051, col: 31, offset: 76794},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 2051, col: 31, offset: 76794},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 2051, col: 42, offset: 76805},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 2058, col: 1, offset: 76954},
			expr: &actionExpr{
				pos: position{line: 2058, col: 14, offset: 76967},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 2058, col: 14, offset: 76967},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2058, col: 14, offset: 76967},
							expr: &ruleRefExpr{
								pos:  position{line: 2058, col: 15, offset: 76968},
								name: "EOF",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2058, col: 19, offset: 76972},
							expr: &ruleRefExpr{
								pos:  position{line: 2058, col: 19, offset: 76972},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2058, col: 26, offset: 76979},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Symbol",
			pos:  position{line: 2066, col: 1, offset: 77124},
			expr: &choiceExpr{
				pos: position{line: 2066, col: 11, offset: 77134},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2066, col: 11, offset: 77134},
						name: "Apostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 2066, col: 24, offset: 77147},
						name: "Copyright",
					},
					&ruleRefExpr{
						pos:  position{line: 2066, col: 36, offset: 77159},
						name: "Trademark",
					},
					&ruleRefExpr{
						pos:  position{line: 2066, col: 48, offset: 77171},
						name: "Registered",
					},
					&ruleRefExpr{
						pos:  position{line: 2066, col: 61, offset: 77184},
						name: "Ellipsis",
					},
					&ruleRefExpr{
						pos:  position{line: 2066, col: 72, offset: 77195},
						name: "ImpliedApostrophe",
					},
				},
			},
		},
		{
			name: "Apostrophe",
			pos:  position{line: 2068, col: 1, offset: 77214},
			expr: &actionExpr{
				pos: position{line: 2068, col: 15, offset: 77228},
				run: (*parser).callonApostrophe1,
				expr: &litMatcher{
					pos:        position{line: 2068, col: 15, offset: 77228},
					val:        "`'",
					ignoreCase: false,
					want:       "\"`'\"",
				},
			},
		},
		{
			name: "Copyright",
			pos:  position{line: 2071, col: 1, offset: 77281},
			expr: &actionExpr{
				pos: position{line: 2071, col: 14, offset: 77294},
				run: (*parser).callonCopyright1,
				expr: &litMatcher{
					pos:        position{line: 2071, col: 14, offset: 77294},
					val:        "(C)",
					ignoreCase: false,
					want:       "\"(C)\"",
				},
			},
		},
		{
			name: "Trademark",
			pos:  position{line: 2074, col: 1, offset: 77348},
			expr: &actionExpr{
				pos: position{line: 2074, col: 14, offset: 77361},
				run: (*parser).callonTrademark1,
				expr: &litMatcher{
					pos:        position{line: 2074, col: 14, offset: 77361},
					val:        "(TM)",
					ignoreCase: false,
					want:       "\"(TM)\"",
				},
			},
		},
		{
			name: "Registered",
			pos:  position{line: 2077, col: 1, offset: 77416},
			expr: &actionExpr{
				pos: position{line: 2077, col: 15, offset: 77430},
				run: (*parser).callonRegistered1,
				expr: &litMatcher{
					pos:        position{line: 2077, col: 15, offset: 77430},
					val:        "(R)",
					ignoreCase: false,
					want:       "\"(R)\"",
				},
			},
		},
		{
			name: "Ellipsis",
			pos:  position{line: 2080, col: 1, offset: 77484},
			expr: &actionExpr{
				pos: position{line: 2080, col: 13, offset: 77496},
				run: (*parser).callonEllipsis1,
				expr: &litMatcher{
					pos:        position{line: 2080, col: 13, offset: 77496},
					val:        "...",
					ignoreCase: false,
					want:       "\"...\"",
				},
			},
		},
		{
			name: "ImpliedApostrophe",
			pos:  position{line: 2088, col: 1, offset: 77773},
			expr: &actionExpr{
				pos: position{line: 2088, col: 22, offset: 77794},
				run: (*parser).callonImpliedApostrophe1,
				expr: &seqExpr{
					pos: position{line: 2088, col: 22, offset: 77794},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2088, col: 22, offset: 77794},
							name: "Alphanum",
						},
						&litMatcher{
							pos:        position{line: 2088, col: 31, offset: 77803},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&andExpr{
							pos: position{line: 2088, col: 35, offset: 77807},
							expr: &charClassMatcher{
								pos:        position{line: 2088, col: 36, offset: 77808},
								val:        "[\\pL]",
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "SpecialCharacter",
			pos:  position{line: 2097, col: 1, offset: 78170},
			expr: &choiceExpr{
				pos: position{line: 2097, col: 21, offset: 78190},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2097, col: 21, offset: 78190},
						run: (*parser).callonSpecialCharacter2,
						expr: &ruleRefExpr{
							pos:  position{line: 2097, col: 21, offset: 78190},
							name: "InternalCrossReference",
						},
					},
					&actionExpr{
						pos: position{line: 2100, col: 9, offset: 78353},
						run: (*parser).callonSpecialCharacter4,
						expr: &choiceExpr{
							pos: position{line: 2100, col: 10, offset: 78354},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 2100, col: 10, offset: 78354},
									val:        "<",
									ignoreCase: false,
									want:       "\"<\"",
								},
								&litMatcher{
									pos:        position{line: 2100, col: 16, offset: 78360},
									val:        ">",
									ignoreCase: false,
									want:       "\">\"",
								},
								&litMatcher{
									pos:        position{line: 2100, col: 22, offset: 78366},
									val:        "&",
									ignoreCase: false,
									want:       "\"&\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 2107, col: 1, offset: 78544},
			expr: &charClassMatcher{
				pos:        position{line: 2107, col: 13, offset: 78556},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 2109, col: 1, offset: 78566},
			expr: &choiceExpr{
				pos: position{line: 2109, col: 16, offset: 78581},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2109, col: 16, offset: 78581},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 2109, col: 22, offset: 78587},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 2109, col: 28, offset: 78593},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 2109, col: 34, offset: 78599},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 2109, col: 40, offset: 78605},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 2109, col: 46, offset: 78611},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 2111, col: 1, offset: 78617},
			expr: &actionExpr{
				pos: position{line: 2111, col: 14, offset: 78630},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2111, col: 14, offset: 78630},
					expr: &charClassMatcher{
						pos:        position{line: 2111, col: 14, offset: 78630},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 2115, col: 1, offset: 78676},
			expr: &choiceExpr{
				pos: position{line: 2119, col: 5, offset: 79003},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2119, col: 5, offset: 79003},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 2119, col: 5, offset: 79003},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2119, col: 5, offset: 79003},
									expr: &charClassMatcher{
										pos:        position{line: 2119, col: 5, offset: 79003},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2119, col: 15, offset: 79013},
									expr: &choiceExpr{
										pos: position{line: 2119, col: 17, offset: 79015},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2119, col: 17, offset: 79015},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2119, col: 30, offset: 79028},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2121, col: 9, offset: 79098},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 2121, col: 9, offset: 79098},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2121, col: 9, offset: 79098},
									expr: &charClassMatcher{
										pos:        position{line: 2121, col: 9, offset: 79098},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 2121, col: 19, offset: 79108},
									expr: &seqExpr{
										pos: position{line: 2121, col: 20, offset: 79109},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2121, col: 20, offset: 79109},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 2121, col: 27, offset: 79116},
												expr: &charClassMatcher{
													pos:        position{line: 2121, col: 27, offset: 79116},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 2125, col: 1, offset: 79192},
			expr: &choiceExpr{
				pos: position{line: 2126, col: 5, offset: 79273},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2126, col: 5, offset: 79273},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 2126, col: 5, offset: 79273},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2126, col: 5, offset: 79273},
									expr: &charClassMatcher{
										pos:        position{line: 2126, col: 5, offset: 79273},
										val:        "[\\pL0-9,?!;]",
										chars:      []rune{',', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2126, col: 19, offset: 79287},
									expr: &choiceExpr{
										pos: position{line: 2126, col: 21, offset: 79289},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2126, col: 21, offset: 79289},
												val:        "[\\r\\n ]",
												chars:      []rune{'\r', '\n', ' '},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2126, col: 31, offset: 79299},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2128, col: 9, offset: 79368},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 2131, col: 1, offset: 79468},
			expr: &actionExpr{
				pos: position{line: 2131, col: 12, offset: 79479},
				run: (*parser).callonAnyChar1,
				expr: &charClassMatcher{
					pos:        position{line: 2131, col: 12, offset: 79479},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 2135, col: 1, offset: 79544},
			expr: &actionExpr{
				pos: position{line: 2135, col: 17, offset: 79560},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2135, col: 17, offset: 79560},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2135, col: 22, offset: 79565},
						expr: &choiceExpr{
							pos: position{line: 2135, col: 23, offset: 79566},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2135, col: 23, offset: 79566},
									name: "Filename",
								},
								&ruleRefExpr{
									pos:  position{line: 2135, col: 34, offset: 79577},
									name: "ElementPlaceHolder",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 2139, col: 1, offset: 79658},
			expr: &actionExpr{
				pos: position{line: 2139, col: 13, offset: 79670},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 2139, col: 13, offset: 79670},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2139, col: 13, offset: 79670},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 2139, col: 20, offset: 79677},
								expr: &ruleRefExpr{
									pos:  position{line: 2139, col: 21, offset: 79678},
									name: "Scheme",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2139, col: 30, offset: 79687},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2139, col: 35, offset: 79692},
								expr: &choiceExpr{
									pos: position{line: 2139, col: 36, offset: 79693},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2139, col: 36, offset: 79693},
											name: "Filename",
										},
										&ruleRefExpr{
											pos:  position{line: 2139, col: 47, offset: 79704},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 2143, col: 1, offset: 79789},
			expr: &actionExpr{
				pos: position{line: 2143, col: 23, offset: 79811},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 2143, col: 23, offset: 79811},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2143, col: 23, offset: 79811},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2143, col: 31, offset: 79819},
								name: "Scheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 2143, col: 39, offset: 79827},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2143, col: 44, offset: 79832},
								expr: &choiceExpr{
									pos: position{line: 2143, col: 45, offset: 79833},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2143, col: 45, offset: 79833},
											name: "Filename",
										},
										&ruleRefExpr{
											pos:  position{line: 2143, col: 56, offset: 79844},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Filename",
			pos:  position{line: 2147, col: 1, offset: 79929},
			expr: &actionExpr{
				pos: position{line: 2147, col: 13, offset: 79941},
				run: (*parser).callonFilename1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2147, col: 13, offset: 79941},
					expr: &charClassMatcher{
						pos:        position{line: 2147, col: 14, offset: 79942},
						val:        "[^\\r\\n[\\]\\uFFFD ]",
						chars:      []rune{'\r', '\n', '[', ']', '�', ' '},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Scheme",
			pos:  position{line: 2151, col: 1, offset: 80064},
			expr: &choiceExpr{
				pos: position{line: 2151, col: 11, offset: 80074},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2151, col: 11, offset: 80074},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 2151, col: 23, offset: 80086},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 2151, col: 36, offset: 80099},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 2151, col: 47, offset: 80110},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 2151, col: 58, offset: 80121},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "Id",
			pos:  position{line: 2153, col: 1, offset: 80132},
			expr: &actionExpr{
				pos: position{line: 2153, col: 7, offset: 80138},
				run: (*parser).callonId1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2153, col: 7, offset: 80138},
					expr: &charClassMatcher{
						pos:        position{line: 2153, col: 7, offset: 80138},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Digit",
			pos:  position{line: 2157, col: 1, offset: 80263},
			expr: &actionExpr{
				pos: position{line: 2157, col: 10, offset: 80272},
				run: (*parser).callonDigit1,
				expr: &charClassMatcher{
					pos:        position{line: 2157, col: 10, offset: 80272},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "Number",
			pos:  position{line: 2161, col: 1, offset: 80314},
			expr: &actionExpr{
				pos: position{line: 2161, col: 11, offset: 80324},
				run: (*parser).callonNumber1,
				expr: &seqExpr{
					pos: position{line: 2161, col: 11, offset: 80324},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 2161, col: 11, offset: 80324},
							expr: &litMatcher{
								pos:        position{line: 2161, col: 11, offset: 80324},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 2161, col: 16, offset: 80329},
							expr: &ruleRefExpr{
								pos:  position{line: 2161, col: 16, offset: 80329},
								name: "Digit",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 2165, col: 1, offset: 80381},
			expr: &choiceExpr{
				pos: position{line: 2165, col: 10, offset: 80390},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2165, col: 10, offset: 80390},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 2165, col: 16, offset: 80396},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 2165, col: 16, offset: 80396},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 2169, col: 1, offset: 80437},
			expr: &choiceExpr{
				pos: position{line: 2169, col: 12, offset: 80448},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2169, col: 12, offset: 80448},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&litMatcher{
						pos:        position{line: 2169, col: 21, offset: 80457},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
					&litMatcher{
						pos:        position{line: 2169, col: 28, offset: 80464},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 2171, col: 1, offset: 80470},
			expr: &notExpr{
				pos: position{line: 2171, col: 8, offset: 80477},
				expr: &anyMatcher{
					line: 2171, col: 9, offset: 80478,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 2173, col: 1, offset: 80481},
			expr: &choiceExpr{
				pos: position{line: 2173, col: 8, offset: 80488},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2173, col: 8, offset: 80488},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 2173, col: 18, offset: 80498},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onRawSource1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonRawSource1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSource1(stack["lines"])
}

func (c *current) onRawSection4() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonRawSection4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSection4()
}

func (c *current) onRawSection7(level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonRawSection7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSection7(stack["level"])
}

func (c *current) onRawSection1(level, title interface{}) (interface{}, error) {
	return types.NewRawSection(level.(int), title.(string))
}

func (p *parser) callonRawSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSection1(stack["level"], stack["title"])
}

func (c *current) onRawSectionTitle1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonRawSectionTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSectionTitle1()
}

func (c *current) onRawLine6() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonRawLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLine6()
}

func (c *current) onRawLine1(content interface{}) (interface{}, error) {
	// line MAY have content
	return types.NewRawLine(content.(string))

}

func (p *parser) callonRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLine1(stack["content"])
}

func (c *current) onRawDocument1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewRawDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonRawDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onRawBlocks1(header, blocks interface{}) (interface{}, error) {
	if header != nil && blocks != nil {
		return append([]interface{}{header}, blocks.([]interface{})...), nil
	} else if blocks != nil {
		return blocks.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonRawBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawBlocks1(stack["header"], stack["blocks"])
}

func (c *current) onDocumentRawBlock1(block interface{}) (interface{}, error) {
	log.Debugf("new raw block of kind '%T'", block)
	return block, nil
}

func (p *parser) callonDocumentRawBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentHeader(title.([]interface{}), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onAttributeDeclaration9(value interface{}) (interface{}, error) {

	return value, nil

}

func (p *parser) callonAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration9(stack["value"])
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	return types.NewAttributeDeclaration(name.(string), value)
}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeName1()
}

func (c *current) onAttributeDeclarationValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1()
}

func (c *current) onAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset11(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset11(stack["name"])
}

func (c *current) onAttrSub1(name interface{}) (interface{}, error) {
	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttrSub1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrSub1(stack["name"])
}

func (c *current) onCounterSub11(name interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, nil)
}

func (p *parser) callonCounterSub11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSub11(stack["name"])
}

func (c *current) onCounterSub21(name interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonCounterSub21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSub21(stack["name"])
}

func (c *current) onCounterSubAlpha1(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonCounterSubAlpha1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubAlpha1(stack["name"], stack["start"])
}

func (c *current) onCounterSubAlpha21(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, start)
}

func (p *parser) callonCounterSubAlpha21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubAlpha21(stack["name"], stack["start"])
}

func (c *current) onCounterSubStart8() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCounterSubStart8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart8()
}

func (c *current) onCounterSubStart1(name, num interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, num.(int))
}

func (p *parser) callonCounterSubStart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart1(stack["name"], stack["num"])
}

func (c *current) onCounterSubStart28() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCounterSubStart28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart28()
}

func (c *current) onCounterSubStart21(name, num interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, num.(int))
}

func (p *parser) callonCounterSubStart21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart21(stack["name"], stack["num"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {
	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID1(id interface{}) (interface{}, error) {
	return types.NewElementID(id)
}

func (p *parser) callonElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID1(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {
	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementTitleContent1() (interface{}, error) {
	// "<" and ">" characters are not allowed as they are used as cross-reference markers
	return string(c.text), nil
}

func (p *parser) callonElementTitleContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitleContent1()
}

func (c *current) onElementShortHandAttributes1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{})...)
}

func (p *parser) callonElementShortHandAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementShortHandAttributes1(stack["attributes"])
}

func (c *current) onBlockAttributeList1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{})...)
}

func (p *parser) callonBlockAttributeList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributeList1(stack["attributes"])
}

func (c *current) onBlockAttrStyle1(style interface{}) (interface{}, error) {
	return types.NewElementStyle(style)
}

func (p *parser) callonBlockAttrStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrStyle1(stack["style"])
}

func (c *current) onBlockAttrPositional21(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewNamedAttribute(types.AttrPositional2, value)
	}
	return nil, nil
}

func (p *parser) callonBlockAttrPositional21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrPositional21(stack["value"])
}

func (c *current) onBlockAttrPositional31(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewNamedAttribute(types.AttrPositional3, value)
	}
	return nil, nil
}

func (p *parser) callonBlockAttrPositional31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrPositional31(stack["value"])
}

func (c *current) onLiteralBlockAttribute1() (interface{}, error) {
	return types.NewLiteralBlockAttribute()
}

func (p *parser) callonLiteralBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlockAttribute1()
}

func (c *current) onPassthroughBlockAttribute1() (interface{}, error) {
	return types.NewPassthroughBlockAttribute()
}

func (p *parser) callonPassthroughBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockAttribute1()
}

func (c *current) onExampleBlockAttribute1() (interface{}, error) {
	return types.NewExampleBlockAttribute()
}

func (p *parser) callonExampleBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockAttribute1()
}

func (c *current) onListingBlockAttribute1() (interface{}, error) {
	return types.NewListingBlockAttribute()
}

func (p *parser) callonListingBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {
	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes6() (interface{}, error) {
	return "nowrap", nil

}

func (p *parser) callonSourceAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes6()
}

func (c *current) onSourceAttributes10(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes10(stack["attr"])
}

func (c *current) onSourceAttributes18(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes18(stack["attr"])
}

func (c *current) onSourceAttributes1(option, language, others interface{}) (interface{}, error) {
	return types.NewSourceAttributes(language, option, others.([]interface{})...)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["option"], stack["language"], stack["others"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{})...)
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onNamedAttributes1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{})...)
}

func (p *parser) callonNamedAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttributes1(stack["attributes"])
}

func (c *current) onNamedAttribute1(key, value interface{}) (interface{}, error) {
	return types.NewNamedAttribute(key.(string), value.(string))
}

func (p *parser) callonNamedAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute1(stack["key"], stack["value"])
}

func (c *current) onNamedAttributeKey1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonNamedAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttributeKey1()
}

func (c *current) onSingleQuotedAttributeValue1(val interface{}) (interface{}, error) {

	return val, nil
}

func (p *parser) callonSingleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue1(stack["val"])
}

func (c *current) onSingleQuotedAttributeValueContent5() (interface{}, error) {
	return `'`, nil
}

func (p *parser) callonSingleQuotedAttributeValueContent5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent5()
}

func (c *current) onSingleQuotedAttributeValueContent7() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedAttributeValueContent7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent7()
}

func (c *current) onSingleQuotedAttributeValueContent10() (interface{}, error) {
	return `\`, nil
}

func (p *parser) callonSingleQuotedAttributeValueContent10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent10()
}

func (c *current) onSingleQuotedAttributeValueContent1(val interface{}) (interface{}, error) {

	return types.NewString(val.([]interface{}))
}

func (p *parser) callonSingleQuotedAttributeValueContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent1(stack["val"])
}

func (c *current) onAttrValueSingleQuoted7() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttrValueSingleQuoted7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueSingleQuoted7()
}

func (c *current) onAttrValueSingleQuoted1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonAttrValueSingleQuoted1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueSingleQuoted1(stack["elements"])
}

func (c *current) onDoubleQuotedAttributeValue1(val interface{}) (interface{}, error) {

	return val, nil
}

func (p *parser) callonDoubleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue1(stack["val"])
}

func (c *current) onDoubleQuotedAttributeValueContent5() (interface{}, error) {
	return `"`, nil
}

func (p *parser) callonDoubleQuotedAttributeValueContent5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent5()
}

func (c *current) onDoubleQuotedAttributeValueContent7() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedAttributeValueContent7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent7()
}

func (c *current) onDoubleQuotedAttributeValueContent10() (interface{}, error) {
	return `\`, nil
}

func (p *parser) callonDoubleQuotedAttributeValueContent10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent10()
}

func (c *current) onDoubleQuotedAttributeValueContent1(val interface{}) (interface{}, error) {

	return types.NewString(val.([]interface{}))
}

func (p *parser) callonDoubleQuotedAttributeValueContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent1(stack["val"])
}

func (c *current) onAttrValueDoubleQuoted7() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttrValueDoubleQuoted7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueDoubleQuoted7()
}

func (c *current) onAttrValueDoubleQuoted1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonAttrValueDoubleQuoted1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueDoubleQuoted1(stack["elements"])
}

func (c *current) onUnquotedAttributeValue1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonUnquotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue1()
}

func (c *current) onStandaloneAttributeKey1(key interface{}) (interface{}, error) {
	// value is not defined
	return types.NewNamedAttribute(key.(string), nil)
}

func (p *parser) callonStandaloneAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributeKey1(stack["key"])
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onQuotedTextAttributes1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{})...)
}

func (p *parser) callonQuotedTextAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttributes1(stack["attributes"])
}

func (c *current) onQuotedTextAttrRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role)
}

func (p *parser) callonQuotedTextAttrRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrRole1(stack["role"])
}

func (c *current) onStandaloneAttributes1(attributes interface{}) (interface{}, error) {
	// standalone attributes, i.e., with nothing afterwards
	return types.NewAttributeGroup(attributes.([]interface{})...)
}

func (p *parser) callonStandaloneAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributes1(stack["attributes"])
}

func (c *current) onShortHandAttrOption1(option interface{}) (interface{}, error) {
	return types.NewElementOption(option)
}

func (p *parser) callonShortHandAttrOption1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrOption1(stack["option"])
}

func (c *current) onShortHandAttrID1(id interface{}) (interface{}, error) {
	return types.NewElementID(id)
}

func (p *parser) callonShortHandAttrID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrID1(stack["id"])
}

func (c *current) onShortHandAttrRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role)
}

func (p *parser) callonShortHandAttrRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrRole1(stack["role"])
}

func (c *current) onPositionalValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonPositionalValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalValue1(stack["value"])
}

func (c *current) onShortHandValuePlain4() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandValuePlain4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandValuePlain4()
}

func (c *current) onShortHandValuePlain12() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandValuePlain12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandValuePlain12()
}

func (c *current) onShortHandValuePlain1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonShortHandValuePlain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandValuePlain1(stack["first"], stack["others"])
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.([]interface{}), id.([]interface{}), attributes.([]interface{}))
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attributes interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), attributes.(types.Attributes), string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attributes"])
}

func (c *current) onInlineUserMacro1(name, value, attributes interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), attributes.(types.Attributes), string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attributes"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{})...)
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attributes"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{})...)
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attributes"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedLineRanges10(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleQuotedLineRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges10(stack["other"])
}

func (c *current) onMultipleQuotedLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onMultiLineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onSingleLineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onTagRangesAttribute1(tags interface{}) (interface{}, error) {
	//TODO: check if 'tags'/'tag' is allowed for both single and multiple values
	return types.NewTagRangesAttribute(tags.([]interface{}))
}

func (p *parser) callonTagRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttribute1(stack["tags"])
}

func (c *current) onTagRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonTagRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {
	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(element interface{}) (interface{}, error) {
	return types.NewContinuedListItemElement(element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["element"])
}

func (c *current) onContinuedListItemContent1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonContinuedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent1(stack["content"])
}

func (c *current) onOrderedListItem1(attributes, prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attributes.([]interface{}))
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attributes"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attributes, prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attributes.([]interface{}))
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attributes"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {
	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attributes, term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListItem(len(separator.(string))-1, term.([]interface{}), description, attributes.([]interface{}))
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attributes"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onVerbatimLabeledListItemTerm3() (interface{}, error) {
	return types.NewStringElement(strings.TrimSpace(string(c.text)))
}

func (p *parser) callonVerbatimLabeledListItemTerm3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm3()
}

func (c *current) onVerbatimLabeledListItemTerm1(content interface{}) (interface{}, error) {
	return types.NewInlineElements(content)
}

func (p *parser) callonVerbatimLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm1(stack["content"])
}

func (c *current) onLabeledListItemTerm1(elements interface{}) (interface{}, error) {
	// rule as an extra entrypoint
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1(stack["elements"])
}

func (c *current) onLabeledListItemTermElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonLabeledListItemTermElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement1(stack["element"])
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil
}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil
}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil
}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil
}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onRawParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes.([]interface{}))

}

func (p *parser) callonRawParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onRawParagraph15(attributes, content interface{}) (interface{}, error) {
	return types.NewMarkdownQuoteBlock(content.([]interface{}), attributes.([]interface{}))

}

func (p *parser) callonRawParagraph15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph15(stack["attributes"], stack["content"])
}

func (c *current) onRawParagraph28(attributes interface{}) (bool, error) {
	// verify that one of the attributes is `kind:passthrough`
	return types.HasAttributeWithValue(attributes, types.AttrBlockKind, types.Passthrough), nil

}

func (p *parser) callonRawParagraph28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph28(stack["attributes"])
}

func (c *current) onRawParagraph23(attributes, content interface{}) (interface{}, error) {

	return types.NewPassthroughBlock(content.([]interface{}), attributes.([]interface{}))

}

func (p *parser) callonRawParagraph23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph23(stack["attributes"], stack["content"])
}

func (c *current) onRawParagraph32(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes.([]interface{}))

}

func (p *parser) callonRawParagraph32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph32(stack["attributes"], stack["lines"])
}

func (c *current) onMarkdownQuoteBlockRawContent2(content interface{}) (interface{}, error) {

	return content, nil
}

func (p *parser) callonMarkdownQuoteBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockRawContent2(stack["content"])
}

func (c *current) onRawParagraphLine8(content interface{}) (bool, error) {
	// exclude line if it is a blankline
	if strings.Trim(content.(string), " \t") == "" {
		return false, nil
	}
	return true, nil

}

func (p *parser) callonRawParagraphLine8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLine8(stack["content"])
}

func (c *current) onRawParagraphLine1(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonRawParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLine1(stack["content"])
}

func (c *current) onRawParagraphLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonRawParagraphLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLineContent1()
}

func (c *current) onSimpleRawParagraph6(attributes interface{}) (bool, error) {
	return !types.HasAttributeWithValue(attributes, types.AttrBlockKind, types.Literal), nil

}

func (p *parser) callonSimpleRawParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleRawParagraph6(stack["attributes"])
}

func (c *current) onSimpleRawParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes.([]interface{}))
}

func (p *parser) callonSimpleRawParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleRawParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphRawLine4(elements interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFirstParagraphRawLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphRawLine4(stack["elements"])
}

func (c *current) onFirstParagraphRawLine1(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))
}

func (p *parser) callonFirstParagraphRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphRawLine1(stack["content"])
}

func (c *current) onContinuedRawParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes.([]interface{}))

}

func (p *parser) callonContinuedRawParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onContinuedRawParagraph12(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes.([]interface{}))
}

func (p *parser) callonContinuedRawParagraph12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraph12(stack["attributes"], stack["lines"])
}

func (c *current) onContinuedRawParagraphLines7(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonContinuedRawParagraphLines7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraphLines7(stack["line"])
}

func (c *current) onContinuedRawParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {
	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonContinuedRawParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onInlineElements7(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["comment"])
}

func (c *current) onInlineElements10(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements10(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onConstrainedQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonConstrainedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstrainedQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(attributes, elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.Bold, attributes, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["attributes"], stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(attributes, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, attributes, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteBoldText17(attributes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, attributes, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText17(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(attributes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, attributes, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["attributes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(attributes, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, attributes, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteItalicText14(attributes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, attributes, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText14(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(attributes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, attributes, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["attributes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextElement14() (interface{}, error) {
	// must be before SingleQuoteMonospaceText
	// do not convert to apostrophe (yet)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement14()
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(attributes, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, attributes, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText14(attributes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, attributes, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText14(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextElement22() (interface{}, error) {
	// do not convert to apostrophe (yet)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement22()
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.SingleQuote, elements.([]interface{}))
}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringFallbackCharacter3()
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.DoubleQuote, elements.([]interface{}))
}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringFallbackCharacter1()
}

func (c *current) onDoubleQuoteMarkedText1(attributes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Marked, attributes, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["attributes"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMarkedText2(attributes, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '##' to emphazise a portion of a word)
	return types.NewQuotedText(types.Marked, attributes, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText2(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedText14(attributes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation.
	return types.NewQuotedText(types.Marked, attributes, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteMarkedText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText14(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))
}

func (p *parser) callonEscapedMarkedText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(attributes, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, attributes, element)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["attributes"], stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(attributes, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, attributes, element)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["attributes"], stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), label.(string))
}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), nil)
}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onLinkAttributes1(firstAttr, otherAttrs interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(append(firstAttr.([]interface{}), otherAttrs.([]interface{})...))
}

func (p *parser) callonLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkAttributes1(stack["firstAttr"], stack["otherAttrs"])
}

func (c *current) onFirstLinkAttributeElement4(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement4(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement20(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement20(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonFirstLinkAttributeElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement1(stack["element"])
}

func (c *current) onAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeChar1()
}

func (c *current) onQuotedAttributeChar1() (interface{}, error) {
	// does not exclude comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonQuotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedAttributeChar1()
}

func (c *current) onUnquotedAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonUnquotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeChar1()
}

func (c *current) onImageBlock1(attributes, path, inlineAttributes interface{}) (interface{}, error) {
	// 'imagesdir' attribute is added after applying the attribute substitutions on the image location
	return types.NewImageBlock(path.(types.Location), inlineAttributes.(types.Attributes), attributes.([]interface{}))
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttributes"])
}

func (c *current) onImageBlockAttributes2(attribute interface{}) (interface{}, error) {
	return attribute, nil
}

func (p *parser) callonImageBlockAttributes2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlockAttributes2(stack["attribute"])
}

func (c *current) onImageAttrList1(alt, shortHands, width, height, others interface{}) (interface{}, error) {
	return types.NewAttributeGroup(alt, width, height, others)
}

func (p *parser) callonImageAttrList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttrList1(stack["alt"], stack["shortHands"], stack["width"], stack["height"], stack["others"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(types.Location), inlineAttributes.(types.Attributes), c.globalStore["imagesdir"])
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImageAttributes1(alt, width, height, others interface{}) (interface{}, error) {
	return types.NewAttributeGroup(alt, width, height, others)
}

func (p *parser) callonInlineImageAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImageAttributes1(stack["alt"], stack["width"], stack["height"], stack["others"])
}

func (c *current) onImageAlt1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrImageAlt, value)
}

func (p *parser) callonImageAlt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAlt1(stack["value"])
}

func (c *current) onImageWidth1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrWidth, value)
}

func (p *parser) callonImageWidth1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageWidth1(stack["value"])
}

func (c *current) onImageHeight1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrImageHeight, value)
}

func (p *parser) callonImageHeight1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageHeight1(stack["value"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(icon, attributes interface{}) (interface{}, error) {
	return types.NewIcon(icon.(string), attributes.(types.Attributes))
}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["icon"], stack["attributes"])
}

func (c *current) onIconAttributes1(size, others interface{}) (interface{}, error) {
	// TODO: use ellipsis on `nv`?
	return types.NewAttributeGroup(size, others)
}

func (p *parser) callonIconAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIconAttributes1(stack["size"], stack["others"])
}

func (c *current) onIconSize1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrIconSize, value)
}

func (p *parser) callonIconSize1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIconSize1(stack["value"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.([]interface{}))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content)
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onCallout5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout5()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {
	return types.NewCallout(ref.(int))
}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onCalloutListItem1(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListItem(ref.(int), description.([]interface{}))
}

func (p *parser) callonCalloutListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItem1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListItemPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListItemPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix5()
}

func (c *current) onCalloutListItemPrefix1(ref interface{}) (interface{}, error) {
	return ref, nil
}

func (p *parser) callonCalloutListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix1(stack["ref"])
}

func (c *current) onThematicBreak1() (interface{}, error) {
	return types.NewThematicBreak()
}

func (p *parser) callonThematicBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThematicBreak1()
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onExampleBlock1(attributes, blocks interface{}) (interface{}, error) {
	return types.NewExampleBlock(blocks.([]interface{}), attributes.([]interface{}))
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["blocks"])
}

func (c *current) onExampleBlockRawContent2(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExampleBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent2(stack["element"])
}

func (c *current) onQuoteBlock6(attributes interface{}) (bool, error) {
	// AttrBlockKind may be missing or must be equal to `quote`
	if types.HasNotAttribute(attributes, types.AttrBlockKind) ||
		types.HasAttributeWithValue(attributes, types.AttrBlockKind, types.Quote) {
		return true, nil
	}
	return false, nil

}

func (p *parser) callonQuoteBlock6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock6(stack["attributes"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewQuoteBlock(content.([]interface{}), attributes.([]interface{}))

}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockRawContent2(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuoteBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent2(stack["element"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewSidebarBlock(content.([]interface{}), attributes.([]interface{}))
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onSidebarBlockRawContent2(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSidebarBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent2(stack["element"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewFencedBlock(content.([]interface{}), attributes.([]interface{}))
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonFencedBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockRawContent2(stack["line"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewListingBlock(content.([]interface{}), attributes.([]interface{}))
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonListingBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockRawContent2(stack["line"])
}

func (c *current) onVerseBlock6(attributes interface{}) (bool, error) {
	// AttrBlockKind must be equal to `verse`
	return types.HasAttributeWithValue(attributes, types.AttrBlockKind, types.Verse), nil

}

func (p *parser) callonVerseBlock6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock6(stack["attributes"])
}

func (c *current) onVerseBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewVerseBlock(content.([]interface{}), attributes.([]interface{}))

}

func (p *parser) callonVerseBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock1(stack["attributes"], stack["content"])
}

func (c *current) onVerseBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonVerseBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockRawContent2(stack["line"])
}

func (c *current) onPassthroughBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewPassthroughBlock(content.([]interface{}), attributes.([]interface{}))
}

func (p *parser) callonPassthroughBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock1(stack["attributes"], stack["content"])
}

func (c *current) onPassthroughBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonPassthroughBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockRawContent2(stack["line"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {
	return types.NewCommentBlock(content.([]interface{}), nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonCommentBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockRawContent2(stack["line"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onElementPlaceHolder5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementPlaceHolder5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder5()
}

func (c *current) onElementPlaceHolder1(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonElementPlaceHolder1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder1(stack["ref"])
}

func (c *current) onMarkdownQuoteMacroSubs1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonMarkdownQuoteMacroSubs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteMacroSubs1(stack["lines"])
}

func (c *current) onMarkdownQuoteLine1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonMarkdownQuoteLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteLine1(stack["elements"])
}

func (c *current) onMarkdownQuoteAttribution5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonMarkdownQuoteAttribution5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution5()
}

func (c *current) onMarkdownQuoteAttribution1(author interface{}) (interface{}, error) {
	return author, nil
}

func (p *parser) callonMarkdownQuoteAttribution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution1(stack["author"])
}

func (c *current) onNoneSubs5() (interface{}, error) {
	// just text, including empty lines
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNoneSubs5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneSubs5()
}

func (c *current) onTable1(attributes, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attributes.([]interface{}))

}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attributes"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes.([]interface{}))
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithHeadingSpacesLine4() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonParagraphWithHeadingSpacesLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLine4()
}

func (c *current) onParagraphWithHeadingSpacesLine1(line interface{}) (interface{}, error) {
	// do not include the trailing 'EOL' on the first line
	return line, nil
}

func (p *parser) callonParagraphWithHeadingSpacesLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes.([]interface{}))
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {
	return types.HasAttributeWithValue(attributes, types.AttrBlockKind, types.Literal), nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes.([]interface{}))

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onLiteralParagraphLine6() (interface{}, error) {
	return types.NewRawLine(string(c.text))
}

func (p *parser) callonLiteralParagraphLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralParagraphLine6()
}

func (c *current) onLiteralParagraphLine1(content interface{}) (interface{}, error) {
	return content, nil // do not include the trailing 'EOL'
}

func (p *parser) callonLiteralParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralParagraphLine1(stack["content"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent11() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent11()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onApostrophe1() (interface{}, error) {
	return types.NewStringElement("\u2019")
}

func (p *parser) callonApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe1()
}

func (c *current) onCopyright1() (interface{}, error) {
	return types.NewStringElement("\u00a9")
}

func (p *parser) callonCopyright1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCopyright1()
}

func (c *current) onTrademark1() (interface{}, error) {
	return types.NewStringElement("\u2122")
}

func (p *parser) callonTrademark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTrademark1()
}

func (c *current) onRegistered1() (interface{}, error) {
	return types.NewStringElement("\u00ae")
}

func (p *parser) callonRegistered1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegistered1()
}

func (c *current) onEllipsis1() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")
}

func (p *parser) callonEllipsis1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEllipsis1()
}

func (c *current) onImpliedApostrophe1() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")
}

func (p *parser) callonImpliedApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImpliedApostrophe1()
}

func (c *current) onSpecialCharacter2() (interface{}, error) {
	// if we have a InternalCrossReference we just return a StringElement.
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharacter2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter2()
}

func (c *current) onSpecialCharacter4() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSpecialCharacter4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter4()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2()
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onFilename1() (interface{}, error) {
	// not supported for now: EOL, space, "[", "]"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonFilename1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilename1()
}

func (c *current) onId1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonId1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onId1()
}

func (c *current) onDigit1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDigit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDigit1()
}

func (c *current) onNumber1() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNumber1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumber1()
}

func (c *current) onSpace3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
