{
package parser 

import (
    "strconv"
    "io"
    "unicode"

    "github.com/bytesparadise/libasciidoc/pkg/types"
)

}

// ----------------------------------------------------------------
// AsciidocDocument - fully parsed document, line by line
// ----------------------------------------------------------------
AsciidocDocument <- frontmatter:(FrontMatter?) blocks:(AsciidocDocumentBlocks) EOF {
    return types.NewDraftDocument(frontmatter, blocks.([]interface{}))
}

VerbatimDocument <- blocks:(VerbatimFileContent) EOF {
    return types.NewDraftDocument(nil, blocks.([]interface{}))
}

// TODO: remove this rule ?
TextDocument <- blocks:(TextDocumentBlocks) EOF {
    return types.NewDraftDocument(nil, blocks.([]interface{}))
}

// ------------------------------------------
// Document blocks
// ------------------------------------------
AsciidocDocumentBlocks <- header:(DocumentHeader?) others:(DocumentBlock*) {
    if header != nil && others != nil {
        return append([]interface{}{header}, others.([]interface{})...), nil
    } else if others != nil {
        return others.([]interface{}), nil
    }
    return []interface{}{}, nil
}

DocumentBlock <- 
        LabeledListItem // mjst appear before simple paragraph
        / SimpleParagraph
        / BlankLine // must be before LiteralBlock 
        / Section
        / DelimitedBlock
        / FileInclusion
        / VerseParagraph // must be before ImageBlock
        / ImageBlock 
        / OrderedListItem 
        / UnorderedListItem 
        / ContinuedListItemElement
        / LiteralBlock 
        / DocumentAttributeDeclaration 
        / DocumentAttributeReset 
        / TableOfContentsPlaceHolder
        / UserMacroBlock
        / Paragraph

AsciidocDocumentBlocksWithinDelimitedBlock <- blocks:(DocumentBlockWithinDelimitedBlock)*

DocumentBlockWithinDelimitedBlock <- !EOF 
    block:(DelimitedBlock
        / BlankLine // must be before LiteralBlock 
        / FileInclusion
        / VerseParagraph
        / ImageBlock 
        / OrderedListItem 
        / UnorderedListItem 
        / LabeledListItem 
        / ContinuedListItemElement
        / LiteralBlock 
        / DocumentAttributeDeclaration 
        / DocumentAttributeReset 
        / TableOfContentsPlaceHolder
        / UserMacroBlock
        / Paragraph) {
    return block, nil
}

TextDocumentBlocks <- blocks:(TextDocumentBlock)*

TextDocumentBlock <- !EOF 
    block:(BlankLine / Paragraph) {
    return block, nil
}

// ------------------------------------------
// Front Matter
// ------------------------------------------
FrontMatter <- YamlFrontMatter 

YamlFrontMatter <- YamlFrontMatterToken content:(YamlFrontMatterContent)? YamlFrontMatterToken {
    return types.NewYamlFrontMatter(content.(string))
}

YamlFrontMatterToken  <- "---" Space* EOL

YamlFrontMatterContent <- ((!YamlFrontMatterToken .)+)* {
    return string(c.text), nil
}

// ------------------------------------------
// Document Header and Metadata
// ------------------------------------------
DocumentHeader <- "=" Space+ title:(TitleElements) id:(InlineElementID*) EOL
        (SingleLineComment / CommentBlock)*
        authors:(DocumentAuthors?) 
        (SingleLineComment / CommentBlock)*
        revision:(DocumentRevision?) {
    return types.NewDocumentHeader(title.([]interface{}), authors, revision)
}

DocumentAuthors <- DocumentAuthorsInlineForm / DocumentAuthorsAttributeForm

DocumentAuthorsInlineForm <- Space* !":" authors:(DocumentAuthor+) EOL {
    return types.NewDocumentAuthors(authors.([]interface{}))
}

DocumentAuthorsAttributeForm <- Space* ":author:" author:(DocumentAuthor) EOL {
    return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

DocumentAuthor <- Space* fullname:(DocumentAuthorName) email:(DocumentAuthorEmail)? Space* ";"? Space* {
    return types.NewDocumentAuthor(fullname, email)
}

// "<" marks the beginning of the author email, and ";" is the authors separator
DocumentAuthorName <- [^<;\n]+ {
    return string(c.text), nil
}

DocumentAuthorEmail <- "<" email:(([^>\n]+) {
    return string(c.text), nil
}) ">" {
    return email, nil
}

// see http://asciidoctor.org/docs/user-manual/#revision-number-date-and-remark
// Eg: "v1.0, October 2, 2013: First incarnation"
DocumentRevision <- Space* !":" revision:(
        (revnumber:(DocumentRevisionNumber) ","? revdate:(DocumentRevisionDate)? ":"? revremark:(DocumentRevisionRemark)? {
            return types.NewDocumentRevision(revnumber, revdate, revremark)
        }) / (revdate:(DocumentRevisionDate) ":"? revremark:(DocumentRevisionRemark)? {
            return types.NewDocumentRevision(nil, revdate, revremark)
        })) EOL {
    return revision, nil
}

// DocumentRevisionNumber MUST start with a `v` or MAY start with a `v` but MUST end with a `,`
DocumentRevisionNumber <- "v"i DIGIT  [^:,\n]+ {
    return string(c.text), nil
} / "v"i? DIGIT  [^:,\n]+ Space* &"," {
    return string(c.text), nil
}

DocumentRevisionDate <- [^:\n]+ {
    return string(c.text), nil
}

DocumentRevisionRemark <- [^\r\n]+ {
    return string(c.text), nil
}

// ------------------------------------------
// Document Attributes
// ------------------------------------------
DocumentAttributeDeclaration <- ":" name:(DocumentAttributeName) ":" 
        value:((Space+ value:(DocumentAttributeValue)) { 
            return value, nil 
        })? Space* EOL {
    return types.NewDocumentAttributeDeclaration(name.(string), value)
} 

// AttributeName must be at least one character long, 
// must begin with a word character (A-Z, a-z, 0-9 or _) and 
// must only contain word Word and hyphens ("-").
DocumentAttributeName <- [\pL0-9_] ([\pL0-9-])* {
    return string(c.text), nil
}

DocumentAttributeValue <- [^\r\n]+ {
    return string(c.text), nil
}

DocumentAttributeReset <- ":!" name:(DocumentAttributeName) ":" Space* EOL {
    return types.NewDocumentAttributeReset(name.(string))
} / ":" name:(DocumentAttributeName) "!:" Space* EOL {
    return types.NewDocumentAttributeReset(name.(string))
}

DocumentAttributeSubstitution <- "{" name:(DocumentAttributeName) "}" {
    return types.NewDocumentAttributeSubstitution(name.(string))
}

// ------------------------------------------
// Element Attributes
// ------------------------------------------
ElementAttributes <- attrs:(ElementAttribute)+ BlankLine* {
    return types.NewElementAttributes(attrs.([]interface{})), nil
}

ElementAttribute <- &("[" / "." / "#") // skip if the content does not start with one of those characters
    attr:(ElementID / 
        ElementTitle / 
        ElementRole / 
        LiteralAttribute / 
        SourceAttributes / 
        QuoteAttributes / 
        VerseAttributes / 
        AdmonitionMarkerAttribute / 
        HorizontalLayout / 
        AttributeGroup) {
    return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

// identify all attributes that masquerade a block element into something else.
MasqueradeAttribute <- QuoteAttributes / VerseAttributes

ElementID <- "[[" id:(ID) "]]" Space* EOL {
    return types.NewElementID(id.(string))
} / "[#" id:(ID) "]"  Space* EOL {
    return types.NewElementID(id.(string))
}

InlineElementID <- "[[" id:(ID) "]]" Space* { // no EOL here since there can be multiple InlineElementID on the same line
    return types.NewInlineElementID(id.(string))
}

// a title attached to an element, such as a ImageBlock
// a title starts with a single "." followed by the value, without space in-between
ElementTitle <- "." title:(ElementTitleContent) EOL {
    return types.NewElementTitle(title.(string))
}

ElementTitleContent <- [\pL0-9][^\r\n<>]* { // "<" and ">" characters are not allowed as they are used as cross-reference markers
    return string(c.text), nil
}

// a role attached to an element, such as a ImageBlock
// a role starts is wrapped in "[. ]" 
ElementRole <- "[." role:([\pL0-9] [^\]\n]* {
    return string(c.text), nil
}) "]" Space* EOL {
    return types.NewElementRole(role.(string))
}

LiteralAttribute <- "[literal]" Space* Newline {
    return types.NewLiteralAttribute()
}

// expression for the whole admonition marker, but only retains the actual kind
AdmonitionMarkerAttribute <- "[" k:(AdmonitionKind) "]" Space* EOL {
    return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

// a paragraph or a delimited block may contain source code in a given language
SourceAttributes <- "[source" 
    language:("," attr:(StandaloneAttributeValue)? { return attr, nil })? 
    others:("," attr:(GenericAttribute)? { return attr, nil })* 
    "]" Space* EOL {
    return types.NewSourceAttributes(language, others.([]interface{})...)
}

// one or more attributes. eg: [foo, key1=value1, key2 = value2 , ]
AttributeGroup <- "[" attributes:(GenericAttribute)* "]" Space* EOL {
    return types.NewAttributeGroup(attributes.([]interface{}))
}

GenericAttribute <- GenericAttributeWithValue / GenericAttributeWithoutValue

GenericAttributeWithValue <- key:(AttributeKey) "=" value:(AttributeValue)? ","? Space* { // value is (optionally) set
    return types.NewGenericAttribute(key.(string), value)
}

GenericAttributeWithoutValue <- key:(AttributeKey) ","? Space* { // value is not set
    return types.NewGenericAttribute(key.(string), nil)
}

AttributeKey <- !"quote" !"verse" !"literal" !(Space+) key:([^\r\n=,\]]+) Space* {
    return string(c.text), nil
}

AttributeValue <- value:([^\r\n=,\]]+) { 
    return string(c.text), nil
}

StandaloneAttributeValue <- value:([^\r\n=,\]]+) !"=" { // standalone attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
    return string(c.text), nil
}

HorizontalLayout <- "[horizontal]" Space* EOL {
    return types.ElementAttributes{"layout": "horizontal"}, nil
}

QuoteAttributes <- "[quote" Space* ","? author:(QuoteAttribute)? ","? title:(QuoteAttribute)? "]" Space* EOL {
    return types.NewQuoteAttributes("quote", author, title)
}

VerseAttributes <- "[verse" Space* ","? author:(QuoteAttribute)? ","? title:(QuoteAttribute)? "]" Space* EOL {
    return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

QuoteAttribute <- ([^\r\n,\]]*) {
    return string(c.text), nil
}

InlineAttributes <- "[" attrs:(GenericAttribute)* "]" {
    return types.NewInlineAttributes(attrs.([]interface{}))
} 

// ------------------------------------------
// Sections
// ------------------------------------------
Section <- attributes:(ElementAttributes)?
    level:(("=")+ {   
        // `=` is level 0, etc.
        return (len(c.text)-1), nil 
    })
    &{  
        // use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
        return level.(int) <= 5, nil 
    } 
    Space+ title:(TitleElements) id:(InlineElementID*) EOL {
    return types.NewSection(level.(int), title.([]interface{}), id.([]interface{}), attributes) 
}

TitleElements <- elements:(!Newline !InlineElementID TitleElement)+ { // absorbs heading and trailing spaces
    return types.NewInlineElements(elements.([]interface{}))
} 

TitleElement <- element:(Word
        / LineBreak // must be before spaces
        / Space+ 
        / CrossReference
        / Passthrough
        / InlineImage 
        / Link
        / InlineFootnote
        / QuotedText
        / DocumentAttributeSubstitution
        / AnyChar) {
    return element, nil
}

// ------------------------------------------
// Table of Contents
// ------------------------------------------
TableOfContentsPlaceHolder <- "toc::[]" EOL

// ------------------------------------------
// User Macro
// ------------------------------------------
UserMacroBlock <- name:(UserMacroName) "::" value:(UserMacroValue) attrs:(UserMacroAttributes) {
    return types.NewUserMacroBlock(name.(string), value.(string), attrs.(types.ElementAttributes), string(c.text))
}

InlineUserMacro <- name:(UserMacroName) ":" value:(UserMacroValue) attrs:(UserMacroAttributes) {
    return types.NewInlineUserMacro(name.(string), value.(string), attrs.(types.ElementAttributes), string(c.text))
}

UserMacroName <- ([\pL0-9_-]+) {
    return string(c.text), nil
}

UserMacroValue <- [^:[ \n]* {
    return string(c.text), nil
}

UserMacroAttributes <- "[" attrs:(GenericAttribute)* "]" {
    return types.NewInlineAttributes(attrs.([]interface{}))
}

// ------------------------------------------
// File inclusions
// ------------------------------------------
FileInclusion <- incl:("include::" path:(FileLocation) inlineAttributes:(FileIncludeAttributes) { 
        return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.ElementAttributes), string(c.text))
    }) Space* EOL {
    return incl.(types.FileInclusion), nil
}

FileIncludeAttributes <- "[" attrs:(LineRangesAttribute / TagRangesAttribute / GenericAttribute)* "]" {
    return types.NewInlineAttributes(attrs.([]interface{}))
} 

LineRangesAttribute <- "lines=" lines:(LineRangesAttributeValue) ","? { 
    return types.NewLineRangesAttribute(lines)
} 

LineRangesAttributeValue <- value:(MultipleLineRanges // TODO: just have MultipleLineRanges, MultipleQuotedLineRanges and UndefinedLineRange?
        / MultipleQuotedLineRanges 
        / MultiLineRange 
        / MultiLineQuotedRange 
        / SingleLineQuotedRange
        / SingleLineRange 
        / UndefinedLineRange) Space* (&"," / &"]") {
    return value, nil
}

MultipleLineRanges <- first:(MultiLineRange / SingleLineRange) 
    others:(";" other:(MultiLineRange / SingleLineRange) {
        return other, nil
    })+ {
        return append([]interface{}{first}, others.([]interface{})...), nil
    }

MultipleQuotedLineRanges <- "\"" first:(MultiLineRange / SingleLineRange) 
    others:("," other:(MultiLineRange / SingleLineRange) {
        return other, nil
    })+ "\"" {
        return append([]interface{}{first}, others.([]interface{})...), nil
    }

MultiLineRange <- start:(NUMBER) ".." end:(NUMBER) { // eg: lines=12..14
    return types.NewLineRange(start.(int), end.(int))
} 

MultiLineQuotedRange <- "\"" start:(NUMBER) ".." end:(NUMBER) "\"" { // eg: lines=12..14
    return types.NewLineRange(start.(int), end.(int))
} 

SingleLineRange <- singleline:(NUMBER) { // eg: lines=12
    return types.NewLineRange(singleline.(int), singleline.(int))
}

SingleLineQuotedRange <- "\"" singleline:(NUMBER) "\"" { // eg: lines=12
    return types.NewLineRange(singleline.(int), singleline.(int))
}

UndefinedLineRange <- [^\], ]* {
    return string(c.text), nil
}

TagRangesAttribute <- ("tags=" / "tag=") tags:(TagRangesAttributeValue) ","? { //TODO: check if 'tags'/'tag' is allowed for both single and multiple values
    return types.NewTagRangesAttribute(tags.([]interface{}))
} 

TagRangesAttributeValue <- value:(MultipleTagRanges) Space* (&"," / &"]") {
    return value, nil
}

MultipleTagRanges <- first:(TagRange)
    others:(";" other:(TagRange) {
        return other, nil
    })* {
        return append([]interface{}{first}, others.([]interface{})...), nil
    }

TagRange <- tag:(Alphanums / TagWildcard) {
    return types.NewTagRange(tag.(string), true)
} / "!" tag:(Alphanums / TagWildcard) {
    return types.NewTagRange(tag.(string), false)
}

TagWildcard <- stars:(("*")+ {
        return string(c.text), nil
    })
    &{  
        // use a predicate to make sure that only `*` and `**` are allowed
        return len(stars.(string)) <= 2, nil 
    } {
    return stars, nil
}

// Entrypoint to parse a file to include. May contain nested file inclusion macros
VerbatimFileContent <- (FileInclusion / VerbatimLine)*

VerbatimLine <- !EOF content:([^\r\n]* { 
            return string(c.text), nil
        }) EOL {
    return types.NewVerbatimLine(content.(string))
}

// ------------------------------------------
// Tag macros in lines of files to include
// ------------------------------------------
IncludedFileLine <- content:(IncludedFileStartTag / IncludedFileEndTag / . {return string(c.text), nil})* EOL {
    return types.NewIncludedFileLine(content.([]interface{}))
}

IncludedFileStartTag <- "tag::" tag:(Alphanums {return string(c.text), nil}) "[]" {
    return types.NewIncludedFileStartTag(tag.(string))
}

IncludedFileEndTag <- "end::" tag:(Alphanums {return string(c.text), nil}) "[]" {
    return types.NewIncludedFileEndTag(tag.(string))
}

// ------------------------------------------
// Lists
// ------------------------------------------
ListParagraph <- comment:(SingleLineComment) {
        return comment, nil
    } / lines:(ListParagraphLine)+ {
        return types.NewParagraph(lines.([]interface{}), nil)
    } 

ListParagraphLine <- !EOF
    !BlankLine 
    !SingleLineComment
    !OrderedListItemPrefix
    !UnorderedListItemPrefix
    !ListItemContinuation
    !ElementAttribute
    !BlockDelimiter
    !LabeledListItemPrefix 
    line:(elements:(InlineElement)+ { 
            return types.NewInlineElements(elements.([]interface{}))
        }) EOL { 
        return line, nil
    }

ListItemContinuation <- "+" Space* Newline // there should be something after, so `EOL` is not valid here

ContinuedListItemElement <- ListItemContinuation element:ContinuedListItemContent {
    return types.NewContinuedListItemElement(element) // offset is negative
}

ContinuedListItemContent <- !EOF 
    content:(DelimitedBlock
        / FileInclusion
        / VerseParagraph // must be before ImageBlock
        / ImageBlock 
        / OrderedListItem 
        / UnorderedListItem 
        / LabeledListItem 
        // / ContinuedListItemElement
        / BlankLine // must be before LiteralBlock
        / LiteralBlock 
        / DocumentAttributeDeclaration 
        / DocumentAttributeReset 
        / TableOfContentsPlaceHolder
        / UserMacroBlock
        / ContinuedParagraph) {
    return content, nil
}

// ------------------------------------------
// Ordered List Items
// ------------------------------------------
OrderedListItem <- attributes:(ElementAttributes)? prefix:(OrderedListItemPrefix) content:(OrderedListItemContent) {
    return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attributes)
}

OrderedListItemPrefix <- 
    Space* prefix:(
        // implicit numbering: "." to "....."
        depth:((".")+ {   
            // `.` is 1, etc.
            return (len(c.text)), nil 
        }) 
        &{  
            // use a predicate to make sure that only `.` to `.....` are allowed
            return depth.(int) <= 5, nil 
        } 
        {
            switch depth.(int){
            case 1:
                return types.NewOrderedListItemPrefix(types.Arabic, 1)
            case 2:
                return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
            case 3:
                return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
            case 4:
                return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
            default:
                return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
            }
        }
        // explicit numbering
        / ([0-9])+ "." {  // numbering style: "1."
            return types.NewOrderedListItemPrefix(types.Arabic, 1)
        } / ([a-z]) "." { // numbering style: "a."
            return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)
        } / ([A-Z]) "." { // numbering style: "A."
            return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)
        } / ([a-z])+ ")" { // numbering style: "i)"
            return types.NewOrderedListItemPrefix(types.LowerRoman, 1)
        } / ([A-Z])+ ")" { // numbering style: "I)"
            return types.NewOrderedListItemPrefix(types.UpperRoman, 1)
        }) Space+ {
    return prefix, nil
}

OrderedListItemContent <- elements:(ListParagraph+) {
    return types.NewListItemContent(elements.([]interface{}))
} 

// ------------------------------------------
// Unordered List Items
// ------------------------------------------
UnorderedListItem <- attributes:(ElementAttributes)? prefix:(UnorderedListItemPrefix) checkstyle:(UnorderedListItemCheckStyle)? content:(UnorderedListItemContent) {
    return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attributes)
}

UnorderedListItemPrefix <- 
    Space* prefix:((
        // implicit numbering: "*" to "*****" 
        depth:(("*")+ {   
            // `*` is 1, etc.
            return (len(c.text)), nil 
        }) 
        &{  
            // use a predicate to make sure that only `*` to `*****` are allowed
            return depth.(int) <= 5, nil 
        } 
        {
            switch depth.(int){
            case 1:
                return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
            case 2:
                return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
            case 3:
                return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
            case 4:
                return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
            default:
                return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
            }
        }) / depth:(("-") {
            return types.NewUnorderedListItemPrefix(types.Dash, 1)
        })) Space+ {
    return prefix, nil
} 

UnorderedListItemCheckStyle <- &"[" style:(
      "[ ]" { return types.Unchecked, nil } 
    / "[*]" { return types.Checked, nil } 
    / "[x]" { return types.Checked, nil }
    ) Space+ {
        return style, nil
    }

UnorderedListItemContent <- elements:(ListParagraph+) { // Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
    return types.NewListItemContent(elements.([]interface{}))
} 

// ------------------------------------------
// Labeled List Items
// ------------------------------------------
LabeledListItem <- attributes:(ElementAttributes)? term:(VerbatimLabeledListItemTerm) separator:(LabeledListItemSeparator) description:(LabeledListItemDescription)? {
    return types.NewLabeledListItem(len(separator.(string)) - 1, term.([]interface{}), description, attributes)
}

LabeledListItemPrefix <- VerbatimLabeledListItemTerm LabeledListItemSeparator

VerbatimLabeledListItemTerm <- content:([^:\n\r]+ {
    return types.NewStringElement(strings.TrimSpace(string(c.text)))
})  {
    return types.NewInlineElements(content)
}

LabeledListItemTerm <- elements:(!Newline !"::" LabeledListItemTermElement)+ { // rule as an extra entrypoint
    return types.NewInlineElements(elements.([]interface{}))
} 

LabeledListItemTermElement <- element:(Word
        / LineBreak // must appear before spaces
        / Space+ 
        / CrossReference
        / ConcealedIndexTerm
        / IndexTerm
        / Passthrough
        / InlineImage 
        / Link
        / InlineFootnote
        / QuotedText
        / DocumentAttributeSubstitution
        / AnyChar ) {
    return element, nil
}

LabeledListItemSeparator <- 
    separator:((":")+ {   
        return string(c.text), nil
    }) 
    &{  
        // use a predicate to make sure that only `::` to `::::` are allowed
        return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil 
    } 
    ((Space / Newline)+ / EOL) {
    return separator, nil
}
    
LabeledListItemDescription <- elements:(ListParagraph)+ { 
    return types.NewListItemContent(elements.([]interface{}))
}

// ------------------------------------------
// Admonitions
// ------------------------------------------
AdmonitionKind <- "TIP" {
        return types.Tip, nil
    } / "NOTE" {
        return types.Note, nil
    } / "IMPORTANT" {
        return types.Important, nil
    } / "WARNING" {
        return types.Warning, nil
    } / "CAUTION" {
        return types.Caution, nil
}

// ------------------------------------------
// Paragraphs
// ------------------------------------------
// a paragraph is a group of line ending with a blank line (or end of file)
// a paragraph cannot start with the `section` sequence (`= `, `== `, etc.)
Paragraph <- 
    // admonition paragraph 
    attributes:(ElementAttributes)? t:(AdmonitionKind) ": " lines:(InlineElements)+ { 
        return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)
    } / 
    // other kind of paragraph (verse, regular, etc.)
    attributes:(ElementAttributes)? !BlockDelimiter lines:(InlineElements)+ { 
        return types.NewParagraph(lines.([]interface{}), attributes)
} 

// a paragraph whose first line begins with a word surrounded by spaces
SimpleParagraph <- attributes:(ElementAttributes)? 
    &{
        // skip if the '[literal]' attribute was set on this paragraph
        if attrs, ok := attributes.(types.ElementAttributes); ok {
            kind, found := attrs[types.AttrKind]
            return !found || kind != types.Literal, nil
        }
        return true, nil
    }
    firstLine: FirstParagraphLine
    otherLines:(OtherParagraphLine)* { 
    return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

FirstParagraphLine <- 
    elements:(Word InlineElement*) EOL { 
    return types.NewInlineElements(elements.([]interface{}))
}

OtherParagraphLine <- elements:(InlineElements) {
    return elements, nil
}

// same as Paragraph, but without allowing for ListItemContinuation (`+`)
ContinuedParagraph <- 
    // admonition paragraph 
    attributes:(ElementAttributes)? t:(AdmonitionKind) ": " lines:(ContinuedParagraphLines) { 
        return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)
    } / 
    // other kind of paragraph (verse, regular, etc.)
    attributes:(ElementAttributes)? lines:(ContinuedParagraphLines) { 
        return types.NewParagraph(lines.([]interface{}), attributes)
} 

ContinuedParagraphLines <- firstLine:(FirstParagraphLine) otherLines:(!ListItemContinuation OtherParagraphLine)* {
    return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

VerseParagraph <- 
    // admonition paragraph 
    attributes:(ElementAttributes)?
    &{
        if attrs, ok := attributes.(types.ElementAttributes); ok {
            kind, ok := attrs[types.AttrKind]
            return ok && kind == types.Verse, nil
        }
        return false, nil
    }
    t:(AdmonitionKind) ": " lines:(InlineElements)+ { 
        return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)
    } / 
    // other kind of paragraph (verse, regular, etc.)
    attributes:(ElementAttributes)?
    &{
        if attrs, ok := attributes.(types.ElementAttributes); ok {
            kind, ok := attrs[types.AttrKind]
            return ok && kind == types.Verse, nil
        }
        return false, nil
    }
    lines:(InlineElements)+ { 
        return types.NewParagraph(lines.([]interface{}), attributes)
    } 
    
InlineElements <- !BlankLine
    elements:(comment:(SingleLineComment) {
        return types.NewInlineElements([]interface{}{comment})
    } / elements:(InlineElement)+ EOL { 
        return types.NewInlineElements(elements.([]interface{}))
    }) {
        return elements, nil
    }

InlineElement <-  
    element:(InlineWord // more permissive than words
        / LineBreak // must be before spaces
        / Space+ 
        / !EOL ( 
            QuotedText 
            / InlineImage 
            / Link 
            / Passthrough 
            / InlineFootnote 
            / CrossReference 
            / InlineUserMacro 
            / DocumentAttributeSubstitution 
            / InlineElementID 
            / ConcealedIndexTerm
            / IndexTerm
            / AnyChar)) {
    return element, nil
}

// ----------------------------------------------------------------------------
// Explicit line breaks
// ----------------------------------------------------------------------------
LineBreak <- Space "+" Space* &EOL {
    return types.NewLineBreak()    
}

// ----------------------------------------------------------------------------
// Quoted Texts (bold, italic and monospace) including substitution prevention
// ----------------------------------------------------------------------------
QuotedText <- UnconstrainedQuotedText / ConstrainedQuotedText / EscapedQuotedText

ConstrainedQuotedTextMarker <- "*" !"*" / "_" !"_" / "`" !"`" 

UnconstrainedQuotedTextPrefix <- "**" / "__" / "``" / "^" / "~"

ConstrainedQuotedText <- text:(SingleQuoteBoldText 
            / SingleQuoteItalicText 
            / SingleQuoteMonospaceText 
            / SubscriptText 
            / SuperscriptText 
            / SubscriptOrSuperscriptPrefix) { // if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is) 
    return text, nil
}

UnconstrainedQuotedText <- DoubleQuoteBoldText
            / DoubleQuoteItalicText
            / DoubleQuoteMonospaceText

EscapedQuotedText <- EscapedBoldText 
            / EscapedItalicText 
            / EscapedMonospaceText 
            / EscapedSubscriptText 
            / EscapedSuperscriptText

SubscriptOrSuperscriptPrefix <- "^" / "~" { // rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
    return string(c.text), nil
}

OneOrMoreBackslashes <- `\`+ {
    return string(c.text), nil
}

TwoOrMoreBackslashes <- `\\` `\`* {
    return string(c.text), nil
}

// -----------------
// Bold text
// -----------------

BoldText <- DoubleQuoteBoldText / SingleQuoteBoldText // double punctuation must be evaluated first

DoubleQuoteBoldText <- !`\\` "**" elements:(DoubleQuoteBoldTextElements) "**" { 
    return types.NewQuotedText(types.Bold, elements.([]interface{}))
} 

DoubleQuoteBoldTextElements <- DoubleQuoteBoldTextElement (!("**") (Space / DoubleQuoteBoldTextElement))*  // may start and end with spaces

DoubleQuoteBoldTextElement <- Word 
        / SingleQuoteBoldText 
        / ItalicText 
        / MonospaceText
        / SubscriptText
        / SuperscriptText
        / InlineImage 
        / Link 
        / Passthrough 
        / DocumentAttributeSubstitution
        / DoubleQuoteBoldTextStringElement
        / DoubleQuoteBoldTextFallbackCharacter


DoubleQuoteBoldTextStringElement <- (!"**" [^\r\n ^~{}])+ { 
    return types.NewStringElement(string(c.text))
}

DoubleQuoteBoldTextFallbackCharacter <- 
    [^\r\n*] // anything except EOL and bold delimiter (fallback in case nothing else matched)
    / "**" Alphanums {  // or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
    return types.NewStringElement(string(c.text))
}

SingleQuoteBoldText <- (!`\` "*" !"*") elements:(SingleQuoteBoldTextElements) "*" &(!Alphanum) { // single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
    return types.NewQuotedText(types.Bold, elements.([]interface{}))
} / !`\\` "*" elements:("*" SingleQuoteBoldTextElements) "*" { // unbalanced `**` vs `*` punctuation.
    return types.NewQuotedText(types.Bold, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content
} 

SingleQuoteBoldTextElements <- !Space SingleQuoteBoldTextElement+

SingleQuoteBoldTextElement <- Word 
        / DoubleQuoteBoldText
        / Space+ ('*' !'*')?
        / ItalicText 
        / MonospaceText
        / SubscriptText
        / SuperscriptText
        / InlineImage 
        / Link  
        / Passthrough 
        / DocumentAttributeSubstitution
        / SingleQuoteBoldTextStringElement
        / SingleQuoteBoldTextFallbackCharacter

SingleQuoteBoldTextStringElement <- [^\r\n{} *^~]+ { // anything except EOL, space, bold and subscript/superscript delimiters and brackets. Excludes curly brackets to match with DocumentAttributeSubstitution elements
    return types.NewStringElement(string(c.text))
}

SingleQuoteBoldTextFallbackCharacter <- 
    [^\r\n*] // anything except EOL and bold delimiter (fallback in case nothing else matched)
    / "*" Alphanums {  // or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
    return types.NewStringElement(string(c.text))
}

EscapedBoldText <- 
    backslashes:(TwoOrMoreBackslashes) "**" elements:(DoubleQuoteBoldTextElements) "**" { // double punctuation must be evaluated first
        return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))
    } / backslashes:(OneOrMoreBackslashes) "**" elements:(SingleQuoteBoldTextElements) "*" { // unbalanced `**` vs `*` punctuation
        result := append([]interface{}{"*"}, elements.([]interface{}))
        return types.NewEscapedQuotedText(backslashes.(string), "*", result)
    } / backslashes:(OneOrMoreBackslashes) "*" elements:(SingleQuoteBoldTextElements) "*" { // simple punctuation must be evaluated last
        return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))
} 

// -----------------
// Italic text
// -----------------

ItalicText <- DoubleQuoteItalicText / SingleQuoteItalicText

DoubleQuoteItalicText <- !`\\` "__" elements:(DoubleQuoteItalicTextElements) "__" { // double punctuation must be evaluated first
    return types.NewQuotedText(types.Italic, elements.([]interface{}))
}

DoubleQuoteItalicTextElements <- DoubleQuoteItalicTextElement (!("__") (Space / DoubleQuoteItalicTextElement))*  // may start and end with spaces

DoubleQuoteItalicTextElement <- Word 
        / SingleQuoteItalicText 
        / BoldText 
        / MonospaceText
        / SubscriptText
        / SuperscriptText
        / InlineImage 
        / Link 
        / Passthrough 
        / DoubleQuoteItalicTextStringElement
        / DoubleQuoteItalicTextFallbackCharacter

DoubleQuoteItalicTextStringElement <- (!"__" [^\r\n ^~{}])+ { 
    return types.NewStringElement(string(c.text))
}

DoubleQuoteItalicTextFallbackCharacter <- 
    [^\r\n_] // anything except EOL and italic delimiter (fallback in case nothing else matched)
    / "__" Alphanums {  // or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
    return types.NewStringElement(string(c.text))
}

SingleQuoteItalicText <- (!`\` "_" !"_") elements:(SingleQuoteItalicTextElements) "_" { // single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
    return types.NewQuotedText(types.Italic, elements.([]interface{}))
} / !`\\` "_" elements:("_" SingleQuoteItalicTextElements) "_" { // unbalanced `__` vs `_` punctuation.
    return types.NewQuotedText(types.Italic, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
} 

SingleQuoteItalicTextElements <- !Space SingleQuoteItalicTextElement+

SingleQuoteItalicTextElement <- Word 
        / DoubleQuoteItalicText
        / Space+ ('_' !'_')?
        / BoldText 
        / MonospaceText
        / SubscriptText
        / SuperscriptText
        / InlineImage 
        / Link  
        / Passthrough 
        / DocumentAttributeSubstitution
        / SingleQuoteItalicTextStringElement
        / SingleQuoteItalicTextFallbackCharacter

SingleQuoteItalicTextStringElement <- [^\r\n{} _^~]+ { // anything except EOL, space, bold and subscript/superscript delimiters and brackets. Excludes curly brackets to match with DocumentAttributeSubstitution elements
    return types.NewStringElement(string(c.text))
}

SingleQuoteItalicTextFallbackCharacter <- 
    [^\r\n_] // anything except EOL and italic delimiter (fallback in case nothing else matched)
    / "_" Alphanums {  // or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
    return types.NewStringElement(string(c.text))
}

EscapedItalicText <- 
    backslashes:(TwoOrMoreBackslashes) "__" elements:(DoubleQuoteItalicTextElements) "__" { // double punctuation must be evaluated first
        return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))
    } / backslashes:(OneOrMoreBackslashes) "__" elements:(SingleQuoteItalicTextElements) "_" { // unbalanced `__` vs `_` punctuation
        result := append([]interface{}{"_"}, elements.([]interface{}))
        return types.NewEscapedQuotedText(backslashes.(string), "_", result)
    } / backslashes:(OneOrMoreBackslashes) "_" elements:(SingleQuoteItalicTextElements) "_" { // simple punctuation must be evaluated last
        return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
} 

// -----------------
// Monospace text
// -----------------
MonospaceText <- DoubleQuoteMonospaceText / SingleQuoteMonospaceText

DoubleQuoteMonospaceText <- !`\\` "``" elements:(DoubleQuoteMonospaceTextElements) "``" { // double punctuation must be evaluated first
    return types.NewQuotedText(types.Monospace, elements.([]interface{}))
}

DoubleQuoteMonospaceTextElements <- DoubleQuoteMonospaceTextElement (!("``") (Space / DoubleQuoteMonospaceTextElement))* // may start and end with spaces

DoubleQuoteMonospaceTextElement <- Word 
        / SingleQuoteMonospaceText 
        / BoldText
        / ItalicText 
        / SubscriptText
        / SuperscriptText
        / InlineImage 
        / Link 
        / Passthrough 
        / DoubleQuoteMonospaceTextStringElement
        / DoubleQuoteMonospaceTextFallbackCharacter

DoubleQuoteMonospaceTextStringElement <- (!"``" [^\r\n ^~{}])+ { 
    return types.NewStringElement(string(c.text))
}

DoubleQuoteMonospaceTextFallbackCharacter <- 
    [^\r\n`] // anything except EOL and monospace delimiter (fallback in case nothing else matched)
    / "``" Alphanums {  // or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
    return types.NewStringElement(string(c.text))
}

SingleQuoteMonospaceText <- (!`\` "`" !"`") elements:(SingleQuoteMonospaceTextElements) "`" { // single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
    return types.NewQuotedText(types.Monospace, elements.([]interface{}))
} / !`\\` "`" elements:("`" SingleQuoteMonospaceTextElements) "`" { // unbalanced "``" vs "`" punctuation.
    return types.NewQuotedText(types.Monospace, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content
} 

SingleQuoteMonospaceTextElements <- !Space SingleQuoteMonospaceTextElement+

SingleQuoteMonospaceTextElement <-  Word 
        / DoubleQuoteMonospaceText 
        / Space+ ('`' !'`')?  // allow for content such as "`some `nested monospace`". Also, do not allow for double backticks after spaces.
        / Newline // allows multiline
        / BoldText
        / ItalicText
        / SubscriptText
        / SuperscriptText
        / InlineImage 
        / Link 
        / Passthrough 
        / DocumentAttributeSubstitution
        / SingleQuoteMonospaceTextStringElement
        / SingleQuoteMonospaceTextFallbackCharacter

SingleQuoteMonospaceTextStringElement <- [^\r\n {}`^~]+ { // anything except EOL, space, monospace and subscript/superscript delimiters. Excludes curly brackets to match with DocumentAttributeSubstitution elements
    return types.NewStringElement(string(c.text))
}

SingleQuoteMonospaceTextFallbackCharacter <- 
    [^\r\n`] // anything except EOL and monospace delimiter (fallback in case nothing else matched)
    / "`" Alphanums {  // or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
    return types.NewStringElement(string(c.text))
}

EscapedMonospaceText <- 
    backslashes:(TwoOrMoreBackslashes) "``" elements:(DoubleQuoteMonospaceTextElements) "``" { // double punctuation must be evaluated first
        return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))
    } / backslashes:(OneOrMoreBackslashes) "``" elements:(SingleQuoteMonospaceTextElements) "`" { // unbalanced "``" vs "`" punctuation
        result := append([]interface{}{"`"}, elements.([]interface{}))
        return types.NewEscapedQuotedText(backslashes.(string), "`", result)
    } / backslashes:(OneOrMoreBackslashes) "`" elements:(SingleQuoteMonospaceTextElements) "`" { // simple punctuation must be evaluated last
        return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))
} 

SubscriptText <- !`\` "~" element:(SubscriptTextElement) "~" { // wraps a single word
    return types.NewQuotedText(types.Subscript, element)
}

SubscriptTextElement <- QuotedText / NonSubscriptText 

NonSubscriptText <- [^\r\n ~]+ { // anything except spaces, EOL or '~'
    return c.text, nil
}

EscapedSubscriptText <- backslashes:(OneOrMoreBackslashes) "~" element:(SubscriptTextElement) "~" { // simple punctuation must be evaluated last
    return types.NewEscapedQuotedText(backslashes.(string), "~", element)
} 

SuperscriptText <- !`\` "^" element:(SuperscriptTextElement) "^" { // wraps a single word
    return types.NewQuotedText(types.Superscript, element)
}

SuperscriptTextElement <- QuotedText / NonSuperscriptText 

NonSuperscriptText <- [^\r\n ^]+ { // anything except spaces, EOL or '^'
    return c.text, nil
}

EscapedSuperscriptText <- backslashes:(OneOrMoreBackslashes) "^" element:(SuperscriptTextElement) "^" { // simple punctuation must be evaluated last
    return types.NewEscapedQuotedText(backslashes.(string), "^", element)
} 

// ------------------------------------------
// Passthrough
// ------------------------------------------
Passthrough <- TriplePlusPassthrough / SinglePlusPassthrough / PassthroughMacro

SinglePlusPassthroughPrefix <- "+"

SinglePlusPassthrough <- SinglePlusPassthroughPrefix content:(SinglePlusPassthroughContent) SinglePlusPassthroughPrefix !Alphanum {
    return types.NewPassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

SinglePlusPassthroughContent <- ((!SinglePlusPassthroughPrefix !Space !Newline .) (!(Space+ SinglePlusPassthroughPrefix) !SinglePlusPassthroughPrefix !Newline .)* { // no space in the first or last position of the content, but allowed elsewhere
    return types.NewStringElement(string(c.text))
}) / ((!Space !Newline !SinglePlusPassthroughPrefix .)  { // a single character
    return types.NewStringElement(string(c.text))
})

TriplePlusPassthroughPrefix <- "+++"

TriplePlusPassthrough <- TriplePlusPassthroughPrefix content:(TriplePlusPassthroughContent) TriplePlusPassthroughPrefix !Alphanum {
    return types.NewPassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

TriplePlusPassthroughContent <- ((!TriplePlusPassthroughPrefix .)* { // spaces and newlines are also allowed in the first or last position of the content and elsewhere too
    return types.NewStringElement(string(c.text))
}) / ((!Space !Newline !TriplePlusPassthroughPrefix .)?  { // a single character
    return types.NewStringElement(string(c.text))
})

PassthroughMacro <- "pass:[" content:(PassthroughMacroCharacter)* "]" {
    return types.NewPassthrough(types.PassthroughMacro, []interface{}{content})
} / "pass:q[" content:(QuotedText / PassthroughMacroCharacter)* "]" {
    return types.NewPassthrough(types.PassthroughMacro, content.([]interface{}))
}

PassthroughMacroCharacter <- [^\]] {
    return types.NewStringElement(string(c.text))
}

// ------------------------------------------
// Cross References
// ------------------------------------------
CrossReference <- InternalCrossReference / ExternalCrossReference 

InternalCrossReference <- "<<" id:(ID) Space* "," label:(CrossReferenceLabel) ">>" {
    return types.NewInternalCrossReference(id.(string), label.(string))
} / "<<" id:(ID) ">>" {
    return types.NewInternalCrossReference(id.(string), nil)
} 

ExternalCrossReference <- "xref:" url:(FileLocation) inlineAttributes:(LinkAttributes) {
    return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

CrossReferenceLabel <- ElementTitleContent

// ------------------------------------------
// Links
// ------------------------------------------
Link <- RelativeLink / ExternalLink

// url preceeding with `link:` MUST be followed by square brackets
RelativeLink <- "link:" url:(Location) inlineAttributes:(LinkAttributes) {
    return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

ExternalLink <- url:(LocationWithScheme) inlineAttributes:(LinkAttributes)? {
    return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

LinkAttributes <- "[" firstAttr:(FirstLinkAttributeElement)*
    Space* otherattrs:(GenericAttribute)* "]" {
    return types.NewInlineLinkAttributes(append(firstAttr.([]interface{}), otherattrs.([]interface{})...))
} 

FirstLinkAttributeElement <- element:(
    // surrounded with double quotes
    ("\"" elements:(QuotedText / QuotedAttributeChar)+ "\"" &(!"=") ","? {
        return types.NewInlineElements(elements.([]interface{}))
    }) /
    // not surrounded with double quotes
    (elements:(QuotedText / UnquotedAttributeChar)+ &(!"=") ","? {
        return types.NewInlineElements(elements.([]interface{}))
    }))  {
        return element, nil
}

AttributeChar <- [^\r\n"=\],] { // excludes comma
    return types.NewStringElement(string(c.text))
}

QuotedAttributeChar <- [^\r\n"=\]] { // does not exclude comma
    return types.NewStringElement(string(c.text))
}

UnquotedAttributeChar <- [^\r\n"=\],] { // excludes comma
    return types.NewStringElement(string(c.text))
}

// rule used after document attribute substitution, to discover links 
InlineLinks <- 
    elements:(Word
        / Space+ 
        / ResolvedLink 
        / Parenthesis
        / AnyChar
        / Newline)+ EOF {
    return types.NewInlineElements(elements.([]interface{}))
}

ResolvedLink <- ResolvedRelativeLink / ResolvedExternalLink // links without DocumentAttributeSubstitution

// url preceeding with `link:` MUST be followed by square brackets
ResolvedRelativeLink <- "link:" url:(ResolvedLocation / ResolvedFileLocation) inlineAttributes:(LinkAttributes) {
    return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

ResolvedExternalLink <- url:(ResolvedLocation) inlineAttributes:(LinkAttributes)? {
    return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

// ------------------------------------------
// Images
// ------------------------------------------
ImageBlock <- attributes:(ElementAttributes)? "image::" path:(Location) inlineAttributes:(ImageAttributes) Space* EOL {
    return types.NewImageBlock(path.(types.Location), inlineAttributes.(types.ElementAttributes), attributes)
}

InlineImage <- "image:" !":" path:(Location) inlineAttributes:(ImageAttributes) {
    return types.NewInlineImage(path.(types.Location), inlineAttributes.(types.ElementAttributes))
}

ImageAttributes <- "[" alt:(StandaloneAttributeValue)? ","? width:(StandaloneAttributeValue)? ","? height:(StandaloneAttributeValue)? ","? Space* otherattrs:(GenericAttribute)* "]" {
    return types.NewImageAttributes(alt, width, height, otherattrs.([]interface{}))
}

// ------------------------------------------------------------------------------------
// Inline foot notes
// ------------------------------------------------------------------------------------
InlineFootnote <- "footnote:[" content:(FootnoteContent) "]" {
    return types.NewFootnote("", content.([]interface{}))
} / "footnote:" ref:(FootnoteRef) "[" content:(FootnoteContent)? "]" {
    return types.NewFootnote(ref.(string), content)
}

FootnoteRef <- Alphanums

FootnoteContent <- elements:(!"]" InlineElement)+  { // footnote content may span multiple lines
    return types.NewInlineElements(elements.([]interface{}))
}

// ------------------------------------------------------------------------------------
// Delimited Blocks 
// ------------------------------------------------------------------------------------
DelimitedBlock <- !Alphanum // delimited blocks, even without attributes, never start with an alphanum
    block:(FencedBlock 
        / ListingBlock 
        / ExampleBlock 
        / VerseBlock 
        / QuoteBlock 
        / SidebarBlock
        / SingleLineComment
        / Table
        / CommentBlock) {
    return block, nil
}

BlockDelimiter <- !(Alphanum) LiteralBlockDelimiter //TODO: use "start" delimiters
                / FencedBlockDelimiter 
                / ListingBlockDelimiter 
                / ExampleBlockDelimiter 
                / CommentBlockDelimiter 
                / QuoteBlockDelimiter
                / SidebarBlockDelimiter

VerbatimContent <- FileInclusion / VerbatimLine

// -------------------------------------------------------------------------------------
// Fenced Blocks
// -------------------------------------------------------------------------------------
FencedBlockDelimiter <- "```" Space* EOL // Deprecated: use 'FencedBlockStartDelimiter' instead

FencedBlockStartDelimiter <- "```" Space* EOL

FencedBlockEndDelimiter <- ("```" Space* EOL) / EOF

FencedBlock <- attributes:(ElementAttributes)? FencedBlockStartDelimiter content:(FencedBlockVerbatimContent) FencedBlockEndDelimiter {
    return types.NewDelimitedBlock(types.Fenced, content.([]interface{}), attributes)
}

FencedBlockVerbatimContent <- (!FencedBlockEndDelimiter content:(VerbatimContent) { // at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
    return content, nil
})*

// -------------------------------------------------------------------------------------
// Listing blocks
// -------------------------------------------------------------------------------------
ListingBlockDelimiter <- "----" Space* EOL

ListingBlockStartDelimiter <- "----" Space* EOL

ListingBlockEndDelimiter <- ("----" Space* EOL) / EOF

ListingBlock <- attributes:(ElementAttributes)? ListingBlockStartDelimiter content:(ListingBlockVerbatimContent) ListingBlockEndDelimiter {
    return types.NewDelimitedBlock(types.Listing, content.([]interface{}), attributes)
}

ListingBlockVerbatimContent <- (!ListingBlockEndDelimiter content:(VerbatimContent) { // at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
    return content, nil
})*

// -------------------------------------------------------------------------------------
// Example blocks
// -------------------------------------------------------------------------------------
ExampleBlockDelimiter <- "====" Space* EOL

ExampleBlockStartDelimiter <- "====" Space* EOL

ExampleBlockEndDelimiter <- ("====" Space* EOL) / EOF

ExampleBlock <- attributes:(ElementAttributes)? ExampleBlockStartDelimiter content:(ExampleBlockVerbatimContent) ExampleBlockEndDelimiter {
    return types.NewDelimitedBlock(types.Example, content.([]interface{}), attributes)
}

ExampleBlockVerbatimContent <- (!ExampleBlockEndDelimiter content:(VerbatimContent) { // at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
    return content, nil
})*

// -------------------------------------------------------------------------------------
// Quote blocks
// -------------------------------------------------------------------------------------
QuoteBlockDelimiter <- "____" Space* EOL // same for verse blocks

QuoteBlockStartDelimiter <- "____" Space* EOL // same for verse blocks

QuoteBlockEndDelimiter <- ("____" Space* EOL) / EOF // same for verse blocks

QuoteBlock <- attributes:(ElementAttributes)? QuoteBlockStartDelimiter content:(QuoteBlockVerbatimElement) QuoteBlockEndDelimiter {
    return types.NewDelimitedBlock(types.Quote, content.([]interface{}), attributes)
}

QuoteBlockVerbatimElement <- (!QuoteBlockEndDelimiter content:(VerbatimContent) { // at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
    return content, nil
})*

// -------------------------------------------------------------------------------------
// Verse blocks
// -------------------------------------------------------------------------------------
// VerseBlockDelimiter: see QuoteBlockDelimiter

VerseBlock <- attributes:(ElementAttributes) 
    &{  
        kind := attributes.(types.ElementAttributes).GetAsString("kind") // once we got the attributes, check that `[verse]`  was set
        return kind == "verse", nil
    } 
    QuoteBlockStartDelimiter content:(VerseBlockVerbatimContent) QuoteBlockEndDelimiter {
        return types.NewDelimitedBlock(types.Verse, content.([]interface{}), attributes)
    }

VerseBlockVerbatimContent <- (!QuoteBlockEndDelimiter content:(VerbatimContent) { // at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
    return content, nil
})*

// -------------------------------------------------------------------------------------
// Sidebar blocks
// -------------------------------------------------------------------------------------
SidebarBlockDelimiter <- "****" Space* EOL

SidebarBlockStartDelimiter <- "****" Space* EOL

SidebarBlockEndDelimiter <- ("****" Space* EOL) / EOF

SidebarBlock <- attributes:(ElementAttributes)? SidebarBlockStartDelimiter content:(SidebarBlockVerbatimContent) SidebarBlockEndDelimiter {
    return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}), attributes)
}

SidebarBlockVerbatimContent <- (!SidebarBlockEndDelimiter content:(VerbatimContent) { // at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
    return content, nil
})*

// -------------------------------------------------------------------------------------
// DelimitedBlock content
// -------------------------------------------------------------------------------------

NormalBlockContent <- NormalBlockElement*

NormalBlockElement <- 
    !EOF element:(BlankLine 
            / FileInclusion
            / ImageBlock 
            / OrderedListItem 
            / UnorderedListItem 
            / LabeledListItem 
            / ContinuedListItemElement
            / DelimitedBlock
            / LiteralBlock 
            / DocumentAttributeDeclaration 
            / DocumentAttributeReset 
            / TableOfContentsPlaceHolder
            / Paragraph) {
        return element, nil
    } 

VerseBlockContent <- VerseBlockElement*

VerseBlockElement <- !EOF element:(BlankLine / VerseBlockParagraph) {
    return element, nil
}

VerseBlockParagraph <- lines:(VerseBlockParagraphLine)+ {
    return types.NewParagraph(lines.([]interface{}), nil)
} 

VerseBlockParagraphLine <- elements:(InlineElement)+ EOL {
    return types.NewInlineElements(elements)
}

// -------------------------------------------------------------------------------------
// Tables
// -------------------------------------------------------------------------------------
Table <- attributes:(ElementAttributes)? TableDelimiter
    header:(TableLineHeader)?
    lines:(TableLine)*
    (TableDelimiter / EOF) { // end delimiter or end of file
        return types.NewTable(header, lines.([]interface{}), attributes)
}

TableCellSeparator <- "|" Space*

TableDelimiter <- "|===" Space* EOL
        
// table line header is a line followed by a blankline
TableLineHeader <- !TableDelimiter cells:(TableCell)+ EOL BlankLine {
    return types.NewTableLine(cells.([]interface{}))
}

TableLine <- !TableDelimiter cells:(TableCell)+ EOL BlankLine* {
    return types.NewTableLine(cells.([]interface{}))
}

TableCell <- TableCellSeparator elements:(!TableCellSeparator !EOL Space* InlineElement Space*)+ {
    return types.NewInlineElements(elements)
}

// -------------------------------------------------------------------------------------
// Comments
// -------------------------------------------------------------------------------------
CommentBlockDelimiter <- "////" Space* EOL

CommentBlockStartDelimiter <- "////" Space* EOL

CommentBlockEndDelimiter <- ("////" Space* EOL) / EOF

CommentBlock <- CommentBlockStartDelimiter content:(CommentBlockVerbatimContent)  CommentBlockEndDelimiter {
    return types.NewDelimitedBlock(types.Comment, content.([]interface{}), nil)
}

CommentBlockVerbatimContent <- (!CommentBlockEndDelimiter content:(VerbatimContent) { // at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
    return content, nil
})*

SingleLineComment <- !CommentBlockDelimiter Space* "//" content:(SingleLineCommentContent) EOL {
    return types.NewSingleLineComment(content.(string))
}

SingleLineCommentContent <- [^\r\n]* {
    return string(c.text), nil
}


// -------------------------------------------------------------------------------------
// Literal Blocks (see http://asciidoctor.org/docs/user-manual/#literal-text-and-blocks)
// -------------------------------------------------------------------------------------
LiteralBlock <- ParagraphWithLiteralAttribute / ParagraphWithHeadingSpaces / ParagraphWithLiteralBlockDelimiter

LiteralBlockDelimiter <- "...."

// paragraph indented with one or more spaces on the first line
ParagraphWithHeadingSpaces <- attributes:(ElementAttributes)? lines:(ParagraphWithHeadingSpacesLines) {
    return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

// first line MUST start with one (or more) space. Stop when reaching a blank line
ParagraphWithHeadingSpacesLines <- 
    firstLine:(Space+ [^\r\n]+ {
        return string(c.text), nil
    }) EOL // do not include the trailing 'EOL' on the first line
    otherLines:(
        !BlankLine 
        otherLine:([^\r\n]+ {
            return string(c.text), nil
        }) EOL {
            return otherLine, nil // do not include the trailing 'EOL'
        })* { 
    return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

// paragraph with the literal block delimiter (`....`)
ParagraphWithLiteralBlockDelimiter <- attributes:(ElementAttributes)?
        LiteralBlockDelimiter Space* Newline lines:(ParagraphWithLiteralBlockDelimiterLines) ((LiteralBlockDelimiter Space* EOL) / EOF) {
    return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

// include all lines until delimiter is reached
ParagraphWithLiteralBlockDelimiterLines <- lines:(ParagraphWithLiteralBlockDelimiterLine)* {
    return lines.([]interface{}), nil
}

ParagraphWithLiteralBlockDelimiterLine <-         
    line:(!LiteralBlockDelimiter [^\r\n]* {
        return string(c.text), nil
    }) EOL { 
        return line, nil // do not include the trailing 'EOL'
}

// paragraph with the literal attribute (`[literal]`)
ParagraphWithLiteralAttribute <- 
    attributes:(ElementAttributes)?
    &{
        if attrs, ok := attributes.(types.ElementAttributes); ok {
            kind, ok := attrs[types.AttrKind]
            return ok && kind == types.Literal, nil
        }
        return false, nil
    }
    lines:(ParagraphWithLiteralAttributeLines) {
        return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)
    }

LiteralKind <- "literal" {
    return string(c.text), nil
}

// include all lines until blankline
ParagraphWithLiteralAttributeLines <- lines:(ParagraphWithLiteralAttributeLine)+ { 
    return lines.([]interface{}), nil
}

ParagraphWithLiteralAttributeLine <- !BlankLine content:([^\r\n]+ {
    return string(c.text), nil
}) EOL {
    return content.(string), nil // do not include the trailing 'EOL'
}

// ------------------------------------------
// Index Terms
// ------------------------------------------
IndexTerm <- "((" term:(IndexTermContent) "))" {
       return types.NewIndexTerm(term.([]interface{}))
}

IndexTermContent <- elements:(Word / QuotedText / Space / (!"))" .) {
    return string(c.text), nil
})+ {
    return types.NewInlineElements(elements.([]interface{}))
}

ConcealedIndexTerm <- "(((" term1:(ConcealedIndexTermContent) 
    term2:(Space* "," Space* content:(ConcealedIndexTermContent) { return content, nil })? 
    term3:(Space* "," Space* content:(ConcealedIndexTermContent) { return content, nil })? 
    ")))" {
        return types.NewConcealedIndexTerm(term1, term2, term3)
    }

ConcealedIndexTermContent <- (Alphanum / Space)+ {
    return string(c.text), nil
}

// ------------------------------------------
// BlankLine
// ------------------------------------------
BlankLine <- !EOF Space* EOL {
    return types.NewBlankLine()
}

// ------------------------------------------
// Base Types
// ------------------------------------------
Alphanum <- [\pL0-9]

Parenthesis <- "(" / ")" / "[" / "]" / "{" / "}" 

Alphanums <- [\pL0-9]+ {
    return string(c.text), nil
}

Word <- 
    // very straightforward content: alphanums followed by attached simple quote delimiter and more characters 
    // (in this case, the quoted text delimiters are intepreted as regular characters)
    // then followed by spaces but not the "+" signs because it needs a heading space to become a LineBreak element
    [\pL0-9]+ &([\r\n ,\]] / EOF) { 
        return types.NewStringElement(string(c.text))
    } / [\pL0-9]+ ([=*_`] [\pL0-9]+)+ { 
        return types.NewStringElement(string(c.text))
    }

InlineWord <- // same as word, but may also contain some punctuation markers
    [\pL0-9,.?!;]+ &([\r\n ] / EOF) { 
        return types.NewStringElement(string(c.text))
    } / Word

// this is a fall-back rule in case all preceeding rules failed to match the current content.
AnyChar <- [^\r\n] { // this is a fall-back rule in case all preceeding rules failed to match the current content.
    return types.NewStringElement(string(c.text))
} 

FileLocation <- path:(FILENAME / DocumentAttributeSubstitution)+ {
    return types.NewLocation("", path.([]interface{}))
}

ResolvedFileLocation <- path:([^\r\n [])+ {
    return types.NewLocation("", path.([]interface{}))
}

Location <- scheme:(URL_SCHEME)? path:(FILENAME / DocumentAttributeSubstitution)+ {
    return types.NewLocation(scheme, path.([]interface{}))
}

LocationWithScheme <- scheme:(URL_SCHEME) path:(FILENAME / DocumentAttributeSubstitution)+ {
    return types.NewLocation(scheme, path.([]interface{}))
}

FILENAME <- ([^\r\n{}[\] ])+ // not supported for now: EOL, space, "[", "]", "{" and "}" as they may be used for document attribute substitutions

ResolvedLocation <- scheme:(URL_SCHEME) path:(RESOLVED_FILENAME) {
    return types.NewLocation(scheme, path.([]interface{}))
}

//RESOLVED_FILENAME <- ([ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789~:/?#@!$&;=()*+_,%{}] / "-" / ".")+ // here, `{` and `}` are valid characters
RESOLVED_FILENAME <- ([^\r\n[\] ])+ // not supported for now: EOL, space, "[", "]", "{" and "}" as they may be used for document attribute substitutions

URL <-  [^\r\n[\]]+ {
    return string(c.text), nil
}

URL_SCHEME <- "http://" / "https://" / "ftp://" / "irc://" / "mailto:"

ID <- [^[\]<>,]+ { // previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
    return string(c.text), nil
}

DIGIT <- [0-9] {
    return string(c.text), nil
}

NUMBER <- "-"? DIGIT+ {
    return strconv.Atoi(string(c.text))
}

Space <- " " / "\t" {
    return string(c.text), nil
}

Newline <- "\r\n" / "\r" / "\n"

EOF <- !.

EOL <- Newline / EOF